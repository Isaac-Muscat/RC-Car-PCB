
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb10  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800fda8  0800fda8  00010da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fe30  0800fe30  00010e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fe38  0800fe38  00010e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800fe3c  0800fe3c  00010e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000104  24000000  0800fe40  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001fb8  24000104  0800ff44  00011104  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240020bc  0800ff44  000120bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011104  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027788  00000000  00000000  00011132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004aa7  00000000  00000000  000388ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001db0  00000000  00000000  0003d368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001722  00000000  00000000  0003f118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bdde  00000000  00000000  0004083a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a063  00000000  00000000  0007c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016e438  00000000  00000000  000a667b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00214ab3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007f94  00000000  00000000  00214af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  0021ca8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000104 	.word	0x24000104
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800fd90 	.word	0x0800fd90

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000108 	.word	0x24000108
 80002d4:	0800fd90 	.word	0x0800fd90

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000608:	f000 fcd0 	bl	8000fac <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f001 fa6a 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f84c 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fc12 	bl	8000e3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000618:	f000 fbf0 	bl	8000dfc <MX_DMA_Init>
  MX_USART1_UART_Init();
 800061c:	f000 fba2 	bl	8000d64 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000620:	f00e fe44 	bl	800f2ac <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 8000624:	f000 f8be 	bl	80007a4 <MX_DCMI_Init>
  MX_I2C2_Init();
 8000628:	f000 f8f0 	bl	800080c <MX_I2C2_Init>
  MX_TIM14_Init();
 800062c:	f000 fb4e 	bl	8000ccc <MX_TIM14_Init>
  MX_TIM2_Init();
 8000630:	f000 fa10 	bl	8000a54 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000634:	f000 fae4 	bl	8000c00 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000638:	f000 f97e 	bl	8000938 <MX_TIM1_Init>
  MX_TIM3_Init();
 800063c:	f000 fa7a 	bl	8000b34 <MX_TIM3_Init>
  MX_SPI2_Init();
 8000640:	f000 f924 	bl	800088c <MX_SPI2_Init>
//  CAM_GetRegister(0x15, &cam_regCache, 1);
//  cam_regCache |= 0b01000000;
//  CAM_SetRegister(0x15, cam_regCache, 1);

  // Setup Motor
  TIM2->CCR1 = 0;
 8000644:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000648:	2200      	movs	r2, #0
 800064a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2->CCR2 = 400;
 800064c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000650:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000654:	639a      	str	r2, [r3, #56]	@ 0x38

  TIM4->CCR4 = 0;
 8000656:	4b11      	ldr	r3, [pc, #68]	@ (800069c <main+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM4->CCR3 = 400;
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <main+0x98>)
 800065e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000662:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // LEFT_PWM_1
 8000664:	2100      	movs	r1, #0
 8000666:	480e      	ldr	r0, [pc, #56]	@ (80006a0 <main+0x9c>)
 8000668:	f009 f9ce 	bl	8009a08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // RIGHT_PWM_1
 800066c:	2104      	movs	r1, #4
 800066e:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <main+0x9c>)
 8000670:	f009 f9ca 	bl	8009a08 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // LEFT_PWM_2
 8000674:	210c      	movs	r1, #12
 8000676:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <main+0xa0>)
 8000678:	f009 f9c6 	bl	8009a08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RIGHT_PWM_2
 800067c:	2108      	movs	r1, #8
 800067e:	4809      	ldr	r0, [pc, #36]	@ (80006a4 <main+0xa0>)
 8000680:	f009 f9c2 	bl	8009a08 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // LIGHTS_PWM_2
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // LIGHTS_PWM_3
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // LIGHTS_PWM_4

  // Delay for goofiness
  HAL_Delay(3000);
 8000684:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000688:	f001 fabe 	bl	8001c08 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); //Motor_en
 800068c:	2200      	movs	r2, #0
 800068e:	2108      	movs	r1, #8
 8000690:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <main+0xa4>)
 8000692:	f003 fe79 	bl	8004388 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	bf00      	nop
 8000698:	e7fd      	b.n	8000696 <main+0x92>
 800069a:	bf00      	nop
 800069c:	40000800 	.word	0x40000800
 80006a0:	24000310 	.word	0x24000310
 80006a4:	240003a8 	.word	0x240003a8
 80006a8:	58020000 	.word	0x58020000

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09c      	sub	sp, #112	@ 0x70
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b6:	224c      	movs	r2, #76	@ 0x4c
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f00f fb3c 	bl	800fd38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2220      	movs	r2, #32
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00f fb36 	bl	800fd38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006cc:	2002      	movs	r0, #2
 80006ce:	f006 f951 	bl	8006974 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b31      	ldr	r3, [pc, #196]	@ (800079c <SystemClock_Config+0xf0>)
 80006d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006da:	4a30      	ldr	r2, [pc, #192]	@ (800079c <SystemClock_Config+0xf0>)
 80006dc:	f023 0301 	bic.w	r3, r3, #1
 80006e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006e2:	4b2e      	ldr	r3, [pc, #184]	@ (800079c <SystemClock_Config+0xf0>)
 80006e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	4b2c      	ldr	r3, [pc, #176]	@ (80007a0 <SystemClock_Config+0xf4>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006f4:	4a2a      	ldr	r2, [pc, #168]	@ (80007a0 <SystemClock_Config+0xf4>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b28      	ldr	r3, [pc, #160]	@ (80007a0 <SystemClock_Config+0xf4>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000708:	bf00      	nop
 800070a:	4b25      	ldr	r3, [pc, #148]	@ (80007a0 <SystemClock_Config+0xf4>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000716:	d1f8      	bne.n	800070a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000718:	2301      	movs	r3, #1
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000720:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	2302      	movs	r3, #2
 8000728:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800072e:	230c      	movs	r3, #12
 8000730:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000736:	2303      	movs	r3, #3
 8000738:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800073e:	230c      	movs	r3, #12
 8000740:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000742:	2302      	movs	r3, #2
 8000744:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800074e:	4618      	mov	r0, r3
 8000750:	f006 f95a 	bl	8006a08 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800075a:	f000 fc53 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	233f      	movs	r3, #63	@ 0x3f
 8000760:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2303      	movs	r3, #3
 8000764:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000776:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800077a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2101      	movs	r1, #1
 8000784:	4618      	mov	r0, r3
 8000786:	f006 fd99 	bl	80072bc <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000790:	f000 fc38 	bl	8001004 <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3770      	adds	r7, #112	@ 0x70
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	58000400 	.word	0x58000400
 80007a0:	58024800 	.word	0x58024800

080007a4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80007a8:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <MX_DCMI_Init+0x60>)
 80007aa:	4a17      	ldr	r2, [pc, #92]	@ (8000808 <MX_DCMI_Init+0x64>)
 80007ac:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <MX_DCMI_Init+0x60>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_DCMI_Init+0x60>)
 80007b6:	2220      	movs	r2, #32
 80007b8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <MX_DCMI_Init+0x60>)
 80007bc:	2280      	movs	r2, #128	@ 0x80
 80007be:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80007c0:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <MX_DCMI_Init+0x60>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_DCMI_Init+0x60>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <MX_DCMI_Init+0x60>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_DCMI_Init+0x60>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <MX_DCMI_Init+0x60>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_DCMI_Init+0x60>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <MX_DCMI_Init+0x60>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_DCMI_Init+0x60>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_DCMI_Init+0x60>)
 80007f2:	f001 fbc1 	bl	8001f78 <HAL_DCMI_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80007fc:	f000 fc02 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	24000120 	.word	0x24000120
 8000808:	48020000 	.word	0x48020000

0800080c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000810:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_I2C2_Init+0x74>)
 8000812:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <MX_I2C2_Init+0x78>)
 8000814:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000816:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_I2C2_Init+0x74>)
 8000818:	4a1b      	ldr	r2, [pc, #108]	@ (8000888 <MX_I2C2_Init+0x7c>)
 800081a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800081c:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_I2C2_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_I2C2_Init+0x74>)
 8000824:	2201      	movs	r2, #1
 8000826:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <MX_I2C2_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800082e:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_I2C2_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_I2C2_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_I2C2_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_I2C2_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000846:	480e      	ldr	r0, [pc, #56]	@ (8000880 <MX_I2C2_Init+0x74>)
 8000848:	f003 fdb8 	bl	80043bc <HAL_I2C_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000852:	f000 fbd7 	bl	8001004 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000856:	2100      	movs	r1, #0
 8000858:	4809      	ldr	r0, [pc, #36]	@ (8000880 <MX_I2C2_Init+0x74>)
 800085a:	f004 fd54 	bl	8005306 <HAL_I2CEx_ConfigAnalogFilter>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000864:	f000 fbce 	bl	8001004 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000868:	2100      	movs	r1, #0
 800086a:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_I2C2_Init+0x74>)
 800086c:	f004 fd96 	bl	800539c <HAL_I2CEx_ConfigDigitalFilter>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000876:	f000 fbc5 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	240001e8 	.word	0x240001e8
 8000884:	40005800 	.word	0x40005800
 8000888:	00c0eaff 	.word	0x00c0eaff

0800088c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000890:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <MX_SPI2_Init+0xa4>)
 8000892:	4a28      	ldr	r2, [pc, #160]	@ (8000934 <MX_SPI2_Init+0xa8>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000896:	4b26      	ldr	r3, [pc, #152]	@ (8000930 <MX_SPI2_Init+0xa4>)
 8000898:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800089c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800089e:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008a6:	2203      	movs	r2, #3
 80008a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008aa:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008b8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80008bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008be:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80008d6:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008e4:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_SPI2_Init+0xa4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_SPI2_Init+0xa4>)
 8000904:	2200      	movs	r2, #0
 8000906:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_SPI2_Init+0xa4>)
 800090a:	2200      	movs	r2, #0
 800090c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_SPI2_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_SPI2_Init+0xa4>)
 8000916:	2200      	movs	r2, #0
 8000918:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_SPI2_Init+0xa4>)
 800091c:	f008 fe86 	bl	800962c <HAL_SPI_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000926:	f000 fb6d 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2400023c 	.word	0x2400023c
 8000934:	40003800 	.word	0x40003800

08000938 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b096      	sub	sp, #88	@ 0x58
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	222c      	movs	r2, #44	@ 0x2c
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f00f f9e7 	bl	800fd38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800096a:	4b38      	ldr	r3, [pc, #224]	@ (8000a4c <MX_TIM1_Init+0x114>)
 800096c:	4a38      	ldr	r2, [pc, #224]	@ (8000a50 <MX_TIM1_Init+0x118>)
 800096e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000970:	4b36      	ldr	r3, [pc, #216]	@ (8000a4c <MX_TIM1_Init+0x114>)
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b35      	ldr	r3, [pc, #212]	@ (8000a4c <MX_TIM1_Init+0x114>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 800097c:	4b33      	ldr	r3, [pc, #204]	@ (8000a4c <MX_TIM1_Init+0x114>)
 800097e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000982:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b31      	ldr	r3, [pc, #196]	@ (8000a4c <MX_TIM1_Init+0x114>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800098a:	4b30      	ldr	r3, [pc, #192]	@ (8000a4c <MX_TIM1_Init+0x114>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b2e      	ldr	r3, [pc, #184]	@ (8000a4c <MX_TIM1_Init+0x114>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000996:	482d      	ldr	r0, [pc, #180]	@ (8000a4c <MX_TIM1_Init+0x114>)
 8000998:	f008 ffde 	bl	8009958 <HAL_TIM_PWM_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009a2:	f000 fb2f 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009b6:	4619      	mov	r1, r3
 80009b8:	4824      	ldr	r0, [pc, #144]	@ (8000a4c <MX_TIM1_Init+0x114>)
 80009ba:	f009 ff1d 	bl	800a7f8 <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009c4:	f000 fb1e 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c8:	2360      	movs	r3, #96	@ 0x60
 80009ca:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d0:	2300      	movs	r3, #0
 80009d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009e4:	220c      	movs	r2, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	4818      	ldr	r0, [pc, #96]	@ (8000a4c <MX_TIM1_Init+0x114>)
 80009ea:	f009 fa23 	bl	8009e34 <HAL_TIM_PWM_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80009f4:	f000 fb06 	bl	8001004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4807      	ldr	r0, [pc, #28]	@ (8000a4c <MX_TIM1_Init+0x114>)
 8000a2e:	f009 ff71 	bl	800a914 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000a38:	f000 fae4 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a3c:	4803      	ldr	r0, [pc, #12]	@ (8000a4c <MX_TIM1_Init+0x114>)
 8000a3e:	f000 fdbd 	bl	80015bc <HAL_TIM_MspPostInit>

}
 8000a42:	bf00      	nop
 8000a44:	3758      	adds	r7, #88	@ 0x58
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	240002c4 	.word	0x240002c4
 8000a50:	40010000 	.word	0x40010000

08000a54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a78:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <MX_TIM2_Init+0xdc>)
 8000a7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a80:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <MX_TIM2_Init+0xdc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <MX_TIM2_Init+0xdc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000a8c:	4b28      	ldr	r3, [pc, #160]	@ (8000b30 <MX_TIM2_Init+0xdc>)
 8000a8e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000a92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a94:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <MX_TIM2_Init+0xdc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9a:	4b25      	ldr	r3, [pc, #148]	@ (8000b30 <MX_TIM2_Init+0xdc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aa0:	4823      	ldr	r0, [pc, #140]	@ (8000b30 <MX_TIM2_Init+0xdc>)
 8000aa2:	f008 ff59 	bl	8009958 <HAL_TIM_PWM_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000aac:	f000 faaa 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	481c      	ldr	r0, [pc, #112]	@ (8000b30 <MX_TIM2_Init+0xdc>)
 8000ac0:	f009 fe9a 	bl	800a7f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000aca:	f000 fa9b 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ace:	2360      	movs	r3, #96	@ 0x60
 8000ad0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4812      	ldr	r0, [pc, #72]	@ (8000b30 <MX_TIM2_Init+0xdc>)
 8000ae6:	f009 f9a5 	bl	8009e34 <HAL_TIM_PWM_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000af0:	f000 fa88 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	2204      	movs	r2, #4
 8000af8:	4619      	mov	r1, r3
 8000afa:	480d      	ldr	r0, [pc, #52]	@ (8000b30 <MX_TIM2_Init+0xdc>)
 8000afc:	f009 f99a 	bl	8009e34 <HAL_TIM_PWM_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000b06:	f000 fa7d 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2208      	movs	r2, #8
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4807      	ldr	r0, [pc, #28]	@ (8000b30 <MX_TIM2_Init+0xdc>)
 8000b12:	f009 f98f 	bl	8009e34 <HAL_TIM_PWM_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000b1c:	f000 fa72 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b20:	4803      	ldr	r0, [pc, #12]	@ (8000b30 <MX_TIM2_Init+0xdc>)
 8000b22:	f000 fd4b 	bl	80015bc <HAL_TIM_MspPostInit>

}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	@ 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	24000310 	.word	0x24000310

08000b34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	@ 0x28
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b58:	4b27      	ldr	r3, [pc, #156]	@ (8000bf8 <MX_TIM3_Init+0xc4>)
 8000b5a:	4a28      	ldr	r2, [pc, #160]	@ (8000bfc <MX_TIM3_Init+0xc8>)
 8000b5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b5e:	4b26      	ldr	r3, [pc, #152]	@ (8000bf8 <MX_TIM3_Init+0xc4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <MX_TIM3_Init+0xc4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000b6a:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <MX_TIM3_Init+0xc4>)
 8000b6c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000b70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b72:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <MX_TIM3_Init+0xc4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <MX_TIM3_Init+0xc4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b7e:	481e      	ldr	r0, [pc, #120]	@ (8000bf8 <MX_TIM3_Init+0xc4>)
 8000b80:	f008 feea 	bl	8009958 <HAL_TIM_PWM_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000b8a:	f000 fa3b 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4816      	ldr	r0, [pc, #88]	@ (8000bf8 <MX_TIM3_Init+0xc4>)
 8000b9e:	f009 fe2b 	bl	800a7f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ba8:	f000 fa2c 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bac:	2360      	movs	r3, #96	@ 0x60
 8000bae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	2208      	movs	r2, #8
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480d      	ldr	r0, [pc, #52]	@ (8000bf8 <MX_TIM3_Init+0xc4>)
 8000bc4:	f009 f936 	bl	8009e34 <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000bce:	f000 fa19 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	220c      	movs	r2, #12
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4807      	ldr	r0, [pc, #28]	@ (8000bf8 <MX_TIM3_Init+0xc4>)
 8000bda:	f009 f92b 	bl	8009e34 <HAL_TIM_PWM_ConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000be4:	f000 fa0e 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000be8:	4803      	ldr	r0, [pc, #12]	@ (8000bf8 <MX_TIM3_Init+0xc4>)
 8000bea:	f000 fce7 	bl	80015bc <HAL_TIM_MspPostInit>

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	@ 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2400035c 	.word	0x2400035c
 8000bfc:	40000400 	.word	0x40000400

08000c00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	@ 0x28
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c12:	463b      	mov	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
 8000c20:	615a      	str	r2, [r3, #20]
 8000c22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c24:	4b27      	ldr	r3, [pc, #156]	@ (8000cc4 <MX_TIM4_Init+0xc4>)
 8000c26:	4a28      	ldr	r2, [pc, #160]	@ (8000cc8 <MX_TIM4_Init+0xc8>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c2a:	4b26      	ldr	r3, [pc, #152]	@ (8000cc4 <MX_TIM4_Init+0xc4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b24      	ldr	r3, [pc, #144]	@ (8000cc4 <MX_TIM4_Init+0xc4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000c36:	4b23      	ldr	r3, [pc, #140]	@ (8000cc4 <MX_TIM4_Init+0xc4>)
 8000c38:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <MX_TIM4_Init+0xc4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <MX_TIM4_Init+0xc4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c4a:	481e      	ldr	r0, [pc, #120]	@ (8000cc4 <MX_TIM4_Init+0xc4>)
 8000c4c:	f008 fe84 	bl	8009958 <HAL_TIM_PWM_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000c56:	f000 f9d5 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	4816      	ldr	r0, [pc, #88]	@ (8000cc4 <MX_TIM4_Init+0xc4>)
 8000c6a:	f009 fdc5 	bl	800a7f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000c74:	f000 f9c6 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c78:	2360      	movs	r3, #96	@ 0x60
 8000c7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	2208      	movs	r2, #8
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <MX_TIM4_Init+0xc4>)
 8000c90:	f009 f8d0 	bl	8009e34 <HAL_TIM_PWM_ConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000c9a:	f000 f9b3 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	220c      	movs	r2, #12
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4807      	ldr	r0, [pc, #28]	@ (8000cc4 <MX_TIM4_Init+0xc4>)
 8000ca6:	f009 f8c5 	bl	8009e34 <HAL_TIM_PWM_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000cb0:	f000 f9a8 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000cb4:	4803      	ldr	r0, [pc, #12]	@ (8000cc4 <MX_TIM4_Init+0xc4>)
 8000cb6:	f000 fc81 	bl	80015bc <HAL_TIM_MspPostInit>

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	@ 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	240003a8 	.word	0x240003a8
 8000cc8:	40000800 	.word	0x40000800

08000ccc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
 8000ce0:	615a      	str	r2, [r3, #20]
 8000ce2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <MX_TIM14_Init+0x90>)
 8000ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d60 <MX_TIM14_Init+0x94>)
 8000ce8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <MX_TIM14_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_TIM14_Init+0x90>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <MX_TIM14_Init+0x90>)
 8000cf8:	2205      	movs	r2, #5
 8000cfa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <MX_TIM14_Init+0x90>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d02:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <MX_TIM14_Init+0x90>)
 8000d04:	2280      	movs	r2, #128	@ 0x80
 8000d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d08:	4814      	ldr	r0, [pc, #80]	@ (8000d5c <MX_TIM14_Init+0x90>)
 8000d0a:	f008 fdce 	bl	80098aa <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8000d14:	f000 f976 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000d18:	4810      	ldr	r0, [pc, #64]	@ (8000d5c <MX_TIM14_Init+0x90>)
 8000d1a:	f008 fe1d 	bl	8009958 <HAL_TIM_PWM_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8000d24:	f000 f96e 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d28:	2360      	movs	r3, #96	@ 0x60
 8000d2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4807      	ldr	r0, [pc, #28]	@ (8000d5c <MX_TIM14_Init+0x90>)
 8000d40:	f009 f878 	bl	8009e34 <HAL_TIM_PWM_ConfigChannel>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8000d4a:	f000 f95b 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000d4e:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <MX_TIM14_Init+0x90>)
 8000d50:	f000 fc34 	bl	80015bc <HAL_TIM_MspPostInit>

}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	240003f4 	.word	0x240003f4
 8000d60:	40002000 	.word	0x40002000

08000d64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d68:	4b22      	ldr	r3, [pc, #136]	@ (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d6a:	4a23      	ldr	r2, [pc, #140]	@ (8000df8 <MX_USART1_UART_Init+0x94>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <MX_USART1_UART_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_USART1_UART_Init+0x90>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <MX_USART1_UART_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dac:	4811      	ldr	r0, [pc, #68]	@ (8000df4 <MX_USART1_UART_Init+0x90>)
 8000dae:	f009 fe4d 	bl	800aa4c <HAL_UART_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000db8:	f000 f924 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <MX_USART1_UART_Init+0x90>)
 8000dc0:	f00a fe55 	bl	800ba6e <HAL_UARTEx_SetTxFifoThreshold>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dca:	f000 f91b 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4808      	ldr	r0, [pc, #32]	@ (8000df4 <MX_USART1_UART_Init+0x90>)
 8000dd2:	f00a fe8a 	bl	800baea <HAL_UARTEx_SetRxFifoThreshold>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ddc:	f000 f912 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000de0:	4804      	ldr	r0, [pc, #16]	@ (8000df4 <MX_USART1_UART_Init+0x90>)
 8000de2:	f00a fe0b 	bl	800b9fc <HAL_UARTEx_DisableFifoMode>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000dec:	f000 f90a 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	24000440 	.word	0x24000440
 8000df8:	40011000 	.word	0x40011000

08000dfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e02:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <MX_DMA_Init+0x3c>)
 8000e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e08:	4a0b      	ldr	r2, [pc, #44]	@ (8000e38 <MX_DMA_Init+0x3c>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e12:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <MX_DMA_Init+0x3c>)
 8000e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	200b      	movs	r0, #11
 8000e26:	f000 fffa 	bl	8001e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e2a:	200b      	movs	r0, #11
 8000e2c:	f001 f811 	bl	8001e52 <HAL_NVIC_EnableIRQ>

}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	58024400 	.word	0x58024400

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	@ 0x30
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e52:	4b52      	ldr	r3, [pc, #328]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e58:	4a50      	ldr	r2, [pc, #320]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e62:	4b4e      	ldr	r3, [pc, #312]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e70:	4b4a      	ldr	r3, [pc, #296]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e76:	4a49      	ldr	r2, [pc, #292]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e80:	4b46      	ldr	r3, [pc, #280]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8e:	4b43      	ldr	r3, [pc, #268]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e94:	4a41      	ldr	r2, [pc, #260]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e9e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b3b      	ldr	r3, [pc, #236]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb2:	4a3a      	ldr	r2, [pc, #232]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ebc:	4b37      	ldr	r3, [pc, #220]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	4b34      	ldr	r3, [pc, #208]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed0:	4a32      	ldr	r2, [pc, #200]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eda:	4b30      	ldr	r3, [pc, #192]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eee:	4a2b      	ldr	r2, [pc, #172]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef8:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <MX_GPIO_Init+0x160>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000f0c:	4824      	ldr	r0, [pc, #144]	@ (8000fa0 <MX_GPIO_Init+0x164>)
 8000f0e:	f003 fa3b 	bl	8004388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2108      	movs	r1, #8
 8000f16:	4823      	ldr	r0, [pc, #140]	@ (8000fa4 <MX_GPIO_Init+0x168>)
 8000f18:	f003 fa36 	bl	8004388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4821      	ldr	r0, [pc, #132]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000f22:	f003 fa31 	bl	8004388 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f26:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4818      	ldr	r0, [pc, #96]	@ (8000fa0 <MX_GPIO_Init+0x164>)
 8000f40:	f003 f872 	bl	8004028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	4812      	ldr	r0, [pc, #72]	@ (8000fa0 <MX_GPIO_Init+0x164>)
 8000f58:	f003 f866 	bl	8004028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <MX_GPIO_Init+0x168>)
 8000f74:	f003 f858 	bl	8004028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	@ (8000fa8 <MX_GPIO_Init+0x16c>)
 8000f90:	f003 f84a 	bl	8004028 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f94:	bf00      	nop
 8000f96:	3730      	adds	r7, #48	@ 0x30
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	58020800 	.word	0x58020800
 8000fa4:	58020000 	.word	0x58020000
 8000fa8:	58020c00 	.word	0x58020c00

08000fac <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fbe:	f000 ff63 	bl	8001e88 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fce:	231f      	movs	r3, #31
 8000fd0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fd2:	2387      	movs	r3, #135	@ 0x87
 8000fd4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 ff81 	bl	8001ef8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ff6:	2004      	movs	r0, #4
 8000ff8:	f000 ff5e 	bl	8001eb8 <HAL_MPU_Enable>

}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <Error_Handler+0x8>

08001010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <HAL_MspInit+0x30>)
 8001018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800101c:	4a08      	ldr	r2, [pc, #32]	@ (8001040 <HAL_MspInit+0x30>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_MspInit+0x30>)
 8001028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	58024400 	.word	0x58024400

08001044 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	@ 0x38
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a79      	ldr	r2, [pc, #484]	@ (8001248 <HAL_DCMI_MspInit+0x204>)
 8001062:	4293      	cmp	r3, r2
 8001064:	f040 80ec 	bne.w	8001240 <HAL_DCMI_MspInit+0x1fc>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001068:	4b78      	ldr	r3, [pc, #480]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 800106a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800106e:	4a77      	ldr	r2, [pc, #476]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001078:	4b74      	ldr	r3, [pc, #464]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 800107a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	623b      	str	r3, [r7, #32]
 8001084:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001086:	4b71      	ldr	r3, [pc, #452]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108c:	4a6f      	ldr	r2, [pc, #444]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 800108e:	f043 0310 	orr.w	r3, r3, #16
 8001092:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001096:	4b6d      	ldr	r3, [pc, #436]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b69      	ldr	r3, [pc, #420]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010aa:	4a68      	ldr	r2, [pc, #416]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b4:	4b65      	ldr	r3, [pc, #404]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	4b62      	ldr	r3, [pc, #392]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c8:	4a60      	ldr	r2, [pc, #384]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d2:	4b5e      	ldr	r3, [pc, #376]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e0:	4b5a      	ldr	r3, [pc, #360]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e6:	4a59      	ldr	r2, [pc, #356]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f0:	4b56      	ldr	r3, [pc, #344]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4b53      	ldr	r3, [pc, #332]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001104:	4a51      	ldr	r2, [pc, #324]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110e:	4b4f      	ldr	r3, [pc, #316]	@ (800124c <HAL_DCMI_MspInit+0x208>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 800111c:	2373      	movs	r3, #115	@ 0x73
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800112c:	230d      	movs	r3, #13
 800112e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001130:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001134:	4619      	mov	r1, r3
 8001136:	4846      	ldr	r0, [pc, #280]	@ (8001250 <HAL_DCMI_MspInit+0x20c>)
 8001138:	f002 ff76 	bl	8004028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800113c:	2350      	movs	r3, #80	@ 0x50
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800114c:	230d      	movs	r3, #13
 800114e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001154:	4619      	mov	r1, r3
 8001156:	483f      	ldr	r0, [pc, #252]	@ (8001254 <HAL_DCMI_MspInit+0x210>)
 8001158:	f002 ff66 	bl	8004028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800115c:	23c0      	movs	r3, #192	@ 0xc0
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800116c:	230d      	movs	r3, #13
 800116e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001170:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001174:	4619      	mov	r1, r3
 8001176:	4838      	ldr	r0, [pc, #224]	@ (8001258 <HAL_DCMI_MspInit+0x214>)
 8001178:	f002 ff56 	bl	8004028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800117c:	2308      	movs	r3, #8
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800118c:	230d      	movs	r3, #13
 800118e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001194:	4619      	mov	r1, r3
 8001196:	4831      	ldr	r0, [pc, #196]	@ (800125c <HAL_DCMI_MspInit+0x218>)
 8001198:	f002 ff46 	bl	8004028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800119c:	2380      	movs	r3, #128	@ 0x80
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011ac:	230d      	movs	r3, #13
 80011ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b4:	4619      	mov	r1, r3
 80011b6:	482a      	ldr	r0, [pc, #168]	@ (8001260 <HAL_DCMI_MspInit+0x21c>)
 80011b8:	f002 ff36 	bl	8004028 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80011bc:	4b29      	ldr	r3, [pc, #164]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 80011be:	4a2a      	ldr	r2, [pc, #168]	@ (8001268 <HAL_DCMI_MspInit+0x224>)
 80011c0:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80011c2:	4b28      	ldr	r3, [pc, #160]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 80011c4:	224b      	movs	r2, #75	@ 0x4b
 80011c6:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c8:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ce:	4b25      	ldr	r3, [pc, #148]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80011d4:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 80011d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011da:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011dc:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 80011de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011e2:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 80011e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ea:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 80011ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011f2:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 80011f6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011fa:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011fc:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 80011fe:	2204      	movs	r2, #4
 8001200:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001202:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 8001204:	2203      	movs	r2, #3
 8001206:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001208:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 800120a:	2200      	movs	r2, #0
 800120c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 8001210:	2200      	movs	r2, #0
 8001212:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001214:	4813      	ldr	r0, [pc, #76]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 8001216:	f000 fff1 	bl	80021fc <HAL_DMA_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 8001220:	f7ff fef0 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a0f      	ldr	r2, [pc, #60]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 8001228:	649a      	str	r2, [r3, #72]	@ 0x48
 800122a:	4a0e      	ldr	r2, [pc, #56]	@ (8001264 <HAL_DCMI_MspInit+0x220>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	204e      	movs	r0, #78	@ 0x4e
 8001236:	f000 fdf2 	bl	8001e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800123a:	204e      	movs	r0, #78	@ 0x4e
 800123c:	f000 fe09 	bl	8001e52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001240:	bf00      	nop
 8001242:	3738      	adds	r7, #56	@ 0x38
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	48020000 	.word	0x48020000
 800124c:	58024400 	.word	0x58024400
 8001250:	58021000 	.word	0x58021000
 8001254:	58020000 	.word	0x58020000
 8001258:	58020800 	.word	0x58020800
 800125c:	58020c00 	.word	0x58020c00
 8001260:	58020400 	.word	0x58020400
 8001264:	24000170 	.word	0x24000170
 8001268:	40020010 	.word	0x40020010

0800126c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0ba      	sub	sp, #232	@ 0xe8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	22c0      	movs	r2, #192	@ 0xc0
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f00e fd53 	bl	800fd38 <memset>
  if(hi2c->Instance==I2C2)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a38      	ldr	r2, [pc, #224]	@ (8001378 <HAL_I2C_MspInit+0x10c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d169      	bne.n	8001370 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800129c:	f04f 0208 	mov.w	r2, #8
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 80012ac:	230c      	movs	r3, #12
 80012ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 80012b8:	2303      	movs	r3, #3
 80012ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80012bc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80012c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80012c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012c6:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80012cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4618      	mov	r0, r3
 80012da:	f006 fb7b 	bl	80079d4 <HAL_RCCEx_PeriphCLKConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 80012e4:	f7ff fe8e 	bl	8001004 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b24      	ldr	r3, [pc, #144]	@ (800137c <HAL_I2C_MspInit+0x110>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ee:	4a23      	ldr	r2, [pc, #140]	@ (800137c <HAL_I2C_MspInit+0x110>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012f8:	4b20      	ldr	r3, [pc, #128]	@ (800137c <HAL_I2C_MspInit+0x110>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001306:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800130a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130e:	2312      	movs	r3, #18
 8001310:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001314:	2301      	movs	r3, #1
 8001316:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001320:	2304      	movs	r3, #4
 8001322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800132a:	4619      	mov	r1, r3
 800132c:	4814      	ldr	r0, [pc, #80]	@ (8001380 <HAL_I2C_MspInit+0x114>)
 800132e:	f002 fe7b 	bl	8004028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001332:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_I2C_MspInit+0x110>)
 8001334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001338:	4a10      	ldr	r2, [pc, #64]	@ (800137c <HAL_I2C_MspInit+0x110>)
 800133a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800133e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <HAL_I2C_MspInit+0x110>)
 8001344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001348:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	2021      	movs	r0, #33	@ 0x21
 8001356:	f000 fd62 	bl	8001e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800135a:	2021      	movs	r0, #33	@ 0x21
 800135c:	f000 fd79 	bl	8001e52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	2022      	movs	r0, #34	@ 0x22
 8001366:	f000 fd5a 	bl	8001e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800136a:	2022      	movs	r0, #34	@ 0x22
 800136c:	f000 fd71 	bl	8001e52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001370:	bf00      	nop
 8001372:	37e8      	adds	r7, #232	@ 0xe8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40005800 	.word	0x40005800
 800137c:	58024400 	.word	0x58024400
 8001380:	58020400 	.word	0x58020400

08001384 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b0bc      	sub	sp, #240	@ 0xf0
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	22c0      	movs	r2, #192	@ 0xc0
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f00e fcc7 	bl	800fd38 <memset>
  if(hspi->Instance==SPI2)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a38      	ldr	r2, [pc, #224]	@ (8001490 <HAL_SPI_MspInit+0x10c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d169      	bne.n	8001488 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80013b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c4:	f107 0318 	add.w	r3, r7, #24
 80013c8:	4618      	mov	r0, r3
 80013ca:	f006 fb03 	bl	80079d4 <HAL_RCCEx_PeriphCLKConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80013d4:	f7ff fe16 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001494 <HAL_SPI_MspInit+0x110>)
 80013da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013de:	4a2d      	ldr	r2, [pc, #180]	@ (8001494 <HAL_SPI_MspInit+0x110>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001494 <HAL_SPI_MspInit+0x110>)
 80013ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	4b27      	ldr	r3, [pc, #156]	@ (8001494 <HAL_SPI_MspInit+0x110>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fc:	4a25      	ldr	r2, [pc, #148]	@ (8001494 <HAL_SPI_MspInit+0x110>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001406:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <HAL_SPI_MspInit+0x110>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <HAL_SPI_MspInit+0x110>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141a:	4a1e      	ldr	r2, [pc, #120]	@ (8001494 <HAL_SPI_MspInit+0x110>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <HAL_SPI_MspInit+0x110>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001432:	2306      	movs	r3, #6
 8001434:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800144a:	2305      	movs	r3, #5
 800144c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001450:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001454:	4619      	mov	r1, r3
 8001456:	4810      	ldr	r0, [pc, #64]	@ (8001498 <HAL_SPI_MspInit+0x114>)
 8001458:	f002 fde6 	bl	8004028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800145c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001460:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001476:	2305      	movs	r3, #5
 8001478:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001480:	4619      	mov	r1, r3
 8001482:	4806      	ldr	r0, [pc, #24]	@ (800149c <HAL_SPI_MspInit+0x118>)
 8001484:	f002 fdd0 	bl	8004028 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001488:	bf00      	nop
 800148a:	37f0      	adds	r7, #240	@ 0xf0
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40003800 	.word	0x40003800
 8001494:	58024400 	.word	0x58024400
 8001498:	58020800 	.word	0x58020800
 800149c:	58020400 	.word	0x58020400

080014a0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a2b      	ldr	r2, [pc, #172]	@ (800155c <HAL_TIM_PWM_MspInit+0xbc>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10f      	bne.n	80014d2 <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001560 <HAL_TIM_PWM_MspInit+0xc0>)
 80014b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014b8:	4a29      	ldr	r2, [pc, #164]	@ (8001560 <HAL_TIM_PWM_MspInit+0xc0>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80014c2:	4b27      	ldr	r3, [pc, #156]	@ (8001560 <HAL_TIM_PWM_MspInit+0xc0>)
 80014c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014d0:	e03d      	b.n	800154e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014da:	d10f      	bne.n	80014fc <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014dc:	4b20      	ldr	r3, [pc, #128]	@ (8001560 <HAL_TIM_PWM_MspInit+0xc0>)
 80014de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001560 <HAL_TIM_PWM_MspInit+0xc0>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <HAL_TIM_PWM_MspInit+0xc0>)
 80014ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
}
 80014fa:	e028      	b.n	800154e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a18      	ldr	r2, [pc, #96]	@ (8001564 <HAL_TIM_PWM_MspInit+0xc4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d10f      	bne.n	8001526 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001506:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <HAL_TIM_PWM_MspInit+0xc0>)
 8001508:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800150c:	4a14      	ldr	r2, [pc, #80]	@ (8001560 <HAL_TIM_PWM_MspInit+0xc0>)
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001516:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <HAL_TIM_PWM_MspInit+0xc0>)
 8001518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	e013      	b.n	800154e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a0f      	ldr	r2, [pc, #60]	@ (8001568 <HAL_TIM_PWM_MspInit+0xc8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d10e      	bne.n	800154e <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001530:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <HAL_TIM_PWM_MspInit+0xc0>)
 8001532:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <HAL_TIM_PWM_MspInit+0xc0>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001540:	4b07      	ldr	r3, [pc, #28]	@ (8001560 <HAL_TIM_PWM_MspInit+0xc0>)
 8001542:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
}
 800154e:	bf00      	nop
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40010000 	.word	0x40010000
 8001560:	58024400 	.word	0x58024400
 8001564:	40000400 	.word	0x40000400
 8001568:	40000800 	.word	0x40000800

0800156c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0e      	ldr	r2, [pc, #56]	@ (80015b4 <HAL_TIM_Base_MspInit+0x48>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d116      	bne.n	80015ac <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001584:	4a0c      	ldr	r2, [pc, #48]	@ (80015b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001590:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	202d      	movs	r0, #45	@ 0x2d
 80015a2:	f000 fc3c 	bl	8001e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80015a6:	202d      	movs	r0, #45	@ 0x2d
 80015a8:	f000 fc53 	bl	8001e52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40002000 	.word	0x40002000
 80015b8:	58024400 	.word	0x58024400

080015bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	@ 0x30
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a5d      	ldr	r2, [pc, #372]	@ (8001750 <HAL_TIM_MspPostInit+0x194>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d120      	bne.n	8001620 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015de:	4b5d      	ldr	r3, [pc, #372]	@ (8001754 <HAL_TIM_MspPostInit+0x198>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e4:	4a5b      	ldr	r2, [pc, #364]	@ (8001754 <HAL_TIM_MspPostInit+0x198>)
 80015e6:	f043 0310 	orr.w	r3, r3, #16
 80015ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ee:	4b59      	ldr	r3, [pc, #356]	@ (8001754 <HAL_TIM_MspPostInit+0x198>)
 80015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80015fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800160e:	2301      	movs	r3, #1
 8001610:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	484f      	ldr	r0, [pc, #316]	@ (8001758 <HAL_TIM_MspPostInit+0x19c>)
 800161a:	f002 fd05 	bl	8004028 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800161e:	e093      	b.n	8001748 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001628:	d11f      	bne.n	800166a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	4b4a      	ldr	r3, [pc, #296]	@ (8001754 <HAL_TIM_MspPostInit+0x198>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001630:	4a48      	ldr	r2, [pc, #288]	@ (8001754 <HAL_TIM_MspPostInit+0x198>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800163a:	4b46      	ldr	r3, [pc, #280]	@ (8001754 <HAL_TIM_MspPostInit+0x198>)
 800163c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001648:	2307      	movs	r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001658:	2301      	movs	r3, #1
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	483e      	ldr	r0, [pc, #248]	@ (800175c <HAL_TIM_MspPostInit+0x1a0>)
 8001664:	f002 fce0 	bl	8004028 <HAL_GPIO_Init>
}
 8001668:	e06e      	b.n	8001748 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a3c      	ldr	r2, [pc, #240]	@ (8001760 <HAL_TIM_MspPostInit+0x1a4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d11f      	bne.n	80016b4 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	4b37      	ldr	r3, [pc, #220]	@ (8001754 <HAL_TIM_MspPostInit+0x198>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167a:	4a36      	ldr	r2, [pc, #216]	@ (8001754 <HAL_TIM_MspPostInit+0x198>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001684:	4b33      	ldr	r3, [pc, #204]	@ (8001754 <HAL_TIM_MspPostInit+0x198>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001692:	2303      	movs	r3, #3
 8001694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016a2:	2302      	movs	r3, #2
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	482d      	ldr	r0, [pc, #180]	@ (8001764 <HAL_TIM_MspPostInit+0x1a8>)
 80016ae:	f002 fcbb 	bl	8004028 <HAL_GPIO_Init>
}
 80016b2:	e049      	b.n	8001748 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001768 <HAL_TIM_MspPostInit+0x1ac>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d120      	bne.n	8001700 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	4b25      	ldr	r3, [pc, #148]	@ (8001754 <HAL_TIM_MspPostInit+0x198>)
 80016c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c4:	4a23      	ldr	r2, [pc, #140]	@ (8001754 <HAL_TIM_MspPostInit+0x198>)
 80016c6:	f043 0302 	orr.w	r3, r3, #2
 80016ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ce:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <HAL_TIM_MspPostInit+0x198>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016ee:	2302      	movs	r3, #2
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	481a      	ldr	r0, [pc, #104]	@ (8001764 <HAL_TIM_MspPostInit+0x1a8>)
 80016fa:	f002 fc95 	bl	8004028 <HAL_GPIO_Init>
}
 80016fe:	e023      	b.n	8001748 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a19      	ldr	r2, [pc, #100]	@ (800176c <HAL_TIM_MspPostInit+0x1b0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d11e      	bne.n	8001748 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HAL_TIM_MspPostInit+0x198>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001710:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <HAL_TIM_MspPostInit+0x198>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <HAL_TIM_MspPostInit+0x198>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001738:	2309      	movs	r3, #9
 800173a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4619      	mov	r1, r3
 8001742:	4806      	ldr	r0, [pc, #24]	@ (800175c <HAL_TIM_MspPostInit+0x1a0>)
 8001744:	f002 fc70 	bl	8004028 <HAL_GPIO_Init>
}
 8001748:	bf00      	nop
 800174a:	3730      	adds	r7, #48	@ 0x30
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40010000 	.word	0x40010000
 8001754:	58024400 	.word	0x58024400
 8001758:	58021000 	.word	0x58021000
 800175c:	58020000 	.word	0x58020000
 8001760:	40000400 	.word	0x40000400
 8001764:	58020400 	.word	0x58020400
 8001768:	40000800 	.word	0x40000800
 800176c:	40002000 	.word	0x40002000

08001770 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b0ba      	sub	sp, #232	@ 0xe8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	22c0      	movs	r2, #192	@ 0xc0
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f00e fad1 	bl	800fd38 <memset>
  if(huart->Instance==USART1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a27      	ldr	r2, [pc, #156]	@ (8001838 <HAL_UART_MspInit+0xc8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d146      	bne.n	800182e <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017a0:	f04f 0201 	mov.w	r2, #1
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	4618      	mov	r0, r3
 80017b8:	f006 f90c 	bl	80079d4 <HAL_RCCEx_PeriphCLKConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017c2:	f7ff fc1f 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017c6:	4b1d      	ldr	r3, [pc, #116]	@ (800183c <HAL_UART_MspInit+0xcc>)
 80017c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017cc:	4a1b      	ldr	r2, [pc, #108]	@ (800183c <HAL_UART_MspInit+0xcc>)
 80017ce:	f043 0310 	orr.w	r3, r3, #16
 80017d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017d6:	4b19      	ldr	r3, [pc, #100]	@ (800183c <HAL_UART_MspInit+0xcc>)
 80017d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e4:	4b15      	ldr	r3, [pc, #84]	@ (800183c <HAL_UART_MspInit+0xcc>)
 80017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ea:	4a14      	ldr	r2, [pc, #80]	@ (800183c <HAL_UART_MspInit+0xcc>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <HAL_UART_MspInit+0xcc>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001802:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001806:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800181c:	2304      	movs	r3, #4
 800181e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001826:	4619      	mov	r1, r3
 8001828:	4805      	ldr	r0, [pc, #20]	@ (8001840 <HAL_UART_MspInit+0xd0>)
 800182a:	f002 fbfd 	bl	8004028 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800182e:	bf00      	nop
 8001830:	37e8      	adds	r7, #232	@ 0xe8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40011000 	.word	0x40011000
 800183c:	58024400 	.word	0x58024400
 8001840:	58020400 	.word	0x58020400

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <NMI_Handler+0x4>

0800184c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <MemManage_Handler+0x4>

0800185c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <UsageFault_Handler+0x4>

0800186c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189a:	f000 f995 	bl	8001bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <DMA1_Stream0_IRQHandler+0x10>)
 80018aa:	f001 fa49 	bl	8002d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	24000170 	.word	0x24000170

080018b8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <I2C2_EV_IRQHandler+0x10>)
 80018be:	f002 fe19 	bl	80044f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	240001e8 	.word	0x240001e8

080018cc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <I2C2_ER_IRQHandler+0x10>)
 80018d2:	f002 fe29 	bl	8004528 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	240001e8 	.word	0x240001e8

080018e0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80018e6:	f008 f99d 	bl	8009c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	240003f4 	.word	0x240003f4

080018f4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80018f8:	4802      	ldr	r0, [pc, #8]	@ (8001904 <DCMI_IRQHandler+0x10>)
 80018fa:	f000 fbb7 	bl	800206c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	24000120 	.word	0x24000120

08001908 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <OTG_FS_IRQHandler+0x10>)
 800190e:	f003 fed2 	bl	80056b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	240019b8 	.word	0x240019b8

0800191c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001920:	4b43      	ldr	r3, [pc, #268]	@ (8001a30 <SystemInit+0x114>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001926:	4a42      	ldr	r2, [pc, #264]	@ (8001a30 <SystemInit+0x114>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001930:	4b40      	ldr	r3, [pc, #256]	@ (8001a34 <SystemInit+0x118>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 030f 	and.w	r3, r3, #15
 8001938:	2b06      	cmp	r3, #6
 800193a:	d807      	bhi.n	800194c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800193c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a34 <SystemInit+0x118>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f023 030f 	bic.w	r3, r3, #15
 8001944:	4a3b      	ldr	r2, [pc, #236]	@ (8001a34 <SystemInit+0x118>)
 8001946:	f043 0307 	orr.w	r3, r3, #7
 800194a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800194c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a38 <SystemInit+0x11c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a39      	ldr	r2, [pc, #228]	@ (8001a38 <SystemInit+0x11c>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001958:	4b37      	ldr	r3, [pc, #220]	@ (8001a38 <SystemInit+0x11c>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800195e:	4b36      	ldr	r3, [pc, #216]	@ (8001a38 <SystemInit+0x11c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4935      	ldr	r1, [pc, #212]	@ (8001a38 <SystemInit+0x11c>)
 8001964:	4b35      	ldr	r3, [pc, #212]	@ (8001a3c <SystemInit+0x120>)
 8001966:	4013      	ands	r3, r2
 8001968:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800196a:	4b32      	ldr	r3, [pc, #200]	@ (8001a34 <SystemInit+0x118>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d007      	beq.n	8001986 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001976:	4b2f      	ldr	r3, [pc, #188]	@ (8001a34 <SystemInit+0x118>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 030f 	bic.w	r3, r3, #15
 800197e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a34 <SystemInit+0x118>)
 8001980:	f043 0307 	orr.w	r3, r3, #7
 8001984:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001986:	4b2c      	ldr	r3, [pc, #176]	@ (8001a38 <SystemInit+0x11c>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800198c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a38 <SystemInit+0x11c>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001992:	4b29      	ldr	r3, [pc, #164]	@ (8001a38 <SystemInit+0x11c>)
 8001994:	2200      	movs	r2, #0
 8001996:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001998:	4b27      	ldr	r3, [pc, #156]	@ (8001a38 <SystemInit+0x11c>)
 800199a:	4a29      	ldr	r2, [pc, #164]	@ (8001a40 <SystemInit+0x124>)
 800199c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800199e:	4b26      	ldr	r3, [pc, #152]	@ (8001a38 <SystemInit+0x11c>)
 80019a0:	4a28      	ldr	r2, [pc, #160]	@ (8001a44 <SystemInit+0x128>)
 80019a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019a4:	4b24      	ldr	r3, [pc, #144]	@ (8001a38 <SystemInit+0x11c>)
 80019a6:	4a28      	ldr	r2, [pc, #160]	@ (8001a48 <SystemInit+0x12c>)
 80019a8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019aa:	4b23      	ldr	r3, [pc, #140]	@ (8001a38 <SystemInit+0x11c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019b0:	4b21      	ldr	r3, [pc, #132]	@ (8001a38 <SystemInit+0x11c>)
 80019b2:	4a25      	ldr	r2, [pc, #148]	@ (8001a48 <SystemInit+0x12c>)
 80019b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019b6:	4b20      	ldr	r3, [pc, #128]	@ (8001a38 <SystemInit+0x11c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a38 <SystemInit+0x11c>)
 80019be:	4a22      	ldr	r2, [pc, #136]	@ (8001a48 <SystemInit+0x12c>)
 80019c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <SystemInit+0x11c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <SystemInit+0x11c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a38 <SystemInit+0x11c>)
 80019ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019d4:	4b18      	ldr	r3, [pc, #96]	@ (8001a38 <SystemInit+0x11c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019da:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <SystemInit+0x130>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4b1c      	ldr	r3, [pc, #112]	@ (8001a50 <SystemInit+0x134>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019e6:	d202      	bcs.n	80019ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80019e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <SystemInit+0x138>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80019ee:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <SystemInit+0x11c>)
 80019f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d113      	bne.n	8001a24 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80019fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <SystemInit+0x11c>)
 80019fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a02:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <SystemInit+0x11c>)
 8001a04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a08:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a0c:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <SystemInit+0x13c>)
 8001a0e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001a12:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <SystemInit+0x11c>)
 8001a16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a1a:	4a07      	ldr	r2, [pc, #28]	@ (8001a38 <SystemInit+0x11c>)
 8001a1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a20:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00
 8001a34:	52002000 	.word	0x52002000
 8001a38:	58024400 	.word	0x58024400
 8001a3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a40:	02020200 	.word	0x02020200
 8001a44:	01ff0000 	.word	0x01ff0000
 8001a48:	01010280 	.word	0x01010280
 8001a4c:	5c001000 	.word	0x5c001000
 8001a50:	ffff0000 	.word	0xffff0000
 8001a54:	51008108 	.word	0x51008108
 8001a58:	52004000 	.word	0x52004000

08001a5c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <ExitRun0Mode+0x2c>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4a08      	ldr	r2, [pc, #32]	@ (8001a88 <ExitRun0Mode+0x2c>)
 8001a66:	f043 0302 	orr.w	r3, r3, #2
 8001a6a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001a6c:	bf00      	nop
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <ExitRun0Mode+0x2c>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f9      	beq.n	8001a6e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001a7a:	bf00      	nop
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	58024800 	.word	0x58024800

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a8c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001ac8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001a90:	f7ff ffe4 	bl	8001a5c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a94:	f7ff ff42 	bl	800191c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a98:	480c      	ldr	r0, [pc, #48]	@ (8001acc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a9a:	490d      	ldr	r1, [pc, #52]	@ (8001ad0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8001adc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001abe:	f00e f943 	bl	800fd48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac2:	f7fe fd9f 	bl	8000604 <main>
  bx  lr
 8001ac6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001acc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ad0:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8001ad4:	0800fe40 	.word	0x0800fe40
  ldr r2, =_sbss
 8001ad8:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 8001adc:	240020bc 	.word	0x240020bc

08001ae0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC3_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aea:	2003      	movs	r0, #3
 8001aec:	f000 f98c 	bl	8001e08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001af0:	f005 fd9a 	bl	8007628 <HAL_RCC_GetSysClockFreq>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_Init+0x68>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	4913      	ldr	r1, [pc, #76]	@ (8001b50 <HAL_Init+0x6c>)
 8001b02:	5ccb      	ldrb	r3, [r1, r3]
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <HAL_Init+0x68>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	4a0e      	ldr	r2, [pc, #56]	@ (8001b50 <HAL_Init+0x6c>)
 8001b18:	5cd3      	ldrb	r3, [r2, r3]
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
 8001b24:	4a0b      	ldr	r2, [pc, #44]	@ (8001b54 <HAL_Init+0x70>)
 8001b26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b28:	4a0b      	ldr	r2, [pc, #44]	@ (8001b58 <HAL_Init+0x74>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b2e:	200f      	movs	r0, #15
 8001b30:	f000 f814 	bl	8001b5c <HAL_InitTick>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e002      	b.n	8001b44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3e:	f7ff fa67 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	58024400 	.word	0x58024400
 8001b50:	0800fdf0 	.word	0x0800fdf0
 8001b54:	24000004 	.word	0x24000004
 8001b58:	24000000 	.word	0x24000000

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b64:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <HAL_InitTick+0x60>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e021      	b.n	8001bb4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b70:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <HAL_InitTick+0x64>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_InitTick+0x60>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f971 	bl	8001e6e <HAL_SYSTICK_Config>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00e      	b.n	8001bb4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	d80a      	bhi.n	8001bb2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f000 f93b 	bl	8001e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba8:	4a06      	ldr	r2, [pc, #24]	@ (8001bc4 <HAL_InitTick+0x68>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e000      	b.n	8001bb4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	2400000c 	.word	0x2400000c
 8001bc0:	24000000 	.word	0x24000000
 8001bc4:	24000008 	.word	0x24000008

08001bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_IncTick+0x20>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_IncTick+0x24>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a04      	ldr	r2, [pc, #16]	@ (8001bec <HAL_IncTick+0x24>)
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	2400000c 	.word	0x2400000c
 8001bec:	240004d4 	.word	0x240004d4

08001bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <HAL_GetTick+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	240004d4 	.word	0x240004d4

08001c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff ffee 	bl	8001bf0 <HAL_GetTick>
 8001c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c20:	d005      	beq.n	8001c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c22:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <HAL_Delay+0x44>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2e:	bf00      	nop
 8001c30:	f7ff ffde 	bl	8001bf0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d8f7      	bhi.n	8001c30 <HAL_Delay+0x28>
  {
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2400000c 	.word	0x2400000c

08001c50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c54:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <HAL_GetREVID+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0c1b      	lsrs	r3, r3, #16
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	5c001000 	.word	0x5c001000

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	@ (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00
 8001cac:	05fa0000 	.word	0x05fa0000

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4907      	ldr	r1, [pc, #28]	@ (8001d04 <__NVIC_EnableIRQ+0x38>)
 8001ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	@ (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	@ (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	@ 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	@ 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd4:	d301      	bcc.n	8001dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00f      	b.n	8001dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dda:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <SysTick_Config+0x40>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de2:	210f      	movs	r1, #15
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f7ff ff8e 	bl	8001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <SysTick_Config+0x40>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df2:	4b04      	ldr	r3, [pc, #16]	@ (8001e04 <SysTick_Config+0x40>)
 8001df4:	2207      	movs	r2, #7
 8001df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ff29 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2c:	f7ff ff40 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff ff90 	bl	8001d5c <NVIC_EncodePriority>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5f 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff33 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ffa4 	bl	8001dc4 <SysTick_Config>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e8c:	f3bf 8f5f 	dmb	sy
}
 8001e90:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e92:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <HAL_MPU_Disable+0x28>)
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	4a06      	ldr	r2, [pc, #24]	@ (8001eb0 <HAL_MPU_Disable+0x28>)
 8001e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e9c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e9e:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_MPU_Disable+0x2c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00
 8001eb4:	e000ed90 	.word	0xe000ed90

08001eb8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef0 <HAL_MPU_Enable+0x38>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_MPU_Enable+0x3c>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	4a09      	ldr	r2, [pc, #36]	@ (8001ef4 <HAL_MPU_Enable+0x3c>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed6:	f3bf 8f4f 	dsb	sy
}
 8001eda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001edc:	f3bf 8f6f 	isb	sy
}
 8001ee0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed90 	.word	0xe000ed90
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	785a      	ldrb	r2, [r3, #1]
 8001f04:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <HAL_MPU_ConfigRegion+0x7c>)
 8001f06:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <HAL_MPU_ConfigRegion+0x7c>)
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	@ (8001f74 <HAL_MPU_ConfigRegion+0x7c>)
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f14:	4a17      	ldr	r2, [pc, #92]	@ (8001f74 <HAL_MPU_ConfigRegion+0x7c>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7b1b      	ldrb	r3, [r3, #12]
 8001f20:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7adb      	ldrb	r3, [r3, #11]
 8001f26:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7a9b      	ldrb	r3, [r3, #10]
 8001f2e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7b5b      	ldrb	r3, [r3, #13]
 8001f36:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7b9b      	ldrb	r3, [r3, #14]
 8001f3e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7bdb      	ldrb	r3, [r3, #15]
 8001f46:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7a5b      	ldrb	r3, [r3, #9]
 8001f4e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7a1b      	ldrb	r3, [r3, #8]
 8001f56:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f58:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	7812      	ldrb	r2, [r2, #0]
 8001f5e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f60:	4a04      	ldr	r2, [pc, #16]	@ (8001f74 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f62:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f64:	6113      	str	r3, [r2, #16]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed90 	.word	0xe000ed90

08001f78 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e069      	b.n	800205e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff f854 	bl	8001044 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6819      	ldr	r1, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <HAL_DCMI_Init+0xf0>)
 8001fbe:	400b      	ands	r3, r1
 8001fc0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6819      	ldr	r1, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001fd6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001fe2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001fee:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001ffa:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002000:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002006:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b10      	cmp	r3, #16
 8002016:	d112      	bne.n	800203e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7f1b      	ldrb	r3, [r3, #28]
 800201c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7f5b      	ldrb	r3, [r3, #29]
 8002022:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002024:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7f9b      	ldrb	r3, [r3, #30]
 800202a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800202c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7fdb      	ldrb	r3, [r3, #31]
 8002034:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800203a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800203c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 021e 	orr.w	r2, r2, #30
 800204c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	ffe0f007 	.word	0xffe0f007

0800206c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	d016      	beq.n	80020b4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2204      	movs	r2, #4
 800208c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	f043 0202 	orr.w	r2, r3, #2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2204      	movs	r2, #4
 800209e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a6:	4a31      	ldr	r2, [pc, #196]	@ (800216c <HAL_DCMI_IRQHandler+0x100>)
 80020a8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fc00 	bl	80028b4 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d016      	beq.n	80020ec <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2202      	movs	r2, #2
 80020c4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ca:	f043 0201 	orr.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2204      	movs	r2, #4
 80020d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020de:	4a23      	ldr	r2, [pc, #140]	@ (800216c <HAL_DCMI_IRQHandler+0x100>)
 80020e0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fbe4 	bl	80028b4 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2210      	movs	r2, #16
 80020fc:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f840 	bl	8002184 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d006      	beq.n	800211c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2208      	movs	r2, #8
 8002114:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f83e 	bl	8002198 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d01d      	beq.n	8002162 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b02      	cmp	r3, #2
 8002132:	d107      	bne.n	8002144 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 021e 	bic.w	r2, r2, #30
 8002142:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2201      	movs	r2, #1
 800215a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f825 	bl	80021ac <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	080021c1 	.word	0x080021c1

08002170 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021cc:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d009      	beq.n	80021ec <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff ffbf 	bl	8002170 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff fcf4 	bl	8001bf0 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e316      	b.n	8002842 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a66      	ldr	r2, [pc, #408]	@ (80023b4 <HAL_DMA_Init+0x1b8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d04a      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a65      	ldr	r2, [pc, #404]	@ (80023b8 <HAL_DMA_Init+0x1bc>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d045      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a63      	ldr	r2, [pc, #396]	@ (80023bc <HAL_DMA_Init+0x1c0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d040      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a62      	ldr	r2, [pc, #392]	@ (80023c0 <HAL_DMA_Init+0x1c4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d03b      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a60      	ldr	r2, [pc, #384]	@ (80023c4 <HAL_DMA_Init+0x1c8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d036      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a5f      	ldr	r2, [pc, #380]	@ (80023c8 <HAL_DMA_Init+0x1cc>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d031      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a5d      	ldr	r2, [pc, #372]	@ (80023cc <HAL_DMA_Init+0x1d0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02c      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a5c      	ldr	r2, [pc, #368]	@ (80023d0 <HAL_DMA_Init+0x1d4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d027      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a5a      	ldr	r2, [pc, #360]	@ (80023d4 <HAL_DMA_Init+0x1d8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d022      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a59      	ldr	r2, [pc, #356]	@ (80023d8 <HAL_DMA_Init+0x1dc>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d01d      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a57      	ldr	r2, [pc, #348]	@ (80023dc <HAL_DMA_Init+0x1e0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d018      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a56      	ldr	r2, [pc, #344]	@ (80023e0 <HAL_DMA_Init+0x1e4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d013      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a54      	ldr	r2, [pc, #336]	@ (80023e4 <HAL_DMA_Init+0x1e8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00e      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a53      	ldr	r2, [pc, #332]	@ (80023e8 <HAL_DMA_Init+0x1ec>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d009      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a51      	ldr	r2, [pc, #324]	@ (80023ec <HAL_DMA_Init+0x1f0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a50      	ldr	r2, [pc, #320]	@ (80023f0 <HAL_DMA_Init+0x1f4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_DMA_Init+0xbc>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_DMA_Init+0xbe>
 80022b8:	2300      	movs	r3, #0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 813b 	beq.w	8002536 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a37      	ldr	r2, [pc, #220]	@ (80023b4 <HAL_DMA_Init+0x1b8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d04a      	beq.n	8002370 <HAL_DMA_Init+0x174>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a36      	ldr	r2, [pc, #216]	@ (80023b8 <HAL_DMA_Init+0x1bc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d045      	beq.n	8002370 <HAL_DMA_Init+0x174>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a34      	ldr	r2, [pc, #208]	@ (80023bc <HAL_DMA_Init+0x1c0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d040      	beq.n	8002370 <HAL_DMA_Init+0x174>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a33      	ldr	r2, [pc, #204]	@ (80023c0 <HAL_DMA_Init+0x1c4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d03b      	beq.n	8002370 <HAL_DMA_Init+0x174>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a31      	ldr	r2, [pc, #196]	@ (80023c4 <HAL_DMA_Init+0x1c8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d036      	beq.n	8002370 <HAL_DMA_Init+0x174>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a30      	ldr	r2, [pc, #192]	@ (80023c8 <HAL_DMA_Init+0x1cc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d031      	beq.n	8002370 <HAL_DMA_Init+0x174>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a2e      	ldr	r2, [pc, #184]	@ (80023cc <HAL_DMA_Init+0x1d0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d02c      	beq.n	8002370 <HAL_DMA_Init+0x174>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a2d      	ldr	r2, [pc, #180]	@ (80023d0 <HAL_DMA_Init+0x1d4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d027      	beq.n	8002370 <HAL_DMA_Init+0x174>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2b      	ldr	r2, [pc, #172]	@ (80023d4 <HAL_DMA_Init+0x1d8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d022      	beq.n	8002370 <HAL_DMA_Init+0x174>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a2a      	ldr	r2, [pc, #168]	@ (80023d8 <HAL_DMA_Init+0x1dc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d01d      	beq.n	8002370 <HAL_DMA_Init+0x174>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a28      	ldr	r2, [pc, #160]	@ (80023dc <HAL_DMA_Init+0x1e0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d018      	beq.n	8002370 <HAL_DMA_Init+0x174>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a27      	ldr	r2, [pc, #156]	@ (80023e0 <HAL_DMA_Init+0x1e4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d013      	beq.n	8002370 <HAL_DMA_Init+0x174>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a25      	ldr	r2, [pc, #148]	@ (80023e4 <HAL_DMA_Init+0x1e8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00e      	beq.n	8002370 <HAL_DMA_Init+0x174>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a24      	ldr	r2, [pc, #144]	@ (80023e8 <HAL_DMA_Init+0x1ec>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d009      	beq.n	8002370 <HAL_DMA_Init+0x174>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a22      	ldr	r2, [pc, #136]	@ (80023ec <HAL_DMA_Init+0x1f0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d004      	beq.n	8002370 <HAL_DMA_Init+0x174>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a21      	ldr	r2, [pc, #132]	@ (80023f0 <HAL_DMA_Init+0x1f4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d108      	bne.n	8002382 <HAL_DMA_Init+0x186>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	e007      	b.n	8002392 <HAL_DMA_Init+0x196>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002392:	e02f      	b.n	80023f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002394:	f7ff fc2c 	bl	8001bf0 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b05      	cmp	r3, #5
 80023a0:	d928      	bls.n	80023f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2203      	movs	r2, #3
 80023ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e246      	b.n	8002842 <HAL_DMA_Init+0x646>
 80023b4:	40020010 	.word	0x40020010
 80023b8:	40020028 	.word	0x40020028
 80023bc:	40020040 	.word	0x40020040
 80023c0:	40020058 	.word	0x40020058
 80023c4:	40020070 	.word	0x40020070
 80023c8:	40020088 	.word	0x40020088
 80023cc:	400200a0 	.word	0x400200a0
 80023d0:	400200b8 	.word	0x400200b8
 80023d4:	40020410 	.word	0x40020410
 80023d8:	40020428 	.word	0x40020428
 80023dc:	40020440 	.word	0x40020440
 80023e0:	40020458 	.word	0x40020458
 80023e4:	40020470 	.word	0x40020470
 80023e8:	40020488 	.word	0x40020488
 80023ec:	400204a0 	.word	0x400204a0
 80023f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1c8      	bne.n	8002394 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4b83      	ldr	r3, [pc, #524]	@ (800261c <HAL_DMA_Init+0x420>)
 800240e:	4013      	ands	r3, r2
 8002410:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800241a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002426:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002432:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	2b04      	cmp	r3, #4
 8002446:	d107      	bne.n	8002458 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002450:	4313      	orrs	r3, r2
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002458:	4b71      	ldr	r3, [pc, #452]	@ (8002620 <HAL_DMA_Init+0x424>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b71      	ldr	r3, [pc, #452]	@ (8002624 <HAL_DMA_Init+0x428>)
 800245e:	4013      	ands	r3, r2
 8002460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002464:	d328      	bcc.n	80024b8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b28      	cmp	r3, #40	@ 0x28
 800246c:	d903      	bls.n	8002476 <HAL_DMA_Init+0x27a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b2e      	cmp	r3, #46	@ 0x2e
 8002474:	d917      	bls.n	80024a6 <HAL_DMA_Init+0x2aa>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b3e      	cmp	r3, #62	@ 0x3e
 800247c:	d903      	bls.n	8002486 <HAL_DMA_Init+0x28a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b42      	cmp	r3, #66	@ 0x42
 8002484:	d90f      	bls.n	80024a6 <HAL_DMA_Init+0x2aa>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b46      	cmp	r3, #70	@ 0x46
 800248c:	d903      	bls.n	8002496 <HAL_DMA_Init+0x29a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b48      	cmp	r3, #72	@ 0x48
 8002494:	d907      	bls.n	80024a6 <HAL_DMA_Init+0x2aa>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b4e      	cmp	r3, #78	@ 0x4e
 800249c:	d905      	bls.n	80024aa <HAL_DMA_Init+0x2ae>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b52      	cmp	r3, #82	@ 0x52
 80024a4:	d801      	bhi.n	80024aa <HAL_DMA_Init+0x2ae>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_DMA_Init+0x2b0>
 80024aa:	2300      	movs	r3, #0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024b6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f023 0307 	bic.w	r3, r3, #7
 80024ce:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d117      	bne.n	8002512 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00e      	beq.n	8002512 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f001 fc0d 	bl	8003d14 <DMA_CheckFifoParam>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2240      	movs	r2, #64	@ 0x40
 8002504:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e197      	b.n	8002842 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f001 fb48 	bl	8003bb0 <DMA_CalcBaseAndBitshift>
 8002520:	4603      	mov	r3, r0
 8002522:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	223f      	movs	r2, #63	@ 0x3f
 800252e:	409a      	lsls	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	e0cd      	b.n	80026d2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a3b      	ldr	r2, [pc, #236]	@ (8002628 <HAL_DMA_Init+0x42c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d022      	beq.n	8002586 <HAL_DMA_Init+0x38a>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a39      	ldr	r2, [pc, #228]	@ (800262c <HAL_DMA_Init+0x430>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01d      	beq.n	8002586 <HAL_DMA_Init+0x38a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a38      	ldr	r2, [pc, #224]	@ (8002630 <HAL_DMA_Init+0x434>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d018      	beq.n	8002586 <HAL_DMA_Init+0x38a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a36      	ldr	r2, [pc, #216]	@ (8002634 <HAL_DMA_Init+0x438>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d013      	beq.n	8002586 <HAL_DMA_Init+0x38a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a35      	ldr	r2, [pc, #212]	@ (8002638 <HAL_DMA_Init+0x43c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d00e      	beq.n	8002586 <HAL_DMA_Init+0x38a>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a33      	ldr	r2, [pc, #204]	@ (800263c <HAL_DMA_Init+0x440>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d009      	beq.n	8002586 <HAL_DMA_Init+0x38a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a32      	ldr	r2, [pc, #200]	@ (8002640 <HAL_DMA_Init+0x444>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d004      	beq.n	8002586 <HAL_DMA_Init+0x38a>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a30      	ldr	r2, [pc, #192]	@ (8002644 <HAL_DMA_Init+0x448>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_DMA_Init+0x38e>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_DMA_Init+0x390>
 800258a:	2300      	movs	r3, #0
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 8097 	beq.w	80026c0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a24      	ldr	r2, [pc, #144]	@ (8002628 <HAL_DMA_Init+0x42c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d021      	beq.n	80025e0 <HAL_DMA_Init+0x3e4>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a22      	ldr	r2, [pc, #136]	@ (800262c <HAL_DMA_Init+0x430>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01c      	beq.n	80025e0 <HAL_DMA_Init+0x3e4>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a21      	ldr	r2, [pc, #132]	@ (8002630 <HAL_DMA_Init+0x434>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d017      	beq.n	80025e0 <HAL_DMA_Init+0x3e4>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002634 <HAL_DMA_Init+0x438>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d012      	beq.n	80025e0 <HAL_DMA_Init+0x3e4>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1e      	ldr	r2, [pc, #120]	@ (8002638 <HAL_DMA_Init+0x43c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00d      	beq.n	80025e0 <HAL_DMA_Init+0x3e4>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1c      	ldr	r2, [pc, #112]	@ (800263c <HAL_DMA_Init+0x440>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d008      	beq.n	80025e0 <HAL_DMA_Init+0x3e4>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002640 <HAL_DMA_Init+0x444>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d003      	beq.n	80025e0 <HAL_DMA_Init+0x3e4>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a19      	ldr	r2, [pc, #100]	@ (8002644 <HAL_DMA_Init+0x448>)
 80025de:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4b13      	ldr	r3, [pc, #76]	@ (8002648 <HAL_DMA_Init+0x44c>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b40      	cmp	r3, #64	@ 0x40
 8002606:	d021      	beq.n	800264c <HAL_DMA_Init+0x450>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b80      	cmp	r3, #128	@ 0x80
 800260e:	d102      	bne.n	8002616 <HAL_DMA_Init+0x41a>
 8002610:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002614:	e01b      	b.n	800264e <HAL_DMA_Init+0x452>
 8002616:	2300      	movs	r3, #0
 8002618:	e019      	b.n	800264e <HAL_DMA_Init+0x452>
 800261a:	bf00      	nop
 800261c:	fe10803f 	.word	0xfe10803f
 8002620:	5c001000 	.word	0x5c001000
 8002624:	ffff0000 	.word	0xffff0000
 8002628:	58025408 	.word	0x58025408
 800262c:	5802541c 	.word	0x5802541c
 8002630:	58025430 	.word	0x58025430
 8002634:	58025444 	.word	0x58025444
 8002638:	58025458 	.word	0x58025458
 800263c:	5802546c 	.word	0x5802546c
 8002640:	58025480 	.word	0x58025480
 8002644:	58025494 	.word	0x58025494
 8002648:	fffe000f 	.word	0xfffe000f
 800264c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68d2      	ldr	r2, [r2, #12]
 8002652:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002654:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800265c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002664:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800266c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002674:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800267c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	4b6e      	ldr	r3, [pc, #440]	@ (800284c <HAL_DMA_Init+0x650>)
 8002694:	4413      	add	r3, r2
 8002696:	4a6e      	ldr	r2, [pc, #440]	@ (8002850 <HAL_DMA_Init+0x654>)
 8002698:	fba2 2303 	umull	r2, r3, r2, r3
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	009a      	lsls	r2, r3, #2
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f001 fa83 	bl	8003bb0 <DMA_CalcBaseAndBitshift>
 80026aa:	4603      	mov	r3, r0
 80026ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2201      	movs	r2, #1
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	e008      	b.n	80026d2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2240      	movs	r2, #64	@ 0x40
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2203      	movs	r2, #3
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0b7      	b.n	8002842 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a5f      	ldr	r2, [pc, #380]	@ (8002854 <HAL_DMA_Init+0x658>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d072      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002858 <HAL_DMA_Init+0x65c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d06d      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a5c      	ldr	r2, [pc, #368]	@ (800285c <HAL_DMA_Init+0x660>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d068      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a5a      	ldr	r2, [pc, #360]	@ (8002860 <HAL_DMA_Init+0x664>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d063      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a59      	ldr	r2, [pc, #356]	@ (8002864 <HAL_DMA_Init+0x668>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d05e      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a57      	ldr	r2, [pc, #348]	@ (8002868 <HAL_DMA_Init+0x66c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d059      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a56      	ldr	r2, [pc, #344]	@ (800286c <HAL_DMA_Init+0x670>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d054      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a54      	ldr	r2, [pc, #336]	@ (8002870 <HAL_DMA_Init+0x674>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d04f      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a53      	ldr	r2, [pc, #332]	@ (8002874 <HAL_DMA_Init+0x678>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d04a      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a51      	ldr	r2, [pc, #324]	@ (8002878 <HAL_DMA_Init+0x67c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d045      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a50      	ldr	r2, [pc, #320]	@ (800287c <HAL_DMA_Init+0x680>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d040      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a4e      	ldr	r2, [pc, #312]	@ (8002880 <HAL_DMA_Init+0x684>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d03b      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a4d      	ldr	r2, [pc, #308]	@ (8002884 <HAL_DMA_Init+0x688>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d036      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a4b      	ldr	r2, [pc, #300]	@ (8002888 <HAL_DMA_Init+0x68c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d031      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a4a      	ldr	r2, [pc, #296]	@ (800288c <HAL_DMA_Init+0x690>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d02c      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a48      	ldr	r2, [pc, #288]	@ (8002890 <HAL_DMA_Init+0x694>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d027      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a47      	ldr	r2, [pc, #284]	@ (8002894 <HAL_DMA_Init+0x698>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d022      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a45      	ldr	r2, [pc, #276]	@ (8002898 <HAL_DMA_Init+0x69c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d01d      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a44      	ldr	r2, [pc, #272]	@ (800289c <HAL_DMA_Init+0x6a0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d018      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a42      	ldr	r2, [pc, #264]	@ (80028a0 <HAL_DMA_Init+0x6a4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a41      	ldr	r2, [pc, #260]	@ (80028a4 <HAL_DMA_Init+0x6a8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00e      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a3f      	ldr	r2, [pc, #252]	@ (80028a8 <HAL_DMA_Init+0x6ac>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d009      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a3e      	ldr	r2, [pc, #248]	@ (80028ac <HAL_DMA_Init+0x6b0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d004      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a3c      	ldr	r2, [pc, #240]	@ (80028b0 <HAL_DMA_Init+0x6b4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d101      	bne.n	80027c6 <HAL_DMA_Init+0x5ca>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_DMA_Init+0x5cc>
 80027c6:	2300      	movs	r3, #0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d032      	beq.n	8002832 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f001 fb1d 	bl	8003e0c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b80      	cmp	r3, #128	@ 0x80
 80027d8:	d102      	bne.n	80027e0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80027f4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d010      	beq.n	8002820 <HAL_DMA_Init+0x624>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b08      	cmp	r3, #8
 8002804:	d80c      	bhi.n	8002820 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f001 fb9a 	bl	8003f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	e008      	b.n	8002832 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	a7fdabf8 	.word	0xa7fdabf8
 8002850:	cccccccd 	.word	0xcccccccd
 8002854:	40020010 	.word	0x40020010
 8002858:	40020028 	.word	0x40020028
 800285c:	40020040 	.word	0x40020040
 8002860:	40020058 	.word	0x40020058
 8002864:	40020070 	.word	0x40020070
 8002868:	40020088 	.word	0x40020088
 800286c:	400200a0 	.word	0x400200a0
 8002870:	400200b8 	.word	0x400200b8
 8002874:	40020410 	.word	0x40020410
 8002878:	40020428 	.word	0x40020428
 800287c:	40020440 	.word	0x40020440
 8002880:	40020458 	.word	0x40020458
 8002884:	40020470 	.word	0x40020470
 8002888:	40020488 	.word	0x40020488
 800288c:	400204a0 	.word	0x400204a0
 8002890:	400204b8 	.word	0x400204b8
 8002894:	58025408 	.word	0x58025408
 8002898:	5802541c 	.word	0x5802541c
 800289c:	58025430 	.word	0x58025430
 80028a0:	58025444 	.word	0x58025444
 80028a4:	58025458 	.word	0x58025458
 80028a8:	5802546c 	.word	0x5802546c
 80028ac:	58025480 	.word	0x58025480
 80028b0:	58025494 	.word	0x58025494

080028b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e237      	b.n	8002d36 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d004      	beq.n	80028dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2280      	movs	r2, #128	@ 0x80
 80028d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e22c      	b.n	8002d36 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a5c      	ldr	r2, [pc, #368]	@ (8002a54 <HAL_DMA_Abort_IT+0x1a0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d04a      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002a58 <HAL_DMA_Abort_IT+0x1a4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d045      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a59      	ldr	r2, [pc, #356]	@ (8002a5c <HAL_DMA_Abort_IT+0x1a8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d040      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a58      	ldr	r2, [pc, #352]	@ (8002a60 <HAL_DMA_Abort_IT+0x1ac>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d03b      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a56      	ldr	r2, [pc, #344]	@ (8002a64 <HAL_DMA_Abort_IT+0x1b0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d036      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a55      	ldr	r2, [pc, #340]	@ (8002a68 <HAL_DMA_Abort_IT+0x1b4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d031      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a53      	ldr	r2, [pc, #332]	@ (8002a6c <HAL_DMA_Abort_IT+0x1b8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d02c      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a52      	ldr	r2, [pc, #328]	@ (8002a70 <HAL_DMA_Abort_IT+0x1bc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d027      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a50      	ldr	r2, [pc, #320]	@ (8002a74 <HAL_DMA_Abort_IT+0x1c0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d022      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a4f      	ldr	r2, [pc, #316]	@ (8002a78 <HAL_DMA_Abort_IT+0x1c4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d01d      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a4d      	ldr	r2, [pc, #308]	@ (8002a7c <HAL_DMA_Abort_IT+0x1c8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d018      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a4c      	ldr	r2, [pc, #304]	@ (8002a80 <HAL_DMA_Abort_IT+0x1cc>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d013      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a4a      	ldr	r2, [pc, #296]	@ (8002a84 <HAL_DMA_Abort_IT+0x1d0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00e      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a49      	ldr	r2, [pc, #292]	@ (8002a88 <HAL_DMA_Abort_IT+0x1d4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a47      	ldr	r2, [pc, #284]	@ (8002a8c <HAL_DMA_Abort_IT+0x1d8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_DMA_Abort_IT+0xc8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a46      	ldr	r2, [pc, #280]	@ (8002a90 <HAL_DMA_Abort_IT+0x1dc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d101      	bne.n	8002980 <HAL_DMA_Abort_IT+0xcc>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_DMA_Abort_IT+0xce>
 8002980:	2300      	movs	r3, #0
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8086 	beq.w	8002a94 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2204      	movs	r2, #4
 800298c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a2f      	ldr	r2, [pc, #188]	@ (8002a54 <HAL_DMA_Abort_IT+0x1a0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d04a      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x17c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a2e      	ldr	r2, [pc, #184]	@ (8002a58 <HAL_DMA_Abort_IT+0x1a4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d045      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x17c>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a2c      	ldr	r2, [pc, #176]	@ (8002a5c <HAL_DMA_Abort_IT+0x1a8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d040      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x17c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002a60 <HAL_DMA_Abort_IT+0x1ac>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d03b      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x17c>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a29      	ldr	r2, [pc, #164]	@ (8002a64 <HAL_DMA_Abort_IT+0x1b0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d036      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x17c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a28      	ldr	r2, [pc, #160]	@ (8002a68 <HAL_DMA_Abort_IT+0x1b4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d031      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x17c>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a26      	ldr	r2, [pc, #152]	@ (8002a6c <HAL_DMA_Abort_IT+0x1b8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d02c      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x17c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a25      	ldr	r2, [pc, #148]	@ (8002a70 <HAL_DMA_Abort_IT+0x1bc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d027      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x17c>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a23      	ldr	r2, [pc, #140]	@ (8002a74 <HAL_DMA_Abort_IT+0x1c0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d022      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x17c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a22      	ldr	r2, [pc, #136]	@ (8002a78 <HAL_DMA_Abort_IT+0x1c4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d01d      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x17c>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a20      	ldr	r2, [pc, #128]	@ (8002a7c <HAL_DMA_Abort_IT+0x1c8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d018      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x17c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1f      	ldr	r2, [pc, #124]	@ (8002a80 <HAL_DMA_Abort_IT+0x1cc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d013      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x17c>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a84 <HAL_DMA_Abort_IT+0x1d0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00e      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x17c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1c      	ldr	r2, [pc, #112]	@ (8002a88 <HAL_DMA_Abort_IT+0x1d4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d009      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x17c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1a      	ldr	r2, [pc, #104]	@ (8002a8c <HAL_DMA_Abort_IT+0x1d8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d004      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x17c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a19      	ldr	r2, [pc, #100]	@ (8002a90 <HAL_DMA_Abort_IT+0x1dc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d108      	bne.n	8002a42 <HAL_DMA_Abort_IT+0x18e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e178      	b.n	8002d34 <HAL_DMA_Abort_IT+0x480>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0201 	bic.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	e16f      	b.n	8002d34 <HAL_DMA_Abort_IT+0x480>
 8002a54:	40020010 	.word	0x40020010
 8002a58:	40020028 	.word	0x40020028
 8002a5c:	40020040 	.word	0x40020040
 8002a60:	40020058 	.word	0x40020058
 8002a64:	40020070 	.word	0x40020070
 8002a68:	40020088 	.word	0x40020088
 8002a6c:	400200a0 	.word	0x400200a0
 8002a70:	400200b8 	.word	0x400200b8
 8002a74:	40020410 	.word	0x40020410
 8002a78:	40020428 	.word	0x40020428
 8002a7c:	40020440 	.word	0x40020440
 8002a80:	40020458 	.word	0x40020458
 8002a84:	40020470 	.word	0x40020470
 8002a88:	40020488 	.word	0x40020488
 8002a8c:	400204a0 	.word	0x400204a0
 8002a90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 020e 	bic.w	r2, r2, #14
 8002aa2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a6c      	ldr	r2, [pc, #432]	@ (8002c5c <HAL_DMA_Abort_IT+0x3a8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d04a      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x290>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a6b      	ldr	r2, [pc, #428]	@ (8002c60 <HAL_DMA_Abort_IT+0x3ac>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d045      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x290>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a69      	ldr	r2, [pc, #420]	@ (8002c64 <HAL_DMA_Abort_IT+0x3b0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d040      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x290>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a68      	ldr	r2, [pc, #416]	@ (8002c68 <HAL_DMA_Abort_IT+0x3b4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d03b      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x290>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a66      	ldr	r2, [pc, #408]	@ (8002c6c <HAL_DMA_Abort_IT+0x3b8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d036      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x290>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a65      	ldr	r2, [pc, #404]	@ (8002c70 <HAL_DMA_Abort_IT+0x3bc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d031      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x290>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a63      	ldr	r2, [pc, #396]	@ (8002c74 <HAL_DMA_Abort_IT+0x3c0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d02c      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x290>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a62      	ldr	r2, [pc, #392]	@ (8002c78 <HAL_DMA_Abort_IT+0x3c4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d027      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x290>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a60      	ldr	r2, [pc, #384]	@ (8002c7c <HAL_DMA_Abort_IT+0x3c8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d022      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x290>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a5f      	ldr	r2, [pc, #380]	@ (8002c80 <HAL_DMA_Abort_IT+0x3cc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d01d      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x290>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5d      	ldr	r2, [pc, #372]	@ (8002c84 <HAL_DMA_Abort_IT+0x3d0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d018      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x290>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a5c      	ldr	r2, [pc, #368]	@ (8002c88 <HAL_DMA_Abort_IT+0x3d4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d013      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x290>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a5a      	ldr	r2, [pc, #360]	@ (8002c8c <HAL_DMA_Abort_IT+0x3d8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00e      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x290>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a59      	ldr	r2, [pc, #356]	@ (8002c90 <HAL_DMA_Abort_IT+0x3dc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d009      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x290>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a57      	ldr	r2, [pc, #348]	@ (8002c94 <HAL_DMA_Abort_IT+0x3e0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d004      	beq.n	8002b44 <HAL_DMA_Abort_IT+0x290>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a56      	ldr	r2, [pc, #344]	@ (8002c98 <HAL_DMA_Abort_IT+0x3e4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d108      	bne.n	8002b56 <HAL_DMA_Abort_IT+0x2a2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	e007      	b.n	8002b66 <HAL_DMA_Abort_IT+0x2b2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0201 	bic.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a3c      	ldr	r2, [pc, #240]	@ (8002c5c <HAL_DMA_Abort_IT+0x3a8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d072      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a3a      	ldr	r2, [pc, #232]	@ (8002c60 <HAL_DMA_Abort_IT+0x3ac>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d06d      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a39      	ldr	r2, [pc, #228]	@ (8002c64 <HAL_DMA_Abort_IT+0x3b0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d068      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a37      	ldr	r2, [pc, #220]	@ (8002c68 <HAL_DMA_Abort_IT+0x3b4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d063      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a36      	ldr	r2, [pc, #216]	@ (8002c6c <HAL_DMA_Abort_IT+0x3b8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d05e      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a34      	ldr	r2, [pc, #208]	@ (8002c70 <HAL_DMA_Abort_IT+0x3bc>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d059      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a33      	ldr	r2, [pc, #204]	@ (8002c74 <HAL_DMA_Abort_IT+0x3c0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d054      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a31      	ldr	r2, [pc, #196]	@ (8002c78 <HAL_DMA_Abort_IT+0x3c4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d04f      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a30      	ldr	r2, [pc, #192]	@ (8002c7c <HAL_DMA_Abort_IT+0x3c8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d04a      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a2e      	ldr	r2, [pc, #184]	@ (8002c80 <HAL_DMA_Abort_IT+0x3cc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d045      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a2d      	ldr	r2, [pc, #180]	@ (8002c84 <HAL_DMA_Abort_IT+0x3d0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d040      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a2b      	ldr	r2, [pc, #172]	@ (8002c88 <HAL_DMA_Abort_IT+0x3d4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d03b      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a2a      	ldr	r2, [pc, #168]	@ (8002c8c <HAL_DMA_Abort_IT+0x3d8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d036      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a28      	ldr	r2, [pc, #160]	@ (8002c90 <HAL_DMA_Abort_IT+0x3dc>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d031      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a27      	ldr	r2, [pc, #156]	@ (8002c94 <HAL_DMA_Abort_IT+0x3e0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d02c      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a25      	ldr	r2, [pc, #148]	@ (8002c98 <HAL_DMA_Abort_IT+0x3e4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d027      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a24      	ldr	r2, [pc, #144]	@ (8002c9c <HAL_DMA_Abort_IT+0x3e8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d022      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a22      	ldr	r2, [pc, #136]	@ (8002ca0 <HAL_DMA_Abort_IT+0x3ec>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d01d      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a21      	ldr	r2, [pc, #132]	@ (8002ca4 <HAL_DMA_Abort_IT+0x3f0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d018      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca8 <HAL_DMA_Abort_IT+0x3f4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d013      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1e      	ldr	r2, [pc, #120]	@ (8002cac <HAL_DMA_Abort_IT+0x3f8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00e      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb0 <HAL_DMA_Abort_IT+0x3fc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d009      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb4 <HAL_DMA_Abort_IT+0x400>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d004      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x3a2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a19      	ldr	r2, [pc, #100]	@ (8002cb8 <HAL_DMA_Abort_IT+0x404>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d132      	bne.n	8002cbc <HAL_DMA_Abort_IT+0x408>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e031      	b.n	8002cbe <HAL_DMA_Abort_IT+0x40a>
 8002c5a:	bf00      	nop
 8002c5c:	40020010 	.word	0x40020010
 8002c60:	40020028 	.word	0x40020028
 8002c64:	40020040 	.word	0x40020040
 8002c68:	40020058 	.word	0x40020058
 8002c6c:	40020070 	.word	0x40020070
 8002c70:	40020088 	.word	0x40020088
 8002c74:	400200a0 	.word	0x400200a0
 8002c78:	400200b8 	.word	0x400200b8
 8002c7c:	40020410 	.word	0x40020410
 8002c80:	40020428 	.word	0x40020428
 8002c84:	40020440 	.word	0x40020440
 8002c88:	40020458 	.word	0x40020458
 8002c8c:	40020470 	.word	0x40020470
 8002c90:	40020488 	.word	0x40020488
 8002c94:	400204a0 	.word	0x400204a0
 8002c98:	400204b8 	.word	0x400204b8
 8002c9c:	58025408 	.word	0x58025408
 8002ca0:	5802541c 	.word	0x5802541c
 8002ca4:	58025430 	.word	0x58025430
 8002ca8:	58025444 	.word	0x58025444
 8002cac:	58025458 	.word	0x58025458
 8002cb0:	5802546c 	.word	0x5802546c
 8002cb4:	58025480 	.word	0x58025480
 8002cb8:	58025494 	.word	0x58025494
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d028      	beq.n	8002d14 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ccc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cf0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00c      	beq.n	8002d14 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d08:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d12:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop

08002d40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	@ 0x28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d4c:	4b67      	ldr	r3, [pc, #412]	@ (8002eec <HAL_DMA_IRQHandler+0x1ac>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a67      	ldr	r2, [pc, #412]	@ (8002ef0 <HAL_DMA_IRQHandler+0x1b0>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	0a9b      	lsrs	r3, r3, #10
 8002d58:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d64:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a5f      	ldr	r2, [pc, #380]	@ (8002ef4 <HAL_DMA_IRQHandler+0x1b4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d04a      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xd2>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef8 <HAL_DMA_IRQHandler+0x1b8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d045      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xd2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a5c      	ldr	r2, [pc, #368]	@ (8002efc <HAL_DMA_IRQHandler+0x1bc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d040      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xd2>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a5a      	ldr	r2, [pc, #360]	@ (8002f00 <HAL_DMA_IRQHandler+0x1c0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d03b      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xd2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a59      	ldr	r2, [pc, #356]	@ (8002f04 <HAL_DMA_IRQHandler+0x1c4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d036      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xd2>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a57      	ldr	r2, [pc, #348]	@ (8002f08 <HAL_DMA_IRQHandler+0x1c8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d031      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xd2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a56      	ldr	r2, [pc, #344]	@ (8002f0c <HAL_DMA_IRQHandler+0x1cc>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d02c      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xd2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a54      	ldr	r2, [pc, #336]	@ (8002f10 <HAL_DMA_IRQHandler+0x1d0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d027      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xd2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a53      	ldr	r2, [pc, #332]	@ (8002f14 <HAL_DMA_IRQHandler+0x1d4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d022      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xd2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a51      	ldr	r2, [pc, #324]	@ (8002f18 <HAL_DMA_IRQHandler+0x1d8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d01d      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xd2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a50      	ldr	r2, [pc, #320]	@ (8002f1c <HAL_DMA_IRQHandler+0x1dc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d018      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xd2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a4e      	ldr	r2, [pc, #312]	@ (8002f20 <HAL_DMA_IRQHandler+0x1e0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d013      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xd2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a4d      	ldr	r2, [pc, #308]	@ (8002f24 <HAL_DMA_IRQHandler+0x1e4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00e      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xd2>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a4b      	ldr	r2, [pc, #300]	@ (8002f28 <HAL_DMA_IRQHandler+0x1e8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xd2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a4a      	ldr	r2, [pc, #296]	@ (8002f2c <HAL_DMA_IRQHandler+0x1ec>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d004      	beq.n	8002e12 <HAL_DMA_IRQHandler+0xd2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a48      	ldr	r2, [pc, #288]	@ (8002f30 <HAL_DMA_IRQHandler+0x1f0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <HAL_DMA_IRQHandler+0xd6>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <HAL_DMA_IRQHandler+0xd8>
 8002e16:	2300      	movs	r3, #0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 842b 	beq.w	8003674 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	2208      	movs	r2, #8
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80a2 	beq.w	8002f78 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a2e      	ldr	r2, [pc, #184]	@ (8002ef4 <HAL_DMA_IRQHandler+0x1b4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d04a      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x194>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef8 <HAL_DMA_IRQHandler+0x1b8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d045      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x194>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002efc <HAL_DMA_IRQHandler+0x1bc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d040      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x194>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2a      	ldr	r2, [pc, #168]	@ (8002f00 <HAL_DMA_IRQHandler+0x1c0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d03b      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x194>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a28      	ldr	r2, [pc, #160]	@ (8002f04 <HAL_DMA_IRQHandler+0x1c4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d036      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x194>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a27      	ldr	r2, [pc, #156]	@ (8002f08 <HAL_DMA_IRQHandler+0x1c8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d031      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x194>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a25      	ldr	r2, [pc, #148]	@ (8002f0c <HAL_DMA_IRQHandler+0x1cc>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d02c      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x194>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a24      	ldr	r2, [pc, #144]	@ (8002f10 <HAL_DMA_IRQHandler+0x1d0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d027      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x194>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a22      	ldr	r2, [pc, #136]	@ (8002f14 <HAL_DMA_IRQHandler+0x1d4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d022      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x194>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a21      	ldr	r2, [pc, #132]	@ (8002f18 <HAL_DMA_IRQHandler+0x1d8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d01d      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x194>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002f1c <HAL_DMA_IRQHandler+0x1dc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d018      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x194>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f20 <HAL_DMA_IRQHandler+0x1e0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d013      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x194>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f24 <HAL_DMA_IRQHandler+0x1e4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00e      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x194>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1b      	ldr	r2, [pc, #108]	@ (8002f28 <HAL_DMA_IRQHandler+0x1e8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d009      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x194>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a19      	ldr	r2, [pc, #100]	@ (8002f2c <HAL_DMA_IRQHandler+0x1ec>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x194>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a18      	ldr	r2, [pc, #96]	@ (8002f30 <HAL_DMA_IRQHandler+0x1f0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d12f      	bne.n	8002f34 <HAL_DMA_IRQHandler+0x1f4>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	bf14      	ite	ne
 8002ee2:	2301      	movne	r3, #1
 8002ee4:	2300      	moveq	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	e02e      	b.n	8002f48 <HAL_DMA_IRQHandler+0x208>
 8002eea:	bf00      	nop
 8002eec:	24000000 	.word	0x24000000
 8002ef0:	1b4e81b5 	.word	0x1b4e81b5
 8002ef4:	40020010 	.word	0x40020010
 8002ef8:	40020028 	.word	0x40020028
 8002efc:	40020040 	.word	0x40020040
 8002f00:	40020058 	.word	0x40020058
 8002f04:	40020070 	.word	0x40020070
 8002f08:	40020088 	.word	0x40020088
 8002f0c:	400200a0 	.word	0x400200a0
 8002f10:	400200b8 	.word	0x400200b8
 8002f14:	40020410 	.word	0x40020410
 8002f18:	40020428 	.word	0x40020428
 8002f1c:	40020440 	.word	0x40020440
 8002f20:	40020458 	.word	0x40020458
 8002f24:	40020470 	.word	0x40020470
 8002f28:	40020488 	.word	0x40020488
 8002f2c:	400204a0 	.word	0x400204a0
 8002f30:	400204b8 	.word	0x400204b8
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	bf14      	ite	ne
 8002f42:	2301      	movne	r3, #1
 8002f44:	2300      	moveq	r3, #0
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d015      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0204 	bic.w	r2, r2, #4
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	2208      	movs	r2, #8
 8002f66:	409a      	lsls	r2, r3
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	fa22 f303 	lsr.w	r3, r2, r3
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d06e      	beq.n	800306c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a69      	ldr	r2, [pc, #420]	@ (8003138 <HAL_DMA_IRQHandler+0x3f8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d04a      	beq.n	800302e <HAL_DMA_IRQHandler+0x2ee>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a67      	ldr	r2, [pc, #412]	@ (800313c <HAL_DMA_IRQHandler+0x3fc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d045      	beq.n	800302e <HAL_DMA_IRQHandler+0x2ee>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a66      	ldr	r2, [pc, #408]	@ (8003140 <HAL_DMA_IRQHandler+0x400>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d040      	beq.n	800302e <HAL_DMA_IRQHandler+0x2ee>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a64      	ldr	r2, [pc, #400]	@ (8003144 <HAL_DMA_IRQHandler+0x404>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d03b      	beq.n	800302e <HAL_DMA_IRQHandler+0x2ee>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a63      	ldr	r2, [pc, #396]	@ (8003148 <HAL_DMA_IRQHandler+0x408>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d036      	beq.n	800302e <HAL_DMA_IRQHandler+0x2ee>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a61      	ldr	r2, [pc, #388]	@ (800314c <HAL_DMA_IRQHandler+0x40c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d031      	beq.n	800302e <HAL_DMA_IRQHandler+0x2ee>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a60      	ldr	r2, [pc, #384]	@ (8003150 <HAL_DMA_IRQHandler+0x410>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d02c      	beq.n	800302e <HAL_DMA_IRQHandler+0x2ee>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a5e      	ldr	r2, [pc, #376]	@ (8003154 <HAL_DMA_IRQHandler+0x414>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d027      	beq.n	800302e <HAL_DMA_IRQHandler+0x2ee>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a5d      	ldr	r2, [pc, #372]	@ (8003158 <HAL_DMA_IRQHandler+0x418>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d022      	beq.n	800302e <HAL_DMA_IRQHandler+0x2ee>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a5b      	ldr	r2, [pc, #364]	@ (800315c <HAL_DMA_IRQHandler+0x41c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01d      	beq.n	800302e <HAL_DMA_IRQHandler+0x2ee>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a5a      	ldr	r2, [pc, #360]	@ (8003160 <HAL_DMA_IRQHandler+0x420>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d018      	beq.n	800302e <HAL_DMA_IRQHandler+0x2ee>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a58      	ldr	r2, [pc, #352]	@ (8003164 <HAL_DMA_IRQHandler+0x424>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_DMA_IRQHandler+0x2ee>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a57      	ldr	r2, [pc, #348]	@ (8003168 <HAL_DMA_IRQHandler+0x428>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00e      	beq.n	800302e <HAL_DMA_IRQHandler+0x2ee>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a55      	ldr	r2, [pc, #340]	@ (800316c <HAL_DMA_IRQHandler+0x42c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d009      	beq.n	800302e <HAL_DMA_IRQHandler+0x2ee>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a54      	ldr	r2, [pc, #336]	@ (8003170 <HAL_DMA_IRQHandler+0x430>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d004      	beq.n	800302e <HAL_DMA_IRQHandler+0x2ee>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a52      	ldr	r2, [pc, #328]	@ (8003174 <HAL_DMA_IRQHandler+0x434>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d10a      	bne.n	8003044 <HAL_DMA_IRQHandler+0x304>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf14      	ite	ne
 800303c:	2301      	movne	r3, #1
 800303e:	2300      	moveq	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e003      	b.n	800304c <HAL_DMA_IRQHandler+0x30c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2300      	movs	r3, #0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00d      	beq.n	800306c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2201      	movs	r2, #1
 800305a:	409a      	lsls	r2, r3
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003064:	f043 0202 	orr.w	r2, r3, #2
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	2204      	movs	r2, #4
 8003076:	409a      	lsls	r2, r3
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 808f 	beq.w	80031a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a2c      	ldr	r2, [pc, #176]	@ (8003138 <HAL_DMA_IRQHandler+0x3f8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d04a      	beq.n	8003122 <HAL_DMA_IRQHandler+0x3e2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2a      	ldr	r2, [pc, #168]	@ (800313c <HAL_DMA_IRQHandler+0x3fc>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d045      	beq.n	8003122 <HAL_DMA_IRQHandler+0x3e2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a29      	ldr	r2, [pc, #164]	@ (8003140 <HAL_DMA_IRQHandler+0x400>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d040      	beq.n	8003122 <HAL_DMA_IRQHandler+0x3e2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a27      	ldr	r2, [pc, #156]	@ (8003144 <HAL_DMA_IRQHandler+0x404>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d03b      	beq.n	8003122 <HAL_DMA_IRQHandler+0x3e2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a26      	ldr	r2, [pc, #152]	@ (8003148 <HAL_DMA_IRQHandler+0x408>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d036      	beq.n	8003122 <HAL_DMA_IRQHandler+0x3e2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a24      	ldr	r2, [pc, #144]	@ (800314c <HAL_DMA_IRQHandler+0x40c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d031      	beq.n	8003122 <HAL_DMA_IRQHandler+0x3e2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a23      	ldr	r2, [pc, #140]	@ (8003150 <HAL_DMA_IRQHandler+0x410>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d02c      	beq.n	8003122 <HAL_DMA_IRQHandler+0x3e2>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a21      	ldr	r2, [pc, #132]	@ (8003154 <HAL_DMA_IRQHandler+0x414>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d027      	beq.n	8003122 <HAL_DMA_IRQHandler+0x3e2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a20      	ldr	r2, [pc, #128]	@ (8003158 <HAL_DMA_IRQHandler+0x418>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d022      	beq.n	8003122 <HAL_DMA_IRQHandler+0x3e2>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1e      	ldr	r2, [pc, #120]	@ (800315c <HAL_DMA_IRQHandler+0x41c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d01d      	beq.n	8003122 <HAL_DMA_IRQHandler+0x3e2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003160 <HAL_DMA_IRQHandler+0x420>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d018      	beq.n	8003122 <HAL_DMA_IRQHandler+0x3e2>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003164 <HAL_DMA_IRQHandler+0x424>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <HAL_DMA_IRQHandler+0x3e2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003168 <HAL_DMA_IRQHandler+0x428>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00e      	beq.n	8003122 <HAL_DMA_IRQHandler+0x3e2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a18      	ldr	r2, [pc, #96]	@ (800316c <HAL_DMA_IRQHandler+0x42c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d009      	beq.n	8003122 <HAL_DMA_IRQHandler+0x3e2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a17      	ldr	r2, [pc, #92]	@ (8003170 <HAL_DMA_IRQHandler+0x430>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d004      	beq.n	8003122 <HAL_DMA_IRQHandler+0x3e2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a15      	ldr	r2, [pc, #84]	@ (8003174 <HAL_DMA_IRQHandler+0x434>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d12a      	bne.n	8003178 <HAL_DMA_IRQHandler+0x438>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e023      	b.n	8003180 <HAL_DMA_IRQHandler+0x440>
 8003138:	40020010 	.word	0x40020010
 800313c:	40020028 	.word	0x40020028
 8003140:	40020040 	.word	0x40020040
 8003144:	40020058 	.word	0x40020058
 8003148:	40020070 	.word	0x40020070
 800314c:	40020088 	.word	0x40020088
 8003150:	400200a0 	.word	0x400200a0
 8003154:	400200b8 	.word	0x400200b8
 8003158:	40020410 	.word	0x40020410
 800315c:	40020428 	.word	0x40020428
 8003160:	40020440 	.word	0x40020440
 8003164:	40020458 	.word	0x40020458
 8003168:	40020470 	.word	0x40020470
 800316c:	40020488 	.word	0x40020488
 8003170:	400204a0 	.word	0x400204a0
 8003174:	400204b8 	.word	0x400204b8
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2300      	movs	r3, #0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00d      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	2204      	movs	r2, #4
 800318e:	409a      	lsls	r2, r3
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003198:	f043 0204 	orr.w	r2, r3, #4
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	2210      	movs	r2, #16
 80031aa:	409a      	lsls	r2, r3
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80a6 	beq.w	8003302 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a85      	ldr	r2, [pc, #532]	@ (80033d0 <HAL_DMA_IRQHandler+0x690>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d04a      	beq.n	8003256 <HAL_DMA_IRQHandler+0x516>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a83      	ldr	r2, [pc, #524]	@ (80033d4 <HAL_DMA_IRQHandler+0x694>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d045      	beq.n	8003256 <HAL_DMA_IRQHandler+0x516>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a82      	ldr	r2, [pc, #520]	@ (80033d8 <HAL_DMA_IRQHandler+0x698>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d040      	beq.n	8003256 <HAL_DMA_IRQHandler+0x516>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a80      	ldr	r2, [pc, #512]	@ (80033dc <HAL_DMA_IRQHandler+0x69c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d03b      	beq.n	8003256 <HAL_DMA_IRQHandler+0x516>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a7f      	ldr	r2, [pc, #508]	@ (80033e0 <HAL_DMA_IRQHandler+0x6a0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d036      	beq.n	8003256 <HAL_DMA_IRQHandler+0x516>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a7d      	ldr	r2, [pc, #500]	@ (80033e4 <HAL_DMA_IRQHandler+0x6a4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d031      	beq.n	8003256 <HAL_DMA_IRQHandler+0x516>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a7c      	ldr	r2, [pc, #496]	@ (80033e8 <HAL_DMA_IRQHandler+0x6a8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d02c      	beq.n	8003256 <HAL_DMA_IRQHandler+0x516>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a7a      	ldr	r2, [pc, #488]	@ (80033ec <HAL_DMA_IRQHandler+0x6ac>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d027      	beq.n	8003256 <HAL_DMA_IRQHandler+0x516>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a79      	ldr	r2, [pc, #484]	@ (80033f0 <HAL_DMA_IRQHandler+0x6b0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d022      	beq.n	8003256 <HAL_DMA_IRQHandler+0x516>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a77      	ldr	r2, [pc, #476]	@ (80033f4 <HAL_DMA_IRQHandler+0x6b4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d01d      	beq.n	8003256 <HAL_DMA_IRQHandler+0x516>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a76      	ldr	r2, [pc, #472]	@ (80033f8 <HAL_DMA_IRQHandler+0x6b8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d018      	beq.n	8003256 <HAL_DMA_IRQHandler+0x516>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a74      	ldr	r2, [pc, #464]	@ (80033fc <HAL_DMA_IRQHandler+0x6bc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_DMA_IRQHandler+0x516>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a73      	ldr	r2, [pc, #460]	@ (8003400 <HAL_DMA_IRQHandler+0x6c0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00e      	beq.n	8003256 <HAL_DMA_IRQHandler+0x516>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a71      	ldr	r2, [pc, #452]	@ (8003404 <HAL_DMA_IRQHandler+0x6c4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d009      	beq.n	8003256 <HAL_DMA_IRQHandler+0x516>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a70      	ldr	r2, [pc, #448]	@ (8003408 <HAL_DMA_IRQHandler+0x6c8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_DMA_IRQHandler+0x516>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a6e      	ldr	r2, [pc, #440]	@ (800340c <HAL_DMA_IRQHandler+0x6cc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d10a      	bne.n	800326c <HAL_DMA_IRQHandler+0x52c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e009      	b.n	8003280 <HAL_DMA_IRQHandler+0x540>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d03e      	beq.n	8003302 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	2210      	movs	r2, #16
 800328e:	409a      	lsls	r2, r3
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d018      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d108      	bne.n	80032c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d024      	beq.n	8003302 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
 80032c0:	e01f      	b.n	8003302 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01b      	beq.n	8003302 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
 80032d2:	e016      	b.n	8003302 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d107      	bne.n	80032f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0208 	bic.w	r2, r2, #8
 80032f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	2220      	movs	r2, #32
 800330c:	409a      	lsls	r2, r3
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 8110 	beq.w	8003538 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2c      	ldr	r2, [pc, #176]	@ (80033d0 <HAL_DMA_IRQHandler+0x690>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d04a      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x678>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2b      	ldr	r2, [pc, #172]	@ (80033d4 <HAL_DMA_IRQHandler+0x694>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d045      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x678>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a29      	ldr	r2, [pc, #164]	@ (80033d8 <HAL_DMA_IRQHandler+0x698>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d040      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x678>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a28      	ldr	r2, [pc, #160]	@ (80033dc <HAL_DMA_IRQHandler+0x69c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d03b      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x678>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a26      	ldr	r2, [pc, #152]	@ (80033e0 <HAL_DMA_IRQHandler+0x6a0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d036      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x678>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a25      	ldr	r2, [pc, #148]	@ (80033e4 <HAL_DMA_IRQHandler+0x6a4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d031      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x678>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a23      	ldr	r2, [pc, #140]	@ (80033e8 <HAL_DMA_IRQHandler+0x6a8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d02c      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x678>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a22      	ldr	r2, [pc, #136]	@ (80033ec <HAL_DMA_IRQHandler+0x6ac>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d027      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x678>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a20      	ldr	r2, [pc, #128]	@ (80033f0 <HAL_DMA_IRQHandler+0x6b0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d022      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x678>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1f      	ldr	r2, [pc, #124]	@ (80033f4 <HAL_DMA_IRQHandler+0x6b4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d01d      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x678>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1d      	ldr	r2, [pc, #116]	@ (80033f8 <HAL_DMA_IRQHandler+0x6b8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d018      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x678>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1c      	ldr	r2, [pc, #112]	@ (80033fc <HAL_DMA_IRQHandler+0x6bc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d013      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x678>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1a      	ldr	r2, [pc, #104]	@ (8003400 <HAL_DMA_IRQHandler+0x6c0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00e      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x678>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a19      	ldr	r2, [pc, #100]	@ (8003404 <HAL_DMA_IRQHandler+0x6c4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x678>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a17      	ldr	r2, [pc, #92]	@ (8003408 <HAL_DMA_IRQHandler+0x6c8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x678>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a16      	ldr	r2, [pc, #88]	@ (800340c <HAL_DMA_IRQHandler+0x6cc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d12b      	bne.n	8003410 <HAL_DMA_IRQHandler+0x6d0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bf14      	ite	ne
 80033c6:	2301      	movne	r3, #1
 80033c8:	2300      	moveq	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	e02a      	b.n	8003424 <HAL_DMA_IRQHandler+0x6e4>
 80033ce:	bf00      	nop
 80033d0:	40020010 	.word	0x40020010
 80033d4:	40020028 	.word	0x40020028
 80033d8:	40020040 	.word	0x40020040
 80033dc:	40020058 	.word	0x40020058
 80033e0:	40020070 	.word	0x40020070
 80033e4:	40020088 	.word	0x40020088
 80033e8:	400200a0 	.word	0x400200a0
 80033ec:	400200b8 	.word	0x400200b8
 80033f0:	40020410 	.word	0x40020410
 80033f4:	40020428 	.word	0x40020428
 80033f8:	40020440 	.word	0x40020440
 80033fc:	40020458 	.word	0x40020458
 8003400:	40020470 	.word	0x40020470
 8003404:	40020488 	.word	0x40020488
 8003408:	400204a0 	.word	0x400204a0
 800340c:	400204b8 	.word	0x400204b8
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	bf14      	ite	ne
 800341e:	2301      	movne	r3, #1
 8003420:	2300      	moveq	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8087 	beq.w	8003538 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2220      	movs	r2, #32
 8003434:	409a      	lsls	r2, r3
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b04      	cmp	r3, #4
 8003444:	d139      	bne.n	80034ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0216 	bic.w	r2, r2, #22
 8003454:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003464:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d103      	bne.n	8003476 <HAL_DMA_IRQHandler+0x736>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0208 	bic.w	r2, r2, #8
 8003484:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348a:	f003 031f 	and.w	r3, r3, #31
 800348e:	223f      	movs	r2, #63	@ 0x3f
 8003490:	409a      	lsls	r2, r3
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 834a 	beq.w	8003b44 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
          }
          return;
 80034b8:	e344      	b.n	8003b44 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d018      	beq.n	80034fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d108      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d02c      	beq.n	8003538 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
 80034e6:	e027      	b.n	8003538 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d023      	beq.n	8003538 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
 80034f8:	e01e      	b.n	8003538 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10f      	bne.n	8003528 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0210 	bic.w	r2, r2, #16
 8003516:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 8306 	beq.w	8003b4e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8088 	beq.w	8003660 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2204      	movs	r2, #4
 8003554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a7a      	ldr	r2, [pc, #488]	@ (8003748 <HAL_DMA_IRQHandler+0xa08>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d04a      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x8b8>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a79      	ldr	r2, [pc, #484]	@ (800374c <HAL_DMA_IRQHandler+0xa0c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d045      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x8b8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a77      	ldr	r2, [pc, #476]	@ (8003750 <HAL_DMA_IRQHandler+0xa10>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d040      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x8b8>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a76      	ldr	r2, [pc, #472]	@ (8003754 <HAL_DMA_IRQHandler+0xa14>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d03b      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x8b8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a74      	ldr	r2, [pc, #464]	@ (8003758 <HAL_DMA_IRQHandler+0xa18>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d036      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x8b8>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a73      	ldr	r2, [pc, #460]	@ (800375c <HAL_DMA_IRQHandler+0xa1c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d031      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x8b8>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a71      	ldr	r2, [pc, #452]	@ (8003760 <HAL_DMA_IRQHandler+0xa20>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d02c      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x8b8>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a70      	ldr	r2, [pc, #448]	@ (8003764 <HAL_DMA_IRQHandler+0xa24>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d027      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x8b8>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003768 <HAL_DMA_IRQHandler+0xa28>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d022      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x8b8>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a6d      	ldr	r2, [pc, #436]	@ (800376c <HAL_DMA_IRQHandler+0xa2c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d01d      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x8b8>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003770 <HAL_DMA_IRQHandler+0xa30>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d018      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x8b8>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a6a      	ldr	r2, [pc, #424]	@ (8003774 <HAL_DMA_IRQHandler+0xa34>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d013      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x8b8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a68      	ldr	r2, [pc, #416]	@ (8003778 <HAL_DMA_IRQHandler+0xa38>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00e      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x8b8>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a67      	ldr	r2, [pc, #412]	@ (800377c <HAL_DMA_IRQHandler+0xa3c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d009      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x8b8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a65      	ldr	r2, [pc, #404]	@ (8003780 <HAL_DMA_IRQHandler+0xa40>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x8b8>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a64      	ldr	r2, [pc, #400]	@ (8003784 <HAL_DMA_IRQHandler+0xa44>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d108      	bne.n	800360a <HAL_DMA_IRQHandler+0x8ca>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	e007      	b.n	800361a <HAL_DMA_IRQHandler+0x8da>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3301      	adds	r3, #1
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003622:	429a      	cmp	r2, r3
 8003624:	d307      	bcc.n	8003636 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f2      	bne.n	800361a <HAL_DMA_IRQHandler+0x8da>
 8003634:	e000      	b.n	8003638 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003636:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d004      	beq.n	8003650 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2203      	movs	r2, #3
 800364a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800364e:	e003      	b.n	8003658 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8272 	beq.w	8003b4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
 8003672:	e26c      	b.n	8003b4e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a43      	ldr	r2, [pc, #268]	@ (8003788 <HAL_DMA_IRQHandler+0xa48>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d022      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x984>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a42      	ldr	r2, [pc, #264]	@ (800378c <HAL_DMA_IRQHandler+0xa4c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d01d      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x984>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a40      	ldr	r2, [pc, #256]	@ (8003790 <HAL_DMA_IRQHandler+0xa50>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d018      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x984>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a3f      	ldr	r2, [pc, #252]	@ (8003794 <HAL_DMA_IRQHandler+0xa54>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d013      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x984>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a3d      	ldr	r2, [pc, #244]	@ (8003798 <HAL_DMA_IRQHandler+0xa58>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00e      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x984>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a3c      	ldr	r2, [pc, #240]	@ (800379c <HAL_DMA_IRQHandler+0xa5c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d009      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x984>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a3a      	ldr	r2, [pc, #232]	@ (80037a0 <HAL_DMA_IRQHandler+0xa60>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d004      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x984>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a39      	ldr	r2, [pc, #228]	@ (80037a4 <HAL_DMA_IRQHandler+0xa64>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d101      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x988>
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <HAL_DMA_IRQHandler+0x98a>
 80036c8:	2300      	movs	r3, #0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 823f 	beq.w	8003b4e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	2204      	movs	r2, #4
 80036e2:	409a      	lsls	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80cd 	beq.w	8003888 <HAL_DMA_IRQHandler+0xb48>
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80c7 	beq.w	8003888 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	2204      	movs	r2, #4
 8003704:	409a      	lsls	r2, r3
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d049      	beq.n	80037a8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8210 	beq.w	8003b48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003730:	e20a      	b.n	8003b48 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8206 	beq.w	8003b48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003744:	e200      	b.n	8003b48 <HAL_DMA_IRQHandler+0xe08>
 8003746:	bf00      	nop
 8003748:	40020010 	.word	0x40020010
 800374c:	40020028 	.word	0x40020028
 8003750:	40020040 	.word	0x40020040
 8003754:	40020058 	.word	0x40020058
 8003758:	40020070 	.word	0x40020070
 800375c:	40020088 	.word	0x40020088
 8003760:	400200a0 	.word	0x400200a0
 8003764:	400200b8 	.word	0x400200b8
 8003768:	40020410 	.word	0x40020410
 800376c:	40020428 	.word	0x40020428
 8003770:	40020440 	.word	0x40020440
 8003774:	40020458 	.word	0x40020458
 8003778:	40020470 	.word	0x40020470
 800377c:	40020488 	.word	0x40020488
 8003780:	400204a0 	.word	0x400204a0
 8003784:	400204b8 	.word	0x400204b8
 8003788:	58025408 	.word	0x58025408
 800378c:	5802541c 	.word	0x5802541c
 8003790:	58025430 	.word	0x58025430
 8003794:	58025444 	.word	0x58025444
 8003798:	58025458 	.word	0x58025458
 800379c:	5802546c 	.word	0x5802546c
 80037a0:	58025480 	.word	0x58025480
 80037a4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d160      	bne.n	8003874 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a7f      	ldr	r2, [pc, #508]	@ (80039b4 <HAL_DMA_IRQHandler+0xc74>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d04a      	beq.n	8003852 <HAL_DMA_IRQHandler+0xb12>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a7d      	ldr	r2, [pc, #500]	@ (80039b8 <HAL_DMA_IRQHandler+0xc78>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d045      	beq.n	8003852 <HAL_DMA_IRQHandler+0xb12>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a7c      	ldr	r2, [pc, #496]	@ (80039bc <HAL_DMA_IRQHandler+0xc7c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d040      	beq.n	8003852 <HAL_DMA_IRQHandler+0xb12>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a7a      	ldr	r2, [pc, #488]	@ (80039c0 <HAL_DMA_IRQHandler+0xc80>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d03b      	beq.n	8003852 <HAL_DMA_IRQHandler+0xb12>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a79      	ldr	r2, [pc, #484]	@ (80039c4 <HAL_DMA_IRQHandler+0xc84>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d036      	beq.n	8003852 <HAL_DMA_IRQHandler+0xb12>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a77      	ldr	r2, [pc, #476]	@ (80039c8 <HAL_DMA_IRQHandler+0xc88>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d031      	beq.n	8003852 <HAL_DMA_IRQHandler+0xb12>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a76      	ldr	r2, [pc, #472]	@ (80039cc <HAL_DMA_IRQHandler+0xc8c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d02c      	beq.n	8003852 <HAL_DMA_IRQHandler+0xb12>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a74      	ldr	r2, [pc, #464]	@ (80039d0 <HAL_DMA_IRQHandler+0xc90>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d027      	beq.n	8003852 <HAL_DMA_IRQHandler+0xb12>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a73      	ldr	r2, [pc, #460]	@ (80039d4 <HAL_DMA_IRQHandler+0xc94>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d022      	beq.n	8003852 <HAL_DMA_IRQHandler+0xb12>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a71      	ldr	r2, [pc, #452]	@ (80039d8 <HAL_DMA_IRQHandler+0xc98>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d01d      	beq.n	8003852 <HAL_DMA_IRQHandler+0xb12>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a70      	ldr	r2, [pc, #448]	@ (80039dc <HAL_DMA_IRQHandler+0xc9c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d018      	beq.n	8003852 <HAL_DMA_IRQHandler+0xb12>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6e      	ldr	r2, [pc, #440]	@ (80039e0 <HAL_DMA_IRQHandler+0xca0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <HAL_DMA_IRQHandler+0xb12>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a6d      	ldr	r2, [pc, #436]	@ (80039e4 <HAL_DMA_IRQHandler+0xca4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00e      	beq.n	8003852 <HAL_DMA_IRQHandler+0xb12>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a6b      	ldr	r2, [pc, #428]	@ (80039e8 <HAL_DMA_IRQHandler+0xca8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d009      	beq.n	8003852 <HAL_DMA_IRQHandler+0xb12>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a6a      	ldr	r2, [pc, #424]	@ (80039ec <HAL_DMA_IRQHandler+0xcac>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d004      	beq.n	8003852 <HAL_DMA_IRQHandler+0xb12>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a68      	ldr	r2, [pc, #416]	@ (80039f0 <HAL_DMA_IRQHandler+0xcb0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d108      	bne.n	8003864 <HAL_DMA_IRQHandler+0xb24>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0208 	bic.w	r2, r2, #8
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e007      	b.n	8003874 <HAL_DMA_IRQHandler+0xb34>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0204 	bic.w	r2, r2, #4
 8003872:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8165 	beq.w	8003b48 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003886:	e15f      	b.n	8003b48 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	2202      	movs	r2, #2
 8003892:	409a      	lsls	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80c5 	beq.w	8003a28 <HAL_DMA_IRQHandler+0xce8>
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80bf 	beq.w	8003a28 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	2202      	movs	r2, #2
 80038b4:	409a      	lsls	r2, r3
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d018      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 813a 	beq.w	8003b4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038e0:	e134      	b.n	8003b4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8130 	beq.w	8003b4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038f4:	e12a      	b.n	8003b4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f040 8089 	bne.w	8003a14 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a2b      	ldr	r2, [pc, #172]	@ (80039b4 <HAL_DMA_IRQHandler+0xc74>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d04a      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xc62>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a29      	ldr	r2, [pc, #164]	@ (80039b8 <HAL_DMA_IRQHandler+0xc78>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d045      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xc62>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a28      	ldr	r2, [pc, #160]	@ (80039bc <HAL_DMA_IRQHandler+0xc7c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d040      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xc62>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a26      	ldr	r2, [pc, #152]	@ (80039c0 <HAL_DMA_IRQHandler+0xc80>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d03b      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xc62>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a25      	ldr	r2, [pc, #148]	@ (80039c4 <HAL_DMA_IRQHandler+0xc84>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d036      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xc62>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a23      	ldr	r2, [pc, #140]	@ (80039c8 <HAL_DMA_IRQHandler+0xc88>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d031      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xc62>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a22      	ldr	r2, [pc, #136]	@ (80039cc <HAL_DMA_IRQHandler+0xc8c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d02c      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xc62>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a20      	ldr	r2, [pc, #128]	@ (80039d0 <HAL_DMA_IRQHandler+0xc90>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d027      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xc62>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1f      	ldr	r2, [pc, #124]	@ (80039d4 <HAL_DMA_IRQHandler+0xc94>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d022      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xc62>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1d      	ldr	r2, [pc, #116]	@ (80039d8 <HAL_DMA_IRQHandler+0xc98>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01d      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xc62>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1c      	ldr	r2, [pc, #112]	@ (80039dc <HAL_DMA_IRQHandler+0xc9c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d018      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xc62>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1a      	ldr	r2, [pc, #104]	@ (80039e0 <HAL_DMA_IRQHandler+0xca0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xc62>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a19      	ldr	r2, [pc, #100]	@ (80039e4 <HAL_DMA_IRQHandler+0xca4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00e      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xc62>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a17      	ldr	r2, [pc, #92]	@ (80039e8 <HAL_DMA_IRQHandler+0xca8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d009      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xc62>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a16      	ldr	r2, [pc, #88]	@ (80039ec <HAL_DMA_IRQHandler+0xcac>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xc62>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a14      	ldr	r2, [pc, #80]	@ (80039f0 <HAL_DMA_IRQHandler+0xcb0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d128      	bne.n	80039f4 <HAL_DMA_IRQHandler+0xcb4>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0214 	bic.w	r2, r2, #20
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	e027      	b.n	8003a04 <HAL_DMA_IRQHandler+0xcc4>
 80039b4:	40020010 	.word	0x40020010
 80039b8:	40020028 	.word	0x40020028
 80039bc:	40020040 	.word	0x40020040
 80039c0:	40020058 	.word	0x40020058
 80039c4:	40020070 	.word	0x40020070
 80039c8:	40020088 	.word	0x40020088
 80039cc:	400200a0 	.word	0x400200a0
 80039d0:	400200b8 	.word	0x400200b8
 80039d4:	40020410 	.word	0x40020410
 80039d8:	40020428 	.word	0x40020428
 80039dc:	40020440 	.word	0x40020440
 80039e0:	40020458 	.word	0x40020458
 80039e4:	40020470 	.word	0x40020470
 80039e8:	40020488 	.word	0x40020488
 80039ec:	400204a0 	.word	0x400204a0
 80039f0:	400204b8 	.word	0x400204b8
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 020a 	bic.w	r2, r2, #10
 8003a02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8097 	beq.w	8003b4c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a26:	e091      	b.n	8003b4c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	2208      	movs	r2, #8
 8003a32:	409a      	lsls	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8088 	beq.w	8003b4e <HAL_DMA_IRQHandler+0xe0e>
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8082 	beq.w	8003b4e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a41      	ldr	r2, [pc, #260]	@ (8003b54 <HAL_DMA_IRQHandler+0xe14>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d04a      	beq.n	8003aea <HAL_DMA_IRQHandler+0xdaa>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a3f      	ldr	r2, [pc, #252]	@ (8003b58 <HAL_DMA_IRQHandler+0xe18>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d045      	beq.n	8003aea <HAL_DMA_IRQHandler+0xdaa>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a3e      	ldr	r2, [pc, #248]	@ (8003b5c <HAL_DMA_IRQHandler+0xe1c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d040      	beq.n	8003aea <HAL_DMA_IRQHandler+0xdaa>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a3c      	ldr	r2, [pc, #240]	@ (8003b60 <HAL_DMA_IRQHandler+0xe20>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d03b      	beq.n	8003aea <HAL_DMA_IRQHandler+0xdaa>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a3b      	ldr	r2, [pc, #236]	@ (8003b64 <HAL_DMA_IRQHandler+0xe24>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d036      	beq.n	8003aea <HAL_DMA_IRQHandler+0xdaa>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a39      	ldr	r2, [pc, #228]	@ (8003b68 <HAL_DMA_IRQHandler+0xe28>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d031      	beq.n	8003aea <HAL_DMA_IRQHandler+0xdaa>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a38      	ldr	r2, [pc, #224]	@ (8003b6c <HAL_DMA_IRQHandler+0xe2c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d02c      	beq.n	8003aea <HAL_DMA_IRQHandler+0xdaa>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a36      	ldr	r2, [pc, #216]	@ (8003b70 <HAL_DMA_IRQHandler+0xe30>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d027      	beq.n	8003aea <HAL_DMA_IRQHandler+0xdaa>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a35      	ldr	r2, [pc, #212]	@ (8003b74 <HAL_DMA_IRQHandler+0xe34>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d022      	beq.n	8003aea <HAL_DMA_IRQHandler+0xdaa>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a33      	ldr	r2, [pc, #204]	@ (8003b78 <HAL_DMA_IRQHandler+0xe38>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01d      	beq.n	8003aea <HAL_DMA_IRQHandler+0xdaa>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a32      	ldr	r2, [pc, #200]	@ (8003b7c <HAL_DMA_IRQHandler+0xe3c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d018      	beq.n	8003aea <HAL_DMA_IRQHandler+0xdaa>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a30      	ldr	r2, [pc, #192]	@ (8003b80 <HAL_DMA_IRQHandler+0xe40>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <HAL_DMA_IRQHandler+0xdaa>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8003b84 <HAL_DMA_IRQHandler+0xe44>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00e      	beq.n	8003aea <HAL_DMA_IRQHandler+0xdaa>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8003b88 <HAL_DMA_IRQHandler+0xe48>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d009      	beq.n	8003aea <HAL_DMA_IRQHandler+0xdaa>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a2c      	ldr	r2, [pc, #176]	@ (8003b8c <HAL_DMA_IRQHandler+0xe4c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d004      	beq.n	8003aea <HAL_DMA_IRQHandler+0xdaa>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a2a      	ldr	r2, [pc, #168]	@ (8003b90 <HAL_DMA_IRQHandler+0xe50>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d108      	bne.n	8003afc <HAL_DMA_IRQHandler+0xdbc>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 021c 	bic.w	r2, r2, #28
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	e007      	b.n	8003b0c <HAL_DMA_IRQHandler+0xdcc>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 020e 	bic.w	r2, r2, #14
 8003b0a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2201      	movs	r2, #1
 8003b16:	409a      	lsls	r2, r3
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
 8003b42:	e004      	b.n	8003b4e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003b44:	bf00      	nop
 8003b46:	e002      	b.n	8003b4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b48:	bf00      	nop
 8003b4a:	e000      	b.n	8003b4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b4c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b4e:	3728      	adds	r7, #40	@ 0x28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40020010 	.word	0x40020010
 8003b58:	40020028 	.word	0x40020028
 8003b5c:	40020040 	.word	0x40020040
 8003b60:	40020058 	.word	0x40020058
 8003b64:	40020070 	.word	0x40020070
 8003b68:	40020088 	.word	0x40020088
 8003b6c:	400200a0 	.word	0x400200a0
 8003b70:	400200b8 	.word	0x400200b8
 8003b74:	40020410 	.word	0x40020410
 8003b78:	40020428 	.word	0x40020428
 8003b7c:	40020440 	.word	0x40020440
 8003b80:	40020458 	.word	0x40020458
 8003b84:	40020470 	.word	0x40020470
 8003b88:	40020488 	.word	0x40020488
 8003b8c:	400204a0 	.word	0x400204a0
 8003b90:	400204b8 	.word	0x400204b8

08003b94 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ba2:	b2db      	uxtb	r3, r3
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a42      	ldr	r2, [pc, #264]	@ (8003cc8 <DMA_CalcBaseAndBitshift+0x118>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d04a      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xa8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a41      	ldr	r2, [pc, #260]	@ (8003ccc <DMA_CalcBaseAndBitshift+0x11c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d045      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xa8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a3f      	ldr	r2, [pc, #252]	@ (8003cd0 <DMA_CalcBaseAndBitshift+0x120>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d040      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xa8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a3e      	ldr	r2, [pc, #248]	@ (8003cd4 <DMA_CalcBaseAndBitshift+0x124>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d03b      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xa8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a3c      	ldr	r2, [pc, #240]	@ (8003cd8 <DMA_CalcBaseAndBitshift+0x128>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d036      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xa8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a3b      	ldr	r2, [pc, #236]	@ (8003cdc <DMA_CalcBaseAndBitshift+0x12c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d031      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xa8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a39      	ldr	r2, [pc, #228]	@ (8003ce0 <DMA_CalcBaseAndBitshift+0x130>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d02c      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xa8>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a38      	ldr	r2, [pc, #224]	@ (8003ce4 <DMA_CalcBaseAndBitshift+0x134>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d027      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xa8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a36      	ldr	r2, [pc, #216]	@ (8003ce8 <DMA_CalcBaseAndBitshift+0x138>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d022      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xa8>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a35      	ldr	r2, [pc, #212]	@ (8003cec <DMA_CalcBaseAndBitshift+0x13c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d01d      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xa8>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a33      	ldr	r2, [pc, #204]	@ (8003cf0 <DMA_CalcBaseAndBitshift+0x140>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d018      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xa8>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a32      	ldr	r2, [pc, #200]	@ (8003cf4 <DMA_CalcBaseAndBitshift+0x144>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d013      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xa8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a30      	ldr	r2, [pc, #192]	@ (8003cf8 <DMA_CalcBaseAndBitshift+0x148>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00e      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xa8>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2f      	ldr	r2, [pc, #188]	@ (8003cfc <DMA_CalcBaseAndBitshift+0x14c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d009      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xa8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2d      	ldr	r2, [pc, #180]	@ (8003d00 <DMA_CalcBaseAndBitshift+0x150>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xa8>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2c      	ldr	r2, [pc, #176]	@ (8003d04 <DMA_CalcBaseAndBitshift+0x154>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <DMA_CalcBaseAndBitshift+0xac>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <DMA_CalcBaseAndBitshift+0xae>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d024      	beq.n	8003cac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	3b10      	subs	r3, #16
 8003c6a:	4a27      	ldr	r2, [pc, #156]	@ (8003d08 <DMA_CalcBaseAndBitshift+0x158>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	4a24      	ldr	r2, [pc, #144]	@ (8003d0c <DMA_CalcBaseAndBitshift+0x15c>)
 8003c7c:	5cd3      	ldrb	r3, [r2, r3]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d908      	bls.n	8003c9c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4b1f      	ldr	r3, [pc, #124]	@ (8003d10 <DMA_CalcBaseAndBitshift+0x160>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	1d1a      	adds	r2, r3, #4
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c9a:	e00d      	b.n	8003cb8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <DMA_CalcBaseAndBitshift+0x160>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003caa:	e005      	b.n	8003cb8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40020010 	.word	0x40020010
 8003ccc:	40020028 	.word	0x40020028
 8003cd0:	40020040 	.word	0x40020040
 8003cd4:	40020058 	.word	0x40020058
 8003cd8:	40020070 	.word	0x40020070
 8003cdc:	40020088 	.word	0x40020088
 8003ce0:	400200a0 	.word	0x400200a0
 8003ce4:	400200b8 	.word	0x400200b8
 8003ce8:	40020410 	.word	0x40020410
 8003cec:	40020428 	.word	0x40020428
 8003cf0:	40020440 	.word	0x40020440
 8003cf4:	40020458 	.word	0x40020458
 8003cf8:	40020470 	.word	0x40020470
 8003cfc:	40020488 	.word	0x40020488
 8003d00:	400204a0 	.word	0x400204a0
 8003d04:	400204b8 	.word	0x400204b8
 8003d08:	aaaaaaab 	.word	0xaaaaaaab
 8003d0c:	0800fe00 	.word	0x0800fe00
 8003d10:	fffffc00 	.word	0xfffffc00

08003d14 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d120      	bne.n	8003d6a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d858      	bhi.n	8003de2 <DMA_CheckFifoParam+0xce>
 8003d30:	a201      	add	r2, pc, #4	@ (adr r2, 8003d38 <DMA_CheckFifoParam+0x24>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d49 	.word	0x08003d49
 8003d3c:	08003d5b 	.word	0x08003d5b
 8003d40:	08003d49 	.word	0x08003d49
 8003d44:	08003de3 	.word	0x08003de3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d048      	beq.n	8003de6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d58:	e045      	b.n	8003de6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d62:	d142      	bne.n	8003dea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d68:	e03f      	b.n	8003dea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d72:	d123      	bne.n	8003dbc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d838      	bhi.n	8003dee <DMA_CheckFifoParam+0xda>
 8003d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d84 <DMA_CheckFifoParam+0x70>)
 8003d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d82:	bf00      	nop
 8003d84:	08003d95 	.word	0x08003d95
 8003d88:	08003d9b 	.word	0x08003d9b
 8003d8c:	08003d95 	.word	0x08003d95
 8003d90:	08003dad 	.word	0x08003dad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
        break;
 8003d98:	e030      	b.n	8003dfc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d025      	beq.n	8003df2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003daa:	e022      	b.n	8003df2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003db4:	d11f      	bne.n	8003df6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dba:	e01c      	b.n	8003df6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d902      	bls.n	8003dca <DMA_CheckFifoParam+0xb6>
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d003      	beq.n	8003dd0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003dc8:	e018      	b.n	8003dfc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
        break;
 8003dce:	e015      	b.n	8003dfc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00e      	beq.n	8003dfa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
    break;
 8003de0:	e00b      	b.n	8003dfa <DMA_CheckFifoParam+0xe6>
        break;
 8003de2:	bf00      	nop
 8003de4:	e00a      	b.n	8003dfc <DMA_CheckFifoParam+0xe8>
        break;
 8003de6:	bf00      	nop
 8003de8:	e008      	b.n	8003dfc <DMA_CheckFifoParam+0xe8>
        break;
 8003dea:	bf00      	nop
 8003dec:	e006      	b.n	8003dfc <DMA_CheckFifoParam+0xe8>
        break;
 8003dee:	bf00      	nop
 8003df0:	e004      	b.n	8003dfc <DMA_CheckFifoParam+0xe8>
        break;
 8003df2:	bf00      	nop
 8003df4:	e002      	b.n	8003dfc <DMA_CheckFifoParam+0xe8>
        break;
 8003df6:	bf00      	nop
 8003df8:	e000      	b.n	8003dfc <DMA_CheckFifoParam+0xe8>
    break;
 8003dfa:	bf00      	nop
    }
  }

  return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop

08003e0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a38      	ldr	r2, [pc, #224]	@ (8003f00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d022      	beq.n	8003e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a36      	ldr	r2, [pc, #216]	@ (8003f04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d01d      	beq.n	8003e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a35      	ldr	r2, [pc, #212]	@ (8003f08 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d018      	beq.n	8003e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a33      	ldr	r2, [pc, #204]	@ (8003f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a32      	ldr	r2, [pc, #200]	@ (8003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00e      	beq.n	8003e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a30      	ldr	r2, [pc, #192]	@ (8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d009      	beq.n	8003e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8003f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d004      	beq.n	8003e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a2d      	ldr	r2, [pc, #180]	@ (8003f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d101      	bne.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01a      	beq.n	8003eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	3b08      	subs	r3, #8
 8003e7c:	4a28      	ldr	r2, [pc, #160]	@ (8003f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4b26      	ldr	r3, [pc, #152]	@ (8003f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	461a      	mov	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a24      	ldr	r2, [pc, #144]	@ (8003f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003e98:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003ea8:	e024      	b.n	8003ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	3b10      	subs	r3, #16
 8003eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8003f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d806      	bhi.n	8003ed2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d902      	bls.n	8003ed2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3308      	adds	r3, #8
 8003ed0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4b18      	ldr	r3, [pc, #96]	@ (8003f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	461a      	mov	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a16      	ldr	r2, [pc, #88]	@ (8003f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ee4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2201      	movs	r2, #1
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	58025408 	.word	0x58025408
 8003f04:	5802541c 	.word	0x5802541c
 8003f08:	58025430 	.word	0x58025430
 8003f0c:	58025444 	.word	0x58025444
 8003f10:	58025458 	.word	0x58025458
 8003f14:	5802546c 	.word	0x5802546c
 8003f18:	58025480 	.word	0x58025480
 8003f1c:	58025494 	.word	0x58025494
 8003f20:	cccccccd 	.word	0xcccccccd
 8003f24:	16009600 	.word	0x16009600
 8003f28:	58025880 	.word	0x58025880
 8003f2c:	aaaaaaab 	.word	0xaaaaaaab
 8003f30:	400204b8 	.word	0x400204b8
 8003f34:	4002040f 	.word	0x4002040f
 8003f38:	10008200 	.word	0x10008200
 8003f3c:	40020880 	.word	0x40020880

08003f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d04a      	beq.n	8003fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d847      	bhi.n	8003fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a25      	ldr	r2, [pc, #148]	@ (8003ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d022      	beq.n	8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a24      	ldr	r2, [pc, #144]	@ (8003ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d01d      	beq.n	8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a22      	ldr	r2, [pc, #136]	@ (8004000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d018      	beq.n	8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a21      	ldr	r2, [pc, #132]	@ (8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d013      	beq.n	8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1f      	ldr	r2, [pc, #124]	@ (8004008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00e      	beq.n	8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1e      	ldr	r2, [pc, #120]	@ (800400c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d009      	beq.n	8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d004      	beq.n	8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d101      	bne.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4b17      	ldr	r3, [pc, #92]	@ (8004018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a15      	ldr	r2, [pc, #84]	@ (800401c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003fc8:	671a      	str	r2, [r3, #112]	@ 0x70
 8003fca:	e009      	b.n	8003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4b14      	ldr	r3, [pc, #80]	@ (8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a11      	ldr	r2, [pc, #68]	@ (8004024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003fde:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	58025408 	.word	0x58025408
 8003ffc:	5802541c 	.word	0x5802541c
 8004000:	58025430 	.word	0x58025430
 8004004:	58025444 	.word	0x58025444
 8004008:	58025458 	.word	0x58025458
 800400c:	5802546c 	.word	0x5802546c
 8004010:	58025480 	.word	0x58025480
 8004014:	58025494 	.word	0x58025494
 8004018:	1600963f 	.word	0x1600963f
 800401c:	58025940 	.word	0x58025940
 8004020:	1000823f 	.word	0x1000823f
 8004024:	40020940 	.word	0x40020940

08004028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004028:	b480      	push	{r7}
 800402a:	b089      	sub	sp, #36	@ 0x24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004036:	4b89      	ldr	r3, [pc, #548]	@ (800425c <HAL_GPIO_Init+0x234>)
 8004038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800403a:	e194      	b.n	8004366 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	2101      	movs	r1, #1
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	fa01 f303 	lsl.w	r3, r1, r3
 8004048:	4013      	ands	r3, r2
 800404a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8186 	beq.w	8004360 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d005      	beq.n	800406c <HAL_GPIO_Init+0x44>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d130      	bne.n	80040ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	2203      	movs	r2, #3
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4013      	ands	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040a2:	2201      	movs	r2, #1
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4013      	ands	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	f003 0201 	and.w	r2, r3, #1
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d017      	beq.n	800410a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	2203      	movs	r2, #3
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d123      	bne.n	800415e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	08da      	lsrs	r2, r3, #3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3208      	adds	r2, #8
 800411e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	220f      	movs	r2, #15
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43db      	mvns	r3, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4013      	ands	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4313      	orrs	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	08da      	lsrs	r2, r3, #3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3208      	adds	r2, #8
 8004158:	69b9      	ldr	r1, [r7, #24]
 800415a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	2203      	movs	r2, #3
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43db      	mvns	r3, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f003 0203 	and.w	r2, r3, #3
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 80e0 	beq.w	8004360 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004260 <HAL_GPIO_Init+0x238>)
 80041a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041a6:	4a2e      	ldr	r2, [pc, #184]	@ (8004260 <HAL_GPIO_Init+0x238>)
 80041a8:	f043 0302 	orr.w	r3, r3, #2
 80041ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80041b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004260 <HAL_GPIO_Init+0x238>)
 80041b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041be:	4a29      	ldr	r2, [pc, #164]	@ (8004264 <HAL_GPIO_Init+0x23c>)
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	089b      	lsrs	r3, r3, #2
 80041c4:	3302      	adds	r3, #2
 80041c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	220f      	movs	r2, #15
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43db      	mvns	r3, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4013      	ands	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a20      	ldr	r2, [pc, #128]	@ (8004268 <HAL_GPIO_Init+0x240>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d052      	beq.n	8004290 <HAL_GPIO_Init+0x268>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a1f      	ldr	r2, [pc, #124]	@ (800426c <HAL_GPIO_Init+0x244>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d031      	beq.n	8004256 <HAL_GPIO_Init+0x22e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004270 <HAL_GPIO_Init+0x248>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d02b      	beq.n	8004252 <HAL_GPIO_Init+0x22a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004274 <HAL_GPIO_Init+0x24c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d025      	beq.n	800424e <HAL_GPIO_Init+0x226>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a1c      	ldr	r2, [pc, #112]	@ (8004278 <HAL_GPIO_Init+0x250>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d01f      	beq.n	800424a <HAL_GPIO_Init+0x222>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a1b      	ldr	r2, [pc, #108]	@ (800427c <HAL_GPIO_Init+0x254>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d019      	beq.n	8004246 <HAL_GPIO_Init+0x21e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a1a      	ldr	r2, [pc, #104]	@ (8004280 <HAL_GPIO_Init+0x258>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d013      	beq.n	8004242 <HAL_GPIO_Init+0x21a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a19      	ldr	r2, [pc, #100]	@ (8004284 <HAL_GPIO_Init+0x25c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00d      	beq.n	800423e <HAL_GPIO_Init+0x216>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a18      	ldr	r2, [pc, #96]	@ (8004288 <HAL_GPIO_Init+0x260>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d007      	beq.n	800423a <HAL_GPIO_Init+0x212>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a17      	ldr	r2, [pc, #92]	@ (800428c <HAL_GPIO_Init+0x264>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d101      	bne.n	8004236 <HAL_GPIO_Init+0x20e>
 8004232:	2309      	movs	r3, #9
 8004234:	e02d      	b.n	8004292 <HAL_GPIO_Init+0x26a>
 8004236:	230a      	movs	r3, #10
 8004238:	e02b      	b.n	8004292 <HAL_GPIO_Init+0x26a>
 800423a:	2308      	movs	r3, #8
 800423c:	e029      	b.n	8004292 <HAL_GPIO_Init+0x26a>
 800423e:	2307      	movs	r3, #7
 8004240:	e027      	b.n	8004292 <HAL_GPIO_Init+0x26a>
 8004242:	2306      	movs	r3, #6
 8004244:	e025      	b.n	8004292 <HAL_GPIO_Init+0x26a>
 8004246:	2305      	movs	r3, #5
 8004248:	e023      	b.n	8004292 <HAL_GPIO_Init+0x26a>
 800424a:	2304      	movs	r3, #4
 800424c:	e021      	b.n	8004292 <HAL_GPIO_Init+0x26a>
 800424e:	2303      	movs	r3, #3
 8004250:	e01f      	b.n	8004292 <HAL_GPIO_Init+0x26a>
 8004252:	2302      	movs	r3, #2
 8004254:	e01d      	b.n	8004292 <HAL_GPIO_Init+0x26a>
 8004256:	2301      	movs	r3, #1
 8004258:	e01b      	b.n	8004292 <HAL_GPIO_Init+0x26a>
 800425a:	bf00      	nop
 800425c:	58000080 	.word	0x58000080
 8004260:	58024400 	.word	0x58024400
 8004264:	58000400 	.word	0x58000400
 8004268:	58020000 	.word	0x58020000
 800426c:	58020400 	.word	0x58020400
 8004270:	58020800 	.word	0x58020800
 8004274:	58020c00 	.word	0x58020c00
 8004278:	58021000 	.word	0x58021000
 800427c:	58021400 	.word	0x58021400
 8004280:	58021800 	.word	0x58021800
 8004284:	58021c00 	.word	0x58021c00
 8004288:	58022000 	.word	0x58022000
 800428c:	58022400 	.word	0x58022400
 8004290:	2300      	movs	r3, #0
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	f002 0203 	and.w	r2, r2, #3
 8004298:	0092      	lsls	r2, r2, #2
 800429a:	4093      	lsls	r3, r2
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042a2:	4938      	ldr	r1, [pc, #224]	@ (8004384 <HAL_GPIO_Init+0x35c>)
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	3302      	adds	r3, #2
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	43db      	mvns	r3, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4013      	ands	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80042d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80042de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004304:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	43db      	mvns	r3, r3
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4013      	ands	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	43db      	mvns	r3, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	3301      	adds	r3, #1
 8004364:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	f47f ae63 	bne.w	800403c <HAL_GPIO_Init+0x14>
  }
}
 8004376:	bf00      	nop
 8004378:	bf00      	nop
 800437a:	3724      	adds	r7, #36	@ 0x24
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	58000400 	.word	0x58000400

08004388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
 8004394:	4613      	mov	r3, r2
 8004396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004398:	787b      	ldrb	r3, [r7, #1]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800439e:	887a      	ldrh	r2, [r7, #2]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80043a4:	e003      	b.n	80043ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80043a6:	887b      	ldrh	r3, [r7, #2]
 80043a8:	041a      	lsls	r2, r3, #16
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	619a      	str	r2, [r3, #24]
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e08b      	b.n	80044e6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fc ff42 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2224      	movs	r2, #36	@ 0x24
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0201 	bic.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800440c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800441c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d107      	bne.n	8004436 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	e006      	b.n	8004444 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004442:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d108      	bne.n	800445e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800445a:	605a      	str	r2, [r3, #4]
 800445c:	e007      	b.n	800446e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800446c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	4b1d      	ldr	r3, [pc, #116]	@ (80044f0 <HAL_I2C_Init+0x134>)
 800447a:	430b      	orrs	r3, r1
 800447c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800448c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69d9      	ldr	r1, [r3, #28]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1a      	ldr	r2, [r3, #32]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	02008000 	.word	0x02008000

080044f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	68f9      	ldr	r1, [r7, #12]
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
  }
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d010      	beq.n	800456e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	09db      	lsrs	r3, r3, #7
 8004550:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455c:	f043 0201 	orr.w	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800456c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	0a9b      	lsrs	r3, r3, #10
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d010      	beq.n	800459c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	09db      	lsrs	r3, r3, #7
 800457e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	f043 0208 	orr.w	r2, r3, #8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800459a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	0a5b      	lsrs	r3, r3, #9
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d010      	beq.n	80045ca <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	09db      	lsrs	r3, r3, #7
 80045ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b8:	f043 0202 	orr.w	r2, r3, #2
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045c8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f003 030b 	and.w	r3, r3, #11
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80045da:	68f9      	ldr	r1, [r7, #12]
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fcdb 	bl	8004f98 <I2C_ITError>
  }
}
 80045e2:	bf00      	nop
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	460b      	mov	r3, r1
 800461c:	70fb      	strb	r3, [r7, #3]
 800461e:	4613      	mov	r3, r2
 8004620:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b086      	sub	sp, #24
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <I2C_Slave_ISR_IT+0x24>
 800468a:	2302      	movs	r3, #2
 800468c:	e0ed      	b.n	800486a <I2C_Slave_ISR_IT+0x200>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d004      	beq.n	80046b8 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80046ae:	6939      	ldr	r1, [r7, #16]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f9c1 	bl	8004a38 <I2C_ITSlaveCplt>
 80046b6:	e0d3      	b.n	8004860 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d04d      	beq.n	8004760 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	091b      	lsrs	r3, r3, #4
 80046c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d047      	beq.n	8004760 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d128      	bne.n	800472c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b28      	cmp	r3, #40	@ 0x28
 80046e4:	d108      	bne.n	80046f8 <I2C_Slave_ISR_IT+0x8e>
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046ec:	d104      	bne.n	80046f8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80046ee:	6939      	ldr	r1, [r7, #16]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 fbfb 	bl	8004eec <I2C_ITListenCplt>
 80046f6:	e032      	b.n	800475e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b29      	cmp	r3, #41	@ 0x29
 8004702:	d10e      	bne.n	8004722 <I2C_Slave_ISR_IT+0xb8>
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800470a:	d00a      	beq.n	8004722 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2210      	movs	r2, #16
 8004712:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 fd56 	bl	80051c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f92d 	bl	800497a <I2C_ITSlaveSeqCplt>
 8004720:	e01d      	b.n	800475e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2210      	movs	r2, #16
 8004728:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800472a:	e096      	b.n	800485a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2210      	movs	r2, #16
 8004732:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004738:	f043 0204 	orr.w	r2, r3, #4
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d004      	beq.n	8004750 <I2C_Slave_ISR_IT+0xe6>
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800474c:	f040 8085 	bne.w	800485a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004754:	4619      	mov	r1, r3
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 fc1e 	bl	8004f98 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800475c:	e07d      	b.n	800485a <I2C_Slave_ISR_IT+0x1f0>
 800475e:	e07c      	b.n	800485a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	089b      	lsrs	r3, r3, #2
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d030      	beq.n	80047ce <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	089b      	lsrs	r3, r3, #2
 8004770:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004774:	2b00      	cmp	r3, #0
 8004776:	d02a      	beq.n	80047ce <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d018      	beq.n	80047b4 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d14f      	bne.n	800485e <I2C_Slave_ISR_IT+0x1f4>
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047c4:	d04b      	beq.n	800485e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f8d7 	bl	800497a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80047cc:	e047      	b.n	800485e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	08db      	lsrs	r3, r3, #3
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	08db      	lsrs	r3, r3, #3
 80047de:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d004      	beq.n	80047f0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80047e6:	6939      	ldr	r1, [r7, #16]
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f842 	bl	8004872 <I2C_ITAddrCplt>
 80047ee:	e037      	b.n	8004860 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d031      	beq.n	8004860 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004804:	2b00      	cmp	r3, #0
 8004806:	d02b      	beq.n	8004860 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d018      	beq.n	8004844 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	781a      	ldrb	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482c:	b29b      	uxth	r3, r3
 800482e:	3b01      	subs	r3, #1
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004842:	e00d      	b.n	8004860 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800484a:	d002      	beq.n	8004852 <I2C_Slave_ISR_IT+0x1e8>
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f891 	bl	800497a <I2C_ITSlaveSeqCplt>
 8004858:	e002      	b.n	8004860 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800485a:	bf00      	nop
 800485c:	e000      	b.n	8004860 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800485e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004888:	2b28      	cmp	r3, #40	@ 0x28
 800488a:	d16a      	bne.n	8004962 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	0c1b      	lsrs	r3, r3, #16
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80048aa:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048b8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80048c6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d138      	bne.n	8004942 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80048d0:	897b      	ldrh	r3, [r7, #10]
 80048d2:	09db      	lsrs	r3, r3, #7
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	89bb      	ldrh	r3, [r7, #12]
 80048d8:	4053      	eors	r3, r2
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f003 0306 	and.w	r3, r3, #6
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d11c      	bne.n	800491e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80048e4:	897b      	ldrh	r3, [r7, #10]
 80048e6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d13b      	bne.n	8004972 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2208      	movs	r2, #8
 8004906:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004910:	89ba      	ldrh	r2, [r7, #12]
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff fe7b 	bl	8004612 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800491c:	e029      	b.n	8004972 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800491e:	893b      	ldrh	r3, [r7, #8]
 8004920:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004922:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fc8f 	bl	800524a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004934:	89ba      	ldrh	r2, [r7, #12]
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	4619      	mov	r1, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff fe69 	bl	8004612 <HAL_I2C_AddrCallback>
}
 8004940:	e017      	b.n	8004972 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004942:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fc7f 	bl	800524a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004954:	89ba      	ldrh	r2, [r7, #12]
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff fe59 	bl	8004612 <HAL_I2C_AddrCallback>
}
 8004960:	e007      	b.n	8004972 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2208      	movs	r2, #8
 8004968:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	0b9b      	lsrs	r3, r3, #14
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e00d      	b.n	80049cc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	0bdb      	lsrs	r3, r3, #15
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d007      	beq.n	80049cc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049ca:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b29      	cmp	r3, #41	@ 0x29
 80049d6:	d112      	bne.n	80049fe <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2228      	movs	r2, #40	@ 0x28
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2221      	movs	r2, #33	@ 0x21
 80049e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049e6:	2101      	movs	r1, #1
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fc2e 	bl	800524a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff fdf7 	bl	80045ea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80049fc:	e017      	b.n	8004a2e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a08:	d111      	bne.n	8004a2e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2228      	movs	r2, #40	@ 0x28
 8004a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2222      	movs	r2, #34	@ 0x22
 8004a16:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a18:	2102      	movs	r1, #2
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fc15 	bl	800524a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff fde8 	bl	80045fe <HAL_I2C_SlaveRxCpltCallback>
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a52:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a5a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2220      	movs	r2, #32
 8004a62:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a64:	7afb      	ldrb	r3, [r7, #11]
 8004a66:	2b21      	cmp	r3, #33	@ 0x21
 8004a68:	d002      	beq.n	8004a70 <I2C_ITSlaveCplt+0x38>
 8004a6a:	7afb      	ldrb	r3, [r7, #11]
 8004a6c:	2b29      	cmp	r3, #41	@ 0x29
 8004a6e:	d108      	bne.n	8004a82 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004a70:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fbe8 	bl	800524a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2221      	movs	r2, #33	@ 0x21
 8004a7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a80:	e019      	b.n	8004ab6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a82:	7afb      	ldrb	r3, [r7, #11]
 8004a84:	2b22      	cmp	r3, #34	@ 0x22
 8004a86:	d002      	beq.n	8004a8e <I2C_ITSlaveCplt+0x56>
 8004a88:	7afb      	ldrb	r3, [r7, #11]
 8004a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a8c:	d108      	bne.n	8004aa0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004a8e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fbd9 	bl	800524a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2222      	movs	r2, #34	@ 0x22
 8004a9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a9e:	e00a      	b.n	8004ab6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004aa0:	7afb      	ldrb	r3, [r7, #11]
 8004aa2:	2b28      	cmp	r3, #40	@ 0x28
 8004aa4:	d107      	bne.n	8004ab6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004aa6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fbcd 	bl	800524a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ac4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6859      	ldr	r1, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4b80      	ldr	r3, [pc, #512]	@ (8004cd4 <I2C_ITSlaveCplt+0x29c>)
 8004ad2:	400b      	ands	r3, r1
 8004ad4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fb75 	bl	80051c6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	0b9b      	lsrs	r3, r3, #14
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d07a      	beq.n	8004bde <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004af6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8112 	beq.w	8004d26 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a73      	ldr	r2, [pc, #460]	@ (8004cd8 <I2C_ITSlaveCplt+0x2a0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d059      	beq.n	8004bc2 <I2C_ITSlaveCplt+0x18a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a71      	ldr	r2, [pc, #452]	@ (8004cdc <I2C_ITSlaveCplt+0x2a4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d053      	beq.n	8004bc2 <I2C_ITSlaveCplt+0x18a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a6f      	ldr	r2, [pc, #444]	@ (8004ce0 <I2C_ITSlaveCplt+0x2a8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d04d      	beq.n	8004bc2 <I2C_ITSlaveCplt+0x18a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a6d      	ldr	r2, [pc, #436]	@ (8004ce4 <I2C_ITSlaveCplt+0x2ac>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d047      	beq.n	8004bc2 <I2C_ITSlaveCplt+0x18a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a6b      	ldr	r2, [pc, #428]	@ (8004ce8 <I2C_ITSlaveCplt+0x2b0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d041      	beq.n	8004bc2 <I2C_ITSlaveCplt+0x18a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a69      	ldr	r2, [pc, #420]	@ (8004cec <I2C_ITSlaveCplt+0x2b4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d03b      	beq.n	8004bc2 <I2C_ITSlaveCplt+0x18a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a67      	ldr	r2, [pc, #412]	@ (8004cf0 <I2C_ITSlaveCplt+0x2b8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d035      	beq.n	8004bc2 <I2C_ITSlaveCplt+0x18a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a65      	ldr	r2, [pc, #404]	@ (8004cf4 <I2C_ITSlaveCplt+0x2bc>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d02f      	beq.n	8004bc2 <I2C_ITSlaveCplt+0x18a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a63      	ldr	r2, [pc, #396]	@ (8004cf8 <I2C_ITSlaveCplt+0x2c0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d029      	beq.n	8004bc2 <I2C_ITSlaveCplt+0x18a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a61      	ldr	r2, [pc, #388]	@ (8004cfc <I2C_ITSlaveCplt+0x2c4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d023      	beq.n	8004bc2 <I2C_ITSlaveCplt+0x18a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a5f      	ldr	r2, [pc, #380]	@ (8004d00 <I2C_ITSlaveCplt+0x2c8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d01d      	beq.n	8004bc2 <I2C_ITSlaveCplt+0x18a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a5d      	ldr	r2, [pc, #372]	@ (8004d04 <I2C_ITSlaveCplt+0x2cc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d017      	beq.n	8004bc2 <I2C_ITSlaveCplt+0x18a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a5b      	ldr	r2, [pc, #364]	@ (8004d08 <I2C_ITSlaveCplt+0x2d0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d011      	beq.n	8004bc2 <I2C_ITSlaveCplt+0x18a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a59      	ldr	r2, [pc, #356]	@ (8004d0c <I2C_ITSlaveCplt+0x2d4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00b      	beq.n	8004bc2 <I2C_ITSlaveCplt+0x18a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a57      	ldr	r2, [pc, #348]	@ (8004d10 <I2C_ITSlaveCplt+0x2d8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d005      	beq.n	8004bc2 <I2C_ITSlaveCplt+0x18a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a55      	ldr	r2, [pc, #340]	@ (8004d14 <I2C_ITSlaveCplt+0x2dc>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d105      	bne.n	8004bce <I2C_ITSlaveCplt+0x196>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	e004      	b.n	8004bd8 <I2C_ITSlaveCplt+0x1a0>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8004bdc:	e0a3      	b.n	8004d26 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	0bdb      	lsrs	r3, r3, #15
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 809d 	beq.w	8004d26 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bfa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8090 	beq.w	8004d26 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a32      	ldr	r2, [pc, #200]	@ (8004cd8 <I2C_ITSlaveCplt+0x2a0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d059      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x28e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a30      	ldr	r2, [pc, #192]	@ (8004cdc <I2C_ITSlaveCplt+0x2a4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d053      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x28e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a2e      	ldr	r2, [pc, #184]	@ (8004ce0 <I2C_ITSlaveCplt+0x2a8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d04d      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x28e>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a2c      	ldr	r2, [pc, #176]	@ (8004ce4 <I2C_ITSlaveCplt+0x2ac>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d047      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x28e>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ce8 <I2C_ITSlaveCplt+0x2b0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d041      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x28e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a28      	ldr	r2, [pc, #160]	@ (8004cec <I2C_ITSlaveCplt+0x2b4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d03b      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x28e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a26      	ldr	r2, [pc, #152]	@ (8004cf0 <I2C_ITSlaveCplt+0x2b8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d035      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x28e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a24      	ldr	r2, [pc, #144]	@ (8004cf4 <I2C_ITSlaveCplt+0x2bc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d02f      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x28e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a22      	ldr	r2, [pc, #136]	@ (8004cf8 <I2C_ITSlaveCplt+0x2c0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d029      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x28e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a20      	ldr	r2, [pc, #128]	@ (8004cfc <I2C_ITSlaveCplt+0x2c4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d023      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x28e>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1e      	ldr	r2, [pc, #120]	@ (8004d00 <I2C_ITSlaveCplt+0x2c8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d01d      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x28e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1c      	ldr	r2, [pc, #112]	@ (8004d04 <I2C_ITSlaveCplt+0x2cc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d017      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x28e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004d08 <I2C_ITSlaveCplt+0x2d0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d011      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x28e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a18      	ldr	r2, [pc, #96]	@ (8004d0c <I2C_ITSlaveCplt+0x2d4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00b      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x28e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a16      	ldr	r2, [pc, #88]	@ (8004d10 <I2C_ITSlaveCplt+0x2d8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d005      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x28e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a14      	ldr	r2, [pc, #80]	@ (8004d14 <I2C_ITSlaveCplt+0x2dc>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d128      	bne.n	8004d18 <I2C_ITSlaveCplt+0x2e0>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	e027      	b.n	8004d22 <I2C_ITSlaveCplt+0x2ea>
 8004cd2:	bf00      	nop
 8004cd4:	fe00e800 	.word	0xfe00e800
 8004cd8:	40020010 	.word	0x40020010
 8004cdc:	40020028 	.word	0x40020028
 8004ce0:	40020040 	.word	0x40020040
 8004ce4:	40020058 	.word	0x40020058
 8004ce8:	40020070 	.word	0x40020070
 8004cec:	40020088 	.word	0x40020088
 8004cf0:	400200a0 	.word	0x400200a0
 8004cf4:	400200b8 	.word	0x400200b8
 8004cf8:	40020410 	.word	0x40020410
 8004cfc:	40020428 	.word	0x40020428
 8004d00:	40020440 	.word	0x40020440
 8004d04:	40020458 	.word	0x40020458
 8004d08:	40020470 	.word	0x40020470
 8004d0c:	40020488 	.word	0x40020488
 8004d10:	400204a0 	.word	0x400204a0
 8004d14:	400204b8 	.word	0x400204b8
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	089b      	lsrs	r3, r3, #2
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d020      	beq.n	8004d74 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f023 0304 	bic.w	r3, r3, #4
 8004d38:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00c      	beq.n	8004d74 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d82:	f043 0204 	orr.w	r2, r3, #4
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d04a      	beq.n	8004e2c <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d044      	beq.n	8004e2c <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d128      	bne.n	8004dfe <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b28      	cmp	r3, #40	@ 0x28
 8004db6:	d108      	bne.n	8004dca <I2C_ITSlaveCplt+0x392>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dbe:	d104      	bne.n	8004dca <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004dc0:	6979      	ldr	r1, [r7, #20]
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f892 	bl	8004eec <I2C_ITListenCplt>
 8004dc8:	e030      	b.n	8004e2c <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b29      	cmp	r3, #41	@ 0x29
 8004dd4:	d10e      	bne.n	8004df4 <I2C_ITSlaveCplt+0x3bc>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ddc:	d00a      	beq.n	8004df4 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2210      	movs	r2, #16
 8004de4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f9ed 	bl	80051c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff fdc4 	bl	800497a <I2C_ITSlaveSeqCplt>
 8004df2:	e01b      	b.n	8004e2c <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2210      	movs	r2, #16
 8004dfa:	61da      	str	r2, [r3, #28]
 8004dfc:	e016      	b.n	8004e2c <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2210      	movs	r2, #16
 8004e04:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0a:	f043 0204 	orr.w	r2, r3, #4
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <I2C_ITSlaveCplt+0x3e8>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e1e:	d105      	bne.n	8004e2c <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f8b6 	bl	8004f98 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d010      	beq.n	8004e64 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e46:	4619      	mov	r1, r3
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f8a5 	bl	8004f98 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b28      	cmp	r3, #40	@ 0x28
 8004e58:	d141      	bne.n	8004ede <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004e5a:	6979      	ldr	r1, [r7, #20]
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f845 	bl	8004eec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e62:	e03c      	b.n	8004ede <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e6c:	d014      	beq.n	8004e98 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff fd83 	bl	800497a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee8 <I2C_ITSlaveCplt+0x4b0>)
 8004e78:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff fbcc 	bl	800462e <HAL_I2C_ListenCpltCallback>
}
 8004e96:	e022      	b.n	8004ede <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b22      	cmp	r3, #34	@ 0x22
 8004ea2:	d10e      	bne.n	8004ec2 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff fb9f 	bl	80045fe <HAL_I2C_SlaveRxCpltCallback>
}
 8004ec0:	e00d      	b.n	8004ede <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff fb86 	bl	80045ea <HAL_I2C_SlaveTxCpltCallback>
}
 8004ede:	bf00      	nop
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	ffff0000 	.word	0xffff0000

08004eec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a26      	ldr	r2, [pc, #152]	@ (8004f94 <I2C_ITListenCplt+0xa8>)
 8004efa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	089b      	lsrs	r3, r3, #2
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d022      	beq.n	8004f6a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d012      	beq.n	8004f6a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f62:	f043 0204 	orr.w	r2, r3, #4
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f6a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f96b 	bl	800524a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2210      	movs	r2, #16
 8004f7a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff fb52 	bl	800462e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	ffff0000 	.word	0xffff0000

08004f98 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fa8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a6d      	ldr	r2, [pc, #436]	@ (800516c <I2C_ITError+0x1d4>)
 8004fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	2b28      	cmp	r3, #40	@ 0x28
 8004fce:	d005      	beq.n	8004fdc <I2C_ITError+0x44>
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	2b29      	cmp	r3, #41	@ 0x29
 8004fd4:	d002      	beq.n	8004fdc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fda:	d10b      	bne.n	8004ff4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004fdc:	2103      	movs	r1, #3
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f933 	bl	800524a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2228      	movs	r2, #40	@ 0x28
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a60      	ldr	r2, [pc, #384]	@ (8005170 <I2C_ITError+0x1d8>)
 8004ff0:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ff2:	e030      	b.n	8005056 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ff4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f926 	bl	800524a <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f8e1 	bl	80051c6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b60      	cmp	r3, #96	@ 0x60
 800500e:	d01f      	beq.n	8005050 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b20      	cmp	r3, #32
 8005024:	d114      	bne.n	8005050 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b10      	cmp	r3, #16
 8005032:	d109      	bne.n	8005048 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2210      	movs	r2, #16
 800503a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005040:	f043 0204 	orr.w	r2, r3, #4
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2220      	movs	r2, #32
 800504e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005060:	2b00      	cmp	r3, #0
 8005062:	d039      	beq.n	80050d8 <I2C_ITError+0x140>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b11      	cmp	r3, #17
 8005068:	d002      	beq.n	8005070 <I2C_ITError+0xd8>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b21      	cmp	r3, #33	@ 0x21
 800506e:	d133      	bne.n	80050d8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800507a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800507e:	d107      	bne.n	8005090 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800508e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005094:	4618      	mov	r0, r3
 8005096:	f7fe fd7d 	bl	8003b94 <HAL_DMA_GetState>
 800509a:	4603      	mov	r3, r0
 800509c:	2b01      	cmp	r3, #1
 800509e:	d017      	beq.n	80050d0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a4:	4a33      	ldr	r2, [pc, #204]	@ (8005174 <I2C_ITError+0x1dc>)
 80050a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fd fbfd 	bl	80028b4 <HAL_DMA_Abort_IT>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d04d      	beq.n	800515c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050ca:	4610      	mov	r0, r2
 80050cc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050ce:	e045      	b.n	800515c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f851 	bl	8005178 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050d6:	e041      	b.n	800515c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d039      	beq.n	8005154 <I2C_ITError+0x1bc>
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b12      	cmp	r3, #18
 80050e4:	d002      	beq.n	80050ec <I2C_ITError+0x154>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b22      	cmp	r3, #34	@ 0x22
 80050ea:	d133      	bne.n	8005154 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050fa:	d107      	bne.n	800510c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800510a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005110:	4618      	mov	r0, r3
 8005112:	f7fe fd3f 	bl	8003b94 <HAL_DMA_GetState>
 8005116:	4603      	mov	r3, r0
 8005118:	2b01      	cmp	r3, #1
 800511a:	d017      	beq.n	800514c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005120:	4a14      	ldr	r2, [pc, #80]	@ (8005174 <I2C_ITError+0x1dc>)
 8005122:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005130:	4618      	mov	r0, r3
 8005132:	f7fd fbbf 	bl	80028b4 <HAL_DMA_Abort_IT>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d011      	beq.n	8005160 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005146:	4610      	mov	r0, r2
 8005148:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800514a:	e009      	b.n	8005160 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f813 	bl	8005178 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005152:	e005      	b.n	8005160 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f80f 	bl	8005178 <I2C_TreatErrorCallback>
  }
}
 800515a:	e002      	b.n	8005162 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800515c:	bf00      	nop
 800515e:	e000      	b.n	8005162 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005160:	bf00      	nop
}
 8005162:	bf00      	nop
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	ffff0000 	.word	0xffff0000
 8005170:	0800466b 	.word	0x0800466b
 8005174:	0800520f 	.word	0x0800520f

08005178 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b60      	cmp	r3, #96	@ 0x60
 800518a:	d10e      	bne.n	80051aa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff fa57 	bl	8004656 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051a8:	e009      	b.n	80051be <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff fa42 	bl	8004642 <HAL_I2C_ErrorCallback>
}
 80051be:	bf00      	nop
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d103      	bne.n	80051e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2200      	movs	r2, #0
 80051e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d007      	beq.n	8005202 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	699a      	ldr	r2, [r3, #24]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0201 	orr.w	r2, r2, #1
 8005200:	619a      	str	r2, [r3, #24]
  }
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005228:	2200      	movs	r2, #0
 800522a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005238:	2200      	movs	r2, #0
 800523a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f7ff ff9b 	bl	8005178 <I2C_TreatErrorCallback>
}
 8005242:	bf00      	nop
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	460b      	mov	r3, r1
 8005254:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800525a:	887b      	ldrh	r3, [r7, #2]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00f      	beq.n	8005284 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800526a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005278:	2b28      	cmp	r3, #40	@ 0x28
 800527a:	d003      	beq.n	8005284 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005282:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005284:	887b      	ldrh	r3, [r7, #2]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00f      	beq.n	80052ae <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005294:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80052a2:	2b28      	cmp	r3, #40	@ 0x28
 80052a4:	d003      	beq.n	80052ae <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80052ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80052ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	da03      	bge.n	80052be <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80052bc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80052be:	887b      	ldrh	r3, [r7, #2]
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d103      	bne.n	80052cc <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80052ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80052cc:	887b      	ldrh	r3, [r7, #2]
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d103      	bne.n	80052da <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f043 0320 	orr.w	r3, r3, #32
 80052d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80052da:	887b      	ldrh	r3, [r7, #2]
 80052dc:	2b40      	cmp	r3, #64	@ 0x40
 80052de:	d103      	bne.n	80052e8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052e6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6819      	ldr	r1, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	43da      	mvns	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	400a      	ands	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]
}
 80052fa:	bf00      	nop
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b20      	cmp	r3, #32
 800531a:	d138      	bne.n	800538e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005326:	2302      	movs	r3, #2
 8005328:	e032      	b.n	8005390 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2224      	movs	r2, #36	@ 0x24
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0201 	bic.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005358:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6819      	ldr	r1, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0201 	orr.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	e000      	b.n	8005390 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800538e:	2302      	movs	r3, #2
  }
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d139      	bne.n	8005426 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053bc:	2302      	movs	r3, #2
 80053be:	e033      	b.n	8005428 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2224      	movs	r2, #36	@ 0x24
 80053cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0201 	bic.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80053ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0201 	orr.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	e000      	b.n	8005428 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005426:	2302      	movs	r3, #2
  }
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af02      	add	r7, sp, #8
 800543a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e0fe      	b.n	8005644 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f00a f934 	bl	800f6c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2203      	movs	r2, #3
 8005464:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f006 fcee 	bl	800be4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	7c1a      	ldrb	r2, [r3, #16]
 800547a:	f88d 2000 	strb.w	r2, [sp]
 800547e:	3304      	adds	r3, #4
 8005480:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005482:	f006 fbbf 	bl	800bc04 <USB_CoreInit>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0d5      	b.n	8005644 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2100      	movs	r1, #0
 800549e:	4618      	mov	r0, r3
 80054a0:	f006 fce6 	bl	800be70 <USB_SetCurrentMode>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e0c6      	b.n	8005644 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]
 80054ba:	e04a      	b.n	8005552 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80054bc:	7bfa      	ldrb	r2, [r7, #15]
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	4613      	mov	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	440b      	add	r3, r1
 80054ca:	3315      	adds	r3, #21
 80054cc:	2201      	movs	r2, #1
 80054ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80054d0:	7bfa      	ldrb	r2, [r7, #15]
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	3314      	adds	r3, #20
 80054e0:	7bfa      	ldrb	r2, [r7, #15]
 80054e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80054e4:	7bfa      	ldrb	r2, [r7, #15]
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	b298      	uxth	r0, r3
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	332e      	adds	r3, #46	@ 0x2e
 80054f8:	4602      	mov	r2, r0
 80054fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80054fc:	7bfa      	ldrb	r2, [r7, #15]
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	3318      	adds	r3, #24
 800550c:	2200      	movs	r2, #0
 800550e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005510:	7bfa      	ldrb	r2, [r7, #15]
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	331c      	adds	r3, #28
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005524:	7bfa      	ldrb	r2, [r7, #15]
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	4413      	add	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	3320      	adds	r3, #32
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005538:	7bfa      	ldrb	r2, [r7, #15]
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	3324      	adds	r3, #36	@ 0x24
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	3301      	adds	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	791b      	ldrb	r3, [r3, #4]
 8005556:	7bfa      	ldrb	r2, [r7, #15]
 8005558:	429a      	cmp	r2, r3
 800555a:	d3af      	bcc.n	80054bc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800555c:	2300      	movs	r3, #0
 800555e:	73fb      	strb	r3, [r7, #15]
 8005560:	e044      	b.n	80055ec <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005562:	7bfa      	ldrb	r2, [r7, #15]
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005578:	7bfa      	ldrb	r2, [r7, #15]
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	4613      	mov	r3, r2
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	4413      	add	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	440b      	add	r3, r1
 8005586:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800558a:	7bfa      	ldrb	r2, [r7, #15]
 800558c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800558e:	7bfa      	ldrb	r2, [r7, #15]
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80055a0:	2200      	movs	r2, #0
 80055a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80055a4:	7bfa      	ldrb	r2, [r7, #15]
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	4613      	mov	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80055ba:	7bfa      	ldrb	r2, [r7, #15]
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	4613      	mov	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	440b      	add	r3, r1
 80055c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80055d0:	7bfa      	ldrb	r2, [r7, #15]
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	3301      	adds	r3, #1
 80055ea:	73fb      	strb	r3, [r7, #15]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	791b      	ldrb	r3, [r3, #4]
 80055f0:	7bfa      	ldrb	r2, [r7, #15]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d3b5      	bcc.n	8005562 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	7c1a      	ldrb	r2, [r3, #16]
 80055fe:	f88d 2000 	strb.w	r2, [sp]
 8005602:	3304      	adds	r3, #4
 8005604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005606:	f006 fc7f 	bl	800bf08 <USB_DevInit>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e013      	b.n	8005644 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	7b1b      	ldrb	r3, [r3, #12]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d102      	bne.n	8005638 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f001 f96e 	bl	8006914 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f007 fcc2 	bl	800cfc6 <USB_DevDisconnect>

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_PCD_Start+0x1c>
 8005664:	2302      	movs	r3, #2
 8005666:	e022      	b.n	80056ae <HAL_PCD_Start+0x62>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005678:	2b00      	cmp	r3, #0
 800567a:	d009      	beq.n	8005690 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005680:	2b01      	cmp	r3, #1
 8005682:	d105      	bne.n	8005690 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005688:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f006 fbc9 	bl	800be2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f007 fc70 	bl	800cf84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80056b6:	b590      	push	{r4, r7, lr}
 80056b8:	b08d      	sub	sp, #52	@ 0x34
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f007 fd2e 	bl	800d12e <USB_GetMode>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f040 84b9 	bne.w	800604c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f007 fc92 	bl	800d008 <USB_ReadInterrupts>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 84af 	beq.w	800604a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	0a1b      	lsrs	r3, r3, #8
 80056f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4618      	mov	r0, r3
 8005706:	f007 fc7f 	bl	800d008 <USB_ReadInterrupts>
 800570a:	4603      	mov	r3, r0
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b02      	cmp	r3, #2
 8005712:	d107      	bne.n	8005724 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695a      	ldr	r2, [r3, #20]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f002 0202 	and.w	r2, r2, #2
 8005722:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f007 fc6d 	bl	800d008 <USB_ReadInterrupts>
 800572e:	4603      	mov	r3, r0
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b10      	cmp	r3, #16
 8005736:	d161      	bne.n	80057fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0210 	bic.w	r2, r2, #16
 8005746:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	f003 020f 	and.w	r2, r3, #15
 8005754:	4613      	mov	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	4413      	add	r3, r2
 8005764:	3304      	adds	r3, #4
 8005766:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800576e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005772:	d124      	bne.n	80057be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800577a:	4013      	ands	r3, r2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d035      	beq.n	80057ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	091b      	lsrs	r3, r3, #4
 8005788:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800578a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800578e:	b29b      	uxth	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	6a38      	ldr	r0, [r7, #32]
 8005794:	f007 faa4 	bl	800cce0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	091b      	lsrs	r3, r3, #4
 80057a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057a4:	441a      	add	r2, r3
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	695a      	ldr	r2, [r3, #20]
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	091b      	lsrs	r3, r3, #4
 80057b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057b6:	441a      	add	r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	615a      	str	r2, [r3, #20]
 80057bc:	e016      	b.n	80057ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80057c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80057c8:	d110      	bne.n	80057ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80057d0:	2208      	movs	r2, #8
 80057d2:	4619      	mov	r1, r3
 80057d4:	6a38      	ldr	r0, [r7, #32]
 80057d6:	f007 fa83 	bl	800cce0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	091b      	lsrs	r3, r3, #4
 80057e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057e6:	441a      	add	r2, r3
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0210 	orr.w	r2, r2, #16
 80057fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f007 fc01 	bl	800d008 <USB_ReadInterrupts>
 8005806:	4603      	mov	r3, r0
 8005808:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800580c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005810:	f040 80a7 	bne.w	8005962 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4618      	mov	r0, r3
 800581e:	f007 fc06 	bl	800d02e <USB_ReadDevAllOutEpInterrupt>
 8005822:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005824:	e099      	b.n	800595a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 808e 	beq.w	800594e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	4611      	mov	r1, r2
 800583c:	4618      	mov	r0, r3
 800583e:	f007 fc2a 	bl	800d096 <USB_ReadDevOutEPInterrupt>
 8005842:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00c      	beq.n	8005868 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585a:	461a      	mov	r2, r3
 800585c:	2301      	movs	r3, #1
 800585e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005860:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fed0 	bl	8006608 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00c      	beq.n	800588c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587e:	461a      	mov	r2, r3
 8005880:	2308      	movs	r3, #8
 8005882:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005884:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 ffa6 	bl	80067d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b00      	cmp	r3, #0
 8005894:	d008      	beq.n	80058a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a2:	461a      	mov	r2, r3
 80058a4:	2310      	movs	r3, #16
 80058a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d030      	beq.n	8005914 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ba:	2b80      	cmp	r3, #128	@ 0x80
 80058bc:	d109      	bne.n	80058d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80058d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d4:	4613      	mov	r3, r2
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	4413      	add	r3, r2
 80058e4:	3304      	adds	r3, #4
 80058e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	78db      	ldrb	r3, [r3, #3]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d108      	bne.n	8005902 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2200      	movs	r2, #0
 80058f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f00a f809 	bl	800f914 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590e:	461a      	mov	r2, r3
 8005910:	2302      	movs	r3, #2
 8005912:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b00      	cmp	r3, #0
 800591c:	d008      	beq.n	8005930 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800592a:	461a      	mov	r2, r3
 800592c:	2320      	movs	r3, #32
 800592e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005946:	461a      	mov	r2, r3
 8005948:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800594c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	3301      	adds	r3, #1
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005956:	085b      	lsrs	r3, r3, #1
 8005958:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	2b00      	cmp	r3, #0
 800595e:	f47f af62 	bne.w	8005826 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f007 fb4e 	bl	800d008 <USB_ReadInterrupts>
 800596c:	4603      	mov	r3, r0
 800596e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005972:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005976:	f040 80db 	bne.w	8005b30 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f007 fb6f 	bl	800d062 <USB_ReadDevAllInEpInterrupt>
 8005984:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800598a:	e0cd      	b.n	8005b28 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800598c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 80c2 	beq.w	8005b1c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	4611      	mov	r1, r2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f007 fb95 	bl	800d0d2 <USB_ReadDevInEPInterrupt>
 80059a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d057      	beq.n	8005a64 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	2201      	movs	r2, #1
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	43db      	mvns	r3, r3
 80059ce:	69f9      	ldr	r1, [r7, #28]
 80059d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059d4:	4013      	ands	r3, r2
 80059d6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80059d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059e4:	461a      	mov	r2, r3
 80059e6:	2301      	movs	r3, #1
 80059e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	799b      	ldrb	r3, [r3, #6]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d132      	bne.n	8005a58 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f6:	4613      	mov	r3, r2
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	3320      	adds	r3, #32
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a08:	4613      	mov	r3, r2
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4403      	add	r3, r0
 8005a12:	331c      	adds	r3, #28
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4419      	add	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4403      	add	r3, r0
 8005a26:	3320      	adds	r3, #32
 8005a28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d113      	bne.n	8005a58 <HAL_PCD_IRQHandler+0x3a2>
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a34:	4613      	mov	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	3324      	adds	r3, #36	@ 0x24
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d108      	bne.n	8005a58 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005a50:	461a      	mov	r2, r3
 8005a52:	2101      	movs	r1, #1
 8005a54:	f007 fb9e 	bl	800d194 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f009 fed3 	bl	800f80a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d008      	beq.n	8005a80 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	2308      	movs	r3, #8
 8005a7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f003 0310 	and.w	r3, r3, #16
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d008      	beq.n	8005a9c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a96:	461a      	mov	r2, r3
 8005a98:	2310      	movs	r3, #16
 8005a9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d008      	beq.n	8005ab8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	2340      	movs	r3, #64	@ 0x40
 8005ab6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d023      	beq.n	8005b0a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005ac2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ac4:	6a38      	ldr	r0, [r7, #32]
 8005ac6:	f006 fb7d 	bl	800c1c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005acc:	4613      	mov	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	3310      	adds	r3, #16
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	4413      	add	r3, r2
 8005ada:	3304      	adds	r3, #4
 8005adc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	78db      	ldrb	r3, [r3, #3]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d108      	bne.n	8005af8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f009 ff20 	bl	800f938 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b04:	461a      	mov	r2, r3
 8005b06:	2302      	movs	r3, #2
 8005b08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fcea 	bl	80064f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	3301      	adds	r3, #1
 8005b20:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b24:	085b      	lsrs	r3, r3, #1
 8005b26:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f47f af2e 	bne.w	800598c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f007 fa67 	bl	800d008 <USB_ReadInterrupts>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b44:	d122      	bne.n	8005b8c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d108      	bne.n	8005b76 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fef4 	bl	800695c <HAL_PCDEx_LPM_Callback>
 8005b74:	e002      	b.n	8005b7c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f009 febe 	bl	800f8f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695a      	ldr	r2, [r3, #20]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f007 fa39 	bl	800d008 <USB_ReadInterrupts>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ba0:	d112      	bne.n	8005bc8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d102      	bne.n	8005bb8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f009 fe7a 	bl	800f8ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695a      	ldr	r2, [r3, #20]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f007 fa1b 	bl	800d008 <USB_ReadInterrupts>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bdc:	d121      	bne.n	8005c22 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695a      	ldr	r2, [r3, #20]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005bec:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d111      	bne.n	8005c1c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c06:	089b      	lsrs	r3, r3, #2
 8005c08:	f003 020f 	and.w	r2, r3, #15
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005c12:	2101      	movs	r1, #1
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fea1 	bl	800695c <HAL_PCDEx_LPM_Callback>
 8005c1a:	e002      	b.n	8005c22 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f009 fe45 	bl	800f8ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f007 f9ee 	bl	800d008 <USB_ReadInterrupts>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c36:	f040 80b7 	bne.w	8005da8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	69fa      	ldr	r2, [r7, #28]
 8005c44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c48:	f023 0301 	bic.w	r3, r3, #1
 8005c4c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2110      	movs	r1, #16
 8005c54:	4618      	mov	r0, r3
 8005c56:	f006 fab5 	bl	800c1c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c5e:	e046      	b.n	8005cee <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c72:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ca6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	69fa      	ldr	r2, [r7, #28]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cc6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cd8:	0151      	lsls	r1, r2, #5
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	440a      	add	r2, r1
 8005cde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ce2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ce6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cea:	3301      	adds	r3, #1
 8005cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	791b      	ldrb	r3, [r3, #4]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d3b2      	bcc.n	8005c60 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d08:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005d0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	7bdb      	ldrb	r3, [r3, #15]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d016      	beq.n	8005d44 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d26:	f043 030b 	orr.w	r3, r3, #11
 8005d2a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d3c:	f043 030b 	orr.w	r3, r3, #11
 8005d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d42:	e015      	b.n	8005d70 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d4a:	695a      	ldr	r2, [r3, #20]
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d52:	4619      	mov	r1, r3
 8005d54:	f242 032b 	movw	r3, #8235	@ 0x202b
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d6a:	f043 030b 	orr.w	r3, r3, #11
 8005d6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d7e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005d82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d92:	461a      	mov	r2, r3
 8005d94:	f007 f9fe 	bl	800d194 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695a      	ldr	r2, [r3, #20]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005da6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f007 f92b 	bl	800d008 <USB_ReadInterrupts>
 8005db2:	4603      	mov	r3, r0
 8005db4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dbc:	d123      	bne.n	8005e06 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f007 f9c2 	bl	800d14c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f006 fa72 	bl	800c2b6 <USB_GetDevSpeed>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681c      	ldr	r4, [r3, #0]
 8005dde:	f001 fd9d 	bl	800791c <HAL_RCC_GetHCLKFreq>
 8005de2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005de8:	461a      	mov	r2, r3
 8005dea:	4620      	mov	r0, r4
 8005dec:	f005 ff7c 	bl	800bce8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f009 fd32 	bl	800f85a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695a      	ldr	r2, [r3, #20]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f007 f8fc 	bl	800d008 <USB_ReadInterrupts>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b08      	cmp	r3, #8
 8005e18:	d10a      	bne.n	8005e30 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f009 fd0f 	bl	800f83e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695a      	ldr	r2, [r3, #20]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f002 0208 	and.w	r2, r2, #8
 8005e2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f007 f8e7 	bl	800d008 <USB_ReadInterrupts>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e40:	2b80      	cmp	r3, #128	@ 0x80
 8005e42:	d123      	bne.n	8005e8c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e50:	2301      	movs	r3, #1
 8005e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e54:	e014      	b.n	8005e80 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	440b      	add	r3, r1
 8005e64:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d105      	bne.n	8005e7a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fb0a 	bl	800648e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	791b      	ldrb	r3, [r3, #4]
 8005e84:	461a      	mov	r2, r3
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d3e4      	bcc.n	8005e56 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f007 f8b9 	bl	800d008 <USB_ReadInterrupts>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ea0:	d13c      	bne.n	8005f1c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea6:	e02b      	b.n	8005f00 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	3318      	adds	r3, #24
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d115      	bne.n	8005efa <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005ece:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	da12      	bge.n	8005efa <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ed8:	4613      	mov	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	3317      	adds	r3, #23
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 faca 	bl	800648e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efc:	3301      	adds	r3, #1
 8005efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	791b      	ldrb	r3, [r3, #4]
 8005f04:	461a      	mov	r2, r3
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d3cd      	bcc.n	8005ea8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695a      	ldr	r2, [r3, #20]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005f1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f007 f871 	bl	800d008 <USB_ReadInterrupts>
 8005f26:	4603      	mov	r3, r0
 8005f28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f30:	d156      	bne.n	8005fe0 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f32:	2301      	movs	r3, #1
 8005f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f36:	e045      	b.n	8005fc4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	440b      	add	r3, r1
 8005f56:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d12e      	bne.n	8005fbe <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	da2b      	bge.n	8005fbe <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	0c1a      	lsrs	r2, r3, #16
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005f70:	4053      	eors	r3, r2
 8005f72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d121      	bne.n	8005fbe <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f7e:	4613      	mov	r3, r2
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	4413      	add	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	440b      	add	r3, r1
 8005f88:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fba:	6053      	str	r3, [r2, #4]
            break;
 8005fbc:	e008      	b.n	8005fd0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	791b      	ldrb	r3, [r3, #4]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d3b3      	bcc.n	8005f38 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695a      	ldr	r2, [r3, #20]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005fde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f007 f80f 	bl	800d008 <USB_ReadInterrupts>
 8005fea:	4603      	mov	r3, r0
 8005fec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff4:	d10a      	bne.n	800600c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f009 fcb0 	bl	800f95c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695a      	ldr	r2, [r3, #20]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800600a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4618      	mov	r0, r3
 8006012:	f006 fff9 	bl	800d008 <USB_ReadInterrupts>
 8006016:	4603      	mov	r3, r0
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b04      	cmp	r3, #4
 800601e:	d115      	bne.n	800604c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	f003 0304 	and.w	r3, r3, #4
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f009 fca0 	bl	800f978 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6859      	ldr	r1, [r3, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	430a      	orrs	r2, r1
 8006046:	605a      	str	r2, [r3, #4]
 8006048:	e000      	b.n	800604c <HAL_PCD_IRQHandler+0x996>
      return;
 800604a:	bf00      	nop
    }
  }
}
 800604c:	3734      	adds	r7, #52	@ 0x34
 800604e:	46bd      	mov	sp, r7
 8006050:	bd90      	pop	{r4, r7, pc}

08006052 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b082      	sub	sp, #8
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	460b      	mov	r3, r1
 800605c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_PCD_SetAddress+0x1a>
 8006068:	2302      	movs	r3, #2
 800606a:	e012      	b.n	8006092 <HAL_PCD_SetAddress+0x40>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	78fa      	ldrb	r2, [r7, #3]
 8006078:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	78fa      	ldrb	r2, [r7, #3]
 8006080:	4611      	mov	r1, r2
 8006082:	4618      	mov	r0, r3
 8006084:	f006 ff58 	bl	800cf38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	4608      	mov	r0, r1
 80060a4:	4611      	mov	r1, r2
 80060a6:	461a      	mov	r2, r3
 80060a8:	4603      	mov	r3, r0
 80060aa:	70fb      	strb	r3, [r7, #3]
 80060ac:	460b      	mov	r3, r1
 80060ae:	803b      	strh	r3, [r7, #0]
 80060b0:	4613      	mov	r3, r2
 80060b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	da0f      	bge.n	80060e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	f003 020f 	and.w	r2, r3, #15
 80060c6:	4613      	mov	r3, r2
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	4413      	add	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	3310      	adds	r3, #16
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	4413      	add	r3, r2
 80060d4:	3304      	adds	r3, #4
 80060d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2201      	movs	r2, #1
 80060dc:	705a      	strb	r2, [r3, #1]
 80060de:	e00f      	b.n	8006100 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	f003 020f 	and.w	r2, r3, #15
 80060e6:	4613      	mov	r3, r2
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	4413      	add	r3, r2
 80060f6:	3304      	adds	r3, #4
 80060f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	b2da      	uxtb	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800610c:	883b      	ldrh	r3, [r7, #0]
 800610e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	78ba      	ldrb	r2, [r7, #2]
 800611a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	785b      	ldrb	r3, [r3, #1]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800612e:	78bb      	ldrb	r3, [r7, #2]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d102      	bne.n	800613a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_PCD_EP_Open+0xae>
 8006144:	2302      	movs	r3, #2
 8006146:	e00e      	b.n	8006166 <HAL_PCD_EP_Open+0xcc>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68f9      	ldr	r1, [r7, #12]
 8006156:	4618      	mov	r0, r3
 8006158:	f006 f8d2 	bl	800c300 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006164:	7afb      	ldrb	r3, [r7, #11]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800617a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800617e:	2b00      	cmp	r3, #0
 8006180:	da0f      	bge.n	80061a2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	f003 020f 	and.w	r2, r3, #15
 8006188:	4613      	mov	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	3310      	adds	r3, #16
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	4413      	add	r3, r2
 8006196:	3304      	adds	r3, #4
 8006198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	705a      	strb	r2, [r3, #1]
 80061a0:	e00f      	b.n	80061c2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	f003 020f 	and.w	r2, r3, #15
 80061a8:	4613      	mov	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	4413      	add	r3, r2
 80061b8:	3304      	adds	r3, #4
 80061ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_PCD_EP_Close+0x6e>
 80061d8:	2302      	movs	r3, #2
 80061da:	e00e      	b.n	80061fa <HAL_PCD_EP_Close+0x8c>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68f9      	ldr	r1, [r7, #12]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f006 f910 	bl	800c410 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b086      	sub	sp, #24
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
 800620e:	460b      	mov	r3, r1
 8006210:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006212:	7afb      	ldrb	r3, [r7, #11]
 8006214:	f003 020f 	and.w	r2, r3, #15
 8006218:	4613      	mov	r3, r2
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	3304      	adds	r3, #4
 800622a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2200      	movs	r2, #0
 800623c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2200      	movs	r2, #0
 8006242:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006244:	7afb      	ldrb	r3, [r7, #11]
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	b2da      	uxtb	r2, r3
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	799b      	ldrb	r3, [r3, #6]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d102      	bne.n	800625e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	799b      	ldrb	r3, [r3, #6]
 8006266:	461a      	mov	r2, r3
 8006268:	6979      	ldr	r1, [r7, #20]
 800626a:	f006 f9ad 	bl	800c5c8 <USB_EPStartXfer>

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	f003 020f 	and.w	r2, r3, #15
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	4613      	mov	r3, r2
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	440b      	add	r3, r1
 8006296:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800629a:	681b      	ldr	r3, [r3, #0]
}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	607a      	str	r2, [r7, #4]
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	460b      	mov	r3, r1
 80062b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062b8:	7afb      	ldrb	r3, [r7, #11]
 80062ba:	f003 020f 	and.w	r2, r3, #15
 80062be:	4613      	mov	r3, r2
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	3310      	adds	r3, #16
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	3304      	adds	r3, #4
 80062ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2200      	movs	r2, #0
 80062e0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2201      	movs	r2, #1
 80062e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062e8:	7afb      	ldrb	r3, [r7, #11]
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	799b      	ldrb	r3, [r3, #6]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d102      	bne.n	8006302 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6818      	ldr	r0, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	799b      	ldrb	r3, [r3, #6]
 800630a:	461a      	mov	r2, r3
 800630c:	6979      	ldr	r1, [r7, #20]
 800630e:	f006 f95b 	bl	800c5c8 <USB_EPStartXfer>

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	7912      	ldrb	r2, [r2, #4]
 8006332:	4293      	cmp	r3, r2
 8006334:	d901      	bls.n	800633a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e04f      	b.n	80063da <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800633a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800633e:	2b00      	cmp	r3, #0
 8006340:	da0f      	bge.n	8006362 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	f003 020f 	and.w	r2, r3, #15
 8006348:	4613      	mov	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	4413      	add	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	3310      	adds	r3, #16
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	4413      	add	r3, r2
 8006356:	3304      	adds	r3, #4
 8006358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	705a      	strb	r2, [r3, #1]
 8006360:	e00d      	b.n	800637e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006362:	78fa      	ldrb	r2, [r7, #3]
 8006364:	4613      	mov	r3, r2
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	4413      	add	r3, r2
 8006374:	3304      	adds	r3, #4
 8006376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	b2da      	uxtb	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_PCD_EP_SetStall+0x82>
 800639a:	2302      	movs	r3, #2
 800639c:	e01d      	b.n	80063da <HAL_PCD_EP_SetStall+0xbe>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68f9      	ldr	r1, [r7, #12]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f006 fcef 	bl	800cd90 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063b2:	78fb      	ldrb	r3, [r7, #3]
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d109      	bne.n	80063d0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	7999      	ldrb	r1, [r3, #6]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80063ca:	461a      	mov	r2, r3
 80063cc:	f006 fee2 	bl	800d194 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	460b      	mov	r3, r1
 80063ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	f003 030f 	and.w	r3, r3, #15
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	7912      	ldrb	r2, [r2, #4]
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d901      	bls.n	8006400 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e042      	b.n	8006486 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006404:	2b00      	cmp	r3, #0
 8006406:	da0f      	bge.n	8006428 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	f003 020f 	and.w	r2, r3, #15
 800640e:	4613      	mov	r3, r2
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	3310      	adds	r3, #16
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	4413      	add	r3, r2
 800641c:	3304      	adds	r3, #4
 800641e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	705a      	strb	r2, [r3, #1]
 8006426:	e00f      	b.n	8006448 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	f003 020f 	and.w	r2, r3, #15
 800642e:	4613      	mov	r3, r2
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	4413      	add	r3, r2
 800643e:	3304      	adds	r3, #4
 8006440:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800644e:	78fb      	ldrb	r3, [r7, #3]
 8006450:	f003 030f 	and.w	r3, r3, #15
 8006454:	b2da      	uxtb	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_PCD_EP_ClrStall+0x86>
 8006464:	2302      	movs	r3, #2
 8006466:	e00e      	b.n	8006486 <HAL_PCD_EP_ClrStall+0xa4>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68f9      	ldr	r1, [r7, #12]
 8006476:	4618      	mov	r0, r3
 8006478:	f006 fcf8 	bl	800ce6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	460b      	mov	r3, r1
 8006498:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800649a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	da0c      	bge.n	80064bc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	f003 020f 	and.w	r2, r3, #15
 80064a8:	4613      	mov	r3, r2
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	4413      	add	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	3310      	adds	r3, #16
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	4413      	add	r3, r2
 80064b6:	3304      	adds	r3, #4
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	e00c      	b.n	80064d6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	f003 020f 	and.w	r2, r3, #15
 80064c2:	4613      	mov	r3, r2
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	4413      	add	r3, r2
 80064d2:	3304      	adds	r3, #4
 80064d4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68f9      	ldr	r1, [r7, #12]
 80064dc:	4618      	mov	r0, r3
 80064de:	f006 fb17 	bl	800cb10 <USB_EPStopXfer>
 80064e2:	4603      	mov	r3, r0
 80064e4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80064e6:	7afb      	ldrb	r3, [r7, #11]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	@ 0x28
 80064f4:	af02      	add	r7, sp, #8
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	4613      	mov	r3, r2
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	3310      	adds	r3, #16
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	4413      	add	r3, r2
 8006514:	3304      	adds	r3, #4
 8006516:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	695a      	ldr	r2, [r3, #20]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	429a      	cmp	r2, r3
 8006522:	d901      	bls.n	8006528 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e06b      	b.n	8006600 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	691a      	ldr	r2, [r3, #16]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	69fa      	ldr	r2, [r7, #28]
 800653a:	429a      	cmp	r2, r3
 800653c:	d902      	bls.n	8006544 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	3303      	adds	r3, #3
 8006548:	089b      	lsrs	r3, r3, #2
 800654a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800654c:	e02a      	b.n	80065a4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	691a      	ldr	r2, [r3, #16]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	429a      	cmp	r2, r3
 8006562:	d902      	bls.n	800656a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	3303      	adds	r3, #3
 800656e:	089b      	lsrs	r3, r3, #2
 8006570:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	68d9      	ldr	r1, [r3, #12]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	b2da      	uxtb	r2, r3
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	4603      	mov	r3, r0
 8006586:	6978      	ldr	r0, [r7, #20]
 8006588:	f006 fb6c 	bl	800cc64 <USB_WritePacket>

    ep->xfer_buff  += len;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	441a      	add	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	695a      	ldr	r2, [r3, #20]
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	441a      	add	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d809      	bhi.n	80065ce <PCD_WriteEmptyTxFifo+0xde>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	695a      	ldr	r2, [r3, #20]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d203      	bcs.n	80065ce <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1bf      	bne.n	800654e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	691a      	ldr	r2, [r3, #16]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d811      	bhi.n	80065fe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	2201      	movs	r2, #1
 80065e2:	fa02 f303 	lsl.w	r3, r2, r3
 80065e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	43db      	mvns	r3, r3
 80065f4:	6939      	ldr	r1, [r7, #16]
 80065f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065fa:	4013      	ands	r3, r2
 80065fc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3720      	adds	r7, #32
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	333c      	adds	r3, #60	@ 0x3c
 8006620:	3304      	adds	r3, #4
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	799b      	ldrb	r3, [r3, #6]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d17b      	bne.n	8006736 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f003 0308 	and.w	r3, r3, #8
 8006644:	2b00      	cmp	r3, #0
 8006646:	d015      	beq.n	8006674 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	4a61      	ldr	r2, [pc, #388]	@ (80067d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	f240 80b9 	bls.w	80067c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 80b3 	beq.w	80067c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666a:	461a      	mov	r2, r3
 800666c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006670:	6093      	str	r3, [r2, #8]
 8006672:	e0a7      	b.n	80067c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f003 0320 	and.w	r3, r3, #32
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668a:	461a      	mov	r2, r3
 800668c:	2320      	movs	r3, #32
 800668e:	6093      	str	r3, [r2, #8]
 8006690:	e098      	b.n	80067c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006698:	2b00      	cmp	r3, #0
 800669a:	f040 8093 	bne.w	80067c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4a4b      	ldr	r2, [pc, #300]	@ (80067d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d90f      	bls.n	80066c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00a      	beq.n	80066c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066bc:	461a      	mov	r2, r3
 80066be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066c2:	6093      	str	r3, [r2, #8]
 80066c4:	e07e      	b.n	80067c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	4613      	mov	r3, r2
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	4413      	add	r3, r2
 80066d8:	3304      	adds	r3, #4
 80066da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a1a      	ldr	r2, [r3, #32]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	0159      	lsls	r1, r3, #5
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	440b      	add	r3, r1
 80066e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066f2:	1ad2      	subs	r2, r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d114      	bne.n	8006728 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006710:	461a      	mov	r2, r3
 8006712:	2101      	movs	r1, #1
 8006714:	f006 fd3e 	bl	800d194 <USB_EP0_OutStart>
 8006718:	e006      	b.n	8006728 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	441a      	add	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f009 f850 	bl	800f7d4 <HAL_PCD_DataOutStageCallback>
 8006734:	e046      	b.n	80067c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	4a26      	ldr	r2, [pc, #152]	@ (80067d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d124      	bne.n	8006788 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006754:	461a      	mov	r2, r3
 8006756:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800675a:	6093      	str	r3, [r2, #8]
 800675c:	e032      	b.n	80067c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f003 0320 	and.w	r3, r3, #32
 8006764:	2b00      	cmp	r3, #0
 8006766:	d008      	beq.n	800677a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006774:	461a      	mov	r2, r3
 8006776:	2320      	movs	r3, #32
 8006778:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	b2db      	uxtb	r3, r3
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f009 f827 	bl	800f7d4 <HAL_PCD_DataOutStageCallback>
 8006786:	e01d      	b.n	80067c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d114      	bne.n	80067b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	4613      	mov	r3, r2
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	440b      	add	r3, r1
 800679c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d108      	bne.n	80067b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80067b0:	461a      	mov	r2, r3
 80067b2:	2100      	movs	r1, #0
 80067b4:	f006 fcee 	bl	800d194 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f009 f808 	bl	800f7d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3720      	adds	r7, #32
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	4f54300a 	.word	0x4f54300a
 80067d4:	4f54310a 	.word	0x4f54310a

080067d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	333c      	adds	r3, #60	@ 0x3c
 80067f0:	3304      	adds	r3, #4
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4a15      	ldr	r2, [pc, #84]	@ (8006860 <PCD_EP_OutSetupPacket_int+0x88>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d90e      	bls.n	800682c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006814:	2b00      	cmp	r3, #0
 8006816:	d009      	beq.n	800682c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006824:	461a      	mov	r2, r3
 8006826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800682a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f008 ffbf 	bl	800f7b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4a0a      	ldr	r2, [pc, #40]	@ (8006860 <PCD_EP_OutSetupPacket_int+0x88>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d90c      	bls.n	8006854 <PCD_EP_OutSetupPacket_int+0x7c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	799b      	ldrb	r3, [r3, #6]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d108      	bne.n	8006854 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6818      	ldr	r0, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800684c:	461a      	mov	r2, r3
 800684e:	2101      	movs	r1, #1
 8006850:	f006 fca0 	bl	800d194 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	4f54300a 	.word	0x4f54300a

08006864 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
 8006870:	4613      	mov	r3, r2
 8006872:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d107      	bne.n	8006892 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006882:	883b      	ldrh	r3, [r7, #0]
 8006884:	0419      	lsls	r1, r3, #16
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	430a      	orrs	r2, r1
 800688e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006890:	e028      	b.n	80068e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006898:	0c1b      	lsrs	r3, r3, #16
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	4413      	add	r3, r2
 800689e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068a0:	2300      	movs	r3, #0
 80068a2:	73fb      	strb	r3, [r7, #15]
 80068a4:	e00d      	b.n	80068c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	3340      	adds	r3, #64	@ 0x40
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	0c1b      	lsrs	r3, r3, #16
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	4413      	add	r3, r2
 80068ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	3301      	adds	r3, #1
 80068c0:	73fb      	strb	r3, [r7, #15]
 80068c2:	7bfa      	ldrb	r2, [r7, #15]
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d3ec      	bcc.n	80068a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80068cc:	883b      	ldrh	r3, [r7, #0]
 80068ce:	0418      	lsls	r0, r3, #16
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6819      	ldr	r1, [r3, #0]
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	4302      	orrs	r2, r0
 80068dc:	3340      	adds	r3, #64	@ 0x40
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	460b      	mov	r3, r1
 80068fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	887a      	ldrh	r2, [r7, #2]
 8006904:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006942:	4b05      	ldr	r3, [pc, #20]	@ (8006958 <HAL_PCDEx_ActivateLPM+0x44>)
 8006944:	4313      	orrs	r3, r2
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	10000003 	.word	0x10000003

0800695c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800697c:	4b19      	ldr	r3, [pc, #100]	@ (80069e4 <HAL_PWREx_ConfigSupply+0x70>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b04      	cmp	r3, #4
 8006986:	d00a      	beq.n	800699e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006988:	4b16      	ldr	r3, [pc, #88]	@ (80069e4 <HAL_PWREx_ConfigSupply+0x70>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	429a      	cmp	r2, r3
 8006994:	d001      	beq.n	800699a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e01f      	b.n	80069da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	e01d      	b.n	80069da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800699e:	4b11      	ldr	r3, [pc, #68]	@ (80069e4 <HAL_PWREx_ConfigSupply+0x70>)
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f023 0207 	bic.w	r2, r3, #7
 80069a6:	490f      	ldr	r1, [pc, #60]	@ (80069e4 <HAL_PWREx_ConfigSupply+0x70>)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80069ae:	f7fb f91f 	bl	8001bf0 <HAL_GetTick>
 80069b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069b4:	e009      	b.n	80069ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80069b6:	f7fb f91b 	bl	8001bf0 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069c4:	d901      	bls.n	80069ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e007      	b.n	80069da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069ca:	4b06      	ldr	r3, [pc, #24]	@ (80069e4 <HAL_PWREx_ConfigSupply+0x70>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069d6:	d1ee      	bne.n	80069b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	58024800 	.word	0x58024800

080069e8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80069ec:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	4a04      	ldr	r2, [pc, #16]	@ (8006a04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80069f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069f6:	60d3      	str	r3, [r2, #12]
}
 80069f8:	bf00      	nop
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	58024800 	.word	0x58024800

08006a08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08c      	sub	sp, #48	@ 0x30
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d102      	bne.n	8006a1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f000 bc48 	b.w	80072ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 8088 	beq.w	8006b3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a2a:	4b99      	ldr	r3, [pc, #612]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a34:	4b96      	ldr	r3, [pc, #600]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a38:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d007      	beq.n	8006a50 <HAL_RCC_OscConfig+0x48>
 8006a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a42:	2b18      	cmp	r3, #24
 8006a44:	d111      	bne.n	8006a6a <HAL_RCC_OscConfig+0x62>
 8006a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d10c      	bne.n	8006a6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a50:	4b8f      	ldr	r3, [pc, #572]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d06d      	beq.n	8006b38 <HAL_RCC_OscConfig+0x130>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d169      	bne.n	8006b38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	f000 bc21 	b.w	80072ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a72:	d106      	bne.n	8006a82 <HAL_RCC_OscConfig+0x7a>
 8006a74:	4b86      	ldr	r3, [pc, #536]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a85      	ldr	r2, [pc, #532]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006a7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	e02e      	b.n	8006ae0 <HAL_RCC_OscConfig+0xd8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10c      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x9c>
 8006a8a:	4b81      	ldr	r3, [pc, #516]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a80      	ldr	r2, [pc, #512]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006a90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	4b7e      	ldr	r3, [pc, #504]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a7d      	ldr	r2, [pc, #500]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006a9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	e01d      	b.n	8006ae0 <HAL_RCC_OscConfig+0xd8>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006aac:	d10c      	bne.n	8006ac8 <HAL_RCC_OscConfig+0xc0>
 8006aae:	4b78      	ldr	r3, [pc, #480]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a77      	ldr	r2, [pc, #476]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006ab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	4b75      	ldr	r3, [pc, #468]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a74      	ldr	r2, [pc, #464]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	e00b      	b.n	8006ae0 <HAL_RCC_OscConfig+0xd8>
 8006ac8:	4b71      	ldr	r3, [pc, #452]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a70      	ldr	r2, [pc, #448]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	4b6e      	ldr	r3, [pc, #440]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a6d      	ldr	r2, [pc, #436]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d013      	beq.n	8006b10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae8:	f7fb f882 	bl	8001bf0 <HAL_GetTick>
 8006aec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006af0:	f7fb f87e 	bl	8001bf0 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b64      	cmp	r3, #100	@ 0x64
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e3d4      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b02:	4b63      	ldr	r3, [pc, #396]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0f0      	beq.n	8006af0 <HAL_RCC_OscConfig+0xe8>
 8006b0e:	e014      	b.n	8006b3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b10:	f7fb f86e 	bl	8001bf0 <HAL_GetTick>
 8006b14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b18:	f7fb f86a 	bl	8001bf0 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b64      	cmp	r3, #100	@ 0x64
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e3c0      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b2a:	4b59      	ldr	r3, [pc, #356]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f0      	bne.n	8006b18 <HAL_RCC_OscConfig+0x110>
 8006b36:	e000      	b.n	8006b3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 80ca 	beq.w	8006cdc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b48:	4b51      	ldr	r3, [pc, #324]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b52:	4b4f      	ldr	r3, [pc, #316]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d007      	beq.n	8006b6e <HAL_RCC_OscConfig+0x166>
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	2b18      	cmp	r3, #24
 8006b62:	d156      	bne.n	8006c12 <HAL_RCC_OscConfig+0x20a>
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d151      	bne.n	8006c12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b6e:	4b48      	ldr	r3, [pc, #288]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d005      	beq.n	8006b86 <HAL_RCC_OscConfig+0x17e>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e392      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b86:	4b42      	ldr	r3, [pc, #264]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f023 0219 	bic.w	r2, r3, #25
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	493f      	ldr	r1, [pc, #252]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b98:	f7fb f82a 	bl	8001bf0 <HAL_GetTick>
 8006b9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ba0:	f7fb f826 	bl	8001bf0 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e37c      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bb2:	4b37      	ldr	r3, [pc, #220]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0304 	and.w	r3, r3, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0f0      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bbe:	f7fb f847 	bl	8001c50 <HAL_GetREVID>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d817      	bhi.n	8006bfc <HAL_RCC_OscConfig+0x1f4>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	2b40      	cmp	r3, #64	@ 0x40
 8006bd2:	d108      	bne.n	8006be6 <HAL_RCC_OscConfig+0x1de>
 8006bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006be2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006be4:	e07a      	b.n	8006cdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006be6:	4b2a      	ldr	r3, [pc, #168]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	031b      	lsls	r3, r3, #12
 8006bf4:	4926      	ldr	r1, [pc, #152]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bfa:	e06f      	b.n	8006cdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bfc:	4b24      	ldr	r3, [pc, #144]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	061b      	lsls	r3, r3, #24
 8006c0a:	4921      	ldr	r1, [pc, #132]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c10:	e064      	b.n	8006cdc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d047      	beq.n	8006caa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f023 0219 	bic.w	r2, r3, #25
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	491a      	ldr	r1, [pc, #104]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2c:	f7fa ffe0 	bl	8001bf0 <HAL_GetTick>
 8006c30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c32:	e008      	b.n	8006c46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c34:	f7fa ffdc 	bl	8001bf0 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e332      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c46:	4b12      	ldr	r3, [pc, #72]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0f0      	beq.n	8006c34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c52:	f7fa fffd 	bl	8001c50 <HAL_GetREVID>
 8006c56:	4603      	mov	r3, r0
 8006c58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d819      	bhi.n	8006c94 <HAL_RCC_OscConfig+0x28c>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b40      	cmp	r3, #64	@ 0x40
 8006c66:	d108      	bne.n	8006c7a <HAL_RCC_OscConfig+0x272>
 8006c68:	4b09      	ldr	r3, [pc, #36]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006c70:	4a07      	ldr	r2, [pc, #28]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c76:	6053      	str	r3, [r2, #4]
 8006c78:	e030      	b.n	8006cdc <HAL_RCC_OscConfig+0x2d4>
 8006c7a:	4b05      	ldr	r3, [pc, #20]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	031b      	lsls	r3, r3, #12
 8006c88:	4901      	ldr	r1, [pc, #4]	@ (8006c90 <HAL_RCC_OscConfig+0x288>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	604b      	str	r3, [r1, #4]
 8006c8e:	e025      	b.n	8006cdc <HAL_RCC_OscConfig+0x2d4>
 8006c90:	58024400 	.word	0x58024400
 8006c94:	4b9a      	ldr	r3, [pc, #616]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	061b      	lsls	r3, r3, #24
 8006ca2:	4997      	ldr	r1, [pc, #604]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	604b      	str	r3, [r1, #4]
 8006ca8:	e018      	b.n	8006cdc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006caa:	4b95      	ldr	r3, [pc, #596]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a94      	ldr	r2, [pc, #592]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
 8006cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb6:	f7fa ff9b 	bl	8001bf0 <HAL_GetTick>
 8006cba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cbc:	e008      	b.n	8006cd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cbe:	f7fa ff97 	bl	8001bf0 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e2ed      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cd0:	4b8b      	ldr	r3, [pc, #556]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1f0      	bne.n	8006cbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0310 	and.w	r3, r3, #16
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 80a9 	beq.w	8006e3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cea:	4b85      	ldr	r3, [pc, #532]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cf2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cf4:	4b82      	ldr	r3, [pc, #520]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d007      	beq.n	8006d10 <HAL_RCC_OscConfig+0x308>
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	2b18      	cmp	r3, #24
 8006d04:	d13a      	bne.n	8006d7c <HAL_RCC_OscConfig+0x374>
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f003 0303 	and.w	r3, r3, #3
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d135      	bne.n	8006d7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d10:	4b7b      	ldr	r3, [pc, #492]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <HAL_RCC_OscConfig+0x320>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	2b80      	cmp	r3, #128	@ 0x80
 8006d22:	d001      	beq.n	8006d28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e2c1      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d28:	f7fa ff92 	bl	8001c50 <HAL_GetREVID>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d817      	bhi.n	8006d66 <HAL_RCC_OscConfig+0x35e>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	d108      	bne.n	8006d50 <HAL_RCC_OscConfig+0x348>
 8006d3e:	4b70      	ldr	r3, [pc, #448]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006d46:	4a6e      	ldr	r2, [pc, #440]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006d48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d4e:	e075      	b.n	8006e3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d50:	4b6b      	ldr	r3, [pc, #428]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	069b      	lsls	r3, r3, #26
 8006d5e:	4968      	ldr	r1, [pc, #416]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d64:	e06a      	b.n	8006e3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d66:	4b66      	ldr	r3, [pc, #408]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	061b      	lsls	r3, r3, #24
 8006d74:	4962      	ldr	r1, [pc, #392]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d7a:	e05f      	b.n	8006e3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d042      	beq.n	8006e0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006d84:	4b5e      	ldr	r3, [pc, #376]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a5d      	ldr	r2, [pc, #372]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d90:	f7fa ff2e 	bl	8001bf0 <HAL_GetTick>
 8006d94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006d98:	f7fa ff2a 	bl	8001bf0 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e280      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006daa:	4b55      	ldr	r3, [pc, #340]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0f0      	beq.n	8006d98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006db6:	f7fa ff4b 	bl	8001c50 <HAL_GetREVID>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d817      	bhi.n	8006df4 <HAL_RCC_OscConfig+0x3ec>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	d108      	bne.n	8006dde <HAL_RCC_OscConfig+0x3d6>
 8006dcc:	4b4c      	ldr	r3, [pc, #304]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006dd4:	4a4a      	ldr	r2, [pc, #296]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006dd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006dda:	6053      	str	r3, [r2, #4]
 8006ddc:	e02e      	b.n	8006e3c <HAL_RCC_OscConfig+0x434>
 8006dde:	4b48      	ldr	r3, [pc, #288]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	069b      	lsls	r3, r3, #26
 8006dec:	4944      	ldr	r1, [pc, #272]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	604b      	str	r3, [r1, #4]
 8006df2:	e023      	b.n	8006e3c <HAL_RCC_OscConfig+0x434>
 8006df4:	4b42      	ldr	r3, [pc, #264]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	061b      	lsls	r3, r3, #24
 8006e02:	493f      	ldr	r1, [pc, #252]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	60cb      	str	r3, [r1, #12]
 8006e08:	e018      	b.n	8006e3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e0a:	4b3d      	ldr	r3, [pc, #244]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a3c      	ldr	r2, [pc, #240]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006e10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e16:	f7fa feeb 	bl	8001bf0 <HAL_GetTick>
 8006e1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e1c:	e008      	b.n	8006e30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e1e:	f7fa fee7 	bl	8001bf0 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d901      	bls.n	8006e30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e23d      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e30:	4b33      	ldr	r3, [pc, #204]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1f0      	bne.n	8006e1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d036      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d019      	beq.n	8006e84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e50:	4b2b      	ldr	r3, [pc, #172]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e54:	4a2a      	ldr	r2, [pc, #168]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006e56:	f043 0301 	orr.w	r3, r3, #1
 8006e5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e5c:	f7fa fec8 	bl	8001bf0 <HAL_GetTick>
 8006e60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e64:	f7fa fec4 	bl	8001bf0 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e21a      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e76:	4b22      	ldr	r3, [pc, #136]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0f0      	beq.n	8006e64 <HAL_RCC_OscConfig+0x45c>
 8006e82:	e018      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e84:	4b1e      	ldr	r3, [pc, #120]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e88:	4a1d      	ldr	r2, [pc, #116]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006e8a:	f023 0301 	bic.w	r3, r3, #1
 8006e8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e90:	f7fa feae 	bl	8001bf0 <HAL_GetTick>
 8006e94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e98:	f7fa feaa 	bl	8001bf0 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e200      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006eaa:	4b15      	ldr	r3, [pc, #84]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f0      	bne.n	8006e98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d039      	beq.n	8006f36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d01c      	beq.n	8006f04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006eca:	4b0d      	ldr	r3, [pc, #52]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a0c      	ldr	r2, [pc, #48]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006ed0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006ed4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ed6:	f7fa fe8b 	bl	8001bf0 <HAL_GetTick>
 8006eda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006edc:	e008      	b.n	8006ef0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ede:	f7fa fe87 	bl	8001bf0 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e1dd      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ef0:	4b03      	ldr	r3, [pc, #12]	@ (8006f00 <HAL_RCC_OscConfig+0x4f8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0f0      	beq.n	8006ede <HAL_RCC_OscConfig+0x4d6>
 8006efc:	e01b      	b.n	8006f36 <HAL_RCC_OscConfig+0x52e>
 8006efe:	bf00      	nop
 8006f00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f04:	4b9b      	ldr	r3, [pc, #620]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a9a      	ldr	r2, [pc, #616]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006f0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f10:	f7fa fe6e 	bl	8001bf0 <HAL_GetTick>
 8006f14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f16:	e008      	b.n	8006f2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f18:	f7fa fe6a 	bl	8001bf0 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e1c0      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f2a:	4b92      	ldr	r3, [pc, #584]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1f0      	bne.n	8006f18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0304 	and.w	r3, r3, #4
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 8081 	beq.w	8007046 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f44:	4b8c      	ldr	r3, [pc, #560]	@ (8007178 <HAL_RCC_OscConfig+0x770>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a8b      	ldr	r2, [pc, #556]	@ (8007178 <HAL_RCC_OscConfig+0x770>)
 8006f4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f50:	f7fa fe4e 	bl	8001bf0 <HAL_GetTick>
 8006f54:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f56:	e008      	b.n	8006f6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f58:	f7fa fe4a 	bl	8001bf0 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b64      	cmp	r3, #100	@ 0x64
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e1a0      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f6a:	4b83      	ldr	r3, [pc, #524]	@ (8007178 <HAL_RCC_OscConfig+0x770>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0f0      	beq.n	8006f58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d106      	bne.n	8006f8c <HAL_RCC_OscConfig+0x584>
 8006f7e:	4b7d      	ldr	r3, [pc, #500]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f82:	4a7c      	ldr	r2, [pc, #496]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006f84:	f043 0301 	orr.w	r3, r3, #1
 8006f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f8a:	e02d      	b.n	8006fe8 <HAL_RCC_OscConfig+0x5e0>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10c      	bne.n	8006fae <HAL_RCC_OscConfig+0x5a6>
 8006f94:	4b77      	ldr	r3, [pc, #476]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f98:	4a76      	ldr	r2, [pc, #472]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006f9a:	f023 0301 	bic.w	r3, r3, #1
 8006f9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fa0:	4b74      	ldr	r3, [pc, #464]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fa4:	4a73      	ldr	r2, [pc, #460]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006fa6:	f023 0304 	bic.w	r3, r3, #4
 8006faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fac:	e01c      	b.n	8006fe8 <HAL_RCC_OscConfig+0x5e0>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	2b05      	cmp	r3, #5
 8006fb4:	d10c      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x5c8>
 8006fb6:	4b6f      	ldr	r3, [pc, #444]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fba:	4a6e      	ldr	r2, [pc, #440]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006fbc:	f043 0304 	orr.w	r3, r3, #4
 8006fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fc2:	4b6c      	ldr	r3, [pc, #432]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc6:	4a6b      	ldr	r2, [pc, #428]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006fc8:	f043 0301 	orr.w	r3, r3, #1
 8006fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fce:	e00b      	b.n	8006fe8 <HAL_RCC_OscConfig+0x5e0>
 8006fd0:	4b68      	ldr	r3, [pc, #416]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fd4:	4a67      	ldr	r2, [pc, #412]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006fd6:	f023 0301 	bic.w	r3, r3, #1
 8006fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fdc:	4b65      	ldr	r3, [pc, #404]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fe0:	4a64      	ldr	r2, [pc, #400]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8006fe2:	f023 0304 	bic.w	r3, r3, #4
 8006fe6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d015      	beq.n	800701c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ff0:	f7fa fdfe 	bl	8001bf0 <HAL_GetTick>
 8006ff4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ff6:	e00a      	b.n	800700e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff8:	f7fa fdfa 	bl	8001bf0 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007006:	4293      	cmp	r3, r2
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e14e      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800700e:	4b59      	ldr	r3, [pc, #356]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8007010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0ee      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x5f0>
 800701a:	e014      	b.n	8007046 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800701c:	f7fa fde8 	bl	8001bf0 <HAL_GetTick>
 8007020:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007022:	e00a      	b.n	800703a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007024:	f7fa fde4 	bl	8001bf0 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007032:	4293      	cmp	r3, r2
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e138      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800703a:	4b4e      	ldr	r3, [pc, #312]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 800703c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1ee      	bne.n	8007024 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 812d 	beq.w	80072aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007050:	4b48      	ldr	r3, [pc, #288]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007058:	2b18      	cmp	r3, #24
 800705a:	f000 80bd 	beq.w	80071d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007062:	2b02      	cmp	r3, #2
 8007064:	f040 809e 	bne.w	80071a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007068:	4b42      	ldr	r3, [pc, #264]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a41      	ldr	r2, [pc, #260]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 800706e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007074:	f7fa fdbc 	bl	8001bf0 <HAL_GetTick>
 8007078:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800707c:	f7fa fdb8 	bl	8001bf0 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e10e      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800708e:	4b39      	ldr	r3, [pc, #228]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1f0      	bne.n	800707c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800709a:	4b36      	ldr	r3, [pc, #216]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 800709c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800709e:	4b37      	ldr	r3, [pc, #220]	@ (800717c <HAL_RCC_OscConfig+0x774>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80070aa:	0112      	lsls	r2, r2, #4
 80070ac:	430a      	orrs	r2, r1
 80070ae:	4931      	ldr	r1, [pc, #196]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b8:	3b01      	subs	r3, #1
 80070ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070c2:	3b01      	subs	r3, #1
 80070c4:	025b      	lsls	r3, r3, #9
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	431a      	orrs	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ce:	3b01      	subs	r3, #1
 80070d0:	041b      	lsls	r3, r3, #16
 80070d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80070d6:	431a      	orrs	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070dc:	3b01      	subs	r3, #1
 80070de:	061b      	lsls	r3, r3, #24
 80070e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80070e4:	4923      	ldr	r1, [pc, #140]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80070ea:	4b22      	ldr	r3, [pc, #136]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 80070ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ee:	4a21      	ldr	r2, [pc, #132]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 80070f0:	f023 0301 	bic.w	r3, r3, #1
 80070f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80070f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 80070f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070fa:	4b21      	ldr	r3, [pc, #132]	@ (8007180 <HAL_RCC_OscConfig+0x778>)
 80070fc:	4013      	ands	r3, r2
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007102:	00d2      	lsls	r2, r2, #3
 8007104:	491b      	ldr	r1, [pc, #108]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8007106:	4313      	orrs	r3, r2
 8007108:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800710a:	4b1a      	ldr	r3, [pc, #104]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 800710c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710e:	f023 020c 	bic.w	r2, r3, #12
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007116:	4917      	ldr	r1, [pc, #92]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8007118:	4313      	orrs	r3, r2
 800711a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800711c:	4b15      	ldr	r3, [pc, #84]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 800711e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007120:	f023 0202 	bic.w	r2, r3, #2
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007128:	4912      	ldr	r1, [pc, #72]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 800712a:	4313      	orrs	r3, r2
 800712c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800712e:	4b11      	ldr	r3, [pc, #68]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	4a10      	ldr	r2, [pc, #64]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8007134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007138:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800713a:	4b0e      	ldr	r3, [pc, #56]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 800713c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713e:	4a0d      	ldr	r2, [pc, #52]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8007140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007144:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007146:	4b0b      	ldr	r3, [pc, #44]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8007148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714a:	4a0a      	ldr	r2, [pc, #40]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 800714c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007150:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007152:	4b08      	ldr	r3, [pc, #32]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8007154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007156:	4a07      	ldr	r2, [pc, #28]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8007158:	f043 0301 	orr.w	r3, r3, #1
 800715c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800715e:	4b05      	ldr	r3, [pc, #20]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a04      	ldr	r2, [pc, #16]	@ (8007174 <HAL_RCC_OscConfig+0x76c>)
 8007164:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716a:	f7fa fd41 	bl	8001bf0 <HAL_GetTick>
 800716e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007170:	e011      	b.n	8007196 <HAL_RCC_OscConfig+0x78e>
 8007172:	bf00      	nop
 8007174:	58024400 	.word	0x58024400
 8007178:	58024800 	.word	0x58024800
 800717c:	fffffc0c 	.word	0xfffffc0c
 8007180:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007184:	f7fa fd34 	bl	8001bf0 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b02      	cmp	r3, #2
 8007190:	d901      	bls.n	8007196 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e08a      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007196:	4b47      	ldr	r3, [pc, #284]	@ (80072b4 <HAL_RCC_OscConfig+0x8ac>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0f0      	beq.n	8007184 <HAL_RCC_OscConfig+0x77c>
 80071a2:	e082      	b.n	80072aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071a4:	4b43      	ldr	r3, [pc, #268]	@ (80072b4 <HAL_RCC_OscConfig+0x8ac>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a42      	ldr	r2, [pc, #264]	@ (80072b4 <HAL_RCC_OscConfig+0x8ac>)
 80071aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b0:	f7fa fd1e 	bl	8001bf0 <HAL_GetTick>
 80071b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071b8:	f7fa fd1a 	bl	8001bf0 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e070      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071ca:	4b3a      	ldr	r3, [pc, #232]	@ (80072b4 <HAL_RCC_OscConfig+0x8ac>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f0      	bne.n	80071b8 <HAL_RCC_OscConfig+0x7b0>
 80071d6:	e068      	b.n	80072aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80071d8:	4b36      	ldr	r3, [pc, #216]	@ (80072b4 <HAL_RCC_OscConfig+0x8ac>)
 80071da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80071de:	4b35      	ldr	r3, [pc, #212]	@ (80072b4 <HAL_RCC_OscConfig+0x8ac>)
 80071e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d031      	beq.n	8007250 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f003 0203 	and.w	r2, r3, #3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d12a      	bne.n	8007250 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	091b      	lsrs	r3, r3, #4
 80071fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007206:	429a      	cmp	r2, r3
 8007208:	d122      	bne.n	8007250 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007214:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007216:	429a      	cmp	r2, r3
 8007218:	d11a      	bne.n	8007250 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	0a5b      	lsrs	r3, r3, #9
 800721e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007226:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007228:	429a      	cmp	r2, r3
 800722a:	d111      	bne.n	8007250 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	0c1b      	lsrs	r3, r3, #16
 8007230:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007238:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800723a:	429a      	cmp	r2, r3
 800723c:	d108      	bne.n	8007250 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	0e1b      	lsrs	r3, r3, #24
 8007242:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800724a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800724c:	429a      	cmp	r2, r3
 800724e:	d001      	beq.n	8007254 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e02b      	b.n	80072ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007254:	4b17      	ldr	r3, [pc, #92]	@ (80072b4 <HAL_RCC_OscConfig+0x8ac>)
 8007256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007258:	08db      	lsrs	r3, r3, #3
 800725a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800725e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	429a      	cmp	r2, r3
 8007268:	d01f      	beq.n	80072aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800726a:	4b12      	ldr	r3, [pc, #72]	@ (80072b4 <HAL_RCC_OscConfig+0x8ac>)
 800726c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726e:	4a11      	ldr	r2, [pc, #68]	@ (80072b4 <HAL_RCC_OscConfig+0x8ac>)
 8007270:	f023 0301 	bic.w	r3, r3, #1
 8007274:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007276:	f7fa fcbb 	bl	8001bf0 <HAL_GetTick>
 800727a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800727c:	bf00      	nop
 800727e:	f7fa fcb7 	bl	8001bf0 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	4293      	cmp	r3, r2
 8007288:	d0f9      	beq.n	800727e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800728a:	4b0a      	ldr	r3, [pc, #40]	@ (80072b4 <HAL_RCC_OscConfig+0x8ac>)
 800728c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800728e:	4b0a      	ldr	r3, [pc, #40]	@ (80072b8 <HAL_RCC_OscConfig+0x8b0>)
 8007290:	4013      	ands	r3, r2
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007296:	00d2      	lsls	r2, r2, #3
 8007298:	4906      	ldr	r1, [pc, #24]	@ (80072b4 <HAL_RCC_OscConfig+0x8ac>)
 800729a:	4313      	orrs	r3, r2
 800729c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800729e:	4b05      	ldr	r3, [pc, #20]	@ (80072b4 <HAL_RCC_OscConfig+0x8ac>)
 80072a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a2:	4a04      	ldr	r2, [pc, #16]	@ (80072b4 <HAL_RCC_OscConfig+0x8ac>)
 80072a4:	f043 0301 	orr.w	r3, r3, #1
 80072a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3730      	adds	r7, #48	@ 0x30
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	58024400 	.word	0x58024400
 80072b8:	ffff0007 	.word	0xffff0007

080072bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e19c      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072d0:	4b8a      	ldr	r3, [pc, #552]	@ (80074fc <HAL_RCC_ClockConfig+0x240>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 030f 	and.w	r3, r3, #15
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d910      	bls.n	8007300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072de:	4b87      	ldr	r3, [pc, #540]	@ (80074fc <HAL_RCC_ClockConfig+0x240>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f023 020f 	bic.w	r2, r3, #15
 80072e6:	4985      	ldr	r1, [pc, #532]	@ (80074fc <HAL_RCC_ClockConfig+0x240>)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ee:	4b83      	ldr	r3, [pc, #524]	@ (80074fc <HAL_RCC_ClockConfig+0x240>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 030f 	and.w	r3, r3, #15
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d001      	beq.n	8007300 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e184      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d010      	beq.n	800732e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	4b7b      	ldr	r3, [pc, #492]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007318:	429a      	cmp	r2, r3
 800731a:	d908      	bls.n	800732e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800731c:	4b78      	ldr	r3, [pc, #480]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	4975      	ldr	r1, [pc, #468]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 800732a:	4313      	orrs	r3, r2
 800732c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0308 	and.w	r3, r3, #8
 8007336:	2b00      	cmp	r3, #0
 8007338:	d010      	beq.n	800735c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	695a      	ldr	r2, [r3, #20]
 800733e:	4b70      	ldr	r3, [pc, #448]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007346:	429a      	cmp	r2, r3
 8007348:	d908      	bls.n	800735c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800734a:	4b6d      	ldr	r3, [pc, #436]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	496a      	ldr	r1, [pc, #424]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 8007358:	4313      	orrs	r3, r2
 800735a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0310 	and.w	r3, r3, #16
 8007364:	2b00      	cmp	r3, #0
 8007366:	d010      	beq.n	800738a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699a      	ldr	r2, [r3, #24]
 800736c:	4b64      	ldr	r3, [pc, #400]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007374:	429a      	cmp	r2, r3
 8007376:	d908      	bls.n	800738a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007378:	4b61      	ldr	r3, [pc, #388]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	495e      	ldr	r1, [pc, #376]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 8007386:	4313      	orrs	r3, r2
 8007388:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0320 	and.w	r3, r3, #32
 8007392:	2b00      	cmp	r3, #0
 8007394:	d010      	beq.n	80073b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69da      	ldr	r2, [r3, #28]
 800739a:	4b59      	ldr	r3, [pc, #356]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d908      	bls.n	80073b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80073a6:	4b56      	ldr	r3, [pc, #344]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	4953      	ldr	r1, [pc, #332]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d010      	beq.n	80073e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68da      	ldr	r2, [r3, #12]
 80073c8:	4b4d      	ldr	r3, [pc, #308]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f003 030f 	and.w	r3, r3, #15
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d908      	bls.n	80073e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073d4:	4b4a      	ldr	r3, [pc, #296]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	f023 020f 	bic.w	r2, r3, #15
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	4947      	ldr	r1, [pc, #284]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d055      	beq.n	800749e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80073f2:	4b43      	ldr	r3, [pc, #268]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	4940      	ldr	r1, [pc, #256]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 8007400:	4313      	orrs	r3, r2
 8007402:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2b02      	cmp	r3, #2
 800740a:	d107      	bne.n	800741c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800740c:	4b3c      	ldr	r3, [pc, #240]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d121      	bne.n	800745c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e0f6      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	2b03      	cmp	r3, #3
 8007422:	d107      	bne.n	8007434 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007424:	4b36      	ldr	r3, [pc, #216]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d115      	bne.n	800745c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e0ea      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d107      	bne.n	800744c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800743c:	4b30      	ldr	r3, [pc, #192]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007444:	2b00      	cmp	r3, #0
 8007446:	d109      	bne.n	800745c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e0de      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800744c:	4b2c      	ldr	r3, [pc, #176]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0304 	and.w	r3, r3, #4
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e0d6      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800745c:	4b28      	ldr	r3, [pc, #160]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	f023 0207 	bic.w	r2, r3, #7
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	4925      	ldr	r1, [pc, #148]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 800746a:	4313      	orrs	r3, r2
 800746c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800746e:	f7fa fbbf 	bl	8001bf0 <HAL_GetTick>
 8007472:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007474:	e00a      	b.n	800748c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007476:	f7fa fbbb 	bl	8001bf0 <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007484:	4293      	cmp	r3, r2
 8007486:	d901      	bls.n	800748c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e0be      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800748c:	4b1c      	ldr	r3, [pc, #112]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	00db      	lsls	r3, r3, #3
 800749a:	429a      	cmp	r2, r3
 800749c:	d1eb      	bne.n	8007476 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d010      	beq.n	80074cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	4b14      	ldr	r3, [pc, #80]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d208      	bcs.n	80074cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074ba:	4b11      	ldr	r3, [pc, #68]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	f023 020f 	bic.w	r2, r3, #15
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	490e      	ldr	r1, [pc, #56]	@ (8007500 <HAL_RCC_ClockConfig+0x244>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074cc:	4b0b      	ldr	r3, [pc, #44]	@ (80074fc <HAL_RCC_ClockConfig+0x240>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d214      	bcs.n	8007504 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074da:	4b08      	ldr	r3, [pc, #32]	@ (80074fc <HAL_RCC_ClockConfig+0x240>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f023 020f 	bic.w	r2, r3, #15
 80074e2:	4906      	ldr	r1, [pc, #24]	@ (80074fc <HAL_RCC_ClockConfig+0x240>)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ea:	4b04      	ldr	r3, [pc, #16]	@ (80074fc <HAL_RCC_ClockConfig+0x240>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d005      	beq.n	8007504 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e086      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>
 80074fc:	52002000 	.word	0x52002000
 8007500:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	d010      	beq.n	8007532 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691a      	ldr	r2, [r3, #16]
 8007514:	4b3f      	ldr	r3, [pc, #252]	@ (8007614 <HAL_RCC_ClockConfig+0x358>)
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800751c:	429a      	cmp	r2, r3
 800751e:	d208      	bcs.n	8007532 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007520:	4b3c      	ldr	r3, [pc, #240]	@ (8007614 <HAL_RCC_ClockConfig+0x358>)
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	4939      	ldr	r1, [pc, #228]	@ (8007614 <HAL_RCC_ClockConfig+0x358>)
 800752e:	4313      	orrs	r3, r2
 8007530:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0308 	and.w	r3, r3, #8
 800753a:	2b00      	cmp	r3, #0
 800753c:	d010      	beq.n	8007560 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695a      	ldr	r2, [r3, #20]
 8007542:	4b34      	ldr	r3, [pc, #208]	@ (8007614 <HAL_RCC_ClockConfig+0x358>)
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800754a:	429a      	cmp	r2, r3
 800754c:	d208      	bcs.n	8007560 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800754e:	4b31      	ldr	r3, [pc, #196]	@ (8007614 <HAL_RCC_ClockConfig+0x358>)
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	492e      	ldr	r1, [pc, #184]	@ (8007614 <HAL_RCC_ClockConfig+0x358>)
 800755c:	4313      	orrs	r3, r2
 800755e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0310 	and.w	r3, r3, #16
 8007568:	2b00      	cmp	r3, #0
 800756a:	d010      	beq.n	800758e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699a      	ldr	r2, [r3, #24]
 8007570:	4b28      	ldr	r3, [pc, #160]	@ (8007614 <HAL_RCC_ClockConfig+0x358>)
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007578:	429a      	cmp	r2, r3
 800757a:	d208      	bcs.n	800758e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800757c:	4b25      	ldr	r3, [pc, #148]	@ (8007614 <HAL_RCC_ClockConfig+0x358>)
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	4922      	ldr	r1, [pc, #136]	@ (8007614 <HAL_RCC_ClockConfig+0x358>)
 800758a:	4313      	orrs	r3, r2
 800758c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b00      	cmp	r3, #0
 8007598:	d010      	beq.n	80075bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69da      	ldr	r2, [r3, #28]
 800759e:	4b1d      	ldr	r3, [pc, #116]	@ (8007614 <HAL_RCC_ClockConfig+0x358>)
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d208      	bcs.n	80075bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80075aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007614 <HAL_RCC_ClockConfig+0x358>)
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	4917      	ldr	r1, [pc, #92]	@ (8007614 <HAL_RCC_ClockConfig+0x358>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80075bc:	f000 f834 	bl	8007628 <HAL_RCC_GetSysClockFreq>
 80075c0:	4602      	mov	r2, r0
 80075c2:	4b14      	ldr	r3, [pc, #80]	@ (8007614 <HAL_RCC_ClockConfig+0x358>)
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	0a1b      	lsrs	r3, r3, #8
 80075c8:	f003 030f 	and.w	r3, r3, #15
 80075cc:	4912      	ldr	r1, [pc, #72]	@ (8007618 <HAL_RCC_ClockConfig+0x35c>)
 80075ce:	5ccb      	ldrb	r3, [r1, r3]
 80075d0:	f003 031f 	and.w	r3, r3, #31
 80075d4:	fa22 f303 	lsr.w	r3, r2, r3
 80075d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075da:	4b0e      	ldr	r3, [pc, #56]	@ (8007614 <HAL_RCC_ClockConfig+0x358>)
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	4a0d      	ldr	r2, [pc, #52]	@ (8007618 <HAL_RCC_ClockConfig+0x35c>)
 80075e4:	5cd3      	ldrb	r3, [r2, r3]
 80075e6:	f003 031f 	and.w	r3, r3, #31
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	fa22 f303 	lsr.w	r3, r2, r3
 80075f0:	4a0a      	ldr	r2, [pc, #40]	@ (800761c <HAL_RCC_ClockConfig+0x360>)
 80075f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075f4:	4a0a      	ldr	r2, [pc, #40]	@ (8007620 <HAL_RCC_ClockConfig+0x364>)
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80075fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007624 <HAL_RCC_ClockConfig+0x368>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fa faac 	bl	8001b5c <HAL_InitTick>
 8007604:	4603      	mov	r3, r0
 8007606:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	58024400 	.word	0x58024400
 8007618:	0800fdf0 	.word	0x0800fdf0
 800761c:	24000004 	.word	0x24000004
 8007620:	24000000 	.word	0x24000000
 8007624:	24000008 	.word	0x24000008

08007628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007628:	b480      	push	{r7}
 800762a:	b089      	sub	sp, #36	@ 0x24
 800762c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800762e:	4bb3      	ldr	r3, [pc, #716]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007636:	2b18      	cmp	r3, #24
 8007638:	f200 8155 	bhi.w	80078e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800763c:	a201      	add	r2, pc, #4	@ (adr r2, 8007644 <HAL_RCC_GetSysClockFreq+0x1c>)
 800763e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007642:	bf00      	nop
 8007644:	080076a9 	.word	0x080076a9
 8007648:	080078e7 	.word	0x080078e7
 800764c:	080078e7 	.word	0x080078e7
 8007650:	080078e7 	.word	0x080078e7
 8007654:	080078e7 	.word	0x080078e7
 8007658:	080078e7 	.word	0x080078e7
 800765c:	080078e7 	.word	0x080078e7
 8007660:	080078e7 	.word	0x080078e7
 8007664:	080076cf 	.word	0x080076cf
 8007668:	080078e7 	.word	0x080078e7
 800766c:	080078e7 	.word	0x080078e7
 8007670:	080078e7 	.word	0x080078e7
 8007674:	080078e7 	.word	0x080078e7
 8007678:	080078e7 	.word	0x080078e7
 800767c:	080078e7 	.word	0x080078e7
 8007680:	080078e7 	.word	0x080078e7
 8007684:	080076d5 	.word	0x080076d5
 8007688:	080078e7 	.word	0x080078e7
 800768c:	080078e7 	.word	0x080078e7
 8007690:	080078e7 	.word	0x080078e7
 8007694:	080078e7 	.word	0x080078e7
 8007698:	080078e7 	.word	0x080078e7
 800769c:	080078e7 	.word	0x080078e7
 80076a0:	080078e7 	.word	0x080078e7
 80076a4:	080076db 	.word	0x080076db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076a8:	4b94      	ldr	r3, [pc, #592]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0320 	and.w	r3, r3, #32
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d009      	beq.n	80076c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076b4:	4b91      	ldr	r3, [pc, #580]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	08db      	lsrs	r3, r3, #3
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	4a90      	ldr	r2, [pc, #576]	@ (8007900 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076c0:	fa22 f303 	lsr.w	r3, r2, r3
 80076c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80076c6:	e111      	b.n	80078ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80076c8:	4b8d      	ldr	r3, [pc, #564]	@ (8007900 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076ca:	61bb      	str	r3, [r7, #24]
      break;
 80076cc:	e10e      	b.n	80078ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80076ce:	4b8d      	ldr	r3, [pc, #564]	@ (8007904 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80076d0:	61bb      	str	r3, [r7, #24]
      break;
 80076d2:	e10b      	b.n	80078ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80076d4:	4b8c      	ldr	r3, [pc, #560]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80076d6:	61bb      	str	r3, [r7, #24]
      break;
 80076d8:	e108      	b.n	80078ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076da:	4b88      	ldr	r3, [pc, #544]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80076e4:	4b85      	ldr	r3, [pc, #532]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e8:	091b      	lsrs	r3, r3, #4
 80076ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80076f0:	4b82      	ldr	r3, [pc, #520]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80076fa:	4b80      	ldr	r3, [pc, #512]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076fe:	08db      	lsrs	r3, r3, #3
 8007700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	fb02 f303 	mul.w	r3, r2, r3
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007712:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 80e1 	beq.w	80078e0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b02      	cmp	r3, #2
 8007722:	f000 8083 	beq.w	800782c <HAL_RCC_GetSysClockFreq+0x204>
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b02      	cmp	r3, #2
 800772a:	f200 80a1 	bhi.w	8007870 <HAL_RCC_GetSysClockFreq+0x248>
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <HAL_RCC_GetSysClockFreq+0x114>
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d056      	beq.n	80077e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800773a:	e099      	b.n	8007870 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800773c:	4b6f      	ldr	r3, [pc, #444]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0320 	and.w	r3, r3, #32
 8007744:	2b00      	cmp	r3, #0
 8007746:	d02d      	beq.n	80077a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007748:	4b6c      	ldr	r3, [pc, #432]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	08db      	lsrs	r3, r3, #3
 800774e:	f003 0303 	and.w	r3, r3, #3
 8007752:	4a6b      	ldr	r2, [pc, #428]	@ (8007900 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007754:	fa22 f303 	lsr.w	r3, r2, r3
 8007758:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	ee07 3a90 	vmov	s15, r3
 8007760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007772:	4b62      	ldr	r3, [pc, #392]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007782:	ed97 6a02 	vldr	s12, [r7, #8]
 8007786:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800790c <HAL_RCC_GetSysClockFreq+0x2e4>
 800778a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80077a2:	e087      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007910 <HAL_RCC_GetSysClockFreq+0x2e8>
 80077b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b6:	4b51      	ldr	r3, [pc, #324]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077be:	ee07 3a90 	vmov	s15, r3
 80077c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800790c <HAL_RCC_GetSysClockFreq+0x2e4>
 80077ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80077e6:	e065      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007914 <HAL_RCC_GetSysClockFreq+0x2ec>
 80077f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fa:	4b40      	ldr	r3, [pc, #256]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780a:	ed97 6a02 	vldr	s12, [r7, #8]
 800780e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800790c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800781e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007826:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800782a:	e043      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007836:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007918 <HAL_RCC_GetSysClockFreq+0x2f0>
 800783a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783e:	4b2f      	ldr	r3, [pc, #188]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007852:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800790c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800786e:	e021      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007914 <HAL_RCC_GetSysClockFreq+0x2ec>
 800787e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007882:	4b1e      	ldr	r3, [pc, #120]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007892:	ed97 6a02 	vldr	s12, [r7, #8]
 8007896:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800790c <HAL_RCC_GetSysClockFreq+0x2e4>
 800789a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800789e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80078b4:	4b11      	ldr	r3, [pc, #68]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b8:	0a5b      	lsrs	r3, r3, #9
 80078ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078be:	3301      	adds	r3, #1
 80078c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	ee07 3a90 	vmov	s15, r3
 80078c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80078d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078d8:	ee17 3a90 	vmov	r3, s15
 80078dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80078de:	e005      	b.n	80078ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61bb      	str	r3, [r7, #24]
      break;
 80078e4:	e002      	b.n	80078ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80078e6:	4b07      	ldr	r3, [pc, #28]	@ (8007904 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80078e8:	61bb      	str	r3, [r7, #24]
      break;
 80078ea:	bf00      	nop
  }

  return sysclockfreq;
 80078ec:	69bb      	ldr	r3, [r7, #24]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3724      	adds	r7, #36	@ 0x24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	58024400 	.word	0x58024400
 8007900:	03d09000 	.word	0x03d09000
 8007904:	003d0900 	.word	0x003d0900
 8007908:	017d7840 	.word	0x017d7840
 800790c:	46000000 	.word	0x46000000
 8007910:	4c742400 	.word	0x4c742400
 8007914:	4a742400 	.word	0x4a742400
 8007918:	4bbebc20 	.word	0x4bbebc20

0800791c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007922:	f7ff fe81 	bl	8007628 <HAL_RCC_GetSysClockFreq>
 8007926:	4602      	mov	r2, r0
 8007928:	4b10      	ldr	r3, [pc, #64]	@ (800796c <HAL_RCC_GetHCLKFreq+0x50>)
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	0a1b      	lsrs	r3, r3, #8
 800792e:	f003 030f 	and.w	r3, r3, #15
 8007932:	490f      	ldr	r1, [pc, #60]	@ (8007970 <HAL_RCC_GetHCLKFreq+0x54>)
 8007934:	5ccb      	ldrb	r3, [r1, r3]
 8007936:	f003 031f 	and.w	r3, r3, #31
 800793a:	fa22 f303 	lsr.w	r3, r2, r3
 800793e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007940:	4b0a      	ldr	r3, [pc, #40]	@ (800796c <HAL_RCC_GetHCLKFreq+0x50>)
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	f003 030f 	and.w	r3, r3, #15
 8007948:	4a09      	ldr	r2, [pc, #36]	@ (8007970 <HAL_RCC_GetHCLKFreq+0x54>)
 800794a:	5cd3      	ldrb	r3, [r2, r3]
 800794c:	f003 031f 	and.w	r3, r3, #31
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	fa22 f303 	lsr.w	r3, r2, r3
 8007956:	4a07      	ldr	r2, [pc, #28]	@ (8007974 <HAL_RCC_GetHCLKFreq+0x58>)
 8007958:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800795a:	4a07      	ldr	r2, [pc, #28]	@ (8007978 <HAL_RCC_GetHCLKFreq+0x5c>)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007960:	4b04      	ldr	r3, [pc, #16]	@ (8007974 <HAL_RCC_GetHCLKFreq+0x58>)
 8007962:	681b      	ldr	r3, [r3, #0]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	58024400 	.word	0x58024400
 8007970:	0800fdf0 	.word	0x0800fdf0
 8007974:	24000004 	.word	0x24000004
 8007978:	24000000 	.word	0x24000000

0800797c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007980:	f7ff ffcc 	bl	800791c <HAL_RCC_GetHCLKFreq>
 8007984:	4602      	mov	r2, r0
 8007986:	4b06      	ldr	r3, [pc, #24]	@ (80079a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	091b      	lsrs	r3, r3, #4
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	4904      	ldr	r1, [pc, #16]	@ (80079a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007992:	5ccb      	ldrb	r3, [r1, r3]
 8007994:	f003 031f 	and.w	r3, r3, #31
 8007998:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800799c:	4618      	mov	r0, r3
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	58024400 	.word	0x58024400
 80079a4:	0800fdf0 	.word	0x0800fdf0

080079a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80079ac:	f7ff ffb6 	bl	800791c <HAL_RCC_GetHCLKFreq>
 80079b0:	4602      	mov	r2, r0
 80079b2:	4b06      	ldr	r3, [pc, #24]	@ (80079cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	0a1b      	lsrs	r3, r3, #8
 80079b8:	f003 0307 	and.w	r3, r3, #7
 80079bc:	4904      	ldr	r1, [pc, #16]	@ (80079d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80079be:	5ccb      	ldrb	r3, [r1, r3]
 80079c0:	f003 031f 	and.w	r3, r3, #31
 80079c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	58024400 	.word	0x58024400
 80079d0:	0800fdf0 	.word	0x0800fdf0

080079d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079d8:	b0ca      	sub	sp, #296	@ 0x128
 80079da:	af00      	add	r7, sp, #0
 80079dc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079e6:	2300      	movs	r3, #0
 80079e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80079f8:	2500      	movs	r5, #0
 80079fa:	ea54 0305 	orrs.w	r3, r4, r5
 80079fe:	d049      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a0a:	d02f      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007a0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a10:	d828      	bhi.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a16:	d01a      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007a18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a1c:	d822      	bhi.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a26:	d007      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a28:	e01c      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a2a:	4bb8      	ldr	r3, [pc, #736]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2e:	4ab7      	ldr	r2, [pc, #732]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a36:	e01a      	b.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3c:	3308      	adds	r3, #8
 8007a3e:	2102      	movs	r1, #2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f001 fc8f 	bl	8009364 <RCCEx_PLL2_Config>
 8007a46:	4603      	mov	r3, r0
 8007a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a4c:	e00f      	b.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a52:	3328      	adds	r3, #40	@ 0x28
 8007a54:	2102      	movs	r1, #2
 8007a56:	4618      	mov	r0, r3
 8007a58:	f001 fd36 	bl	80094c8 <RCCEx_PLL3_Config>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a62:	e004      	b.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a6a:	e000      	b.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10a      	bne.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007a76:	4ba5      	ldr	r3, [pc, #660]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a7a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a84:	4aa1      	ldr	r2, [pc, #644]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a86:	430b      	orrs	r3, r1
 8007a88:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a8a:	e003      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007aa0:	f04f 0900 	mov.w	r9, #0
 8007aa4:	ea58 0309 	orrs.w	r3, r8, r9
 8007aa8:	d047      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d82a      	bhi.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8007abc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aba:	bf00      	nop
 8007abc:	08007ad1 	.word	0x08007ad1
 8007ac0:	08007adf 	.word	0x08007adf
 8007ac4:	08007af5 	.word	0x08007af5
 8007ac8:	08007b13 	.word	0x08007b13
 8007acc:	08007b13 	.word	0x08007b13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ad0:	4b8e      	ldr	r3, [pc, #568]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad4:	4a8d      	ldr	r2, [pc, #564]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ada:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007adc:	e01a      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f001 fc3c 	bl	8009364 <RCCEx_PLL2_Config>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007af2:	e00f      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af8:	3328      	adds	r3, #40	@ 0x28
 8007afa:	2100      	movs	r1, #0
 8007afc:	4618      	mov	r0, r3
 8007afe:	f001 fce3 	bl	80094c8 <RCCEx_PLL3_Config>
 8007b02:	4603      	mov	r3, r0
 8007b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b08:	e004      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b10:	e000      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007b12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10a      	bne.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b1c:	4b7b      	ldr	r3, [pc, #492]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b20:	f023 0107 	bic.w	r1, r3, #7
 8007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b2a:	4a78      	ldr	r2, [pc, #480]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b2c:	430b      	orrs	r3, r1
 8007b2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b30:	e003      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007b46:	f04f 0b00 	mov.w	fp, #0
 8007b4a:	ea5a 030b 	orrs.w	r3, sl, fp
 8007b4e:	d04c      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b5a:	d030      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007b5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b60:	d829      	bhi.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007b62:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b64:	d02d      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007b66:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b68:	d825      	bhi.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007b6a:	2b80      	cmp	r3, #128	@ 0x80
 8007b6c:	d018      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007b6e:	2b80      	cmp	r3, #128	@ 0x80
 8007b70:	d821      	bhi.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007b76:	2b40      	cmp	r3, #64	@ 0x40
 8007b78:	d007      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007b7a:	e01c      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b7c:	4b63      	ldr	r3, [pc, #396]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b80:	4a62      	ldr	r2, [pc, #392]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b88:	e01c      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8e:	3308      	adds	r3, #8
 8007b90:	2100      	movs	r1, #0
 8007b92:	4618      	mov	r0, r3
 8007b94:	f001 fbe6 	bl	8009364 <RCCEx_PLL2_Config>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b9e:	e011      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba4:	3328      	adds	r3, #40	@ 0x28
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 fc8d 	bl	80094c8 <RCCEx_PLL3_Config>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007bb4:	e006      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bbc:	e002      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007bbe:	bf00      	nop
 8007bc0:	e000      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10a      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007bcc:	4b4f      	ldr	r3, [pc, #316]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bda:	4a4c      	ldr	r2, [pc, #304]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bdc:	430b      	orrs	r3, r1
 8007bde:	6513      	str	r3, [r2, #80]	@ 0x50
 8007be0:	e003      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007be6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007bf6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007c00:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007c04:	460b      	mov	r3, r1
 8007c06:	4313      	orrs	r3, r2
 8007c08:	d053      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007c12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c16:	d035      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007c18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c1c:	d82e      	bhi.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007c22:	d031      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007c24:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007c28:	d828      	bhi.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c2e:	d01a      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007c30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c34:	d822      	bhi.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007c3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c3e:	d007      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007c40:	e01c      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c42:	4b32      	ldr	r3, [pc, #200]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c46:	4a31      	ldr	r2, [pc, #196]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c4e:	e01c      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c54:	3308      	adds	r3, #8
 8007c56:	2100      	movs	r1, #0
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 fb83 	bl	8009364 <RCCEx_PLL2_Config>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007c64:	e011      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6a:	3328      	adds	r3, #40	@ 0x28
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f001 fc2a 	bl	80094c8 <RCCEx_PLL3_Config>
 8007c74:	4603      	mov	r3, r0
 8007c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c7a:	e006      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c82:	e002      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007c84:	bf00      	nop
 8007c86:	e000      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10b      	bne.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007c92:	4b1e      	ldr	r3, [pc, #120]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c96:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ca4:	430b      	orrs	r3, r1
 8007ca6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ca8:	e003      	b.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007cbe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007cc8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	d056      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007cda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007cde:	d038      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007ce0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ce4:	d831      	bhi.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007ce6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007cea:	d034      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007cec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007cf0:	d82b      	bhi.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007cf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cf6:	d01d      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007cf8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cfc:	d825      	bhi.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d006      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007d02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d06:	d00a      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007d08:	e01f      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007d0a:	bf00      	nop
 8007d0c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d10:	4ba2      	ldr	r3, [pc, #648]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d14:	4aa1      	ldr	r2, [pc, #644]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d1c:	e01c      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d22:	3308      	adds	r3, #8
 8007d24:	2100      	movs	r1, #0
 8007d26:	4618      	mov	r0, r3
 8007d28:	f001 fb1c 	bl	8009364 <RCCEx_PLL2_Config>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007d32:	e011      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d38:	3328      	adds	r3, #40	@ 0x28
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f001 fbc3 	bl	80094c8 <RCCEx_PLL3_Config>
 8007d42:	4603      	mov	r3, r0
 8007d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d48:	e006      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d50:	e002      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007d52:	bf00      	nop
 8007d54:	e000      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10b      	bne.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007d60:	4b8e      	ldr	r3, [pc, #568]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d64:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d70:	4a8a      	ldr	r2, [pc, #552]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d72:	430b      	orrs	r3, r1
 8007d74:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d76:	e003      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d90:	2300      	movs	r3, #0
 8007d92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007d96:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	d03a      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da6:	2b30      	cmp	r3, #48	@ 0x30
 8007da8:	d01f      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007daa:	2b30      	cmp	r3, #48	@ 0x30
 8007dac:	d819      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007dae:	2b20      	cmp	r3, #32
 8007db0:	d00c      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d815      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d019      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007dba:	2b10      	cmp	r3, #16
 8007dbc:	d111      	bne.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dbe:	4b77      	ldr	r3, [pc, #476]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc2:	4a76      	ldr	r2, [pc, #472]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007dca:	e011      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	2102      	movs	r1, #2
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f001 fac5 	bl	8009364 <RCCEx_PLL2_Config>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007de0:	e006      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007de8:	e002      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007dea:	bf00      	nop
 8007dec:	e000      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10a      	bne.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007df8:	4b68      	ldr	r3, [pc, #416]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dfc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e06:	4a65      	ldr	r2, [pc, #404]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e0c:	e003      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007e22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007e26:	2300      	movs	r3, #0
 8007e28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007e2c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4313      	orrs	r3, r2
 8007e34:	d051      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e40:	d035      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007e42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e46:	d82e      	bhi.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007e48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e4c:	d031      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007e4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e52:	d828      	bhi.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e58:	d01a      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e5e:	d822      	bhi.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e68:	d007      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007e6a:	e01c      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e6c:	4b4b      	ldr	r3, [pc, #300]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e70:	4a4a      	ldr	r2, [pc, #296]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e78:	e01c      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e7e:	3308      	adds	r3, #8
 8007e80:	2100      	movs	r1, #0
 8007e82:	4618      	mov	r0, r3
 8007e84:	f001 fa6e 	bl	8009364 <RCCEx_PLL2_Config>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e8e:	e011      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e94:	3328      	adds	r3, #40	@ 0x28
 8007e96:	2100      	movs	r1, #0
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f001 fb15 	bl	80094c8 <RCCEx_PLL3_Config>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ea4:	e006      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007eac:	e002      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007eae:	bf00      	nop
 8007eb0:	e000      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007ebc:	4b37      	ldr	r3, [pc, #220]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ec0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eca:	4a34      	ldr	r2, [pc, #208]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ecc:	430b      	orrs	r3, r1
 8007ece:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ed0:	e003      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007eea:	2300      	movs	r3, #0
 8007eec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ef0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	d056      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f04:	d033      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007f06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f0a:	d82c      	bhi.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f10:	d02f      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007f12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f16:	d826      	bhi.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f1c:	d02b      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007f1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f22:	d820      	bhi.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f28:	d012      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007f2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f2e:	d81a      	bhi.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d022      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f38:	d115      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3e:	3308      	adds	r3, #8
 8007f40:	2101      	movs	r1, #1
 8007f42:	4618      	mov	r0, r3
 8007f44:	f001 fa0e 	bl	8009364 <RCCEx_PLL2_Config>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f4e:	e015      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f54:	3328      	adds	r3, #40	@ 0x28
 8007f56:	2101      	movs	r1, #1
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f001 fab5 	bl	80094c8 <RCCEx_PLL3_Config>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f64:	e00a      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f6c:	e006      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f6e:	bf00      	nop
 8007f70:	e004      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f72:	bf00      	nop
 8007f74:	e002      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f76:	bf00      	nop
 8007f78:	e000      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10d      	bne.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f84:	4b05      	ldr	r3, [pc, #20]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f88:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f92:	4a02      	ldr	r2, [pc, #8]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f94:	430b      	orrs	r3, r1
 8007f96:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f98:	e006      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007f9a:	bf00      	nop
 8007f9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007fbe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	d055      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fd4:	d033      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fda:	d82c      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe0:	d02f      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe6:	d826      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007fe8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fec:	d02b      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007fee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ff2:	d820      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ff8:	d012      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ffe:	d81a      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008000:	2b00      	cmp	r3, #0
 8008002:	d022      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008004:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008008:	d115      	bne.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800800a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800e:	3308      	adds	r3, #8
 8008010:	2101      	movs	r1, #1
 8008012:	4618      	mov	r0, r3
 8008014:	f001 f9a6 	bl	8009364 <RCCEx_PLL2_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800801e:	e015      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008024:	3328      	adds	r3, #40	@ 0x28
 8008026:	2101      	movs	r1, #1
 8008028:	4618      	mov	r0, r3
 800802a:	f001 fa4d 	bl	80094c8 <RCCEx_PLL3_Config>
 800802e:	4603      	mov	r3, r0
 8008030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008034:	e00a      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800803c:	e006      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800803e:	bf00      	nop
 8008040:	e004      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008042:	bf00      	nop
 8008044:	e002      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008046:	bf00      	nop
 8008048:	e000      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800804a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800804c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10b      	bne.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008054:	4ba3      	ldr	r3, [pc, #652]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008058:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800805c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008060:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008064:	4a9f      	ldr	r2, [pc, #636]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008066:	430b      	orrs	r3, r1
 8008068:	6593      	str	r3, [r2, #88]	@ 0x58
 800806a:	e003      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800806c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008070:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008080:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008084:	2300      	movs	r3, #0
 8008086:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800808a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800808e:	460b      	mov	r3, r1
 8008090:	4313      	orrs	r3, r2
 8008092:	d037      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800809a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800809e:	d00e      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80080a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080a4:	d816      	bhi.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d018      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80080aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080ae:	d111      	bne.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b0:	4b8c      	ldr	r3, [pc, #560]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b4:	4a8b      	ldr	r2, [pc, #556]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80080bc:	e00f      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c2:	3308      	adds	r3, #8
 80080c4:	2101      	movs	r1, #1
 80080c6:	4618      	mov	r0, r3
 80080c8:	f001 f94c 	bl	8009364 <RCCEx_PLL2_Config>
 80080cc:	4603      	mov	r3, r0
 80080ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80080d2:	e004      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080da:	e000      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80080dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10a      	bne.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80080e6:	4b7f      	ldr	r3, [pc, #508]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80080ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080f4:	4a7b      	ldr	r2, [pc, #492]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080f6:	430b      	orrs	r3, r1
 80080f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80080fa:	e003      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008100:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008110:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008114:	2300      	movs	r3, #0
 8008116:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800811a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800811e:	460b      	mov	r3, r1
 8008120:	4313      	orrs	r3, r2
 8008122:	d039      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800812a:	2b03      	cmp	r3, #3
 800812c:	d81c      	bhi.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800812e:	a201      	add	r2, pc, #4	@ (adr r2, 8008134 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	08008171 	.word	0x08008171
 8008138:	08008145 	.word	0x08008145
 800813c:	08008153 	.word	0x08008153
 8008140:	08008171 	.word	0x08008171
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008144:	4b67      	ldr	r3, [pc, #412]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008148:	4a66      	ldr	r2, [pc, #408]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800814a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800814e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008150:	e00f      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008156:	3308      	adds	r3, #8
 8008158:	2102      	movs	r1, #2
 800815a:	4618      	mov	r0, r3
 800815c:	f001 f902 	bl	8009364 <RCCEx_PLL2_Config>
 8008160:	4603      	mov	r3, r0
 8008162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008166:	e004      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800816e:	e000      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10a      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800817a:	4b5a      	ldr	r3, [pc, #360]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800817c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800817e:	f023 0103 	bic.w	r1, r3, #3
 8008182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008188:	4a56      	ldr	r2, [pc, #344]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800818a:	430b      	orrs	r3, r1
 800818c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800818e:	e003      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008194:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80081a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081a8:	2300      	movs	r3, #0
 80081aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80081b2:	460b      	mov	r3, r1
 80081b4:	4313      	orrs	r3, r2
 80081b6:	f000 809f 	beq.w	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081ba:	4b4b      	ldr	r3, [pc, #300]	@ (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a4a      	ldr	r2, [pc, #296]	@ (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80081c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081c6:	f7f9 fd13 	bl	8001bf0 <HAL_GetTick>
 80081ca:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081ce:	e00b      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081d0:	f7f9 fd0e 	bl	8001bf0 <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b64      	cmp	r3, #100	@ 0x64
 80081de:	d903      	bls.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081e6:	e005      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081e8:	4b3f      	ldr	r3, [pc, #252]	@ (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d0ed      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80081f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d179      	bne.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80081fc:	4b39      	ldr	r3, [pc, #228]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008204:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008208:	4053      	eors	r3, r2
 800820a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800820e:	2b00      	cmp	r3, #0
 8008210:	d015      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008212:	4b34      	ldr	r3, [pc, #208]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800821a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800821e:	4b31      	ldr	r3, [pc, #196]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008222:	4a30      	ldr	r2, [pc, #192]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008228:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800822a:	4b2e      	ldr	r3, [pc, #184]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800822c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822e:	4a2d      	ldr	r2, [pc, #180]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008234:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008236:	4a2b      	ldr	r2, [pc, #172]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800823c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800823e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008242:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800824a:	d118      	bne.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800824c:	f7f9 fcd0 	bl	8001bf0 <HAL_GetTick>
 8008250:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008254:	e00d      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008256:	f7f9 fccb 	bl	8001bf0 <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008260:	1ad2      	subs	r2, r2, r3
 8008262:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008266:	429a      	cmp	r2, r3
 8008268:	d903      	bls.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008270:	e005      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008272:	4b1c      	ldr	r3, [pc, #112]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008276:	f003 0302 	and.w	r3, r3, #2
 800827a:	2b00      	cmp	r3, #0
 800827c:	d0eb      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800827e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008282:	2b00      	cmp	r3, #0
 8008284:	d129      	bne.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800828a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800828e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008292:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008296:	d10e      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008298:	4b12      	ldr	r3, [pc, #72]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80082a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80082a8:	091a      	lsrs	r2, r3, #4
 80082aa:	4b10      	ldr	r3, [pc, #64]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	4a0d      	ldr	r2, [pc, #52]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082b0:	430b      	orrs	r3, r1
 80082b2:	6113      	str	r3, [r2, #16]
 80082b4:	e005      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80082b6:	4b0b      	ldr	r3, [pc, #44]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	4a0a      	ldr	r2, [pc, #40]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80082c0:	6113      	str	r3, [r2, #16]
 80082c2:	4b08      	ldr	r3, [pc, #32]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082c4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80082c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80082ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082d2:	4a04      	ldr	r2, [pc, #16]	@ (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082d4:	430b      	orrs	r3, r1
 80082d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80082d8:	e00e      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80082e2:	e009      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80082e4:	58024400 	.word	0x58024400
 80082e8:	58024800 	.word	0x58024800
 80082ec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80082f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	f002 0301 	and.w	r3, r2, #1
 8008304:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008308:	2300      	movs	r3, #0
 800830a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800830e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008312:	460b      	mov	r3, r1
 8008314:	4313      	orrs	r3, r2
 8008316:	f000 8089 	beq.w	800842c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800831a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800831e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008320:	2b28      	cmp	r3, #40	@ 0x28
 8008322:	d86b      	bhi.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008324:	a201      	add	r2, pc, #4	@ (adr r2, 800832c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832a:	bf00      	nop
 800832c:	08008405 	.word	0x08008405
 8008330:	080083fd 	.word	0x080083fd
 8008334:	080083fd 	.word	0x080083fd
 8008338:	080083fd 	.word	0x080083fd
 800833c:	080083fd 	.word	0x080083fd
 8008340:	080083fd 	.word	0x080083fd
 8008344:	080083fd 	.word	0x080083fd
 8008348:	080083fd 	.word	0x080083fd
 800834c:	080083d1 	.word	0x080083d1
 8008350:	080083fd 	.word	0x080083fd
 8008354:	080083fd 	.word	0x080083fd
 8008358:	080083fd 	.word	0x080083fd
 800835c:	080083fd 	.word	0x080083fd
 8008360:	080083fd 	.word	0x080083fd
 8008364:	080083fd 	.word	0x080083fd
 8008368:	080083fd 	.word	0x080083fd
 800836c:	080083e7 	.word	0x080083e7
 8008370:	080083fd 	.word	0x080083fd
 8008374:	080083fd 	.word	0x080083fd
 8008378:	080083fd 	.word	0x080083fd
 800837c:	080083fd 	.word	0x080083fd
 8008380:	080083fd 	.word	0x080083fd
 8008384:	080083fd 	.word	0x080083fd
 8008388:	080083fd 	.word	0x080083fd
 800838c:	08008405 	.word	0x08008405
 8008390:	080083fd 	.word	0x080083fd
 8008394:	080083fd 	.word	0x080083fd
 8008398:	080083fd 	.word	0x080083fd
 800839c:	080083fd 	.word	0x080083fd
 80083a0:	080083fd 	.word	0x080083fd
 80083a4:	080083fd 	.word	0x080083fd
 80083a8:	080083fd 	.word	0x080083fd
 80083ac:	08008405 	.word	0x08008405
 80083b0:	080083fd 	.word	0x080083fd
 80083b4:	080083fd 	.word	0x080083fd
 80083b8:	080083fd 	.word	0x080083fd
 80083bc:	080083fd 	.word	0x080083fd
 80083c0:	080083fd 	.word	0x080083fd
 80083c4:	080083fd 	.word	0x080083fd
 80083c8:	080083fd 	.word	0x080083fd
 80083cc:	08008405 	.word	0x08008405
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d4:	3308      	adds	r3, #8
 80083d6:	2101      	movs	r1, #1
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 ffc3 	bl	8009364 <RCCEx_PLL2_Config>
 80083de:	4603      	mov	r3, r0
 80083e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80083e4:	e00f      	b.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ea:	3328      	adds	r3, #40	@ 0x28
 80083ec:	2101      	movs	r1, #1
 80083ee:	4618      	mov	r0, r3
 80083f0:	f001 f86a 	bl	80094c8 <RCCEx_PLL3_Config>
 80083f4:	4603      	mov	r3, r0
 80083f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80083fa:	e004      	b.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008402:	e000      	b.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10a      	bne.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800840e:	4bbf      	ldr	r3, [pc, #764]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008412:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800841c:	4abb      	ldr	r2, [pc, #748]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800841e:	430b      	orrs	r3, r1
 8008420:	6553      	str	r3, [r2, #84]	@ 0x54
 8008422:	e003      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008428:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800842c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	f002 0302 	and.w	r3, r2, #2
 8008438:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800843c:	2300      	movs	r3, #0
 800843e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008442:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008446:	460b      	mov	r3, r1
 8008448:	4313      	orrs	r3, r2
 800844a:	d041      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800844c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008450:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008452:	2b05      	cmp	r3, #5
 8008454:	d824      	bhi.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008456:	a201      	add	r2, pc, #4	@ (adr r2, 800845c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	080084a9 	.word	0x080084a9
 8008460:	08008475 	.word	0x08008475
 8008464:	0800848b 	.word	0x0800848b
 8008468:	080084a9 	.word	0x080084a9
 800846c:	080084a9 	.word	0x080084a9
 8008470:	080084a9 	.word	0x080084a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008478:	3308      	adds	r3, #8
 800847a:	2101      	movs	r1, #1
 800847c:	4618      	mov	r0, r3
 800847e:	f000 ff71 	bl	8009364 <RCCEx_PLL2_Config>
 8008482:	4603      	mov	r3, r0
 8008484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008488:	e00f      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800848a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848e:	3328      	adds	r3, #40	@ 0x28
 8008490:	2101      	movs	r1, #1
 8008492:	4618      	mov	r0, r3
 8008494:	f001 f818 	bl	80094c8 <RCCEx_PLL3_Config>
 8008498:	4603      	mov	r3, r0
 800849a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800849e:	e004      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084a6:	e000      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80084a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10a      	bne.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80084b2:	4b96      	ldr	r3, [pc, #600]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084b6:	f023 0107 	bic.w	r1, r3, #7
 80084ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084c0:	4a92      	ldr	r2, [pc, #584]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084c2:	430b      	orrs	r3, r1
 80084c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80084c6:	e003      	b.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	f002 0304 	and.w	r3, r2, #4
 80084dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084e0:	2300      	movs	r3, #0
 80084e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80084ea:	460b      	mov	r3, r1
 80084ec:	4313      	orrs	r3, r2
 80084ee:	d044      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80084f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084f8:	2b05      	cmp	r3, #5
 80084fa:	d825      	bhi.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80084fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008504 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80084fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008502:	bf00      	nop
 8008504:	08008551 	.word	0x08008551
 8008508:	0800851d 	.word	0x0800851d
 800850c:	08008533 	.word	0x08008533
 8008510:	08008551 	.word	0x08008551
 8008514:	08008551 	.word	0x08008551
 8008518:	08008551 	.word	0x08008551
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800851c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008520:	3308      	adds	r3, #8
 8008522:	2101      	movs	r1, #1
 8008524:	4618      	mov	r0, r3
 8008526:	f000 ff1d 	bl	8009364 <RCCEx_PLL2_Config>
 800852a:	4603      	mov	r3, r0
 800852c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008530:	e00f      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008536:	3328      	adds	r3, #40	@ 0x28
 8008538:	2101      	movs	r1, #1
 800853a:	4618      	mov	r0, r3
 800853c:	f000 ffc4 	bl	80094c8 <RCCEx_PLL3_Config>
 8008540:	4603      	mov	r3, r0
 8008542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008546:	e004      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800854e:	e000      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10b      	bne.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800855a:	4b6c      	ldr	r3, [pc, #432]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800855c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800855e:	f023 0107 	bic.w	r1, r3, #7
 8008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800856a:	4a68      	ldr	r2, [pc, #416]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800856c:	430b      	orrs	r3, r1
 800856e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008570:	e003      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800857a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	f002 0320 	and.w	r3, r2, #32
 8008586:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800858a:	2300      	movs	r3, #0
 800858c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008590:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008594:	460b      	mov	r3, r1
 8008596:	4313      	orrs	r3, r2
 8008598:	d055      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800859a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800859e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085a6:	d033      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80085a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085ac:	d82c      	bhi.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80085ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085b2:	d02f      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80085b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085b8:	d826      	bhi.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80085ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80085be:	d02b      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80085c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80085c4:	d820      	bhi.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80085c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ca:	d012      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80085cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085d0:	d81a      	bhi.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d022      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80085d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085da:	d115      	bne.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e0:	3308      	adds	r3, #8
 80085e2:	2100      	movs	r1, #0
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 febd 	bl	8009364 <RCCEx_PLL2_Config>
 80085ea:	4603      	mov	r3, r0
 80085ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80085f0:	e015      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f6:	3328      	adds	r3, #40	@ 0x28
 80085f8:	2102      	movs	r1, #2
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 ff64 	bl	80094c8 <RCCEx_PLL3_Config>
 8008600:	4603      	mov	r3, r0
 8008602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008606:	e00a      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800860e:	e006      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008610:	bf00      	nop
 8008612:	e004      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008614:	bf00      	nop
 8008616:	e002      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008618:	bf00      	nop
 800861a:	e000      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800861c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800861e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10b      	bne.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008626:	4b39      	ldr	r3, [pc, #228]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800862a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800862e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008636:	4a35      	ldr	r2, [pc, #212]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008638:	430b      	orrs	r3, r1
 800863a:	6553      	str	r3, [r2, #84]	@ 0x54
 800863c:	e003      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800863e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008642:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008652:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008656:	2300      	movs	r3, #0
 8008658:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800865c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008660:	460b      	mov	r3, r1
 8008662:	4313      	orrs	r3, r2
 8008664:	d058      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800866a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800866e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008672:	d033      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008674:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008678:	d82c      	bhi.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800867a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800867e:	d02f      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008684:	d826      	bhi.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008686:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800868a:	d02b      	beq.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800868c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008690:	d820      	bhi.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008692:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008696:	d012      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800869c:	d81a      	bhi.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d022      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80086a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086a6:	d115      	bne.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ac:	3308      	adds	r3, #8
 80086ae:	2100      	movs	r1, #0
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 fe57 	bl	8009364 <RCCEx_PLL2_Config>
 80086b6:	4603      	mov	r3, r0
 80086b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80086bc:	e015      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c2:	3328      	adds	r3, #40	@ 0x28
 80086c4:	2102      	movs	r1, #2
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 fefe 	bl	80094c8 <RCCEx_PLL3_Config>
 80086cc:	4603      	mov	r3, r0
 80086ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80086d2:	e00a      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086da:	e006      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80086dc:	bf00      	nop
 80086de:	e004      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80086e0:	bf00      	nop
 80086e2:	e002      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80086e4:	bf00      	nop
 80086e6:	e000      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80086e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10e      	bne.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80086f2:	4b06      	ldr	r3, [pc, #24]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086f6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80086fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008702:	4a02      	ldr	r2, [pc, #8]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008704:	430b      	orrs	r3, r1
 8008706:	6593      	str	r3, [r2, #88]	@ 0x58
 8008708:	e006      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800870a:	bf00      	nop
 800870c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008714:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008724:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008728:	2300      	movs	r3, #0
 800872a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800872e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008732:	460b      	mov	r3, r1
 8008734:	4313      	orrs	r3, r2
 8008736:	d055      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800873c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008740:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008744:	d033      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008746:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800874a:	d82c      	bhi.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800874c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008750:	d02f      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008756:	d826      	bhi.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008758:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800875c:	d02b      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800875e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008762:	d820      	bhi.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008764:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008768:	d012      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800876a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800876e:	d81a      	bhi.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008770:	2b00      	cmp	r3, #0
 8008772:	d022      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008778:	d115      	bne.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800877a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800877e:	3308      	adds	r3, #8
 8008780:	2100      	movs	r1, #0
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fdee 	bl	8009364 <RCCEx_PLL2_Config>
 8008788:	4603      	mov	r3, r0
 800878a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800878e:	e015      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008794:	3328      	adds	r3, #40	@ 0x28
 8008796:	2102      	movs	r1, #2
 8008798:	4618      	mov	r0, r3
 800879a:	f000 fe95 	bl	80094c8 <RCCEx_PLL3_Config>
 800879e:	4603      	mov	r3, r0
 80087a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80087a4:	e00a      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087ac:	e006      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80087ae:	bf00      	nop
 80087b0:	e004      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80087b2:	bf00      	nop
 80087b4:	e002      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80087b6:	bf00      	nop
 80087b8:	e000      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80087ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10b      	bne.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80087c4:	4ba1      	ldr	r3, [pc, #644]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087c8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80087cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80087d4:	4a9d      	ldr	r2, [pc, #628]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087d6:	430b      	orrs	r3, r1
 80087d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80087da:	e003      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80087e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ec:	f002 0308 	and.w	r3, r2, #8
 80087f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80087f4:	2300      	movs	r3, #0
 80087f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80087fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80087fe:	460b      	mov	r3, r1
 8008800:	4313      	orrs	r3, r2
 8008802:	d01e      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800880c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008810:	d10c      	bne.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008816:	3328      	adds	r3, #40	@ 0x28
 8008818:	2102      	movs	r1, #2
 800881a:	4618      	mov	r0, r3
 800881c:	f000 fe54 	bl	80094c8 <RCCEx_PLL3_Config>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d002      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800882c:	4b87      	ldr	r3, [pc, #540]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800882e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008830:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800883c:	4a83      	ldr	r2, [pc, #524]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800883e:	430b      	orrs	r3, r1
 8008840:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884a:	f002 0310 	and.w	r3, r2, #16
 800884e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008852:	2300      	movs	r3, #0
 8008854:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008858:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800885c:	460b      	mov	r3, r1
 800885e:	4313      	orrs	r3, r2
 8008860:	d01e      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008866:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800886a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800886e:	d10c      	bne.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008874:	3328      	adds	r3, #40	@ 0x28
 8008876:	2102      	movs	r1, #2
 8008878:	4618      	mov	r0, r3
 800887a:	f000 fe25 	bl	80094c8 <RCCEx_PLL3_Config>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800888a:	4b70      	ldr	r3, [pc, #448]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800888c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800888e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008896:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800889a:	4a6c      	ldr	r2, [pc, #432]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800889c:	430b      	orrs	r3, r1
 800889e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80088ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088b0:	2300      	movs	r3, #0
 80088b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80088ba:	460b      	mov	r3, r1
 80088bc:	4313      	orrs	r3, r2
 80088be:	d03e      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80088c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80088c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088cc:	d022      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80088ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088d2:	d81b      	bhi.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80088d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088dc:	d00b      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80088de:	e015      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e4:	3308      	adds	r3, #8
 80088e6:	2100      	movs	r1, #0
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 fd3b 	bl	8009364 <RCCEx_PLL2_Config>
 80088ee:	4603      	mov	r3, r0
 80088f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80088f4:	e00f      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088fa:	3328      	adds	r3, #40	@ 0x28
 80088fc:	2102      	movs	r1, #2
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 fde2 	bl	80094c8 <RCCEx_PLL3_Config>
 8008904:	4603      	mov	r3, r0
 8008906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800890a:	e004      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008912:	e000      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10b      	bne.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800891e:	4b4b      	ldr	r3, [pc, #300]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008922:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800892a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800892e:	4a47      	ldr	r2, [pc, #284]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008930:	430b      	orrs	r3, r1
 8008932:	6593      	str	r3, [r2, #88]	@ 0x58
 8008934:	e003      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800893a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800893e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800894a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800894c:	2300      	movs	r3, #0
 800894e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008950:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008954:	460b      	mov	r3, r1
 8008956:	4313      	orrs	r3, r2
 8008958:	d03b      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800895a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800895e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008962:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008966:	d01f      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008968:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800896c:	d818      	bhi.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800896e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008972:	d003      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008974:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008978:	d007      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800897a:	e011      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800897c:	4b33      	ldr	r3, [pc, #204]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800897e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008980:	4a32      	ldr	r2, [pc, #200]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008988:	e00f      	b.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800898a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800898e:	3328      	adds	r3, #40	@ 0x28
 8008990:	2101      	movs	r1, #1
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fd98 	bl	80094c8 <RCCEx_PLL3_Config>
 8008998:	4603      	mov	r3, r0
 800899a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800899e:	e004      	b.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089a6:	e000      	b.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80089a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10b      	bne.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089b2:	4b26      	ldr	r3, [pc, #152]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80089ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c2:	4a22      	ldr	r2, [pc, #136]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089c4:	430b      	orrs	r3, r1
 80089c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80089c8:	e003      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80089d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089da:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80089de:	673b      	str	r3, [r7, #112]	@ 0x70
 80089e0:	2300      	movs	r3, #0
 80089e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80089e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80089e8:	460b      	mov	r3, r1
 80089ea:	4313      	orrs	r3, r2
 80089ec:	d034      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80089ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d003      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80089f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089fc:	d007      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80089fe:	e011      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a00:	4b12      	ldr	r3, [pc, #72]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a04:	4a11      	ldr	r2, [pc, #68]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a0c:	e00e      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a12:	3308      	adds	r3, #8
 8008a14:	2102      	movs	r1, #2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 fca4 	bl	8009364 <RCCEx_PLL2_Config>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008a22:	e003      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10d      	bne.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a34:	4b05      	ldr	r3, [pc, #20]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a38:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a42:	4a02      	ldr	r2, [pc, #8]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a44:	430b      	orrs	r3, r1
 8008a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a48:	e006      	b.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008a4a:	bf00      	nop
 8008a4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a60:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008a64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a66:	2300      	movs	r3, #0
 8008a68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a6a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4313      	orrs	r3, r2
 8008a72:	d00c      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a78:	3328      	adds	r3, #40	@ 0x28
 8008a7a:	2102      	movs	r1, #2
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 fd23 	bl	80094c8 <RCCEx_PLL3_Config>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d002      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008a9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008aa0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	d038      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ab6:	d018      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008ab8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008abc:	d811      	bhi.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ac2:	d014      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ac8:	d80b      	bhi.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d011      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ad2:	d106      	bne.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ad4:	4bc3      	ldr	r3, [pc, #780]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad8:	4ac2      	ldr	r2, [pc, #776]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008ae0:	e008      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ae8:	e004      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008aea:	bf00      	nop
 8008aec:	e002      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008aee:	bf00      	nop
 8008af0:	e000      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10b      	bne.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008afc:	4bb9      	ldr	r3, [pc, #740]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b0c:	4ab5      	ldr	r2, [pc, #724]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b0e:	430b      	orrs	r3, r1
 8008b10:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b12:	e003      	b.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008b28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b2e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008b32:	460b      	mov	r3, r1
 8008b34:	4313      	orrs	r3, r2
 8008b36:	d009      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b38:	4baa      	ldr	r3, [pc, #680]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b46:	4aa7      	ldr	r2, [pc, #668]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b54:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008b58:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008b62:	460b      	mov	r3, r1
 8008b64:	4313      	orrs	r3, r2
 8008b66:	d00a      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008b68:	4b9e      	ldr	r3, [pc, #632]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008b78:	4a9a      	ldr	r2, [pc, #616]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b7a:	430b      	orrs	r3, r1
 8008b7c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b86:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b90:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008b94:	460b      	mov	r3, r1
 8008b96:	4313      	orrs	r3, r2
 8008b98:	d009      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b9a:	4b92      	ldr	r3, [pc, #584]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b9e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ba8:	4a8e      	ldr	r2, [pc, #568]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008baa:	430b      	orrs	r3, r1
 8008bac:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008bba:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bc0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	d00e      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bca:	4b86      	ldr	r3, [pc, #536]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	4a85      	ldr	r2, [pc, #532]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bd0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008bd4:	6113      	str	r3, [r2, #16]
 8008bd6:	4b83      	ldr	r3, [pc, #524]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bd8:	6919      	ldr	r1, [r3, #16]
 8008bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008be2:	4a80      	ldr	r2, [pc, #512]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008be4:	430b      	orrs	r3, r1
 8008be6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bfa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008bfe:	460b      	mov	r3, r1
 8008c00:	4313      	orrs	r3, r2
 8008c02:	d009      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008c04:	4b77      	ldr	r3, [pc, #476]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c08:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c12:	4a74      	ldr	r2, [pc, #464]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c14:	430b      	orrs	r3, r1
 8008c16:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c20:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008c24:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c26:	2300      	movs	r3, #0
 8008c28:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c2a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4313      	orrs	r3, r2
 8008c32:	d00a      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008c34:	4b6b      	ldr	r3, [pc, #428]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c38:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c44:	4a67      	ldr	r2, [pc, #412]	@ (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c46:	430b      	orrs	r3, r1
 8008c48:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	2100      	movs	r1, #0
 8008c54:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008c60:	460b      	mov	r3, r1
 8008c62:	4313      	orrs	r3, r2
 8008c64:	d011      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fb78 	bl	8009364 <RCCEx_PLL2_Config>
 8008c74:	4603      	mov	r3, r0
 8008c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d003      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c92:	2100      	movs	r1, #0
 8008c94:	6239      	str	r1, [r7, #32]
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	d011      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008caa:	3308      	adds	r3, #8
 8008cac:	2101      	movs	r1, #1
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 fb58 	bl	8009364 <RCCEx_PLL2_Config>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	61b9      	str	r1, [r7, #24]
 8008cd6:	f003 0304 	and.w	r3, r3, #4
 8008cda:	61fb      	str	r3, [r7, #28]
 8008cdc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	d011      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cea:	3308      	adds	r3, #8
 8008cec:	2102      	movs	r1, #2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 fb38 	bl	8009364 <RCCEx_PLL2_Config>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d003      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	2100      	movs	r1, #0
 8008d14:	6139      	str	r1, [r7, #16]
 8008d16:	f003 0308 	and.w	r3, r3, #8
 8008d1a:	617b      	str	r3, [r7, #20]
 8008d1c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008d20:	460b      	mov	r3, r1
 8008d22:	4313      	orrs	r3, r2
 8008d24:	d011      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d2a:	3328      	adds	r3, #40	@ 0x28
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 fbca 	bl	80094c8 <RCCEx_PLL3_Config>
 8008d34:	4603      	mov	r3, r0
 8008d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d52:	2100      	movs	r1, #0
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	f003 0310 	and.w	r3, r3, #16
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008d60:	460b      	mov	r3, r1
 8008d62:	4313      	orrs	r3, r2
 8008d64:	d011      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6a:	3328      	adds	r3, #40	@ 0x28
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 fbaa 	bl	80094c8 <RCCEx_PLL3_Config>
 8008d74:	4603      	mov	r3, r0
 8008d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d92:	2100      	movs	r1, #0
 8008d94:	6039      	str	r1, [r7, #0]
 8008d96:	f003 0320 	and.w	r3, r3, #32
 8008d9a:	607b      	str	r3, [r7, #4]
 8008d9c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008da0:	460b      	mov	r3, r1
 8008da2:	4313      	orrs	r3, r2
 8008da4:	d011      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008daa:	3328      	adds	r3, #40	@ 0x28
 8008dac:	2102      	movs	r1, #2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fb8a 	bl	80094c8 <RCCEx_PLL3_Config>
 8008db4:	4603      	mov	r3, r0
 8008db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008dca:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	e000      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008dde:	46bd      	mov	sp, r7
 8008de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008de4:	58024400 	.word	0x58024400

08008de8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008dec:	f7fe fd96 	bl	800791c <HAL_RCC_GetHCLKFreq>
 8008df0:	4602      	mov	r2, r0
 8008df2:	4b06      	ldr	r3, [pc, #24]	@ (8008e0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	091b      	lsrs	r3, r3, #4
 8008df8:	f003 0307 	and.w	r3, r3, #7
 8008dfc:	4904      	ldr	r1, [pc, #16]	@ (8008e10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008dfe:	5ccb      	ldrb	r3, [r1, r3]
 8008e00:	f003 031f 	and.w	r3, r3, #31
 8008e04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	58024400 	.word	0x58024400
 8008e10:	0800fdf0 	.word	0x0800fdf0

08008e14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b089      	sub	sp, #36	@ 0x24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e1c:	4ba1      	ldr	r3, [pc, #644]	@ (80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e20:	f003 0303 	and.w	r3, r3, #3
 8008e24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008e26:	4b9f      	ldr	r3, [pc, #636]	@ (80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e2a:	0b1b      	lsrs	r3, r3, #12
 8008e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008e32:	4b9c      	ldr	r3, [pc, #624]	@ (80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e36:	091b      	lsrs	r3, r3, #4
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008e3e:	4b99      	ldr	r3, [pc, #612]	@ (80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e42:	08db      	lsrs	r3, r3, #3
 8008e44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	fb02 f303 	mul.w	r3, r2, r3
 8008e4e:	ee07 3a90 	vmov	s15, r3
 8008e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 8111 	beq.w	8009084 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	f000 8083 	beq.w	8008f70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	f200 80a1 	bhi.w	8008fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d003      	beq.n	8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d056      	beq.n	8008f2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008e7e:	e099      	b.n	8008fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e80:	4b88      	ldr	r3, [pc, #544]	@ (80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0320 	and.w	r3, r3, #32
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d02d      	beq.n	8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e8c:	4b85      	ldr	r3, [pc, #532]	@ (80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	08db      	lsrs	r3, r3, #3
 8008e92:	f003 0303 	and.w	r3, r3, #3
 8008e96:	4a84      	ldr	r2, [pc, #528]	@ (80090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008e98:	fa22 f303 	lsr.w	r3, r2, r3
 8008e9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	ee07 3a90 	vmov	s15, r3
 8008ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	ee07 3a90 	vmov	s15, r3
 8008eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eb6:	4b7b      	ldr	r3, [pc, #492]	@ (80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ebe:	ee07 3a90 	vmov	s15, r3
 8008ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80090ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ee6:	e087      	b.n	8008ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	ee07 3a90 	vmov	s15, r3
 8008eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80090b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008efa:	4b6a      	ldr	r3, [pc, #424]	@ (80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f02:	ee07 3a90 	vmov	s15, r3
 8008f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80090ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f2a:	e065      	b.n	8008ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80090b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f3e:	4b59      	ldr	r3, [pc, #356]	@ (80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f46:	ee07 3a90 	vmov	s15, r3
 8008f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80090ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f6e:	e043      	b.n	8008ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	ee07 3a90 	vmov	s15, r3
 8008f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80090b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f82:	4b48      	ldr	r3, [pc, #288]	@ (80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f8a:	ee07 3a90 	vmov	s15, r3
 8008f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80090ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fb2:	e021      	b.n	8008ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	ee07 3a90 	vmov	s15, r3
 8008fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80090b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fc6:	4b37      	ldr	r3, [pc, #220]	@ (80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fce:	ee07 3a90 	vmov	s15, r3
 8008fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80090ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ff6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ffc:	0a5b      	lsrs	r3, r3, #9
 8008ffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009002:	ee07 3a90 	vmov	s15, r3
 8009006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800900e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009012:	edd7 6a07 	vldr	s13, [r7, #28]
 8009016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800901a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800901e:	ee17 2a90 	vmov	r2, s15
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009026:	4b1f      	ldr	r3, [pc, #124]	@ (80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800902a:	0c1b      	lsrs	r3, r3, #16
 800902c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009030:	ee07 3a90 	vmov	s15, r3
 8009034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009038:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800903c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009040:	edd7 6a07 	vldr	s13, [r7, #28]
 8009044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800904c:	ee17 2a90 	vmov	r2, s15
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009054:	4b13      	ldr	r3, [pc, #76]	@ (80090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009058:	0e1b      	lsrs	r3, r3, #24
 800905a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009066:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800906a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800906e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800907a:	ee17 2a90 	vmov	r2, s15
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009082:	e008      	b.n	8009096 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	609a      	str	r2, [r3, #8]
}
 8009096:	bf00      	nop
 8009098:	3724      	adds	r7, #36	@ 0x24
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	58024400 	.word	0x58024400
 80090a8:	03d09000 	.word	0x03d09000
 80090ac:	46000000 	.word	0x46000000
 80090b0:	4c742400 	.word	0x4c742400
 80090b4:	4a742400 	.word	0x4a742400
 80090b8:	4bbebc20 	.word	0x4bbebc20

080090bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80090bc:	b480      	push	{r7}
 80090be:	b089      	sub	sp, #36	@ 0x24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090c4:	4ba1      	ldr	r3, [pc, #644]	@ (800934c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c8:	f003 0303 	and.w	r3, r3, #3
 80090cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80090ce:	4b9f      	ldr	r3, [pc, #636]	@ (800934c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d2:	0d1b      	lsrs	r3, r3, #20
 80090d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80090da:	4b9c      	ldr	r3, [pc, #624]	@ (800934c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090de:	0a1b      	lsrs	r3, r3, #8
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80090e6:	4b99      	ldr	r3, [pc, #612]	@ (800934c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ea:	08db      	lsrs	r3, r3, #3
 80090ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	fb02 f303 	mul.w	r3, r2, r3
 80090f6:	ee07 3a90 	vmov	s15, r3
 80090fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 8111 	beq.w	800932c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	2b02      	cmp	r3, #2
 800910e:	f000 8083 	beq.w	8009218 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	2b02      	cmp	r3, #2
 8009116:	f200 80a1 	bhi.w	800925c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d056      	beq.n	80091d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009126:	e099      	b.n	800925c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009128:	4b88      	ldr	r3, [pc, #544]	@ (800934c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0320 	and.w	r3, r3, #32
 8009130:	2b00      	cmp	r3, #0
 8009132:	d02d      	beq.n	8009190 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009134:	4b85      	ldr	r3, [pc, #532]	@ (800934c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	08db      	lsrs	r3, r3, #3
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	4a84      	ldr	r2, [pc, #528]	@ (8009350 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009140:	fa22 f303 	lsr.w	r3, r2, r3
 8009144:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	ee07 3a90 	vmov	s15, r3
 800914c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800915e:	4b7b      	ldr	r3, [pc, #492]	@ (800934c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800916e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009172:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800917a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800917e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800918a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800918e:	e087      	b.n	80092a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009358 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800919e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091a2:	4b6a      	ldr	r3, [pc, #424]	@ (800934c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091aa:	ee07 3a90 	vmov	s15, r3
 80091ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091d2:	e065      	b.n	80092a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	ee07 3a90 	vmov	s15, r3
 80091da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800935c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80091e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091e6:	4b59      	ldr	r3, [pc, #356]	@ (800934c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ee:	ee07 3a90 	vmov	s15, r3
 80091f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80091fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800920a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800920e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009216:	e043      	b.n	80092a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	ee07 3a90 	vmov	s15, r3
 800921e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009222:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009360 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800922a:	4b48      	ldr	r3, [pc, #288]	@ (800934c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800922c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800922e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009232:	ee07 3a90 	vmov	s15, r3
 8009236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800923a:	ed97 6a03 	vldr	s12, [r7, #12]
 800923e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800924a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800924e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800925a:	e021      	b.n	80092a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	ee07 3a90 	vmov	s15, r3
 8009262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009266:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800935c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800926a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800926e:	4b37      	ldr	r3, [pc, #220]	@ (800934c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009276:	ee07 3a90 	vmov	s15, r3
 800927a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800927e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009282:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800928a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800928e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800929a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800929e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80092a0:	4b2a      	ldr	r3, [pc, #168]	@ (800934c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a4:	0a5b      	lsrs	r3, r3, #9
 80092a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092aa:	ee07 3a90 	vmov	s15, r3
 80092ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80092be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092c6:	ee17 2a90 	vmov	r2, s15
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80092ce:	4b1f      	ldr	r3, [pc, #124]	@ (800934c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d2:	0c1b      	lsrs	r3, r3, #16
 80092d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092d8:	ee07 3a90 	vmov	s15, r3
 80092dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80092ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092f4:	ee17 2a90 	vmov	r2, s15
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80092fc:	4b13      	ldr	r3, [pc, #76]	@ (800934c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009300:	0e1b      	lsrs	r3, r3, #24
 8009302:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009306:	ee07 3a90 	vmov	s15, r3
 800930a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009312:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009316:	edd7 6a07 	vldr	s13, [r7, #28]
 800931a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800931e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009322:	ee17 2a90 	vmov	r2, s15
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800932a:	e008      	b.n	800933e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	609a      	str	r2, [r3, #8]
}
 800933e:	bf00      	nop
 8009340:	3724      	adds	r7, #36	@ 0x24
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	58024400 	.word	0x58024400
 8009350:	03d09000 	.word	0x03d09000
 8009354:	46000000 	.word	0x46000000
 8009358:	4c742400 	.word	0x4c742400
 800935c:	4a742400 	.word	0x4a742400
 8009360:	4bbebc20 	.word	0x4bbebc20

08009364 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009372:	4b53      	ldr	r3, [pc, #332]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 8009374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009376:	f003 0303 	and.w	r3, r3, #3
 800937a:	2b03      	cmp	r3, #3
 800937c:	d101      	bne.n	8009382 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e099      	b.n	80094b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009382:	4b4f      	ldr	r3, [pc, #316]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a4e      	ldr	r2, [pc, #312]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 8009388:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800938c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800938e:	f7f8 fc2f 	bl	8001bf0 <HAL_GetTick>
 8009392:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009394:	e008      	b.n	80093a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009396:	f7f8 fc2b 	bl	8001bf0 <HAL_GetTick>
 800939a:	4602      	mov	r2, r0
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d901      	bls.n	80093a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e086      	b.n	80094b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093a8:	4b45      	ldr	r3, [pc, #276]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1f0      	bne.n	8009396 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80093b4:	4b42      	ldr	r3, [pc, #264]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 80093b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	031b      	lsls	r3, r3, #12
 80093c2:	493f      	ldr	r1, [pc, #252]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	3b01      	subs	r3, #1
 80093d8:	025b      	lsls	r3, r3, #9
 80093da:	b29b      	uxth	r3, r3
 80093dc:	431a      	orrs	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	3b01      	subs	r3, #1
 80093e4:	041b      	lsls	r3, r3, #16
 80093e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80093ea:	431a      	orrs	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	3b01      	subs	r3, #1
 80093f2:	061b      	lsls	r3, r3, #24
 80093f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80093f8:	4931      	ldr	r1, [pc, #196]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 80093fa:	4313      	orrs	r3, r2
 80093fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80093fe:	4b30      	ldr	r3, [pc, #192]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 8009400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009402:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	492d      	ldr	r1, [pc, #180]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 800940c:	4313      	orrs	r3, r2
 800940e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009410:	4b2b      	ldr	r3, [pc, #172]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 8009412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009414:	f023 0220 	bic.w	r2, r3, #32
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	4928      	ldr	r1, [pc, #160]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 800941e:	4313      	orrs	r3, r2
 8009420:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009422:	4b27      	ldr	r3, [pc, #156]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 8009424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009426:	4a26      	ldr	r2, [pc, #152]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 8009428:	f023 0310 	bic.w	r3, r3, #16
 800942c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800942e:	4b24      	ldr	r3, [pc, #144]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 8009430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009432:	4b24      	ldr	r3, [pc, #144]	@ (80094c4 <RCCEx_PLL2_Config+0x160>)
 8009434:	4013      	ands	r3, r2
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	69d2      	ldr	r2, [r2, #28]
 800943a:	00d2      	lsls	r2, r2, #3
 800943c:	4920      	ldr	r1, [pc, #128]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 800943e:	4313      	orrs	r3, r2
 8009440:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009442:	4b1f      	ldr	r3, [pc, #124]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 8009444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009446:	4a1e      	ldr	r2, [pc, #120]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 8009448:	f043 0310 	orr.w	r3, r3, #16
 800944c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d106      	bne.n	8009462 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009454:	4b1a      	ldr	r3, [pc, #104]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 8009456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009458:	4a19      	ldr	r2, [pc, #100]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 800945a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800945e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009460:	e00f      	b.n	8009482 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d106      	bne.n	8009476 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009468:	4b15      	ldr	r3, [pc, #84]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 800946a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800946c:	4a14      	ldr	r2, [pc, #80]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 800946e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009472:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009474:	e005      	b.n	8009482 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009476:	4b12      	ldr	r3, [pc, #72]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 8009478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947a:	4a11      	ldr	r2, [pc, #68]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 800947c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009480:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009482:	4b0f      	ldr	r3, [pc, #60]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a0e      	ldr	r2, [pc, #56]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 8009488:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800948c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800948e:	f7f8 fbaf 	bl	8001bf0 <HAL_GetTick>
 8009492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009494:	e008      	b.n	80094a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009496:	f7f8 fbab 	bl	8001bf0 <HAL_GetTick>
 800949a:	4602      	mov	r2, r0
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d901      	bls.n	80094a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e006      	b.n	80094b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094a8:	4b05      	ldr	r3, [pc, #20]	@ (80094c0 <RCCEx_PLL2_Config+0x15c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d0f0      	beq.n	8009496 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	58024400 	.word	0x58024400
 80094c4:	ffff0007 	.word	0xffff0007

080094c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80094d6:	4b53      	ldr	r3, [pc, #332]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 80094d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094da:	f003 0303 	and.w	r3, r3, #3
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d101      	bne.n	80094e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e099      	b.n	800961a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80094e6:	4b4f      	ldr	r3, [pc, #316]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a4e      	ldr	r2, [pc, #312]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 80094ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094f2:	f7f8 fb7d 	bl	8001bf0 <HAL_GetTick>
 80094f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80094f8:	e008      	b.n	800950c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80094fa:	f7f8 fb79 	bl	8001bf0 <HAL_GetTick>
 80094fe:	4602      	mov	r2, r0
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	2b02      	cmp	r3, #2
 8009506:	d901      	bls.n	800950c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	e086      	b.n	800961a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800950c:	4b45      	ldr	r3, [pc, #276]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1f0      	bne.n	80094fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009518:	4b42      	ldr	r3, [pc, #264]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 800951a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	051b      	lsls	r3, r3, #20
 8009526:	493f      	ldr	r1, [pc, #252]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 8009528:	4313      	orrs	r3, r2
 800952a:	628b      	str	r3, [r1, #40]	@ 0x28
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	3b01      	subs	r3, #1
 8009532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	3b01      	subs	r3, #1
 800953c:	025b      	lsls	r3, r3, #9
 800953e:	b29b      	uxth	r3, r3
 8009540:	431a      	orrs	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	3b01      	subs	r3, #1
 8009548:	041b      	lsls	r3, r3, #16
 800954a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800954e:	431a      	orrs	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	3b01      	subs	r3, #1
 8009556:	061b      	lsls	r3, r3, #24
 8009558:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800955c:	4931      	ldr	r1, [pc, #196]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 800955e:	4313      	orrs	r3, r2
 8009560:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009562:	4b30      	ldr	r3, [pc, #192]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 8009564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009566:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	492d      	ldr	r1, [pc, #180]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 8009570:	4313      	orrs	r3, r2
 8009572:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009574:	4b2b      	ldr	r3, [pc, #172]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 8009576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009578:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	4928      	ldr	r1, [pc, #160]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 8009582:	4313      	orrs	r3, r2
 8009584:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009586:	4b27      	ldr	r3, [pc, #156]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 8009588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800958a:	4a26      	ldr	r2, [pc, #152]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 800958c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009590:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009592:	4b24      	ldr	r3, [pc, #144]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 8009594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009596:	4b24      	ldr	r3, [pc, #144]	@ (8009628 <RCCEx_PLL3_Config+0x160>)
 8009598:	4013      	ands	r3, r2
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	69d2      	ldr	r2, [r2, #28]
 800959e:	00d2      	lsls	r2, r2, #3
 80095a0:	4920      	ldr	r1, [pc, #128]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80095a6:	4b1f      	ldr	r3, [pc, #124]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 80095a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095aa:	4a1e      	ldr	r2, [pc, #120]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 80095ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d106      	bne.n	80095c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80095b8:	4b1a      	ldr	r3, [pc, #104]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 80095ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095bc:	4a19      	ldr	r2, [pc, #100]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 80095be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80095c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80095c4:	e00f      	b.n	80095e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d106      	bne.n	80095da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80095cc:	4b15      	ldr	r3, [pc, #84]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 80095ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d0:	4a14      	ldr	r2, [pc, #80]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 80095d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80095d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80095d8:	e005      	b.n	80095e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80095da:	4b12      	ldr	r3, [pc, #72]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 80095dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095de:	4a11      	ldr	r2, [pc, #68]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 80095e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80095e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80095e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a0e      	ldr	r2, [pc, #56]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 80095ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095f2:	f7f8 fafd 	bl	8001bf0 <HAL_GetTick>
 80095f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095f8:	e008      	b.n	800960c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80095fa:	f7f8 faf9 	bl	8001bf0 <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	2b02      	cmp	r3, #2
 8009606:	d901      	bls.n	800960c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009608:	2303      	movs	r3, #3
 800960a:	e006      	b.n	800961a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800960c:	4b05      	ldr	r3, [pc, #20]	@ (8009624 <RCCEx_PLL3_Config+0x15c>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d0f0      	beq.n	80095fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009618:	7bfb      	ldrb	r3, [r7, #15]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	58024400 	.word	0x58024400
 8009628:	ffff0007 	.word	0xffff0007

0800962c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e10f      	b.n	800985e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a87      	ldr	r2, [pc, #540]	@ (8009868 <HAL_SPI_Init+0x23c>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d00f      	beq.n	800966e <HAL_SPI_Init+0x42>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a86      	ldr	r2, [pc, #536]	@ (800986c <HAL_SPI_Init+0x240>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d00a      	beq.n	800966e <HAL_SPI_Init+0x42>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a84      	ldr	r2, [pc, #528]	@ (8009870 <HAL_SPI_Init+0x244>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d005      	beq.n	800966e <HAL_SPI_Init+0x42>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	2b0f      	cmp	r3, #15
 8009668:	d901      	bls.n	800966e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e0f7      	b.n	800985e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f900 	bl	8009874 <SPI_GetPacketSize>
 8009674:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a7b      	ldr	r2, [pc, #492]	@ (8009868 <HAL_SPI_Init+0x23c>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d00c      	beq.n	800969a <HAL_SPI_Init+0x6e>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a79      	ldr	r2, [pc, #484]	@ (800986c <HAL_SPI_Init+0x240>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d007      	beq.n	800969a <HAL_SPI_Init+0x6e>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a78      	ldr	r2, [pc, #480]	@ (8009870 <HAL_SPI_Init+0x244>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d002      	beq.n	800969a <HAL_SPI_Init+0x6e>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b08      	cmp	r3, #8
 8009698:	d811      	bhi.n	80096be <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800969e:	4a72      	ldr	r2, [pc, #456]	@ (8009868 <HAL_SPI_Init+0x23c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d009      	beq.n	80096b8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a70      	ldr	r2, [pc, #448]	@ (800986c <HAL_SPI_Init+0x240>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d004      	beq.n	80096b8 <HAL_SPI_Init+0x8c>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a6f      	ldr	r2, [pc, #444]	@ (8009870 <HAL_SPI_Init+0x244>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d104      	bne.n	80096c2 <HAL_SPI_Init+0x96>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2b10      	cmp	r3, #16
 80096bc:	d901      	bls.n	80096c2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e0cd      	b.n	800985e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d106      	bne.n	80096dc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7f7 fe54 	bl	8001384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2202      	movs	r2, #2
 80096e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f022 0201 	bic.w	r2, r2, #1
 80096f2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80096fe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009708:	d119      	bne.n	800973e <HAL_SPI_Init+0x112>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009712:	d103      	bne.n	800971c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009718:	2b00      	cmp	r3, #0
 800971a:	d008      	beq.n	800972e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10c      	bne.n	800973e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009728:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800972c:	d107      	bne.n	800973e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800973c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00f      	beq.n	800976a <HAL_SPI_Init+0x13e>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	2b06      	cmp	r3, #6
 8009750:	d90b      	bls.n	800976a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	430a      	orrs	r2, r1
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	e007      	b.n	800977a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009778:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	69da      	ldr	r2, [r3, #28]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009782:	431a      	orrs	r2, r3
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	431a      	orrs	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800978c:	ea42 0103 	orr.w	r1, r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	68da      	ldr	r2, [r3, #12]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	430a      	orrs	r2, r1
 800979a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a4:	431a      	orrs	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097aa:	431a      	orrs	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	431a      	orrs	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	431a      	orrs	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	431a      	orrs	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	431a      	orrs	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097ce:	431a      	orrs	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	431a      	orrs	r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097da:	ea42 0103 	orr.w	r1, r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d113      	bne.n	800981a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009804:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009818:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f022 0201 	bic.w	r2, r2, #1
 8009828:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	40013000 	.word	0x40013000
 800986c:	40003800 	.word	0x40003800
 8009870:	40003c00 	.word	0x40003c00

08009874 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009880:	095b      	lsrs	r3, r3, #5
 8009882:	3301      	adds	r3, #1
 8009884:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	3301      	adds	r3, #1
 800988c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	3307      	adds	r3, #7
 8009892:	08db      	lsrs	r3, r3, #3
 8009894:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	fb02 f303 	mul.w	r3, r2, r3
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e049      	b.n	8009950 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d106      	bne.n	80098d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7f7 fe4b 	bl	800156c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2202      	movs	r2, #2
 80098da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	3304      	adds	r3, #4
 80098e6:	4619      	mov	r1, r3
 80098e8:	4610      	mov	r0, r2
 80098ea:	f000 fbe9 	bl	800a0c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e049      	b.n	80099fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d106      	bne.n	8009984 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f7f7 fd8e 	bl	80014a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	3304      	adds	r3, #4
 8009994:	4619      	mov	r1, r3
 8009996:	4610      	mov	r0, r2
 8009998:	f000 fb92 	bl	800a0c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
	...

08009a08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d109      	bne.n	8009a2c <HAL_TIM_PWM_Start+0x24>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	bf14      	ite	ne
 8009a24:	2301      	movne	r3, #1
 8009a26:	2300      	moveq	r3, #0
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	e03c      	b.n	8009aa6 <HAL_TIM_PWM_Start+0x9e>
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2b04      	cmp	r3, #4
 8009a30:	d109      	bne.n	8009a46 <HAL_TIM_PWM_Start+0x3e>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	bf14      	ite	ne
 8009a3e:	2301      	movne	r3, #1
 8009a40:	2300      	moveq	r3, #0
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	e02f      	b.n	8009aa6 <HAL_TIM_PWM_Start+0x9e>
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	2b08      	cmp	r3, #8
 8009a4a:	d109      	bne.n	8009a60 <HAL_TIM_PWM_Start+0x58>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	bf14      	ite	ne
 8009a58:	2301      	movne	r3, #1
 8009a5a:	2300      	moveq	r3, #0
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	e022      	b.n	8009aa6 <HAL_TIM_PWM_Start+0x9e>
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	2b0c      	cmp	r3, #12
 8009a64:	d109      	bne.n	8009a7a <HAL_TIM_PWM_Start+0x72>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	bf14      	ite	ne
 8009a72:	2301      	movne	r3, #1
 8009a74:	2300      	moveq	r3, #0
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	e015      	b.n	8009aa6 <HAL_TIM_PWM_Start+0x9e>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b10      	cmp	r3, #16
 8009a7e:	d109      	bne.n	8009a94 <HAL_TIM_PWM_Start+0x8c>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	bf14      	ite	ne
 8009a8c:	2301      	movne	r3, #1
 8009a8e:	2300      	moveq	r3, #0
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	e008      	b.n	8009aa6 <HAL_TIM_PWM_Start+0x9e>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	bf14      	ite	ne
 8009aa0:	2301      	movne	r3, #1
 8009aa2:	2300      	moveq	r3, #0
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d001      	beq.n	8009aae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e0a1      	b.n	8009bf2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d104      	bne.n	8009abe <HAL_TIM_PWM_Start+0xb6>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009abc:	e023      	b.n	8009b06 <HAL_TIM_PWM_Start+0xfe>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d104      	bne.n	8009ace <HAL_TIM_PWM_Start+0xc6>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009acc:	e01b      	b.n	8009b06 <HAL_TIM_PWM_Start+0xfe>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2b08      	cmp	r3, #8
 8009ad2:	d104      	bne.n	8009ade <HAL_TIM_PWM_Start+0xd6>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009adc:	e013      	b.n	8009b06 <HAL_TIM_PWM_Start+0xfe>
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2b0c      	cmp	r3, #12
 8009ae2:	d104      	bne.n	8009aee <HAL_TIM_PWM_Start+0xe6>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009aec:	e00b      	b.n	8009b06 <HAL_TIM_PWM_Start+0xfe>
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b10      	cmp	r3, #16
 8009af2:	d104      	bne.n	8009afe <HAL_TIM_PWM_Start+0xf6>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2202      	movs	r2, #2
 8009af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009afc:	e003      	b.n	8009b06 <HAL_TIM_PWM_Start+0xfe>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2202      	movs	r2, #2
 8009b02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 fe4c 	bl	800a7ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a38      	ldr	r2, [pc, #224]	@ (8009bfc <HAL_TIM_PWM_Start+0x1f4>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d013      	beq.n	8009b46 <HAL_TIM_PWM_Start+0x13e>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a37      	ldr	r2, [pc, #220]	@ (8009c00 <HAL_TIM_PWM_Start+0x1f8>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d00e      	beq.n	8009b46 <HAL_TIM_PWM_Start+0x13e>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a35      	ldr	r2, [pc, #212]	@ (8009c04 <HAL_TIM_PWM_Start+0x1fc>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d009      	beq.n	8009b46 <HAL_TIM_PWM_Start+0x13e>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a34      	ldr	r2, [pc, #208]	@ (8009c08 <HAL_TIM_PWM_Start+0x200>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d004      	beq.n	8009b46 <HAL_TIM_PWM_Start+0x13e>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a32      	ldr	r2, [pc, #200]	@ (8009c0c <HAL_TIM_PWM_Start+0x204>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d101      	bne.n	8009b4a <HAL_TIM_PWM_Start+0x142>
 8009b46:	2301      	movs	r3, #1
 8009b48:	e000      	b.n	8009b4c <HAL_TIM_PWM_Start+0x144>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d007      	beq.n	8009b60 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009b5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a25      	ldr	r2, [pc, #148]	@ (8009bfc <HAL_TIM_PWM_Start+0x1f4>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d022      	beq.n	8009bb0 <HAL_TIM_PWM_Start+0x1a8>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b72:	d01d      	beq.n	8009bb0 <HAL_TIM_PWM_Start+0x1a8>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a25      	ldr	r2, [pc, #148]	@ (8009c10 <HAL_TIM_PWM_Start+0x208>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d018      	beq.n	8009bb0 <HAL_TIM_PWM_Start+0x1a8>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a24      	ldr	r2, [pc, #144]	@ (8009c14 <HAL_TIM_PWM_Start+0x20c>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d013      	beq.n	8009bb0 <HAL_TIM_PWM_Start+0x1a8>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a22      	ldr	r2, [pc, #136]	@ (8009c18 <HAL_TIM_PWM_Start+0x210>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d00e      	beq.n	8009bb0 <HAL_TIM_PWM_Start+0x1a8>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a1a      	ldr	r2, [pc, #104]	@ (8009c00 <HAL_TIM_PWM_Start+0x1f8>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d009      	beq.n	8009bb0 <HAL_TIM_PWM_Start+0x1a8>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8009c1c <HAL_TIM_PWM_Start+0x214>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d004      	beq.n	8009bb0 <HAL_TIM_PWM_Start+0x1a8>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a16      	ldr	r2, [pc, #88]	@ (8009c04 <HAL_TIM_PWM_Start+0x1fc>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d115      	bne.n	8009bdc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	689a      	ldr	r2, [r3, #8]
 8009bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8009c20 <HAL_TIM_PWM_Start+0x218>)
 8009bb8:	4013      	ands	r3, r2
 8009bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b06      	cmp	r3, #6
 8009bc0:	d015      	beq.n	8009bee <HAL_TIM_PWM_Start+0x1e6>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bc8:	d011      	beq.n	8009bee <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f042 0201 	orr.w	r2, r2, #1
 8009bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bda:	e008      	b.n	8009bee <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f042 0201 	orr.w	r2, r2, #1
 8009bea:	601a      	str	r2, [r3, #0]
 8009bec:	e000      	b.n	8009bf0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	40010000 	.word	0x40010000
 8009c00:	40010400 	.word	0x40010400
 8009c04:	40014000 	.word	0x40014000
 8009c08:	40014400 	.word	0x40014400
 8009c0c:	40014800 	.word	0x40014800
 8009c10:	40000400 	.word	0x40000400
 8009c14:	40000800 	.word	0x40000800
 8009c18:	40000c00 	.word	0x40000c00
 8009c1c:	40001800 	.word	0x40001800
 8009c20:	00010007 	.word	0x00010007

08009c24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	f003 0302 	and.w	r3, r3, #2
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d020      	beq.n	8009c88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f003 0302 	and.w	r3, r3, #2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d01b      	beq.n	8009c88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f06f 0202 	mvn.w	r2, #2
 8009c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	f003 0303 	and.w	r3, r3, #3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d003      	beq.n	8009c76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fa08 	bl	800a084 <HAL_TIM_IC_CaptureCallback>
 8009c74:	e005      	b.n	8009c82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f9fa 	bl	800a070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fa0b 	bl	800a098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f003 0304 	and.w	r3, r3, #4
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d020      	beq.n	8009cd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f003 0304 	and.w	r3, r3, #4
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d01b      	beq.n	8009cd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f06f 0204 	mvn.w	r2, #4
 8009ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2202      	movs	r2, #2
 8009caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	699b      	ldr	r3, [r3, #24]
 8009cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d003      	beq.n	8009cc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f9e2 	bl	800a084 <HAL_TIM_IC_CaptureCallback>
 8009cc0:	e005      	b.n	8009cce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f9d4 	bl	800a070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f9e5 	bl	800a098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	f003 0308 	and.w	r3, r3, #8
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d020      	beq.n	8009d20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f003 0308 	and.w	r3, r3, #8
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d01b      	beq.n	8009d20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f06f 0208 	mvn.w	r2, #8
 8009cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2204      	movs	r2, #4
 8009cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	f003 0303 	and.w	r3, r3, #3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f9bc 	bl	800a084 <HAL_TIM_IC_CaptureCallback>
 8009d0c:	e005      	b.n	8009d1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f9ae 	bl	800a070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 f9bf 	bl	800a098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	f003 0310 	and.w	r3, r3, #16
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d020      	beq.n	8009d6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f003 0310 	and.w	r3, r3, #16
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d01b      	beq.n	8009d6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f06f 0210 	mvn.w	r2, #16
 8009d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2208      	movs	r2, #8
 8009d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	69db      	ldr	r3, [r3, #28]
 8009d4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d003      	beq.n	8009d5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f996 	bl	800a084 <HAL_TIM_IC_CaptureCallback>
 8009d58:	e005      	b.n	8009d66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f988 	bl	800a070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f999 	bl	800a098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	f003 0301 	and.w	r3, r3, #1
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00c      	beq.n	8009d90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f003 0301 	and.w	r3, r3, #1
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d007      	beq.n	8009d90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f06f 0201 	mvn.w	r2, #1
 8009d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f966 	bl	800a05c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d104      	bne.n	8009da4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00c      	beq.n	8009dbe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d007      	beq.n	8009dbe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fe33 	bl	800aa24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00c      	beq.n	8009de2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d007      	beq.n	8009de2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fe2b 	bl	800aa38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00c      	beq.n	8009e06 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d007      	beq.n	8009e06 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f953 	bl	800a0ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	f003 0320 	and.w	r3, r3, #32
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00c      	beq.n	8009e2a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f003 0320 	and.w	r3, r3, #32
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d007      	beq.n	8009e2a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f06f 0220 	mvn.w	r2, #32
 8009e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fdf3 	bl	800aa10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e2a:	bf00      	nop
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
	...

08009e34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d101      	bne.n	8009e52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e4e:	2302      	movs	r3, #2
 8009e50:	e0ff      	b.n	800a052 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2b14      	cmp	r3, #20
 8009e5e:	f200 80f0 	bhi.w	800a042 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009e62:	a201      	add	r2, pc, #4	@ (adr r2, 8009e68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e68:	08009ebd 	.word	0x08009ebd
 8009e6c:	0800a043 	.word	0x0800a043
 8009e70:	0800a043 	.word	0x0800a043
 8009e74:	0800a043 	.word	0x0800a043
 8009e78:	08009efd 	.word	0x08009efd
 8009e7c:	0800a043 	.word	0x0800a043
 8009e80:	0800a043 	.word	0x0800a043
 8009e84:	0800a043 	.word	0x0800a043
 8009e88:	08009f3f 	.word	0x08009f3f
 8009e8c:	0800a043 	.word	0x0800a043
 8009e90:	0800a043 	.word	0x0800a043
 8009e94:	0800a043 	.word	0x0800a043
 8009e98:	08009f7f 	.word	0x08009f7f
 8009e9c:	0800a043 	.word	0x0800a043
 8009ea0:	0800a043 	.word	0x0800a043
 8009ea4:	0800a043 	.word	0x0800a043
 8009ea8:	08009fc1 	.word	0x08009fc1
 8009eac:	0800a043 	.word	0x0800a043
 8009eb0:	0800a043 	.word	0x0800a043
 8009eb4:	0800a043 	.word	0x0800a043
 8009eb8:	0800a001 	.word	0x0800a001
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68b9      	ldr	r1, [r7, #8]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 f99c 	bl	800a200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	699a      	ldr	r2, [r3, #24]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f042 0208 	orr.w	r2, r2, #8
 8009ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	699a      	ldr	r2, [r3, #24]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f022 0204 	bic.w	r2, r2, #4
 8009ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6999      	ldr	r1, [r3, #24]
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	691a      	ldr	r2, [r3, #16]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	619a      	str	r2, [r3, #24]
      break;
 8009efa:	e0a5      	b.n	800a048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68b9      	ldr	r1, [r7, #8]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 fa0c 	bl	800a320 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	699a      	ldr	r2, [r3, #24]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	699a      	ldr	r2, [r3, #24]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6999      	ldr	r1, [r3, #24]
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	021a      	lsls	r2, r3, #8
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	430a      	orrs	r2, r1
 8009f3a:	619a      	str	r2, [r3, #24]
      break;
 8009f3c:	e084      	b.n	800a048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	68b9      	ldr	r1, [r7, #8]
 8009f44:	4618      	mov	r0, r3
 8009f46:	f000 fa75 	bl	800a434 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	69da      	ldr	r2, [r3, #28]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f042 0208 	orr.w	r2, r2, #8
 8009f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	69da      	ldr	r2, [r3, #28]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f022 0204 	bic.w	r2, r2, #4
 8009f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	69d9      	ldr	r1, [r3, #28]
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	691a      	ldr	r2, [r3, #16]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	61da      	str	r2, [r3, #28]
      break;
 8009f7c:	e064      	b.n	800a048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68b9      	ldr	r1, [r7, #8]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 fadd 	bl	800a544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	69da      	ldr	r2, [r3, #28]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	69da      	ldr	r2, [r3, #28]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009fa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	69d9      	ldr	r1, [r3, #28]
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	021a      	lsls	r2, r3, #8
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	61da      	str	r2, [r3, #28]
      break;
 8009fbe:	e043      	b.n	800a048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68b9      	ldr	r1, [r7, #8]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 fb26 	bl	800a618 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f042 0208 	orr.w	r2, r2, #8
 8009fda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f022 0204 	bic.w	r2, r2, #4
 8009fea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	691a      	ldr	r2, [r3, #16]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009ffe:	e023      	b.n	800a048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	4618      	mov	r0, r3
 800a008:	f000 fb6a 	bl	800a6e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a01a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a02a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	021a      	lsls	r2, r3, #8
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	430a      	orrs	r2, r1
 800a03e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a040:	e002      	b.n	800a048 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	75fb      	strb	r3, [r7, #23]
      break;
 800a046:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a050:	7dfb      	ldrb	r3, [r7, #23]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3718      	adds	r7, #24
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop

0800a05c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a43      	ldr	r2, [pc, #268]	@ (800a1e0 <TIM_Base_SetConfig+0x120>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d013      	beq.n	800a100 <TIM_Base_SetConfig+0x40>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0de:	d00f      	beq.n	800a100 <TIM_Base_SetConfig+0x40>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a40      	ldr	r2, [pc, #256]	@ (800a1e4 <TIM_Base_SetConfig+0x124>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d00b      	beq.n	800a100 <TIM_Base_SetConfig+0x40>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a3f      	ldr	r2, [pc, #252]	@ (800a1e8 <TIM_Base_SetConfig+0x128>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d007      	beq.n	800a100 <TIM_Base_SetConfig+0x40>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a3e      	ldr	r2, [pc, #248]	@ (800a1ec <TIM_Base_SetConfig+0x12c>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d003      	beq.n	800a100 <TIM_Base_SetConfig+0x40>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a3d      	ldr	r2, [pc, #244]	@ (800a1f0 <TIM_Base_SetConfig+0x130>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d108      	bne.n	800a112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	4313      	orrs	r3, r2
 800a110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a32      	ldr	r2, [pc, #200]	@ (800a1e0 <TIM_Base_SetConfig+0x120>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d01f      	beq.n	800a15a <TIM_Base_SetConfig+0x9a>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a120:	d01b      	beq.n	800a15a <TIM_Base_SetConfig+0x9a>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a2f      	ldr	r2, [pc, #188]	@ (800a1e4 <TIM_Base_SetConfig+0x124>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d017      	beq.n	800a15a <TIM_Base_SetConfig+0x9a>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a2e      	ldr	r2, [pc, #184]	@ (800a1e8 <TIM_Base_SetConfig+0x128>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d013      	beq.n	800a15a <TIM_Base_SetConfig+0x9a>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a2d      	ldr	r2, [pc, #180]	@ (800a1ec <TIM_Base_SetConfig+0x12c>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d00f      	beq.n	800a15a <TIM_Base_SetConfig+0x9a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a2c      	ldr	r2, [pc, #176]	@ (800a1f0 <TIM_Base_SetConfig+0x130>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d00b      	beq.n	800a15a <TIM_Base_SetConfig+0x9a>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a2b      	ldr	r2, [pc, #172]	@ (800a1f4 <TIM_Base_SetConfig+0x134>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d007      	beq.n	800a15a <TIM_Base_SetConfig+0x9a>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a2a      	ldr	r2, [pc, #168]	@ (800a1f8 <TIM_Base_SetConfig+0x138>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d003      	beq.n	800a15a <TIM_Base_SetConfig+0x9a>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a29      	ldr	r2, [pc, #164]	@ (800a1fc <TIM_Base_SetConfig+0x13c>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d108      	bne.n	800a16c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	4313      	orrs	r3, r2
 800a16a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	695b      	ldr	r3, [r3, #20]
 800a176:	4313      	orrs	r3, r2
 800a178:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	689a      	ldr	r2, [r3, #8]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a14      	ldr	r2, [pc, #80]	@ (800a1e0 <TIM_Base_SetConfig+0x120>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d00f      	beq.n	800a1b2 <TIM_Base_SetConfig+0xf2>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a16      	ldr	r2, [pc, #88]	@ (800a1f0 <TIM_Base_SetConfig+0x130>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d00b      	beq.n	800a1b2 <TIM_Base_SetConfig+0xf2>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a15      	ldr	r2, [pc, #84]	@ (800a1f4 <TIM_Base_SetConfig+0x134>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d007      	beq.n	800a1b2 <TIM_Base_SetConfig+0xf2>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a14      	ldr	r2, [pc, #80]	@ (800a1f8 <TIM_Base_SetConfig+0x138>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d003      	beq.n	800a1b2 <TIM_Base_SetConfig+0xf2>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a13      	ldr	r2, [pc, #76]	@ (800a1fc <TIM_Base_SetConfig+0x13c>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d103      	bne.n	800a1ba <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	691a      	ldr	r2, [r3, #16]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f043 0204 	orr.w	r2, r3, #4
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	601a      	str	r2, [r3, #0]
}
 800a1d2:	bf00      	nop
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	40010000 	.word	0x40010000
 800a1e4:	40000400 	.word	0x40000400
 800a1e8:	40000800 	.word	0x40000800
 800a1ec:	40000c00 	.word	0x40000c00
 800a1f0:	40010400 	.word	0x40010400
 800a1f4:	40014000 	.word	0x40014000
 800a1f8:	40014400 	.word	0x40014400
 800a1fc:	40014800 	.word	0x40014800

0800a200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	f023 0201 	bic.w	r2, r3, #1
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	4b37      	ldr	r3, [pc, #220]	@ (800a308 <TIM_OC1_SetConfig+0x108>)
 800a22c:	4013      	ands	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f023 0303 	bic.w	r3, r3, #3
 800a236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	4313      	orrs	r3, r2
 800a240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	f023 0302 	bic.w	r3, r3, #2
 800a248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	4313      	orrs	r3, r2
 800a252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a2d      	ldr	r2, [pc, #180]	@ (800a30c <TIM_OC1_SetConfig+0x10c>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d00f      	beq.n	800a27c <TIM_OC1_SetConfig+0x7c>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a2c      	ldr	r2, [pc, #176]	@ (800a310 <TIM_OC1_SetConfig+0x110>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d00b      	beq.n	800a27c <TIM_OC1_SetConfig+0x7c>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a2b      	ldr	r2, [pc, #172]	@ (800a314 <TIM_OC1_SetConfig+0x114>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d007      	beq.n	800a27c <TIM_OC1_SetConfig+0x7c>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a2a      	ldr	r2, [pc, #168]	@ (800a318 <TIM_OC1_SetConfig+0x118>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d003      	beq.n	800a27c <TIM_OC1_SetConfig+0x7c>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a29      	ldr	r2, [pc, #164]	@ (800a31c <TIM_OC1_SetConfig+0x11c>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d10c      	bne.n	800a296 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f023 0308 	bic.w	r3, r3, #8
 800a282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	697a      	ldr	r2, [r7, #20]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	f023 0304 	bic.w	r3, r3, #4
 800a294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a1c      	ldr	r2, [pc, #112]	@ (800a30c <TIM_OC1_SetConfig+0x10c>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d00f      	beq.n	800a2be <TIM_OC1_SetConfig+0xbe>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a1b      	ldr	r2, [pc, #108]	@ (800a310 <TIM_OC1_SetConfig+0x110>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d00b      	beq.n	800a2be <TIM_OC1_SetConfig+0xbe>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a1a      	ldr	r2, [pc, #104]	@ (800a314 <TIM_OC1_SetConfig+0x114>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d007      	beq.n	800a2be <TIM_OC1_SetConfig+0xbe>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a19      	ldr	r2, [pc, #100]	@ (800a318 <TIM_OC1_SetConfig+0x118>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d003      	beq.n	800a2be <TIM_OC1_SetConfig+0xbe>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a18      	ldr	r2, [pc, #96]	@ (800a31c <TIM_OC1_SetConfig+0x11c>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d111      	bne.n	800a2e2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a2cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	693a      	ldr	r2, [r7, #16]
 800a2e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	621a      	str	r2, [r3, #32]
}
 800a2fc:	bf00      	nop
 800a2fe:	371c      	adds	r7, #28
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr
 800a308:	fffeff8f 	.word	0xfffeff8f
 800a30c:	40010000 	.word	0x40010000
 800a310:	40010400 	.word	0x40010400
 800a314:	40014000 	.word	0x40014000
 800a318:	40014400 	.word	0x40014400
 800a31c:	40014800 	.word	0x40014800

0800a320 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a1b      	ldr	r3, [r3, #32]
 800a32e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a1b      	ldr	r3, [r3, #32]
 800a334:	f023 0210 	bic.w	r2, r3, #16
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	4b34      	ldr	r3, [pc, #208]	@ (800a41c <TIM_OC2_SetConfig+0xfc>)
 800a34c:	4013      	ands	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	021b      	lsls	r3, r3, #8
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	4313      	orrs	r3, r2
 800a362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	f023 0320 	bic.w	r3, r3, #32
 800a36a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	011b      	lsls	r3, r3, #4
 800a372:	697a      	ldr	r2, [r7, #20]
 800a374:	4313      	orrs	r3, r2
 800a376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a29      	ldr	r2, [pc, #164]	@ (800a420 <TIM_OC2_SetConfig+0x100>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d003      	beq.n	800a388 <TIM_OC2_SetConfig+0x68>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a28      	ldr	r2, [pc, #160]	@ (800a424 <TIM_OC2_SetConfig+0x104>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d10d      	bne.n	800a3a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a38e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	011b      	lsls	r3, r3, #4
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	4313      	orrs	r3, r2
 800a39a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a1e      	ldr	r2, [pc, #120]	@ (800a420 <TIM_OC2_SetConfig+0x100>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d00f      	beq.n	800a3cc <TIM_OC2_SetConfig+0xac>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a1d      	ldr	r2, [pc, #116]	@ (800a424 <TIM_OC2_SetConfig+0x104>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d00b      	beq.n	800a3cc <TIM_OC2_SetConfig+0xac>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a1c      	ldr	r2, [pc, #112]	@ (800a428 <TIM_OC2_SetConfig+0x108>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d007      	beq.n	800a3cc <TIM_OC2_SetConfig+0xac>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a1b      	ldr	r2, [pc, #108]	@ (800a42c <TIM_OC2_SetConfig+0x10c>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d003      	beq.n	800a3cc <TIM_OC2_SetConfig+0xac>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a1a      	ldr	r2, [pc, #104]	@ (800a430 <TIM_OC2_SetConfig+0x110>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d113      	bne.n	800a3f4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a3d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a3da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	621a      	str	r2, [r3, #32]
}
 800a40e:	bf00      	nop
 800a410:	371c      	adds	r7, #28
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	feff8fff 	.word	0xfeff8fff
 800a420:	40010000 	.word	0x40010000
 800a424:	40010400 	.word	0x40010400
 800a428:	40014000 	.word	0x40014000
 800a42c:	40014400 	.word	0x40014400
 800a430:	40014800 	.word	0x40014800

0800a434 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a434:	b480      	push	{r7}
 800a436:	b087      	sub	sp, #28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a1b      	ldr	r3, [r3, #32]
 800a442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a1b      	ldr	r3, [r3, #32]
 800a448:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	4b33      	ldr	r3, [pc, #204]	@ (800a52c <TIM_OC3_SetConfig+0xf8>)
 800a460:	4013      	ands	r3, r2
 800a462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f023 0303 	bic.w	r3, r3, #3
 800a46a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	4313      	orrs	r3, r2
 800a474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a47c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	021b      	lsls	r3, r3, #8
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	4313      	orrs	r3, r2
 800a488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a28      	ldr	r2, [pc, #160]	@ (800a530 <TIM_OC3_SetConfig+0xfc>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d003      	beq.n	800a49a <TIM_OC3_SetConfig+0x66>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a27      	ldr	r2, [pc, #156]	@ (800a534 <TIM_OC3_SetConfig+0x100>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d10d      	bne.n	800a4b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a4a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	021b      	lsls	r3, r3, #8
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a4b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a530 <TIM_OC3_SetConfig+0xfc>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d00f      	beq.n	800a4de <TIM_OC3_SetConfig+0xaa>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4a1c      	ldr	r2, [pc, #112]	@ (800a534 <TIM_OC3_SetConfig+0x100>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d00b      	beq.n	800a4de <TIM_OC3_SetConfig+0xaa>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4a1b      	ldr	r2, [pc, #108]	@ (800a538 <TIM_OC3_SetConfig+0x104>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d007      	beq.n	800a4de <TIM_OC3_SetConfig+0xaa>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a1a      	ldr	r2, [pc, #104]	@ (800a53c <TIM_OC3_SetConfig+0x108>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d003      	beq.n	800a4de <TIM_OC3_SetConfig+0xaa>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a19      	ldr	r2, [pc, #100]	@ (800a540 <TIM_OC3_SetConfig+0x10c>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d113      	bne.n	800a506 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a4ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	011b      	lsls	r3, r3, #4
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	011b      	lsls	r3, r3, #4
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	4313      	orrs	r3, r2
 800a504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	685a      	ldr	r2, [r3, #4]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	697a      	ldr	r2, [r7, #20]
 800a51e:	621a      	str	r2, [r3, #32]
}
 800a520:	bf00      	nop
 800a522:	371c      	adds	r7, #28
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr
 800a52c:	fffeff8f 	.word	0xfffeff8f
 800a530:	40010000 	.word	0x40010000
 800a534:	40010400 	.word	0x40010400
 800a538:	40014000 	.word	0x40014000
 800a53c:	40014400 	.word	0x40014400
 800a540:	40014800 	.word	0x40014800

0800a544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a544:	b480      	push	{r7}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a1b      	ldr	r3, [r3, #32]
 800a558:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	69db      	ldr	r3, [r3, #28]
 800a56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	4b24      	ldr	r3, [pc, #144]	@ (800a600 <TIM_OC4_SetConfig+0xbc>)
 800a570:	4013      	ands	r3, r2
 800a572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	021b      	lsls	r3, r3, #8
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	4313      	orrs	r3, r2
 800a586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a58e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	031b      	lsls	r3, r3, #12
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	4313      	orrs	r3, r2
 800a59a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a19      	ldr	r2, [pc, #100]	@ (800a604 <TIM_OC4_SetConfig+0xc0>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d00f      	beq.n	800a5c4 <TIM_OC4_SetConfig+0x80>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a18      	ldr	r2, [pc, #96]	@ (800a608 <TIM_OC4_SetConfig+0xc4>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d00b      	beq.n	800a5c4 <TIM_OC4_SetConfig+0x80>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a17      	ldr	r2, [pc, #92]	@ (800a60c <TIM_OC4_SetConfig+0xc8>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d007      	beq.n	800a5c4 <TIM_OC4_SetConfig+0x80>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a16      	ldr	r2, [pc, #88]	@ (800a610 <TIM_OC4_SetConfig+0xcc>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d003      	beq.n	800a5c4 <TIM_OC4_SetConfig+0x80>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a15      	ldr	r2, [pc, #84]	@ (800a614 <TIM_OC4_SetConfig+0xd0>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d109      	bne.n	800a5d8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a5ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	695b      	ldr	r3, [r3, #20]
 800a5d0:	019b      	lsls	r3, r3, #6
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	621a      	str	r2, [r3, #32]
}
 800a5f2:	bf00      	nop
 800a5f4:	371c      	adds	r7, #28
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	feff8fff 	.word	0xfeff8fff
 800a604:	40010000 	.word	0x40010000
 800a608:	40010400 	.word	0x40010400
 800a60c:	40014000 	.word	0x40014000
 800a610:	40014400 	.word	0x40014400
 800a614:	40014800 	.word	0x40014800

0800a618 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a618:	b480      	push	{r7}
 800a61a:	b087      	sub	sp, #28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a1b      	ldr	r3, [r3, #32]
 800a62c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a63e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	4b21      	ldr	r3, [pc, #132]	@ (800a6c8 <TIM_OC5_SetConfig+0xb0>)
 800a644:	4013      	ands	r3, r2
 800a646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	4313      	orrs	r3, r2
 800a650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a658:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	041b      	lsls	r3, r3, #16
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	4313      	orrs	r3, r2
 800a664:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a18      	ldr	r2, [pc, #96]	@ (800a6cc <TIM_OC5_SetConfig+0xb4>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d00f      	beq.n	800a68e <TIM_OC5_SetConfig+0x76>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a17      	ldr	r2, [pc, #92]	@ (800a6d0 <TIM_OC5_SetConfig+0xb8>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d00b      	beq.n	800a68e <TIM_OC5_SetConfig+0x76>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a16      	ldr	r2, [pc, #88]	@ (800a6d4 <TIM_OC5_SetConfig+0xbc>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d007      	beq.n	800a68e <TIM_OC5_SetConfig+0x76>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a15      	ldr	r2, [pc, #84]	@ (800a6d8 <TIM_OC5_SetConfig+0xc0>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d003      	beq.n	800a68e <TIM_OC5_SetConfig+0x76>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a14      	ldr	r2, [pc, #80]	@ (800a6dc <TIM_OC5_SetConfig+0xc4>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d109      	bne.n	800a6a2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a694:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	695b      	ldr	r3, [r3, #20]
 800a69a:	021b      	lsls	r3, r3, #8
 800a69c:	697a      	ldr	r2, [r7, #20]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68fa      	ldr	r2, [r7, #12]
 800a6ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	685a      	ldr	r2, [r3, #4]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	621a      	str	r2, [r3, #32]
}
 800a6bc:	bf00      	nop
 800a6be:	371c      	adds	r7, #28
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr
 800a6c8:	fffeff8f 	.word	0xfffeff8f
 800a6cc:	40010000 	.word	0x40010000
 800a6d0:	40010400 	.word	0x40010400
 800a6d4:	40014000 	.word	0x40014000
 800a6d8:	40014400 	.word	0x40014400
 800a6dc:	40014800 	.word	0x40014800

0800a6e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a1b      	ldr	r3, [r3, #32]
 800a6f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	4b22      	ldr	r3, [pc, #136]	@ (800a794 <TIM_OC6_SetConfig+0xb4>)
 800a70c:	4013      	ands	r3, r2
 800a70e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	021b      	lsls	r3, r3, #8
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	4313      	orrs	r3, r2
 800a71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	051b      	lsls	r3, r3, #20
 800a72a:	693a      	ldr	r2, [r7, #16]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a19      	ldr	r2, [pc, #100]	@ (800a798 <TIM_OC6_SetConfig+0xb8>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d00f      	beq.n	800a758 <TIM_OC6_SetConfig+0x78>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a18      	ldr	r2, [pc, #96]	@ (800a79c <TIM_OC6_SetConfig+0xbc>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d00b      	beq.n	800a758 <TIM_OC6_SetConfig+0x78>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a17      	ldr	r2, [pc, #92]	@ (800a7a0 <TIM_OC6_SetConfig+0xc0>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d007      	beq.n	800a758 <TIM_OC6_SetConfig+0x78>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a16      	ldr	r2, [pc, #88]	@ (800a7a4 <TIM_OC6_SetConfig+0xc4>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d003      	beq.n	800a758 <TIM_OC6_SetConfig+0x78>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a15      	ldr	r2, [pc, #84]	@ (800a7a8 <TIM_OC6_SetConfig+0xc8>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d109      	bne.n	800a76c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a75e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	029b      	lsls	r3, r3, #10
 800a766:	697a      	ldr	r2, [r7, #20]
 800a768:	4313      	orrs	r3, r2
 800a76a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	621a      	str	r2, [r3, #32]
}
 800a786:	bf00      	nop
 800a788:	371c      	adds	r7, #28
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	feff8fff 	.word	0xfeff8fff
 800a798:	40010000 	.word	0x40010000
 800a79c:	40010400 	.word	0x40010400
 800a7a0:	40014000 	.word	0x40014000
 800a7a4:	40014400 	.word	0x40014400
 800a7a8:	40014800 	.word	0x40014800

0800a7ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	f003 031f 	and.w	r3, r3, #31
 800a7be:	2201      	movs	r2, #1
 800a7c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6a1a      	ldr	r2, [r3, #32]
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	43db      	mvns	r3, r3
 800a7ce:	401a      	ands	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6a1a      	ldr	r2, [r3, #32]
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f003 031f 	and.w	r3, r3, #31
 800a7de:	6879      	ldr	r1, [r7, #4]
 800a7e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7e4:	431a      	orrs	r2, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	621a      	str	r2, [r3, #32]
}
 800a7ea:	bf00      	nop
 800a7ec:	371c      	adds	r7, #28
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
	...

0800a7f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d101      	bne.n	800a810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a80c:	2302      	movs	r3, #2
 800a80e:	e06d      	b.n	800a8ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2202      	movs	r2, #2
 800a81c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a30      	ldr	r2, [pc, #192]	@ (800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d004      	beq.n	800a844 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a2f      	ldr	r2, [pc, #188]	@ (800a8fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d108      	bne.n	800a856 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a84a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	4313      	orrs	r3, r2
 800a854:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a85c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	4313      	orrs	r3, r2
 800a866:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a20      	ldr	r2, [pc, #128]	@ (800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d022      	beq.n	800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a882:	d01d      	beq.n	800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a1d      	ldr	r2, [pc, #116]	@ (800a900 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d018      	beq.n	800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a1c      	ldr	r2, [pc, #112]	@ (800a904 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d013      	beq.n	800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a1a      	ldr	r2, [pc, #104]	@ (800a908 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d00e      	beq.n	800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a15      	ldr	r2, [pc, #84]	@ (800a8fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d009      	beq.n	800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a16      	ldr	r2, [pc, #88]	@ (800a90c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d004      	beq.n	800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a15      	ldr	r2, [pc, #84]	@ (800a910 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d10c      	bne.n	800a8da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3714      	adds	r7, #20
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	40010000 	.word	0x40010000
 800a8fc:	40010400 	.word	0x40010400
 800a900:	40000400 	.word	0x40000400
 800a904:	40000800 	.word	0x40000800
 800a908:	40000c00 	.word	0x40000c00
 800a90c:	40001800 	.word	0x40001800
 800a910:	40014000 	.word	0x40014000

0800a914 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a91e:	2300      	movs	r3, #0
 800a920:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d101      	bne.n	800a930 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a92c:	2302      	movs	r3, #2
 800a92e:	e065      	b.n	800a9fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	4313      	orrs	r3, r2
 800a944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	4313      	orrs	r3, r2
 800a952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	4313      	orrs	r3, r2
 800a960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	695b      	ldr	r3, [r3, #20]
 800a988:	4313      	orrs	r3, r2
 800a98a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a996:	4313      	orrs	r3, r2
 800a998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	041b      	lsls	r3, r3, #16
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a16      	ldr	r2, [pc, #88]	@ (800aa08 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d004      	beq.n	800a9be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a14      	ldr	r2, [pc, #80]	@ (800aa0c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d115      	bne.n	800a9ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c8:	051b      	lsls	r3, r3, #20
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	69db      	ldr	r3, [r3, #28]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	6a1b      	ldr	r3, [r3, #32]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr
 800aa08:	40010000 	.word	0x40010000
 800aa0c:	40010400 	.word	0x40010400

0800aa10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d101      	bne.n	800aa5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e042      	b.n	800aae4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d106      	bne.n	800aa76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f7f6 fe7d 	bl	8001770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2224      	movs	r2, #36	@ 0x24
 800aa7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f022 0201 	bic.w	r2, r2, #1
 800aa8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d002      	beq.n	800aa9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fd90 	bl	800b5bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f825 	bl	800aaec <UART_SetConfig>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d101      	bne.n	800aaac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e01b      	b.n	800aae4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aaba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	689a      	ldr	r2, [r3, #8]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aaca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f042 0201 	orr.w	r2, r2, #1
 800aada:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fe0f 	bl	800b700 <UART_CheckIdleState>
 800aae2:	4603      	mov	r3, r0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aaec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aaf0:	b092      	sub	sp, #72	@ 0x48
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	689a      	ldr	r2, [r3, #8]
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	431a      	orrs	r2, r3
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	431a      	orrs	r2, r3
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	69db      	ldr	r3, [r3, #28]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	4bbe      	ldr	r3, [pc, #760]	@ (800ae14 <UART_SetConfig+0x328>)
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	6812      	ldr	r2, [r2, #0]
 800ab22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab24:	430b      	orrs	r3, r1
 800ab26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	68da      	ldr	r2, [r3, #12]
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	430a      	orrs	r2, r1
 800ab3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4ab3      	ldr	r2, [pc, #716]	@ (800ae18 <UART_SetConfig+0x32c>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d004      	beq.n	800ab58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	6a1b      	ldr	r3, [r3, #32]
 800ab52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab54:	4313      	orrs	r3, r2
 800ab56:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	689a      	ldr	r2, [r3, #8]
 800ab5e:	4baf      	ldr	r3, [pc, #700]	@ (800ae1c <UART_SetConfig+0x330>)
 800ab60:	4013      	ands	r3, r2
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	6812      	ldr	r2, [r2, #0]
 800ab66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab68:	430b      	orrs	r3, r1
 800ab6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab72:	f023 010f 	bic.w	r1, r3, #15
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	430a      	orrs	r2, r1
 800ab80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4aa6      	ldr	r2, [pc, #664]	@ (800ae20 <UART_SetConfig+0x334>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d177      	bne.n	800ac7c <UART_SetConfig+0x190>
 800ab8c:	4ba5      	ldr	r3, [pc, #660]	@ (800ae24 <UART_SetConfig+0x338>)
 800ab8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab94:	2b28      	cmp	r3, #40	@ 0x28
 800ab96:	d86d      	bhi.n	800ac74 <UART_SetConfig+0x188>
 800ab98:	a201      	add	r2, pc, #4	@ (adr r2, 800aba0 <UART_SetConfig+0xb4>)
 800ab9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9e:	bf00      	nop
 800aba0:	0800ac45 	.word	0x0800ac45
 800aba4:	0800ac75 	.word	0x0800ac75
 800aba8:	0800ac75 	.word	0x0800ac75
 800abac:	0800ac75 	.word	0x0800ac75
 800abb0:	0800ac75 	.word	0x0800ac75
 800abb4:	0800ac75 	.word	0x0800ac75
 800abb8:	0800ac75 	.word	0x0800ac75
 800abbc:	0800ac75 	.word	0x0800ac75
 800abc0:	0800ac4d 	.word	0x0800ac4d
 800abc4:	0800ac75 	.word	0x0800ac75
 800abc8:	0800ac75 	.word	0x0800ac75
 800abcc:	0800ac75 	.word	0x0800ac75
 800abd0:	0800ac75 	.word	0x0800ac75
 800abd4:	0800ac75 	.word	0x0800ac75
 800abd8:	0800ac75 	.word	0x0800ac75
 800abdc:	0800ac75 	.word	0x0800ac75
 800abe0:	0800ac55 	.word	0x0800ac55
 800abe4:	0800ac75 	.word	0x0800ac75
 800abe8:	0800ac75 	.word	0x0800ac75
 800abec:	0800ac75 	.word	0x0800ac75
 800abf0:	0800ac75 	.word	0x0800ac75
 800abf4:	0800ac75 	.word	0x0800ac75
 800abf8:	0800ac75 	.word	0x0800ac75
 800abfc:	0800ac75 	.word	0x0800ac75
 800ac00:	0800ac5d 	.word	0x0800ac5d
 800ac04:	0800ac75 	.word	0x0800ac75
 800ac08:	0800ac75 	.word	0x0800ac75
 800ac0c:	0800ac75 	.word	0x0800ac75
 800ac10:	0800ac75 	.word	0x0800ac75
 800ac14:	0800ac75 	.word	0x0800ac75
 800ac18:	0800ac75 	.word	0x0800ac75
 800ac1c:	0800ac75 	.word	0x0800ac75
 800ac20:	0800ac65 	.word	0x0800ac65
 800ac24:	0800ac75 	.word	0x0800ac75
 800ac28:	0800ac75 	.word	0x0800ac75
 800ac2c:	0800ac75 	.word	0x0800ac75
 800ac30:	0800ac75 	.word	0x0800ac75
 800ac34:	0800ac75 	.word	0x0800ac75
 800ac38:	0800ac75 	.word	0x0800ac75
 800ac3c:	0800ac75 	.word	0x0800ac75
 800ac40:	0800ac6d 	.word	0x0800ac6d
 800ac44:	2301      	movs	r3, #1
 800ac46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac4a:	e222      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ac4c:	2304      	movs	r3, #4
 800ac4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac52:	e21e      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ac54:	2308      	movs	r3, #8
 800ac56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac5a:	e21a      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ac5c:	2310      	movs	r3, #16
 800ac5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac62:	e216      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ac64:	2320      	movs	r3, #32
 800ac66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac6a:	e212      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ac6c:	2340      	movs	r3, #64	@ 0x40
 800ac6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac72:	e20e      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ac74:	2380      	movs	r3, #128	@ 0x80
 800ac76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac7a:	e20a      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a69      	ldr	r2, [pc, #420]	@ (800ae28 <UART_SetConfig+0x33c>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d130      	bne.n	800ace8 <UART_SetConfig+0x1fc>
 800ac86:	4b67      	ldr	r3, [pc, #412]	@ (800ae24 <UART_SetConfig+0x338>)
 800ac88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac8a:	f003 0307 	and.w	r3, r3, #7
 800ac8e:	2b05      	cmp	r3, #5
 800ac90:	d826      	bhi.n	800ace0 <UART_SetConfig+0x1f4>
 800ac92:	a201      	add	r2, pc, #4	@ (adr r2, 800ac98 <UART_SetConfig+0x1ac>)
 800ac94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac98:	0800acb1 	.word	0x0800acb1
 800ac9c:	0800acb9 	.word	0x0800acb9
 800aca0:	0800acc1 	.word	0x0800acc1
 800aca4:	0800acc9 	.word	0x0800acc9
 800aca8:	0800acd1 	.word	0x0800acd1
 800acac:	0800acd9 	.word	0x0800acd9
 800acb0:	2300      	movs	r3, #0
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb6:	e1ec      	b.n	800b092 <UART_SetConfig+0x5a6>
 800acb8:	2304      	movs	r3, #4
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acbe:	e1e8      	b.n	800b092 <UART_SetConfig+0x5a6>
 800acc0:	2308      	movs	r3, #8
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc6:	e1e4      	b.n	800b092 <UART_SetConfig+0x5a6>
 800acc8:	2310      	movs	r3, #16
 800acca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acce:	e1e0      	b.n	800b092 <UART_SetConfig+0x5a6>
 800acd0:	2320      	movs	r3, #32
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd6:	e1dc      	b.n	800b092 <UART_SetConfig+0x5a6>
 800acd8:	2340      	movs	r3, #64	@ 0x40
 800acda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acde:	e1d8      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ace0:	2380      	movs	r3, #128	@ 0x80
 800ace2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ace6:	e1d4      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a4f      	ldr	r2, [pc, #316]	@ (800ae2c <UART_SetConfig+0x340>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d130      	bne.n	800ad54 <UART_SetConfig+0x268>
 800acf2:	4b4c      	ldr	r3, [pc, #304]	@ (800ae24 <UART_SetConfig+0x338>)
 800acf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acf6:	f003 0307 	and.w	r3, r3, #7
 800acfa:	2b05      	cmp	r3, #5
 800acfc:	d826      	bhi.n	800ad4c <UART_SetConfig+0x260>
 800acfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ad04 <UART_SetConfig+0x218>)
 800ad00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad04:	0800ad1d 	.word	0x0800ad1d
 800ad08:	0800ad25 	.word	0x0800ad25
 800ad0c:	0800ad2d 	.word	0x0800ad2d
 800ad10:	0800ad35 	.word	0x0800ad35
 800ad14:	0800ad3d 	.word	0x0800ad3d
 800ad18:	0800ad45 	.word	0x0800ad45
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad22:	e1b6      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ad24:	2304      	movs	r3, #4
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2a:	e1b2      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ad2c:	2308      	movs	r3, #8
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad32:	e1ae      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ad34:	2310      	movs	r3, #16
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3a:	e1aa      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ad3c:	2320      	movs	r3, #32
 800ad3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad42:	e1a6      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ad44:	2340      	movs	r3, #64	@ 0x40
 800ad46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad4a:	e1a2      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ad4c:	2380      	movs	r3, #128	@ 0x80
 800ad4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad52:	e19e      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a35      	ldr	r2, [pc, #212]	@ (800ae30 <UART_SetConfig+0x344>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d130      	bne.n	800adc0 <UART_SetConfig+0x2d4>
 800ad5e:	4b31      	ldr	r3, [pc, #196]	@ (800ae24 <UART_SetConfig+0x338>)
 800ad60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad62:	f003 0307 	and.w	r3, r3, #7
 800ad66:	2b05      	cmp	r3, #5
 800ad68:	d826      	bhi.n	800adb8 <UART_SetConfig+0x2cc>
 800ad6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad70 <UART_SetConfig+0x284>)
 800ad6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad70:	0800ad89 	.word	0x0800ad89
 800ad74:	0800ad91 	.word	0x0800ad91
 800ad78:	0800ad99 	.word	0x0800ad99
 800ad7c:	0800ada1 	.word	0x0800ada1
 800ad80:	0800ada9 	.word	0x0800ada9
 800ad84:	0800adb1 	.word	0x0800adb1
 800ad88:	2300      	movs	r3, #0
 800ad8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8e:	e180      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ad90:	2304      	movs	r3, #4
 800ad92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad96:	e17c      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ad98:	2308      	movs	r3, #8
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9e:	e178      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ada0:	2310      	movs	r3, #16
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada6:	e174      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ada8:	2320      	movs	r3, #32
 800adaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adae:	e170      	b.n	800b092 <UART_SetConfig+0x5a6>
 800adb0:	2340      	movs	r3, #64	@ 0x40
 800adb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adb6:	e16c      	b.n	800b092 <UART_SetConfig+0x5a6>
 800adb8:	2380      	movs	r3, #128	@ 0x80
 800adba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adbe:	e168      	b.n	800b092 <UART_SetConfig+0x5a6>
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a1b      	ldr	r2, [pc, #108]	@ (800ae34 <UART_SetConfig+0x348>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d142      	bne.n	800ae50 <UART_SetConfig+0x364>
 800adca:	4b16      	ldr	r3, [pc, #88]	@ (800ae24 <UART_SetConfig+0x338>)
 800adcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adce:	f003 0307 	and.w	r3, r3, #7
 800add2:	2b05      	cmp	r3, #5
 800add4:	d838      	bhi.n	800ae48 <UART_SetConfig+0x35c>
 800add6:	a201      	add	r2, pc, #4	@ (adr r2, 800addc <UART_SetConfig+0x2f0>)
 800add8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800addc:	0800adf5 	.word	0x0800adf5
 800ade0:	0800adfd 	.word	0x0800adfd
 800ade4:	0800ae05 	.word	0x0800ae05
 800ade8:	0800ae0d 	.word	0x0800ae0d
 800adec:	0800ae39 	.word	0x0800ae39
 800adf0:	0800ae41 	.word	0x0800ae41
 800adf4:	2300      	movs	r3, #0
 800adf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfa:	e14a      	b.n	800b092 <UART_SetConfig+0x5a6>
 800adfc:	2304      	movs	r3, #4
 800adfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae02:	e146      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ae04:	2308      	movs	r3, #8
 800ae06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0a:	e142      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ae0c:	2310      	movs	r3, #16
 800ae0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae12:	e13e      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ae14:	cfff69f3 	.word	0xcfff69f3
 800ae18:	58000c00 	.word	0x58000c00
 800ae1c:	11fff4ff 	.word	0x11fff4ff
 800ae20:	40011000 	.word	0x40011000
 800ae24:	58024400 	.word	0x58024400
 800ae28:	40004400 	.word	0x40004400
 800ae2c:	40004800 	.word	0x40004800
 800ae30:	40004c00 	.word	0x40004c00
 800ae34:	40005000 	.word	0x40005000
 800ae38:	2320      	movs	r3, #32
 800ae3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae3e:	e128      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ae40:	2340      	movs	r3, #64	@ 0x40
 800ae42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae46:	e124      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ae48:	2380      	movs	r3, #128	@ 0x80
 800ae4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae4e:	e120      	b.n	800b092 <UART_SetConfig+0x5a6>
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4acb      	ldr	r2, [pc, #812]	@ (800b184 <UART_SetConfig+0x698>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d176      	bne.n	800af48 <UART_SetConfig+0x45c>
 800ae5a:	4bcb      	ldr	r3, [pc, #812]	@ (800b188 <UART_SetConfig+0x69c>)
 800ae5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae62:	2b28      	cmp	r3, #40	@ 0x28
 800ae64:	d86c      	bhi.n	800af40 <UART_SetConfig+0x454>
 800ae66:	a201      	add	r2, pc, #4	@ (adr r2, 800ae6c <UART_SetConfig+0x380>)
 800ae68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae6c:	0800af11 	.word	0x0800af11
 800ae70:	0800af41 	.word	0x0800af41
 800ae74:	0800af41 	.word	0x0800af41
 800ae78:	0800af41 	.word	0x0800af41
 800ae7c:	0800af41 	.word	0x0800af41
 800ae80:	0800af41 	.word	0x0800af41
 800ae84:	0800af41 	.word	0x0800af41
 800ae88:	0800af41 	.word	0x0800af41
 800ae8c:	0800af19 	.word	0x0800af19
 800ae90:	0800af41 	.word	0x0800af41
 800ae94:	0800af41 	.word	0x0800af41
 800ae98:	0800af41 	.word	0x0800af41
 800ae9c:	0800af41 	.word	0x0800af41
 800aea0:	0800af41 	.word	0x0800af41
 800aea4:	0800af41 	.word	0x0800af41
 800aea8:	0800af41 	.word	0x0800af41
 800aeac:	0800af21 	.word	0x0800af21
 800aeb0:	0800af41 	.word	0x0800af41
 800aeb4:	0800af41 	.word	0x0800af41
 800aeb8:	0800af41 	.word	0x0800af41
 800aebc:	0800af41 	.word	0x0800af41
 800aec0:	0800af41 	.word	0x0800af41
 800aec4:	0800af41 	.word	0x0800af41
 800aec8:	0800af41 	.word	0x0800af41
 800aecc:	0800af29 	.word	0x0800af29
 800aed0:	0800af41 	.word	0x0800af41
 800aed4:	0800af41 	.word	0x0800af41
 800aed8:	0800af41 	.word	0x0800af41
 800aedc:	0800af41 	.word	0x0800af41
 800aee0:	0800af41 	.word	0x0800af41
 800aee4:	0800af41 	.word	0x0800af41
 800aee8:	0800af41 	.word	0x0800af41
 800aeec:	0800af31 	.word	0x0800af31
 800aef0:	0800af41 	.word	0x0800af41
 800aef4:	0800af41 	.word	0x0800af41
 800aef8:	0800af41 	.word	0x0800af41
 800aefc:	0800af41 	.word	0x0800af41
 800af00:	0800af41 	.word	0x0800af41
 800af04:	0800af41 	.word	0x0800af41
 800af08:	0800af41 	.word	0x0800af41
 800af0c:	0800af39 	.word	0x0800af39
 800af10:	2301      	movs	r3, #1
 800af12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af16:	e0bc      	b.n	800b092 <UART_SetConfig+0x5a6>
 800af18:	2304      	movs	r3, #4
 800af1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af1e:	e0b8      	b.n	800b092 <UART_SetConfig+0x5a6>
 800af20:	2308      	movs	r3, #8
 800af22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af26:	e0b4      	b.n	800b092 <UART_SetConfig+0x5a6>
 800af28:	2310      	movs	r3, #16
 800af2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af2e:	e0b0      	b.n	800b092 <UART_SetConfig+0x5a6>
 800af30:	2320      	movs	r3, #32
 800af32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af36:	e0ac      	b.n	800b092 <UART_SetConfig+0x5a6>
 800af38:	2340      	movs	r3, #64	@ 0x40
 800af3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af3e:	e0a8      	b.n	800b092 <UART_SetConfig+0x5a6>
 800af40:	2380      	movs	r3, #128	@ 0x80
 800af42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af46:	e0a4      	b.n	800b092 <UART_SetConfig+0x5a6>
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a8f      	ldr	r2, [pc, #572]	@ (800b18c <UART_SetConfig+0x6a0>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d130      	bne.n	800afb4 <UART_SetConfig+0x4c8>
 800af52:	4b8d      	ldr	r3, [pc, #564]	@ (800b188 <UART_SetConfig+0x69c>)
 800af54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af56:	f003 0307 	and.w	r3, r3, #7
 800af5a:	2b05      	cmp	r3, #5
 800af5c:	d826      	bhi.n	800afac <UART_SetConfig+0x4c0>
 800af5e:	a201      	add	r2, pc, #4	@ (adr r2, 800af64 <UART_SetConfig+0x478>)
 800af60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af64:	0800af7d 	.word	0x0800af7d
 800af68:	0800af85 	.word	0x0800af85
 800af6c:	0800af8d 	.word	0x0800af8d
 800af70:	0800af95 	.word	0x0800af95
 800af74:	0800af9d 	.word	0x0800af9d
 800af78:	0800afa5 	.word	0x0800afa5
 800af7c:	2300      	movs	r3, #0
 800af7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af82:	e086      	b.n	800b092 <UART_SetConfig+0x5a6>
 800af84:	2304      	movs	r3, #4
 800af86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af8a:	e082      	b.n	800b092 <UART_SetConfig+0x5a6>
 800af8c:	2308      	movs	r3, #8
 800af8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af92:	e07e      	b.n	800b092 <UART_SetConfig+0x5a6>
 800af94:	2310      	movs	r3, #16
 800af96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9a:	e07a      	b.n	800b092 <UART_SetConfig+0x5a6>
 800af9c:	2320      	movs	r3, #32
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa2:	e076      	b.n	800b092 <UART_SetConfig+0x5a6>
 800afa4:	2340      	movs	r3, #64	@ 0x40
 800afa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afaa:	e072      	b.n	800b092 <UART_SetConfig+0x5a6>
 800afac:	2380      	movs	r3, #128	@ 0x80
 800afae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afb2:	e06e      	b.n	800b092 <UART_SetConfig+0x5a6>
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a75      	ldr	r2, [pc, #468]	@ (800b190 <UART_SetConfig+0x6a4>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d130      	bne.n	800b020 <UART_SetConfig+0x534>
 800afbe:	4b72      	ldr	r3, [pc, #456]	@ (800b188 <UART_SetConfig+0x69c>)
 800afc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afc2:	f003 0307 	and.w	r3, r3, #7
 800afc6:	2b05      	cmp	r3, #5
 800afc8:	d826      	bhi.n	800b018 <UART_SetConfig+0x52c>
 800afca:	a201      	add	r2, pc, #4	@ (adr r2, 800afd0 <UART_SetConfig+0x4e4>)
 800afcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd0:	0800afe9 	.word	0x0800afe9
 800afd4:	0800aff1 	.word	0x0800aff1
 800afd8:	0800aff9 	.word	0x0800aff9
 800afdc:	0800b001 	.word	0x0800b001
 800afe0:	0800b009 	.word	0x0800b009
 800afe4:	0800b011 	.word	0x0800b011
 800afe8:	2300      	movs	r3, #0
 800afea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afee:	e050      	b.n	800b092 <UART_SetConfig+0x5a6>
 800aff0:	2304      	movs	r3, #4
 800aff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff6:	e04c      	b.n	800b092 <UART_SetConfig+0x5a6>
 800aff8:	2308      	movs	r3, #8
 800affa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affe:	e048      	b.n	800b092 <UART_SetConfig+0x5a6>
 800b000:	2310      	movs	r3, #16
 800b002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b006:	e044      	b.n	800b092 <UART_SetConfig+0x5a6>
 800b008:	2320      	movs	r3, #32
 800b00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00e:	e040      	b.n	800b092 <UART_SetConfig+0x5a6>
 800b010:	2340      	movs	r3, #64	@ 0x40
 800b012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b016:	e03c      	b.n	800b092 <UART_SetConfig+0x5a6>
 800b018:	2380      	movs	r3, #128	@ 0x80
 800b01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b01e:	e038      	b.n	800b092 <UART_SetConfig+0x5a6>
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a5b      	ldr	r2, [pc, #364]	@ (800b194 <UART_SetConfig+0x6a8>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d130      	bne.n	800b08c <UART_SetConfig+0x5a0>
 800b02a:	4b57      	ldr	r3, [pc, #348]	@ (800b188 <UART_SetConfig+0x69c>)
 800b02c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b02e:	f003 0307 	and.w	r3, r3, #7
 800b032:	2b05      	cmp	r3, #5
 800b034:	d826      	bhi.n	800b084 <UART_SetConfig+0x598>
 800b036:	a201      	add	r2, pc, #4	@ (adr r2, 800b03c <UART_SetConfig+0x550>)
 800b038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03c:	0800b055 	.word	0x0800b055
 800b040:	0800b05d 	.word	0x0800b05d
 800b044:	0800b065 	.word	0x0800b065
 800b048:	0800b06d 	.word	0x0800b06d
 800b04c:	0800b075 	.word	0x0800b075
 800b050:	0800b07d 	.word	0x0800b07d
 800b054:	2302      	movs	r3, #2
 800b056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b05a:	e01a      	b.n	800b092 <UART_SetConfig+0x5a6>
 800b05c:	2304      	movs	r3, #4
 800b05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b062:	e016      	b.n	800b092 <UART_SetConfig+0x5a6>
 800b064:	2308      	movs	r3, #8
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b06a:	e012      	b.n	800b092 <UART_SetConfig+0x5a6>
 800b06c:	2310      	movs	r3, #16
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b072:	e00e      	b.n	800b092 <UART_SetConfig+0x5a6>
 800b074:	2320      	movs	r3, #32
 800b076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b07a:	e00a      	b.n	800b092 <UART_SetConfig+0x5a6>
 800b07c:	2340      	movs	r3, #64	@ 0x40
 800b07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b082:	e006      	b.n	800b092 <UART_SetConfig+0x5a6>
 800b084:	2380      	movs	r3, #128	@ 0x80
 800b086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b08a:	e002      	b.n	800b092 <UART_SetConfig+0x5a6>
 800b08c:	2380      	movs	r3, #128	@ 0x80
 800b08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a3f      	ldr	r2, [pc, #252]	@ (800b194 <UART_SetConfig+0x6a8>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	f040 80f8 	bne.w	800b28e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b09e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b0a2:	2b20      	cmp	r3, #32
 800b0a4:	dc46      	bgt.n	800b134 <UART_SetConfig+0x648>
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	f2c0 8082 	blt.w	800b1b0 <UART_SetConfig+0x6c4>
 800b0ac:	3b02      	subs	r3, #2
 800b0ae:	2b1e      	cmp	r3, #30
 800b0b0:	d87e      	bhi.n	800b1b0 <UART_SetConfig+0x6c4>
 800b0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b8 <UART_SetConfig+0x5cc>)
 800b0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b8:	0800b13b 	.word	0x0800b13b
 800b0bc:	0800b1b1 	.word	0x0800b1b1
 800b0c0:	0800b143 	.word	0x0800b143
 800b0c4:	0800b1b1 	.word	0x0800b1b1
 800b0c8:	0800b1b1 	.word	0x0800b1b1
 800b0cc:	0800b1b1 	.word	0x0800b1b1
 800b0d0:	0800b153 	.word	0x0800b153
 800b0d4:	0800b1b1 	.word	0x0800b1b1
 800b0d8:	0800b1b1 	.word	0x0800b1b1
 800b0dc:	0800b1b1 	.word	0x0800b1b1
 800b0e0:	0800b1b1 	.word	0x0800b1b1
 800b0e4:	0800b1b1 	.word	0x0800b1b1
 800b0e8:	0800b1b1 	.word	0x0800b1b1
 800b0ec:	0800b1b1 	.word	0x0800b1b1
 800b0f0:	0800b163 	.word	0x0800b163
 800b0f4:	0800b1b1 	.word	0x0800b1b1
 800b0f8:	0800b1b1 	.word	0x0800b1b1
 800b0fc:	0800b1b1 	.word	0x0800b1b1
 800b100:	0800b1b1 	.word	0x0800b1b1
 800b104:	0800b1b1 	.word	0x0800b1b1
 800b108:	0800b1b1 	.word	0x0800b1b1
 800b10c:	0800b1b1 	.word	0x0800b1b1
 800b110:	0800b1b1 	.word	0x0800b1b1
 800b114:	0800b1b1 	.word	0x0800b1b1
 800b118:	0800b1b1 	.word	0x0800b1b1
 800b11c:	0800b1b1 	.word	0x0800b1b1
 800b120:	0800b1b1 	.word	0x0800b1b1
 800b124:	0800b1b1 	.word	0x0800b1b1
 800b128:	0800b1b1 	.word	0x0800b1b1
 800b12c:	0800b1b1 	.word	0x0800b1b1
 800b130:	0800b1a3 	.word	0x0800b1a3
 800b134:	2b40      	cmp	r3, #64	@ 0x40
 800b136:	d037      	beq.n	800b1a8 <UART_SetConfig+0x6bc>
 800b138:	e03a      	b.n	800b1b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b13a:	f7fd fe55 	bl	8008de8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b13e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b140:	e03c      	b.n	800b1bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b146:	4618      	mov	r0, r3
 800b148:	f7fd fe64 	bl	8008e14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b150:	e034      	b.n	800b1bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b152:	f107 0318 	add.w	r3, r7, #24
 800b156:	4618      	mov	r0, r3
 800b158:	f7fd ffb0 	bl	80090bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b160:	e02c      	b.n	800b1bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b162:	4b09      	ldr	r3, [pc, #36]	@ (800b188 <UART_SetConfig+0x69c>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f003 0320 	and.w	r3, r3, #32
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d016      	beq.n	800b19c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b16e:	4b06      	ldr	r3, [pc, #24]	@ (800b188 <UART_SetConfig+0x69c>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	08db      	lsrs	r3, r3, #3
 800b174:	f003 0303 	and.w	r3, r3, #3
 800b178:	4a07      	ldr	r2, [pc, #28]	@ (800b198 <UART_SetConfig+0x6ac>)
 800b17a:	fa22 f303 	lsr.w	r3, r2, r3
 800b17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b180:	e01c      	b.n	800b1bc <UART_SetConfig+0x6d0>
 800b182:	bf00      	nop
 800b184:	40011400 	.word	0x40011400
 800b188:	58024400 	.word	0x58024400
 800b18c:	40007800 	.word	0x40007800
 800b190:	40007c00 	.word	0x40007c00
 800b194:	58000c00 	.word	0x58000c00
 800b198:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b19c:	4b9d      	ldr	r3, [pc, #628]	@ (800b414 <UART_SetConfig+0x928>)
 800b19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1a0:	e00c      	b.n	800b1bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b1a2:	4b9d      	ldr	r3, [pc, #628]	@ (800b418 <UART_SetConfig+0x92c>)
 800b1a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1a6:	e009      	b.n	800b1bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ae:	e005      	b.n	800b1bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b1ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b1bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f000 81de 	beq.w	800b580 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1c8:	4a94      	ldr	r2, [pc, #592]	@ (800b41c <UART_SetConfig+0x930>)
 800b1ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1d6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	685a      	ldr	r2, [r3, #4]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	005b      	lsls	r3, r3, #1
 800b1e0:	4413      	add	r3, r2
 800b1e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d305      	bcc.n	800b1f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d903      	bls.n	800b1fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b1fa:	e1c1      	b.n	800b580 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1fe:	2200      	movs	r2, #0
 800b200:	60bb      	str	r3, [r7, #8]
 800b202:	60fa      	str	r2, [r7, #12]
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b208:	4a84      	ldr	r2, [pc, #528]	@ (800b41c <UART_SetConfig+0x930>)
 800b20a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b20e:	b29b      	uxth	r3, r3
 800b210:	2200      	movs	r2, #0
 800b212:	603b      	str	r3, [r7, #0]
 800b214:	607a      	str	r2, [r7, #4]
 800b216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b21a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b21e:	f7f5 f85b 	bl	80002d8 <__aeabi_uldivmod>
 800b222:	4602      	mov	r2, r0
 800b224:	460b      	mov	r3, r1
 800b226:	4610      	mov	r0, r2
 800b228:	4619      	mov	r1, r3
 800b22a:	f04f 0200 	mov.w	r2, #0
 800b22e:	f04f 0300 	mov.w	r3, #0
 800b232:	020b      	lsls	r3, r1, #8
 800b234:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b238:	0202      	lsls	r2, r0, #8
 800b23a:	6979      	ldr	r1, [r7, #20]
 800b23c:	6849      	ldr	r1, [r1, #4]
 800b23e:	0849      	lsrs	r1, r1, #1
 800b240:	2000      	movs	r0, #0
 800b242:	460c      	mov	r4, r1
 800b244:	4605      	mov	r5, r0
 800b246:	eb12 0804 	adds.w	r8, r2, r4
 800b24a:	eb43 0905 	adc.w	r9, r3, r5
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	469a      	mov	sl, r3
 800b256:	4693      	mov	fp, r2
 800b258:	4652      	mov	r2, sl
 800b25a:	465b      	mov	r3, fp
 800b25c:	4640      	mov	r0, r8
 800b25e:	4649      	mov	r1, r9
 800b260:	f7f5 f83a 	bl	80002d8 <__aeabi_uldivmod>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	4613      	mov	r3, r2
 800b26a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b26e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b272:	d308      	bcc.n	800b286 <UART_SetConfig+0x79a>
 800b274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b276:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b27a:	d204      	bcs.n	800b286 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b282:	60da      	str	r2, [r3, #12]
 800b284:	e17c      	b.n	800b580 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b28c:	e178      	b.n	800b580 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	69db      	ldr	r3, [r3, #28]
 800b292:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b296:	f040 80c5 	bne.w	800b424 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b29a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b29e:	2b20      	cmp	r3, #32
 800b2a0:	dc48      	bgt.n	800b334 <UART_SetConfig+0x848>
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	db7b      	blt.n	800b39e <UART_SetConfig+0x8b2>
 800b2a6:	2b20      	cmp	r3, #32
 800b2a8:	d879      	bhi.n	800b39e <UART_SetConfig+0x8b2>
 800b2aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b2b0 <UART_SetConfig+0x7c4>)
 800b2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b0:	0800b33b 	.word	0x0800b33b
 800b2b4:	0800b343 	.word	0x0800b343
 800b2b8:	0800b39f 	.word	0x0800b39f
 800b2bc:	0800b39f 	.word	0x0800b39f
 800b2c0:	0800b34b 	.word	0x0800b34b
 800b2c4:	0800b39f 	.word	0x0800b39f
 800b2c8:	0800b39f 	.word	0x0800b39f
 800b2cc:	0800b39f 	.word	0x0800b39f
 800b2d0:	0800b35b 	.word	0x0800b35b
 800b2d4:	0800b39f 	.word	0x0800b39f
 800b2d8:	0800b39f 	.word	0x0800b39f
 800b2dc:	0800b39f 	.word	0x0800b39f
 800b2e0:	0800b39f 	.word	0x0800b39f
 800b2e4:	0800b39f 	.word	0x0800b39f
 800b2e8:	0800b39f 	.word	0x0800b39f
 800b2ec:	0800b39f 	.word	0x0800b39f
 800b2f0:	0800b36b 	.word	0x0800b36b
 800b2f4:	0800b39f 	.word	0x0800b39f
 800b2f8:	0800b39f 	.word	0x0800b39f
 800b2fc:	0800b39f 	.word	0x0800b39f
 800b300:	0800b39f 	.word	0x0800b39f
 800b304:	0800b39f 	.word	0x0800b39f
 800b308:	0800b39f 	.word	0x0800b39f
 800b30c:	0800b39f 	.word	0x0800b39f
 800b310:	0800b39f 	.word	0x0800b39f
 800b314:	0800b39f 	.word	0x0800b39f
 800b318:	0800b39f 	.word	0x0800b39f
 800b31c:	0800b39f 	.word	0x0800b39f
 800b320:	0800b39f 	.word	0x0800b39f
 800b324:	0800b39f 	.word	0x0800b39f
 800b328:	0800b39f 	.word	0x0800b39f
 800b32c:	0800b39f 	.word	0x0800b39f
 800b330:	0800b391 	.word	0x0800b391
 800b334:	2b40      	cmp	r3, #64	@ 0x40
 800b336:	d02e      	beq.n	800b396 <UART_SetConfig+0x8aa>
 800b338:	e031      	b.n	800b39e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b33a:	f7fc fb1f 	bl	800797c <HAL_RCC_GetPCLK1Freq>
 800b33e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b340:	e033      	b.n	800b3aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b342:	f7fc fb31 	bl	80079a8 <HAL_RCC_GetPCLK2Freq>
 800b346:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b348:	e02f      	b.n	800b3aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b34a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b34e:	4618      	mov	r0, r3
 800b350:	f7fd fd60 	bl	8008e14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b358:	e027      	b.n	800b3aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b35a:	f107 0318 	add.w	r3, r7, #24
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fd feac 	bl	80090bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b368:	e01f      	b.n	800b3aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b36a:	4b2d      	ldr	r3, [pc, #180]	@ (800b420 <UART_SetConfig+0x934>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 0320 	and.w	r3, r3, #32
 800b372:	2b00      	cmp	r3, #0
 800b374:	d009      	beq.n	800b38a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b376:	4b2a      	ldr	r3, [pc, #168]	@ (800b420 <UART_SetConfig+0x934>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	08db      	lsrs	r3, r3, #3
 800b37c:	f003 0303 	and.w	r3, r3, #3
 800b380:	4a24      	ldr	r2, [pc, #144]	@ (800b414 <UART_SetConfig+0x928>)
 800b382:	fa22 f303 	lsr.w	r3, r2, r3
 800b386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b388:	e00f      	b.n	800b3aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b38a:	4b22      	ldr	r3, [pc, #136]	@ (800b414 <UART_SetConfig+0x928>)
 800b38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b38e:	e00c      	b.n	800b3aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b390:	4b21      	ldr	r3, [pc, #132]	@ (800b418 <UART_SetConfig+0x92c>)
 800b392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b394:	e009      	b.n	800b3aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b39c:	e005      	b.n	800b3aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b3a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b3aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f000 80e7 	beq.w	800b580 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b6:	4a19      	ldr	r2, [pc, #100]	@ (800b41c <UART_SetConfig+0x930>)
 800b3b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3bc:	461a      	mov	r2, r3
 800b3be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3c4:	005a      	lsls	r2, r3, #1
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	085b      	lsrs	r3, r3, #1
 800b3cc:	441a      	add	r2, r3
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3da:	2b0f      	cmp	r3, #15
 800b3dc:	d916      	bls.n	800b40c <UART_SetConfig+0x920>
 800b3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3e4:	d212      	bcs.n	800b40c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	f023 030f 	bic.w	r3, r3, #15
 800b3ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f2:	085b      	lsrs	r3, r3, #1
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	f003 0307 	and.w	r3, r3, #7
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b3fe:	4313      	orrs	r3, r2
 800b400:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b408:	60da      	str	r2, [r3, #12]
 800b40a:	e0b9      	b.n	800b580 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b412:	e0b5      	b.n	800b580 <UART_SetConfig+0xa94>
 800b414:	03d09000 	.word	0x03d09000
 800b418:	003d0900 	.word	0x003d0900
 800b41c:	0800fe08 	.word	0x0800fe08
 800b420:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b424:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b428:	2b20      	cmp	r3, #32
 800b42a:	dc49      	bgt.n	800b4c0 <UART_SetConfig+0x9d4>
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	db7c      	blt.n	800b52a <UART_SetConfig+0xa3e>
 800b430:	2b20      	cmp	r3, #32
 800b432:	d87a      	bhi.n	800b52a <UART_SetConfig+0xa3e>
 800b434:	a201      	add	r2, pc, #4	@ (adr r2, 800b43c <UART_SetConfig+0x950>)
 800b436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43a:	bf00      	nop
 800b43c:	0800b4c7 	.word	0x0800b4c7
 800b440:	0800b4cf 	.word	0x0800b4cf
 800b444:	0800b52b 	.word	0x0800b52b
 800b448:	0800b52b 	.word	0x0800b52b
 800b44c:	0800b4d7 	.word	0x0800b4d7
 800b450:	0800b52b 	.word	0x0800b52b
 800b454:	0800b52b 	.word	0x0800b52b
 800b458:	0800b52b 	.word	0x0800b52b
 800b45c:	0800b4e7 	.word	0x0800b4e7
 800b460:	0800b52b 	.word	0x0800b52b
 800b464:	0800b52b 	.word	0x0800b52b
 800b468:	0800b52b 	.word	0x0800b52b
 800b46c:	0800b52b 	.word	0x0800b52b
 800b470:	0800b52b 	.word	0x0800b52b
 800b474:	0800b52b 	.word	0x0800b52b
 800b478:	0800b52b 	.word	0x0800b52b
 800b47c:	0800b4f7 	.word	0x0800b4f7
 800b480:	0800b52b 	.word	0x0800b52b
 800b484:	0800b52b 	.word	0x0800b52b
 800b488:	0800b52b 	.word	0x0800b52b
 800b48c:	0800b52b 	.word	0x0800b52b
 800b490:	0800b52b 	.word	0x0800b52b
 800b494:	0800b52b 	.word	0x0800b52b
 800b498:	0800b52b 	.word	0x0800b52b
 800b49c:	0800b52b 	.word	0x0800b52b
 800b4a0:	0800b52b 	.word	0x0800b52b
 800b4a4:	0800b52b 	.word	0x0800b52b
 800b4a8:	0800b52b 	.word	0x0800b52b
 800b4ac:	0800b52b 	.word	0x0800b52b
 800b4b0:	0800b52b 	.word	0x0800b52b
 800b4b4:	0800b52b 	.word	0x0800b52b
 800b4b8:	0800b52b 	.word	0x0800b52b
 800b4bc:	0800b51d 	.word	0x0800b51d
 800b4c0:	2b40      	cmp	r3, #64	@ 0x40
 800b4c2:	d02e      	beq.n	800b522 <UART_SetConfig+0xa36>
 800b4c4:	e031      	b.n	800b52a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4c6:	f7fc fa59 	bl	800797c <HAL_RCC_GetPCLK1Freq>
 800b4ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b4cc:	e033      	b.n	800b536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4ce:	f7fc fa6b 	bl	80079a8 <HAL_RCC_GetPCLK2Freq>
 800b4d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b4d4:	e02f      	b.n	800b536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fd fc9a 	bl	8008e14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4e4:	e027      	b.n	800b536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4e6:	f107 0318 	add.w	r3, r7, #24
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fd fde6 	bl	80090bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4f4:	e01f      	b.n	800b536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4f6:	4b2d      	ldr	r3, [pc, #180]	@ (800b5ac <UART_SetConfig+0xac0>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 0320 	and.w	r3, r3, #32
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d009      	beq.n	800b516 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b502:	4b2a      	ldr	r3, [pc, #168]	@ (800b5ac <UART_SetConfig+0xac0>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	08db      	lsrs	r3, r3, #3
 800b508:	f003 0303 	and.w	r3, r3, #3
 800b50c:	4a28      	ldr	r2, [pc, #160]	@ (800b5b0 <UART_SetConfig+0xac4>)
 800b50e:	fa22 f303 	lsr.w	r3, r2, r3
 800b512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b514:	e00f      	b.n	800b536 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b516:	4b26      	ldr	r3, [pc, #152]	@ (800b5b0 <UART_SetConfig+0xac4>)
 800b518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b51a:	e00c      	b.n	800b536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b51c:	4b25      	ldr	r3, [pc, #148]	@ (800b5b4 <UART_SetConfig+0xac8>)
 800b51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b520:	e009      	b.n	800b536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b528:	e005      	b.n	800b536 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b52a:	2300      	movs	r3, #0
 800b52c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b52e:	2301      	movs	r3, #1
 800b530:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b534:	bf00      	nop
    }

    if (pclk != 0U)
 800b536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d021      	beq.n	800b580 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b540:	4a1d      	ldr	r2, [pc, #116]	@ (800b5b8 <UART_SetConfig+0xacc>)
 800b542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b546:	461a      	mov	r2, r3
 800b548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b54a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	085b      	lsrs	r3, r3, #1
 800b554:	441a      	add	r2, r3
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b55e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b562:	2b0f      	cmp	r3, #15
 800b564:	d909      	bls.n	800b57a <UART_SetConfig+0xa8e>
 800b566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b56c:	d205      	bcs.n	800b57a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b570:	b29a      	uxth	r2, r3
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	60da      	str	r2, [r3, #12]
 800b578:	e002      	b.n	800b580 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	2201      	movs	r2, #1
 800b584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	2200      	movs	r2, #0
 800b594:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2200      	movs	r2, #0
 800b59a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b59c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3748      	adds	r7, #72	@ 0x48
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5aa:	bf00      	nop
 800b5ac:	58024400 	.word	0x58024400
 800b5b0:	03d09000 	.word	0x03d09000
 800b5b4:	003d0900 	.word	0x003d0900
 800b5b8:	0800fe08 	.word	0x0800fe08

0800b5bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5c8:	f003 0308 	and.w	r3, r3, #8
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00a      	beq.n	800b5e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	430a      	orrs	r2, r1
 800b5e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ea:	f003 0301 	and.w	r3, r3, #1
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d00a      	beq.n	800b608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	430a      	orrs	r2, r1
 800b606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b60c:	f003 0302 	and.w	r3, r3, #2
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00a      	beq.n	800b62a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	430a      	orrs	r2, r1
 800b628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b62e:	f003 0304 	and.w	r3, r3, #4
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00a      	beq.n	800b64c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	430a      	orrs	r2, r1
 800b64a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b650:	f003 0310 	and.w	r3, r3, #16
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00a      	beq.n	800b66e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	430a      	orrs	r2, r1
 800b66c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b672:	f003 0320 	and.w	r3, r3, #32
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00a      	beq.n	800b690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	430a      	orrs	r2, r1
 800b68e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d01a      	beq.n	800b6d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	430a      	orrs	r2, r1
 800b6b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6ba:	d10a      	bne.n	800b6d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	430a      	orrs	r2, r1
 800b6d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00a      	beq.n	800b6f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	430a      	orrs	r2, r1
 800b6f2:	605a      	str	r2, [r3, #4]
  }
}
 800b6f4:	bf00      	nop
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr

0800b700 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b098      	sub	sp, #96	@ 0x60
 800b704:	af02      	add	r7, sp, #8
 800b706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b710:	f7f6 fa6e 	bl	8001bf0 <HAL_GetTick>
 800b714:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 0308 	and.w	r3, r3, #8
 800b720:	2b08      	cmp	r3, #8
 800b722:	d12f      	bne.n	800b784 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b724:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b728:	9300      	str	r3, [sp, #0]
 800b72a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b72c:	2200      	movs	r2, #0
 800b72e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f88e 	bl	800b854 <UART_WaitOnFlagUntilTimeout>
 800b738:	4603      	mov	r3, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d022      	beq.n	800b784 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b746:	e853 3f00 	ldrex	r3, [r3]
 800b74a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b74e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b752:	653b      	str	r3, [r7, #80]	@ 0x50
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	461a      	mov	r2, r3
 800b75a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b75c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b75e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b760:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b762:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b764:	e841 2300 	strex	r3, r2, [r1]
 800b768:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b76a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1e6      	bne.n	800b73e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2220      	movs	r2, #32
 800b774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b780:	2303      	movs	r3, #3
 800b782:	e063      	b.n	800b84c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f003 0304 	and.w	r3, r3, #4
 800b78e:	2b04      	cmp	r3, #4
 800b790:	d149      	bne.n	800b826 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b792:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b79a:	2200      	movs	r2, #0
 800b79c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f857 	bl	800b854 <UART_WaitOnFlagUntilTimeout>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d03c      	beq.n	800b826 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b4:	e853 3f00 	ldrex	r3, [r3]
 800b7b8:	623b      	str	r3, [r7, #32]
   return(result);
 800b7ba:	6a3b      	ldr	r3, [r7, #32]
 800b7bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b7c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7d2:	e841 2300 	strex	r3, r2, [r1]
 800b7d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1e6      	bne.n	800b7ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	3308      	adds	r3, #8
 800b7e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	e853 3f00 	ldrex	r3, [r3]
 800b7ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f023 0301 	bic.w	r3, r3, #1
 800b7f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	3308      	adds	r3, #8
 800b7fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7fe:	61fa      	str	r2, [r7, #28]
 800b800:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b802:	69b9      	ldr	r1, [r7, #24]
 800b804:	69fa      	ldr	r2, [r7, #28]
 800b806:	e841 2300 	strex	r3, r2, [r1]
 800b80a:	617b      	str	r3, [r7, #20]
   return(result);
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1e5      	bne.n	800b7de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2220      	movs	r2, #32
 800b816:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b822:	2303      	movs	r3, #3
 800b824:	e012      	b.n	800b84c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2220      	movs	r2, #32
 800b82a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2220      	movs	r2, #32
 800b832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b84a:	2300      	movs	r3, #0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3758      	adds	r7, #88	@ 0x58
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	603b      	str	r3, [r7, #0]
 800b860:	4613      	mov	r3, r2
 800b862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b864:	e04f      	b.n	800b906 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b86c:	d04b      	beq.n	800b906 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b86e:	f7f6 f9bf 	bl	8001bf0 <HAL_GetTick>
 800b872:	4602      	mov	r2, r0
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	69ba      	ldr	r2, [r7, #24]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d302      	bcc.n	800b884 <UART_WaitOnFlagUntilTimeout+0x30>
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d101      	bne.n	800b888 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b884:	2303      	movs	r3, #3
 800b886:	e04e      	b.n	800b926 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f003 0304 	and.w	r3, r3, #4
 800b892:	2b00      	cmp	r3, #0
 800b894:	d037      	beq.n	800b906 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	2b80      	cmp	r3, #128	@ 0x80
 800b89a:	d034      	beq.n	800b906 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	2b40      	cmp	r3, #64	@ 0x40
 800b8a0:	d031      	beq.n	800b906 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	69db      	ldr	r3, [r3, #28]
 800b8a8:	f003 0308 	and.w	r3, r3, #8
 800b8ac:	2b08      	cmp	r3, #8
 800b8ae:	d110      	bne.n	800b8d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2208      	movs	r2, #8
 800b8b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	f000 f839 	bl	800b930 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2208      	movs	r2, #8
 800b8c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e029      	b.n	800b926 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	69db      	ldr	r3, [r3, #28]
 800b8d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b8dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8e0:	d111      	bne.n	800b906 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b8ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f000 f81f 	bl	800b930 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2220      	movs	r2, #32
 800b8f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b902:	2303      	movs	r3, #3
 800b904:	e00f      	b.n	800b926 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	69da      	ldr	r2, [r3, #28]
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	4013      	ands	r3, r2
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	429a      	cmp	r2, r3
 800b914:	bf0c      	ite	eq
 800b916:	2301      	moveq	r3, #1
 800b918:	2300      	movne	r3, #0
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	461a      	mov	r2, r3
 800b91e:	79fb      	ldrb	r3, [r7, #7]
 800b920:	429a      	cmp	r2, r3
 800b922:	d0a0      	beq.n	800b866 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
	...

0800b930 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b930:	b480      	push	{r7}
 800b932:	b095      	sub	sp, #84	@ 0x54
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b93e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b940:	e853 3f00 	ldrex	r3, [r3]
 800b944:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b948:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b94c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	461a      	mov	r2, r3
 800b954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b956:	643b      	str	r3, [r7, #64]	@ 0x40
 800b958:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b95c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b95e:	e841 2300 	strex	r3, r2, [r1]
 800b962:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1e6      	bne.n	800b938 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	3308      	adds	r3, #8
 800b970:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b972:	6a3b      	ldr	r3, [r7, #32]
 800b974:	e853 3f00 	ldrex	r3, [r3]
 800b978:	61fb      	str	r3, [r7, #28]
   return(result);
 800b97a:	69fa      	ldr	r2, [r7, #28]
 800b97c:	4b1e      	ldr	r3, [pc, #120]	@ (800b9f8 <UART_EndRxTransfer+0xc8>)
 800b97e:	4013      	ands	r3, r2
 800b980:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3308      	adds	r3, #8
 800b988:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b98a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b98c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b990:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b992:	e841 2300 	strex	r3, r2, [r1]
 800b996:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1e5      	bne.n	800b96a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d118      	bne.n	800b9d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	e853 3f00 	ldrex	r3, [r3]
 800b9b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	f023 0310 	bic.w	r3, r3, #16
 800b9ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9c4:	61bb      	str	r3, [r7, #24]
 800b9c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c8:	6979      	ldr	r1, [r7, #20]
 800b9ca:	69ba      	ldr	r2, [r7, #24]
 800b9cc:	e841 2300 	strex	r3, r2, [r1]
 800b9d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1e6      	bne.n	800b9a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2220      	movs	r2, #32
 800b9dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b9ec:	bf00      	nop
 800b9ee:	3754      	adds	r7, #84	@ 0x54
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	effffffe 	.word	0xeffffffe

0800b9fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d101      	bne.n	800ba12 <HAL_UARTEx_DisableFifoMode+0x16>
 800ba0e:	2302      	movs	r3, #2
 800ba10:	e027      	b.n	800ba62 <HAL_UARTEx_DisableFifoMode+0x66>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2201      	movs	r2, #1
 800ba16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2224      	movs	r2, #36	@ 0x24
 800ba1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f022 0201 	bic.w	r2, r2, #1
 800ba38:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ba40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2220      	movs	r2, #32
 800ba54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3714      	adds	r7, #20
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d101      	bne.n	800ba86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba82:	2302      	movs	r3, #2
 800ba84:	e02d      	b.n	800bae2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2224      	movs	r2, #36	@ 0x24
 800ba92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f022 0201 	bic.w	r2, r2, #1
 800baac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	683a      	ldr	r2, [r7, #0]
 800babe:	430a      	orrs	r2, r1
 800bac0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f850 	bl	800bb68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2220      	movs	r2, #32
 800bad4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b084      	sub	sp, #16
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d101      	bne.n	800bb02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bafe:	2302      	movs	r3, #2
 800bb00:	e02d      	b.n	800bb5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2224      	movs	r2, #36	@ 0x24
 800bb0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f022 0201 	bic.w	r2, r2, #1
 800bb28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	430a      	orrs	r2, r1
 800bb3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f812 	bl	800bb68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2220      	movs	r2, #32
 800bb50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
	...

0800bb68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b085      	sub	sp, #20
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d108      	bne.n	800bb8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb88:	e031      	b.n	800bbee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb8a:	2310      	movs	r3, #16
 800bb8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb8e:	2310      	movs	r3, #16
 800bb90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	0e5b      	lsrs	r3, r3, #25
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	f003 0307 	and.w	r3, r3, #7
 800bba0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	0f5b      	lsrs	r3, r3, #29
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	f003 0307 	and.w	r3, r3, #7
 800bbb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bbb2:	7bbb      	ldrb	r3, [r7, #14]
 800bbb4:	7b3a      	ldrb	r2, [r7, #12]
 800bbb6:	4911      	ldr	r1, [pc, #68]	@ (800bbfc <UARTEx_SetNbDataToProcess+0x94>)
 800bbb8:	5c8a      	ldrb	r2, [r1, r2]
 800bbba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bbbe:	7b3a      	ldrb	r2, [r7, #12]
 800bbc0:	490f      	ldr	r1, [pc, #60]	@ (800bc00 <UARTEx_SetNbDataToProcess+0x98>)
 800bbc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bbc4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
 800bbd2:	7b7a      	ldrb	r2, [r7, #13]
 800bbd4:	4909      	ldr	r1, [pc, #36]	@ (800bbfc <UARTEx_SetNbDataToProcess+0x94>)
 800bbd6:	5c8a      	ldrb	r2, [r1, r2]
 800bbd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bbdc:	7b7a      	ldrb	r2, [r7, #13]
 800bbde:	4908      	ldr	r1, [pc, #32]	@ (800bc00 <UARTEx_SetNbDataToProcess+0x98>)
 800bbe0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bbe2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bbee:	bf00      	nop
 800bbf0:	3714      	adds	r7, #20
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr
 800bbfa:	bf00      	nop
 800bbfc:	0800fe20 	.word	0x0800fe20
 800bc00:	0800fe28 	.word	0x0800fe28

0800bc04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bc04:	b084      	sub	sp, #16
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b084      	sub	sp, #16
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	f107 001c 	add.w	r0, r7, #28
 800bc12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc16:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d121      	bne.n	800bc62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	68da      	ldr	r2, [r3, #12]
 800bc2e:	4b2c      	ldr	r3, [pc, #176]	@ (800bce0 <USB_CoreInit+0xdc>)
 800bc30:	4013      	ands	r3, r2
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bc42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d105      	bne.n	800bc56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	68db      	ldr	r3, [r3, #12]
 800bc4e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f001 fafa 	bl	800d250 <USB_CoreReset>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	73fb      	strb	r3, [r7, #15]
 800bc60:	e01b      	b.n	800bc9a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f001 faee 	bl	800d250 <USB_CoreReset>
 800bc74:	4603      	mov	r3, r0
 800bc76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bc78:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d106      	bne.n	800bc8e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc84:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	639a      	str	r2, [r3, #56]	@ 0x38
 800bc8c:	e005      	b.n	800bc9a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc92:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bc9a:	7fbb      	ldrb	r3, [r7, #30]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d116      	bne.n	800bcce <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bca4:	b29a      	uxth	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bcae:	4b0d      	ldr	r3, [pc, #52]	@ (800bce4 <USB_CoreInit+0xe0>)
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	f043 0206 	orr.w	r2, r3, #6
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	689b      	ldr	r3, [r3, #8]
 800bcc6:	f043 0220 	orr.w	r2, r3, #32
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bcce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3710      	adds	r7, #16
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bcda:	b004      	add	sp, #16
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	ffbdffbf 	.word	0xffbdffbf
 800bce4:	03ee0000 	.word	0x03ee0000

0800bce8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b087      	sub	sp, #28
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bcf6:	79fb      	ldrb	r3, [r7, #7]
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	d165      	bne.n	800bdc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	4a41      	ldr	r2, [pc, #260]	@ (800be04 <USB_SetTurnaroundTime+0x11c>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d906      	bls.n	800bd12 <USB_SetTurnaroundTime+0x2a>
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	4a40      	ldr	r2, [pc, #256]	@ (800be08 <USB_SetTurnaroundTime+0x120>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d202      	bcs.n	800bd12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bd0c:	230f      	movs	r3, #15
 800bd0e:	617b      	str	r3, [r7, #20]
 800bd10:	e062      	b.n	800bdd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	4a3c      	ldr	r2, [pc, #240]	@ (800be08 <USB_SetTurnaroundTime+0x120>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d306      	bcc.n	800bd28 <USB_SetTurnaroundTime+0x40>
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	4a3b      	ldr	r2, [pc, #236]	@ (800be0c <USB_SetTurnaroundTime+0x124>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d202      	bcs.n	800bd28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bd22:	230e      	movs	r3, #14
 800bd24:	617b      	str	r3, [r7, #20]
 800bd26:	e057      	b.n	800bdd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	4a38      	ldr	r2, [pc, #224]	@ (800be0c <USB_SetTurnaroundTime+0x124>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d306      	bcc.n	800bd3e <USB_SetTurnaroundTime+0x56>
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	4a37      	ldr	r2, [pc, #220]	@ (800be10 <USB_SetTurnaroundTime+0x128>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d202      	bcs.n	800bd3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bd38:	230d      	movs	r3, #13
 800bd3a:	617b      	str	r3, [r7, #20]
 800bd3c:	e04c      	b.n	800bdd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	4a33      	ldr	r2, [pc, #204]	@ (800be10 <USB_SetTurnaroundTime+0x128>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d306      	bcc.n	800bd54 <USB_SetTurnaroundTime+0x6c>
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	4a32      	ldr	r2, [pc, #200]	@ (800be14 <USB_SetTurnaroundTime+0x12c>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d802      	bhi.n	800bd54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bd4e:	230c      	movs	r3, #12
 800bd50:	617b      	str	r3, [r7, #20]
 800bd52:	e041      	b.n	800bdd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	4a2f      	ldr	r2, [pc, #188]	@ (800be14 <USB_SetTurnaroundTime+0x12c>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d906      	bls.n	800bd6a <USB_SetTurnaroundTime+0x82>
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	4a2e      	ldr	r2, [pc, #184]	@ (800be18 <USB_SetTurnaroundTime+0x130>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d802      	bhi.n	800bd6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bd64:	230b      	movs	r3, #11
 800bd66:	617b      	str	r3, [r7, #20]
 800bd68:	e036      	b.n	800bdd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	4a2a      	ldr	r2, [pc, #168]	@ (800be18 <USB_SetTurnaroundTime+0x130>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d906      	bls.n	800bd80 <USB_SetTurnaroundTime+0x98>
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	4a29      	ldr	r2, [pc, #164]	@ (800be1c <USB_SetTurnaroundTime+0x134>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d802      	bhi.n	800bd80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bd7a:	230a      	movs	r3, #10
 800bd7c:	617b      	str	r3, [r7, #20]
 800bd7e:	e02b      	b.n	800bdd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	4a26      	ldr	r2, [pc, #152]	@ (800be1c <USB_SetTurnaroundTime+0x134>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d906      	bls.n	800bd96 <USB_SetTurnaroundTime+0xae>
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	4a25      	ldr	r2, [pc, #148]	@ (800be20 <USB_SetTurnaroundTime+0x138>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d202      	bcs.n	800bd96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bd90:	2309      	movs	r3, #9
 800bd92:	617b      	str	r3, [r7, #20]
 800bd94:	e020      	b.n	800bdd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	4a21      	ldr	r2, [pc, #132]	@ (800be20 <USB_SetTurnaroundTime+0x138>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d306      	bcc.n	800bdac <USB_SetTurnaroundTime+0xc4>
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	4a20      	ldr	r2, [pc, #128]	@ (800be24 <USB_SetTurnaroundTime+0x13c>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d802      	bhi.n	800bdac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bda6:	2308      	movs	r3, #8
 800bda8:	617b      	str	r3, [r7, #20]
 800bdaa:	e015      	b.n	800bdd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	4a1d      	ldr	r2, [pc, #116]	@ (800be24 <USB_SetTurnaroundTime+0x13c>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d906      	bls.n	800bdc2 <USB_SetTurnaroundTime+0xda>
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	4a1c      	ldr	r2, [pc, #112]	@ (800be28 <USB_SetTurnaroundTime+0x140>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d202      	bcs.n	800bdc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bdbc:	2307      	movs	r3, #7
 800bdbe:	617b      	str	r3, [r7, #20]
 800bdc0:	e00a      	b.n	800bdd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bdc2:	2306      	movs	r3, #6
 800bdc4:	617b      	str	r3, [r7, #20]
 800bdc6:	e007      	b.n	800bdd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bdc8:	79fb      	ldrb	r3, [r7, #7]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d102      	bne.n	800bdd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bdce:	2309      	movs	r3, #9
 800bdd0:	617b      	str	r3, [r7, #20]
 800bdd2:	e001      	b.n	800bdd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bdd4:	2309      	movs	r3, #9
 800bdd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	68da      	ldr	r2, [r3, #12]
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	029b      	lsls	r3, r3, #10
 800bdec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800bdf0:	431a      	orrs	r2, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	371c      	adds	r7, #28
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr
 800be04:	00d8acbf 	.word	0x00d8acbf
 800be08:	00e4e1c0 	.word	0x00e4e1c0
 800be0c:	00f42400 	.word	0x00f42400
 800be10:	01067380 	.word	0x01067380
 800be14:	011a499f 	.word	0x011a499f
 800be18:	01312cff 	.word	0x01312cff
 800be1c:	014ca43f 	.word	0x014ca43f
 800be20:	016e3600 	.word	0x016e3600
 800be24:	01a6ab1f 	.word	0x01a6ab1f
 800be28:	01e84800 	.word	0x01e84800

0800be2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	f043 0201 	orr.w	r2, r3, #1
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	370c      	adds	r7, #12
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr

0800be4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be4e:	b480      	push	{r7}
 800be50:	b083      	sub	sp, #12
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	f023 0201 	bic.w	r2, r3, #1
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800be7c:	2300      	movs	r3, #0
 800be7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800be8c:	78fb      	ldrb	r3, [r7, #3]
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d115      	bne.n	800bebe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800be9e:	200a      	movs	r0, #10
 800bea0:	f7f5 feb2 	bl	8001c08 <HAL_Delay>
      ms += 10U;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	330a      	adds	r3, #10
 800bea8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f001 f93f 	bl	800d12e <USB_GetMode>
 800beb0:	4603      	mov	r3, r0
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d01e      	beq.n	800bef4 <USB_SetCurrentMode+0x84>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2bc7      	cmp	r3, #199	@ 0xc7
 800beba:	d9f0      	bls.n	800be9e <USB_SetCurrentMode+0x2e>
 800bebc:	e01a      	b.n	800bef4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bebe:	78fb      	ldrb	r3, [r7, #3]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d115      	bne.n	800bef0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bed0:	200a      	movs	r0, #10
 800bed2:	f7f5 fe99 	bl	8001c08 <HAL_Delay>
      ms += 10U;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	330a      	adds	r3, #10
 800beda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f001 f926 	bl	800d12e <USB_GetMode>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d005      	beq.n	800bef4 <USB_SetCurrentMode+0x84>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2bc7      	cmp	r3, #199	@ 0xc7
 800beec:	d9f0      	bls.n	800bed0 <USB_SetCurrentMode+0x60>
 800beee:	e001      	b.n	800bef4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	e005      	b.n	800bf00 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2bc8      	cmp	r3, #200	@ 0xc8
 800bef8:	d101      	bne.n	800befe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	e000      	b.n	800bf00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf08:	b084      	sub	sp, #16
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b086      	sub	sp, #24
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
 800bf12:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800bf16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bf22:	2300      	movs	r3, #0
 800bf24:	613b      	str	r3, [r7, #16]
 800bf26:	e009      	b.n	800bf3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	3340      	adds	r3, #64	@ 0x40
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	4413      	add	r3, r2
 800bf32:	2200      	movs	r2, #0
 800bf34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	613b      	str	r3, [r7, #16]
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	2b0e      	cmp	r3, #14
 800bf40:	d9f2      	bls.n	800bf28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bf42:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d11c      	bne.n	800bf84 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bf58:	f043 0302 	orr.w	r3, r3, #2
 800bf5c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf62:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	601a      	str	r2, [r3, #0]
 800bf82:	e005      	b.n	800bf90 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf88:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bf96:	461a      	mov	r2, r3
 800bf98:	2300      	movs	r3, #0
 800bf9a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bf9c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d10d      	bne.n	800bfc0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bfa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d104      	bne.n	800bfb6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bfac:	2100      	movs	r1, #0
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 f968 	bl	800c284 <USB_SetDevSpeed>
 800bfb4:	e008      	b.n	800bfc8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bfb6:	2101      	movs	r1, #1
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 f963 	bl	800c284 <USB_SetDevSpeed>
 800bfbe:	e003      	b.n	800bfc8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bfc0:	2103      	movs	r1, #3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f95e 	bl	800c284 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bfc8:	2110      	movs	r1, #16
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f8fa 	bl	800c1c4 <USB_FlushTxFifo>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d001      	beq.n	800bfda <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f924 	bl	800c228 <USB_FlushRxFifo>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d001      	beq.n	800bfea <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bff0:	461a      	mov	r2, r3
 800bff2:	2300      	movs	r3, #0
 800bff4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bffc:	461a      	mov	r2, r3
 800bffe:	2300      	movs	r3, #0
 800c000:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c008:	461a      	mov	r2, r3
 800c00a:	2300      	movs	r3, #0
 800c00c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c00e:	2300      	movs	r3, #0
 800c010:	613b      	str	r3, [r7, #16]
 800c012:	e043      	b.n	800c09c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	015a      	lsls	r2, r3, #5
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	4413      	add	r3, r2
 800c01c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c026:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c02a:	d118      	bne.n	800c05e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10a      	bne.n	800c048 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	015a      	lsls	r2, r3, #5
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	4413      	add	r3, r2
 800c03a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c03e:	461a      	mov	r2, r3
 800c040:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c044:	6013      	str	r3, [r2, #0]
 800c046:	e013      	b.n	800c070 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	015a      	lsls	r2, r3, #5
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	4413      	add	r3, r2
 800c050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c054:	461a      	mov	r2, r3
 800c056:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c05a:	6013      	str	r3, [r2, #0]
 800c05c:	e008      	b.n	800c070 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	015a      	lsls	r2, r3, #5
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	4413      	add	r3, r2
 800c066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c06a:	461a      	mov	r2, r3
 800c06c:	2300      	movs	r3, #0
 800c06e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	015a      	lsls	r2, r3, #5
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	4413      	add	r3, r2
 800c078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c07c:	461a      	mov	r2, r3
 800c07e:	2300      	movs	r3, #0
 800c080:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	015a      	lsls	r2, r3, #5
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	4413      	add	r3, r2
 800c08a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c08e:	461a      	mov	r2, r3
 800c090:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c094:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	3301      	adds	r3, #1
 800c09a:	613b      	str	r3, [r7, #16]
 800c09c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d3b5      	bcc.n	800c014 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	613b      	str	r3, [r7, #16]
 800c0ac:	e043      	b.n	800c136 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	015a      	lsls	r2, r3, #5
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c0c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c0c4:	d118      	bne.n	800c0f8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10a      	bne.n	800c0e2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	015a      	lsls	r2, r3, #5
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0d8:	461a      	mov	r2, r3
 800c0da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c0de:	6013      	str	r3, [r2, #0]
 800c0e0:	e013      	b.n	800c10a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	015a      	lsls	r2, r3, #5
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c0f4:	6013      	str	r3, [r2, #0]
 800c0f6:	e008      	b.n	800c10a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	015a      	lsls	r2, r3, #5
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	4413      	add	r3, r2
 800c100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c104:	461a      	mov	r2, r3
 800c106:	2300      	movs	r3, #0
 800c108:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	015a      	lsls	r2, r3, #5
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	4413      	add	r3, r2
 800c112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c116:	461a      	mov	r2, r3
 800c118:	2300      	movs	r3, #0
 800c11a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	015a      	lsls	r2, r3, #5
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	4413      	add	r3, r2
 800c124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c128:	461a      	mov	r2, r3
 800c12a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c12e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	3301      	adds	r3, #1
 800c134:	613b      	str	r3, [r7, #16]
 800c136:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c13a:	461a      	mov	r2, r3
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	4293      	cmp	r3, r2
 800c140:	d3b5      	bcc.n	800c0ae <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c154:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c162:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c164:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d105      	bne.n	800c178 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	699b      	ldr	r3, [r3, #24]
 800c170:	f043 0210 	orr.w	r2, r3, #16
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	699a      	ldr	r2, [r3, #24]
 800c17c:	4b0f      	ldr	r3, [pc, #60]	@ (800c1bc <USB_DevInit+0x2b4>)
 800c17e:	4313      	orrs	r3, r2
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c184:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d005      	beq.n	800c198 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	699b      	ldr	r3, [r3, #24]
 800c190:	f043 0208 	orr.w	r2, r3, #8
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c198:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d105      	bne.n	800c1ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	699a      	ldr	r2, [r3, #24]
 800c1a4:	4b06      	ldr	r3, [pc, #24]	@ (800c1c0 <USB_DevInit+0x2b8>)
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c1ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3718      	adds	r7, #24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c1b8:	b004      	add	sp, #16
 800c1ba:	4770      	bx	lr
 800c1bc:	803c3800 	.word	0x803c3800
 800c1c0:	40000004 	.word	0x40000004

0800c1c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c1de:	d901      	bls.n	800c1e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c1e0:	2303      	movs	r3, #3
 800c1e2:	e01b      	b.n	800c21c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	691b      	ldr	r3, [r3, #16]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	daf2      	bge.n	800c1d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	019b      	lsls	r3, r3, #6
 800c1f4:	f043 0220 	orr.w	r2, r3, #32
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	3301      	adds	r3, #1
 800c200:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c208:	d901      	bls.n	800c20e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c20a:	2303      	movs	r3, #3
 800c20c:	e006      	b.n	800c21c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	691b      	ldr	r3, [r3, #16]
 800c212:	f003 0320 	and.w	r3, r3, #32
 800c216:	2b20      	cmp	r3, #32
 800c218:	d0f0      	beq.n	800c1fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c21a:	2300      	movs	r3, #0
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3714      	adds	r7, #20
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c228:	b480      	push	{r7}
 800c22a:	b085      	sub	sp, #20
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c230:	2300      	movs	r3, #0
 800c232:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	3301      	adds	r3, #1
 800c238:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c240:	d901      	bls.n	800c246 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c242:	2303      	movs	r3, #3
 800c244:	e018      	b.n	800c278 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	691b      	ldr	r3, [r3, #16]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	daf2      	bge.n	800c234 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c24e:	2300      	movs	r3, #0
 800c250:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2210      	movs	r2, #16
 800c256:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	3301      	adds	r3, #1
 800c25c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c264:	d901      	bls.n	800c26a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c266:	2303      	movs	r3, #3
 800c268:	e006      	b.n	800c278 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	f003 0310 	and.w	r3, r3, #16
 800c272:	2b10      	cmp	r3, #16
 800c274:	d0f0      	beq.n	800c258 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3714      	adds	r7, #20
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	460b      	mov	r3, r1
 800c28e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	78fb      	ldrb	r3, [r7, #3]
 800c29e:	68f9      	ldr	r1, [r7, #12]
 800c2a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3714      	adds	r7, #20
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	b087      	sub	sp, #28
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	f003 0306 	and.w	r3, r3, #6
 800c2ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d102      	bne.n	800c2dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	75fb      	strb	r3, [r7, #23]
 800c2da:	e00a      	b.n	800c2f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	d002      	beq.n	800c2e8 <USB_GetDevSpeed+0x32>
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2b06      	cmp	r3, #6
 800c2e6:	d102      	bne.n	800c2ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	75fb      	strb	r3, [r7, #23]
 800c2ec:	e001      	b.n	800c2f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c2ee:	230f      	movs	r3, #15
 800c2f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c2f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	371c      	adds	r7, #28
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	785b      	ldrb	r3, [r3, #1]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d139      	bne.n	800c390 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c322:	69da      	ldr	r2, [r3, #28]
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	f003 030f 	and.w	r3, r3, #15
 800c32c:	2101      	movs	r1, #1
 800c32e:	fa01 f303 	lsl.w	r3, r1, r3
 800c332:	b29b      	uxth	r3, r3
 800c334:	68f9      	ldr	r1, [r7, #12]
 800c336:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c33a:	4313      	orrs	r3, r2
 800c33c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	015a      	lsls	r2, r3, #5
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	4413      	add	r3, r2
 800c346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c350:	2b00      	cmp	r3, #0
 800c352:	d153      	bne.n	800c3fc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	015a      	lsls	r2, r3, #5
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	4413      	add	r3, r2
 800c35c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	791b      	ldrb	r3, [r3, #4]
 800c36e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c370:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	059b      	lsls	r3, r3, #22
 800c376:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c378:	431a      	orrs	r2, r3
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	0159      	lsls	r1, r3, #5
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	440b      	add	r3, r1
 800c382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c386:	4619      	mov	r1, r3
 800c388:	4b20      	ldr	r3, [pc, #128]	@ (800c40c <USB_ActivateEndpoint+0x10c>)
 800c38a:	4313      	orrs	r3, r2
 800c38c:	600b      	str	r3, [r1, #0]
 800c38e:	e035      	b.n	800c3fc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c396:	69da      	ldr	r2, [r3, #28]
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	f003 030f 	and.w	r3, r3, #15
 800c3a0:	2101      	movs	r1, #1
 800c3a2:	fa01 f303 	lsl.w	r3, r1, r3
 800c3a6:	041b      	lsls	r3, r3, #16
 800c3a8:	68f9      	ldr	r1, [r7, #12]
 800c3aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	015a      	lsls	r2, r3, #5
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d119      	bne.n	800c3fc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	015a      	lsls	r2, r3, #5
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	791b      	ldrb	r3, [r3, #4]
 800c3e2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c3e4:	430b      	orrs	r3, r1
 800c3e6:	431a      	orrs	r2, r3
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	0159      	lsls	r1, r3, #5
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	440b      	add	r3, r1
 800c3f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	4b05      	ldr	r3, [pc, #20]	@ (800c40c <USB_ActivateEndpoint+0x10c>)
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c3fc:	2300      	movs	r3, #0
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3714      	adds	r7, #20
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	10008000 	.word	0x10008000

0800c410 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	785b      	ldrb	r3, [r3, #1]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d161      	bne.n	800c4f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	015a      	lsls	r2, r3, #5
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	4413      	add	r3, r2
 800c434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c43e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c442:	d11f      	bne.n	800c484 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	015a      	lsls	r2, r3, #5
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	4413      	add	r3, r2
 800c44c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	68ba      	ldr	r2, [r7, #8]
 800c454:	0151      	lsls	r1, r2, #5
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	440a      	add	r2, r1
 800c45a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c45e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c462:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	015a      	lsls	r2, r3, #5
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	4413      	add	r3, r2
 800c46c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	0151      	lsls	r1, r2, #5
 800c476:	68fa      	ldr	r2, [r7, #12]
 800c478:	440a      	add	r2, r1
 800c47a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c47e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c482:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c48a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	f003 030f 	and.w	r3, r3, #15
 800c494:	2101      	movs	r1, #1
 800c496:	fa01 f303 	lsl.w	r3, r1, r3
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	43db      	mvns	r3, r3
 800c49e:	68f9      	ldr	r1, [r7, #12]
 800c4a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c4a4:	4013      	ands	r3, r2
 800c4a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4ae:	69da      	ldr	r2, [r3, #28]
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	f003 030f 	and.w	r3, r3, #15
 800c4b8:	2101      	movs	r1, #1
 800c4ba:	fa01 f303 	lsl.w	r3, r1, r3
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	43db      	mvns	r3, r3
 800c4c2:	68f9      	ldr	r1, [r7, #12]
 800c4c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	015a      	lsls	r2, r3, #5
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	0159      	lsls	r1, r3, #5
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	440b      	add	r3, r1
 800c4e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	4b35      	ldr	r3, [pc, #212]	@ (800c5c0 <USB_DeactivateEndpoint+0x1b0>)
 800c4ea:	4013      	ands	r3, r2
 800c4ec:	600b      	str	r3, [r1, #0]
 800c4ee:	e060      	b.n	800c5b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	015a      	lsls	r2, r3, #5
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c502:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c506:	d11f      	bne.n	800c548 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	015a      	lsls	r2, r3, #5
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	4413      	add	r3, r2
 800c510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	0151      	lsls	r1, r2, #5
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	440a      	add	r2, r1
 800c51e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c522:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c526:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	015a      	lsls	r2, r3, #5
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	4413      	add	r3, r2
 800c530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68ba      	ldr	r2, [r7, #8]
 800c538:	0151      	lsls	r1, r2, #5
 800c53a:	68fa      	ldr	r2, [r7, #12]
 800c53c:	440a      	add	r2, r1
 800c53e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c542:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c546:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c54e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	f003 030f 	and.w	r3, r3, #15
 800c558:	2101      	movs	r1, #1
 800c55a:	fa01 f303 	lsl.w	r3, r1, r3
 800c55e:	041b      	lsls	r3, r3, #16
 800c560:	43db      	mvns	r3, r3
 800c562:	68f9      	ldr	r1, [r7, #12]
 800c564:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c568:	4013      	ands	r3, r2
 800c56a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c572:	69da      	ldr	r2, [r3, #28]
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	f003 030f 	and.w	r3, r3, #15
 800c57c:	2101      	movs	r1, #1
 800c57e:	fa01 f303 	lsl.w	r3, r1, r3
 800c582:	041b      	lsls	r3, r3, #16
 800c584:	43db      	mvns	r3, r3
 800c586:	68f9      	ldr	r1, [r7, #12]
 800c588:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c58c:	4013      	ands	r3, r2
 800c58e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	015a      	lsls	r2, r3, #5
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	4413      	add	r3, r2
 800c598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	0159      	lsls	r1, r3, #5
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	440b      	add	r3, r1
 800c5a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	4b05      	ldr	r3, [pc, #20]	@ (800c5c4 <USB_DeactivateEndpoint+0x1b4>)
 800c5ae:	4013      	ands	r3, r2
 800c5b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c5b2:	2300      	movs	r3, #0
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3714      	adds	r7, #20
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr
 800c5c0:	ec337800 	.word	0xec337800
 800c5c4:	eff37800 	.word	0xeff37800

0800c5c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b08a      	sub	sp, #40	@ 0x28
 800c5cc:	af02      	add	r7, sp, #8
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	785b      	ldrb	r3, [r3, #1]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	f040 8185 	bne.w	800c8f4 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d132      	bne.n	800c658 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	015a      	lsls	r2, r3, #5
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5fe:	691a      	ldr	r2, [r3, #16]
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	0159      	lsls	r1, r3, #5
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	440b      	add	r3, r1
 800c608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c60c:	4619      	mov	r1, r3
 800c60e:	4ba7      	ldr	r3, [pc, #668]	@ (800c8ac <USB_EPStartXfer+0x2e4>)
 800c610:	4013      	ands	r3, r2
 800c612:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	015a      	lsls	r2, r3, #5
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	4413      	add	r3, r2
 800c61c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c620:	691b      	ldr	r3, [r3, #16]
 800c622:	69ba      	ldr	r2, [r7, #24]
 800c624:	0151      	lsls	r1, r2, #5
 800c626:	69fa      	ldr	r2, [r7, #28]
 800c628:	440a      	add	r2, r1
 800c62a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c62e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c632:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	015a      	lsls	r2, r3, #5
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	4413      	add	r3, r2
 800c63c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c640:	691a      	ldr	r2, [r3, #16]
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	0159      	lsls	r1, r3, #5
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	440b      	add	r3, r1
 800c64a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c64e:	4619      	mov	r1, r3
 800c650:	4b97      	ldr	r3, [pc, #604]	@ (800c8b0 <USB_EPStartXfer+0x2e8>)
 800c652:	4013      	ands	r3, r2
 800c654:	610b      	str	r3, [r1, #16]
 800c656:	e097      	b.n	800c788 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c658:	69bb      	ldr	r3, [r7, #24]
 800c65a:	015a      	lsls	r2, r3, #5
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	4413      	add	r3, r2
 800c660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c664:	691a      	ldr	r2, [r3, #16]
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	0159      	lsls	r1, r3, #5
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	440b      	add	r3, r1
 800c66e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c672:	4619      	mov	r1, r3
 800c674:	4b8e      	ldr	r3, [pc, #568]	@ (800c8b0 <USB_EPStartXfer+0x2e8>)
 800c676:	4013      	ands	r3, r2
 800c678:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	015a      	lsls	r2, r3, #5
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	4413      	add	r3, r2
 800c682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c686:	691a      	ldr	r2, [r3, #16]
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	0159      	lsls	r1, r3, #5
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	440b      	add	r3, r1
 800c690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c694:	4619      	mov	r1, r3
 800c696:	4b85      	ldr	r3, [pc, #532]	@ (800c8ac <USB_EPStartXfer+0x2e4>)
 800c698:	4013      	ands	r3, r2
 800c69a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c69c:	69bb      	ldr	r3, [r7, #24]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d11a      	bne.n	800c6d8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	691a      	ldr	r2, [r3, #16]
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d903      	bls.n	800c6b6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	689a      	ldr	r2, [r3, #8]
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	015a      	lsls	r2, r3, #5
 800c6ba:	69fb      	ldr	r3, [r7, #28]
 800c6bc:	4413      	add	r3, r2
 800c6be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6c2:	691b      	ldr	r3, [r3, #16]
 800c6c4:	69ba      	ldr	r2, [r7, #24]
 800c6c6:	0151      	lsls	r1, r2, #5
 800c6c8:	69fa      	ldr	r2, [r7, #28]
 800c6ca:	440a      	add	r2, r1
 800c6cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c6d4:	6113      	str	r3, [r2, #16]
 800c6d6:	e044      	b.n	800c762 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	691a      	ldr	r2, [r3, #16]
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	1e5a      	subs	r2, r3, #1
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6ec:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	015a      	lsls	r2, r3, #5
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6fa:	691a      	ldr	r2, [r3, #16]
 800c6fc:	8afb      	ldrh	r3, [r7, #22]
 800c6fe:	04d9      	lsls	r1, r3, #19
 800c700:	4b6c      	ldr	r3, [pc, #432]	@ (800c8b4 <USB_EPStartXfer+0x2ec>)
 800c702:	400b      	ands	r3, r1
 800c704:	69b9      	ldr	r1, [r7, #24]
 800c706:	0148      	lsls	r0, r1, #5
 800c708:	69f9      	ldr	r1, [r7, #28]
 800c70a:	4401      	add	r1, r0
 800c70c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c710:	4313      	orrs	r3, r2
 800c712:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	791b      	ldrb	r3, [r3, #4]
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d122      	bne.n	800c762 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	015a      	lsls	r2, r3, #5
 800c720:	69fb      	ldr	r3, [r7, #28]
 800c722:	4413      	add	r3, r2
 800c724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	69ba      	ldr	r2, [r7, #24]
 800c72c:	0151      	lsls	r1, r2, #5
 800c72e:	69fa      	ldr	r2, [r7, #28]
 800c730:	440a      	add	r2, r1
 800c732:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c736:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c73a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	015a      	lsls	r2, r3, #5
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	4413      	add	r3, r2
 800c744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c748:	691a      	ldr	r2, [r3, #16]
 800c74a:	8afb      	ldrh	r3, [r7, #22]
 800c74c:	075b      	lsls	r3, r3, #29
 800c74e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800c752:	69b9      	ldr	r1, [r7, #24]
 800c754:	0148      	lsls	r0, r1, #5
 800c756:	69f9      	ldr	r1, [r7, #28]
 800c758:	4401      	add	r1, r0
 800c75a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c75e:	4313      	orrs	r3, r2
 800c760:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	015a      	lsls	r2, r3, #5
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	4413      	add	r3, r2
 800c76a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c76e:	691a      	ldr	r2, [r3, #16]
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c778:	69b9      	ldr	r1, [r7, #24]
 800c77a:	0148      	lsls	r0, r1, #5
 800c77c:	69f9      	ldr	r1, [r7, #28]
 800c77e:	4401      	add	r1, r0
 800c780:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c784:	4313      	orrs	r3, r2
 800c786:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c788:	79fb      	ldrb	r3, [r7, #7]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d14b      	bne.n	800c826 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	69db      	ldr	r3, [r3, #28]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d009      	beq.n	800c7aa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c796:	69bb      	ldr	r3, [r7, #24]
 800c798:	015a      	lsls	r2, r3, #5
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	4413      	add	r3, r2
 800c79e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	69db      	ldr	r3, [r3, #28]
 800c7a8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	791b      	ldrb	r3, [r3, #4]
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d128      	bne.n	800c804 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d110      	bne.n	800c7e4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	015a      	lsls	r2, r3, #5
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	69ba      	ldr	r2, [r7, #24]
 800c7d2:	0151      	lsls	r1, r2, #5
 800c7d4:	69fa      	ldr	r2, [r7, #28]
 800c7d6:	440a      	add	r2, r1
 800c7d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c7dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c7e0:	6013      	str	r3, [r2, #0]
 800c7e2:	e00f      	b.n	800c804 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c7e4:	69bb      	ldr	r3, [r7, #24]
 800c7e6:	015a      	lsls	r2, r3, #5
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	69ba      	ldr	r2, [r7, #24]
 800c7f4:	0151      	lsls	r1, r2, #5
 800c7f6:	69fa      	ldr	r2, [r7, #28]
 800c7f8:	440a      	add	r2, r1
 800c7fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c7fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c802:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c804:	69bb      	ldr	r3, [r7, #24]
 800c806:	015a      	lsls	r2, r3, #5
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	4413      	add	r3, r2
 800c80c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	69ba      	ldr	r2, [r7, #24]
 800c814:	0151      	lsls	r1, r2, #5
 800c816:	69fa      	ldr	r2, [r7, #28]
 800c818:	440a      	add	r2, r1
 800c81a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c81e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c822:	6013      	str	r3, [r2, #0]
 800c824:	e169      	b.n	800cafa <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	015a      	lsls	r2, r3, #5
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	4413      	add	r3, r2
 800c82e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	69ba      	ldr	r2, [r7, #24]
 800c836:	0151      	lsls	r1, r2, #5
 800c838:	69fa      	ldr	r2, [r7, #28]
 800c83a:	440a      	add	r2, r1
 800c83c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c840:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c844:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	791b      	ldrb	r3, [r3, #4]
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d015      	beq.n	800c87a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	2b00      	cmp	r3, #0
 800c854:	f000 8151 	beq.w	800cafa <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c85e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	f003 030f 	and.w	r3, r3, #15
 800c868:	2101      	movs	r1, #1
 800c86a:	fa01 f303 	lsl.w	r3, r1, r3
 800c86e:	69f9      	ldr	r1, [r7, #28]
 800c870:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c874:	4313      	orrs	r3, r2
 800c876:	634b      	str	r3, [r1, #52]	@ 0x34
 800c878:	e13f      	b.n	800cafa <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c87a:	69fb      	ldr	r3, [r7, #28]
 800c87c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c886:	2b00      	cmp	r3, #0
 800c888:	d116      	bne.n	800c8b8 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	015a      	lsls	r2, r3, #5
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	4413      	add	r3, r2
 800c892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	69ba      	ldr	r2, [r7, #24]
 800c89a:	0151      	lsls	r1, r2, #5
 800c89c:	69fa      	ldr	r2, [r7, #28]
 800c89e:	440a      	add	r2, r1
 800c8a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c8a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c8a8:	6013      	str	r3, [r2, #0]
 800c8aa:	e015      	b.n	800c8d8 <USB_EPStartXfer+0x310>
 800c8ac:	e007ffff 	.word	0xe007ffff
 800c8b0:	fff80000 	.word	0xfff80000
 800c8b4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	015a      	lsls	r2, r3, #5
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	4413      	add	r3, r2
 800c8c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	69ba      	ldr	r2, [r7, #24]
 800c8c8:	0151      	lsls	r1, r2, #5
 800c8ca:	69fa      	ldr	r2, [r7, #28]
 800c8cc:	440a      	add	r2, r1
 800c8ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c8d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c8d6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	68d9      	ldr	r1, [r3, #12]
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	781a      	ldrb	r2, [r3, #0]
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	b298      	uxth	r0, r3
 800c8e6:	79fb      	ldrb	r3, [r7, #7]
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	68f8      	ldr	r0, [r7, #12]
 800c8ee:	f000 f9b9 	bl	800cc64 <USB_WritePacket>
 800c8f2:	e102      	b.n	800cafa <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	015a      	lsls	r2, r3, #5
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c900:	691a      	ldr	r2, [r3, #16]
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	0159      	lsls	r1, r3, #5
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	440b      	add	r3, r1
 800c90a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c90e:	4619      	mov	r1, r3
 800c910:	4b7c      	ldr	r3, [pc, #496]	@ (800cb04 <USB_EPStartXfer+0x53c>)
 800c912:	4013      	ands	r3, r2
 800c914:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	015a      	lsls	r2, r3, #5
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	4413      	add	r3, r2
 800c91e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c922:	691a      	ldr	r2, [r3, #16]
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	0159      	lsls	r1, r3, #5
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	440b      	add	r3, r1
 800c92c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c930:	4619      	mov	r1, r3
 800c932:	4b75      	ldr	r3, [pc, #468]	@ (800cb08 <USB_EPStartXfer+0x540>)
 800c934:	4013      	ands	r3, r2
 800c936:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d12f      	bne.n	800c99e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d003      	beq.n	800c94e <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	689a      	ldr	r2, [r3, #8]
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	689a      	ldr	r2, [r3, #8]
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	015a      	lsls	r2, r3, #5
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	4413      	add	r3, r2
 800c95e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c962:	691a      	ldr	r2, [r3, #16]
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	6a1b      	ldr	r3, [r3, #32]
 800c968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c96c:	69b9      	ldr	r1, [r7, #24]
 800c96e:	0148      	lsls	r0, r1, #5
 800c970:	69f9      	ldr	r1, [r7, #28]
 800c972:	4401      	add	r1, r0
 800c974:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c978:	4313      	orrs	r3, r2
 800c97a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	015a      	lsls	r2, r3, #5
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	4413      	add	r3, r2
 800c984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	69ba      	ldr	r2, [r7, #24]
 800c98c:	0151      	lsls	r1, r2, #5
 800c98e:	69fa      	ldr	r2, [r7, #28]
 800c990:	440a      	add	r2, r1
 800c992:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c996:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c99a:	6113      	str	r3, [r2, #16]
 800c99c:	e05f      	b.n	800ca5e <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d123      	bne.n	800c9ee <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	015a      	lsls	r2, r3, #5
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9b2:	691a      	ldr	r2, [r3, #16]
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9bc:	69b9      	ldr	r1, [r7, #24]
 800c9be:	0148      	lsls	r0, r1, #5
 800c9c0:	69f9      	ldr	r1, [r7, #28]
 800c9c2:	4401      	add	r1, r0
 800c9c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	015a      	lsls	r2, r3, #5
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	69ba      	ldr	r2, [r7, #24]
 800c9dc:	0151      	lsls	r1, r2, #5
 800c9de:	69fa      	ldr	r2, [r7, #28]
 800c9e0:	440a      	add	r2, r1
 800c9e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c9e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c9ea:	6113      	str	r3, [r2, #16]
 800c9ec:	e037      	b.n	800ca5e <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	691a      	ldr	r2, [r3, #16]
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	1e5a      	subs	r2, r3, #1
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca02:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	8afa      	ldrh	r2, [r7, #22]
 800ca0a:	fb03 f202 	mul.w	r2, r3, r2
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	015a      	lsls	r2, r3, #5
 800ca16:	69fb      	ldr	r3, [r7, #28]
 800ca18:	4413      	add	r3, r2
 800ca1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca1e:	691a      	ldr	r2, [r3, #16]
 800ca20:	8afb      	ldrh	r3, [r7, #22]
 800ca22:	04d9      	lsls	r1, r3, #19
 800ca24:	4b39      	ldr	r3, [pc, #228]	@ (800cb0c <USB_EPStartXfer+0x544>)
 800ca26:	400b      	ands	r3, r1
 800ca28:	69b9      	ldr	r1, [r7, #24]
 800ca2a:	0148      	lsls	r0, r1, #5
 800ca2c:	69f9      	ldr	r1, [r7, #28]
 800ca2e:	4401      	add	r1, r0
 800ca30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ca34:	4313      	orrs	r3, r2
 800ca36:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	015a      	lsls	r2, r3, #5
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	4413      	add	r3, r2
 800ca40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca44:	691a      	ldr	r2, [r3, #16]
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	6a1b      	ldr	r3, [r3, #32]
 800ca4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca4e:	69b9      	ldr	r1, [r7, #24]
 800ca50:	0148      	lsls	r0, r1, #5
 800ca52:	69f9      	ldr	r1, [r7, #28]
 800ca54:	4401      	add	r1, r0
 800ca56:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ca5e:	79fb      	ldrb	r3, [r7, #7]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d10d      	bne.n	800ca80 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d009      	beq.n	800ca80 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	68d9      	ldr	r1, [r3, #12]
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	015a      	lsls	r2, r3, #5
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	4413      	add	r3, r2
 800ca78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca7c:	460a      	mov	r2, r1
 800ca7e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	791b      	ldrb	r3, [r3, #4]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d128      	bne.n	800cada <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d110      	bne.n	800caba <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	015a      	lsls	r2, r3, #5
 800ca9c:	69fb      	ldr	r3, [r7, #28]
 800ca9e:	4413      	add	r3, r2
 800caa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	69ba      	ldr	r2, [r7, #24]
 800caa8:	0151      	lsls	r1, r2, #5
 800caaa:	69fa      	ldr	r2, [r7, #28]
 800caac:	440a      	add	r2, r1
 800caae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cab2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cab6:	6013      	str	r3, [r2, #0]
 800cab8:	e00f      	b.n	800cada <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	015a      	lsls	r2, r3, #5
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	4413      	add	r3, r2
 800cac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	69ba      	ldr	r2, [r7, #24]
 800caca:	0151      	lsls	r1, r2, #5
 800cacc:	69fa      	ldr	r2, [r7, #28]
 800cace:	440a      	add	r2, r1
 800cad0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cad8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cada:	69bb      	ldr	r3, [r7, #24]
 800cadc:	015a      	lsls	r2, r3, #5
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	4413      	add	r3, r2
 800cae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	69ba      	ldr	r2, [r7, #24]
 800caea:	0151      	lsls	r1, r2, #5
 800caec:	69fa      	ldr	r2, [r7, #28]
 800caee:	440a      	add	r2, r1
 800caf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800caf4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800caf8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3720      	adds	r7, #32
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	fff80000 	.word	0xfff80000
 800cb08:	e007ffff 	.word	0xe007ffff
 800cb0c:	1ff80000 	.word	0x1ff80000

0800cb10 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b087      	sub	sp, #28
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	785b      	ldrb	r3, [r3, #1]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d14a      	bne.n	800cbc4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	015a      	lsls	r2, r3, #5
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	4413      	add	r3, r2
 800cb38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cb42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cb46:	f040 8086 	bne.w	800cc56 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	015a      	lsls	r2, r3, #5
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	4413      	add	r3, r2
 800cb54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	683a      	ldr	r2, [r7, #0]
 800cb5c:	7812      	ldrb	r2, [r2, #0]
 800cb5e:	0151      	lsls	r1, r2, #5
 800cb60:	693a      	ldr	r2, [r7, #16]
 800cb62:	440a      	add	r2, r1
 800cb64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cb68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cb6c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	015a      	lsls	r2, r3, #5
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	4413      	add	r3, r2
 800cb78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	7812      	ldrb	r2, [r2, #0]
 800cb82:	0151      	lsls	r1, r2, #5
 800cb84:	693a      	ldr	r2, [r7, #16]
 800cb86:	440a      	add	r2, r1
 800cb88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cb8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cb90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	3301      	adds	r3, #1
 800cb96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d902      	bls.n	800cba8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cba2:	2301      	movs	r3, #1
 800cba4:	75fb      	strb	r3, [r7, #23]
          break;
 800cba6:	e056      	b.n	800cc56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	015a      	lsls	r2, r3, #5
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cbbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cbc0:	d0e7      	beq.n	800cb92 <USB_EPStopXfer+0x82>
 800cbc2:	e048      	b.n	800cc56 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	015a      	lsls	r2, r3, #5
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	4413      	add	r3, r2
 800cbce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cbd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cbdc:	d13b      	bne.n	800cc56 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	015a      	lsls	r2, r3, #5
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	683a      	ldr	r2, [r7, #0]
 800cbf0:	7812      	ldrb	r2, [r2, #0]
 800cbf2:	0151      	lsls	r1, r2, #5
 800cbf4:	693a      	ldr	r2, [r7, #16]
 800cbf6:	440a      	add	r2, r1
 800cbf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbfc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cc00:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	015a      	lsls	r2, r3, #5
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	7812      	ldrb	r2, [r2, #0]
 800cc16:	0151      	lsls	r1, r2, #5
 800cc18:	693a      	ldr	r2, [r7, #16]
 800cc1a:	440a      	add	r2, r1
 800cc1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cc24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d902      	bls.n	800cc3c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cc36:	2301      	movs	r3, #1
 800cc38:	75fb      	strb	r3, [r7, #23]
          break;
 800cc3a:	e00c      	b.n	800cc56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	015a      	lsls	r2, r3, #5
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	4413      	add	r3, r2
 800cc46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cc50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc54:	d0e7      	beq.n	800cc26 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cc56:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	371c      	adds	r7, #28
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b089      	sub	sp, #36	@ 0x24
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	4611      	mov	r1, r2
 800cc70:	461a      	mov	r2, r3
 800cc72:	460b      	mov	r3, r1
 800cc74:	71fb      	strb	r3, [r7, #7]
 800cc76:	4613      	mov	r3, r2
 800cc78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cc82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d123      	bne.n	800ccd2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cc8a:	88bb      	ldrh	r3, [r7, #4]
 800cc8c:	3303      	adds	r3, #3
 800cc8e:	089b      	lsrs	r3, r3, #2
 800cc90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cc92:	2300      	movs	r3, #0
 800cc94:	61bb      	str	r3, [r7, #24]
 800cc96:	e018      	b.n	800ccca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cc98:	79fb      	ldrb	r3, [r7, #7]
 800cc9a:	031a      	lsls	r2, r3, #12
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	4413      	add	r3, r2
 800cca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cca4:	461a      	mov	r2, r3
 800cca6:	69fb      	ldr	r3, [r7, #28]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	61bb      	str	r3, [r7, #24]
 800ccca:	69ba      	ldr	r2, [r7, #24]
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d3e2      	bcc.n	800cc98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ccd2:	2300      	movs	r3, #0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3724      	adds	r7, #36	@ 0x24
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b08b      	sub	sp, #44	@ 0x2c
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	4613      	mov	r3, r2
 800ccec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ccf6:	88fb      	ldrh	r3, [r7, #6]
 800ccf8:	089b      	lsrs	r3, r3, #2
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ccfe:	88fb      	ldrh	r3, [r7, #6]
 800cd00:	f003 0303 	and.w	r3, r3, #3
 800cd04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cd06:	2300      	movs	r3, #0
 800cd08:	623b      	str	r3, [r7, #32]
 800cd0a:	e014      	b.n	800cd36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd16:	601a      	str	r2, [r3, #0]
    pDest++;
 800cd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd20:	3301      	adds	r3, #1
 800cd22:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd26:	3301      	adds	r3, #1
 800cd28:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800cd30:	6a3b      	ldr	r3, [r7, #32]
 800cd32:	3301      	adds	r3, #1
 800cd34:	623b      	str	r3, [r7, #32]
 800cd36:	6a3a      	ldr	r2, [r7, #32]
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d3e6      	bcc.n	800cd0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cd3e:	8bfb      	ldrh	r3, [r7, #30]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d01e      	beq.n	800cd82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cd44:	2300      	movs	r3, #0
 800cd46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cd48:	69bb      	ldr	r3, [r7, #24]
 800cd4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd4e:	461a      	mov	r2, r3
 800cd50:	f107 0310 	add.w	r3, r7, #16
 800cd54:	6812      	ldr	r2, [r2, #0]
 800cd56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cd58:	693a      	ldr	r2, [r7, #16]
 800cd5a:	6a3b      	ldr	r3, [r7, #32]
 800cd5c:	b2db      	uxtb	r3, r3
 800cd5e:	00db      	lsls	r3, r3, #3
 800cd60:	fa22 f303 	lsr.w	r3, r2, r3
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd68:	701a      	strb	r2, [r3, #0]
      i++;
 800cd6a:	6a3b      	ldr	r3, [r7, #32]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	623b      	str	r3, [r7, #32]
      pDest++;
 800cd70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd72:	3301      	adds	r3, #1
 800cd74:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800cd76:	8bfb      	ldrh	r3, [r7, #30]
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cd7c:	8bfb      	ldrh	r3, [r7, #30]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1ea      	bne.n	800cd58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	372c      	adds	r7, #44	@ 0x2c
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	785b      	ldrb	r3, [r3, #1]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d12c      	bne.n	800ce06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	015a      	lsls	r2, r3, #5
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	db12      	blt.n	800cde4 <USB_EPSetStall+0x54>
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00f      	beq.n	800cde4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	015a      	lsls	r2, r3, #5
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	4413      	add	r3, r2
 800cdcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	0151      	lsls	r1, r2, #5
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	440a      	add	r2, r1
 800cdda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cdde:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cde2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	015a      	lsls	r2, r3, #5
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	4413      	add	r3, r2
 800cdec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	68ba      	ldr	r2, [r7, #8]
 800cdf4:	0151      	lsls	r1, r2, #5
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	440a      	add	r2, r1
 800cdfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cdfe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ce02:	6013      	str	r3, [r2, #0]
 800ce04:	e02b      	b.n	800ce5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	015a      	lsls	r2, r3, #5
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	4413      	add	r3, r2
 800ce0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	db12      	blt.n	800ce3e <USB_EPSetStall+0xae>
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00f      	beq.n	800ce3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	015a      	lsls	r2, r3, #5
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	4413      	add	r3, r2
 800ce26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	68ba      	ldr	r2, [r7, #8]
 800ce2e:	0151      	lsls	r1, r2, #5
 800ce30:	68fa      	ldr	r2, [r7, #12]
 800ce32:	440a      	add	r2, r1
 800ce34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ce38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ce3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	015a      	lsls	r2, r3, #5
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	4413      	add	r3, r2
 800ce46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	68ba      	ldr	r2, [r7, #8]
 800ce4e:	0151      	lsls	r1, r2, #5
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	440a      	add	r2, r1
 800ce54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ce58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ce5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce5e:	2300      	movs	r3, #0
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3714      	adds	r7, #20
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b085      	sub	sp, #20
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	785b      	ldrb	r3, [r3, #1]
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d128      	bne.n	800ceda <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	015a      	lsls	r2, r3, #5
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	4413      	add	r3, r2
 800ce90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	68ba      	ldr	r2, [r7, #8]
 800ce98:	0151      	lsls	r1, r2, #5
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	440a      	add	r2, r1
 800ce9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cea2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cea6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	791b      	ldrb	r3, [r3, #4]
 800ceac:	2b03      	cmp	r3, #3
 800ceae:	d003      	beq.n	800ceb8 <USB_EPClearStall+0x4c>
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	791b      	ldrb	r3, [r3, #4]
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d138      	bne.n	800cf2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	015a      	lsls	r2, r3, #5
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	4413      	add	r3, r2
 800cec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	68ba      	ldr	r2, [r7, #8]
 800cec8:	0151      	lsls	r1, r2, #5
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	440a      	add	r2, r1
 800cece:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ced2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ced6:	6013      	str	r3, [r2, #0]
 800ced8:	e027      	b.n	800cf2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	015a      	lsls	r2, r3, #5
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	4413      	add	r3, r2
 800cee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	68ba      	ldr	r2, [r7, #8]
 800ceea:	0151      	lsls	r1, r2, #5
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	440a      	add	r2, r1
 800cef0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cef4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cef8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	791b      	ldrb	r3, [r3, #4]
 800cefe:	2b03      	cmp	r3, #3
 800cf00:	d003      	beq.n	800cf0a <USB_EPClearStall+0x9e>
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	791b      	ldrb	r3, [r3, #4]
 800cf06:	2b02      	cmp	r3, #2
 800cf08:	d10f      	bne.n	800cf2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	015a      	lsls	r2, r3, #5
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	4413      	add	r3, r2
 800cf12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	0151      	lsls	r1, r2, #5
 800cf1c:	68fa      	ldr	r2, [r7, #12]
 800cf1e:	440a      	add	r2, r1
 800cf20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cf24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cf28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3714      	adds	r7, #20
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	460b      	mov	r3, r1
 800cf42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cf56:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800cf5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	78fb      	ldrb	r3, [r7, #3]
 800cf66:	011b      	lsls	r3, r3, #4
 800cf68:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800cf6c:	68f9      	ldr	r1, [r7, #12]
 800cf6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cf72:	4313      	orrs	r3, r2
 800cf74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3714      	adds	r7, #20
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b085      	sub	sp, #20
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cf9e:	f023 0303 	bic.w	r3, r3, #3
 800cfa2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cfaa:	685b      	ldr	r3, [r3, #4]
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cfb2:	f023 0302 	bic.w	r3, r3, #2
 800cfb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3714      	adds	r7, #20
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr

0800cfc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800cfc6:	b480      	push	{r7}
 800cfc8:	b085      	sub	sp, #20
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cfe0:	f023 0303 	bic.w	r3, r3, #3
 800cfe4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cff4:	f043 0302 	orr.w	r3, r3, #2
 800cff8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cffa:	2300      	movs	r3, #0
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3714      	adds	r7, #20
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	695b      	ldr	r3, [r3, #20]
 800d014:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	699b      	ldr	r3, [r3, #24]
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	4013      	ands	r3, r2
 800d01e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d020:	68fb      	ldr	r3, [r7, #12]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3714      	adds	r7, #20
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr

0800d02e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d02e:	b480      	push	{r7}
 800d030:	b085      	sub	sp, #20
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d040:	699b      	ldr	r3, [r3, #24]
 800d042:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d04a:	69db      	ldr	r3, [r3, #28]
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	4013      	ands	r3, r2
 800d050:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	0c1b      	lsrs	r3, r3, #16
}
 800d056:	4618      	mov	r0, r3
 800d058:	3714      	adds	r7, #20
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr

0800d062 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d062:	b480      	push	{r7}
 800d064:	b085      	sub	sp, #20
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d074:	699b      	ldr	r3, [r3, #24]
 800d076:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d07e:	69db      	ldr	r3, [r3, #28]
 800d080:	68ba      	ldr	r2, [r7, #8]
 800d082:	4013      	ands	r3, r2
 800d084:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	b29b      	uxth	r3, r3
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3714      	adds	r7, #20
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr

0800d096 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d096:	b480      	push	{r7}
 800d098:	b085      	sub	sp, #20
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
 800d09e:	460b      	mov	r3, r1
 800d0a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d0a6:	78fb      	ldrb	r3, [r7, #3]
 800d0a8:	015a      	lsls	r2, r3, #5
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0bc:	695b      	ldr	r3, [r3, #20]
 800d0be:	68ba      	ldr	r2, [r7, #8]
 800d0c0:	4013      	ands	r3, r2
 800d0c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d0c4:	68bb      	ldr	r3, [r7, #8]
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3714      	adds	r7, #20
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr

0800d0d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d0d2:	b480      	push	{r7}
 800d0d4:	b087      	sub	sp, #28
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
 800d0da:	460b      	mov	r3, r1
 800d0dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0e8:	691b      	ldr	r3, [r3, #16]
 800d0ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d0f6:	78fb      	ldrb	r3, [r7, #3]
 800d0f8:	f003 030f 	and.w	r3, r3, #15
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	fa22 f303 	lsr.w	r3, r2, r3
 800d102:	01db      	lsls	r3, r3, #7
 800d104:	b2db      	uxtb	r3, r3
 800d106:	693a      	ldr	r2, [r7, #16]
 800d108:	4313      	orrs	r3, r2
 800d10a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d10c:	78fb      	ldrb	r3, [r7, #3]
 800d10e:	015a      	lsls	r2, r3, #5
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	4413      	add	r3, r2
 800d114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d118:	689b      	ldr	r3, [r3, #8]
 800d11a:	693a      	ldr	r2, [r7, #16]
 800d11c:	4013      	ands	r3, r2
 800d11e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d120:	68bb      	ldr	r3, [r7, #8]
}
 800d122:	4618      	mov	r0, r3
 800d124:	371c      	adds	r7, #28
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr

0800d12e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d12e:	b480      	push	{r7}
 800d130:	b083      	sub	sp, #12
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	f003 0301 	and.w	r3, r3, #1
}
 800d13e:	4618      	mov	r0, r3
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
	...

0800d14c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d166:	4619      	mov	r1, r3
 800d168:	4b09      	ldr	r3, [pc, #36]	@ (800d190 <USB_ActivateSetup+0x44>)
 800d16a:	4013      	ands	r3, r2
 800d16c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d17c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d180:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d182:	2300      	movs	r3, #0
}
 800d184:	4618      	mov	r0, r3
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr
 800d190:	fffff800 	.word	0xfffff800

0800d194 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800d194:	b480      	push	{r7}
 800d196:	b087      	sub	sp, #28
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	460b      	mov	r3, r1
 800d19e:	607a      	str	r2, [r7, #4]
 800d1a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	333c      	adds	r3, #60	@ 0x3c
 800d1aa:	3304      	adds	r3, #4
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	4a26      	ldr	r2, [pc, #152]	@ (800d24c <USB_EP0_OutStart+0xb8>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d90a      	bls.n	800d1ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d1c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d1c8:	d101      	bne.n	800d1ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	e037      	b.n	800d23e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1e0:	691b      	ldr	r3, [r3, #16]
 800d1e2:	697a      	ldr	r2, [r7, #20]
 800d1e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d1e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d1ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	697a      	ldr	r2, [r7, #20]
 800d1f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d1fc:	f043 0318 	orr.w	r3, r3, #24
 800d200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	697a      	ldr	r2, [r7, #20]
 800d20c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d210:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800d214:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d216:	7afb      	ldrb	r3, [r7, #11]
 800d218:	2b01      	cmp	r3, #1
 800d21a:	d10f      	bne.n	800d23c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d222:	461a      	mov	r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	697a      	ldr	r2, [r7, #20]
 800d232:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d236:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800d23a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	371c      	adds	r7, #28
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop
 800d24c:	4f54300a 	.word	0x4f54300a

0800d250 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d250:	b480      	push	{r7}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d258:	2300      	movs	r3, #0
 800d25a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	3301      	adds	r3, #1
 800d260:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d268:	d901      	bls.n	800d26e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d26a:	2303      	movs	r3, #3
 800d26c:	e01b      	b.n	800d2a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	2b00      	cmp	r3, #0
 800d274:	daf2      	bge.n	800d25c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d276:	2300      	movs	r3, #0
 800d278:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	f043 0201 	orr.w	r2, r3, #1
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	3301      	adds	r3, #1
 800d28a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d292:	d901      	bls.n	800d298 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d294:	2303      	movs	r3, #3
 800d296:	e006      	b.n	800d2a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	691b      	ldr	r3, [r3, #16]
 800d29c:	f003 0301 	and.w	r3, r3, #1
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d0f0      	beq.n	800d286 <USB_CoreReset+0x36>

  return HAL_OK;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3714      	adds	r7, #20
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
	...

0800d2b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	460b      	mov	r3, r1
 800d2be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d2c0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d2c4:	f002 fcf4 	bl	800fcb0 <USBD_static_malloc>
 800d2c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d109      	bne.n	800d2e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	32b0      	adds	r2, #176	@ 0xb0
 800d2da:	2100      	movs	r1, #0
 800d2dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d2e0:	2302      	movs	r3, #2
 800d2e2:	e0d4      	b.n	800d48e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d2e4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d2e8:	2100      	movs	r1, #0
 800d2ea:	68f8      	ldr	r0, [r7, #12]
 800d2ec:	f002 fd24 	bl	800fd38 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	32b0      	adds	r2, #176	@ 0xb0
 800d2fa:	68f9      	ldr	r1, [r7, #12]
 800d2fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	32b0      	adds	r2, #176	@ 0xb0
 800d30a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	7c1b      	ldrb	r3, [r3, #16]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d138      	bne.n	800d38e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d31c:	4b5e      	ldr	r3, [pc, #376]	@ (800d498 <USBD_CDC_Init+0x1e4>)
 800d31e:	7819      	ldrb	r1, [r3, #0]
 800d320:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d324:	2202      	movs	r2, #2
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f002 fb9f 	bl	800fa6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d32c:	4b5a      	ldr	r3, [pc, #360]	@ (800d498 <USBD_CDC_Init+0x1e4>)
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	f003 020f 	and.w	r2, r3, #15
 800d334:	6879      	ldr	r1, [r7, #4]
 800d336:	4613      	mov	r3, r2
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4413      	add	r3, r2
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	440b      	add	r3, r1
 800d340:	3324      	adds	r3, #36	@ 0x24
 800d342:	2201      	movs	r2, #1
 800d344:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d346:	4b55      	ldr	r3, [pc, #340]	@ (800d49c <USBD_CDC_Init+0x1e8>)
 800d348:	7819      	ldrb	r1, [r3, #0]
 800d34a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d34e:	2202      	movs	r2, #2
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f002 fb8a 	bl	800fa6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d356:	4b51      	ldr	r3, [pc, #324]	@ (800d49c <USBD_CDC_Init+0x1e8>)
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	f003 020f 	and.w	r2, r3, #15
 800d35e:	6879      	ldr	r1, [r7, #4]
 800d360:	4613      	mov	r3, r2
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	4413      	add	r3, r2
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	440b      	add	r3, r1
 800d36a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d36e:	2201      	movs	r2, #1
 800d370:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d372:	4b4b      	ldr	r3, [pc, #300]	@ (800d4a0 <USBD_CDC_Init+0x1ec>)
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	f003 020f 	and.w	r2, r3, #15
 800d37a:	6879      	ldr	r1, [r7, #4]
 800d37c:	4613      	mov	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	4413      	add	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	440b      	add	r3, r1
 800d386:	3326      	adds	r3, #38	@ 0x26
 800d388:	2210      	movs	r2, #16
 800d38a:	801a      	strh	r2, [r3, #0]
 800d38c:	e035      	b.n	800d3fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d38e:	4b42      	ldr	r3, [pc, #264]	@ (800d498 <USBD_CDC_Init+0x1e4>)
 800d390:	7819      	ldrb	r1, [r3, #0]
 800d392:	2340      	movs	r3, #64	@ 0x40
 800d394:	2202      	movs	r2, #2
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f002 fb67 	bl	800fa6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d39c:	4b3e      	ldr	r3, [pc, #248]	@ (800d498 <USBD_CDC_Init+0x1e4>)
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	f003 020f 	and.w	r2, r3, #15
 800d3a4:	6879      	ldr	r1, [r7, #4]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	4413      	add	r3, r2
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	440b      	add	r3, r1
 800d3b0:	3324      	adds	r3, #36	@ 0x24
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d3b6:	4b39      	ldr	r3, [pc, #228]	@ (800d49c <USBD_CDC_Init+0x1e8>)
 800d3b8:	7819      	ldrb	r1, [r3, #0]
 800d3ba:	2340      	movs	r3, #64	@ 0x40
 800d3bc:	2202      	movs	r2, #2
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f002 fb53 	bl	800fa6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d3c4:	4b35      	ldr	r3, [pc, #212]	@ (800d49c <USBD_CDC_Init+0x1e8>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	f003 020f 	and.w	r2, r3, #15
 800d3cc:	6879      	ldr	r1, [r7, #4]
 800d3ce:	4613      	mov	r3, r2
 800d3d0:	009b      	lsls	r3, r3, #2
 800d3d2:	4413      	add	r3, r2
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	440b      	add	r3, r1
 800d3d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d3dc:	2201      	movs	r2, #1
 800d3de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d3e0:	4b2f      	ldr	r3, [pc, #188]	@ (800d4a0 <USBD_CDC_Init+0x1ec>)
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	f003 020f 	and.w	r2, r3, #15
 800d3e8:	6879      	ldr	r1, [r7, #4]
 800d3ea:	4613      	mov	r3, r2
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	4413      	add	r3, r2
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	440b      	add	r3, r1
 800d3f4:	3326      	adds	r3, #38	@ 0x26
 800d3f6:	2210      	movs	r2, #16
 800d3f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d3fa:	4b29      	ldr	r3, [pc, #164]	@ (800d4a0 <USBD_CDC_Init+0x1ec>)
 800d3fc:	7819      	ldrb	r1, [r3, #0]
 800d3fe:	2308      	movs	r3, #8
 800d400:	2203      	movs	r2, #3
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f002 fb31 	bl	800fa6a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d408:	4b25      	ldr	r3, [pc, #148]	@ (800d4a0 <USBD_CDC_Init+0x1ec>)
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	f003 020f 	and.w	r2, r3, #15
 800d410:	6879      	ldr	r1, [r7, #4]
 800d412:	4613      	mov	r3, r2
 800d414:	009b      	lsls	r3, r3, #2
 800d416:	4413      	add	r3, r2
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	440b      	add	r3, r1
 800d41c:	3324      	adds	r3, #36	@ 0x24
 800d41e:	2201      	movs	r2, #1
 800d420:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2200      	movs	r2, #0
 800d426:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	33b0      	adds	r3, #176	@ 0xb0
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	4413      	add	r3, r2
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2200      	movs	r2, #0
 800d442:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2200      	movs	r2, #0
 800d44a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d454:	2b00      	cmp	r3, #0
 800d456:	d101      	bne.n	800d45c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d458:	2302      	movs	r3, #2
 800d45a:	e018      	b.n	800d48e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	7c1b      	ldrb	r3, [r3, #16]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d10a      	bne.n	800d47a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d464:	4b0d      	ldr	r3, [pc, #52]	@ (800d49c <USBD_CDC_Init+0x1e8>)
 800d466:	7819      	ldrb	r1, [r3, #0]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d46e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f002 fbe8 	bl	800fc48 <USBD_LL_PrepareReceive>
 800d478:	e008      	b.n	800d48c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d47a:	4b08      	ldr	r3, [pc, #32]	@ (800d49c <USBD_CDC_Init+0x1e8>)
 800d47c:	7819      	ldrb	r1, [r3, #0]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d484:	2340      	movs	r3, #64	@ 0x40
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f002 fbde 	bl	800fc48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d48c:	2300      	movs	r3, #0
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3710      	adds	r7, #16
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	24000097 	.word	0x24000097
 800d49c:	24000098 	.word	0x24000098
 800d4a0:	24000099 	.word	0x24000099

0800d4a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d4b0:	4b3a      	ldr	r3, [pc, #232]	@ (800d59c <USBD_CDC_DeInit+0xf8>)
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f002 fafd 	bl	800fab6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d4bc:	4b37      	ldr	r3, [pc, #220]	@ (800d59c <USBD_CDC_DeInit+0xf8>)
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	f003 020f 	and.w	r2, r3, #15
 800d4c4:	6879      	ldr	r1, [r7, #4]
 800d4c6:	4613      	mov	r3, r2
 800d4c8:	009b      	lsls	r3, r3, #2
 800d4ca:	4413      	add	r3, r2
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	440b      	add	r3, r1
 800d4d0:	3324      	adds	r3, #36	@ 0x24
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d4d6:	4b32      	ldr	r3, [pc, #200]	@ (800d5a0 <USBD_CDC_DeInit+0xfc>)
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	4619      	mov	r1, r3
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f002 faea 	bl	800fab6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d4e2:	4b2f      	ldr	r3, [pc, #188]	@ (800d5a0 <USBD_CDC_DeInit+0xfc>)
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	f003 020f 	and.w	r2, r3, #15
 800d4ea:	6879      	ldr	r1, [r7, #4]
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	440b      	add	r3, r1
 800d4f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d4fe:	4b29      	ldr	r3, [pc, #164]	@ (800d5a4 <USBD_CDC_DeInit+0x100>)
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	4619      	mov	r1, r3
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f002 fad6 	bl	800fab6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d50a:	4b26      	ldr	r3, [pc, #152]	@ (800d5a4 <USBD_CDC_DeInit+0x100>)
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	f003 020f 	and.w	r2, r3, #15
 800d512:	6879      	ldr	r1, [r7, #4]
 800d514:	4613      	mov	r3, r2
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	4413      	add	r3, r2
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	440b      	add	r3, r1
 800d51e:	3324      	adds	r3, #36	@ 0x24
 800d520:	2200      	movs	r2, #0
 800d522:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d524:	4b1f      	ldr	r3, [pc, #124]	@ (800d5a4 <USBD_CDC_DeInit+0x100>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	f003 020f 	and.w	r2, r3, #15
 800d52c:	6879      	ldr	r1, [r7, #4]
 800d52e:	4613      	mov	r3, r2
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	4413      	add	r3, r2
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	440b      	add	r3, r1
 800d538:	3326      	adds	r3, #38	@ 0x26
 800d53a:	2200      	movs	r2, #0
 800d53c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	32b0      	adds	r2, #176	@ 0xb0
 800d548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d01f      	beq.n	800d590 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	33b0      	adds	r3, #176	@ 0xb0
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	4413      	add	r3, r2
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	32b0      	adds	r2, #176	@ 0xb0
 800d56e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d572:	4618      	mov	r0, r3
 800d574:	f002 fbaa 	bl	800fccc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	32b0      	adds	r2, #176	@ 0xb0
 800d582:	2100      	movs	r1, #0
 800d584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2200      	movs	r2, #0
 800d58c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d590:	2300      	movs	r3, #0
}
 800d592:	4618      	mov	r0, r3
 800d594:	3708      	adds	r7, #8
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	24000097 	.word	0x24000097
 800d5a0:	24000098 	.word	0x24000098
 800d5a4:	24000099 	.word	0x24000099

0800d5a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b086      	sub	sp, #24
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	32b0      	adds	r2, #176	@ 0xb0
 800d5bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d101      	bne.n	800d5d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d5d4:	2303      	movs	r3, #3
 800d5d6:	e0bf      	b.n	800d758 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d050      	beq.n	800d686 <USBD_CDC_Setup+0xde>
 800d5e4:	2b20      	cmp	r3, #32
 800d5e6:	f040 80af 	bne.w	800d748 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	88db      	ldrh	r3, [r3, #6]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d03a      	beq.n	800d668 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	b25b      	sxtb	r3, r3
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	da1b      	bge.n	800d634 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	33b0      	adds	r3, #176	@ 0xb0
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	4413      	add	r3, r2
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	683a      	ldr	r2, [r7, #0]
 800d610:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d612:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d614:	683a      	ldr	r2, [r7, #0]
 800d616:	88d2      	ldrh	r2, [r2, #6]
 800d618:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	88db      	ldrh	r3, [r3, #6]
 800d61e:	2b07      	cmp	r3, #7
 800d620:	bf28      	it	cs
 800d622:	2307      	movcs	r3, #7
 800d624:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	89fa      	ldrh	r2, [r7, #14]
 800d62a:	4619      	mov	r1, r3
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f001 fdbd 	bl	800f1ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d632:	e090      	b.n	800d756 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	785a      	ldrb	r2, [r3, #1]
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	88db      	ldrh	r3, [r3, #6]
 800d642:	2b3f      	cmp	r3, #63	@ 0x3f
 800d644:	d803      	bhi.n	800d64e <USBD_CDC_Setup+0xa6>
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	88db      	ldrh	r3, [r3, #6]
 800d64a:	b2da      	uxtb	r2, r3
 800d64c:	e000      	b.n	800d650 <USBD_CDC_Setup+0xa8>
 800d64e:	2240      	movs	r2, #64	@ 0x40
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d656:	6939      	ldr	r1, [r7, #16]
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d65e:	461a      	mov	r2, r3
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f001 fdcf 	bl	800f204 <USBD_CtlPrepareRx>
      break;
 800d666:	e076      	b.n	800d756 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	33b0      	adds	r3, #176	@ 0xb0
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	4413      	add	r3, r2
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	683a      	ldr	r2, [r7, #0]
 800d67c:	7850      	ldrb	r0, [r2, #1]
 800d67e:	2200      	movs	r2, #0
 800d680:	6839      	ldr	r1, [r7, #0]
 800d682:	4798      	blx	r3
      break;
 800d684:	e067      	b.n	800d756 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	785b      	ldrb	r3, [r3, #1]
 800d68a:	2b0b      	cmp	r3, #11
 800d68c:	d851      	bhi.n	800d732 <USBD_CDC_Setup+0x18a>
 800d68e:	a201      	add	r2, pc, #4	@ (adr r2, 800d694 <USBD_CDC_Setup+0xec>)
 800d690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d694:	0800d6c5 	.word	0x0800d6c5
 800d698:	0800d741 	.word	0x0800d741
 800d69c:	0800d733 	.word	0x0800d733
 800d6a0:	0800d733 	.word	0x0800d733
 800d6a4:	0800d733 	.word	0x0800d733
 800d6a8:	0800d733 	.word	0x0800d733
 800d6ac:	0800d733 	.word	0x0800d733
 800d6b0:	0800d733 	.word	0x0800d733
 800d6b4:	0800d733 	.word	0x0800d733
 800d6b8:	0800d733 	.word	0x0800d733
 800d6bc:	0800d6ef 	.word	0x0800d6ef
 800d6c0:	0800d719 	.word	0x0800d719
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	2b03      	cmp	r3, #3
 800d6ce:	d107      	bne.n	800d6e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d6d0:	f107 030a 	add.w	r3, r7, #10
 800d6d4:	2202      	movs	r2, #2
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f001 fd67 	bl	800f1ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d6de:	e032      	b.n	800d746 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d6e0:	6839      	ldr	r1, [r7, #0]
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f001 fce5 	bl	800f0b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d6e8:	2303      	movs	r3, #3
 800d6ea:	75fb      	strb	r3, [r7, #23]
          break;
 800d6ec:	e02b      	b.n	800d746 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	2b03      	cmp	r3, #3
 800d6f8:	d107      	bne.n	800d70a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d6fa:	f107 030d 	add.w	r3, r7, #13
 800d6fe:	2201      	movs	r2, #1
 800d700:	4619      	mov	r1, r3
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f001 fd52 	bl	800f1ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d708:	e01d      	b.n	800d746 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d70a:	6839      	ldr	r1, [r7, #0]
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f001 fcd0 	bl	800f0b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d712:	2303      	movs	r3, #3
 800d714:	75fb      	strb	r3, [r7, #23]
          break;
 800d716:	e016      	b.n	800d746 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	2b03      	cmp	r3, #3
 800d722:	d00f      	beq.n	800d744 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d724:	6839      	ldr	r1, [r7, #0]
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f001 fcc3 	bl	800f0b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d72c:	2303      	movs	r3, #3
 800d72e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d730:	e008      	b.n	800d744 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d732:	6839      	ldr	r1, [r7, #0]
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f001 fcbc 	bl	800f0b2 <USBD_CtlError>
          ret = USBD_FAIL;
 800d73a:	2303      	movs	r3, #3
 800d73c:	75fb      	strb	r3, [r7, #23]
          break;
 800d73e:	e002      	b.n	800d746 <USBD_CDC_Setup+0x19e>
          break;
 800d740:	bf00      	nop
 800d742:	e008      	b.n	800d756 <USBD_CDC_Setup+0x1ae>
          break;
 800d744:	bf00      	nop
      }
      break;
 800d746:	e006      	b.n	800d756 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d748:	6839      	ldr	r1, [r7, #0]
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f001 fcb1 	bl	800f0b2 <USBD_CtlError>
      ret = USBD_FAIL;
 800d750:	2303      	movs	r3, #3
 800d752:	75fb      	strb	r3, [r7, #23]
      break;
 800d754:	bf00      	nop
  }

  return (uint8_t)ret;
 800d756:	7dfb      	ldrb	r3, [r7, #23]
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3718      	adds	r7, #24
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	460b      	mov	r3, r1
 800d76a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d772:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	32b0      	adds	r2, #176	@ 0xb0
 800d77e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d101      	bne.n	800d78a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d786:	2303      	movs	r3, #3
 800d788:	e065      	b.n	800d856 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	32b0      	adds	r2, #176	@ 0xb0
 800d794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d798:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d79a:	78fb      	ldrb	r3, [r7, #3]
 800d79c:	f003 020f 	and.w	r2, r3, #15
 800d7a0:	6879      	ldr	r1, [r7, #4]
 800d7a2:	4613      	mov	r3, r2
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	4413      	add	r3, r2
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	440b      	add	r3, r1
 800d7ac:	3318      	adds	r3, #24
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d02f      	beq.n	800d814 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d7b4:	78fb      	ldrb	r3, [r7, #3]
 800d7b6:	f003 020f 	and.w	r2, r3, #15
 800d7ba:	6879      	ldr	r1, [r7, #4]
 800d7bc:	4613      	mov	r3, r2
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	4413      	add	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	440b      	add	r3, r1
 800d7c6:	3318      	adds	r3, #24
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	78fb      	ldrb	r3, [r7, #3]
 800d7cc:	f003 010f 	and.w	r1, r3, #15
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	00db      	lsls	r3, r3, #3
 800d7d6:	440b      	add	r3, r1
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	4403      	add	r3, r0
 800d7dc:	331c      	adds	r3, #28
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	fbb2 f1f3 	udiv	r1, r2, r3
 800d7e4:	fb01 f303 	mul.w	r3, r1, r3
 800d7e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d112      	bne.n	800d814 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d7ee:	78fb      	ldrb	r3, [r7, #3]
 800d7f0:	f003 020f 	and.w	r2, r3, #15
 800d7f4:	6879      	ldr	r1, [r7, #4]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	009b      	lsls	r3, r3, #2
 800d7fa:	4413      	add	r3, r2
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	440b      	add	r3, r1
 800d800:	3318      	adds	r3, #24
 800d802:	2200      	movs	r2, #0
 800d804:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d806:	78f9      	ldrb	r1, [r7, #3]
 800d808:	2300      	movs	r3, #0
 800d80a:	2200      	movs	r2, #0
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f002 f9fa 	bl	800fc06 <USBD_LL_Transmit>
 800d812:	e01f      	b.n	800d854 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	2200      	movs	r2, #0
 800d818:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	33b0      	adds	r3, #176	@ 0xb0
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	4413      	add	r3, r2
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	691b      	ldr	r3, [r3, #16]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d010      	beq.n	800d854 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	33b0      	adds	r3, #176	@ 0xb0
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	4413      	add	r3, r2
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	691b      	ldr	r3, [r3, #16]
 800d844:	68ba      	ldr	r2, [r7, #8]
 800d846:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d84a:	68ba      	ldr	r2, [r7, #8]
 800d84c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d850:	78fa      	ldrb	r2, [r7, #3]
 800d852:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d854:	2300      	movs	r3, #0
}
 800d856:	4618      	mov	r0, r3
 800d858:	3710      	adds	r7, #16
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b084      	sub	sp, #16
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
 800d866:	460b      	mov	r3, r1
 800d868:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	32b0      	adds	r2, #176	@ 0xb0
 800d874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d878:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	32b0      	adds	r2, #176	@ 0xb0
 800d884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d101      	bne.n	800d890 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d88c:	2303      	movs	r3, #3
 800d88e:	e01a      	b.n	800d8c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d890:	78fb      	ldrb	r3, [r7, #3]
 800d892:	4619      	mov	r1, r3
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f002 f9f8 	bl	800fc8a <USBD_LL_GetRxDataSize>
 800d89a:	4602      	mov	r2, r0
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	33b0      	adds	r3, #176	@ 0xb0
 800d8ac:	009b      	lsls	r3, r3, #2
 800d8ae:	4413      	add	r3, r2
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	68fa      	ldr	r2, [r7, #12]
 800d8b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d8ba:	68fa      	ldr	r2, [r7, #12]
 800d8bc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d8c0:	4611      	mov	r1, r2
 800d8c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3710      	adds	r7, #16
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}

0800d8ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d8ce:	b580      	push	{r7, lr}
 800d8d0:	b084      	sub	sp, #16
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	32b0      	adds	r2, #176	@ 0xb0
 800d8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d101      	bne.n	800d8f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d8ec:	2303      	movs	r3, #3
 800d8ee:	e024      	b.n	800d93a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	33b0      	adds	r3, #176	@ 0xb0
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	4413      	add	r3, r2
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d019      	beq.n	800d938 <USBD_CDC_EP0_RxReady+0x6a>
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d90a:	2bff      	cmp	r3, #255	@ 0xff
 800d90c:	d014      	beq.n	800d938 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	33b0      	adds	r3, #176	@ 0xb0
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	4413      	add	r3, r2
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	68fa      	ldr	r2, [r7, #12]
 800d922:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d926:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d928:	68fa      	ldr	r2, [r7, #12]
 800d92a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d92e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	22ff      	movs	r2, #255	@ 0xff
 800d934:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d938:	2300      	movs	r3, #0
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3710      	adds	r7, #16
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
	...

0800d944 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d94c:	2182      	movs	r1, #130	@ 0x82
 800d94e:	4818      	ldr	r0, [pc, #96]	@ (800d9b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d950:	f000 fd4f 	bl	800e3f2 <USBD_GetEpDesc>
 800d954:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d956:	2101      	movs	r1, #1
 800d958:	4815      	ldr	r0, [pc, #84]	@ (800d9b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d95a:	f000 fd4a 	bl	800e3f2 <USBD_GetEpDesc>
 800d95e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d960:	2181      	movs	r1, #129	@ 0x81
 800d962:	4813      	ldr	r0, [pc, #76]	@ (800d9b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d964:	f000 fd45 	bl	800e3f2 <USBD_GetEpDesc>
 800d968:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d002      	beq.n	800d976 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	2210      	movs	r2, #16
 800d974:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d006      	beq.n	800d98a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	2200      	movs	r2, #0
 800d980:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d984:	711a      	strb	r2, [r3, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d006      	beq.n	800d99e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2200      	movs	r2, #0
 800d994:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d998:	711a      	strb	r2, [r3, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2243      	movs	r2, #67	@ 0x43
 800d9a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d9a4:	4b02      	ldr	r3, [pc, #8]	@ (800d9b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3718      	adds	r7, #24
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	24000054 	.word	0x24000054

0800d9b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b086      	sub	sp, #24
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d9bc:	2182      	movs	r1, #130	@ 0x82
 800d9be:	4818      	ldr	r0, [pc, #96]	@ (800da20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d9c0:	f000 fd17 	bl	800e3f2 <USBD_GetEpDesc>
 800d9c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d9c6:	2101      	movs	r1, #1
 800d9c8:	4815      	ldr	r0, [pc, #84]	@ (800da20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d9ca:	f000 fd12 	bl	800e3f2 <USBD_GetEpDesc>
 800d9ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d9d0:	2181      	movs	r1, #129	@ 0x81
 800d9d2:	4813      	ldr	r0, [pc, #76]	@ (800da20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d9d4:	f000 fd0d 	bl	800e3f2 <USBD_GetEpDesc>
 800d9d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d002      	beq.n	800d9e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	2210      	movs	r2, #16
 800d9e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d006      	beq.n	800d9fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	711a      	strb	r2, [r3, #4]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f042 0202 	orr.w	r2, r2, #2
 800d9f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d006      	beq.n	800da0e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2200      	movs	r2, #0
 800da04:	711a      	strb	r2, [r3, #4]
 800da06:	2200      	movs	r2, #0
 800da08:	f042 0202 	orr.w	r2, r2, #2
 800da0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2243      	movs	r2, #67	@ 0x43
 800da12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800da14:	4b02      	ldr	r3, [pc, #8]	@ (800da20 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800da16:	4618      	mov	r0, r3
 800da18:	3718      	adds	r7, #24
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	24000054 	.word	0x24000054

0800da24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800da2c:	2182      	movs	r1, #130	@ 0x82
 800da2e:	4818      	ldr	r0, [pc, #96]	@ (800da90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800da30:	f000 fcdf 	bl	800e3f2 <USBD_GetEpDesc>
 800da34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800da36:	2101      	movs	r1, #1
 800da38:	4815      	ldr	r0, [pc, #84]	@ (800da90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800da3a:	f000 fcda 	bl	800e3f2 <USBD_GetEpDesc>
 800da3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800da40:	2181      	movs	r1, #129	@ 0x81
 800da42:	4813      	ldr	r0, [pc, #76]	@ (800da90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800da44:	f000 fcd5 	bl	800e3f2 <USBD_GetEpDesc>
 800da48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	2210      	movs	r2, #16
 800da54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d006      	beq.n	800da6a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	2200      	movs	r2, #0
 800da60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800da64:	711a      	strb	r2, [r3, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d006      	beq.n	800da7e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2200      	movs	r2, #0
 800da74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800da78:	711a      	strb	r2, [r3, #4]
 800da7a:	2200      	movs	r2, #0
 800da7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2243      	movs	r2, #67	@ 0x43
 800da82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800da84:	4b02      	ldr	r3, [pc, #8]	@ (800da90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800da86:	4618      	mov	r0, r3
 800da88:	3718      	adds	r7, #24
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	24000054 	.word	0x24000054

0800da94 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	220a      	movs	r2, #10
 800daa0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800daa2:	4b03      	ldr	r3, [pc, #12]	@ (800dab0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	370c      	adds	r7, #12
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr
 800dab0:	24000010 	.word	0x24000010

0800dab4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d101      	bne.n	800dac8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dac4:	2303      	movs	r3, #3
 800dac6:	e009      	b.n	800dadc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	33b0      	adds	r3, #176	@ 0xb0
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	4413      	add	r3, r2
 800dad6:	683a      	ldr	r2, [r7, #0]
 800dad8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	370c      	adds	r7, #12
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dae8:	b480      	push	{r7}
 800daea:	b087      	sub	sp, #28
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	32b0      	adds	r2, #176	@ 0xb0
 800dafe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db02:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d101      	bne.n	800db0e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800db0a:	2303      	movs	r3, #3
 800db0c:	e008      	b.n	800db20 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	68ba      	ldr	r2, [r7, #8]
 800db12:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	371c      	adds	r7, #28
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	32b0      	adds	r2, #176	@ 0xb0
 800db40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d101      	bne.n	800db50 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800db4c:	2303      	movs	r3, #3
 800db4e:	e004      	b.n	800db5a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	683a      	ldr	r2, [r7, #0]
 800db54:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800db58:	2300      	movs	r3, #0
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3714      	adds	r7, #20
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr
	...

0800db68 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	32b0      	adds	r2, #176	@ 0xb0
 800db7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db7e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800db80:	2301      	movs	r3, #1
 800db82:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d101      	bne.n	800db8e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800db8a:	2303      	movs	r3, #3
 800db8c:	e025      	b.n	800dbda <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800db94:	2b00      	cmp	r3, #0
 800db96:	d11f      	bne.n	800dbd8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	2201      	movs	r2, #1
 800db9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800dba0:	4b10      	ldr	r3, [pc, #64]	@ (800dbe4 <USBD_CDC_TransmitPacket+0x7c>)
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	f003 020f 	and.w	r2, r3, #15
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	4413      	add	r3, r2
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	4403      	add	r3, r0
 800dbba:	3318      	adds	r3, #24
 800dbbc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800dbbe:	4b09      	ldr	r3, [pc, #36]	@ (800dbe4 <USBD_CDC_TransmitPacket+0x7c>)
 800dbc0:	7819      	ldrb	r1, [r3, #0]
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f002 f819 	bl	800fc06 <USBD_LL_Transmit>

    ret = USBD_OK;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3710      	adds	r7, #16
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	24000097 	.word	0x24000097

0800dbe8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	32b0      	adds	r2, #176	@ 0xb0
 800dbfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbfe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	32b0      	adds	r2, #176	@ 0xb0
 800dc0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d101      	bne.n	800dc16 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800dc12:	2303      	movs	r3, #3
 800dc14:	e018      	b.n	800dc48 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	7c1b      	ldrb	r3, [r3, #16]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d10a      	bne.n	800dc34 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc1e:	4b0c      	ldr	r3, [pc, #48]	@ (800dc50 <USBD_CDC_ReceivePacket+0x68>)
 800dc20:	7819      	ldrb	r1, [r3, #0]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f002 f80b 	bl	800fc48 <USBD_LL_PrepareReceive>
 800dc32:	e008      	b.n	800dc46 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc34:	4b06      	ldr	r3, [pc, #24]	@ (800dc50 <USBD_CDC_ReceivePacket+0x68>)
 800dc36:	7819      	ldrb	r1, [r3, #0]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc3e:	2340      	movs	r3, #64	@ 0x40
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f002 f801 	bl	800fc48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dc46:	2300      	movs	r3, #0
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	24000098 	.word	0x24000098

0800dc54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b086      	sub	sp, #24
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	60f8      	str	r0, [r7, #12]
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	4613      	mov	r3, r2
 800dc60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d101      	bne.n	800dc6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dc68:	2303      	movs	r3, #3
 800dc6a:	e01f      	b.n	800dcac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2200      	movs	r2, #0
 800dc78:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d003      	beq.n	800dc92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	68ba      	ldr	r2, [r7, #8]
 800dc8e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2201      	movs	r2, #1
 800dc96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	79fa      	ldrb	r2, [r7, #7]
 800dc9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f001 fe77 	bl	800f994 <USBD_LL_Init>
 800dca6:	4603      	mov	r3, r0
 800dca8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dcaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3718      	adds	r7, #24
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d101      	bne.n	800dccc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dcc8:	2303      	movs	r3, #3
 800dcca:	e025      	b.n	800dd18 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	683a      	ldr	r2, [r7, #0]
 800dcd0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	32ae      	adds	r2, #174	@ 0xae
 800dcde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00f      	beq.n	800dd08 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	32ae      	adds	r2, #174	@ 0xae
 800dcf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf8:	f107 020e 	add.w	r2, r7, #14
 800dcfc:	4610      	mov	r0, r2
 800dcfe:	4798      	blx	r3
 800dd00:	4602      	mov	r2, r0
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dd0e:	1c5a      	adds	r2, r3, #1
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3710      	adds	r7, #16
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f001 fe83 	bl	800fa34 <USBD_LL_Start>
 800dd2e:	4603      	mov	r3, r0
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b083      	sub	sp, #12
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dd40:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	370c      	adds	r7, #12
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr

0800dd4e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b084      	sub	sp, #16
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
 800dd56:	460b      	mov	r3, r1
 800dd58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d009      	beq.n	800dd7c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	78fa      	ldrb	r2, [r7, #3]
 800dd72:	4611      	mov	r1, r2
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	4798      	blx	r3
 800dd78:	4603      	mov	r3, r0
 800dd7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dd7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3710      	adds	r7, #16
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b084      	sub	sp, #16
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
 800dd8e:	460b      	mov	r3, r1
 800dd90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd92:	2300      	movs	r3, #0
 800dd94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	78fa      	ldrb	r2, [r7, #3]
 800dda0:	4611      	mov	r1, r2
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	4798      	blx	r3
 800dda6:	4603      	mov	r3, r0
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d001      	beq.n	800ddb0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ddac:	2303      	movs	r3, #3
 800ddae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ddb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b084      	sub	sp, #16
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ddca:	6839      	ldr	r1, [r7, #0]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f001 f936 	bl	800f03e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800dde0:	461a      	mov	r2, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ddee:	f003 031f 	and.w	r3, r3, #31
 800ddf2:	2b02      	cmp	r3, #2
 800ddf4:	d01a      	beq.n	800de2c <USBD_LL_SetupStage+0x72>
 800ddf6:	2b02      	cmp	r3, #2
 800ddf8:	d822      	bhi.n	800de40 <USBD_LL_SetupStage+0x86>
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d002      	beq.n	800de04 <USBD_LL_SetupStage+0x4a>
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d00a      	beq.n	800de18 <USBD_LL_SetupStage+0x5e>
 800de02:	e01d      	b.n	800de40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800de0a:	4619      	mov	r1, r3
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 fb63 	bl	800e4d8 <USBD_StdDevReq>
 800de12:	4603      	mov	r3, r0
 800de14:	73fb      	strb	r3, [r7, #15]
      break;
 800de16:	e020      	b.n	800de5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800de1e:	4619      	mov	r1, r3
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 fbcb 	bl	800e5bc <USBD_StdItfReq>
 800de26:	4603      	mov	r3, r0
 800de28:	73fb      	strb	r3, [r7, #15]
      break;
 800de2a:	e016      	b.n	800de5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800de32:	4619      	mov	r1, r3
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 fc2d 	bl	800e694 <USBD_StdEPReq>
 800de3a:	4603      	mov	r3, r0
 800de3c:	73fb      	strb	r3, [r7, #15]
      break;
 800de3e:	e00c      	b.n	800de5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800de46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	4619      	mov	r1, r3
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f001 fe50 	bl	800faf4 <USBD_LL_StallEP>
 800de54:	4603      	mov	r3, r0
 800de56:	73fb      	strb	r3, [r7, #15]
      break;
 800de58:	bf00      	nop
  }

  return ret;
 800de5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b086      	sub	sp, #24
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	460b      	mov	r3, r1
 800de6e:	607a      	str	r2, [r7, #4]
 800de70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800de72:	2300      	movs	r3, #0
 800de74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800de76:	7afb      	ldrb	r3, [r7, #11]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d16e      	bne.n	800df5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800de82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800de8a:	2b03      	cmp	r3, #3
 800de8c:	f040 8098 	bne.w	800dfc0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	689a      	ldr	r2, [r3, #8]
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d913      	bls.n	800dec4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	689a      	ldr	r2, [r3, #8]
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	68db      	ldr	r3, [r3, #12]
 800dea4:	1ad2      	subs	r2, r2, r3
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	68da      	ldr	r2, [r3, #12]
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	4293      	cmp	r3, r2
 800deb4:	bf28      	it	cs
 800deb6:	4613      	movcs	r3, r2
 800deb8:	461a      	mov	r2, r3
 800deba:	6879      	ldr	r1, [r7, #4]
 800debc:	68f8      	ldr	r0, [r7, #12]
 800debe:	f001 f9be 	bl	800f23e <USBD_CtlContinueRx>
 800dec2:	e07d      	b.n	800dfc0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800deca:	f003 031f 	and.w	r3, r3, #31
 800dece:	2b02      	cmp	r3, #2
 800ded0:	d014      	beq.n	800defc <USBD_LL_DataOutStage+0x98>
 800ded2:	2b02      	cmp	r3, #2
 800ded4:	d81d      	bhi.n	800df12 <USBD_LL_DataOutStage+0xae>
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d002      	beq.n	800dee0 <USBD_LL_DataOutStage+0x7c>
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d003      	beq.n	800dee6 <USBD_LL_DataOutStage+0x82>
 800dede:	e018      	b.n	800df12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dee0:	2300      	movs	r3, #0
 800dee2:	75bb      	strb	r3, [r7, #22]
            break;
 800dee4:	e018      	b.n	800df18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800deec:	b2db      	uxtb	r3, r3
 800deee:	4619      	mov	r1, r3
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	f000 fa64 	bl	800e3be <USBD_CoreFindIF>
 800def6:	4603      	mov	r3, r0
 800def8:	75bb      	strb	r3, [r7, #22]
            break;
 800defa:	e00d      	b.n	800df18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800df02:	b2db      	uxtb	r3, r3
 800df04:	4619      	mov	r1, r3
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f000 fa66 	bl	800e3d8 <USBD_CoreFindEP>
 800df0c:	4603      	mov	r3, r0
 800df0e:	75bb      	strb	r3, [r7, #22]
            break;
 800df10:	e002      	b.n	800df18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800df12:	2300      	movs	r3, #0
 800df14:	75bb      	strb	r3, [r7, #22]
            break;
 800df16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800df18:	7dbb      	ldrb	r3, [r7, #22]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d119      	bne.n	800df52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df24:	b2db      	uxtb	r3, r3
 800df26:	2b03      	cmp	r3, #3
 800df28:	d113      	bne.n	800df52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800df2a:	7dba      	ldrb	r2, [r7, #22]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	32ae      	adds	r2, #174	@ 0xae
 800df30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df34:	691b      	ldr	r3, [r3, #16]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d00b      	beq.n	800df52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800df3a:	7dba      	ldrb	r2, [r7, #22]
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800df42:	7dba      	ldrb	r2, [r7, #22]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	32ae      	adds	r2, #174	@ 0xae
 800df48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800df52:	68f8      	ldr	r0, [r7, #12]
 800df54:	f001 f984 	bl	800f260 <USBD_CtlSendStatus>
 800df58:	e032      	b.n	800dfc0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800df5a:	7afb      	ldrb	r3, [r7, #11]
 800df5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df60:	b2db      	uxtb	r3, r3
 800df62:	4619      	mov	r1, r3
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f000 fa37 	bl	800e3d8 <USBD_CoreFindEP>
 800df6a:	4603      	mov	r3, r0
 800df6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df6e:	7dbb      	ldrb	r3, [r7, #22]
 800df70:	2bff      	cmp	r3, #255	@ 0xff
 800df72:	d025      	beq.n	800dfc0 <USBD_LL_DataOutStage+0x15c>
 800df74:	7dbb      	ldrb	r3, [r7, #22]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d122      	bne.n	800dfc0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df80:	b2db      	uxtb	r3, r3
 800df82:	2b03      	cmp	r3, #3
 800df84:	d117      	bne.n	800dfb6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800df86:	7dba      	ldrb	r2, [r7, #22]
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	32ae      	adds	r2, #174	@ 0xae
 800df8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df90:	699b      	ldr	r3, [r3, #24]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00f      	beq.n	800dfb6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800df96:	7dba      	ldrb	r2, [r7, #22]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800df9e:	7dba      	ldrb	r2, [r7, #22]
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	32ae      	adds	r2, #174	@ 0xae
 800dfa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfa8:	699b      	ldr	r3, [r3, #24]
 800dfaa:	7afa      	ldrb	r2, [r7, #11]
 800dfac:	4611      	mov	r1, r2
 800dfae:	68f8      	ldr	r0, [r7, #12]
 800dfb0:	4798      	blx	r3
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dfb6:	7dfb      	ldrb	r3, [r7, #23]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d001      	beq.n	800dfc0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dfbc:	7dfb      	ldrb	r3, [r7, #23]
 800dfbe:	e000      	b.n	800dfc2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dfc0:	2300      	movs	r3, #0
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3718      	adds	r7, #24
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}

0800dfca <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dfca:	b580      	push	{r7, lr}
 800dfcc:	b086      	sub	sp, #24
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	60f8      	str	r0, [r7, #12]
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	607a      	str	r2, [r7, #4]
 800dfd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dfd8:	7afb      	ldrb	r3, [r7, #11]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d16f      	bne.n	800e0be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	3314      	adds	r3, #20
 800dfe2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dfea:	2b02      	cmp	r3, #2
 800dfec:	d15a      	bne.n	800e0a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	689a      	ldr	r2, [r3, #8]
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d914      	bls.n	800e024 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	689a      	ldr	r2, [r3, #8]
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	68db      	ldr	r3, [r3, #12]
 800e002:	1ad2      	subs	r2, r2, r3
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	689b      	ldr	r3, [r3, #8]
 800e00c:	461a      	mov	r2, r3
 800e00e:	6879      	ldr	r1, [r7, #4]
 800e010:	68f8      	ldr	r0, [r7, #12]
 800e012:	f001 f8e6 	bl	800f1e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e016:	2300      	movs	r3, #0
 800e018:	2200      	movs	r2, #0
 800e01a:	2100      	movs	r1, #0
 800e01c:	68f8      	ldr	r0, [r7, #12]
 800e01e:	f001 fe13 	bl	800fc48 <USBD_LL_PrepareReceive>
 800e022:	e03f      	b.n	800e0a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	68da      	ldr	r2, [r3, #12]
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d11c      	bne.n	800e06a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	685a      	ldr	r2, [r3, #4]
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e038:	429a      	cmp	r2, r3
 800e03a:	d316      	bcc.n	800e06a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	685a      	ldr	r2, [r3, #4]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e046:	429a      	cmp	r2, r3
 800e048:	d20f      	bcs.n	800e06a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e04a:	2200      	movs	r2, #0
 800e04c:	2100      	movs	r1, #0
 800e04e:	68f8      	ldr	r0, [r7, #12]
 800e050:	f001 f8c7 	bl	800f1e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2200      	movs	r2, #0
 800e058:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e05c:	2300      	movs	r3, #0
 800e05e:	2200      	movs	r2, #0
 800e060:	2100      	movs	r1, #0
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f001 fdf0 	bl	800fc48 <USBD_LL_PrepareReceive>
 800e068:	e01c      	b.n	800e0a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e070:	b2db      	uxtb	r3, r3
 800e072:	2b03      	cmp	r3, #3
 800e074:	d10f      	bne.n	800e096 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e07c:	68db      	ldr	r3, [r3, #12]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d009      	beq.n	800e096 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2200      	movs	r2, #0
 800e086:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	68f8      	ldr	r0, [r7, #12]
 800e094:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e096:	2180      	movs	r1, #128	@ 0x80
 800e098:	68f8      	ldr	r0, [r7, #12]
 800e09a:	f001 fd2b 	bl	800faf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e09e:	68f8      	ldr	r0, [r7, #12]
 800e0a0:	f001 f8f1 	bl	800f286 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d03a      	beq.n	800e124 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	f7ff fe42 	bl	800dd38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e0bc:	e032      	b.n	800e124 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e0be:	7afb      	ldrb	r3, [r7, #11]
 800e0c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f000 f985 	bl	800e3d8 <USBD_CoreFindEP>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e0d2:	7dfb      	ldrb	r3, [r7, #23]
 800e0d4:	2bff      	cmp	r3, #255	@ 0xff
 800e0d6:	d025      	beq.n	800e124 <USBD_LL_DataInStage+0x15a>
 800e0d8:	7dfb      	ldrb	r3, [r7, #23]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d122      	bne.n	800e124 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	2b03      	cmp	r3, #3
 800e0e8:	d11c      	bne.n	800e124 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e0ea:	7dfa      	ldrb	r2, [r7, #23]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	32ae      	adds	r2, #174	@ 0xae
 800e0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0f4:	695b      	ldr	r3, [r3, #20]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d014      	beq.n	800e124 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e0fa:	7dfa      	ldrb	r2, [r7, #23]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e102:	7dfa      	ldrb	r2, [r7, #23]
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	32ae      	adds	r2, #174	@ 0xae
 800e108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e10c:	695b      	ldr	r3, [r3, #20]
 800e10e:	7afa      	ldrb	r2, [r7, #11]
 800e110:	4611      	mov	r1, r2
 800e112:	68f8      	ldr	r0, [r7, #12]
 800e114:	4798      	blx	r3
 800e116:	4603      	mov	r3, r0
 800e118:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e11a:	7dbb      	ldrb	r3, [r7, #22]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d001      	beq.n	800e124 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e120:	7dbb      	ldrb	r3, [r7, #22]
 800e122:	e000      	b.n	800e126 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e124:	2300      	movs	r3, #0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3718      	adds	r7, #24
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b084      	sub	sp, #16
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e136:	2300      	movs	r3, #0
 800e138:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2201      	movs	r2, #1
 800e13e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2200      	movs	r2, #0
 800e14e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e166:	2b00      	cmp	r3, #0
 800e168:	d014      	beq.n	800e194 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00e      	beq.n	800e194 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	6852      	ldr	r2, [r2, #4]
 800e182:	b2d2      	uxtb	r2, r2
 800e184:	4611      	mov	r1, r2
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	4798      	blx	r3
 800e18a:	4603      	mov	r3, r0
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d001      	beq.n	800e194 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e190:	2303      	movs	r3, #3
 800e192:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e194:	2340      	movs	r3, #64	@ 0x40
 800e196:	2200      	movs	r2, #0
 800e198:	2100      	movs	r1, #0
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f001 fc65 	bl	800fa6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2240      	movs	r2, #64	@ 0x40
 800e1ac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e1b0:	2340      	movs	r3, #64	@ 0x40
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	2180      	movs	r1, #128	@ 0x80
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f001 fc57 	bl	800fa6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2201      	movs	r2, #1
 800e1c0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2240      	movs	r2, #64	@ 0x40
 800e1c6:	621a      	str	r2, [r3, #32]

  return ret;
 800e1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3710      	adds	r7, #16
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e1d2:	b480      	push	{r7}
 800e1d4:	b083      	sub	sp, #12
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
 800e1da:	460b      	mov	r3, r1
 800e1dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	78fa      	ldrb	r2, [r7, #3]
 800e1e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e1e4:	2300      	movs	r3, #0
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	370c      	adds	r7, #12
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr

0800e1f2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e1f2:	b480      	push	{r7}
 800e1f4:	b083      	sub	sp, #12
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e200:	b2db      	uxtb	r3, r3
 800e202:	2b04      	cmp	r3, #4
 800e204:	d006      	beq.n	800e214 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2204      	movs	r2, #4
 800e218:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e21c:	2300      	movs	r3, #0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	370c      	adds	r7, #12
 800e222:	46bd      	mov	sp, r7
 800e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e228:	4770      	bx	lr

0800e22a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e22a:	b480      	push	{r7}
 800e22c:	b083      	sub	sp, #12
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	2b04      	cmp	r3, #4
 800e23c:	d106      	bne.n	800e24c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e244:	b2da      	uxtb	r2, r3
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	370c      	adds	r7, #12
 800e252:	46bd      	mov	sp, r7
 800e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e258:	4770      	bx	lr

0800e25a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b082      	sub	sp, #8
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	2b03      	cmp	r3, #3
 800e26c:	d110      	bne.n	800e290 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e274:	2b00      	cmp	r3, #0
 800e276:	d00b      	beq.n	800e290 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e27e:	69db      	ldr	r3, [r3, #28]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d005      	beq.n	800e290 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e28a:	69db      	ldr	r3, [r3, #28]
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e290:	2300      	movs	r3, #0
}
 800e292:	4618      	mov	r0, r3
 800e294:	3708      	adds	r7, #8
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b082      	sub	sp, #8
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	32ae      	adds	r2, #174	@ 0xae
 800e2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d101      	bne.n	800e2bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e2b8:	2303      	movs	r3, #3
 800e2ba:	e01c      	b.n	800e2f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	2b03      	cmp	r3, #3
 800e2c6:	d115      	bne.n	800e2f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	32ae      	adds	r2, #174	@ 0xae
 800e2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2d6:	6a1b      	ldr	r3, [r3, #32]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00b      	beq.n	800e2f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	32ae      	adds	r2, #174	@ 0xae
 800e2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2ea:	6a1b      	ldr	r3, [r3, #32]
 800e2ec:	78fa      	ldrb	r2, [r7, #3]
 800e2ee:	4611      	mov	r1, r2
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e2f4:	2300      	movs	r3, #0
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3708      	adds	r7, #8
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}

0800e2fe <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b082      	sub	sp, #8
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
 800e306:	460b      	mov	r3, r1
 800e308:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	32ae      	adds	r2, #174	@ 0xae
 800e314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d101      	bne.n	800e320 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e31c:	2303      	movs	r3, #3
 800e31e:	e01c      	b.n	800e35a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e326:	b2db      	uxtb	r3, r3
 800e328:	2b03      	cmp	r3, #3
 800e32a:	d115      	bne.n	800e358 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	32ae      	adds	r2, #174	@ 0xae
 800e336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e33a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d00b      	beq.n	800e358 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	32ae      	adds	r2, #174	@ 0xae
 800e34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e34e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e350:	78fa      	ldrb	r2, [r7, #3]
 800e352:	4611      	mov	r1, r2
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3708      	adds	r7, #8
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e362:	b480      	push	{r7}
 800e364:	b083      	sub	sp, #12
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e36a:	2300      	movs	r3, #0
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	370c      	adds	r7, #12
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr

0800e378 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e380:	2300      	movs	r3, #0
 800e382:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2201      	movs	r2, #1
 800e388:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e392:	2b00      	cmp	r3, #0
 800e394:	d00e      	beq.n	800e3b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	6852      	ldr	r2, [r2, #4]
 800e3a2:	b2d2      	uxtb	r2, r2
 800e3a4:	4611      	mov	r1, r2
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	4798      	blx	r3
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d001      	beq.n	800e3b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e3b0:	2303      	movs	r3, #3
 800e3b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3710      	adds	r7, #16
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}

0800e3be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e3be:	b480      	push	{r7}
 800e3c0:	b083      	sub	sp, #12
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e3ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	370c      	adds	r7, #12
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b083      	sub	sp, #12
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e3e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	370c      	adds	r7, #12
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr

0800e3f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e3f2:	b580      	push	{r7, lr}
 800e3f4:	b086      	sub	sp, #24
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e406:	2300      	movs	r3, #0
 800e408:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	885b      	ldrh	r3, [r3, #2]
 800e40e:	b29b      	uxth	r3, r3
 800e410:	68fa      	ldr	r2, [r7, #12]
 800e412:	7812      	ldrb	r2, [r2, #0]
 800e414:	4293      	cmp	r3, r2
 800e416:	d91f      	bls.n	800e458 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e41e:	e013      	b.n	800e448 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e420:	f107 030a 	add.w	r3, r7, #10
 800e424:	4619      	mov	r1, r3
 800e426:	6978      	ldr	r0, [r7, #20]
 800e428:	f000 f81b 	bl	800e462 <USBD_GetNextDesc>
 800e42c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	785b      	ldrb	r3, [r3, #1]
 800e432:	2b05      	cmp	r3, #5
 800e434:	d108      	bne.n	800e448 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	789b      	ldrb	r3, [r3, #2]
 800e43e:	78fa      	ldrb	r2, [r7, #3]
 800e440:	429a      	cmp	r2, r3
 800e442:	d008      	beq.n	800e456 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e444:	2300      	movs	r3, #0
 800e446:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	885b      	ldrh	r3, [r3, #2]
 800e44c:	b29a      	uxth	r2, r3
 800e44e:	897b      	ldrh	r3, [r7, #10]
 800e450:	429a      	cmp	r2, r3
 800e452:	d8e5      	bhi.n	800e420 <USBD_GetEpDesc+0x2e>
 800e454:	e000      	b.n	800e458 <USBD_GetEpDesc+0x66>
          break;
 800e456:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e458:	693b      	ldr	r3, [r7, #16]
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3718      	adds	r7, #24
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}

0800e462 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e462:	b480      	push	{r7}
 800e464:	b085      	sub	sp, #20
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
 800e46a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	881b      	ldrh	r3, [r3, #0]
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	7812      	ldrb	r2, [r2, #0]
 800e478:	4413      	add	r3, r2
 800e47a:	b29a      	uxth	r2, r3
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	461a      	mov	r2, r3
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	4413      	add	r3, r2
 800e48a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e48c:	68fb      	ldr	r3, [r7, #12]
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3714      	adds	r7, #20
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr

0800e49a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e49a:	b480      	push	{r7}
 800e49c:	b087      	sub	sp, #28
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e4b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800e4bc:	021b      	lsls	r3, r3, #8
 800e4be:	b21a      	sxth	r2, r3
 800e4c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e4c4:	4313      	orrs	r3, r2
 800e4c6:	b21b      	sxth	r3, r3
 800e4c8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e4ca:	89fb      	ldrh	r3, [r7, #14]
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	371c      	adds	r7, #28
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr

0800e4d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b084      	sub	sp, #16
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e4ee:	2b40      	cmp	r3, #64	@ 0x40
 800e4f0:	d005      	beq.n	800e4fe <USBD_StdDevReq+0x26>
 800e4f2:	2b40      	cmp	r3, #64	@ 0x40
 800e4f4:	d857      	bhi.n	800e5a6 <USBD_StdDevReq+0xce>
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d00f      	beq.n	800e51a <USBD_StdDevReq+0x42>
 800e4fa:	2b20      	cmp	r3, #32
 800e4fc:	d153      	bne.n	800e5a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	32ae      	adds	r2, #174	@ 0xae
 800e508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e50c:	689b      	ldr	r3, [r3, #8]
 800e50e:	6839      	ldr	r1, [r7, #0]
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	4798      	blx	r3
 800e514:	4603      	mov	r3, r0
 800e516:	73fb      	strb	r3, [r7, #15]
      break;
 800e518:	e04a      	b.n	800e5b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	785b      	ldrb	r3, [r3, #1]
 800e51e:	2b09      	cmp	r3, #9
 800e520:	d83b      	bhi.n	800e59a <USBD_StdDevReq+0xc2>
 800e522:	a201      	add	r2, pc, #4	@ (adr r2, 800e528 <USBD_StdDevReq+0x50>)
 800e524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e528:	0800e57d 	.word	0x0800e57d
 800e52c:	0800e591 	.word	0x0800e591
 800e530:	0800e59b 	.word	0x0800e59b
 800e534:	0800e587 	.word	0x0800e587
 800e538:	0800e59b 	.word	0x0800e59b
 800e53c:	0800e55b 	.word	0x0800e55b
 800e540:	0800e551 	.word	0x0800e551
 800e544:	0800e59b 	.word	0x0800e59b
 800e548:	0800e573 	.word	0x0800e573
 800e54c:	0800e565 	.word	0x0800e565
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e550:	6839      	ldr	r1, [r7, #0]
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 fa3c 	bl	800e9d0 <USBD_GetDescriptor>
          break;
 800e558:	e024      	b.n	800e5a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e55a:	6839      	ldr	r1, [r7, #0]
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 fbcb 	bl	800ecf8 <USBD_SetAddress>
          break;
 800e562:	e01f      	b.n	800e5a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e564:	6839      	ldr	r1, [r7, #0]
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 fc0a 	bl	800ed80 <USBD_SetConfig>
 800e56c:	4603      	mov	r3, r0
 800e56e:	73fb      	strb	r3, [r7, #15]
          break;
 800e570:	e018      	b.n	800e5a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e572:	6839      	ldr	r1, [r7, #0]
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f000 fcad 	bl	800eed4 <USBD_GetConfig>
          break;
 800e57a:	e013      	b.n	800e5a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e57c:	6839      	ldr	r1, [r7, #0]
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 fcde 	bl	800ef40 <USBD_GetStatus>
          break;
 800e584:	e00e      	b.n	800e5a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e586:	6839      	ldr	r1, [r7, #0]
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 fd0d 	bl	800efa8 <USBD_SetFeature>
          break;
 800e58e:	e009      	b.n	800e5a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e590:	6839      	ldr	r1, [r7, #0]
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 fd31 	bl	800effa <USBD_ClrFeature>
          break;
 800e598:	e004      	b.n	800e5a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e59a:	6839      	ldr	r1, [r7, #0]
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f000 fd88 	bl	800f0b2 <USBD_CtlError>
          break;
 800e5a2:	bf00      	nop
      }
      break;
 800e5a4:	e004      	b.n	800e5b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e5a6:	6839      	ldr	r1, [r7, #0]
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 fd82 	bl	800f0b2 <USBD_CtlError>
      break;
 800e5ae:	bf00      	nop
  }

  return ret;
 800e5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3710      	adds	r7, #16
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop

0800e5bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b084      	sub	sp, #16
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e5d2:	2b40      	cmp	r3, #64	@ 0x40
 800e5d4:	d005      	beq.n	800e5e2 <USBD_StdItfReq+0x26>
 800e5d6:	2b40      	cmp	r3, #64	@ 0x40
 800e5d8:	d852      	bhi.n	800e680 <USBD_StdItfReq+0xc4>
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d001      	beq.n	800e5e2 <USBD_StdItfReq+0x26>
 800e5de:	2b20      	cmp	r3, #32
 800e5e0:	d14e      	bne.n	800e680 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	3b01      	subs	r3, #1
 800e5ec:	2b02      	cmp	r3, #2
 800e5ee:	d840      	bhi.n	800e672 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	889b      	ldrh	r3, [r3, #4]
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	d836      	bhi.n	800e668 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	889b      	ldrh	r3, [r3, #4]
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	4619      	mov	r1, r3
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f7ff fedb 	bl	800e3be <USBD_CoreFindIF>
 800e608:	4603      	mov	r3, r0
 800e60a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e60c:	7bbb      	ldrb	r3, [r7, #14]
 800e60e:	2bff      	cmp	r3, #255	@ 0xff
 800e610:	d01d      	beq.n	800e64e <USBD_StdItfReq+0x92>
 800e612:	7bbb      	ldrb	r3, [r7, #14]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d11a      	bne.n	800e64e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e618:	7bba      	ldrb	r2, [r7, #14]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	32ae      	adds	r2, #174	@ 0xae
 800e61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00f      	beq.n	800e648 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e628:	7bba      	ldrb	r2, [r7, #14]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e630:	7bba      	ldrb	r2, [r7, #14]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	32ae      	adds	r2, #174	@ 0xae
 800e636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e63a:	689b      	ldr	r3, [r3, #8]
 800e63c:	6839      	ldr	r1, [r7, #0]
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	4798      	blx	r3
 800e642:	4603      	mov	r3, r0
 800e644:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e646:	e004      	b.n	800e652 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e648:	2303      	movs	r3, #3
 800e64a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e64c:	e001      	b.n	800e652 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e64e:	2303      	movs	r3, #3
 800e650:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	88db      	ldrh	r3, [r3, #6]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d110      	bne.n	800e67c <USBD_StdItfReq+0xc0>
 800e65a:	7bfb      	ldrb	r3, [r7, #15]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d10d      	bne.n	800e67c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 fdfd 	bl	800f260 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e666:	e009      	b.n	800e67c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e668:	6839      	ldr	r1, [r7, #0]
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 fd21 	bl	800f0b2 <USBD_CtlError>
          break;
 800e670:	e004      	b.n	800e67c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e672:	6839      	ldr	r1, [r7, #0]
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f000 fd1c 	bl	800f0b2 <USBD_CtlError>
          break;
 800e67a:	e000      	b.n	800e67e <USBD_StdItfReq+0xc2>
          break;
 800e67c:	bf00      	nop
      }
      break;
 800e67e:	e004      	b.n	800e68a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e680:	6839      	ldr	r1, [r7, #0]
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 fd15 	bl	800f0b2 <USBD_CtlError>
      break;
 800e688:	bf00      	nop
  }

  return ret;
 800e68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3710      	adds	r7, #16
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	889b      	ldrh	r3, [r3, #4]
 800e6a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e6b0:	2b40      	cmp	r3, #64	@ 0x40
 800e6b2:	d007      	beq.n	800e6c4 <USBD_StdEPReq+0x30>
 800e6b4:	2b40      	cmp	r3, #64	@ 0x40
 800e6b6:	f200 817f 	bhi.w	800e9b8 <USBD_StdEPReq+0x324>
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d02a      	beq.n	800e714 <USBD_StdEPReq+0x80>
 800e6be:	2b20      	cmp	r3, #32
 800e6c0:	f040 817a 	bne.w	800e9b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e6c4:	7bbb      	ldrb	r3, [r7, #14]
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f7ff fe85 	bl	800e3d8 <USBD_CoreFindEP>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e6d2:	7b7b      	ldrb	r3, [r7, #13]
 800e6d4:	2bff      	cmp	r3, #255	@ 0xff
 800e6d6:	f000 8174 	beq.w	800e9c2 <USBD_StdEPReq+0x32e>
 800e6da:	7b7b      	ldrb	r3, [r7, #13]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f040 8170 	bne.w	800e9c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e6e2:	7b7a      	ldrb	r2, [r7, #13]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e6ea:	7b7a      	ldrb	r2, [r7, #13]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	32ae      	adds	r2, #174	@ 0xae
 800e6f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6f4:	689b      	ldr	r3, [r3, #8]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	f000 8163 	beq.w	800e9c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e6fc:	7b7a      	ldrb	r2, [r7, #13]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	32ae      	adds	r2, #174	@ 0xae
 800e702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e706:	689b      	ldr	r3, [r3, #8]
 800e708:	6839      	ldr	r1, [r7, #0]
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	4798      	blx	r3
 800e70e:	4603      	mov	r3, r0
 800e710:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e712:	e156      	b.n	800e9c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	785b      	ldrb	r3, [r3, #1]
 800e718:	2b03      	cmp	r3, #3
 800e71a:	d008      	beq.n	800e72e <USBD_StdEPReq+0x9a>
 800e71c:	2b03      	cmp	r3, #3
 800e71e:	f300 8145 	bgt.w	800e9ac <USBD_StdEPReq+0x318>
 800e722:	2b00      	cmp	r3, #0
 800e724:	f000 809b 	beq.w	800e85e <USBD_StdEPReq+0x1ca>
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d03c      	beq.n	800e7a6 <USBD_StdEPReq+0x112>
 800e72c:	e13e      	b.n	800e9ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e734:	b2db      	uxtb	r3, r3
 800e736:	2b02      	cmp	r3, #2
 800e738:	d002      	beq.n	800e740 <USBD_StdEPReq+0xac>
 800e73a:	2b03      	cmp	r3, #3
 800e73c:	d016      	beq.n	800e76c <USBD_StdEPReq+0xd8>
 800e73e:	e02c      	b.n	800e79a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e740:	7bbb      	ldrb	r3, [r7, #14]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00d      	beq.n	800e762 <USBD_StdEPReq+0xce>
 800e746:	7bbb      	ldrb	r3, [r7, #14]
 800e748:	2b80      	cmp	r3, #128	@ 0x80
 800e74a:	d00a      	beq.n	800e762 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e74c:	7bbb      	ldrb	r3, [r7, #14]
 800e74e:	4619      	mov	r1, r3
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f001 f9cf 	bl	800faf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e756:	2180      	movs	r1, #128	@ 0x80
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f001 f9cb 	bl	800faf4 <USBD_LL_StallEP>
 800e75e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e760:	e020      	b.n	800e7a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e762:	6839      	ldr	r1, [r7, #0]
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 fca4 	bl	800f0b2 <USBD_CtlError>
              break;
 800e76a:	e01b      	b.n	800e7a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	885b      	ldrh	r3, [r3, #2]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d10e      	bne.n	800e792 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e774:	7bbb      	ldrb	r3, [r7, #14]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d00b      	beq.n	800e792 <USBD_StdEPReq+0xfe>
 800e77a:	7bbb      	ldrb	r3, [r7, #14]
 800e77c:	2b80      	cmp	r3, #128	@ 0x80
 800e77e:	d008      	beq.n	800e792 <USBD_StdEPReq+0xfe>
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	88db      	ldrh	r3, [r3, #6]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d104      	bne.n	800e792 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e788:	7bbb      	ldrb	r3, [r7, #14]
 800e78a:	4619      	mov	r1, r3
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f001 f9b1 	bl	800faf4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 fd64 	bl	800f260 <USBD_CtlSendStatus>

              break;
 800e798:	e004      	b.n	800e7a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e79a:	6839      	ldr	r1, [r7, #0]
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 fc88 	bl	800f0b2 <USBD_CtlError>
              break;
 800e7a2:	bf00      	nop
          }
          break;
 800e7a4:	e107      	b.n	800e9b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7ac:	b2db      	uxtb	r3, r3
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d002      	beq.n	800e7b8 <USBD_StdEPReq+0x124>
 800e7b2:	2b03      	cmp	r3, #3
 800e7b4:	d016      	beq.n	800e7e4 <USBD_StdEPReq+0x150>
 800e7b6:	e04b      	b.n	800e850 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e7b8:	7bbb      	ldrb	r3, [r7, #14]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00d      	beq.n	800e7da <USBD_StdEPReq+0x146>
 800e7be:	7bbb      	ldrb	r3, [r7, #14]
 800e7c0:	2b80      	cmp	r3, #128	@ 0x80
 800e7c2:	d00a      	beq.n	800e7da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e7c4:	7bbb      	ldrb	r3, [r7, #14]
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f001 f993 	bl	800faf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7ce:	2180      	movs	r1, #128	@ 0x80
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f001 f98f 	bl	800faf4 <USBD_LL_StallEP>
 800e7d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e7d8:	e040      	b.n	800e85c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e7da:	6839      	ldr	r1, [r7, #0]
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 fc68 	bl	800f0b2 <USBD_CtlError>
              break;
 800e7e2:	e03b      	b.n	800e85c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	885b      	ldrh	r3, [r3, #2]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d136      	bne.n	800e85a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e7ec:	7bbb      	ldrb	r3, [r7, #14]
 800e7ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d004      	beq.n	800e800 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e7f6:	7bbb      	ldrb	r3, [r7, #14]
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f001 f999 	bl	800fb32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 fd2d 	bl	800f260 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e806:	7bbb      	ldrb	r3, [r7, #14]
 800e808:	4619      	mov	r1, r3
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f7ff fde4 	bl	800e3d8 <USBD_CoreFindEP>
 800e810:	4603      	mov	r3, r0
 800e812:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e814:	7b7b      	ldrb	r3, [r7, #13]
 800e816:	2bff      	cmp	r3, #255	@ 0xff
 800e818:	d01f      	beq.n	800e85a <USBD_StdEPReq+0x1c6>
 800e81a:	7b7b      	ldrb	r3, [r7, #13]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d11c      	bne.n	800e85a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e820:	7b7a      	ldrb	r2, [r7, #13]
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e828:	7b7a      	ldrb	r2, [r7, #13]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	32ae      	adds	r2, #174	@ 0xae
 800e82e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e832:	689b      	ldr	r3, [r3, #8]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d010      	beq.n	800e85a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e838:	7b7a      	ldrb	r2, [r7, #13]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	32ae      	adds	r2, #174	@ 0xae
 800e83e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e842:	689b      	ldr	r3, [r3, #8]
 800e844:	6839      	ldr	r1, [r7, #0]
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	4798      	blx	r3
 800e84a:	4603      	mov	r3, r0
 800e84c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e84e:	e004      	b.n	800e85a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e850:	6839      	ldr	r1, [r7, #0]
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 fc2d 	bl	800f0b2 <USBD_CtlError>
              break;
 800e858:	e000      	b.n	800e85c <USBD_StdEPReq+0x1c8>
              break;
 800e85a:	bf00      	nop
          }
          break;
 800e85c:	e0ab      	b.n	800e9b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e864:	b2db      	uxtb	r3, r3
 800e866:	2b02      	cmp	r3, #2
 800e868:	d002      	beq.n	800e870 <USBD_StdEPReq+0x1dc>
 800e86a:	2b03      	cmp	r3, #3
 800e86c:	d032      	beq.n	800e8d4 <USBD_StdEPReq+0x240>
 800e86e:	e097      	b.n	800e9a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e870:	7bbb      	ldrb	r3, [r7, #14]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d007      	beq.n	800e886 <USBD_StdEPReq+0x1f2>
 800e876:	7bbb      	ldrb	r3, [r7, #14]
 800e878:	2b80      	cmp	r3, #128	@ 0x80
 800e87a:	d004      	beq.n	800e886 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e87c:	6839      	ldr	r1, [r7, #0]
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 fc17 	bl	800f0b2 <USBD_CtlError>
                break;
 800e884:	e091      	b.n	800e9aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	da0b      	bge.n	800e8a6 <USBD_StdEPReq+0x212>
 800e88e:	7bbb      	ldrb	r3, [r7, #14]
 800e890:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e894:	4613      	mov	r3, r2
 800e896:	009b      	lsls	r3, r3, #2
 800e898:	4413      	add	r3, r2
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	3310      	adds	r3, #16
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	4413      	add	r3, r2
 800e8a2:	3304      	adds	r3, #4
 800e8a4:	e00b      	b.n	800e8be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e8a6:	7bbb      	ldrb	r3, [r7, #14]
 800e8a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	4413      	add	r3, r2
 800e8b2:	009b      	lsls	r3, r3, #2
 800e8b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	3304      	adds	r3, #4
 800e8be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	2202      	movs	r2, #2
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 fc6d 	bl	800f1ac <USBD_CtlSendData>
              break;
 800e8d2:	e06a      	b.n	800e9aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e8d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	da11      	bge.n	800e900 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e8dc:	7bbb      	ldrb	r3, [r7, #14]
 800e8de:	f003 020f 	and.w	r2, r3, #15
 800e8e2:	6879      	ldr	r1, [r7, #4]
 800e8e4:	4613      	mov	r3, r2
 800e8e6:	009b      	lsls	r3, r3, #2
 800e8e8:	4413      	add	r3, r2
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	440b      	add	r3, r1
 800e8ee:	3324      	adds	r3, #36	@ 0x24
 800e8f0:	881b      	ldrh	r3, [r3, #0]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d117      	bne.n	800e926 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e8f6:	6839      	ldr	r1, [r7, #0]
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 fbda 	bl	800f0b2 <USBD_CtlError>
                  break;
 800e8fe:	e054      	b.n	800e9aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e900:	7bbb      	ldrb	r3, [r7, #14]
 800e902:	f003 020f 	and.w	r2, r3, #15
 800e906:	6879      	ldr	r1, [r7, #4]
 800e908:	4613      	mov	r3, r2
 800e90a:	009b      	lsls	r3, r3, #2
 800e90c:	4413      	add	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	440b      	add	r3, r1
 800e912:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e916:	881b      	ldrh	r3, [r3, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d104      	bne.n	800e926 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e91c:	6839      	ldr	r1, [r7, #0]
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 fbc7 	bl	800f0b2 <USBD_CtlError>
                  break;
 800e924:	e041      	b.n	800e9aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e926:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	da0b      	bge.n	800e946 <USBD_StdEPReq+0x2b2>
 800e92e:	7bbb      	ldrb	r3, [r7, #14]
 800e930:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e934:	4613      	mov	r3, r2
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	4413      	add	r3, r2
 800e93a:	009b      	lsls	r3, r3, #2
 800e93c:	3310      	adds	r3, #16
 800e93e:	687a      	ldr	r2, [r7, #4]
 800e940:	4413      	add	r3, r2
 800e942:	3304      	adds	r3, #4
 800e944:	e00b      	b.n	800e95e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e946:	7bbb      	ldrb	r3, [r7, #14]
 800e948:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e94c:	4613      	mov	r3, r2
 800e94e:	009b      	lsls	r3, r3, #2
 800e950:	4413      	add	r3, r2
 800e952:	009b      	lsls	r3, r3, #2
 800e954:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	4413      	add	r3, r2
 800e95c:	3304      	adds	r3, #4
 800e95e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e960:	7bbb      	ldrb	r3, [r7, #14]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d002      	beq.n	800e96c <USBD_StdEPReq+0x2d8>
 800e966:	7bbb      	ldrb	r3, [r7, #14]
 800e968:	2b80      	cmp	r3, #128	@ 0x80
 800e96a:	d103      	bne.n	800e974 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	2200      	movs	r2, #0
 800e970:	601a      	str	r2, [r3, #0]
 800e972:	e00e      	b.n	800e992 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e974:	7bbb      	ldrb	r3, [r7, #14]
 800e976:	4619      	mov	r1, r3
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f001 f8f9 	bl	800fb70 <USBD_LL_IsStallEP>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	d003      	beq.n	800e98c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	2201      	movs	r2, #1
 800e988:	601a      	str	r2, [r3, #0]
 800e98a:	e002      	b.n	800e992 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	2200      	movs	r2, #0
 800e990:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	2202      	movs	r2, #2
 800e996:	4619      	mov	r1, r3
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f000 fc07 	bl	800f1ac <USBD_CtlSendData>
              break;
 800e99e:	e004      	b.n	800e9aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e9a0:	6839      	ldr	r1, [r7, #0]
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f000 fb85 	bl	800f0b2 <USBD_CtlError>
              break;
 800e9a8:	bf00      	nop
          }
          break;
 800e9aa:	e004      	b.n	800e9b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e9ac:	6839      	ldr	r1, [r7, #0]
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f000 fb7f 	bl	800f0b2 <USBD_CtlError>
          break;
 800e9b4:	bf00      	nop
      }
      break;
 800e9b6:	e005      	b.n	800e9c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e9b8:	6839      	ldr	r1, [r7, #0]
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 fb79 	bl	800f0b2 <USBD_CtlError>
      break;
 800e9c0:	e000      	b.n	800e9c4 <USBD_StdEPReq+0x330>
      break;
 800e9c2:	bf00      	nop
  }

  return ret;
 800e9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3710      	adds	r7, #16
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
	...

0800e9d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b084      	sub	sp, #16
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	885b      	ldrh	r3, [r3, #2]
 800e9ea:	0a1b      	lsrs	r3, r3, #8
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	3b01      	subs	r3, #1
 800e9f0:	2b0e      	cmp	r3, #14
 800e9f2:	f200 8152 	bhi.w	800ec9a <USBD_GetDescriptor+0x2ca>
 800e9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800e9fc <USBD_GetDescriptor+0x2c>)
 800e9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9fc:	0800ea6d 	.word	0x0800ea6d
 800ea00:	0800ea85 	.word	0x0800ea85
 800ea04:	0800eac5 	.word	0x0800eac5
 800ea08:	0800ec9b 	.word	0x0800ec9b
 800ea0c:	0800ec9b 	.word	0x0800ec9b
 800ea10:	0800ec3b 	.word	0x0800ec3b
 800ea14:	0800ec67 	.word	0x0800ec67
 800ea18:	0800ec9b 	.word	0x0800ec9b
 800ea1c:	0800ec9b 	.word	0x0800ec9b
 800ea20:	0800ec9b 	.word	0x0800ec9b
 800ea24:	0800ec9b 	.word	0x0800ec9b
 800ea28:	0800ec9b 	.word	0x0800ec9b
 800ea2c:	0800ec9b 	.word	0x0800ec9b
 800ea30:	0800ec9b 	.word	0x0800ec9b
 800ea34:	0800ea39 	.word	0x0800ea39
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea3e:	69db      	ldr	r3, [r3, #28]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d00b      	beq.n	800ea5c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea4a:	69db      	ldr	r3, [r3, #28]
 800ea4c:	687a      	ldr	r2, [r7, #4]
 800ea4e:	7c12      	ldrb	r2, [r2, #16]
 800ea50:	f107 0108 	add.w	r1, r7, #8
 800ea54:	4610      	mov	r0, r2
 800ea56:	4798      	blx	r3
 800ea58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea5a:	e126      	b.n	800ecaa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ea5c:	6839      	ldr	r1, [r7, #0]
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 fb27 	bl	800f0b2 <USBD_CtlError>
        err++;
 800ea64:	7afb      	ldrb	r3, [r7, #11]
 800ea66:	3301      	adds	r3, #1
 800ea68:	72fb      	strb	r3, [r7, #11]
      break;
 800ea6a:	e11e      	b.n	800ecaa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	7c12      	ldrb	r2, [r2, #16]
 800ea78:	f107 0108 	add.w	r1, r7, #8
 800ea7c:	4610      	mov	r0, r2
 800ea7e:	4798      	blx	r3
 800ea80:	60f8      	str	r0, [r7, #12]
      break;
 800ea82:	e112      	b.n	800ecaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	7c1b      	ldrb	r3, [r3, #16]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d10d      	bne.n	800eaa8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea94:	f107 0208 	add.w	r2, r7, #8
 800ea98:	4610      	mov	r0, r2
 800ea9a:	4798      	blx	r3
 800ea9c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	2202      	movs	r2, #2
 800eaa4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800eaa6:	e100      	b.n	800ecaa <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eaae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eab0:	f107 0208 	add.w	r2, r7, #8
 800eab4:	4610      	mov	r0, r2
 800eab6:	4798      	blx	r3
 800eab8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	3301      	adds	r3, #1
 800eabe:	2202      	movs	r2, #2
 800eac0:	701a      	strb	r2, [r3, #0]
      break;
 800eac2:	e0f2      	b.n	800ecaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	885b      	ldrh	r3, [r3, #2]
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	2b05      	cmp	r3, #5
 800eacc:	f200 80ac 	bhi.w	800ec28 <USBD_GetDescriptor+0x258>
 800ead0:	a201      	add	r2, pc, #4	@ (adr r2, 800ead8 <USBD_GetDescriptor+0x108>)
 800ead2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ead6:	bf00      	nop
 800ead8:	0800eaf1 	.word	0x0800eaf1
 800eadc:	0800eb25 	.word	0x0800eb25
 800eae0:	0800eb59 	.word	0x0800eb59
 800eae4:	0800eb8d 	.word	0x0800eb8d
 800eae8:	0800ebc1 	.word	0x0800ebc1
 800eaec:	0800ebf5 	.word	0x0800ebf5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d00b      	beq.n	800eb14 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	7c12      	ldrb	r2, [r2, #16]
 800eb08:	f107 0108 	add.w	r1, r7, #8
 800eb0c:	4610      	mov	r0, r2
 800eb0e:	4798      	blx	r3
 800eb10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb12:	e091      	b.n	800ec38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb14:	6839      	ldr	r1, [r7, #0]
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f000 facb 	bl	800f0b2 <USBD_CtlError>
            err++;
 800eb1c:	7afb      	ldrb	r3, [r7, #11]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	72fb      	strb	r3, [r7, #11]
          break;
 800eb22:	e089      	b.n	800ec38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb2a:	689b      	ldr	r3, [r3, #8]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d00b      	beq.n	800eb48 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb36:	689b      	ldr	r3, [r3, #8]
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	7c12      	ldrb	r2, [r2, #16]
 800eb3c:	f107 0108 	add.w	r1, r7, #8
 800eb40:	4610      	mov	r0, r2
 800eb42:	4798      	blx	r3
 800eb44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb46:	e077      	b.n	800ec38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb48:	6839      	ldr	r1, [r7, #0]
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 fab1 	bl	800f0b2 <USBD_CtlError>
            err++;
 800eb50:	7afb      	ldrb	r3, [r7, #11]
 800eb52:	3301      	adds	r3, #1
 800eb54:	72fb      	strb	r3, [r7, #11]
          break;
 800eb56:	e06f      	b.n	800ec38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb5e:	68db      	ldr	r3, [r3, #12]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00b      	beq.n	800eb7c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	7c12      	ldrb	r2, [r2, #16]
 800eb70:	f107 0108 	add.w	r1, r7, #8
 800eb74:	4610      	mov	r0, r2
 800eb76:	4798      	blx	r3
 800eb78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb7a:	e05d      	b.n	800ec38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb7c:	6839      	ldr	r1, [r7, #0]
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 fa97 	bl	800f0b2 <USBD_CtlError>
            err++;
 800eb84:	7afb      	ldrb	r3, [r7, #11]
 800eb86:	3301      	adds	r3, #1
 800eb88:	72fb      	strb	r3, [r7, #11]
          break;
 800eb8a:	e055      	b.n	800ec38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb92:	691b      	ldr	r3, [r3, #16]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d00b      	beq.n	800ebb0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb9e:	691b      	ldr	r3, [r3, #16]
 800eba0:	687a      	ldr	r2, [r7, #4]
 800eba2:	7c12      	ldrb	r2, [r2, #16]
 800eba4:	f107 0108 	add.w	r1, r7, #8
 800eba8:	4610      	mov	r0, r2
 800ebaa:	4798      	blx	r3
 800ebac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebae:	e043      	b.n	800ec38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ebb0:	6839      	ldr	r1, [r7, #0]
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f000 fa7d 	bl	800f0b2 <USBD_CtlError>
            err++;
 800ebb8:	7afb      	ldrb	r3, [r7, #11]
 800ebba:	3301      	adds	r3, #1
 800ebbc:	72fb      	strb	r3, [r7, #11]
          break;
 800ebbe:	e03b      	b.n	800ec38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ebc6:	695b      	ldr	r3, [r3, #20]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d00b      	beq.n	800ebe4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ebd2:	695b      	ldr	r3, [r3, #20]
 800ebd4:	687a      	ldr	r2, [r7, #4]
 800ebd6:	7c12      	ldrb	r2, [r2, #16]
 800ebd8:	f107 0108 	add.w	r1, r7, #8
 800ebdc:	4610      	mov	r0, r2
 800ebde:	4798      	blx	r3
 800ebe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebe2:	e029      	b.n	800ec38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ebe4:	6839      	ldr	r1, [r7, #0]
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 fa63 	bl	800f0b2 <USBD_CtlError>
            err++;
 800ebec:	7afb      	ldrb	r3, [r7, #11]
 800ebee:	3301      	adds	r3, #1
 800ebf0:	72fb      	strb	r3, [r7, #11]
          break;
 800ebf2:	e021      	b.n	800ec38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ebfa:	699b      	ldr	r3, [r3, #24]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d00b      	beq.n	800ec18 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ec06:	699b      	ldr	r3, [r3, #24]
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	7c12      	ldrb	r2, [r2, #16]
 800ec0c:	f107 0108 	add.w	r1, r7, #8
 800ec10:	4610      	mov	r0, r2
 800ec12:	4798      	blx	r3
 800ec14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ec16:	e00f      	b.n	800ec38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ec18:	6839      	ldr	r1, [r7, #0]
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f000 fa49 	bl	800f0b2 <USBD_CtlError>
            err++;
 800ec20:	7afb      	ldrb	r3, [r7, #11]
 800ec22:	3301      	adds	r3, #1
 800ec24:	72fb      	strb	r3, [r7, #11]
          break;
 800ec26:	e007      	b.n	800ec38 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ec28:	6839      	ldr	r1, [r7, #0]
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f000 fa41 	bl	800f0b2 <USBD_CtlError>
          err++;
 800ec30:	7afb      	ldrb	r3, [r7, #11]
 800ec32:	3301      	adds	r3, #1
 800ec34:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ec36:	bf00      	nop
      }
      break;
 800ec38:	e037      	b.n	800ecaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	7c1b      	ldrb	r3, [r3, #16]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d109      	bne.n	800ec56 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec4a:	f107 0208 	add.w	r2, r7, #8
 800ec4e:	4610      	mov	r0, r2
 800ec50:	4798      	blx	r3
 800ec52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec54:	e029      	b.n	800ecaa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ec56:	6839      	ldr	r1, [r7, #0]
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f000 fa2a 	bl	800f0b2 <USBD_CtlError>
        err++;
 800ec5e:	7afb      	ldrb	r3, [r7, #11]
 800ec60:	3301      	adds	r3, #1
 800ec62:	72fb      	strb	r3, [r7, #11]
      break;
 800ec64:	e021      	b.n	800ecaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	7c1b      	ldrb	r3, [r3, #16]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d10d      	bne.n	800ec8a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec76:	f107 0208 	add.w	r2, r7, #8
 800ec7a:	4610      	mov	r0, r2
 800ec7c:	4798      	blx	r3
 800ec7e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	3301      	adds	r3, #1
 800ec84:	2207      	movs	r2, #7
 800ec86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec88:	e00f      	b.n	800ecaa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ec8a:	6839      	ldr	r1, [r7, #0]
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 fa10 	bl	800f0b2 <USBD_CtlError>
        err++;
 800ec92:	7afb      	ldrb	r3, [r7, #11]
 800ec94:	3301      	adds	r3, #1
 800ec96:	72fb      	strb	r3, [r7, #11]
      break;
 800ec98:	e007      	b.n	800ecaa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ec9a:	6839      	ldr	r1, [r7, #0]
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f000 fa08 	bl	800f0b2 <USBD_CtlError>
      err++;
 800eca2:	7afb      	ldrb	r3, [r7, #11]
 800eca4:	3301      	adds	r3, #1
 800eca6:	72fb      	strb	r3, [r7, #11]
      break;
 800eca8:	bf00      	nop
  }

  if (err != 0U)
 800ecaa:	7afb      	ldrb	r3, [r7, #11]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d11e      	bne.n	800ecee <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	88db      	ldrh	r3, [r3, #6]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d016      	beq.n	800ece6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ecb8:	893b      	ldrh	r3, [r7, #8]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d00e      	beq.n	800ecdc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	88da      	ldrh	r2, [r3, #6]
 800ecc2:	893b      	ldrh	r3, [r7, #8]
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	bf28      	it	cs
 800ecc8:	4613      	movcs	r3, r2
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ecce:	893b      	ldrh	r3, [r7, #8]
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	68f9      	ldr	r1, [r7, #12]
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 fa69 	bl	800f1ac <USBD_CtlSendData>
 800ecda:	e009      	b.n	800ecf0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ecdc:	6839      	ldr	r1, [r7, #0]
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 f9e7 	bl	800f0b2 <USBD_CtlError>
 800ece4:	e004      	b.n	800ecf0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f000 faba 	bl	800f260 <USBD_CtlSendStatus>
 800ecec:	e000      	b.n	800ecf0 <USBD_GetDescriptor+0x320>
    return;
 800ecee:	bf00      	nop
  }
}
 800ecf0:	3710      	adds	r7, #16
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop

0800ecf8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b084      	sub	sp, #16
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	889b      	ldrh	r3, [r3, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d131      	bne.n	800ed6e <USBD_SetAddress+0x76>
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	88db      	ldrh	r3, [r3, #6]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d12d      	bne.n	800ed6e <USBD_SetAddress+0x76>
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	885b      	ldrh	r3, [r3, #2]
 800ed16:	2b7f      	cmp	r3, #127	@ 0x7f
 800ed18:	d829      	bhi.n	800ed6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	885b      	ldrh	r3, [r3, #2]
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	2b03      	cmp	r3, #3
 800ed30:	d104      	bne.n	800ed3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ed32:	6839      	ldr	r1, [r7, #0]
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f000 f9bc 	bl	800f0b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed3a:	e01d      	b.n	800ed78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	7bfa      	ldrb	r2, [r7, #15]
 800ed40:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ed44:	7bfb      	ldrb	r3, [r7, #15]
 800ed46:	4619      	mov	r1, r3
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f000 ff3d 	bl	800fbc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 fa86 	bl	800f260 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ed54:	7bfb      	ldrb	r3, [r7, #15]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d004      	beq.n	800ed64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2202      	movs	r2, #2
 800ed5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed62:	e009      	b.n	800ed78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2201      	movs	r2, #1
 800ed68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed6c:	e004      	b.n	800ed78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ed6e:	6839      	ldr	r1, [r7, #0]
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f000 f99e 	bl	800f0b2 <USBD_CtlError>
  }
}
 800ed76:	bf00      	nop
 800ed78:	bf00      	nop
 800ed7a:	3710      	adds	r7, #16
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	885b      	ldrh	r3, [r3, #2]
 800ed92:	b2da      	uxtb	r2, r3
 800ed94:	4b4e      	ldr	r3, [pc, #312]	@ (800eed0 <USBD_SetConfig+0x150>)
 800ed96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ed98:	4b4d      	ldr	r3, [pc, #308]	@ (800eed0 <USBD_SetConfig+0x150>)
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d905      	bls.n	800edac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800eda0:	6839      	ldr	r1, [r7, #0]
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f000 f985 	bl	800f0b2 <USBD_CtlError>
    return USBD_FAIL;
 800eda8:	2303      	movs	r3, #3
 800edaa:	e08c      	b.n	800eec6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	2b02      	cmp	r3, #2
 800edb6:	d002      	beq.n	800edbe <USBD_SetConfig+0x3e>
 800edb8:	2b03      	cmp	r3, #3
 800edba:	d029      	beq.n	800ee10 <USBD_SetConfig+0x90>
 800edbc:	e075      	b.n	800eeaa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800edbe:	4b44      	ldr	r3, [pc, #272]	@ (800eed0 <USBD_SetConfig+0x150>)
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d020      	beq.n	800ee08 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800edc6:	4b42      	ldr	r3, [pc, #264]	@ (800eed0 <USBD_SetConfig+0x150>)
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	461a      	mov	r2, r3
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800edd0:	4b3f      	ldr	r3, [pc, #252]	@ (800eed0 <USBD_SetConfig+0x150>)
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	4619      	mov	r1, r3
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f7fe ffb9 	bl	800dd4e <USBD_SetClassConfig>
 800eddc:	4603      	mov	r3, r0
 800edde:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ede0:	7bfb      	ldrb	r3, [r7, #15]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d008      	beq.n	800edf8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ede6:	6839      	ldr	r1, [r7, #0]
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f000 f962 	bl	800f0b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2202      	movs	r2, #2
 800edf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800edf6:	e065      	b.n	800eec4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f000 fa31 	bl	800f260 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2203      	movs	r2, #3
 800ee02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ee06:	e05d      	b.n	800eec4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f000 fa29 	bl	800f260 <USBD_CtlSendStatus>
      break;
 800ee0e:	e059      	b.n	800eec4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ee10:	4b2f      	ldr	r3, [pc, #188]	@ (800eed0 <USBD_SetConfig+0x150>)
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d112      	bne.n	800ee3e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2202      	movs	r2, #2
 800ee1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ee20:	4b2b      	ldr	r3, [pc, #172]	@ (800eed0 <USBD_SetConfig+0x150>)
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	461a      	mov	r2, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee2a:	4b29      	ldr	r3, [pc, #164]	@ (800eed0 <USBD_SetConfig+0x150>)
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	4619      	mov	r1, r3
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f7fe ffa8 	bl	800dd86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f000 fa12 	bl	800f260 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ee3c:	e042      	b.n	800eec4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ee3e:	4b24      	ldr	r3, [pc, #144]	@ (800eed0 <USBD_SetConfig+0x150>)
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	461a      	mov	r2, r3
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	685b      	ldr	r3, [r3, #4]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d02a      	beq.n	800eea2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	4619      	mov	r1, r3
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f7fe ff96 	bl	800dd86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ee5a:	4b1d      	ldr	r3, [pc, #116]	@ (800eed0 <USBD_SetConfig+0x150>)
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	461a      	mov	r2, r3
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ee64:	4b1a      	ldr	r3, [pc, #104]	@ (800eed0 <USBD_SetConfig+0x150>)
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	4619      	mov	r1, r3
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f7fe ff6f 	bl	800dd4e <USBD_SetClassConfig>
 800ee70:	4603      	mov	r3, r0
 800ee72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ee74:	7bfb      	ldrb	r3, [r7, #15]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d00f      	beq.n	800ee9a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ee7a:	6839      	ldr	r1, [r7, #0]
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f000 f918 	bl	800f0b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	4619      	mov	r1, r3
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f7fe ff7b 	bl	800dd86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2202      	movs	r2, #2
 800ee94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ee98:	e014      	b.n	800eec4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 f9e0 	bl	800f260 <USBD_CtlSendStatus>
      break;
 800eea0:	e010      	b.n	800eec4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f000 f9dc 	bl	800f260 <USBD_CtlSendStatus>
      break;
 800eea8:	e00c      	b.n	800eec4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800eeaa:	6839      	ldr	r1, [r7, #0]
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 f900 	bl	800f0b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eeb2:	4b07      	ldr	r3, [pc, #28]	@ (800eed0 <USBD_SetConfig+0x150>)
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f7fe ff64 	bl	800dd86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800eebe:	2303      	movs	r3, #3
 800eec0:	73fb      	strb	r3, [r7, #15]
      break;
 800eec2:	bf00      	nop
  }

  return ret;
 800eec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3710      	adds	r7, #16
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	240004d8 	.word	0x240004d8

0800eed4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	88db      	ldrh	r3, [r3, #6]
 800eee2:	2b01      	cmp	r3, #1
 800eee4:	d004      	beq.n	800eef0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800eee6:	6839      	ldr	r1, [r7, #0]
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 f8e2 	bl	800f0b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800eeee:	e023      	b.n	800ef38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eef6:	b2db      	uxtb	r3, r3
 800eef8:	2b02      	cmp	r3, #2
 800eefa:	dc02      	bgt.n	800ef02 <USBD_GetConfig+0x2e>
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	dc03      	bgt.n	800ef08 <USBD_GetConfig+0x34>
 800ef00:	e015      	b.n	800ef2e <USBD_GetConfig+0x5a>
 800ef02:	2b03      	cmp	r3, #3
 800ef04:	d00b      	beq.n	800ef1e <USBD_GetConfig+0x4a>
 800ef06:	e012      	b.n	800ef2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	3308      	adds	r3, #8
 800ef12:	2201      	movs	r2, #1
 800ef14:	4619      	mov	r1, r3
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f000 f948 	bl	800f1ac <USBD_CtlSendData>
        break;
 800ef1c:	e00c      	b.n	800ef38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	3304      	adds	r3, #4
 800ef22:	2201      	movs	r2, #1
 800ef24:	4619      	mov	r1, r3
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 f940 	bl	800f1ac <USBD_CtlSendData>
        break;
 800ef2c:	e004      	b.n	800ef38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ef2e:	6839      	ldr	r1, [r7, #0]
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 f8be 	bl	800f0b2 <USBD_CtlError>
        break;
 800ef36:	bf00      	nop
}
 800ef38:	bf00      	nop
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef50:	b2db      	uxtb	r3, r3
 800ef52:	3b01      	subs	r3, #1
 800ef54:	2b02      	cmp	r3, #2
 800ef56:	d81e      	bhi.n	800ef96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	88db      	ldrh	r3, [r3, #6]
 800ef5c:	2b02      	cmp	r3, #2
 800ef5e:	d004      	beq.n	800ef6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ef60:	6839      	ldr	r1, [r7, #0]
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f000 f8a5 	bl	800f0b2 <USBD_CtlError>
        break;
 800ef68:	e01a      	b.n	800efa0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d005      	beq.n	800ef86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	68db      	ldr	r3, [r3, #12]
 800ef7e:	f043 0202 	orr.w	r2, r3, #2
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	330c      	adds	r3, #12
 800ef8a:	2202      	movs	r2, #2
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 f90c 	bl	800f1ac <USBD_CtlSendData>
      break;
 800ef94:	e004      	b.n	800efa0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ef96:	6839      	ldr	r1, [r7, #0]
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f000 f88a 	bl	800f0b2 <USBD_CtlError>
      break;
 800ef9e:	bf00      	nop
  }
}
 800efa0:	bf00      	nop
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	885b      	ldrh	r3, [r3, #2]
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d107      	bne.n	800efca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2201      	movs	r2, #1
 800efbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f000 f94c 	bl	800f260 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800efc8:	e013      	b.n	800eff2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	885b      	ldrh	r3, [r3, #2]
 800efce:	2b02      	cmp	r3, #2
 800efd0:	d10b      	bne.n	800efea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	889b      	ldrh	r3, [r3, #4]
 800efd6:	0a1b      	lsrs	r3, r3, #8
 800efd8:	b29b      	uxth	r3, r3
 800efda:	b2da      	uxtb	r2, r3
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 f93c 	bl	800f260 <USBD_CtlSendStatus>
}
 800efe8:	e003      	b.n	800eff2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800efea:	6839      	ldr	r1, [r7, #0]
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f000 f860 	bl	800f0b2 <USBD_CtlError>
}
 800eff2:	bf00      	nop
 800eff4:	3708      	adds	r7, #8
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}

0800effa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800effa:	b580      	push	{r7, lr}
 800effc:	b082      	sub	sp, #8
 800effe:	af00      	add	r7, sp, #0
 800f000:	6078      	str	r0, [r7, #4]
 800f002:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f00a:	b2db      	uxtb	r3, r3
 800f00c:	3b01      	subs	r3, #1
 800f00e:	2b02      	cmp	r3, #2
 800f010:	d80b      	bhi.n	800f02a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	885b      	ldrh	r3, [r3, #2]
 800f016:	2b01      	cmp	r3, #1
 800f018:	d10c      	bne.n	800f034 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2200      	movs	r2, #0
 800f01e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f000 f91c 	bl	800f260 <USBD_CtlSendStatus>
      }
      break;
 800f028:	e004      	b.n	800f034 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f02a:	6839      	ldr	r1, [r7, #0]
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 f840 	bl	800f0b2 <USBD_CtlError>
      break;
 800f032:	e000      	b.n	800f036 <USBD_ClrFeature+0x3c>
      break;
 800f034:	bf00      	nop
  }
}
 800f036:	bf00      	nop
 800f038:	3708      	adds	r7, #8
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}

0800f03e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f03e:	b580      	push	{r7, lr}
 800f040:	b084      	sub	sp, #16
 800f042:	af00      	add	r7, sp, #0
 800f044:	6078      	str	r0, [r7, #4]
 800f046:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	781a      	ldrb	r2, [r3, #0]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	3301      	adds	r3, #1
 800f058:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	781a      	ldrb	r2, [r3, #0]
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	3301      	adds	r3, #1
 800f066:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f068:	68f8      	ldr	r0, [r7, #12]
 800f06a:	f7ff fa16 	bl	800e49a <SWAPBYTE>
 800f06e:	4603      	mov	r3, r0
 800f070:	461a      	mov	r2, r3
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	3301      	adds	r3, #1
 800f07a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	3301      	adds	r3, #1
 800f080:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f082:	68f8      	ldr	r0, [r7, #12]
 800f084:	f7ff fa09 	bl	800e49a <SWAPBYTE>
 800f088:	4603      	mov	r3, r0
 800f08a:	461a      	mov	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	3301      	adds	r3, #1
 800f094:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	3301      	adds	r3, #1
 800f09a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f09c:	68f8      	ldr	r0, [r7, #12]
 800f09e:	f7ff f9fc 	bl	800e49a <SWAPBYTE>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	461a      	mov	r2, r3
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	80da      	strh	r2, [r3, #6]
}
 800f0aa:	bf00      	nop
 800f0ac:	3710      	adds	r7, #16
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}

0800f0b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0b2:	b580      	push	{r7, lr}
 800f0b4:	b082      	sub	sp, #8
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	6078      	str	r0, [r7, #4]
 800f0ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0bc:	2180      	movs	r1, #128	@ 0x80
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f000 fd18 	bl	800faf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f000 fd14 	bl	800faf4 <USBD_LL_StallEP>
}
 800f0cc:	bf00      	nop
 800f0ce:	3708      	adds	r7, #8
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b086      	sub	sp, #24
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d042      	beq.n	800f170 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f0ee:	6938      	ldr	r0, [r7, #16]
 800f0f0:	f000 f842 	bl	800f178 <USBD_GetLen>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	005b      	lsls	r3, r3, #1
 800f0fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f0fe:	d808      	bhi.n	800f112 <USBD_GetString+0x3e>
 800f100:	6938      	ldr	r0, [r7, #16]
 800f102:	f000 f839 	bl	800f178 <USBD_GetLen>
 800f106:	4603      	mov	r3, r0
 800f108:	3301      	adds	r3, #1
 800f10a:	b29b      	uxth	r3, r3
 800f10c:	005b      	lsls	r3, r3, #1
 800f10e:	b29a      	uxth	r2, r3
 800f110:	e001      	b.n	800f116 <USBD_GetString+0x42>
 800f112:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f11a:	7dfb      	ldrb	r3, [r7, #23]
 800f11c:	68ba      	ldr	r2, [r7, #8]
 800f11e:	4413      	add	r3, r2
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	7812      	ldrb	r2, [r2, #0]
 800f124:	701a      	strb	r2, [r3, #0]
  idx++;
 800f126:	7dfb      	ldrb	r3, [r7, #23]
 800f128:	3301      	adds	r3, #1
 800f12a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f12c:	7dfb      	ldrb	r3, [r7, #23]
 800f12e:	68ba      	ldr	r2, [r7, #8]
 800f130:	4413      	add	r3, r2
 800f132:	2203      	movs	r2, #3
 800f134:	701a      	strb	r2, [r3, #0]
  idx++;
 800f136:	7dfb      	ldrb	r3, [r7, #23]
 800f138:	3301      	adds	r3, #1
 800f13a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f13c:	e013      	b.n	800f166 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f13e:	7dfb      	ldrb	r3, [r7, #23]
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	4413      	add	r3, r2
 800f144:	693a      	ldr	r2, [r7, #16]
 800f146:	7812      	ldrb	r2, [r2, #0]
 800f148:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	3301      	adds	r3, #1
 800f14e:	613b      	str	r3, [r7, #16]
    idx++;
 800f150:	7dfb      	ldrb	r3, [r7, #23]
 800f152:	3301      	adds	r3, #1
 800f154:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f156:	7dfb      	ldrb	r3, [r7, #23]
 800f158:	68ba      	ldr	r2, [r7, #8]
 800f15a:	4413      	add	r3, r2
 800f15c:	2200      	movs	r2, #0
 800f15e:	701a      	strb	r2, [r3, #0]
    idx++;
 800f160:	7dfb      	ldrb	r3, [r7, #23]
 800f162:	3301      	adds	r3, #1
 800f164:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d1e7      	bne.n	800f13e <USBD_GetString+0x6a>
 800f16e:	e000      	b.n	800f172 <USBD_GetString+0x9e>
    return;
 800f170:	bf00      	nop
  }
}
 800f172:	3718      	adds	r7, #24
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f178:	b480      	push	{r7}
 800f17a:	b085      	sub	sp, #20
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f180:	2300      	movs	r3, #0
 800f182:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f188:	e005      	b.n	800f196 <USBD_GetLen+0x1e>
  {
    len++;
 800f18a:	7bfb      	ldrb	r3, [r7, #15]
 800f18c:	3301      	adds	r3, #1
 800f18e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	3301      	adds	r3, #1
 800f194:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d1f5      	bne.n	800f18a <USBD_GetLen+0x12>
  }

  return len;
 800f19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3714      	adds	r7, #20
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2202      	movs	r2, #2
 800f1bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	687a      	ldr	r2, [r7, #4]
 800f1ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	68ba      	ldr	r2, [r7, #8]
 800f1d0:	2100      	movs	r1, #0
 800f1d2:	68f8      	ldr	r0, [r7, #12]
 800f1d4:	f000 fd17 	bl	800fc06 <USBD_LL_Transmit>

  return USBD_OK;
 800f1d8:	2300      	movs	r3, #0
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3710      	adds	r7, #16
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}

0800f1e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b084      	sub	sp, #16
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	60f8      	str	r0, [r7, #12]
 800f1ea:	60b9      	str	r1, [r7, #8]
 800f1ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	68ba      	ldr	r2, [r7, #8]
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	68f8      	ldr	r0, [r7, #12]
 800f1f6:	f000 fd06 	bl	800fc06 <USBD_LL_Transmit>

  return USBD_OK;
 800f1fa:	2300      	movs	r3, #0
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3710      	adds	r7, #16
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	2203      	movs	r2, #3
 800f214:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	687a      	ldr	r2, [r7, #4]
 800f21c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	68ba      	ldr	r2, [r7, #8]
 800f22c:	2100      	movs	r1, #0
 800f22e:	68f8      	ldr	r0, [r7, #12]
 800f230:	f000 fd0a 	bl	800fc48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f234:	2300      	movs	r3, #0
}
 800f236:	4618      	mov	r0, r3
 800f238:	3710      	adds	r7, #16
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}

0800f23e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f23e:	b580      	push	{r7, lr}
 800f240:	b084      	sub	sp, #16
 800f242:	af00      	add	r7, sp, #0
 800f244:	60f8      	str	r0, [r7, #12]
 800f246:	60b9      	str	r1, [r7, #8]
 800f248:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	68ba      	ldr	r2, [r7, #8]
 800f24e:	2100      	movs	r1, #0
 800f250:	68f8      	ldr	r0, [r7, #12]
 800f252:	f000 fcf9 	bl	800fc48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f256:	2300      	movs	r3, #0
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3710      	adds	r7, #16
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2204      	movs	r2, #4
 800f26c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f270:	2300      	movs	r3, #0
 800f272:	2200      	movs	r2, #0
 800f274:	2100      	movs	r1, #0
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 fcc5 	bl	800fc06 <USBD_LL_Transmit>

  return USBD_OK;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3708      	adds	r7, #8
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}

0800f286 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f286:	b580      	push	{r7, lr}
 800f288:	b082      	sub	sp, #8
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2205      	movs	r2, #5
 800f292:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f296:	2300      	movs	r3, #0
 800f298:	2200      	movs	r2, #0
 800f29a:	2100      	movs	r1, #0
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f000 fcd3 	bl	800fc48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f2a2:	2300      	movs	r3, #0
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3708      	adds	r7, #8
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	4913      	ldr	r1, [pc, #76]	@ (800f300 <MX_USB_DEVICE_Init+0x54>)
 800f2b4:	4813      	ldr	r0, [pc, #76]	@ (800f304 <MX_USB_DEVICE_Init+0x58>)
 800f2b6:	f7fe fccd 	bl	800dc54 <USBD_Init>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d001      	beq.n	800f2c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f2c0:	f7f1 fea0 	bl	8001004 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f2c4:	4910      	ldr	r1, [pc, #64]	@ (800f308 <MX_USB_DEVICE_Init+0x5c>)
 800f2c6:	480f      	ldr	r0, [pc, #60]	@ (800f304 <MX_USB_DEVICE_Init+0x58>)
 800f2c8:	f7fe fcf4 	bl	800dcb4 <USBD_RegisterClass>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d001      	beq.n	800f2d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f2d2:	f7f1 fe97 	bl	8001004 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f2d6:	490d      	ldr	r1, [pc, #52]	@ (800f30c <MX_USB_DEVICE_Init+0x60>)
 800f2d8:	480a      	ldr	r0, [pc, #40]	@ (800f304 <MX_USB_DEVICE_Init+0x58>)
 800f2da:	f7fe fbeb 	bl	800dab4 <USBD_CDC_RegisterInterface>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d001      	beq.n	800f2e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f2e4:	f7f1 fe8e 	bl	8001004 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f2e8:	4806      	ldr	r0, [pc, #24]	@ (800f304 <MX_USB_DEVICE_Init+0x58>)
 800f2ea:	f7fe fd19 	bl	800dd20 <USBD_Start>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d001      	beq.n	800f2f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f2f4:	f7f1 fe86 	bl	8001004 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f2f8:	f7f7 fb76 	bl	80069e8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f2fc:	bf00      	nop
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	240000b0 	.word	0x240000b0
 800f304:	240004dc 	.word	0x240004dc
 800f308:	2400001c 	.word	0x2400001c
 800f30c:	2400009c 	.word	0x2400009c

0800f310 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f314:	2200      	movs	r2, #0
 800f316:	4905      	ldr	r1, [pc, #20]	@ (800f32c <CDC_Init_FS+0x1c>)
 800f318:	4805      	ldr	r0, [pc, #20]	@ (800f330 <CDC_Init_FS+0x20>)
 800f31a:	f7fe fbe5 	bl	800dae8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f31e:	4905      	ldr	r1, [pc, #20]	@ (800f334 <CDC_Init_FS+0x24>)
 800f320:	4803      	ldr	r0, [pc, #12]	@ (800f330 <CDC_Init_FS+0x20>)
 800f322:	f7fe fc03 	bl	800db2c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f326:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f328:	4618      	mov	r0, r3
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	24000fb8 	.word	0x24000fb8
 800f330:	240004dc 	.word	0x240004dc
 800f334:	240007b8 	.word	0x240007b8

0800f338 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f338:	b480      	push	{r7}
 800f33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f33c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f33e:	4618      	mov	r0, r3
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	4603      	mov	r3, r0
 800f350:	6039      	str	r1, [r7, #0]
 800f352:	71fb      	strb	r3, [r7, #7]
 800f354:	4613      	mov	r3, r2
 800f356:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f358:	79fb      	ldrb	r3, [r7, #7]
 800f35a:	2b23      	cmp	r3, #35	@ 0x23
 800f35c:	d84a      	bhi.n	800f3f4 <CDC_Control_FS+0xac>
 800f35e:	a201      	add	r2, pc, #4	@ (adr r2, 800f364 <CDC_Control_FS+0x1c>)
 800f360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f364:	0800f3f5 	.word	0x0800f3f5
 800f368:	0800f3f5 	.word	0x0800f3f5
 800f36c:	0800f3f5 	.word	0x0800f3f5
 800f370:	0800f3f5 	.word	0x0800f3f5
 800f374:	0800f3f5 	.word	0x0800f3f5
 800f378:	0800f3f5 	.word	0x0800f3f5
 800f37c:	0800f3f5 	.word	0x0800f3f5
 800f380:	0800f3f5 	.word	0x0800f3f5
 800f384:	0800f3f5 	.word	0x0800f3f5
 800f388:	0800f3f5 	.word	0x0800f3f5
 800f38c:	0800f3f5 	.word	0x0800f3f5
 800f390:	0800f3f5 	.word	0x0800f3f5
 800f394:	0800f3f5 	.word	0x0800f3f5
 800f398:	0800f3f5 	.word	0x0800f3f5
 800f39c:	0800f3f5 	.word	0x0800f3f5
 800f3a0:	0800f3f5 	.word	0x0800f3f5
 800f3a4:	0800f3f5 	.word	0x0800f3f5
 800f3a8:	0800f3f5 	.word	0x0800f3f5
 800f3ac:	0800f3f5 	.word	0x0800f3f5
 800f3b0:	0800f3f5 	.word	0x0800f3f5
 800f3b4:	0800f3f5 	.word	0x0800f3f5
 800f3b8:	0800f3f5 	.word	0x0800f3f5
 800f3bc:	0800f3f5 	.word	0x0800f3f5
 800f3c0:	0800f3f5 	.word	0x0800f3f5
 800f3c4:	0800f3f5 	.word	0x0800f3f5
 800f3c8:	0800f3f5 	.word	0x0800f3f5
 800f3cc:	0800f3f5 	.word	0x0800f3f5
 800f3d0:	0800f3f5 	.word	0x0800f3f5
 800f3d4:	0800f3f5 	.word	0x0800f3f5
 800f3d8:	0800f3f5 	.word	0x0800f3f5
 800f3dc:	0800f3f5 	.word	0x0800f3f5
 800f3e0:	0800f3f5 	.word	0x0800f3f5
 800f3e4:	0800f3f5 	.word	0x0800f3f5
 800f3e8:	0800f3f5 	.word	0x0800f3f5
 800f3ec:	0800f3f5 	.word	0x0800f3f5
 800f3f0:	0800f3f5 	.word	0x0800f3f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f3f4:	bf00      	nop
  }

  return (USBD_OK);
 800f3f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	370c      	adds	r7, #12
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr

0800f404 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f40e:	6879      	ldr	r1, [r7, #4]
 800f410:	4808      	ldr	r0, [pc, #32]	@ (800f434 <CDC_Receive_FS+0x30>)
 800f412:	f7fe fb8b 	bl	800db2c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f416:	4807      	ldr	r0, [pc, #28]	@ (800f434 <CDC_Receive_FS+0x30>)
 800f418:	f7fe fbe6 	bl	800dbe8 <USBD_CDC_ReceivePacket>
	CDC_Transmit_FS(Buf,*Len);
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	b29b      	uxth	r3, r3
 800f422:	4619      	mov	r1, r3
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 f807 	bl	800f438 <CDC_Transmit_FS>
	return (USBD_OK);
 800f42a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3708      	adds	r7, #8
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}
 800f434:	240004dc 	.word	0x240004dc

0800f438 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	460b      	mov	r3, r1
 800f442:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f444:	2300      	movs	r3, #0
 800f446:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f448:	4b0d      	ldr	r3, [pc, #52]	@ (800f480 <CDC_Transmit_FS+0x48>)
 800f44a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f44e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f456:	2b00      	cmp	r3, #0
 800f458:	d001      	beq.n	800f45e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f45a:	2301      	movs	r3, #1
 800f45c:	e00b      	b.n	800f476 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f45e:	887b      	ldrh	r3, [r7, #2]
 800f460:	461a      	mov	r2, r3
 800f462:	6879      	ldr	r1, [r7, #4]
 800f464:	4806      	ldr	r0, [pc, #24]	@ (800f480 <CDC_Transmit_FS+0x48>)
 800f466:	f7fe fb3f 	bl	800dae8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f46a:	4805      	ldr	r0, [pc, #20]	@ (800f480 <CDC_Transmit_FS+0x48>)
 800f46c:	f7fe fb7c 	bl	800db68 <USBD_CDC_TransmitPacket>
 800f470:	4603      	mov	r3, r0
 800f472:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f474:	7bfb      	ldrb	r3, [r7, #15]
}
 800f476:	4618      	mov	r0, r3
 800f478:	3710      	adds	r7, #16
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	240004dc 	.word	0x240004dc

0800f484 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f484:	b480      	push	{r7}
 800f486:	b087      	sub	sp, #28
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	4613      	mov	r3, r2
 800f490:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f492:	2300      	movs	r3, #0
 800f494:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f496:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	371c      	adds	r7, #28
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr
	...

0800f4a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b083      	sub	sp, #12
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	6039      	str	r1, [r7, #0]
 800f4b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	2212      	movs	r2, #18
 800f4b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f4ba:	4b03      	ldr	r3, [pc, #12]	@ (800f4c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	370c      	adds	r7, #12
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr
 800f4c8:	240000d0 	.word	0x240000d0

0800f4cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	6039      	str	r1, [r7, #0]
 800f4d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	2204      	movs	r2, #4
 800f4dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f4de:	4b03      	ldr	r3, [pc, #12]	@ (800f4ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	370c      	adds	r7, #12
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	240000e4 	.word	0x240000e4

0800f4f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	6039      	str	r1, [r7, #0]
 800f4fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f4fc:	79fb      	ldrb	r3, [r7, #7]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d105      	bne.n	800f50e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f502:	683a      	ldr	r2, [r7, #0]
 800f504:	4907      	ldr	r1, [pc, #28]	@ (800f524 <USBD_FS_ProductStrDescriptor+0x34>)
 800f506:	4808      	ldr	r0, [pc, #32]	@ (800f528 <USBD_FS_ProductStrDescriptor+0x38>)
 800f508:	f7ff fde4 	bl	800f0d4 <USBD_GetString>
 800f50c:	e004      	b.n	800f518 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f50e:	683a      	ldr	r2, [r7, #0]
 800f510:	4904      	ldr	r1, [pc, #16]	@ (800f524 <USBD_FS_ProductStrDescriptor+0x34>)
 800f512:	4805      	ldr	r0, [pc, #20]	@ (800f528 <USBD_FS_ProductStrDescriptor+0x38>)
 800f514:	f7ff fdde 	bl	800f0d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f518:	4b02      	ldr	r3, [pc, #8]	@ (800f524 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3708      	adds	r7, #8
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
 800f522:	bf00      	nop
 800f524:	240017b8 	.word	0x240017b8
 800f528:	0800fda8 	.word	0x0800fda8

0800f52c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	4603      	mov	r3, r0
 800f534:	6039      	str	r1, [r7, #0]
 800f536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f538:	683a      	ldr	r2, [r7, #0]
 800f53a:	4904      	ldr	r1, [pc, #16]	@ (800f54c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f53c:	4804      	ldr	r0, [pc, #16]	@ (800f550 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f53e:	f7ff fdc9 	bl	800f0d4 <USBD_GetString>
  return USBD_StrDesc;
 800f542:	4b02      	ldr	r3, [pc, #8]	@ (800f54c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f544:	4618      	mov	r0, r3
 800f546:	3708      	adds	r7, #8
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	240017b8 	.word	0x240017b8
 800f550:	0800fdc0 	.word	0x0800fdc0

0800f554 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b082      	sub	sp, #8
 800f558:	af00      	add	r7, sp, #0
 800f55a:	4603      	mov	r3, r0
 800f55c:	6039      	str	r1, [r7, #0]
 800f55e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	221a      	movs	r2, #26
 800f564:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f566:	f000 f843 	bl	800f5f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f56a:	4b02      	ldr	r3, [pc, #8]	@ (800f574 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	240000e8 	.word	0x240000e8

0800f578 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	4603      	mov	r3, r0
 800f580:	6039      	str	r1, [r7, #0]
 800f582:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f584:	79fb      	ldrb	r3, [r7, #7]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d105      	bne.n	800f596 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f58a:	683a      	ldr	r2, [r7, #0]
 800f58c:	4907      	ldr	r1, [pc, #28]	@ (800f5ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800f58e:	4808      	ldr	r0, [pc, #32]	@ (800f5b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f590:	f7ff fda0 	bl	800f0d4 <USBD_GetString>
 800f594:	e004      	b.n	800f5a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f596:	683a      	ldr	r2, [r7, #0]
 800f598:	4904      	ldr	r1, [pc, #16]	@ (800f5ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800f59a:	4805      	ldr	r0, [pc, #20]	@ (800f5b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f59c:	f7ff fd9a 	bl	800f0d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f5a0:	4b02      	ldr	r3, [pc, #8]	@ (800f5ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3708      	adds	r7, #8
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	240017b8 	.word	0x240017b8
 800f5b0:	0800fdd4 	.word	0x0800fdd4

0800f5b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	6039      	str	r1, [r7, #0]
 800f5be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f5c0:	79fb      	ldrb	r3, [r7, #7]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d105      	bne.n	800f5d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f5c6:	683a      	ldr	r2, [r7, #0]
 800f5c8:	4907      	ldr	r1, [pc, #28]	@ (800f5e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f5ca:	4808      	ldr	r0, [pc, #32]	@ (800f5ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f5cc:	f7ff fd82 	bl	800f0d4 <USBD_GetString>
 800f5d0:	e004      	b.n	800f5dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f5d2:	683a      	ldr	r2, [r7, #0]
 800f5d4:	4904      	ldr	r1, [pc, #16]	@ (800f5e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f5d6:	4805      	ldr	r0, [pc, #20]	@ (800f5ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f5d8:	f7ff fd7c 	bl	800f0d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f5dc:	4b02      	ldr	r3, [pc, #8]	@ (800f5e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3708      	adds	r7, #8
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	240017b8 	.word	0x240017b8
 800f5ec:	0800fde0 	.word	0x0800fde0

0800f5f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f5f6:	4b0f      	ldr	r3, [pc, #60]	@ (800f634 <Get_SerialNum+0x44>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f5fc:	4b0e      	ldr	r3, [pc, #56]	@ (800f638 <Get_SerialNum+0x48>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f602:	4b0e      	ldr	r3, [pc, #56]	@ (800f63c <Get_SerialNum+0x4c>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f608:	68fa      	ldr	r2, [r7, #12]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4413      	add	r3, r2
 800f60e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d009      	beq.n	800f62a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f616:	2208      	movs	r2, #8
 800f618:	4909      	ldr	r1, [pc, #36]	@ (800f640 <Get_SerialNum+0x50>)
 800f61a:	68f8      	ldr	r0, [r7, #12]
 800f61c:	f000 f814 	bl	800f648 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f620:	2204      	movs	r2, #4
 800f622:	4908      	ldr	r1, [pc, #32]	@ (800f644 <Get_SerialNum+0x54>)
 800f624:	68b8      	ldr	r0, [r7, #8]
 800f626:	f000 f80f 	bl	800f648 <IntToUnicode>
  }
}
 800f62a:	bf00      	nop
 800f62c:	3710      	adds	r7, #16
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	1ff1e800 	.word	0x1ff1e800
 800f638:	1ff1e804 	.word	0x1ff1e804
 800f63c:	1ff1e808 	.word	0x1ff1e808
 800f640:	240000ea 	.word	0x240000ea
 800f644:	240000fa 	.word	0x240000fa

0800f648 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f648:	b480      	push	{r7}
 800f64a:	b087      	sub	sp, #28
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	60b9      	str	r1, [r7, #8]
 800f652:	4613      	mov	r3, r2
 800f654:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f656:	2300      	movs	r3, #0
 800f658:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f65a:	2300      	movs	r3, #0
 800f65c:	75fb      	strb	r3, [r7, #23]
 800f65e:	e027      	b.n	800f6b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	0f1b      	lsrs	r3, r3, #28
 800f664:	2b09      	cmp	r3, #9
 800f666:	d80b      	bhi.n	800f680 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	0f1b      	lsrs	r3, r3, #28
 800f66c:	b2da      	uxtb	r2, r3
 800f66e:	7dfb      	ldrb	r3, [r7, #23]
 800f670:	005b      	lsls	r3, r3, #1
 800f672:	4619      	mov	r1, r3
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	440b      	add	r3, r1
 800f678:	3230      	adds	r2, #48	@ 0x30
 800f67a:	b2d2      	uxtb	r2, r2
 800f67c:	701a      	strb	r2, [r3, #0]
 800f67e:	e00a      	b.n	800f696 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	0f1b      	lsrs	r3, r3, #28
 800f684:	b2da      	uxtb	r2, r3
 800f686:	7dfb      	ldrb	r3, [r7, #23]
 800f688:	005b      	lsls	r3, r3, #1
 800f68a:	4619      	mov	r1, r3
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	440b      	add	r3, r1
 800f690:	3237      	adds	r2, #55	@ 0x37
 800f692:	b2d2      	uxtb	r2, r2
 800f694:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	011b      	lsls	r3, r3, #4
 800f69a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f69c:	7dfb      	ldrb	r3, [r7, #23]
 800f69e:	005b      	lsls	r3, r3, #1
 800f6a0:	3301      	adds	r3, #1
 800f6a2:	68ba      	ldr	r2, [r7, #8]
 800f6a4:	4413      	add	r3, r2
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f6aa:	7dfb      	ldrb	r3, [r7, #23]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	75fb      	strb	r3, [r7, #23]
 800f6b0:	7dfa      	ldrb	r2, [r7, #23]
 800f6b2:	79fb      	ldrb	r3, [r7, #7]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d3d3      	bcc.n	800f660 <IntToUnicode+0x18>
  }
}
 800f6b8:	bf00      	nop
 800f6ba:	bf00      	nop
 800f6bc:	371c      	adds	r7, #28
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c4:	4770      	bx	lr
	...

0800f6c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b0ba      	sub	sp, #232	@ 0xe8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f6d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	601a      	str	r2, [r3, #0]
 800f6d8:	605a      	str	r2, [r3, #4]
 800f6da:	609a      	str	r2, [r3, #8]
 800f6dc:	60da      	str	r2, [r3, #12]
 800f6de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f6e0:	f107 0310 	add.w	r3, r7, #16
 800f6e4:	22c0      	movs	r2, #192	@ 0xc0
 800f6e6:	2100      	movs	r1, #0
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f000 fb25 	bl	800fd38 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	4a2c      	ldr	r2, [pc, #176]	@ (800f7a4 <HAL_PCD_MspInit+0xdc>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d151      	bne.n	800f79c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f6f8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f6fc:	f04f 0300 	mov.w	r3, #0
 800f700:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800f704:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f708:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f70c:	f107 0310 	add.w	r3, r7, #16
 800f710:	4618      	mov	r0, r3
 800f712:	f7f8 f95f 	bl	80079d4 <HAL_RCCEx_PeriphCLKConfig>
 800f716:	4603      	mov	r3, r0
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d001      	beq.n	800f720 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800f71c:	f7f1 fc72 	bl	8001004 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f720:	f7f7 f962 	bl	80069e8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f724:	4b20      	ldr	r3, [pc, #128]	@ (800f7a8 <HAL_PCD_MspInit+0xe0>)
 800f726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f72a:	4a1f      	ldr	r2, [pc, #124]	@ (800f7a8 <HAL_PCD_MspInit+0xe0>)
 800f72c:	f043 0301 	orr.w	r3, r3, #1
 800f730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800f734:	4b1c      	ldr	r3, [pc, #112]	@ (800f7a8 <HAL_PCD_MspInit+0xe0>)
 800f736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f73a:	f003 0301 	and.w	r3, r3, #1
 800f73e:	60fb      	str	r3, [r7, #12]
 800f740:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f742:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f746:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f74a:	2302      	movs	r3, #2
 800f74c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f750:	2300      	movs	r3, #0
 800f752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f756:	2300      	movs	r3, #0
 800f758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f75c:	230a      	movs	r3, #10
 800f75e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f762:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800f766:	4619      	mov	r1, r3
 800f768:	4810      	ldr	r0, [pc, #64]	@ (800f7ac <HAL_PCD_MspInit+0xe4>)
 800f76a:	f7f4 fc5d 	bl	8004028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f76e:	4b0e      	ldr	r3, [pc, #56]	@ (800f7a8 <HAL_PCD_MspInit+0xe0>)
 800f770:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f774:	4a0c      	ldr	r2, [pc, #48]	@ (800f7a8 <HAL_PCD_MspInit+0xe0>)
 800f776:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f77a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800f77e:	4b0a      	ldr	r3, [pc, #40]	@ (800f7a8 <HAL_PCD_MspInit+0xe0>)
 800f780:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f788:	60bb      	str	r3, [r7, #8]
 800f78a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f78c:	2200      	movs	r2, #0
 800f78e:	2100      	movs	r1, #0
 800f790:	2065      	movs	r0, #101	@ 0x65
 800f792:	f7f2 fb44 	bl	8001e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f796:	2065      	movs	r0, #101	@ 0x65
 800f798:	f7f2 fb5b 	bl	8001e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f79c:	bf00      	nop
 800f79e:	37e8      	adds	r7, #232	@ 0xe8
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	40080000 	.word	0x40080000
 800f7a8:	58024400 	.word	0x58024400
 800f7ac:	58020000 	.word	0x58020000

0800f7b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	4610      	mov	r0, r2
 800f7c8:	f7fe faf7 	bl	800ddba <USBD_LL_SetupStage>
}
 800f7cc:	bf00      	nop
 800f7ce:	3708      	adds	r7, #8
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}

0800f7d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	460b      	mov	r3, r1
 800f7de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f7e6:	78fa      	ldrb	r2, [r7, #3]
 800f7e8:	6879      	ldr	r1, [r7, #4]
 800f7ea:	4613      	mov	r3, r2
 800f7ec:	00db      	lsls	r3, r3, #3
 800f7ee:	4413      	add	r3, r2
 800f7f0:	009b      	lsls	r3, r3, #2
 800f7f2:	440b      	add	r3, r1
 800f7f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f7f8:	681a      	ldr	r2, [r3, #0]
 800f7fa:	78fb      	ldrb	r3, [r7, #3]
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	f7fe fb31 	bl	800de64 <USBD_LL_DataOutStage>
}
 800f802:	bf00      	nop
 800f804:	3708      	adds	r7, #8
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}

0800f80a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f80a:	b580      	push	{r7, lr}
 800f80c:	b082      	sub	sp, #8
 800f80e:	af00      	add	r7, sp, #0
 800f810:	6078      	str	r0, [r7, #4]
 800f812:	460b      	mov	r3, r1
 800f814:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f81c:	78fa      	ldrb	r2, [r7, #3]
 800f81e:	6879      	ldr	r1, [r7, #4]
 800f820:	4613      	mov	r3, r2
 800f822:	00db      	lsls	r3, r3, #3
 800f824:	4413      	add	r3, r2
 800f826:	009b      	lsls	r3, r3, #2
 800f828:	440b      	add	r3, r1
 800f82a:	3320      	adds	r3, #32
 800f82c:	681a      	ldr	r2, [r3, #0]
 800f82e:	78fb      	ldrb	r3, [r7, #3]
 800f830:	4619      	mov	r1, r3
 800f832:	f7fe fbca 	bl	800dfca <USBD_LL_DataInStage>
}
 800f836:	bf00      	nop
 800f838:	3708      	adds	r7, #8
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}

0800f83e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f83e:	b580      	push	{r7, lr}
 800f840:	b082      	sub	sp, #8
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7fe fd04 	bl	800e25a <USBD_LL_SOF>
}
 800f852:	bf00      	nop
 800f854:	3708      	adds	r7, #8
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}

0800f85a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f85a:	b580      	push	{r7, lr}
 800f85c:	b084      	sub	sp, #16
 800f85e:	af00      	add	r7, sp, #0
 800f860:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f862:	2301      	movs	r3, #1
 800f864:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	79db      	ldrb	r3, [r3, #7]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d102      	bne.n	800f874 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f86e:	2300      	movs	r3, #0
 800f870:	73fb      	strb	r3, [r7, #15]
 800f872:	e008      	b.n	800f886 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	79db      	ldrb	r3, [r3, #7]
 800f878:	2b02      	cmp	r3, #2
 800f87a:	d102      	bne.n	800f882 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f87c:	2301      	movs	r3, #1
 800f87e:	73fb      	strb	r3, [r7, #15]
 800f880:	e001      	b.n	800f886 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f882:	f7f1 fbbf 	bl	8001004 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f88c:	7bfa      	ldrb	r2, [r7, #15]
 800f88e:	4611      	mov	r1, r2
 800f890:	4618      	mov	r0, r3
 800f892:	f7fe fc9e 	bl	800e1d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f89c:	4618      	mov	r0, r3
 800f89e:	f7fe fc46 	bl	800e12e <USBD_LL_Reset>
}
 800f8a2:	bf00      	nop
 800f8a4:	3710      	adds	r7, #16
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
	...

0800f8ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fe fc99 	bl	800e1f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	687a      	ldr	r2, [r7, #4]
 800f8cc:	6812      	ldr	r2, [r2, #0]
 800f8ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f8d2:	f043 0301 	orr.w	r3, r3, #1
 800f8d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	7adb      	ldrb	r3, [r3, #11]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d005      	beq.n	800f8ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f8e0:	4b04      	ldr	r3, [pc, #16]	@ (800f8f4 <HAL_PCD_SuspendCallback+0x48>)
 800f8e2:	691b      	ldr	r3, [r3, #16]
 800f8e4:	4a03      	ldr	r2, [pc, #12]	@ (800f8f4 <HAL_PCD_SuspendCallback+0x48>)
 800f8e6:	f043 0306 	orr.w	r3, r3, #6
 800f8ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f8ec:	bf00      	nop
 800f8ee:	3708      	adds	r7, #8
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}
 800f8f4:	e000ed00 	.word	0xe000ed00

0800f8f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b082      	sub	sp, #8
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f906:	4618      	mov	r0, r3
 800f908:	f7fe fc8f 	bl	800e22a <USBD_LL_Resume>
}
 800f90c:	bf00      	nop
 800f90e:	3708      	adds	r7, #8
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	460b      	mov	r3, r1
 800f91e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f926:	78fa      	ldrb	r2, [r7, #3]
 800f928:	4611      	mov	r1, r2
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7fe fce7 	bl	800e2fe <USBD_LL_IsoOUTIncomplete>
}
 800f930:	bf00      	nop
 800f932:	3708      	adds	r7, #8
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	460b      	mov	r3, r1
 800f942:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f94a:	78fa      	ldrb	r2, [r7, #3]
 800f94c:	4611      	mov	r1, r2
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fe fca3 	bl	800e29a <USBD_LL_IsoINIncomplete>
}
 800f954:	bf00      	nop
 800f956:	3708      	adds	r7, #8
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7fe fcf9 	bl	800e362 <USBD_LL_DevConnected>
}
 800f970:	bf00      	nop
 800f972:	3708      	adds	r7, #8
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b082      	sub	sp, #8
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f986:	4618      	mov	r0, r3
 800f988:	f7fe fcf6 	bl	800e378 <USBD_LL_DevDisconnected>
}
 800f98c:	bf00      	nop
 800f98e:	3708      	adds	r7, #8
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d13e      	bne.n	800fa22 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f9a4:	4a21      	ldr	r2, [pc, #132]	@ (800fa2c <USBD_LL_Init+0x98>)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	4a1f      	ldr	r2, [pc, #124]	@ (800fa2c <USBD_LL_Init+0x98>)
 800f9b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f9b4:	4b1d      	ldr	r3, [pc, #116]	@ (800fa2c <USBD_LL_Init+0x98>)
 800f9b6:	4a1e      	ldr	r2, [pc, #120]	@ (800fa30 <USBD_LL_Init+0x9c>)
 800f9b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f9ba:	4b1c      	ldr	r3, [pc, #112]	@ (800fa2c <USBD_LL_Init+0x98>)
 800f9bc:	2209      	movs	r2, #9
 800f9be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f9c0:	4b1a      	ldr	r3, [pc, #104]	@ (800fa2c <USBD_LL_Init+0x98>)
 800f9c2:	2202      	movs	r2, #2
 800f9c4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f9c6:	4b19      	ldr	r3, [pc, #100]	@ (800fa2c <USBD_LL_Init+0x98>)
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f9cc:	4b17      	ldr	r3, [pc, #92]	@ (800fa2c <USBD_LL_Init+0x98>)
 800f9ce:	2202      	movs	r2, #2
 800f9d0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f9d2:	4b16      	ldr	r3, [pc, #88]	@ (800fa2c <USBD_LL_Init+0x98>)
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f9d8:	4b14      	ldr	r3, [pc, #80]	@ (800fa2c <USBD_LL_Init+0x98>)
 800f9da:	2200      	movs	r2, #0
 800f9dc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f9de:	4b13      	ldr	r3, [pc, #76]	@ (800fa2c <USBD_LL_Init+0x98>)
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f9e4:	4b11      	ldr	r3, [pc, #68]	@ (800fa2c <USBD_LL_Init+0x98>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f9ea:	4b10      	ldr	r3, [pc, #64]	@ (800fa2c <USBD_LL_Init+0x98>)
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f9f0:	4b0e      	ldr	r3, [pc, #56]	@ (800fa2c <USBD_LL_Init+0x98>)
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f9f6:	480d      	ldr	r0, [pc, #52]	@ (800fa2c <USBD_LL_Init+0x98>)
 800f9f8:	f7f5 fd1c 	bl	8005434 <HAL_PCD_Init>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d001      	beq.n	800fa06 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800fa02:	f7f1 faff 	bl	8001004 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fa06:	2180      	movs	r1, #128	@ 0x80
 800fa08:	4808      	ldr	r0, [pc, #32]	@ (800fa2c <USBD_LL_Init+0x98>)
 800fa0a:	f7f6 ff72 	bl	80068f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fa0e:	2240      	movs	r2, #64	@ 0x40
 800fa10:	2100      	movs	r1, #0
 800fa12:	4806      	ldr	r0, [pc, #24]	@ (800fa2c <USBD_LL_Init+0x98>)
 800fa14:	f7f6 ff26 	bl	8006864 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fa18:	2280      	movs	r2, #128	@ 0x80
 800fa1a:	2101      	movs	r1, #1
 800fa1c:	4803      	ldr	r0, [pc, #12]	@ (800fa2c <USBD_LL_Init+0x98>)
 800fa1e:	f7f6 ff21 	bl	8006864 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800fa22:	2300      	movs	r3, #0
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3708      	adds	r7, #8
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}
 800fa2c:	240019b8 	.word	0x240019b8
 800fa30:	40080000 	.word	0x40080000

0800fa34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b084      	sub	sp, #16
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa40:	2300      	movs	r3, #0
 800fa42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7f5 fdfe 	bl	800564c <HAL_PCD_Start>
 800fa50:	4603      	mov	r3, r0
 800fa52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa54:	7bfb      	ldrb	r3, [r7, #15]
 800fa56:	4618      	mov	r0, r3
 800fa58:	f000 f942 	bl	800fce0 <USBD_Get_USB_Status>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa60:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}

0800fa6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fa6a:	b580      	push	{r7, lr}
 800fa6c:	b084      	sub	sp, #16
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
 800fa72:	4608      	mov	r0, r1
 800fa74:	4611      	mov	r1, r2
 800fa76:	461a      	mov	r2, r3
 800fa78:	4603      	mov	r3, r0
 800fa7a:	70fb      	strb	r3, [r7, #3]
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	70bb      	strb	r3, [r7, #2]
 800fa80:	4613      	mov	r3, r2
 800fa82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa84:	2300      	movs	r3, #0
 800fa86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fa92:	78bb      	ldrb	r3, [r7, #2]
 800fa94:	883a      	ldrh	r2, [r7, #0]
 800fa96:	78f9      	ldrb	r1, [r7, #3]
 800fa98:	f7f6 faff 	bl	800609a <HAL_PCD_EP_Open>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800faa0:	7bfb      	ldrb	r3, [r7, #15]
 800faa2:	4618      	mov	r0, r3
 800faa4:	f000 f91c 	bl	800fce0 <USBD_Get_USB_Status>
 800faa8:	4603      	mov	r3, r0
 800faaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faac:	7bbb      	ldrb	r3, [r7, #14]
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3710      	adds	r7, #16
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}

0800fab6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fab6:	b580      	push	{r7, lr}
 800fab8:	b084      	sub	sp, #16
 800faba:	af00      	add	r7, sp, #0
 800fabc:	6078      	str	r0, [r7, #4]
 800fabe:	460b      	mov	r3, r1
 800fac0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fac2:	2300      	movs	r3, #0
 800fac4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fac6:	2300      	movs	r3, #0
 800fac8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fad0:	78fa      	ldrb	r2, [r7, #3]
 800fad2:	4611      	mov	r1, r2
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7f6 fb4a 	bl	800616e <HAL_PCD_EP_Close>
 800fada:	4603      	mov	r3, r0
 800fadc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fade:	7bfb      	ldrb	r3, [r7, #15]
 800fae0:	4618      	mov	r0, r3
 800fae2:	f000 f8fd 	bl	800fce0 <USBD_Get_USB_Status>
 800fae6:	4603      	mov	r3, r0
 800fae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faea:	7bbb      	ldrb	r3, [r7, #14]
}
 800faec:	4618      	mov	r0, r3
 800faee:	3710      	adds	r7, #16
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	460b      	mov	r3, r1
 800fafe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb00:	2300      	movs	r3, #0
 800fb02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb04:	2300      	movs	r3, #0
 800fb06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fb0e:	78fa      	ldrb	r2, [r7, #3]
 800fb10:	4611      	mov	r1, r2
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7f6 fc02 	bl	800631c <HAL_PCD_EP_SetStall>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb1c:	7bfb      	ldrb	r3, [r7, #15]
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f000 f8de 	bl	800fce0 <USBD_Get_USB_Status>
 800fb24:	4603      	mov	r3, r0
 800fb26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb28:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3710      	adds	r7, #16
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}

0800fb32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b084      	sub	sp, #16
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
 800fb3a:	460b      	mov	r3, r1
 800fb3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb42:	2300      	movs	r3, #0
 800fb44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fb4c:	78fa      	ldrb	r2, [r7, #3]
 800fb4e:	4611      	mov	r1, r2
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7f6 fc46 	bl	80063e2 <HAL_PCD_EP_ClrStall>
 800fb56:	4603      	mov	r3, r0
 800fb58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb5a:	7bfb      	ldrb	r3, [r7, #15]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f000 f8bf 	bl	800fce0 <USBD_Get_USB_Status>
 800fb62:	4603      	mov	r3, r0
 800fb64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb66:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3710      	adds	r7, #16
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b085      	sub	sp, #20
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fb82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fb84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	da0b      	bge.n	800fba4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fb8c:	78fb      	ldrb	r3, [r7, #3]
 800fb8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fb92:	68f9      	ldr	r1, [r7, #12]
 800fb94:	4613      	mov	r3, r2
 800fb96:	00db      	lsls	r3, r3, #3
 800fb98:	4413      	add	r3, r2
 800fb9a:	009b      	lsls	r3, r3, #2
 800fb9c:	440b      	add	r3, r1
 800fb9e:	3316      	adds	r3, #22
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	e00b      	b.n	800fbbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fba4:	78fb      	ldrb	r3, [r7, #3]
 800fba6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fbaa:	68f9      	ldr	r1, [r7, #12]
 800fbac:	4613      	mov	r3, r2
 800fbae:	00db      	lsls	r3, r3, #3
 800fbb0:	4413      	add	r3, r2
 800fbb2:	009b      	lsls	r3, r3, #2
 800fbb4:	440b      	add	r3, r1
 800fbb6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800fbba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3714      	adds	r7, #20
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr

0800fbc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b084      	sub	sp, #16
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fbe2:	78fa      	ldrb	r2, [r7, #3]
 800fbe4:	4611      	mov	r1, r2
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7f6 fa33 	bl	8006052 <HAL_PCD_SetAddress>
 800fbec:	4603      	mov	r3, r0
 800fbee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbf0:	7bfb      	ldrb	r3, [r7, #15]
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f000 f874 	bl	800fce0 <USBD_Get_USB_Status>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3710      	adds	r7, #16
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}

0800fc06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc06:	b580      	push	{r7, lr}
 800fc08:	b086      	sub	sp, #24
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	60f8      	str	r0, [r7, #12]
 800fc0e:	607a      	str	r2, [r7, #4]
 800fc10:	603b      	str	r3, [r7, #0]
 800fc12:	460b      	mov	r3, r1
 800fc14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc16:	2300      	movs	r3, #0
 800fc18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fc24:	7af9      	ldrb	r1, [r7, #11]
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	687a      	ldr	r2, [r7, #4]
 800fc2a:	f7f6 fb3d 	bl	80062a8 <HAL_PCD_EP_Transmit>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc32:	7dfb      	ldrb	r3, [r7, #23]
 800fc34:	4618      	mov	r0, r3
 800fc36:	f000 f853 	bl	800fce0 <USBD_Get_USB_Status>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fc3e:	7dbb      	ldrb	r3, [r7, #22]
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3718      	adds	r7, #24
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}

0800fc48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b086      	sub	sp, #24
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	607a      	str	r2, [r7, #4]
 800fc52:	603b      	str	r3, [r7, #0]
 800fc54:	460b      	mov	r3, r1
 800fc56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fc66:	7af9      	ldrb	r1, [r7, #11]
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	f7f6 fac9 	bl	8006202 <HAL_PCD_EP_Receive>
 800fc70:	4603      	mov	r3, r0
 800fc72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc74:	7dfb      	ldrb	r3, [r7, #23]
 800fc76:	4618      	mov	r0, r3
 800fc78:	f000 f832 	bl	800fce0 <USBD_Get_USB_Status>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fc80:	7dbb      	ldrb	r3, [r7, #22]
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3718      	adds	r7, #24
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}

0800fc8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b082      	sub	sp, #8
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	6078      	str	r0, [r7, #4]
 800fc92:	460b      	mov	r3, r1
 800fc94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fc9c:	78fa      	ldrb	r2, [r7, #3]
 800fc9e:	4611      	mov	r1, r2
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7f6 fae9 	bl	8006278 <HAL_PCD_EP_GetRxCount>
 800fca6:	4603      	mov	r3, r0
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3708      	adds	r7, #8
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fcb8:	4b03      	ldr	r3, [pc, #12]	@ (800fcc8 <USBD_static_malloc+0x18>)
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	370c      	adds	r7, #12
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc4:	4770      	bx	lr
 800fcc6:	bf00      	nop
 800fcc8:	24001e9c 	.word	0x24001e9c

0800fccc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b083      	sub	sp, #12
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800fcd4:	bf00      	nop
 800fcd6:	370c      	adds	r7, #12
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr

0800fce0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b085      	sub	sp, #20
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	4603      	mov	r3, r0
 800fce8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcea:	2300      	movs	r3, #0
 800fcec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fcee:	79fb      	ldrb	r3, [r7, #7]
 800fcf0:	2b03      	cmp	r3, #3
 800fcf2:	d817      	bhi.n	800fd24 <USBD_Get_USB_Status+0x44>
 800fcf4:	a201      	add	r2, pc, #4	@ (adr r2, 800fcfc <USBD_Get_USB_Status+0x1c>)
 800fcf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcfa:	bf00      	nop
 800fcfc:	0800fd0d 	.word	0x0800fd0d
 800fd00:	0800fd13 	.word	0x0800fd13
 800fd04:	0800fd19 	.word	0x0800fd19
 800fd08:	0800fd1f 	.word	0x0800fd1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	73fb      	strb	r3, [r7, #15]
    break;
 800fd10:	e00b      	b.n	800fd2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fd12:	2303      	movs	r3, #3
 800fd14:	73fb      	strb	r3, [r7, #15]
    break;
 800fd16:	e008      	b.n	800fd2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fd18:	2301      	movs	r3, #1
 800fd1a:	73fb      	strb	r3, [r7, #15]
    break;
 800fd1c:	e005      	b.n	800fd2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fd1e:	2303      	movs	r3, #3
 800fd20:	73fb      	strb	r3, [r7, #15]
    break;
 800fd22:	e002      	b.n	800fd2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fd24:	2303      	movs	r3, #3
 800fd26:	73fb      	strb	r3, [r7, #15]
    break;
 800fd28:	bf00      	nop
  }
  return usb_status;
 800fd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3714      	adds	r7, #20
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr

0800fd38 <memset>:
 800fd38:	4402      	add	r2, r0
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	4293      	cmp	r3, r2
 800fd3e:	d100      	bne.n	800fd42 <memset+0xa>
 800fd40:	4770      	bx	lr
 800fd42:	f803 1b01 	strb.w	r1, [r3], #1
 800fd46:	e7f9      	b.n	800fd3c <memset+0x4>

0800fd48 <__libc_init_array>:
 800fd48:	b570      	push	{r4, r5, r6, lr}
 800fd4a:	4d0d      	ldr	r5, [pc, #52]	@ (800fd80 <__libc_init_array+0x38>)
 800fd4c:	4c0d      	ldr	r4, [pc, #52]	@ (800fd84 <__libc_init_array+0x3c>)
 800fd4e:	1b64      	subs	r4, r4, r5
 800fd50:	10a4      	asrs	r4, r4, #2
 800fd52:	2600      	movs	r6, #0
 800fd54:	42a6      	cmp	r6, r4
 800fd56:	d109      	bne.n	800fd6c <__libc_init_array+0x24>
 800fd58:	4d0b      	ldr	r5, [pc, #44]	@ (800fd88 <__libc_init_array+0x40>)
 800fd5a:	4c0c      	ldr	r4, [pc, #48]	@ (800fd8c <__libc_init_array+0x44>)
 800fd5c:	f000 f818 	bl	800fd90 <_init>
 800fd60:	1b64      	subs	r4, r4, r5
 800fd62:	10a4      	asrs	r4, r4, #2
 800fd64:	2600      	movs	r6, #0
 800fd66:	42a6      	cmp	r6, r4
 800fd68:	d105      	bne.n	800fd76 <__libc_init_array+0x2e>
 800fd6a:	bd70      	pop	{r4, r5, r6, pc}
 800fd6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd70:	4798      	blx	r3
 800fd72:	3601      	adds	r6, #1
 800fd74:	e7ee      	b.n	800fd54 <__libc_init_array+0xc>
 800fd76:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd7a:	4798      	blx	r3
 800fd7c:	3601      	adds	r6, #1
 800fd7e:	e7f2      	b.n	800fd66 <__libc_init_array+0x1e>
 800fd80:	0800fe38 	.word	0x0800fe38
 800fd84:	0800fe38 	.word	0x0800fe38
 800fd88:	0800fe38 	.word	0x0800fe38
 800fd8c:	0800fe3c 	.word	0x0800fe3c

0800fd90 <_init>:
 800fd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd92:	bf00      	nop
 800fd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd96:	bc08      	pop	{r3}
 800fd98:	469e      	mov	lr, r3
 800fd9a:	4770      	bx	lr

0800fd9c <_fini>:
 800fd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd9e:	bf00      	nop
 800fda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fda2:	bc08      	pop	{r3}
 800fda4:	469e      	mov	lr, r3
 800fda6:	4770      	bx	lr
