
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001add4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0801b078  0801b078  0001c078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b934  0801b934  0001c934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b93c  0801b93c  0001c93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801b940  0801b940  0001c940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e4  24000000  0801b944  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000277b0  240002e4  0801bc28  0001d2e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24027a94  0801bc28  0001da94  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001d2e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fa3d  00000000  00000000  0001d312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005961  00000000  00000000  0004cd4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022c8  00000000  00000000  000526b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001b1e  00000000  00000000  00054978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e074  00000000  00000000  00056496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000321c1  00000000  00000000  0009450a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172f32  00000000  00000000  000c66cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002395fd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a44c  00000000  00000000  00239640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  00243a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002e4 	.word	0x240002e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b05c 	.word	0x0801b05c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002e8 	.word	0x240002e8
 80002dc:	0801b05c 	.word	0x0801b05c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c0:	f3bf 8f4f 	dsb	sy
}
 80006c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006ce:	4904      	ldr	r1, [pc, #16]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__NVIC_SystemReset+0x28>)
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d6:	f3bf 8f4f 	dsb	sy
}
 80006da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <__NVIC_SystemReset+0x20>
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	05fa0004 	.word	0x05fa0004

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006ee:	f001 fd67 	bl	80021c0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f002 fe09 	bl	8003308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f93b 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 fda3 	bl	8001244 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fe:	f000 fd49 	bl	8001194 <MX_DMA_Init>
  MX_MDMA_Init();
 8000702:	f000 fd7f 	bl	8001204 <MX_MDMA_Init>
  MX_USART1_UART_Init();
 8000706:	f000 fcf3 	bl	80010f0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800070a:	f017 f987 	bl	8017a1c <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 800070e:	f000 f9a9 	bl	8000a64 <MX_DCMI_Init>
  MX_I2C2_Init();
 8000712:	f000 f9dd 	bl	8000ad0 <MX_I2C2_Init>
  MX_TIM14_Init();
 8000716:	f000 fc9f 	bl	8001058 <MX_TIM14_Init>
  MX_TIM2_Init();
 800071a:	f000 fb11 	bl	8000d40 <MX_TIM2_Init>
  MX_TIM4_Init();
 800071e:	f000 fbe5 	bl	8000eec <MX_TIM4_Init>
  MX_TIM1_Init();
 8000722:	f000 fa7f 	bl	8000c24 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000726:	f000 fb7b 	bl	8000e20 <MX_TIM3_Init>
  MX_JPEG_Init();
 800072a:	f000 fa11 	bl	8000b50 <MX_JPEG_Init>
  MX_SPI2_Init();
 800072e:	f000 fa23 	bl	8000b78 <MX_SPI2_Init>
  MX_TIM5_Init();
 8000732:	f000 fc41 	bl	8000fb8 <MX_TIM5_Init>
//			  //sprintf(usb_msg, "err\r\n");
//			  //HAL_UART_Transmit(&huart1, usb_msg, strlen(usb_msg), 1000);
//		  }
//	}
	// ------------------------------------------------------------ SETUP INA229 -- //
	hina229.spi_handle = &hspi2;
 8000736:	4b77      	ldr	r3, [pc, #476]	@ (8000914 <main+0x22c>)
 8000738:	4a77      	ldr	r2, [pc, #476]	@ (8000918 <main+0x230>)
 800073a:	601a      	str	r2, [r3, #0]
	hina229.cs_gpio_handle = INA_CS_GPIO_Port;
 800073c:	4b75      	ldr	r3, [pc, #468]	@ (8000914 <main+0x22c>)
 800073e:	4a77      	ldr	r2, [pc, #476]	@ (800091c <main+0x234>)
 8000740:	605a      	str	r2, [r3, #4]
	hina229.cs_gpio_pin = INA_CS_Pin;
 8000742:	4b74      	ldr	r3, [pc, #464]	@ (8000914 <main+0x22c>)
 8000744:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000748:	811a      	strh	r2, [r3, #8]

	if (INA229_Init(&hina229)) {
 800074a:	4872      	ldr	r0, [pc, #456]	@ (8000914 <main+0x22c>)
 800074c:	f002 fd4b 	bl	80031e6 <INA229_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d00e      	beq.n	8000774 <main+0x8c>
		sprintf(ssd_msg, " Failed to Init INA229");
 8000756:	4972      	ldr	r1, [pc, #456]	@ (8000920 <main+0x238>)
 8000758:	4872      	ldr	r0, [pc, #456]	@ (8000924 <main+0x23c>)
 800075a:	f018 fc75 	bl	8019048 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 800075e:	4871      	ldr	r0, [pc, #452]	@ (8000924 <main+0x23c>)
 8000760:	f7ff fe0e 	bl	8000380 <strlen>
 8000764:	4603      	mov	r3, r0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4619      	mov	r1, r3
 800076a:	486e      	ldr	r0, [pc, #440]	@ (8000924 <main+0x23c>)
 800076c:	f001 fb57 	bl	8001e1e <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000770:	f7ff ffa4 	bl	80006bc <__NVIC_SystemReset>
	}

	// ------------------------------------------------------------ SETUP CAMERA INTERFACE -- //
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);// XCLK - Start the camera's core clock
 8000774:	2100      	movs	r1, #0
 8000776:	486c      	ldr	r0, [pc, #432]	@ (8000928 <main+0x240>)
 8000778:	f010 fa70 	bl	8010c5c <HAL_TIM_PWM_Start>
	// X 		  COM15 [6] = 1 (Data range [00-FF])
	// X 		  COM15 [5] = 0 (RGB 565)
	// X 		  COM15 [4] = 1 (RGB 565)
	uint8_t cam_regCache;

	cam_regCache = 0b00001000;
 800077c:	2308      	movs	r3, #8
 800077e:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x0C, cam_regCache, 0)) {
 8000780:	bf00      	nop
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	200c      	movs	r0, #12
 800078a:	f001 fbd1 	bl	8001f30 <CAM_SetRegister>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1f6      	bne.n	8000782 <main+0x9a>
	}

	cam_regCache = 0b00010000;
 8000794:	2310      	movs	r3, #16
 8000796:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x12, cam_regCache, 0)) {
 8000798:	bf00      	nop
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	2012      	movs	r0, #18
 80007a2:	f001 fbc5 	bl	8001f30 <CAM_SetRegister>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1f6      	bne.n	800079a <main+0xb2>
	}

	cam_regCache = 0b10000110;
 80007ac:	2386      	movs	r3, #134	@ 0x86
 80007ae:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x32, cam_regCache, 0)) {
 80007b0:	bf00      	nop
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	2032      	movs	r0, #50	@ 0x32
 80007ba:	f001 fbb9 	bl	8001f30 <CAM_SetRegister>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1f6      	bne.n	80007b2 <main+0xca>
	//while (CAM_SetRegister(0x40, cam_regCache, 0)) {}

	// ------------------------------------------------------------ SETUP JPEG ENCODING -- //
	// Set the CONFIG
	JPEG_ConfTypeDef *jpeg_config;
	jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
	//jpeg_config->ColorSpace = JPEG_YCBCR_COLORSPACE;
	//jpeg_config->ChromaSubsampling = JPEG_422_SUBSAMPLING;
	jpeg_config->ImageWidth = jpeg_mcu_widths[jpeg_quality] * 8;
 80007ca:	4b58      	ldr	r3, [pc, #352]	@ (800092c <main+0x244>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b57      	ldr	r3, [pc, #348]	@ (8000930 <main+0x248>)
 80007d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	60da      	str	r2, [r3, #12]
	jpeg_config->ImageHeight = jpeg_mcu_heights[jpeg_quality] * 8;
 80007de:	4b53      	ldr	r3, [pc, #332]	@ (800092c <main+0x244>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b53      	ldr	r3, [pc, #332]	@ (8000934 <main+0x24c>)
 80007e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	461a      	mov	r2, r3
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	609a      	str	r2, [r3, #8]
	jpeg_config->ImageQuality = JPEG_QUALITY;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	2214      	movs	r2, #20
 80007f6:	611a      	str	r2, [r3, #16]
	HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 80007f8:	6839      	ldr	r1, [r7, #0]
 80007fa:	484f      	ldr	r0, [pc, #316]	@ (8000938 <main+0x250>)
 80007fc:	f008 fccc 	bl	8009198 <HAL_JPEG_ConfigEncoding>

	// ------------------------------------------------------------ SETUP WATCHDOG TIMER-- //
	if (HAL_TIM_Base_Start_IT(&htim5) != HAL_OK) {
 8000800:	484e      	ldr	r0, [pc, #312]	@ (800093c <main+0x254>)
 8000802:	f010 f95b 	bl	8010abc <HAL_TIM_Base_Start_IT>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00e      	beq.n	800082a <main+0x142>
		sprintf(ssd_msg, " Failed to Start Watchdog");
 800080c:	494c      	ldr	r1, [pc, #304]	@ (8000940 <main+0x258>)
 800080e:	4845      	ldr	r0, [pc, #276]	@ (8000924 <main+0x23c>)
 8000810:	f018 fc1a 	bl	8019048 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8000814:	4843      	ldr	r0, [pc, #268]	@ (8000924 <main+0x23c>)
 8000816:	f7ff fdb3 	bl	8000380 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	4840      	ldr	r0, [pc, #256]	@ (8000924 <main+0x23c>)
 8000822:	f001 fafc 	bl	8001e1e <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000826:	f7ff ff49 	bl	80006bc <__NVIC_SystemReset>
		while (1) {
		}
	}

	// ------------------------------------------------------------ SETUP XBEE -- //
	hxbee.uart_handle = &huart1;
 800082a:	4b46      	ldr	r3, [pc, #280]	@ (8000944 <main+0x25c>)
 800082c:	4a46      	ldr	r2, [pc, #280]	@ (8000948 <main+0x260>)
 800082e:	601a      	str	r2, [r3, #0]
	hxbee.pktRx_max = 2;
 8000830:	4b44      	ldr	r3, [pc, #272]	@ (8000944 <main+0x25c>)
 8000832:	2202      	movs	r2, #2
 8000834:	761a      	strb	r2, [r3, #24]
	hxbee.pktTx_max = 2;
 8000836:	4b43      	ldr	r3, [pc, #268]	@ (8000944 <main+0x25c>)
 8000838:	2202      	movs	r2, #2
 800083a:	f883 2020 	strb.w	r2, [r3, #32]

	if (XBEE_Init(&hxbee)) {
 800083e:	4841      	ldr	r0, [pc, #260]	@ (8000944 <main+0x25c>)
 8000840:	f014 ff09 	bl	8015656 <XBEE_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00e      	beq.n	8000868 <main+0x180>
		sprintf(ssd_msg, " Failed to Init XBEE");
 800084a:	4940      	ldr	r1, [pc, #256]	@ (800094c <main+0x264>)
 800084c:	4835      	ldr	r0, [pc, #212]	@ (8000924 <main+0x23c>)
 800084e:	f018 fbfb 	bl	8019048 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8000852:	4834      	ldr	r0, [pc, #208]	@ (8000924 <main+0x23c>)
 8000854:	f7ff fd94 	bl	8000380 <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4619      	mov	r1, r3
 800085e:	4831      	ldr	r0, [pc, #196]	@ (8000924 <main+0x23c>)
 8000860:	f001 fadd 	bl	8001e1e <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000864:	f7ff ff2a 	bl	80006bc <__NVIC_SystemReset>
	}

	// SETUP MOTOR
	TIM2->CCR1 = 0;
 8000868:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800086c:	2200      	movs	r2, #0
 800086e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = 0;
 8000870:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000874:	2200      	movs	r2, #0
 8000876:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR4 = 0;
 8000878:	4b35      	ldr	r3, [pc, #212]	@ (8000950 <main+0x268>)
 800087a:	2200      	movs	r2, #0
 800087c:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM4->CCR3 = 0;
 800087e:	4b34      	ldr	r3, [pc, #208]	@ (8000950 <main+0x268>)
 8000880:	2200      	movs	r2, #0
 8000882:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // LEFT_PWM_1
 8000884:	2100      	movs	r1, #0
 8000886:	4833      	ldr	r0, [pc, #204]	@ (8000954 <main+0x26c>)
 8000888:	f010 f9e8 	bl	8010c5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // RIGHT_PWM_1
 800088c:	2104      	movs	r1, #4
 800088e:	4831      	ldr	r0, [pc, #196]	@ (8000954 <main+0x26c>)
 8000890:	f010 f9e4 	bl	8010c5c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // LEFT_PWM_2
 8000894:	210c      	movs	r1, #12
 8000896:	4830      	ldr	r0, [pc, #192]	@ (8000958 <main+0x270>)
 8000898:	f010 f9e0 	bl	8010c5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RIGHT_PWM_2
 800089c:	2108      	movs	r1, #8
 800089e:	482e      	ldr	r0, [pc, #184]	@ (8000958 <main+0x270>)
 80008a0:	f010 f9dc 	bl	8010c5c <HAL_TIM_PWM_Start>


	// Setup lights
	TIM1->CCR4 = 1000; // 0 - 2000
 80008a4:	4b2d      	ldr	r3, [pc, #180]	@ (800095c <main+0x274>)
 80008a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008aa:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3->CCR4 = 1000;
 80008ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000960 <main+0x278>)
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3->CCR3 = 1000;
 80008b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000960 <main+0x278>)
 80008b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR3 = 1000;
 80008bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // LIGHTS_PWM_1
 80008c6:	210c      	movs	r1, #12
 80008c8:	4826      	ldr	r0, [pc, #152]	@ (8000964 <main+0x27c>)
 80008ca:	f010 f9c7 	bl	8010c5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // LIGHTS_PWM_2
 80008ce:	210c      	movs	r1, #12
 80008d0:	4825      	ldr	r0, [pc, #148]	@ (8000968 <main+0x280>)
 80008d2:	f010 f9c3 	bl	8010c5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // LIGHTS_PWM_3
 80008d6:	2108      	movs	r1, #8
 80008d8:	4823      	ldr	r0, [pc, #140]	@ (8000968 <main+0x280>)
 80008da:	f010 f9bf 	bl	8010c5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // LIGHTS_PWM_4
 80008de:	2108      	movs	r1, #8
 80008e0:	481c      	ldr	r0, [pc, #112]	@ (8000954 <main+0x26c>)
 80008e2:	f010 f9bb 	bl	8010c5c <HAL_TIM_PWM_Start>

	// Delay for goofiness
	HAL_Delay(1000);
 80008e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008ea:	f002 fd9f 	bl	800342c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); // Motor_en
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	481e      	ldr	r0, [pc, #120]	@ (800096c <main+0x284>)
 80008f4:	f006 fee8 	bl	80076c8 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SCH_XBeeRX();	// Handle radio recieve
 80008f8:	f000 fd8e 	bl	8001418 <SCH_XBeeRX>
		SCH_CTRL();		// Handle control signals
 80008fc:	f000 ff20 	bl	8001740 <SCH_CTRL>
		SCH_PowerMon();	// Power Monitoring
 8000900:	f001 f89e 	bl	8001a40 <SCH_PowerMon>
		SCH_Camera();	// Take a picture if camera idle
 8000904:	f001 f8ec 	bl	8001ae0 <SCH_Camera>
		SCH_JPEG();		// Convert JPEG if camera ready to present
 8000908:	f001 f92a 	bl	8001b60 <SCH_JPEG>
		SCH_XBeeTX();	// Transmit JPEG if JPEG ready
 800090c:	f000 fe7e 	bl	800160c <SCH_XBeeTX>
		SCH_XBeeRX();	// Handle radio recieve
 8000910:	bf00      	nop
 8000912:	e7f1      	b.n	80008f8 <main+0x210>
 8000914:	2400093c 	.word	0x2400093c
 8000918:	2400054c 	.word	0x2400054c
 800091c:	58020800 	.word	0x58020800
 8000920:	0801b078 	.word	0x0801b078
 8000924:	240008d4 	.word	0x240008d4
 8000928:	24000750 	.word	0x24000750
 800092c:	24025d2c 	.word	0x24025d2c
 8000930:	24000004 	.word	0x24000004
 8000934:	2400000c 	.word	0x2400000c
 8000938:	2400041c 	.word	0x2400041c
 800093c:	24000704 	.word	0x24000704
 8000940:	0801b090 	.word	0x0801b090
 8000944:	24025d30 	.word	0x24025d30
 8000948:	2400079c 	.word	0x2400079c
 800094c:	0801b0ac 	.word	0x0801b0ac
 8000950:	40000800 	.word	0x40000800
 8000954:	24000620 	.word	0x24000620
 8000958:	240006b8 	.word	0x240006b8
 800095c:	40010000 	.word	0x40010000
 8000960:	40000400 	.word	0x40000400
 8000964:	240005d4 	.word	0x240005d4
 8000968:	2400066c 	.word	0x2400066c
 800096c:	58020000 	.word	0x58020000

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09c      	sub	sp, #112	@ 0x70
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097a:	224c      	movs	r2, #76	@ 0x4c
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f018 fbc7 	bl	8019112 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2220      	movs	r2, #32
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f018 fbc1 	bl	8019112 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000990:	2002      	movs	r0, #2
 8000992:	f00c fb73 	bl	800d07c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b30      	ldr	r3, [pc, #192]	@ (8000a5c <SystemClock_Config+0xec>)
 800099c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800099e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a5c <SystemClock_Config+0xec>)
 80009a0:	f023 0301 	bic.w	r3, r3, #1
 80009a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009a6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <SystemClock_Config+0xec>)
 80009a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a60 <SystemClock_Config+0xf0>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000a60 <SystemClock_Config+0xf0>)
 80009b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <SystemClock_Config+0xf0>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c8:	bf00      	nop
 80009ca:	4b25      	ldr	r3, [pc, #148]	@ (8000a60 <SystemClock_Config+0xf0>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009d6:	d1f8      	bne.n	80009ca <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d8:	2301      	movs	r3, #1
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e2:	2302      	movs	r3, #2
 80009e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e6:	2302      	movs	r3, #2
 80009e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009ee:	2318      	movs	r3, #24
 80009f0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80009f6:	2306      	movs	r3, #6
 80009f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009fa:	2302      	movs	r3, #2
 80009fc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009fe:	230c      	movs	r3, #12
 8000a00:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f00c fb7e 	bl	800d110 <HAL_RCC_OscConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a1a:	f001 fbfd 	bl	8002218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1e:	233f      	movs	r3, #63	@ 0x3f
 8000a20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a22:	2303      	movs	r3, #3
 8000a24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a2e:	2340      	movs	r3, #64	@ 0x40
 8000a30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a32:	2340      	movs	r3, #64	@ 0x40
 8000a34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a3a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a3c:	2340      	movs	r3, #64	@ 0x40
 8000a3e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2102      	movs	r1, #2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00c ffbd 	bl	800d9c4 <HAL_RCC_ClockConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000a50:	f001 fbe2 	bl	8002218 <Error_Handler>
  }
}
 8000a54:	bf00      	nop
 8000a56:	3770      	adds	r7, #112	@ 0x70
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	58000400 	.word	0x58000400
 8000a60:	58024800 	.word	0x58024800

08000a64 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000a68:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <MX_DCMI_Init+0x64>)
 8000a6a:	4a18      	ldr	r2, [pc, #96]	@ (8000acc <MX_DCMI_Init+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <MX_DCMI_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a74:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <MX_DCMI_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <MX_DCMI_Init+0x64>)
 8000a7c:	2280      	movs	r2, #128	@ 0x80
 8000a7e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_DCMI_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <MX_DCMI_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <MX_DCMI_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <MX_DCMI_Init+0x64>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_OTHER;
 8000a98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <MX_DCMI_Init+0x64>)
 8000a9a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_EVEN;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <MX_DCMI_Init+0x64>)
 8000aa2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <MX_DCMI_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <MX_DCMI_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	@ (8000ac8 <MX_DCMI_Init+0x64>)
 8000ab6:	f002 fe71 	bl	800379c <HAL_DCMI_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_DCMI_Init+0x60>
  {
    Error_Handler();
 8000ac0:	f001 fbaa 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	24000300 	.word	0x24000300
 8000acc:	48020000 	.word	0x48020000

08000ad0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b48 <MX_I2C2_Init+0x78>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000adc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b4c <MX_I2C2_Init+0x7c>)
 8000ade:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ae0:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aec:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000af2:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b0a:	480e      	ldr	r0, [pc, #56]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000b0c:	f006 fdf6 	bl	80076fc <HAL_I2C_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b16:	f001 fb7f 	bl	8002218 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4809      	ldr	r0, [pc, #36]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000b1e:	f008 fa21 	bl	8008f64 <HAL_I2CEx_ConfigAnalogFilter>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b28:	f001 fb76 	bl	8002218 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <MX_I2C2_Init+0x74>)
 8000b30:	f008 fa63 	bl	8008ffa <HAL_I2CEx_ConfigDigitalFilter>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b3a:	f001 fb6d 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	240003c8 	.word	0x240003c8
 8000b48:	40005800 	.word	0x40005800
 8000b4c:	00c0eaff 	.word	0x00c0eaff

08000b50 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_JPEG_Init+0x20>)
 8000b56:	4a07      	ldr	r2, [pc, #28]	@ (8000b74 <MX_JPEG_Init+0x24>)
 8000b58:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_JPEG_Init+0x20>)
 8000b5c:	f008 fa9a 	bl	8009094 <HAL_JPEG_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000b66:	f001 fb57 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2400041c 	.word	0x2400041c
 8000b74:	52003000 	.word	0x52003000

08000b78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b7c:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000b7e:	4a28      	ldr	r2, [pc, #160]	@ (8000c20 <MX_SPI2_Init+0xa8>)
 8000b80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b82:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000b84:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b8a:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b90:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000b92:	2207      	movs	r2, #7
 8000b94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b96:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000b98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000ba6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000baa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000bae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bb2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bba:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <MX_SPI2_Init+0xa4>)
 8000c0a:	f00f f893 	bl	800fd34 <HAL_SPI_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000c14:	f001 fb00 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2400054c 	.word	0x2400054c
 8000c20:	40003800 	.word	0x40003800

08000c24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b096      	sub	sp, #88	@ 0x58
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]
 8000c46:	615a      	str	r2, [r3, #20]
 8000c48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	222c      	movs	r2, #44	@ 0x2c
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f018 fa5e 	bl	8019112 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c56:	4b38      	ldr	r3, [pc, #224]	@ (8000d38 <MX_TIM1_Init+0x114>)
 8000c58:	4a38      	ldr	r2, [pc, #224]	@ (8000d3c <MX_TIM1_Init+0x118>)
 8000c5a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c5c:	4b36      	ldr	r3, [pc, #216]	@ (8000d38 <MX_TIM1_Init+0x114>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b35      	ldr	r3, [pc, #212]	@ (8000d38 <MX_TIM1_Init+0x114>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000c68:	4b33      	ldr	r3, [pc, #204]	@ (8000d38 <MX_TIM1_Init+0x114>)
 8000c6a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b31      	ldr	r3, [pc, #196]	@ (8000d38 <MX_TIM1_Init+0x114>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c76:	4b30      	ldr	r3, [pc, #192]	@ (8000d38 <MX_TIM1_Init+0x114>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d38 <MX_TIM1_Init+0x114>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c82:	482d      	ldr	r0, [pc, #180]	@ (8000d38 <MX_TIM1_Init+0x114>)
 8000c84:	f00f ff92 	bl	8010bac <HAL_TIM_PWM_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c8e:	f001 fac3 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c9e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4824      	ldr	r0, [pc, #144]	@ (8000d38 <MX_TIM1_Init+0x114>)
 8000ca6:	f011 f867 	bl	8011d78 <HAL_TIMEx_MasterConfigSynchronization>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cb0:	f001 fab2 	bl	8002218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb4:	2360      	movs	r3, #96	@ 0x60
 8000cb6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ccc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cd0:	220c      	movs	r2, #12
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4818      	ldr	r0, [pc, #96]	@ (8000d38 <MX_TIM1_Init+0x114>)
 8000cd6:	f010 f9d7 	bl	8011088 <HAL_TIM_PWM_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000ce0:	f001 fa9a 	bl	8002218 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cfc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	4807      	ldr	r0, [pc, #28]	@ (8000d38 <MX_TIM1_Init+0x114>)
 8000d1a:	f011 f8bb 	bl	8011e94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000d24:	f001 fa78 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d28:	4803      	ldr	r0, [pc, #12]	@ (8000d38 <MX_TIM1_Init+0x114>)
 8000d2a:	f001 fe2f 	bl	800298c <HAL_TIM_MspPostInit>

}
 8000d2e:	bf00      	nop
 8000d30:	3758      	adds	r7, #88	@ 0x58
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	240005d4 	.word	0x240005d4
 8000d3c:	40010000 	.word	0x40010000

08000d40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	@ 0x28
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
 8000d60:	615a      	str	r2, [r3, #20]
 8000d62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d64:	4b2d      	ldr	r3, [pc, #180]	@ (8000e1c <MX_TIM2_Init+0xdc>)
 8000d66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e1c <MX_TIM2_Init+0xdc>)
 8000d6e:	2207      	movs	r2, #7
 8000d70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b2a      	ldr	r3, [pc, #168]	@ (8000e1c <MX_TIM2_Init+0xdc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000d78:	4b28      	ldr	r3, [pc, #160]	@ (8000e1c <MX_TIM2_Init+0xdc>)
 8000d7a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <MX_TIM2_Init+0xdc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b25      	ldr	r3, [pc, #148]	@ (8000e1c <MX_TIM2_Init+0xdc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d8c:	4823      	ldr	r0, [pc, #140]	@ (8000e1c <MX_TIM2_Init+0xdc>)
 8000d8e:	f00f ff0d 	bl	8010bac <HAL_TIM_PWM_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d98:	f001 fa3e 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	481c      	ldr	r0, [pc, #112]	@ (8000e1c <MX_TIM2_Init+0xdc>)
 8000dac:	f010 ffe4 	bl	8011d78 <HAL_TIMEx_MasterConfigSynchronization>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000db6:	f001 fa2f 	bl	8002218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dba:	2360      	movs	r3, #96	@ 0x60
 8000dbc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4812      	ldr	r0, [pc, #72]	@ (8000e1c <MX_TIM2_Init+0xdc>)
 8000dd2:	f010 f959 	bl	8011088 <HAL_TIM_PWM_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ddc:	f001 fa1c 	bl	8002218 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	2204      	movs	r2, #4
 8000de4:	4619      	mov	r1, r3
 8000de6:	480d      	ldr	r0, [pc, #52]	@ (8000e1c <MX_TIM2_Init+0xdc>)
 8000de8:	f010 f94e 	bl	8011088 <HAL_TIM_PWM_ConfigChannel>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000df2:	f001 fa11 	bl	8002218 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000df6:	463b      	mov	r3, r7
 8000df8:	2208      	movs	r2, #8
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4807      	ldr	r0, [pc, #28]	@ (8000e1c <MX_TIM2_Init+0xdc>)
 8000dfe:	f010 f943 	bl	8011088 <HAL_TIM_PWM_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000e08:	f001 fa06 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e0c:	4803      	ldr	r0, [pc, #12]	@ (8000e1c <MX_TIM2_Init+0xdc>)
 8000e0e:	f001 fdbd 	bl	800298c <HAL_TIM_MspPostInit>

}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	@ 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	24000620 	.word	0x24000620

08000e20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
 8000e40:	615a      	str	r2, [r3, #20]
 8000e42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e44:	4b27      	ldr	r3, [pc, #156]	@ (8000ee4 <MX_TIM3_Init+0xc4>)
 8000e46:	4a28      	ldr	r2, [pc, #160]	@ (8000ee8 <MX_TIM3_Init+0xc8>)
 8000e48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <MX_TIM3_Init+0xc4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e50:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <MX_TIM3_Init+0xc4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000e56:	4b23      	ldr	r3, [pc, #140]	@ (8000ee4 <MX_TIM3_Init+0xc4>)
 8000e58:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <MX_TIM3_Init+0xc4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee4 <MX_TIM3_Init+0xc4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e6a:	481e      	ldr	r0, [pc, #120]	@ (8000ee4 <MX_TIM3_Init+0xc4>)
 8000e6c:	f00f fe9e 	bl	8010bac <HAL_TIM_PWM_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e76:	f001 f9cf 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	4816      	ldr	r0, [pc, #88]	@ (8000ee4 <MX_TIM3_Init+0xc4>)
 8000e8a:	f010 ff75 	bl	8011d78 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e94:	f001 f9c0 	bl	8002218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e98:	2360      	movs	r3, #96	@ 0x60
 8000e9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2208      	movs	r2, #8
 8000eac:	4619      	mov	r1, r3
 8000eae:	480d      	ldr	r0, [pc, #52]	@ (8000ee4 <MX_TIM3_Init+0xc4>)
 8000eb0:	f010 f8ea 	bl	8011088 <HAL_TIM_PWM_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000eba:	f001 f9ad 	bl	8002218 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <MX_TIM3_Init+0xc4>)
 8000ec6:	f010 f8df 	bl	8011088 <HAL_TIM_PWM_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ed0:	f001 f9a2 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ed4:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <MX_TIM3_Init+0xc4>)
 8000ed6:	f001 fd59 	bl	800298c <HAL_TIM_MspPostInit>

}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	@ 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2400066c 	.word	0x2400066c
 8000ee8:	40000400 	.word	0x40000400

08000eec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]
 8000f0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f10:	4b27      	ldr	r3, [pc, #156]	@ (8000fb0 <MX_TIM4_Init+0xc4>)
 8000f12:	4a28      	ldr	r2, [pc, #160]	@ (8000fb4 <MX_TIM4_Init+0xc8>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8000f16:	4b26      	ldr	r3, [pc, #152]	@ (8000fb0 <MX_TIM4_Init+0xc4>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <MX_TIM4_Init+0xc4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000f22:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <MX_TIM4_Init+0xc4>)
 8000f24:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f28:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <MX_TIM4_Init+0xc4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <MX_TIM4_Init+0xc4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f36:	481e      	ldr	r0, [pc, #120]	@ (8000fb0 <MX_TIM4_Init+0xc4>)
 8000f38:	f00f fe38 	bl	8010bac <HAL_TIM_PWM_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000f42:	f001 f969 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	4816      	ldr	r0, [pc, #88]	@ (8000fb0 <MX_TIM4_Init+0xc4>)
 8000f56:	f010 ff0f 	bl	8011d78 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000f60:	f001 f95a 	bl	8002218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f64:	2360      	movs	r3, #96	@ 0x60
 8000f66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f74:	463b      	mov	r3, r7
 8000f76:	2208      	movs	r2, #8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <MX_TIM4_Init+0xc4>)
 8000f7c:	f010 f884 	bl	8011088 <HAL_TIM_PWM_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000f86:	f001 f947 	bl	8002218 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	220c      	movs	r2, #12
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4807      	ldr	r0, [pc, #28]	@ (8000fb0 <MX_TIM4_Init+0xc4>)
 8000f92:	f010 f879 	bl	8011088 <HAL_TIM_PWM_ConfigChannel>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000f9c:	f001 f93c 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fa0:	4803      	ldr	r0, [pc, #12]	@ (8000fb0 <MX_TIM4_Init+0xc4>)
 8000fa2:	f001 fcf3 	bl	800298c <HAL_TIM_MspPostInit>

}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	@ 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	240006b8 	.word	0x240006b8
 8000fb4:	40000800 	.word	0x40000800

08000fb8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <MX_TIM5_Init+0x94>)
 8000fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001050 <MX_TIM5_Init+0x98>)
 8000fda:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <MX_TIM5_Init+0x94>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <MX_TIM5_Init+0x94>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 7499998;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <MX_TIM5_Init+0x94>)
 8000fea:	4a1a      	ldr	r2, [pc, #104]	@ (8001054 <MX_TIM5_Init+0x9c>)
 8000fec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_TIM5_Init+0x94>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	@ (800104c <MX_TIM5_Init+0x94>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ffa:	4814      	ldr	r0, [pc, #80]	@ (800104c <MX_TIM5_Init+0x94>)
 8000ffc:	f00f fd07 	bl	8010a0e <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001006:	f001 f907 	bl	8002218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	4619      	mov	r1, r3
 8001016:	480d      	ldr	r0, [pc, #52]	@ (800104c <MX_TIM5_Init+0x94>)
 8001018:	f010 f94a 	bl	80112b0 <HAL_TIM_ConfigClockSource>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001022:	f001 f8f9 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	4619      	mov	r1, r3
 8001032:	4806      	ldr	r0, [pc, #24]	@ (800104c <MX_TIM5_Init+0x94>)
 8001034:	f010 fea0 	bl	8011d78 <HAL_TIMEx_MasterConfigSynchronization>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800103e:	f001 f8eb 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	3720      	adds	r7, #32
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	24000704 	.word	0x24000704
 8001050:	40000c00 	.word	0x40000c00
 8001054:	007270de 	.word	0x007270de

08001058 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
 800106c:	615a      	str	r2, [r3, #20]
 800106e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <MX_TIM14_Init+0x90>)
 8001072:	4a1e      	ldr	r2, [pc, #120]	@ (80010ec <MX_TIM14_Init+0x94>)
 8001074:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001076:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <MX_TIM14_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <MX_TIM14_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <MX_TIM14_Init+0x90>)
 8001084:	2205      	movs	r2, #5
 8001086:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001088:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <MX_TIM14_Init+0x90>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800108e:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <MX_TIM14_Init+0x90>)
 8001090:	2280      	movs	r2, #128	@ 0x80
 8001092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001094:	4814      	ldr	r0, [pc, #80]	@ (80010e8 <MX_TIM14_Init+0x90>)
 8001096:	f00f fcba 	bl	8010a0e <HAL_TIM_Base_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 80010a0:	f001 f8ba 	bl	8002218 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80010a4:	4810      	ldr	r0, [pc, #64]	@ (80010e8 <MX_TIM14_Init+0x90>)
 80010a6:	f00f fd81 	bl	8010bac <HAL_TIM_PWM_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 80010b0:	f001 f8b2 	bl	8002218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b4:	2360      	movs	r3, #96	@ 0x60
 80010b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 80010b8:	2303      	movs	r3, #3
 80010ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010c0:	2304      	movs	r3, #4
 80010c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <MX_TIM14_Init+0x90>)
 80010cc:	f00f ffdc 	bl	8011088 <HAL_TIM_PWM_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 80010d6:	f001 f89f 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80010da:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <MX_TIM14_Init+0x90>)
 80010dc:	f001 fc56 	bl	800298c <HAL_TIM_MspPostInit>

}
 80010e0:	bf00      	nop
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	24000750 	.word	0x24000750
 80010ec:	40002000 	.word	0x40002000

080010f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f4:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 80010f6:	4a25      	ldr	r2, [pc, #148]	@ (800118c <MX_USART1_UART_Init+0x9c>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 80010fa:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 80010fc:	4a24      	ldr	r2, [pc, #144]	@ (8001190 <MX_USART1_UART_Init+0xa0>)
 80010fe:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001100:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001106:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800110c:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001112:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 8001114:	220c      	movs	r2, #12
 8001116:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001118:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800111e:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001124:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800112a:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001130:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 8001132:	2220      	movs	r2, #32
 8001134:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 8001138:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800113c:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800113e:	4812      	ldr	r0, [pc, #72]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 8001140:	f010 ff44 	bl	8011fcc <HAL_UART_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 800114a:	f001 f865 	bl	8002218 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114e:	2100      	movs	r1, #0
 8001150:	480d      	ldr	r0, [pc, #52]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 8001152:	f012 fe5e 	bl	8013e12 <HAL_UARTEx_SetTxFifoThreshold>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 800115c:	f001 f85c 	bl	8002218 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001160:	2100      	movs	r1, #0
 8001162:	4809      	ldr	r0, [pc, #36]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 8001164:	f012 fe93 	bl	8013e8e <HAL_UARTEx_SetRxFifoThreshold>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 800116e:	f001 f853 	bl	8002218 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_USART1_UART_Init+0x98>)
 8001174:	f012 fe12 	bl	8013d9c <HAL_UARTEx_EnableFifoMode>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 800117e:	f001 f84b 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2400079c 	.word	0x2400079c
 800118c:	40011000 	.word	0x40011000
 8001190:	0001b207 	.word	0x0001b207

08001194 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_DMA_Init+0x6c>)
 800119c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011a0:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <MX_DMA_Init+0x6c>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_DMA_Init+0x6c>)
 80011ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_DMA_Init+0x6c>)
 80011ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011be:	4a10      	ldr	r2, [pc, #64]	@ (8001200 <MX_DMA_Init+0x6c>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001200 <MX_DMA_Init+0x6c>)
 80011ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	200b      	movs	r0, #11
 80011dc:	f002 fa31 	bl	8003642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011e0:	200b      	movs	r0, #11
 80011e2:	f002 fa48 	bl	8003676 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2038      	movs	r0, #56	@ 0x38
 80011ec:	f002 fa29 	bl	8003642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011f0:	2038      	movs	r0, #56	@ 0x38
 80011f2:	f002 fa40 	bl	8003676 <HAL_NVIC_EnableIRQ>

}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	58024400 	.word	0x58024400

08001204 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800120a:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <MX_MDMA_Init+0x3c>)
 800120c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001210:	4a0b      	ldr	r2, [pc, #44]	@ (8001240 <MX_MDMA_Init+0x3c>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800121a:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <MX_MDMA_Init+0x3c>)
 800121c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	207a      	movs	r0, #122	@ 0x7a
 800122e:	f002 fa08 	bl	8003642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001232:	207a      	movs	r0, #122	@ 0x7a
 8001234:	f002 fa1f 	bl	8003676 <HAL_NVIC_EnableIRQ>

}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	58024400 	.word	0x58024400

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08c      	sub	sp, #48	@ 0x30
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800125a:	4b52      	ldr	r3, [pc, #328]	@ (80013a4 <MX_GPIO_Init+0x160>)
 800125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001260:	4a50      	ldr	r2, [pc, #320]	@ (80013a4 <MX_GPIO_Init+0x160>)
 8001262:	f043 0310 	orr.w	r3, r3, #16
 8001266:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800126a:	4b4e      	ldr	r3, [pc, #312]	@ (80013a4 <MX_GPIO_Init+0x160>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001278:	4b4a      	ldr	r3, [pc, #296]	@ (80013a4 <MX_GPIO_Init+0x160>)
 800127a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127e:	4a49      	ldr	r2, [pc, #292]	@ (80013a4 <MX_GPIO_Init+0x160>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001288:	4b46      	ldr	r3, [pc, #280]	@ (80013a4 <MX_GPIO_Init+0x160>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001296:	4b43      	ldr	r3, [pc, #268]	@ (80013a4 <MX_GPIO_Init+0x160>)
 8001298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129c:	4a41      	ldr	r2, [pc, #260]	@ (80013a4 <MX_GPIO_Init+0x160>)
 800129e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a6:	4b3f      	ldr	r3, [pc, #252]	@ (80013a4 <MX_GPIO_Init+0x160>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b3b      	ldr	r3, [pc, #236]	@ (80013a4 <MX_GPIO_Init+0x160>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ba:	4a3a      	ldr	r2, [pc, #232]	@ (80013a4 <MX_GPIO_Init+0x160>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c4:	4b37      	ldr	r3, [pc, #220]	@ (80013a4 <MX_GPIO_Init+0x160>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b34      	ldr	r3, [pc, #208]	@ (80013a4 <MX_GPIO_Init+0x160>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d8:	4a32      	ldr	r2, [pc, #200]	@ (80013a4 <MX_GPIO_Init+0x160>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e2:	4b30      	ldr	r3, [pc, #192]	@ (80013a4 <MX_GPIO_Init+0x160>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f0:	4b2c      	ldr	r3, [pc, #176]	@ (80013a4 <MX_GPIO_Init+0x160>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f6:	4a2b      	ldr	r2, [pc, #172]	@ (80013a4 <MX_GPIO_Init+0x160>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001300:	4b28      	ldr	r3, [pc, #160]	@ (80013a4 <MX_GPIO_Init+0x160>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_CS_Pin|INA_CS_Pin, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001314:	4824      	ldr	r0, [pc, #144]	@ (80013a8 <MX_GPIO_Init+0x164>)
 8001316:	f006 f9d7 	bl	80076c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	2108      	movs	r1, #8
 800131e:	4823      	ldr	r0, [pc, #140]	@ (80013ac <MX_GPIO_Init+0x168>)
 8001320:	f006 f9d2 	bl	80076c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	2101      	movs	r1, #1
 8001328:	4821      	ldr	r0, [pc, #132]	@ (80013b0 <MX_GPIO_Init+0x16c>)
 800132a:	f006 f9cd 	bl	80076c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_CS_Pin INA_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|INA_CS_Pin;
 800132e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	4818      	ldr	r0, [pc, #96]	@ (80013a8 <MX_GPIO_Init+0x164>)
 8001348:	f006 f80e 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800134c:	2301      	movs	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	4619      	mov	r1, r3
 800135e:	4812      	ldr	r0, [pc, #72]	@ (80013a8 <MX_GPIO_Init+0x164>)
 8001360:	f006 f802 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001364:	2308      	movs	r3, #8
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	480c      	ldr	r0, [pc, #48]	@ (80013ac <MX_GPIO_Init+0x168>)
 800137c:	f005 fff4 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001380:	2301      	movs	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <MX_GPIO_Init+0x16c>)
 8001398:	f005 ffe6 	bl	8007368 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800139c:	bf00      	nop
 800139e:	3730      	adds	r7, #48	@ 0x30
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	58024400 	.word	0x58024400
 80013a8:	58020800 	.word	0x58020800
 80013ac:	58020000 	.word	0x58020000
 80013b0:	58020c00 	.word	0x58020c00

080013b4 <NetworkTimeout>:

/* USER CODE BEGIN 4 */

// Watchdog Fucntions
void NetworkTimeout() {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	if (wdog_network < WDOG_NETWORK_CUTOFF) {
 80013b8:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <NetworkTimeout+0x50>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b09      	cmp	r3, #9
 80013be:	d81e      	bhi.n	80013fe <NetworkTimeout+0x4a>
		wdog_network++;
 80013c0:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <NetworkTimeout+0x50>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <NetworkTimeout+0x50>)
 80013ca:	701a      	strb	r2, [r3, #0]

		if (wdog_network == WDOG_NETWORK_CUTOFF) {
 80013cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <NetworkTimeout+0x50>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b0a      	cmp	r3, #10
 80013d2:	d114      	bne.n	80013fe <NetworkTimeout+0x4a>
			// Kill the motors
			ctrl_input[0] = 0;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <NetworkTimeout+0x54>)
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
			ctrl_input[1] = 0;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <NetworkTimeout+0x54>)
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]

			// DEBUG
			sprintf(ssd_msg, "Network Dead!\n");
 80013e4:	4909      	ldr	r1, [pc, #36]	@ (800140c <NetworkTimeout+0x58>)
 80013e6:	480a      	ldr	r0, [pc, #40]	@ (8001410 <NetworkTimeout+0x5c>)
 80013e8:	f017 fe2e 	bl	8019048 <siprintf>
			WriteDebug(ssd_msg, strlen(ssd_msg));
 80013ec:	4808      	ldr	r0, [pc, #32]	@ (8001410 <NetworkTimeout+0x5c>)
 80013ee:	f7fe ffc7 	bl	8000380 <strlen>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	@ (8001410 <NetworkTimeout+0x5c>)
 80013fa:	f000 fd10 	bl	8001e1e <WriteDebug>
		}
	}
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	240008a8 	.word	0x240008a8
 8001408:	240008bc 	.word	0x240008bc
 800140c:	0801b0c4 	.word	0x0801b0c4
 8001410:	240008d4 	.word	0x240008d4
 8001414:	00000000 	.word	0x00000000

08001418 <SCH_XBeeRX>:

// ------------------------------------------------------------ SCHEDULING FUNCTIONS -- //
void SCH_XBeeRX() {
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
	uint8_t *packet;
	uint16_t byte_num;
	if (XBEE_RXPacket(&hxbee, &packet, &byte_num)) {
 800141e:	1cba      	adds	r2, r7, #2
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	486e      	ldr	r0, [pc, #440]	@ (80015e0 <SCH_XBeeRX+0x1c8>)
 8001426:	f014 f969 	bl	80156fc <XBEE_RXPacket>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	f040 80cc 	bne.w	80015ca <SCH_XBeeRX+0x1b2>
		return;
	}

	// Network active, reset the watchdog
	wdog_network = 0;
 8001432:	4b6c      	ldr	r3, [pc, #432]	@ (80015e4 <SCH_XBeeRX+0x1cc>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]

	// Parse the packet
	if (byte_num == 0xFFFF) {
 8001438:	887b      	ldrh	r3, [r7, #2]
 800143a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143e:	4293      	cmp	r3, r2
 8001440:	f040 80c4 	bne.w	80015cc <SCH_XBeeRX+0x1b4>
		// Configuration Packet
		if (packet[1] != jpeg_quality) {
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3301      	adds	r3, #1
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	4b67      	ldr	r3, [pc, #412]	@ (80015e8 <SCH_XBeeRX+0x1d0>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d027      	beq.n	80014a2 <SCH_XBeeRX+0x8a>
			// JPEG QUALITY CHANGED
			jpeg_quality = packet[1];
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	785a      	ldrb	r2, [r3, #1]
 8001456:	4b64      	ldr	r3, [pc, #400]	@ (80015e8 <SCH_XBeeRX+0x1d0>)
 8001458:	701a      	strb	r2, [r3, #0]
			// Reconfigure the JPEG HW
			JPEG_ConfTypeDef *jpeg_config;
			jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
			jpeg_config->ImageWidth = jpeg_mcu_widths[jpeg_quality] * 8;
 8001460:	4b61      	ldr	r3, [pc, #388]	@ (80015e8 <SCH_XBeeRX+0x1d0>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b61      	ldr	r3, [pc, #388]	@ (80015ec <SCH_XBeeRX+0x1d4>)
 8001468:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	60da      	str	r2, [r3, #12]
			jpeg_config->ImageHeight = jpeg_mcu_heights[jpeg_quality] * 8;
 8001474:	4b5c      	ldr	r3, [pc, #368]	@ (80015e8 <SCH_XBeeRX+0x1d0>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b5d      	ldr	r3, [pc, #372]	@ (80015f0 <SCH_XBeeRX+0x1d8>)
 800147c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	609a      	str	r2, [r3, #8]
			jpeg_config->ImageQuality = JPEG_QUALITY;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2214      	movs	r2, #20
 800148c:	611a      	str	r2, [r3, #16]
			HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 800148e:	68f9      	ldr	r1, [r7, #12]
 8001490:	4858      	ldr	r0, [pc, #352]	@ (80015f4 <SCH_XBeeRX+0x1dc>)
 8001492:	f007 fe81 	bl	8009198 <HAL_JPEG_ConfigEncoding>

			jpeg_state = 0;	// Invalidate current JPEG
 8001496:	4b58      	ldr	r3, [pc, #352]	@ (80015f8 <SCH_XBeeRX+0x1e0>)
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
			tx_state = 2;	// Flag a header re-transmit
 800149c:	4b57      	ldr	r3, [pc, #348]	@ (80015fc <SCH_XBeeRX+0x1e4>)
 800149e:	2202      	movs	r2, #2
 80014a0:	701a      	strb	r2, [r3, #0]
		}

		// LIGHTS (0-2000)
		TIM1->CCR4 = packet[3] * 500; // L1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3303      	adds	r3, #3
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014ae:	fb03 f202 	mul.w	r2, r3, r2
 80014b2:	4b53      	ldr	r3, [pc, #332]	@ (8001600 <SCH_XBeeRX+0x1e8>)
 80014b4:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR4 = packet[4] * 500; // L2
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3304      	adds	r3, #4
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014c2:	fb03 f202 	mul.w	r2, r3, r2
 80014c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001604 <SCH_XBeeRX+0x1ec>)
 80014c8:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR3 = packet[5] * 500; // L3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3305      	adds	r3, #5
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014d6:	fb03 f202 	mul.w	r2, r3, r2
 80014da:	4b4a      	ldr	r3, [pc, #296]	@ (8001604 <SCH_XBeeRX+0x1ec>)
 80014dc:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM2->CCR3 = packet[6] * 500; // L4
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3306      	adds	r3, #6
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014ea:	fb03 f202 	mul.w	r2, r3, r2
 80014ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014f2:	63da      	str	r2, [r3, #60]	@ 0x3c

		// TANK CONTROL (THIS IS EXTREMELY IMPORTANT)
		uint8_t motor1_dir = packet[0x0A];	// DIR_LEFT
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7a9b      	ldrb	r3, [r3, #10]
 80014f8:	72fb      	strb	r3, [r7, #11]
		uint8_t motor2_dir = packet[0x09];	// DIR_RIGHT
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7a5b      	ldrb	r3, [r3, #9]
 80014fe:	72bb      	strb	r3, [r7, #10]

		// Use the direction to set the desired power output
		// 0-255 >> REMAP >> 0-2000
		if (motor1_dir)
 8001500:	7afb      	ldrb	r3, [r7, #11]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d018      	beq.n	8001538 <SCH_XBeeRX+0x120>
			ctrl_input[0] = -((float) packet[0x08]) * 20.0 / 2.55;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3308      	adds	r3, #8
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	ee07 3a90 	vmov	s15, r3
 8001510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001514:	eef1 7a67 	vneg.f32	s15, s15
 8001518:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800151c:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8001520:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001524:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 80015d8 <SCH_XBeeRX+0x1c0>
 8001528:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800152c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001530:	4b35      	ldr	r3, [pc, #212]	@ (8001608 <SCH_XBeeRX+0x1f0>)
 8001532:	edc3 7a00 	vstr	s15, [r3]
 8001536:	e015      	b.n	8001564 <SCH_XBeeRX+0x14c>
		else
			ctrl_input[0] = ((float) packet[0x08]) * 20.0 / 2.55;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3308      	adds	r3, #8
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	ee07 3a90 	vmov	s15, r3
 8001542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001546:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800154a:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 800154e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001552:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 80015d8 <SCH_XBeeRX+0x1c0>
 8001556:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800155a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800155e:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <SCH_XBeeRX+0x1f0>)
 8001560:	edc3 7a00 	vstr	s15, [r3]

		if (motor2_dir)
 8001564:	7abb      	ldrb	r3, [r7, #10]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d016      	beq.n	8001598 <SCH_XBeeRX+0x180>
			ctrl_input[1] = ((float) packet[0x07]) * 20.0 / 2.55;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3307      	adds	r3, #7
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	ee07 3a90 	vmov	s15, r3
 8001574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001578:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800157c:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8001580:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001584:	ed9f 5b14 	vldr	d5, [pc, #80]	@ 80015d8 <SCH_XBeeRX+0x1c0>
 8001588:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800158c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001590:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <SCH_XBeeRX+0x1f0>)
 8001592:	edc3 7a01 	vstr	s15, [r3, #4]
 8001596:	e019      	b.n	80015cc <SCH_XBeeRX+0x1b4>
		else
			ctrl_input[1] = -((float) packet[0x07]) * 20.0 / 2.55;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3307      	adds	r3, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a6:	eef1 7a67 	vneg.f32	s15, s15
 80015aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ae:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 80015b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015b6:	ed9f 5b08 	vldr	d5, [pc, #32]	@ 80015d8 <SCH_XBeeRX+0x1c0>
 80015ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <SCH_XBeeRX+0x1f0>)
 80015c4:	edc3 7a01 	vstr	s15, [r3, #4]
 80015c8:	e000      	b.n	80015cc <SCH_XBeeRX+0x1b4>
		return;
 80015ca:	bf00      	nop
	}
}
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	f3af 8000 	nop.w
 80015d8:	66666666 	.word	0x66666666
 80015dc:	40046666 	.word	0x40046666
 80015e0:	24025d30 	.word	0x24025d30
 80015e4:	240008a8 	.word	0x240008a8
 80015e8:	24025d2c 	.word	0x24025d2c
 80015ec:	24000004 	.word	0x24000004
 80015f0:	2400000c 	.word	0x2400000c
 80015f4:	2400041c 	.word	0x2400041c
 80015f8:	24025d26 	.word	0x24025d26
 80015fc:	24025d56 	.word	0x24025d56
 8001600:	40010000 	.word	0x40010000
 8001604:	40000400 	.word	0x40000400
 8001608:	240008bc 	.word	0x240008bc

0800160c <SCH_XBeeTX>:

void SCH_XBeeTX() {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

	// Early exit if the JPEG isn't ready, nothing to transmit
	if (jpeg_state != 2)
 8001612:	4b44      	ldr	r3, [pc, #272]	@ (8001724 <SCH_XBeeTX+0x118>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d17a      	bne.n	8001712 <SCH_XBeeTX+0x106>
		return;

	// Get delta time, there has to be a delay for the TX to work properly
	uint32_t delta_t = DeltaTime(sch_tim_tx);
 800161c:	4b42      	ldr	r3, [pc, #264]	@ (8001728 <SCH_XBeeTX+0x11c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fbe5 	bl	8001df0 <DeltaTime>
 8001626:	6078      	str	r0, [r7, #4]
	if (delta_t < SCH_MS_TX)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b05      	cmp	r3, #5
 800162c:	d973      	bls.n	8001716 <SCH_XBeeTX+0x10a>
		return;

	if (tx_state == 0)
 800162e:	4b3f      	ldr	r3, [pc, #252]	@ (800172c <SCH_XBeeTX+0x120>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <SCH_XBeeTX+0x32>
		tx_state = 1;	// If Idle, Flag as transmitting IMAGE
 8001638:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <SCH_XBeeTX+0x120>)
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]

	if (tx_state == 1) {
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <SCH_XBeeTX+0x120>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b01      	cmp	r3, #1
 8001646:	d112      	bne.n	800166e <SCH_XBeeTX+0x62>
		// Send an IMAGE packet
		// Image packet numbers:  0000, 0001, 0002, ...
		if (XBEE_TXPacket(&hxbee,
				jpeg_out + tx_byte * UART_TXSIZE + JPEG_HEADERSIZE, tx_byte)) {
 8001648:	4b39      	ldr	r3, [pc, #228]	@ (8001730 <SCH_XBeeTX+0x124>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	b29b      	uxth	r3, r3
 800164e:	019b      	lsls	r3, r3, #6
 8001650:	f203 230e 	addw	r3, r3, #526	@ 0x20e
		if (XBEE_TXPacket(&hxbee,
 8001654:	4a37      	ldr	r2, [pc, #220]	@ (8001734 <SCH_XBeeTX+0x128>)
 8001656:	4413      	add	r3, r2
 8001658:	4a35      	ldr	r2, [pc, #212]	@ (8001730 <SCH_XBeeTX+0x124>)
 800165a:	8812      	ldrh	r2, [r2, #0]
 800165c:	b292      	uxth	r2, r2
 800165e:	4619      	mov	r1, r3
 8001660:	4835      	ldr	r0, [pc, #212]	@ (8001738 <SCH_XBeeTX+0x12c>)
 8001662:	f014 f8bb 	bl	80157dc <XBEE_TXPacket>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d01a      	beq.n	80016a2 <SCH_XBeeTX+0x96>
			return;
 800166c:	e056      	b.n	800171c <SCH_XBeeTX+0x110>
		}
	} else if (tx_state == 2) {
 800166e:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <SCH_XBeeTX+0x120>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d114      	bne.n	80016a2 <SCH_XBeeTX+0x96>
		// Send a HEADER packet
		// Header packet numbers: FFFE, FFFD, FFFC, ...
		if (XBEE_TXPacket(&hxbee, jpeg_out + tx_byte * UART_TXSIZE,
 8001678:	4b2d      	ldr	r3, [pc, #180]	@ (8001730 <SCH_XBeeTX+0x124>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	b29b      	uxth	r3, r3
 800167e:	019b      	lsls	r3, r3, #6
 8001680:	461a      	mov	r2, r3
 8001682:	4b2c      	ldr	r3, [pc, #176]	@ (8001734 <SCH_XBeeTX+0x128>)
 8001684:	18d1      	adds	r1, r2, r3
 8001686:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <SCH_XBeeTX+0x124>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	b29a      	uxth	r2, r3
 800168c:	f06f 0301 	mvn.w	r3, #1
 8001690:	1a9b      	subs	r3, r3, r2
 8001692:	b29b      	uxth	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	4828      	ldr	r0, [pc, #160]	@ (8001738 <SCH_XBeeTX+0x12c>)
 8001698:	f014 f8a0 	bl	80157dc <XBEE_TXPacket>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d13b      	bne.n	800171a <SCH_XBeeTX+0x10e>
			return;
		}
	}

	// Update the timer for the next DT period
	sch_tim_tx = HAL_GetTick();
 80016a2:	f001 feb7 	bl	8003414 <HAL_GetTick>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001728 <SCH_XBeeTX+0x11c>)
 80016aa:	6013      	str	r3, [r2, #0]
	tx_byte++;
 80016ac:	4b20      	ldr	r3, [pc, #128]	@ (8001730 <SCH_XBeeTX+0x124>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <SCH_XBeeTX+0x124>)
 80016b8:	801a      	strh	r2, [r3, #0]

	// IMAGE Transmission complete
	if (tx_state == 1
 80016ba:	4b1c      	ldr	r3, [pc, #112]	@ (800172c <SCH_XBeeTX+0x120>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d115      	bne.n	80016f0 <SCH_XBeeTX+0xe4>
			&& tx_byte > (jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE + 1) {
 80016c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <SCH_XBeeTX+0x124>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <SCH_XBeeTX+0x130>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	3301      	adds	r3, #1
 80016d8:	429a      	cmp	r2, r3
 80016da:	d909      	bls.n	80016f0 <SCH_XBeeTX+0xe4>
		tx_state = 0;	// Flag the radio as idle
 80016dc:	4b13      	ldr	r3, [pc, #76]	@ (800172c <SCH_XBeeTX+0x120>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
		tx_byte = 0;	// Reset the packet counter to 0
 80016e2:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <SCH_XBeeTX+0x124>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	801a      	strh	r2, [r3, #0]
		jpeg_state = 0;	// Flag the JPEG as idle
 80016e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <SCH_XBeeTX+0x118>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
		return;
 80016ee:	e015      	b.n	800171c <SCH_XBeeTX+0x110>
	}

	// HEADER Transmission complete
	if (tx_state == 2 && tx_byte > JPEG_HEADERSIZE / UART_TXSIZE + 1) {
 80016f0:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <SCH_XBeeTX+0x120>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d110      	bne.n	800171c <SCH_XBeeTX+0x110>
 80016fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <SCH_XBeeTX+0x124>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	2b09      	cmp	r3, #9
 8001702:	d90b      	bls.n	800171c <SCH_XBeeTX+0x110>
		tx_state = 0;	// Flag the radio as idle
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <SCH_XBeeTX+0x120>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
		tx_byte = 0;	// Reset the packet counter to 0
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <SCH_XBeeTX+0x124>)
 800170c:	2200      	movs	r2, #0
 800170e:	801a      	strh	r2, [r3, #0]
		return;
 8001710:	e004      	b.n	800171c <SCH_XBeeTX+0x110>
		return;
 8001712:	bf00      	nop
 8001714:	e002      	b.n	800171c <SCH_XBeeTX+0x110>
		return;
 8001716:	bf00      	nop
 8001718:	e000      	b.n	800171c <SCH_XBeeTX+0x110>
			return;
 800171a:	bf00      	nop

//	for (uint16_t i = 0; i < ((jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE) + 1; i++) {
//		XBEE_TXPacket(&hxbee, jpeg_out + i*UART_TXSIZE + JPEG_HEADERSIZE, i);
//		HAL_Delay(5);
//	}
}
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	24025d26 	.word	0x24025d26
 8001728:	240008b4 	.word	0x240008b4
 800172c:	24025d56 	.word	0x24025d56
 8001730:	24025d54 	.word	0x24025d54
 8001734:	24013360 	.word	0x24013360
 8001738:	24025d30 	.word	0x24025d30
 800173c:	24025d28 	.word	0x24025d28

08001740 <SCH_CTRL>:

void SCH_CTRL() {
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
	uint32_t delta_t = DeltaTime(sch_tim_ctrl);
 8001746:	4bb2      	ldr	r3, [pc, #712]	@ (8001a10 <SCH_CTRL+0x2d0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f000 fb50 	bl	8001df0 <DeltaTime>
 8001750:	6138      	str	r0, [r7, #16]
	sch_tim_ctrl = HAL_GetTick();
 8001752:	f001 fe5f 	bl	8003414 <HAL_GetTick>
 8001756:	4603      	mov	r3, r0
 8001758:	4aad      	ldr	r2, [pc, #692]	@ (8001a10 <SCH_CTRL+0x2d0>)
 800175a:	6013      	str	r3, [r2, #0]

	float ctrl_override[2] = { 0, 0 };
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
	ctrl_override[0] = ctrl_input[0];
 8001768:	4baa      	ldr	r3, [pc, #680]	@ (8001a14 <SCH_CTRL+0x2d4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	603b      	str	r3, [r7, #0]
	ctrl_override[1] = ctrl_input[1];
 800176e:	4ba9      	ldr	r3, [pc, #676]	@ (8001a14 <SCH_CTRL+0x2d4>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	607b      	str	r3, [r7, #4]

	if (error_overcurrent || error_undervolt) {
 8001774:	4ba8      	ldr	r3, [pc, #672]	@ (8001a18 <SCH_CTRL+0x2d8>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d103      	bne.n	8001784 <SCH_CTRL+0x44>
 800177c:	4ba7      	ldr	r3, [pc, #668]	@ (8001a1c <SCH_CTRL+0x2dc>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <SCH_CTRL+0x50>
		ctrl_override[0] = 0;
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	603b      	str	r3, [r7, #0]
		ctrl_override[1] = 0;
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
	}

	// This is how much the power level of the motors can change right now
	float maxAllowablePwrDelta = CTRL_MAX_PWRDELTA_PERSECOND
			* (((float) delta_t) / 1000.0);
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800179a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800179e:	ed9f 5b98 	vldr	d5, [pc, #608]	@ 8001a00 <SCH_CTRL+0x2c0>
 80017a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017a6:	ed9f 6b98 	vldr	d6, [pc, #608]	@ 8001a08 <SCH_CTRL+0x2c8>
 80017aa:	ee27 7b06 	vmul.f64	d7, d7, d6
	float maxAllowablePwrDelta = CTRL_MAX_PWRDELTA_PERSECOND
 80017ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017b2:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint8_t i = 0; i < 2; i++) {
 80017b6:	2300      	movs	r3, #0
 80017b8:	75fb      	strb	r3, [r7, #23]
 80017ba:	e0ef      	b.n	800199c <SCH_CTRL+0x25c>
		// Correct the control signals if they somehow go out of bounds
		if (ctrl_override[i] > 2000.0)
 80017bc:	7dfb      	ldrb	r3, [r7, #23]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	3318      	adds	r3, #24
 80017c2:	443b      	add	r3, r7
 80017c4:	3b18      	subs	r3, #24
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8001a20 <SCH_CTRL+0x2e0>
 80017ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	dd06      	ble.n	80017e6 <SCH_CTRL+0xa6>
			ctrl_override[i] = 2000.0;
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	3318      	adds	r3, #24
 80017de:	443b      	add	r3, r7
 80017e0:	3b18      	subs	r3, #24
 80017e2:	4a90      	ldr	r2, [pc, #576]	@ (8001a24 <SCH_CTRL+0x2e4>)
 80017e4:	601a      	str	r2, [r3, #0]
		if (ctrl_override[i] < -2000.0)
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	3318      	adds	r3, #24
 80017ec:	443b      	add	r3, r7
 80017ee:	3b18      	subs	r3, #24
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8001a28 <SCH_CTRL+0x2e8>
 80017f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001800:	d506      	bpl.n	8001810 <SCH_CTRL+0xd0>
			ctrl_override[i] = -2000.0;
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	3318      	adds	r3, #24
 8001808:	443b      	add	r3, r7
 800180a:	3b18      	subs	r3, #24
 800180c:	4a87      	ldr	r2, [pc, #540]	@ (8001a2c <SCH_CTRL+0x2ec>)
 800180e:	601a      	str	r2, [r3, #0]

		float delta = ctrl_override[i] - ctrl_output[i];
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	3318      	adds	r3, #24
 8001816:	443b      	add	r3, r7
 8001818:	3b18      	subs	r3, #24
 800181a:	ed93 7a00 	vldr	s14, [r3]
 800181e:	7dfb      	ldrb	r3, [r7, #23]
 8001820:	4a83      	ldr	r2, [pc, #524]	@ (8001a30 <SCH_CTRL+0x2f0>)
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	edd3 7a00 	vldr	s15, [r3]
 800182a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182e:	edc7 7a02 	vstr	s15, [r7, #8]
		if (delta > 0) {
 8001832:	edd7 7a02 	vldr	s15, [r7, #8]
 8001836:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800183a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183e:	dd25      	ble.n	800188c <SCH_CTRL+0x14c>
			if (maxAllowablePwrDelta >= delta)
 8001840:	ed97 7a03 	vldr	s14, [r7, #12]
 8001844:	edd7 7a02 	vldr	s15, [r7, #8]
 8001848:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	db0b      	blt.n	800186a <SCH_CTRL+0x12a>
				ctrl_output[i] = ctrl_override[i];
 8001852:	7dfa      	ldrb	r2, [r7, #23]
 8001854:	7dfb      	ldrb	r3, [r7, #23]
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	3218      	adds	r2, #24
 800185a:	443a      	add	r2, r7
 800185c:	3a18      	subs	r2, #24
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	4973      	ldr	r1, [pc, #460]	@ (8001a30 <SCH_CTRL+0x2f0>)
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	e037      	b.n	80018da <SCH_CTRL+0x19a>
			else
				ctrl_output[i] += maxAllowablePwrDelta;
 800186a:	7dfb      	ldrb	r3, [r7, #23]
 800186c:	4a70      	ldr	r2, [pc, #448]	@ (8001a30 <SCH_CTRL+0x2f0>)
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	ed93 7a00 	vldr	s14, [r3]
 8001876:	7dfb      	ldrb	r3, [r7, #23]
 8001878:	edd7 7a03 	vldr	s15, [r7, #12]
 800187c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001880:	4a6b      	ldr	r2, [pc, #428]	@ (8001a30 <SCH_CTRL+0x2f0>)
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	edc3 7a00 	vstr	s15, [r3]
 800188a:	e026      	b.n	80018da <SCH_CTRL+0x19a>
		} else {
			if (maxAllowablePwrDelta >= -delta)
 800188c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001890:	eef1 7a67 	vneg.f32	s15, s15
 8001894:	ed97 7a03 	vldr	s14, [r7, #12]
 8001898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800189c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a0:	db0b      	blt.n	80018ba <SCH_CTRL+0x17a>
				ctrl_output[i] = ctrl_override[i];
 80018a2:	7dfa      	ldrb	r2, [r7, #23]
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	3218      	adds	r2, #24
 80018aa:	443a      	add	r2, r7
 80018ac:	3a18      	subs	r2, #24
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	495f      	ldr	r1, [pc, #380]	@ (8001a30 <SCH_CTRL+0x2f0>)
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	e00f      	b.n	80018da <SCH_CTRL+0x19a>
			else
				ctrl_output[i] -= maxAllowablePwrDelta;
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
 80018bc:	4a5c      	ldr	r2, [pc, #368]	@ (8001a30 <SCH_CTRL+0x2f0>)
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	ed93 7a00 	vldr	s14, [r3]
 80018c6:	7dfb      	ldrb	r3, [r7, #23]
 80018c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d0:	4a57      	ldr	r2, [pc, #348]	@ (8001a30 <SCH_CTRL+0x2f0>)
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	edc3 7a00 	vstr	s15, [r3]
		}

		// Correct the output signals if they somehow go out of bounds
		if (ctrl_output[i] > 2000.0)
 80018da:	7dfb      	ldrb	r3, [r7, #23]
 80018dc:	4a54      	ldr	r2, [pc, #336]	@ (8001a30 <SCH_CTRL+0x2f0>)
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001a20 <SCH_CTRL+0x2e0>
 80018ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	dd05      	ble.n	8001900 <SCH_CTRL+0x1c0>
			ctrl_output[i] = 2000.0;
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	4a4e      	ldr	r2, [pc, #312]	@ (8001a30 <SCH_CTRL+0x2f0>)
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	4a49      	ldr	r2, [pc, #292]	@ (8001a24 <SCH_CTRL+0x2e4>)
 80018fe:	601a      	str	r2, [r3, #0]
		if (ctrl_output[i] < -2000.0)
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	4a4b      	ldr	r2, [pc, #300]	@ (8001a30 <SCH_CTRL+0x2f0>)
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001a28 <SCH_CTRL+0x2e8>
 8001910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	d505      	bpl.n	8001926 <SCH_CTRL+0x1e6>
			ctrl_output[i] = -2000.0;
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	4a44      	ldr	r2, [pc, #272]	@ (8001a30 <SCH_CTRL+0x2f0>)
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	4a42      	ldr	r2, [pc, #264]	@ (8001a2c <SCH_CTRL+0x2ec>)
 8001924:	601a      	str	r2, [r3, #0]

		// Turn the interpolated values into actual PWM levels
		ctrl_output_dir[i] = ctrl_output[i] >= 0;
 8001926:	7dfb      	ldrb	r3, [r7, #23]
 8001928:	4a41      	ldr	r2, [pc, #260]	@ (8001a30 <SCH_CTRL+0x2f0>)
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193a:	bfac      	ite	ge
 800193c:	2301      	movge	r3, #1
 800193e:	2300      	movlt	r3, #0
 8001940:	b2da      	uxtb	r2, r3
 8001942:	7dfb      	ldrb	r3, [r7, #23]
 8001944:	4611      	mov	r1, r2
 8001946:	4a3b      	ldr	r2, [pc, #236]	@ (8001a34 <SCH_CTRL+0x2f4>)
 8001948:	54d1      	strb	r1, [r2, r3]
		if (ctrl_output_dir[i])
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	4a39      	ldr	r2, [pc, #228]	@ (8001a34 <SCH_CTRL+0x2f4>)
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00f      	beq.n	8001974 <SCH_CTRL+0x234>
			ctrl_output_mag[i] = (uint16_t) (ctrl_output[i]);
 8001954:	7dfb      	ldrb	r3, [r7, #23]
 8001956:	4a36      	ldr	r2, [pc, #216]	@ (8001a30 <SCH_CTRL+0x2f0>)
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001966:	ee17 2a90 	vmov	r2, s15
 800196a:	b291      	uxth	r1, r2
 800196c:	4a32      	ldr	r2, [pc, #200]	@ (8001a38 <SCH_CTRL+0x2f8>)
 800196e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001972:	e010      	b.n	8001996 <SCH_CTRL+0x256>
		else
			ctrl_output_mag[i] = (uint16_t) (-ctrl_output[i]);
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	4a2e      	ldr	r2, [pc, #184]	@ (8001a30 <SCH_CTRL+0x2f0>)
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	edd3 7a00 	vldr	s15, [r3]
 8001980:	eef1 7a67 	vneg.f32	s15, s15
 8001984:	7dfb      	ldrb	r3, [r7, #23]
 8001986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800198a:	ee17 2a90 	vmov	r2, s15
 800198e:	b291      	uxth	r1, r2
 8001990:	4a29      	ldr	r2, [pc, #164]	@ (8001a38 <SCH_CTRL+0x2f8>)
 8001992:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 2; i++) {
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	3301      	adds	r3, #1
 800199a:	75fb      	strb	r3, [r7, #23]
 800199c:	7dfb      	ldrb	r3, [r7, #23]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	f67f af0c 	bls.w	80017bc <SCH_CTRL+0x7c>
	}

	// Toggle the motors
	if (ctrl_output_dir[0]) {
 80019a4:	4b23      	ldr	r3, [pc, #140]	@ (8001a34 <SCH_CTRL+0x2f4>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d009      	beq.n	80019c0 <SCH_CTRL+0x280>
		TIM2->CCR1 = ctrl_output_mag[0];
 80019ac:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <SCH_CTRL+0x2f8>)
 80019ae:	881a      	ldrh	r2, [r3, #0]
 80019b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019b4:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM2->CCR2 = 0;
 80019b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019ba:	2200      	movs	r2, #0
 80019bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80019be:	e008      	b.n	80019d2 <SCH_CTRL+0x292>
	} else {
		TIM2->CCR1 = 0;
 80019c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019c4:	2200      	movs	r2, #0
 80019c6:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM2->CCR2 = ctrl_output_mag[0];
 80019c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <SCH_CTRL+0x2f8>)
 80019ca:	881a      	ldrh	r2, [r3, #0]
 80019cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019d0:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	if (ctrl_output_dir[1]) {
 80019d2:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <SCH_CTRL+0x2f4>)
 80019d4:	785b      	ldrb	r3, [r3, #1]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <SCH_CTRL+0x2aa>
		TIM4->CCR3 = 0;
 80019da:	4b18      	ldr	r3, [pc, #96]	@ (8001a3c <SCH_CTRL+0x2fc>)
 80019dc:	2200      	movs	r2, #0
 80019de:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = ctrl_output_mag[1];
 80019e0:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <SCH_CTRL+0x2f8>)
 80019e2:	885a      	ldrh	r2, [r3, #2]
 80019e4:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <SCH_CTRL+0x2fc>)
 80019e6:	641a      	str	r2, [r3, #64]	@ 0x40
	} else {
		TIM4->CCR3 = ctrl_output_mag[1];
		TIM4->CCR4 = 0;
	}
}
 80019e8:	e006      	b.n	80019f8 <SCH_CTRL+0x2b8>
		TIM4->CCR3 = ctrl_output_mag[1];
 80019ea:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <SCH_CTRL+0x2f8>)
 80019ec:	885a      	ldrh	r2, [r3, #2]
 80019ee:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <SCH_CTRL+0x2fc>)
 80019f0:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = 0;
 80019f2:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <SCH_CTRL+0x2fc>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80019f8:	bf00      	nop
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	00000000 	.word	0x00000000
 8001a04:	408f4000 	.word	0x408f4000
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	407f4000 	.word	0x407f4000
 8001a10:	240008b8 	.word	0x240008b8
 8001a14:	240008bc 	.word	0x240008bc
 8001a18:	240008a9 	.word	0x240008a9
 8001a1c:	240008aa 	.word	0x240008aa
 8001a20:	44fa0000 	.word	0x44fa0000
 8001a24:	44fa0000 	.word	0x44fa0000
 8001a28:	c4fa0000 	.word	0xc4fa0000
 8001a2c:	c4fa0000 	.word	0xc4fa0000
 8001a30:	240008c4 	.word	0x240008c4
 8001a34:	240008d0 	.word	0x240008d0
 8001a38:	240008cc 	.word	0x240008cc
 8001a3c:	40000800 	.word	0x40000800

08001a40 <SCH_PowerMon>:

void SCH_PowerMon() {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	INA229_Get(&hina229);
 8001a44:	4821      	ldr	r0, [pc, #132]	@ (8001acc <SCH_PowerMon+0x8c>)
 8001a46:	f001 fbfb 	bl	8003240 <INA229_Get>

	if (hina229.voltage > debug_peakVoltage)
 8001a4a:	4b20      	ldr	r3, [pc, #128]	@ (8001acc <SCH_PowerMon+0x8c>)
 8001a4c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <SCH_PowerMon+0x90>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	dd03      	ble.n	8001a68 <SCH_PowerMon+0x28>
		debug_peakVoltage = hina229.voltage;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	@ (8001acc <SCH_PowerMon+0x8c>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad0 <SCH_PowerMon+0x90>)
 8001a66:	6013      	str	r3, [r2, #0]
	if (hina229.current > debug_peakCurrent)
 8001a68:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <SCH_PowerMon+0x8c>)
 8001a6a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <SCH_PowerMon+0x94>)
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7c:	dd03      	ble.n	8001a86 <SCH_PowerMon+0x46>
		debug_peakCurrent = hina229.current;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <SCH_PowerMon+0x8c>)
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	4a14      	ldr	r2, [pc, #80]	@ (8001ad4 <SCH_PowerMon+0x94>)
 8001a84:	6013      	str	r3, [r2, #0]

	error_overcurrent = hina229.current >= OVERCURRENT_PROTLIMIT;
 8001a86:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <SCH_PowerMon+0x8c>)
 8001a88:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a8c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a98:	bfac      	ite	ge
 8001a9a:	2301      	movge	r3, #1
 8001a9c:	2300      	movlt	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <SCH_PowerMon+0x98>)
 8001aa4:	701a      	strb	r2, [r3, #0]
	error_undervolt =   hina229.voltage <= UNDERVOLT_PROTLIMIT;
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <SCH_PowerMon+0x8c>)
 8001aa8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001aac:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 8001ab0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab8:	bf94      	ite	ls
 8001aba:	2301      	movls	r3, #1
 8001abc:	2300      	movhi	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <SCH_PowerMon+0x9c>)
 8001ac4:	701a      	strb	r2, [r3, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2400093c 	.word	0x2400093c
 8001ad0:	240008ac 	.word	0x240008ac
 8001ad4:	240008b0 	.word	0x240008b0
 8001ad8:	240008a9 	.word	0x240008a9
 8001adc:	240008aa 	.word	0x240008aa

08001ae0 <SCH_Camera>:

void SCH_Camera() {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
	if (camera_state != 0)
 8001ae6:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <SCH_Camera+0x68>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d124      	bne.n	8001b3a <SCH_Camera+0x5a>
		return;	// Exit if the camera is capturing, queued, or has un-encoded data
	if (jpeg_state != 0)
 8001af0:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <SCH_Camera+0x6c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d121      	bne.n	8001b3e <SCH_Camera+0x5e>
		return;	// Exit if the JPEG is processing (camera DMA can corrupt the working buffer of JPEG)

	// Take a snapshot
	uint8_t ovStat = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, camera_mem,
 8001afa:	4a15      	ldr	r2, [pc, #84]	@ (8001b50 <SCH_Camera+0x70>)
 8001afc:	f644 2371 	movw	r3, #19057	@ 0x4a71
 8001b00:	2102      	movs	r1, #2
 8001b02:	4814      	ldr	r0, [pc, #80]	@ (8001b54 <SCH_Camera+0x74>)
 8001b04:	f001 fec4 	bl	8003890 <HAL_DCMI_Start_DMA>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
			CAM_GRAYSIZE / 4);
	if (ovStat) {
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00f      	beq.n	8001b32 <SCH_Camera+0x52>
		sprintf(ssd_msg, "DCMI/DMA ERROR - Code 0x%X\r\n", ovStat);
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4910      	ldr	r1, [pc, #64]	@ (8001b58 <SCH_Camera+0x78>)
 8001b18:	4810      	ldr	r0, [pc, #64]	@ (8001b5c <SCH_Camera+0x7c>)
 8001b1a:	f017 fa95 	bl	8019048 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8001b1e:	480f      	ldr	r0, [pc, #60]	@ (8001b5c <SCH_Camera+0x7c>)
 8001b20:	f7fe fc2e 	bl	8000380 <strlen>
 8001b24:	4603      	mov	r3, r0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480c      	ldr	r0, [pc, #48]	@ (8001b5c <SCH_Camera+0x7c>)
 8001b2c:	f000 f977 	bl	8001e1e <WriteDebug>
		return;
 8001b30:	e006      	b.n	8001b40 <SCH_Camera+0x60>
	}

	camera_state = 1;	// Flag Camera as DMA Queued
 8001b32:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <SCH_Camera+0x68>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
 8001b38:	e002      	b.n	8001b40 <SCH_Camera+0x60>
		return;	// Exit if the camera is capturing, queued, or has un-encoded data
 8001b3a:	bf00      	nop
 8001b3c:	e000      	b.n	8001b40 <SCH_Camera+0x60>
		return;	// Exit if the JPEG is processing (camera DMA can corrupt the working buffer of JPEG)
 8001b3e:	bf00      	nop
}
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2401331a 	.word	0x2401331a
 8001b4c:	24025d26 	.word	0x24025d26
 8001b50:	24000954 	.word	0x24000954
 8001b54:	24000300 	.word	0x24000300
 8001b58:	0801b0d4 	.word	0x0801b0d4
 8001b5c:	240008d4 	.word	0x240008d4

08001b60 <SCH_JPEG>:

void SCH_JPEG() {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af02      	add	r7, sp, #8

	if (jpeg_state != 0)
 8001b66:	4b16      	ldr	r3, [pc, #88]	@ (8001bc0 <SCH_JPEG+0x60>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d120      	bne.n	8001bb2 <SCH_JPEG+0x52>
		return;	// Exit if the JPEG is already processing
	if (camera_state != 3)
 8001b70:	4b14      	ldr	r3, [pc, #80]	@ (8001bc4 <SCH_JPEG+0x64>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d11d      	bne.n	8001bb6 <SCH_JPEG+0x56>
		return;	// Exit if the camera does not have a new image to present
	if (tx_state == 1)
 8001b7a:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <SCH_JPEG+0x68>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d01a      	beq.n	8001bba <SCH_JPEG+0x5a>
		return;		// Exit if the radio is transmitting

	camera_state = 0;// flag the camera as idle, it won't start again until the JPEG is done
 8001b84:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <SCH_JPEG+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
	jpeg_state = 1;		// flag JPG as encoding
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <SCH_JPEG+0x60>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]

	jpeg_block = 0;		// Reset the JEPG block idx
 8001b90:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <SCH_JPEG+0x6c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
	jpeg_size = 0;		// Reset the JPEG size counter
 8001b96:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <SCH_JPEG+0x70>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]

	GenerateJPEGMCUBlock();
 8001b9c:	f000 fa6e 	bl	800207c <GenerateJPEGMCUBlock>
	HAL_JPEG_Encode_DMA(&hjpeg, jpeg_mcu, 64, jpeg_out, JPEG_OUTBUF_SIZE);
 8001ba0:	2340      	movs	r3, #64	@ 0x40
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <SCH_JPEG+0x74>)
 8001ba6:	2240      	movs	r2, #64	@ 0x40
 8001ba8:	490b      	ldr	r1, [pc, #44]	@ (8001bd8 <SCH_JPEG+0x78>)
 8001baa:	480c      	ldr	r0, [pc, #48]	@ (8001bdc <SCH_JPEG+0x7c>)
 8001bac:	f007 fd2c 	bl	8009608 <HAL_JPEG_Encode_DMA>
 8001bb0:	e004      	b.n	8001bbc <SCH_JPEG+0x5c>
		return;	// Exit if the JPEG is already processing
 8001bb2:	bf00      	nop
 8001bb4:	e002      	b.n	8001bbc <SCH_JPEG+0x5c>
		return;	// Exit if the camera does not have a new image to present
 8001bb6:	bf00      	nop
 8001bb8:	e000      	b.n	8001bbc <SCH_JPEG+0x5c>
		return;		// Exit if the radio is transmitting
 8001bba:	bf00      	nop
}
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	24025d26 	.word	0x24025d26
 8001bc4:	2401331a 	.word	0x2401331a
 8001bc8:	24025d56 	.word	0x24025d56
 8001bcc:	2401335c 	.word	0x2401335c
 8001bd0:	24025d28 	.word	0x24025d28
 8001bd4:	24013360 	.word	0x24013360
 8001bd8:	2401331c 	.word	0x2401331c
 8001bdc:	2400041c 	.word	0x2400041c

08001be0 <HAL_DCMI_VsyncEventCallback>:
	sch_tim_debug = HAL_GetTick();
}

// ------------------------------------------------------------ OVERRIDE CALLBACKS -- //
// Frame captured event, called when the DMA buffer is full of new frame data
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	if (!camera_state)
 8001be8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c24 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d014      	beq.n	8001c1c <HAL_DCMI_VsyncEventCallback+0x3c>
		return;	// Do nothing if the camera is IDLE

	if (camera_state == 1) {	// Transition flag to CAPTURING
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d103      	bne.n	8001c04 <HAL_DCMI_VsyncEventCallback+0x24>
		camera_state = 2;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001bfe:	2202      	movs	r2, #2
 8001c00:	701a      	strb	r2, [r3, #0]
		return;
 8001c02:	e00c      	b.n	8001c1e <HAL_DCMI_VsyncEventCallback+0x3e>
	}

	if (camera_state == 2) {	// Transition flag to READY
 8001c04:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d107      	bne.n	8001c1e <HAL_DCMI_VsyncEventCallback+0x3e>
		HAL_DCMI_Stop(hdcmi);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f001 ff00 	bl	8003a14 <HAL_DCMI_Stop>
		camera_state = 3;
 8001c14:	4b03      	ldr	r3, [pc, #12]	@ (8001c24 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001c16:	2203      	movs	r2, #3
 8001c18:	701a      	strb	r2, [r3, #0]
		return;
 8001c1a:	e000      	b.n	8001c1e <HAL_DCMI_VsyncEventCallback+0x3e>
		return;	// Do nothing if the camera is IDLE
 8001c1c:	bf00      	nop
	}
}
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	2401331a 	.word	0x2401331a

08001c28 <HAL_UART_RxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE UART DMA CALLBACKS -- //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	XBEE_RX_DMACallback(&hxbee);
 8001c30:	4803      	ldr	r0, [pc, #12]	@ (8001c40 <HAL_UART_RxCpltCallback+0x18>)
 8001c32:	f013 fe3d 	bl	80158b0 <XBEE_RX_DMACallback>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	24025d30 	.word	0x24025d30

08001c44 <HAL_JPEG_GetDataCallback>:

// JPEG hardware is requesting the next MCU block
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]

	// Restock the input buffer with new MCU
	if (GenerateJPEGMCUBlock()) {
 8001c4e:	f000 fa15 	bl	800207c <GenerateJPEGMCUBlock>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <HAL_JPEG_GetDataCallback+0x3c>
		// ERROR while generating MCU, probable memory leak - recover JPEG peripheral by restarting
		jpeg_state = 0;	// Flag JPEG as idle
 8001c58:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <HAL_JPEG_GetDataCallback+0x50>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
		jpeg_block = 0;	// Reset the JPEG block IDX
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <HAL_JPEG_GetDataCallback+0x54>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

		sprintf(ssd_msg, "JPEG OVERRUN\n");
 8001c64:	490d      	ldr	r1, [pc, #52]	@ (8001c9c <HAL_JPEG_GetDataCallback+0x58>)
 8001c66:	480e      	ldr	r0, [pc, #56]	@ (8001ca0 <HAL_JPEG_GetDataCallback+0x5c>)
 8001c68:	f017 f9ee 	bl	8019048 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8001c6c:	480c      	ldr	r0, [pc, #48]	@ (8001ca0 <HAL_JPEG_GetDataCallback+0x5c>)
 8001c6e:	f7fe fb87 	bl	8000380 <strlen>
 8001c72:	4603      	mov	r3, r0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	4619      	mov	r1, r3
 8001c78:	4809      	ldr	r0, [pc, #36]	@ (8001ca0 <HAL_JPEG_GetDataCallback+0x5c>)
 8001c7a:	f000 f8d0 	bl	8001e1e <WriteDebug>
	} else {
		// Configure the buffer to be the same as before, it's contents have changed
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
	}
}
 8001c7e:	e004      	b.n	8001c8a <HAL_JPEG_GetDataCallback+0x46>
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
 8001c80:	2240      	movs	r2, #64	@ 0x40
 8001c82:	4908      	ldr	r1, [pc, #32]	@ (8001ca4 <HAL_JPEG_GetDataCallback+0x60>)
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f007 fd87 	bl	8009798 <HAL_JPEG_ConfigInputBuffer>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	24025d26 	.word	0x24025d26
 8001c98:	2401335c 	.word	0x2401335c
 8001c9c:	0801b174 	.word	0x0801b174
 8001ca0:	240008d4 	.word	0x240008d4
 8001ca4:	2401331c 	.word	0x2401331c

08001ca8 <HAL_JPEG_DataReadyCallback>:

// JPEG hardware is requesting a larger output buffer.
// This is done to manage JPEG output size, give it a buffer only as large as required
void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut,
		uint32_t OutDataLength) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
	// Setup new output buffer location (part of contiguous super-buffer)
	jpeg_size += JPEG_OUTBUF_SIZE;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <HAL_JPEG_DataReadyCallback+0x30>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3340      	adds	r3, #64	@ 0x40
 8001cba:	4a07      	ldr	r2, [pc, #28]	@ (8001cd8 <HAL_JPEG_DataReadyCallback+0x30>)
 8001cbc:	6013      	str	r3, [r2, #0]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, jpeg_out + jpeg_size, JPEG_OUTBUF_SIZE);
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_JPEG_DataReadyCallback+0x30>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a06      	ldr	r2, [pc, #24]	@ (8001cdc <HAL_JPEG_DataReadyCallback+0x34>)
 8001cc4:	4413      	add	r3, r2
 8001cc6:	2240      	movs	r2, #64	@ 0x40
 8001cc8:	4619      	mov	r1, r3
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f007 fd76 	bl	80097bc <HAL_JPEG_ConfigOutputBuffer>
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	24025d28 	.word	0x24025d28
 8001cdc:	24013360 	.word	0x24013360

08001ce0 <HAL_JPEG_EncodeCpltCallback>:

// JPEG hardware has completed the current image
void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	jpeg_state = 2;	// Flag JPEG as ready
 8001ce8:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <HAL_JPEG_EncodeCpltCallback+0x20>)
 8001cea:	2202      	movs	r2, #2
 8001cec:	701a      	strb	r2, [r3, #0]
	jpeg_block = 0;	// Reset the JPEG block IDX
 8001cee:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <HAL_JPEG_EncodeCpltCallback+0x24>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
//	sprintf(ssd_msg, "JPEG DONE\n");
//	WriteDebug(ssd_msg, strlen(ssd_msg));
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	24025d26 	.word	0x24025d26
 8001d04:	2401335c 	.word	0x2401335c

08001d08 <HAL_JPEG_ErrorCallback>:

// JPEG hardware encountered an error
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	sprintf(ssd_msg, " JPEG ERROR");
 8001d10:	4909      	ldr	r1, [pc, #36]	@ (8001d38 <HAL_JPEG_ErrorCallback+0x30>)
 8001d12:	480a      	ldr	r0, [pc, #40]	@ (8001d3c <HAL_JPEG_ErrorCallback+0x34>)
 8001d14:	f017 f998 	bl	8019048 <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 8001d18:	4808      	ldr	r0, [pc, #32]	@ (8001d3c <HAL_JPEG_ErrorCallback+0x34>)
 8001d1a:	f7fe fb31 	bl	8000380 <strlen>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <HAL_JPEG_ErrorCallback+0x34>)
 8001d26:	f000 f87a 	bl	8001e1e <WriteDebug>
	//HAL_JPEG_Abort(&hjpeg);
	jpeg_state = 0;	// Flag JPEG as idle
 8001d2a:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <HAL_JPEG_ErrorCallback+0x38>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	0801b184 	.word	0x0801b184
 8001d3c:	240008d4 	.word	0x240008d4
 8001d40:	24025d26 	.word	0x24025d26

08001d44 <delay_ms_blocking>:

// ------------------------------------------------------------ UTILITY FUNCTIONS -- //

// Custom CPU cycle delay (For error cond.)
void delay_ms_blocking(uint32_t ms)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
    // Roughly calibrated for 150 MHz
    for (volatile uint32_t i = 0; i < ms; i++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e00e      	b.n	8001d70 <delay_ms_blocking+0x2c>
    {
        for (volatile uint32_t j = 0; j < 7500; j++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	e003      	b.n	8001d60 <delay_ms_blocking+0x1c>
        {
            __asm volatile ("nop");
 8001d58:	bf00      	nop
        for (volatile uint32_t j = 0; j < 7500; j++)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f641 524b 	movw	r2, #7499	@ 0x1d4b
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d9f6      	bls.n	8001d58 <delay_ms_blocking+0x14>
    for (volatile uint32_t i = 0; i < ms; i++)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d8ec      	bhi.n	8001d52 <delay_ms_blocking+0xe>
        }
    }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <SafeState>:

void SafeState() {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d8c:	b672      	cpsid	i
}
 8001d8e:	bf00      	nop
	__disable_irq();

	// Slowly stop the motors, wait for manual intervention
	while (1) {
		if (TIM2->CCR1 > 0) TIM2->CCR1 -= 1;
 8001d90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d006      	beq.n	8001da8 <SafeState+0x20>
 8001d9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001da4:	3b01      	subs	r3, #1
 8001da6:	6353      	str	r3, [r2, #52]	@ 0x34
		if (TIM2->CCR2 > 0) TIM2->CCR2 -= 1;
 8001da8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <SafeState+0x38>
 8001db2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	6393      	str	r3, [r2, #56]	@ 0x38
		if (TIM4->CCR3 > 0) TIM4->CCR3 -= 1;
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dec <SafeState+0x64>)
 8001dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d004      	beq.n	8001dd2 <SafeState+0x4a>
 8001dc8:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <SafeState+0x64>)
 8001dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dcc:	4a07      	ldr	r2, [pc, #28]	@ (8001dec <SafeState+0x64>)
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	63d3      	str	r3, [r2, #60]	@ 0x3c
		if (TIM4->CCR4 > 0) TIM4->CCR4 -= 1;
 8001dd2:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <SafeState+0x64>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <SafeState+0x5c>
 8001dda:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <SafeState+0x64>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	4a03      	ldr	r2, [pc, #12]	@ (8001dec <SafeState+0x64>)
 8001de0:	3b01      	subs	r3, #1
 8001de2:	6413      	str	r3, [r2, #64]	@ 0x40

		// Use a CPU cycle delay, HAL_Delay requires interrupts.
		delay_ms_blocking(3); // (6 seconds to fully stop)
 8001de4:	2003      	movs	r0, #3
 8001de6:	f7ff ffad 	bl	8001d44 <delay_ms_blocking>
		if (TIM2->CCR1 > 0) TIM2->CCR1 -= 1;
 8001dea:	e7d1      	b.n	8001d90 <SafeState+0x8>
 8001dec:	40000800 	.word	0x40000800

08001df0 <DeltaTime>:
	}
}

uint32_t DeltaTime(uint32_t start_t) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	uint32_t now_t = HAL_GetTick();
 8001df8:	f001 fb0c 	bl	8003414 <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]
	if (now_t < start_t) {
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d204      	bcs.n	8001e10 <DeltaTime+0x20>
		// Overflow has occurred
		return (0xFFFFFFFF - start_t) + now_t;
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	e002      	b.n	8001e16 <DeltaTime+0x26>
	}

	return now_t - start_t;
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	1ad3      	subs	r3, r2, r3
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <WriteDebug>:

// Transmit wrapper, this is for continuity across Controller project which debugs by printing to OLEDs
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	70fb      	strb	r3, [r7, #3]
	CDC_Transmit_FS(str_ptr, str_len);
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f015 fede 	bl	8017bf0 <CDC_Transmit_FS>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <CAM_GetRegister>:

HAL_StatusTypeDef CAM_GetRegister(uint8_t addr, uint8_t *pData,
		uint8_t haltOnError) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b09e      	sub	sp, #120	@ 0x78
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = { 0 };
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	2264      	movs	r2, #100	@ 0x64
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f017 f95c 	bl	8019112 <memset>

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &addr, 1,
 8001e5a:	1dfa      	adds	r2, r7, #7
 8001e5c:	2364      	movs	r3, #100	@ 0x64
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2301      	movs	r3, #1
 8001e62:	2143      	movs	r1, #67	@ 0x43
 8001e64:	482f      	ldr	r0, [pc, #188]	@ (8001f24 <CAM_GetRegister+0xe8>)
 8001e66:	f005 fce5 	bl	8007834 <HAL_I2C_Master_Transmit>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			100);
	if (ov_result) {
 8001e70:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d020      	beq.n	8001eba <CAM_GetRegister+0x7e>
		if (haltOnError) {
 8001e78:	79bb      	ldrb	r3, [r7, #6]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d01a      	beq.n	8001eb4 <CAM_GetRegister+0x78>
			sprintf(usb_msg,
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	461a      	mov	r2, r3
 8001e82:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001e86:	f107 0008 	add.w	r0, r7, #8
 8001e8a:	4927      	ldr	r1, [pc, #156]	@ (8001f28 <CAM_GetRegister+0xec>)
 8001e8c:	f017 f8dc 	bl	8019048 <siprintf>
					"TX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n",
					addr, ov_result);
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001e90:	f107 0308 	add.w	r3, r7, #8
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fa73 	bl	8000380 <strlen>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	f107 0308 	add.w	r3, r7, #8
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f015 fea4 	bl	8017bf0 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001ea8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001eac:	f001 fabe 	bl	800342c <HAL_Delay>
			while (1) {
 8001eb0:	bf00      	nop
 8001eb2:	e7ed      	b.n	8001e90 <CAM_GetRegister+0x54>
			}
		}
		return ov_result;
 8001eb4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001eb8:	e030      	b.n	8001f1c <CAM_GetRegister+0xe0>
	}

	ov_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, pData, 1, 100);
 8001eba:	2364      	movs	r3, #100	@ 0x64
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	2143      	movs	r1, #67	@ 0x43
 8001ec4:	4817      	ldr	r0, [pc, #92]	@ (8001f24 <CAM_GetRegister+0xe8>)
 8001ec6:	f005 fdcd 	bl	8007a64 <HAL_I2C_Master_Receive>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 8001ed0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <CAM_GetRegister+0xde>
		if (haltOnError) {
 8001ed8:	79bb      	ldrb	r3, [r7, #6]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01a      	beq.n	8001f14 <CAM_GetRegister+0xd8>
			sprintf(usb_msg,
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001ee6:	f107 0008 	add.w	r0, r7, #8
 8001eea:	4910      	ldr	r1, [pc, #64]	@ (8001f2c <CAM_GetRegister+0xf0>)
 8001eec:	f017 f8ac 	bl	8019048 <siprintf>
					"RX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n",
					addr, ov_result);
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001ef0:	f107 0308 	add.w	r3, r7, #8
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fa43 	bl	8000380 <strlen>
 8001efa:	4602      	mov	r2, r0
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f015 fe74 	bl	8017bf0 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001f08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f0c:	f001 fa8e 	bl	800342c <HAL_Delay>
			while (1) {
 8001f10:	bf00      	nop
 8001f12:	e7ed      	b.n	8001ef0 <CAM_GetRegister+0xb4>
			}
		}
		return ov_result;
 8001f14:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f18:	e000      	b.n	8001f1c <CAM_GetRegister+0xe0>
	}

	return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3770      	adds	r7, #112	@ 0x70
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	240003c8 	.word	0x240003c8
 8001f28:	0801b190 	.word	0x0801b190
 8001f2c:	0801b1cc 	.word	0x0801b1cc

08001f30 <CAM_SetRegister>:

HAL_StatusTypeDef CAM_SetRegister(uint8_t addr, uint8_t data,
		uint8_t haltOnError) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b0a0      	sub	sp, #128	@ 0x80
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	71bb      	strb	r3, [r7, #6]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = { 0 };
 8001f42:	f107 0310 	add.w	r3, r7, #16
 8001f46:	2264      	movs	r2, #100	@ 0x64
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f017 f8e1 	bl	8019112 <memset>

	uint8_t reg_set[2] = { addr, data };
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	733b      	strb	r3, [r7, #12]
 8001f54:	79bb      	ldrb	r3, [r7, #6]
 8001f56:	737b      	strb	r3, [r7, #13]

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_WRITE, reg_set, 2,
 8001f58:	f107 020c 	add.w	r2, r7, #12
 8001f5c:	2364      	movs	r3, #100	@ 0x64
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2302      	movs	r3, #2
 8001f62:	2142      	movs	r1, #66	@ 0x42
 8001f64:	4841      	ldr	r0, [pc, #260]	@ (800206c <CAM_SetRegister+0x13c>)
 8001f66:	f005 fc65 	bl	8007834 <HAL_I2C_Master_Transmit>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			100);
	if (ov_result) {
 8001f70:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01f      	beq.n	8001fb8 <CAM_SetRegister+0x88>
		if (haltOnError) {
 8001f78:	797b      	ldrb	r3, [r7, #5]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d019      	beq.n	8001fb2 <CAM_SetRegister+0x82>
			sprintf(usb_msg,
 8001f7e:	79fa      	ldrb	r2, [r7, #7]
 8001f80:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001f84:	f107 0010 	add.w	r0, r7, #16
 8001f88:	4939      	ldr	r1, [pc, #228]	@ (8002070 <CAM_SetRegister+0x140>)
 8001f8a:	f017 f85d 	bl	8019048 <siprintf>
					"TX ERROR: Cannot write camera register 0x%X - Code 0x%X\r\n",
					addr, ov_result);
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe f9f4 	bl	8000380 <strlen>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	f107 0310 	add.w	r3, r7, #16
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f015 fe25 	bl	8017bf0 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001fa6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001faa:	f001 fa3f 	bl	800342c <HAL_Delay>
			while (1) {
 8001fae:	bf00      	nop
 8001fb0:	e7ed      	b.n	8001f8e <CAM_SetRegister+0x5e>
			}
		}
		return ov_result;
 8001fb2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001fb6:	e054      	b.n	8002062 <CAM_SetRegister+0x132>
	}

	// Confirm write
	uint8_t reg_get = 0x00;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	72fb      	strb	r3, [r7, #11]
	ov_result = CAM_GetRegister(addr, &reg_get, 1);
 8001fbc:	f107 010b 	add.w	r1, r7, #11
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff39 	bl	8001e3c <CAM_GetRegister>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 8001fd0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01f      	beq.n	8002018 <CAM_SetRegister+0xe8>
		if (haltOnError) {
 8001fd8:	797b      	ldrb	r3, [r7, #5]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d019      	beq.n	8002012 <CAM_SetRegister+0xe2>
			sprintf(usb_msg,
 8001fde:	79fa      	ldrb	r2, [r7, #7]
 8001fe0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001fe4:	f107 0010 	add.w	r0, r7, #16
 8001fe8:	4922      	ldr	r1, [pc, #136]	@ (8002074 <CAM_SetRegister+0x144>)
 8001fea:	f017 f82d 	bl	8019048 <siprintf>
					"CF ERROR: Cannot confirm camera register 0x%X - Code 0x%X\r\n",
					addr, ov_result);
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001fee:	f107 0310 	add.w	r3, r7, #16
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe f9c4 	bl	8000380 <strlen>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f107 0310 	add.w	r3, r7, #16
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f015 fdf5 	bl	8017bf0 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8002006:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800200a:	f001 fa0f 	bl	800342c <HAL_Delay>
			while (1) {
 800200e:	bf00      	nop
 8002010:	e7ed      	b.n	8001fee <CAM_SetRegister+0xbe>
			}
		} else {
			return ov_result;
 8002012:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002016:	e024      	b.n	8002062 <CAM_SetRegister+0x132>
		}
	}

	if (reg_get != data) {
 8002018:	7afb      	ldrb	r3, [r7, #11]
 800201a:	79ba      	ldrb	r2, [r7, #6]
 800201c:	429a      	cmp	r2, r3
 800201e:	d01f      	beq.n	8002060 <CAM_SetRegister+0x130>
		// Error, bad write
		if (haltOnError) {
 8002020:	797b      	ldrb	r3, [r7, #5]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d01a      	beq.n	800205c <CAM_SetRegister+0x12c>
			sprintf(usb_msg,
 8002026:	79fa      	ldrb	r2, [r7, #7]
 8002028:	79bb      	ldrb	r3, [r7, #6]
 800202a:	7af9      	ldrb	r1, [r7, #11]
 800202c:	f107 0010 	add.w	r0, r7, #16
 8002030:	9100      	str	r1, [sp, #0]
 8002032:	4911      	ldr	r1, [pc, #68]	@ (8002078 <CAM_SetRegister+0x148>)
 8002034:	f017 f808 	bl	8019048 <siprintf>
					"CF ERROR: Bad write to register 0x%X - EXPECTED 0x%X, GOT 0x%X\r\n",
					addr, data, reg_get);
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe f99f 	bl	8000380 <strlen>
 8002042:	4602      	mov	r2, r0
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f015 fdd0 	bl	8017bf0 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8002050:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002054:	f001 f9ea 	bl	800342c <HAL_Delay>
			while (1) {
 8002058:	bf00      	nop
 800205a:	e7ed      	b.n	8002038 <CAM_SetRegister+0x108>
			}
		}
		return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <CAM_SetRegister+0x132>
	}

	return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3778      	adds	r7, #120	@ 0x78
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	240003c8 	.word	0x240003c8
 8002070:	0801b208 	.word	0x0801b208
 8002074:	0801b244 	.word	0x0801b244
 8002078:	0801b280 	.word	0x0801b280

0800207c <GenerateJPEGMCUBlock>:

// GENERATE JPEG MCU BLOCK
uint8_t GenerateJPEGMCUBlock() {
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
	// Don't go over the bounds of the specified MCU area
	if (jpeg_block
			> jpeg_mcu_widths[jpeg_quality] * jpeg_mcu_heights[jpeg_quality]) {
 8002082:	4b47      	ldr	r3, [pc, #284]	@ (80021a0 <GenerateJPEGMCUBlock+0x124>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	4b46      	ldr	r3, [pc, #280]	@ (80021a4 <GenerateJPEGMCUBlock+0x128>)
 800208a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800208e:	461a      	mov	r2, r3
 8002090:	4b43      	ldr	r3, [pc, #268]	@ (80021a0 <GenerateJPEGMCUBlock+0x124>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4619      	mov	r1, r3
 8002096:	4b44      	ldr	r3, [pc, #272]	@ (80021a8 <GenerateJPEGMCUBlock+0x12c>)
 8002098:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b42      	ldr	r3, [pc, #264]	@ (80021ac <GenerateJPEGMCUBlock+0x130>)
 80020a4:	681b      	ldr	r3, [r3, #0]
	if (jpeg_block
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d201      	bcs.n	80020ae <GenerateJPEGMCUBlock+0x32>
		return 1;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e072      	b.n	8002194 <GenerateJPEGMCUBlock+0x118>
	}

	int xStart = (jpeg_block % jpeg_mcu_widths[jpeg_quality]) * 8;
 80020ae:	4b3f      	ldr	r3, [pc, #252]	@ (80021ac <GenerateJPEGMCUBlock+0x130>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a3b      	ldr	r2, [pc, #236]	@ (80021a0 <GenerateJPEGMCUBlock+0x124>)
 80020b4:	7812      	ldrb	r2, [r2, #0]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4a3a      	ldr	r2, [pc, #232]	@ (80021a4 <GenerateJPEGMCUBlock+0x128>)
 80020ba:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80020be:	fbb3 f1f2 	udiv	r1, r3, r2
 80020c2:	fb01 f202 	mul.w	r2, r1, r2
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	60bb      	str	r3, [r7, #8]
	int yStart = (jpeg_block / jpeg_mcu_widths[jpeg_quality]) * 8;
 80020cc:	4b37      	ldr	r3, [pc, #220]	@ (80021ac <GenerateJPEGMCUBlock+0x130>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a33      	ldr	r2, [pc, #204]	@ (80021a0 <GenerateJPEGMCUBlock+0x124>)
 80020d2:	7812      	ldrb	r2, [r2, #0]
 80020d4:	4611      	mov	r1, r2
 80020d6:	4a33      	ldr	r2, [pc, #204]	@ (80021a4 <GenerateJPEGMCUBlock+0x128>)
 80020d8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80020dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	607b      	str	r3, [r7, #4]
	int i = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
	for (int y = yStart; y < yStart + 8; y++) {
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	e047      	b.n	800217e <GenerateJPEGMCUBlock+0x102>
		uint16_t cached_y = y * jpeg_scaleFactors[jpeg_quality];
 80020ee:	4b2c      	ldr	r3, [pc, #176]	@ (80021a0 <GenerateJPEGMCUBlock+0x124>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b2e      	ldr	r3, [pc, #184]	@ (80021b0 <GenerateJPEGMCUBlock+0x134>)
 80020f6:	5c9b      	ldrb	r3, [r3, r2]
 80020f8:	461a      	mov	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	fb12 f303 	smulbb	r3, r2, r3
 8002102:	807b      	strh	r3, [r7, #2]

		for (int x = xStart; x < xStart + 8; x++) {
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	e031      	b.n	800216e <GenerateJPEGMCUBlock+0xf2>
			uint16_t cached_x = x * jpeg_scaleFactors[jpeg_quality]
 800210a:	4b25      	ldr	r3, [pc, #148]	@ (80021a0 <GenerateJPEGMCUBlock+0x124>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	4b27      	ldr	r3, [pc, #156]	@ (80021b0 <GenerateJPEGMCUBlock+0x134>)
 8002112:	5c9b      	ldrb	r3, [r3, r2]
					+ camera_vshift;
 8002114:	461a      	mov	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	b29b      	uxth	r3, r3
 800211a:	fb12 f303 	smulbb	r3, r2, r3
 800211e:	b29a      	uxth	r2, r3
 8002120:	4b24      	ldr	r3, [pc, #144]	@ (80021b4 <GenerateJPEGMCUBlock+0x138>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
			uint16_t cached_x = x * jpeg_scaleFactors[jpeg_quality]
 8002126:	4413      	add	r3, r2
 8002128:	803b      	strh	r3, [r7, #0]
			// Pad to 8x8
			if (cached_x >= CAM_WIDTH || cached_y >= CAM_HEIGHT) {
 800212a:	883b      	ldrh	r3, [r7, #0]
 800212c:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8002130:	d802      	bhi.n	8002138 <GenerateJPEGMCUBlock+0xbc>
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	2bf1      	cmp	r3, #241	@ 0xf1
 8002136:	d905      	bls.n	8002144 <GenerateJPEGMCUBlock+0xc8>
				jpeg_mcu[i] = 0x00;
 8002138:	4a1f      	ldr	r2, [pc, #124]	@ (80021b8 <GenerateJPEGMCUBlock+0x13c>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	4413      	add	r3, r2
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	e00e      	b.n	8002162 <GenerateJPEGMCUBlock+0xe6>
			} else {
				jpeg_mcu[i] = camera_mem[cached_x + cached_y * CAM_WIDTH];
 8002144:	8839      	ldrh	r1, [r7, #0]
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	019a      	lsls	r2, r3, #6
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	440b      	add	r3, r1
 8002154:	4a19      	ldr	r2, [pc, #100]	@ (80021bc <GenerateJPEGMCUBlock+0x140>)
 8002156:	5cd1      	ldrb	r1, [r2, r3]
 8002158:	4a17      	ldr	r2, [pc, #92]	@ (80021b8 <GenerateJPEGMCUBlock+0x13c>)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	4413      	add	r3, r2
 800215e:	460a      	mov	r2, r1
 8002160:	701a      	strb	r2, [r3, #0]
			}
			i++;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3301      	adds	r3, #1
 8002166:	617b      	str	r3, [r7, #20]
		for (int x = xStart; x < xStart + 8; x++) {
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3301      	adds	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3307      	adds	r3, #7
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	429a      	cmp	r2, r3
 8002176:	ddc8      	ble.n	800210a <GenerateJPEGMCUBlock+0x8e>
	for (int y = yStart; y < yStart + 8; y++) {
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	3301      	adds	r3, #1
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3307      	adds	r3, #7
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	429a      	cmp	r2, r3
 8002186:	ddb2      	ble.n	80020ee <GenerateJPEGMCUBlock+0x72>
		}
	}
	jpeg_block++;
 8002188:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <GenerateJPEGMCUBlock+0x130>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	4a07      	ldr	r2, [pc, #28]	@ (80021ac <GenerateJPEGMCUBlock+0x130>)
 8002190:	6013      	str	r3, [r2, #0]
	return 0;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	24025d2c 	.word	0x24025d2c
 80021a4:	24000004 	.word	0x24000004
 80021a8:	2400000c 	.word	0x2400000c
 80021ac:	2401335c 	.word	0x2401335c
 80021b0:	24000014 	.word	0x24000014
 80021b4:	24000000 	.word	0x24000000
 80021b8:	2401331c 	.word	0x2401331c
 80021bc:	24000954 	.word	0x24000954

080021c0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80021c6:	463b      	mov	r3, r7
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80021d2:	f001 fa6b 	bl	80036ac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80021d6:	2301      	movs	r3, #1
 80021d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80021da:	2300      	movs	r3, #0
 80021dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80021e2:	231f      	movs	r3, #31
 80021e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80021e6:	2387      	movs	r3, #135	@ 0x87
 80021e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80021ee:	2300      	movs	r3, #0
 80021f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80021f2:	2301      	movs	r3, #1
 80021f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80021f6:	2301      	movs	r3, #1
 80021f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002202:	463b      	mov	r3, r7
 8002204:	4618      	mov	r0, r3
 8002206:	f001 fa89 	bl	800371c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800220a:	2004      	movs	r0, #4
 800220c:	f001 fa66 	bl	80036dc <HAL_MPU_Enable>

}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800221c:	b672      	cpsid	i
}
 800221e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <Error_Handler+0x8>

08002224 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <HAL_MspInit+0x30>)
 800222c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002230:	4a08      	ldr	r2, [pc, #32]	@ (8002254 <HAL_MspInit+0x30>)
 8002232:	f043 0302 	orr.w	r3, r3, #2
 8002236:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800223a:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <HAL_MspInit+0x30>)
 800223c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	607b      	str	r3, [r7, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	58024400 	.word	0x58024400

08002258 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08e      	sub	sp, #56	@ 0x38
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a79      	ldr	r2, [pc, #484]	@ (800245c <HAL_DCMI_MspInit+0x204>)
 8002276:	4293      	cmp	r3, r2
 8002278:	f040 80ec 	bne.w	8002454 <HAL_DCMI_MspInit+0x1fc>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800227c:	4b78      	ldr	r3, [pc, #480]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 800227e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002282:	4a77      	ldr	r2, [pc, #476]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800228c:	4b74      	ldr	r3, [pc, #464]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 800228e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	623b      	str	r3, [r7, #32]
 8002298:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800229a:	4b71      	ldr	r3, [pc, #452]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 800229c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022a0:	4a6f      	ldr	r2, [pc, #444]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 80022a2:	f043 0310 	orr.w	r3, r3, #16
 80022a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 80022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b8:	4b69      	ldr	r3, [pc, #420]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 80022ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022be:	4a68      	ldr	r2, [pc, #416]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022c8:	4b65      	ldr	r3, [pc, #404]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 80022ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	4b62      	ldr	r3, [pc, #392]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022dc:	4a60      	ldr	r2, [pc, #384]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 80022de:	f043 0304 	orr.w	r3, r3, #4
 80022e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022e6:	4b5e      	ldr	r3, [pc, #376]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 80022f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022fa:	4a59      	ldr	r2, [pc, #356]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 80022fc:	f043 0308 	orr.w	r3, r3, #8
 8002300:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002304:	4b56      	ldr	r3, [pc, #344]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 8002306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002312:	4b53      	ldr	r3, [pc, #332]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 8002314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002318:	4a51      	ldr	r2, [pc, #324]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 800231a:	f043 0302 	orr.w	r3, r3, #2
 800231e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002322:	4b4f      	ldr	r3, [pc, #316]	@ (8002460 <HAL_DCMI_MspInit+0x208>)
 8002324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8002330:	2373      	movs	r3, #115	@ 0x73
 8002332:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002340:	230d      	movs	r3, #13
 8002342:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002348:	4619      	mov	r1, r3
 800234a:	4846      	ldr	r0, [pc, #280]	@ (8002464 <HAL_DCMI_MspInit+0x20c>)
 800234c:	f005 f80c 	bl	8007368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002350:	2350      	movs	r3, #80	@ 0x50
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002360:	230d      	movs	r3, #13
 8002362:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002368:	4619      	mov	r1, r3
 800236a:	483f      	ldr	r0, [pc, #252]	@ (8002468 <HAL_DCMI_MspInit+0x210>)
 800236c:	f004 fffc 	bl	8007368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002370:	23c0      	movs	r3, #192	@ 0xc0
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002380:	230d      	movs	r3, #13
 8002382:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002388:	4619      	mov	r1, r3
 800238a:	4838      	ldr	r0, [pc, #224]	@ (800246c <HAL_DCMI_MspInit+0x214>)
 800238c:	f004 ffec 	bl	8007368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002390:	2308      	movs	r3, #8
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023a0:	230d      	movs	r3, #13
 80023a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023a8:	4619      	mov	r1, r3
 80023aa:	4831      	ldr	r0, [pc, #196]	@ (8002470 <HAL_DCMI_MspInit+0x218>)
 80023ac:	f004 ffdc 	bl	8007368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023b0:	2380      	movs	r3, #128	@ 0x80
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2300      	movs	r3, #0
 80023be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023c0:	230d      	movs	r3, #13
 80023c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023c8:	4619      	mov	r1, r3
 80023ca:	482a      	ldr	r0, [pc, #168]	@ (8002474 <HAL_DCMI_MspInit+0x21c>)
 80023cc:	f004 ffcc 	bl	8007368 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80023d0:	4b29      	ldr	r3, [pc, #164]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 80023d2:	4a2a      	ldr	r2, [pc, #168]	@ (800247c <HAL_DCMI_MspInit+0x224>)
 80023d4:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80023d6:	4b28      	ldr	r3, [pc, #160]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 80023d8:	224b      	movs	r2, #75	@ 0x4b
 80023da:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023dc:	4b26      	ldr	r3, [pc, #152]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e2:	4b25      	ldr	r3, [pc, #148]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80023e8:	4b23      	ldr	r3, [pc, #140]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 80023ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ee:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023f0:	4b21      	ldr	r3, [pc, #132]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 80023f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023f6:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 80023fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023fe:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8002400:	4b1d      	ldr	r3, [pc, #116]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 8002402:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002406:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8002408:	4b1b      	ldr	r3, [pc, #108]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 800240a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800240e:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002410:	4b19      	ldr	r3, [pc, #100]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 8002412:	2204      	movs	r2, #4
 8002414:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002416:	4b18      	ldr	r3, [pc, #96]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 8002418:	2203      	movs	r2, #3
 800241a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 800241c:	4b16      	ldr	r3, [pc, #88]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 800241e:	2200      	movs	r2, #0
 8002420:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002422:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 8002424:	2200      	movs	r2, #0
 8002426:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002428:	4813      	ldr	r0, [pc, #76]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 800242a:	f001 fca3 	bl	8003d74 <HAL_DMA_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 8002434:	f7ff fef0 	bl	8002218 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a0f      	ldr	r2, [pc, #60]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 800243c:	649a      	str	r2, [r3, #72]	@ 0x48
 800243e:	4a0e      	ldr	r2, [pc, #56]	@ (8002478 <HAL_DCMI_MspInit+0x220>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8002444:	2200      	movs	r2, #0
 8002446:	2100      	movs	r1, #0
 8002448:	204e      	movs	r0, #78	@ 0x4e
 800244a:	f001 f8fa 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800244e:	204e      	movs	r0, #78	@ 0x4e
 8002450:	f001 f911 	bl	8003676 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8002454:	bf00      	nop
 8002456:	3738      	adds	r7, #56	@ 0x38
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	48020000 	.word	0x48020000
 8002460:	58024400 	.word	0x58024400
 8002464:	58021000 	.word	0x58021000
 8002468:	58020000 	.word	0x58020000
 800246c:	58020800 	.word	0x58020800
 8002470:	58020c00 	.word	0x58020c00
 8002474:	58020400 	.word	0x58020400
 8002478:	24000350 	.word	0x24000350
 800247c:	40020010 	.word	0x40020010

08002480 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b0ba      	sub	sp, #232	@ 0xe8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	22c0      	movs	r2, #192	@ 0xc0
 800249e:	2100      	movs	r1, #0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f016 fe36 	bl	8019112 <memset>
  if(hi2c->Instance==I2C2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a38      	ldr	r2, [pc, #224]	@ (800258c <HAL_I2C_MspInit+0x10c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d169      	bne.n	8002584 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80024b0:	f04f 0208 	mov.w	r2, #8
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 80024bc:	2302      	movs	r3, #2
 80024be:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 80024c0:	230c      	movs	r3, #12
 80024c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80024c4:	2302      	movs	r3, #2
 80024c6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80024c8:	2302      	movs	r3, #2
 80024ca:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 80024cc:	2303      	movs	r3, #3
 80024ce:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80024d0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80024d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024da:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80024e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	4618      	mov	r0, r3
 80024ee:	f00b fdf5 	bl	800e0dc <HAL_RCCEx_PeriphCLKConfig>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 80024f8:	f7ff fe8e 	bl	8002218 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fc:	4b24      	ldr	r3, [pc, #144]	@ (8002590 <HAL_I2C_MspInit+0x110>)
 80024fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002502:	4a23      	ldr	r2, [pc, #140]	@ (8002590 <HAL_I2C_MspInit+0x110>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800250c:	4b20      	ldr	r3, [pc, #128]	@ (8002590 <HAL_I2C_MspInit+0x110>)
 800250e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800251a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800251e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002522:	2312      	movs	r3, #18
 8002524:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002528:	2301      	movs	r3, #1
 800252a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002534:	2304      	movs	r3, #4
 8002536:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800253e:	4619      	mov	r1, r3
 8002540:	4814      	ldr	r0, [pc, #80]	@ (8002594 <HAL_I2C_MspInit+0x114>)
 8002542:	f004 ff11 	bl	8007368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002546:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_I2C_MspInit+0x110>)
 8002548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800254c:	4a10      	ldr	r2, [pc, #64]	@ (8002590 <HAL_I2C_MspInit+0x110>)
 800254e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002552:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002556:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <HAL_I2C_MspInit+0x110>)
 8002558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800255c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002564:	2200      	movs	r2, #0
 8002566:	2100      	movs	r1, #0
 8002568:	2021      	movs	r0, #33	@ 0x21
 800256a:	f001 f86a 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800256e:	2021      	movs	r0, #33	@ 0x21
 8002570:	f001 f881 	bl	8003676 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002574:	2200      	movs	r2, #0
 8002576:	2100      	movs	r1, #0
 8002578:	2022      	movs	r0, #34	@ 0x22
 800257a:	f001 f862 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800257e:	2022      	movs	r0, #34	@ 0x22
 8002580:	f001 f879 	bl	8003676 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002584:	bf00      	nop
 8002586:	37e8      	adds	r7, #232	@ 0xe8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40005800 	.word	0x40005800
 8002590:	58024400 	.word	0x58024400
 8002594:	58020400 	.word	0x58020400

08002598 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a55      	ldr	r2, [pc, #340]	@ (80026fc <HAL_JPEG_MspInit+0x164>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	f040 80a3 	bne.w	80026f2 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80025ac:	4b54      	ldr	r3, [pc, #336]	@ (8002700 <HAL_JPEG_MspInit+0x168>)
 80025ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025b2:	4a53      	ldr	r2, [pc, #332]	@ (8002700 <HAL_JPEG_MspInit+0x168>)
 80025b4:	f043 0320 	orr.w	r3, r3, #32
 80025b8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80025bc:	4b50      	ldr	r3, [pc, #320]	@ (8002700 <HAL_JPEG_MspInit+0x168>)
 80025be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 80025ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 80025cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002708 <HAL_JPEG_MspInit+0x170>)
 80025ce:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80025d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 80025d2:	2211      	movs	r2, #17
 80025d4:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80025d6:	4b4b      	ldr	r3, [pc, #300]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 80025dc:	4b49      	ldr	r3, [pc, #292]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 80025de:	2240      	movs	r2, #64	@ 0x40
 80025e0:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80025e2:	4b48      	ldr	r3, [pc, #288]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80025e8:	4b46      	ldr	r3, [pc, #280]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 80025ea:	2202      	movs	r2, #2
 80025ec:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80025ee:	4b45      	ldr	r3, [pc, #276]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 80025f4:	4b43      	ldr	r3, [pc, #268]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80025fa:	4b42      	ldr	r3, [pc, #264]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 80025fc:	2280      	movs	r2, #128	@ 0x80
 80025fe:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002600:	4b40      	ldr	r3, [pc, #256]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 8002602:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002606:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8002608:	4b3e      	ldr	r3, [pc, #248]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 800260a:	2220      	movs	r2, #32
 800260c:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800260e:	4b3d      	ldr	r3, [pc, #244]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 8002610:	2200      	movs	r2, #0
 8002612:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002614:	4b3b      	ldr	r3, [pc, #236]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 800261a:	4b3a      	ldr	r3, [pc, #232]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 800261c:	2200      	movs	r2, #0
 800261e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8002620:	4b38      	ldr	r3, [pc, #224]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 8002622:	2200      	movs	r2, #0
 8002624:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8002626:	4837      	ldr	r0, [pc, #220]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 8002628:	f008 fee6 	bl	800b3f8 <HAL_MDMA_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 8002632:	f7ff fdf1 	bl	8002218 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	4832      	ldr	r0, [pc, #200]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 800263c:	f008 ff28 	bl	800b490 <HAL_MDMA_ConfigPostRequestMask>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 8002646:	f7ff fde7 	bl	8002218 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a2d      	ldr	r2, [pc, #180]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 800264e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002650:	4a2c      	ldr	r2, [pc, #176]	@ (8002704 <HAL_JPEG_MspInit+0x16c>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 8002656:	4b2d      	ldr	r3, [pc, #180]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 8002658:	4a2d      	ldr	r2, [pc, #180]	@ (8002710 <HAL_JPEG_MspInit+0x178>)
 800265a:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 800265c:	4b2b      	ldr	r3, [pc, #172]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 800265e:	2214      	movs	r2, #20
 8002660:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8002662:	4b2a      	ldr	r3, [pc, #168]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8002668:	4b28      	ldr	r3, [pc, #160]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 800266a:	2240      	movs	r2, #64	@ 0x40
 800266c:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800266e:	4b27      	ldr	r3, [pc, #156]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8002674:	4b25      	ldr	r3, [pc, #148]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 8002676:	2200      	movs	r2, #0
 8002678:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 800267a:	4b24      	ldr	r3, [pc, #144]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 800267c:	2208      	movs	r2, #8
 800267e:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8002680:	4b22      	ldr	r3, [pc, #136]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 8002682:	2220      	movs	r2, #32
 8002684:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8002686:	4b21      	ldr	r3, [pc, #132]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 8002688:	2200      	movs	r2, #0
 800268a:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800268c:	4b1f      	ldr	r3, [pc, #124]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 800268e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002692:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8002694:	4b1d      	ldr	r3, [pc, #116]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 8002696:	2204      	movs	r2, #4
 8002698:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800269a:	4b1c      	ldr	r3, [pc, #112]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 800269c:	2200      	movs	r2, #0
 800269e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80026a0:	4b1a      	ldr	r3, [pc, #104]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 80026a6:	4b19      	ldr	r3, [pc, #100]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 80026ac:	4b17      	ldr	r3, [pc, #92]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 80026b2:	4816      	ldr	r0, [pc, #88]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 80026b4:	f008 fea0 	bl	800b3f8 <HAL_MDMA_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 80026be:	f7ff fdab 	bl	8002218 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	4811      	ldr	r0, [pc, #68]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 80026c8:	f008 fee2 	bl	800b490 <HAL_MDMA_ConfigPostRequestMask>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 80026d2:	f7ff fda1 	bl	8002218 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a0c      	ldr	r2, [pc, #48]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 80026da:	635a      	str	r2, [r3, #52]	@ 0x34
 80026dc:	4a0b      	ldr	r2, [pc, #44]	@ (800270c <HAL_JPEG_MspInit+0x174>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2100      	movs	r1, #0
 80026e6:	2079      	movs	r0, #121	@ 0x79
 80026e8:	f000 ffab 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80026ec:	2079      	movs	r0, #121	@ 0x79
 80026ee:	f000 ffc2 	bl	8003676 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	52003000 	.word	0x52003000
 8002700:	58024400 	.word	0x58024400
 8002704:	24000474 	.word	0x24000474
 8002708:	52000040 	.word	0x52000040
 800270c:	240004e0 	.word	0x240004e0
 8002710:	52000080 	.word	0x52000080

08002714 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b0bc      	sub	sp, #240	@ 0xf0
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800272c:	f107 0318 	add.w	r3, r7, #24
 8002730:	22c0      	movs	r2, #192	@ 0xc0
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f016 fcec 	bl	8019112 <memset>
  if(hspi->Instance==SPI2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a38      	ldr	r2, [pc, #224]	@ (8002820 <HAL_SPI_MspInit+0x10c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d169      	bne.n	8002818 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002744:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002750:	2300      	movs	r3, #0
 8002752:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002754:	f107 0318 	add.w	r3, r7, #24
 8002758:	4618      	mov	r0, r3
 800275a:	f00b fcbf 	bl	800e0dc <HAL_RCCEx_PeriphCLKConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002764:	f7ff fd58 	bl	8002218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002768:	4b2e      	ldr	r3, [pc, #184]	@ (8002824 <HAL_SPI_MspInit+0x110>)
 800276a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800276e:	4a2d      	ldr	r2, [pc, #180]	@ (8002824 <HAL_SPI_MspInit+0x110>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002774:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002778:	4b2a      	ldr	r3, [pc, #168]	@ (8002824 <HAL_SPI_MspInit+0x110>)
 800277a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800277e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002786:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <HAL_SPI_MspInit+0x110>)
 8002788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800278c:	4a25      	ldr	r2, [pc, #148]	@ (8002824 <HAL_SPI_MspInit+0x110>)
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002796:	4b23      	ldr	r3, [pc, #140]	@ (8002824 <HAL_SPI_MspInit+0x110>)
 8002798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002824 <HAL_SPI_MspInit+0x110>)
 80027a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002824 <HAL_SPI_MspInit+0x110>)
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <HAL_SPI_MspInit+0x110>)
 80027b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80027c2:	2306      	movs	r3, #6
 80027c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
 80027ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027da:	2305      	movs	r3, #5
 80027dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027e4:	4619      	mov	r1, r3
 80027e6:	4810      	ldr	r0, [pc, #64]	@ (8002828 <HAL_SPI_MspInit+0x114>)
 80027e8:	f004 fdbe 	bl	8007368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80027ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002806:	2305      	movs	r3, #5
 8002808:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002810:	4619      	mov	r1, r3
 8002812:	4806      	ldr	r0, [pc, #24]	@ (800282c <HAL_SPI_MspInit+0x118>)
 8002814:	f004 fda8 	bl	8007368 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002818:	bf00      	nop
 800281a:	37f0      	adds	r7, #240	@ 0xf0
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40003800 	.word	0x40003800
 8002824:	58024400 	.word	0x58024400
 8002828:	58020800 	.word	0x58020800
 800282c:	58020400 	.word	0x58020400

08002830 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2b      	ldr	r2, [pc, #172]	@ (80028ec <HAL_TIM_PWM_MspInit+0xbc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10f      	bne.n	8002862 <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002842:	4b2b      	ldr	r3, [pc, #172]	@ (80028f0 <HAL_TIM_PWM_MspInit+0xc0>)
 8002844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002848:	4a29      	ldr	r2, [pc, #164]	@ (80028f0 <HAL_TIM_PWM_MspInit+0xc0>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002852:	4b27      	ldr	r3, [pc, #156]	@ (80028f0 <HAL_TIM_PWM_MspInit+0xc0>)
 8002854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002860:	e03d      	b.n	80028de <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800286a:	d10f      	bne.n	800288c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800286c:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <HAL_TIM_PWM_MspInit+0xc0>)
 800286e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002872:	4a1f      	ldr	r2, [pc, #124]	@ (80028f0 <HAL_TIM_PWM_MspInit+0xc0>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800287c:	4b1c      	ldr	r3, [pc, #112]	@ (80028f0 <HAL_TIM_PWM_MspInit+0xc0>)
 800287e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
}
 800288a:	e028      	b.n	80028de <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a18      	ldr	r2, [pc, #96]	@ (80028f4 <HAL_TIM_PWM_MspInit+0xc4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d10f      	bne.n	80028b6 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002896:	4b16      	ldr	r3, [pc, #88]	@ (80028f0 <HAL_TIM_PWM_MspInit+0xc0>)
 8002898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800289c:	4a14      	ldr	r2, [pc, #80]	@ (80028f0 <HAL_TIM_PWM_MspInit+0xc0>)
 800289e:	f043 0302 	orr.w	r3, r3, #2
 80028a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028a6:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <HAL_TIM_PWM_MspInit+0xc0>)
 80028a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	e013      	b.n	80028de <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a0f      	ldr	r2, [pc, #60]	@ (80028f8 <HAL_TIM_PWM_MspInit+0xc8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d10e      	bne.n	80028de <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028c0:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <HAL_TIM_PWM_MspInit+0xc0>)
 80028c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028c6:	4a0a      	ldr	r2, [pc, #40]	@ (80028f0 <HAL_TIM_PWM_MspInit+0xc0>)
 80028c8:	f043 0304 	orr.w	r3, r3, #4
 80028cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028d0:	4b07      	ldr	r3, [pc, #28]	@ (80028f0 <HAL_TIM_PWM_MspInit+0xc0>)
 80028d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
}
 80028de:	bf00      	nop
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40010000 	.word	0x40010000
 80028f0:	58024400 	.word	0x58024400
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40000800 	.word	0x40000800

080028fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1d      	ldr	r2, [pc, #116]	@ (8002980 <HAL_TIM_Base_MspInit+0x84>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d117      	bne.n	800293e <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800290e:	4b1d      	ldr	r3, [pc, #116]	@ (8002984 <HAL_TIM_Base_MspInit+0x88>)
 8002910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002914:	4a1b      	ldr	r2, [pc, #108]	@ (8002984 <HAL_TIM_Base_MspInit+0x88>)
 8002916:	f043 0308 	orr.w	r3, r3, #8
 800291a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800291e:	4b19      	ldr	r3, [pc, #100]	@ (8002984 <HAL_TIM_Base_MspInit+0x88>)
 8002920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800292c:	2200      	movs	r2, #0
 800292e:	2100      	movs	r1, #0
 8002930:	2032      	movs	r0, #50	@ 0x32
 8002932:	f000 fe86 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002936:	2032      	movs	r0, #50	@ 0x32
 8002938:	f000 fe9d 	bl	8003676 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 800293c:	e01b      	b.n	8002976 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM14)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a11      	ldr	r2, [pc, #68]	@ (8002988 <HAL_TIM_Base_MspInit+0x8c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d116      	bne.n	8002976 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002948:	4b0e      	ldr	r3, [pc, #56]	@ (8002984 <HAL_TIM_Base_MspInit+0x88>)
 800294a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800294e:	4a0d      	ldr	r2, [pc, #52]	@ (8002984 <HAL_TIM_Base_MspInit+0x88>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002954:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002958:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <HAL_TIM_Base_MspInit+0x88>)
 800295a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800295e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	202d      	movs	r0, #45	@ 0x2d
 800296c:	f000 fe69 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002970:	202d      	movs	r0, #45	@ 0x2d
 8002972:	f000 fe80 	bl	8003676 <HAL_NVIC_EnableIRQ>
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40000c00 	.word	0x40000c00
 8002984:	58024400 	.word	0x58024400
 8002988:	40002000 	.word	0x40002000

0800298c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08c      	sub	sp, #48	@ 0x30
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	f107 031c 	add.w	r3, r7, #28
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a5d      	ldr	r2, [pc, #372]	@ (8002b20 <HAL_TIM_MspPostInit+0x194>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d120      	bne.n	80029f0 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002b24 <HAL_TIM_MspPostInit+0x198>)
 80029b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029b4:	4a5b      	ldr	r2, [pc, #364]	@ (8002b24 <HAL_TIM_MspPostInit+0x198>)
 80029b6:	f043 0310 	orr.w	r3, r3, #16
 80029ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029be:	4b59      	ldr	r3, [pc, #356]	@ (8002b24 <HAL_TIM_MspPostInit+0x198>)
 80029c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80029cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029de:	2301      	movs	r3, #1
 80029e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029e2:	f107 031c 	add.w	r3, r7, #28
 80029e6:	4619      	mov	r1, r3
 80029e8:	484f      	ldr	r0, [pc, #316]	@ (8002b28 <HAL_TIM_MspPostInit+0x19c>)
 80029ea:	f004 fcbd 	bl	8007368 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80029ee:	e093      	b.n	8002b18 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029f8:	d11f      	bne.n	8002a3a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002b24 <HAL_TIM_MspPostInit+0x198>)
 80029fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a00:	4a48      	ldr	r2, [pc, #288]	@ (8002b24 <HAL_TIM_MspPostInit+0x198>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a0a:	4b46      	ldr	r3, [pc, #280]	@ (8002b24 <HAL_TIM_MspPostInit+0x198>)
 8002a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002a18:	2307      	movs	r3, #7
 8002a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2300      	movs	r3, #0
 8002a26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2c:	f107 031c 	add.w	r3, r7, #28
 8002a30:	4619      	mov	r1, r3
 8002a32:	483e      	ldr	r0, [pc, #248]	@ (8002b2c <HAL_TIM_MspPostInit+0x1a0>)
 8002a34:	f004 fc98 	bl	8007368 <HAL_GPIO_Init>
}
 8002a38:	e06e      	b.n	8002b18 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a3c      	ldr	r2, [pc, #240]	@ (8002b30 <HAL_TIM_MspPostInit+0x1a4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d11f      	bne.n	8002a84 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a44:	4b37      	ldr	r3, [pc, #220]	@ (8002b24 <HAL_TIM_MspPostInit+0x198>)
 8002a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a4a:	4a36      	ldr	r2, [pc, #216]	@ (8002b24 <HAL_TIM_MspPostInit+0x198>)
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a54:	4b33      	ldr	r3, [pc, #204]	@ (8002b24 <HAL_TIM_MspPostInit+0x198>)
 8002a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a62:	2303      	movs	r3, #3
 8002a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a72:	2302      	movs	r3, #2
 8002a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a76:	f107 031c 	add.w	r3, r7, #28
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	482d      	ldr	r0, [pc, #180]	@ (8002b34 <HAL_TIM_MspPostInit+0x1a8>)
 8002a7e:	f004 fc73 	bl	8007368 <HAL_GPIO_Init>
}
 8002a82:	e049      	b.n	8002b18 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2b      	ldr	r2, [pc, #172]	@ (8002b38 <HAL_TIM_MspPostInit+0x1ac>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d120      	bne.n	8002ad0 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8e:	4b25      	ldr	r3, [pc, #148]	@ (8002b24 <HAL_TIM_MspPostInit+0x198>)
 8002a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a94:	4a23      	ldr	r2, [pc, #140]	@ (8002b24 <HAL_TIM_MspPostInit+0x198>)
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a9e:	4b21      	ldr	r3, [pc, #132]	@ (8002b24 <HAL_TIM_MspPostInit+0x198>)
 8002aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002aac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	481a      	ldr	r0, [pc, #104]	@ (8002b34 <HAL_TIM_MspPostInit+0x1a8>)
 8002aca:	f004 fc4d 	bl	8007368 <HAL_GPIO_Init>
}
 8002ace:	e023      	b.n	8002b18 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a19      	ldr	r2, [pc, #100]	@ (8002b3c <HAL_TIM_MspPostInit+0x1b0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d11e      	bne.n	8002b18 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <HAL_TIM_MspPostInit+0x198>)
 8002adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ae0:	4a10      	ldr	r2, [pc, #64]	@ (8002b24 <HAL_TIM_MspPostInit+0x198>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002aea:	4b0e      	ldr	r3, [pc, #56]	@ (8002b24 <HAL_TIM_MspPostInit+0x198>)
 8002aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002af8:	2380      	movs	r3, #128	@ 0x80
 8002afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002b08:	2309      	movs	r3, #9
 8002b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0c:	f107 031c 	add.w	r3, r7, #28
 8002b10:	4619      	mov	r1, r3
 8002b12:	4806      	ldr	r0, [pc, #24]	@ (8002b2c <HAL_TIM_MspPostInit+0x1a0>)
 8002b14:	f004 fc28 	bl	8007368 <HAL_GPIO_Init>
}
 8002b18:	bf00      	nop
 8002b1a:	3730      	adds	r7, #48	@ 0x30
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40010000 	.word	0x40010000
 8002b24:	58024400 	.word	0x58024400
 8002b28:	58021000 	.word	0x58021000
 8002b2c:	58020000 	.word	0x58020000
 8002b30:	40000400 	.word	0x40000400
 8002b34:	58020400 	.word	0x58020400
 8002b38:	40000800 	.word	0x40000800
 8002b3c:	40002000 	.word	0x40002000

08002b40 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b0ba      	sub	sp, #232	@ 0xe8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b58:	f107 0310 	add.w	r3, r7, #16
 8002b5c:	22c0      	movs	r2, #192	@ 0xc0
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f016 fad6 	bl	8019112 <memset>
  if(huart->Instance==USART1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a43      	ldr	r2, [pc, #268]	@ (8002c78 <HAL_UART_MspInit+0x138>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d17e      	bne.n	8002c6e <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b70:	f04f 0201 	mov.w	r2, #1
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b82:	f107 0310 	add.w	r3, r7, #16
 8002b86:	4618      	mov	r0, r3
 8002b88:	f00b faa8 	bl	800e0dc <HAL_RCCEx_PeriphCLKConfig>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002b92:	f7ff fb41 	bl	8002218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b96:	4b39      	ldr	r3, [pc, #228]	@ (8002c7c <HAL_UART_MspInit+0x13c>)
 8002b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b9c:	4a37      	ldr	r2, [pc, #220]	@ (8002c7c <HAL_UART_MspInit+0x13c>)
 8002b9e:	f043 0310 	orr.w	r3, r3, #16
 8002ba2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ba6:	4b35      	ldr	r3, [pc, #212]	@ (8002c7c <HAL_UART_MspInit+0x13c>)
 8002ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb4:	4b31      	ldr	r3, [pc, #196]	@ (8002c7c <HAL_UART_MspInit+0x13c>)
 8002bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bba:	4a30      	ldr	r2, [pc, #192]	@ (8002c7c <HAL_UART_MspInit+0x13c>)
 8002bbc:	f043 0302 	orr.w	r3, r3, #2
 8002bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c7c <HAL_UART_MspInit+0x13c>)
 8002bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002bd2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002bec:	2304      	movs	r3, #4
 8002bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4821      	ldr	r0, [pc, #132]	@ (8002c80 <HAL_UART_MspInit+0x140>)
 8002bfa:	f004 fbb5 	bl	8007368 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 8002bfe:	4b21      	ldr	r3, [pc, #132]	@ (8002c84 <HAL_UART_MspInit+0x144>)
 8002c00:	4a21      	ldr	r2, [pc, #132]	@ (8002c88 <HAL_UART_MspInit+0x148>)
 8002c02:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002c04:	4b1f      	ldr	r3, [pc, #124]	@ (8002c84 <HAL_UART_MspInit+0x144>)
 8002c06:	2229      	movs	r2, #41	@ 0x29
 8002c08:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c84 <HAL_UART_MspInit+0x144>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c10:	4b1c      	ldr	r3, [pc, #112]	@ (8002c84 <HAL_UART_MspInit+0x144>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c16:	4b1b      	ldr	r3, [pc, #108]	@ (8002c84 <HAL_UART_MspInit+0x144>)
 8002c18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c1c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c1e:	4b19      	ldr	r3, [pc, #100]	@ (8002c84 <HAL_UART_MspInit+0x144>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c24:	4b17      	ldr	r3, [pc, #92]	@ (8002c84 <HAL_UART_MspInit+0x144>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002c2a:	4b16      	ldr	r3, [pc, #88]	@ (8002c84 <HAL_UART_MspInit+0x144>)
 8002c2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c30:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c32:	4b14      	ldr	r3, [pc, #80]	@ (8002c84 <HAL_UART_MspInit+0x144>)
 8002c34:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002c38:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c3a:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <HAL_UART_MspInit+0x144>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c40:	4810      	ldr	r0, [pc, #64]	@ (8002c84 <HAL_UART_MspInit+0x144>)
 8002c42:	f001 f897 	bl	8003d74 <HAL_DMA_Init>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8002c4c:	f7ff fae4 	bl	8002218 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a0c      	ldr	r2, [pc, #48]	@ (8002c84 <HAL_UART_MspInit+0x144>)
 8002c54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002c58:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <HAL_UART_MspInit+0x144>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2100      	movs	r1, #0
 8002c62:	2025      	movs	r0, #37	@ 0x25
 8002c64:	f000 fced 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c68:	2025      	movs	r0, #37	@ 0x25
 8002c6a:	f000 fd04 	bl	8003676 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002c6e:	bf00      	nop
 8002c70:	37e8      	adds	r7, #232	@ 0xe8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40011000 	.word	0x40011000
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	58020400 	.word	0x58020400
 8002c84:	24000830 	.word	0x24000830
 8002c88:	40020410 	.word	0x40020410

08002c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <NMI_Handler+0x4>

08002c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	SafeState();
 8002c98:	f7ff f876 	bl	8001d88 <SafeState>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c9c:	bf00      	nop
 8002c9e:	e7fd      	b.n	8002c9c <HardFault_Handler+0x8>

08002ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	SafeState();
 8002ca4:	f7ff f870 	bl	8001d88 <SafeState>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <MemManage_Handler+0x8>

08002cac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	SafeState();
 8002cb0:	f7ff f86a 	bl	8001d88 <SafeState>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <BusFault_Handler+0x8>

08002cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	SafeState();
 8002cbc:	f7ff f864 	bl	8001d88 <SafeState>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <UsageFault_Handler+0x8>

08002cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cf2:	f000 fb7b 	bl	80033ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002d00:	4802      	ldr	r0, [pc, #8]	@ (8002d0c <DMA1_Stream0_IRQHandler+0x10>)
 8002d02:	f002 fb61 	bl	80053c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	24000350 	.word	0x24000350

08002d10 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002d14:	4802      	ldr	r0, [pc, #8]	@ (8002d20 <I2C2_EV_IRQHandler+0x10>)
 8002d16:	f004 ff9b 	bl	8007c50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	240003c8 	.word	0x240003c8

08002d24 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002d28:	4802      	ldr	r0, [pc, #8]	@ (8002d34 <I2C2_ER_IRQHandler+0x10>)
 8002d2a:	f004 ffab 	bl	8007c84 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	240003c8 	.word	0x240003c8

08002d38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d3c:	4802      	ldr	r0, [pc, #8]	@ (8002d48 <USART1_IRQHandler+0x10>)
 8002d3e:	f00f fa6f 	bl	8012220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	2400079c 	.word	0x2400079c

08002d4c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002d50:	4802      	ldr	r0, [pc, #8]	@ (8002d5c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002d52:	f00e f891 	bl	8010e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	24000750 	.word	0x24000750

08002d60 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  NetworkTimeout();
 8002d64:	f7fe fb26 	bl	80013b4 <NetworkTimeout>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002d68:	4802      	ldr	r0, [pc, #8]	@ (8002d74 <TIM5_IRQHandler+0x14>)
 8002d6a:	f00e f885 	bl	8010e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	24000704 	.word	0x24000704

08002d78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d7c:	4802      	ldr	r0, [pc, #8]	@ (8002d88 <DMA2_Stream0_IRQHandler+0x10>)
 8002d7e:	f002 fb23 	bl	80053c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	24000830 	.word	0x24000830

08002d8c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002d90:	4802      	ldr	r0, [pc, #8]	@ (8002d9c <DCMI_IRQHandler+0x10>)
 8002d92:	f000 fe9f 	bl	8003ad4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	24000300 	.word	0x24000300

08002da0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002da4:	4802      	ldr	r0, [pc, #8]	@ (8002db0 <OTG_FS_IRQHandler+0x10>)
 8002da6:	f009 f80a 	bl	800bdbe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	24027244 	.word	0x24027244

08002db4 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002db8:	4802      	ldr	r0, [pc, #8]	@ (8002dc4 <JPEG_IRQHandler+0x10>)
 8002dba:	f006 fd26 	bl	800980a <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	2400041c 	.word	0x2400041c

08002dc8 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8002dcc:	4803      	ldr	r0, [pc, #12]	@ (8002ddc <MDMA_IRQHandler+0x14>)
 8002dce:	f008 fc59 	bl	800b684 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8002dd2:	4803      	ldr	r0, [pc, #12]	@ (8002de0 <MDMA_IRQHandler+0x18>)
 8002dd4:	f008 fc56 	bl	800b684 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	24000474 	.word	0x24000474
 8002de0:	240004e0 	.word	0x240004e0

08002de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return 1;
 8002de8:	2301      	movs	r3, #1
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <_kill>:

int _kill(int pid, int sig)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dfe:	f016 f9eb 	bl	80191d8 <__errno>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2216      	movs	r2, #22
 8002e06:	601a      	str	r2, [r3, #0]
  return -1;
 8002e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_exit>:

void _exit (int status)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ffe7 	bl	8002df4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e26:	bf00      	nop
 8002e28:	e7fd      	b.n	8002e26 <_exit+0x12>

08002e2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b086      	sub	sp, #24
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e00a      	b.n	8002e52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e3c:	f3af 8000 	nop.w
 8002e40:	4601      	mov	r1, r0
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	60ba      	str	r2, [r7, #8]
 8002e48:	b2ca      	uxtb	r2, r1
 8002e4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	dbf0      	blt.n	8002e3c <_read+0x12>
  }

  return len;
 8002e5a:	687b      	ldr	r3, [r7, #4]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	e009      	b.n	8002e8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	60ba      	str	r2, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3301      	adds	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	dbf1      	blt.n	8002e76 <_write+0x12>
  }
  return len;
 8002e92:	687b      	ldr	r3, [r7, #4]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <_close>:

int _close(int file)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ec4:	605a      	str	r2, [r3, #4]
  return 0;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <_isatty>:

int _isatty(int file)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002edc:	2301      	movs	r3, #1
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b085      	sub	sp, #20
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f0c:	4a14      	ldr	r2, [pc, #80]	@ (8002f60 <_sbrk+0x5c>)
 8002f0e:	4b15      	ldr	r3, [pc, #84]	@ (8002f64 <_sbrk+0x60>)
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f18:	4b13      	ldr	r3, [pc, #76]	@ (8002f68 <_sbrk+0x64>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f20:	4b11      	ldr	r3, [pc, #68]	@ (8002f68 <_sbrk+0x64>)
 8002f22:	4a12      	ldr	r2, [pc, #72]	@ (8002f6c <_sbrk+0x68>)
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f26:	4b10      	ldr	r3, [pc, #64]	@ (8002f68 <_sbrk+0x64>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d207      	bcs.n	8002f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f34:	f016 f950 	bl	80191d8 <__errno>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f42:	e009      	b.n	8002f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f44:	4b08      	ldr	r3, [pc, #32]	@ (8002f68 <_sbrk+0x64>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f4a:	4b07      	ldr	r3, [pc, #28]	@ (8002f68 <_sbrk+0x64>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	4a05      	ldr	r2, [pc, #20]	@ (8002f68 <_sbrk+0x64>)
 8002f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	24080000 	.word	0x24080000
 8002f64:	00000400 	.word	0x00000400
 8002f68:	24025d58 	.word	0x24025d58
 8002f6c:	24027a98 	.word	0x24027a98

08002f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f74:	4b43      	ldr	r3, [pc, #268]	@ (8003084 <SystemInit+0x114>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7a:	4a42      	ldr	r2, [pc, #264]	@ (8003084 <SystemInit+0x114>)
 8002f7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f84:	4b40      	ldr	r3, [pc, #256]	@ (8003088 <SystemInit+0x118>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	2b06      	cmp	r3, #6
 8002f8e:	d807      	bhi.n	8002fa0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f90:	4b3d      	ldr	r3, [pc, #244]	@ (8003088 <SystemInit+0x118>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 030f 	bic.w	r3, r3, #15
 8002f98:	4a3b      	ldr	r2, [pc, #236]	@ (8003088 <SystemInit+0x118>)
 8002f9a:	f043 0307 	orr.w	r3, r3, #7
 8002f9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800308c <SystemInit+0x11c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a39      	ldr	r2, [pc, #228]	@ (800308c <SystemInit+0x11c>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002fac:	4b37      	ldr	r3, [pc, #220]	@ (800308c <SystemInit+0x11c>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002fb2:	4b36      	ldr	r3, [pc, #216]	@ (800308c <SystemInit+0x11c>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4935      	ldr	r1, [pc, #212]	@ (800308c <SystemInit+0x11c>)
 8002fb8:	4b35      	ldr	r3, [pc, #212]	@ (8003090 <SystemInit+0x120>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002fbe:	4b32      	ldr	r3, [pc, #200]	@ (8003088 <SystemInit+0x118>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002fca:	4b2f      	ldr	r3, [pc, #188]	@ (8003088 <SystemInit+0x118>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 030f 	bic.w	r3, r3, #15
 8002fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8003088 <SystemInit+0x118>)
 8002fd4:	f043 0307 	orr.w	r3, r3, #7
 8002fd8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002fda:	4b2c      	ldr	r3, [pc, #176]	@ (800308c <SystemInit+0x11c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800308c <SystemInit+0x11c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002fe6:	4b29      	ldr	r3, [pc, #164]	@ (800308c <SystemInit+0x11c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002fec:	4b27      	ldr	r3, [pc, #156]	@ (800308c <SystemInit+0x11c>)
 8002fee:	4a29      	ldr	r2, [pc, #164]	@ (8003094 <SystemInit+0x124>)
 8002ff0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ff2:	4b26      	ldr	r3, [pc, #152]	@ (800308c <SystemInit+0x11c>)
 8002ff4:	4a28      	ldr	r2, [pc, #160]	@ (8003098 <SystemInit+0x128>)
 8002ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ff8:	4b24      	ldr	r3, [pc, #144]	@ (800308c <SystemInit+0x11c>)
 8002ffa:	4a28      	ldr	r2, [pc, #160]	@ (800309c <SystemInit+0x12c>)
 8002ffc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ffe:	4b23      	ldr	r3, [pc, #140]	@ (800308c <SystemInit+0x11c>)
 8003000:	2200      	movs	r2, #0
 8003002:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003004:	4b21      	ldr	r3, [pc, #132]	@ (800308c <SystemInit+0x11c>)
 8003006:	4a25      	ldr	r2, [pc, #148]	@ (800309c <SystemInit+0x12c>)
 8003008:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800300a:	4b20      	ldr	r3, [pc, #128]	@ (800308c <SystemInit+0x11c>)
 800300c:	2200      	movs	r2, #0
 800300e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003010:	4b1e      	ldr	r3, [pc, #120]	@ (800308c <SystemInit+0x11c>)
 8003012:	4a22      	ldr	r2, [pc, #136]	@ (800309c <SystemInit+0x12c>)
 8003014:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003016:	4b1d      	ldr	r3, [pc, #116]	@ (800308c <SystemInit+0x11c>)
 8003018:	2200      	movs	r2, #0
 800301a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800301c:	4b1b      	ldr	r3, [pc, #108]	@ (800308c <SystemInit+0x11c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1a      	ldr	r2, [pc, #104]	@ (800308c <SystemInit+0x11c>)
 8003022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003026:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003028:	4b18      	ldr	r3, [pc, #96]	@ (800308c <SystemInit+0x11c>)
 800302a:	2200      	movs	r2, #0
 800302c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800302e:	4b1c      	ldr	r3, [pc, #112]	@ (80030a0 <SystemInit+0x130>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4b1c      	ldr	r3, [pc, #112]	@ (80030a4 <SystemInit+0x134>)
 8003034:	4013      	ands	r3, r2
 8003036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800303a:	d202      	bcs.n	8003042 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800303c:	4b1a      	ldr	r3, [pc, #104]	@ (80030a8 <SystemInit+0x138>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8003042:	4b12      	ldr	r3, [pc, #72]	@ (800308c <SystemInit+0x11c>)
 8003044:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003048:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d113      	bne.n	8003078 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003050:	4b0e      	ldr	r3, [pc, #56]	@ (800308c <SystemInit+0x11c>)
 8003052:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003056:	4a0d      	ldr	r2, [pc, #52]	@ (800308c <SystemInit+0x11c>)
 8003058:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800305c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003060:	4b12      	ldr	r3, [pc, #72]	@ (80030ac <SystemInit+0x13c>)
 8003062:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003066:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003068:	4b08      	ldr	r3, [pc, #32]	@ (800308c <SystemInit+0x11c>)
 800306a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800306e:	4a07      	ldr	r2, [pc, #28]	@ (800308c <SystemInit+0x11c>)
 8003070:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003074:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000ed00 	.word	0xe000ed00
 8003088:	52002000 	.word	0x52002000
 800308c:	58024400 	.word	0x58024400
 8003090:	eaf6ed7f 	.word	0xeaf6ed7f
 8003094:	02020200 	.word	0x02020200
 8003098:	01ff0000 	.word	0x01ff0000
 800309c:	01010280 	.word	0x01010280
 80030a0:	5c001000 	.word	0x5c001000
 80030a4:	ffff0000 	.word	0xffff0000
 80030a8:	51008108 	.word	0x51008108
 80030ac:	52004000 	.word	0x52004000

080030b0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80030b4:	4b09      	ldr	r3, [pc, #36]	@ (80030dc <ExitRun0Mode+0x2c>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4a08      	ldr	r2, [pc, #32]	@ (80030dc <ExitRun0Mode+0x2c>)
 80030ba:	f043 0302 	orr.w	r3, r3, #2
 80030be:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80030c0:	bf00      	nop
 80030c2:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <ExitRun0Mode+0x2c>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f9      	beq.n	80030c2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80030ce:	bf00      	nop
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	58024800 	.word	0x58024800

080030e0 <Reset_Handler>:
 80030e0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800311c <LoopFillZerobss+0xe>
 80030e4:	f7ff ffe4 	bl	80030b0 <ExitRun0Mode>
 80030e8:	f7ff ff42 	bl	8002f70 <SystemInit>
 80030ec:	480c      	ldr	r0, [pc, #48]	@ (8003120 <LoopFillZerobss+0x12>)
 80030ee:	490d      	ldr	r1, [pc, #52]	@ (8003124 <LoopFillZerobss+0x16>)
 80030f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003128 <LoopFillZerobss+0x1a>)
 80030f2:	2300      	movs	r3, #0
 80030f4:	e002      	b.n	80030fc <LoopCopyDataInit>

080030f6 <CopyDataInit>:
 80030f6:	58d4      	ldr	r4, [r2, r3]
 80030f8:	50c4      	str	r4, [r0, r3]
 80030fa:	3304      	adds	r3, #4

080030fc <LoopCopyDataInit>:
 80030fc:	18c4      	adds	r4, r0, r3
 80030fe:	428c      	cmp	r4, r1
 8003100:	d3f9      	bcc.n	80030f6 <CopyDataInit>
 8003102:	4a0a      	ldr	r2, [pc, #40]	@ (800312c <LoopFillZerobss+0x1e>)
 8003104:	4c0a      	ldr	r4, [pc, #40]	@ (8003130 <LoopFillZerobss+0x22>)
 8003106:	2300      	movs	r3, #0
 8003108:	e001      	b.n	800310e <LoopFillZerobss>

0800310a <FillZerobss>:
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	3204      	adds	r2, #4

0800310e <LoopFillZerobss>:
 800310e:	42a2      	cmp	r2, r4
 8003110:	d3fb      	bcc.n	800310a <FillZerobss>
 8003112:	f016 f867 	bl	80191e4 <__libc_init_array>
 8003116:	f7fd fae7 	bl	80006e8 <main>
 800311a:	4770      	bx	lr
 800311c:	24080000 	.word	0x24080000
 8003120:	24000000 	.word	0x24000000
 8003124:	240002e4 	.word	0x240002e4
 8003128:	0801b944 	.word	0x0801b944
 800312c:	240002e4 	.word	0x240002e4
 8003130:	24027a94 	.word	0x24027a94

08003134 <ADC3_IRQHandler>:
 8003134:	e7fe      	b.n	8003134 <ADC3_IRQHandler>

08003136 <INA229_ReadRegister>:
// ------------------------------------------------------------------------------------

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t INA229_ReadRegister(INA229_HandleTypeDef *ina229, uint8_t addr, uint8_t *pRead, uint8_t len) {
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	461a      	mov	r2, r3
 8003142:	460b      	mov	r3, r1
 8003144:	72fb      	strb	r3, [r7, #11]
 8003146:	4613      	mov	r3, r2
 8003148:	72bb      	strb	r3, [r7, #10]
	// A5 A4 A3 A2 A1 A0 XX RR
	uint8_t dataToWrite = (addr << 2) | 0b1;
 800314a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	b25b      	sxtb	r3, r3
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	b25b      	sxtb	r3, r3
 8003158:	b2db      	uxtb	r3, r3
 800315a:	75bb      	strb	r3, [r7, #22]
	uint8_t ret = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	75fb      	strb	r3, [r7, #23]

	// Assert the CS low
	HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_RESET);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6858      	ldr	r0, [r3, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	891b      	ldrh	r3, [r3, #8]
 8003168:	2200      	movs	r2, #0
 800316a:	4619      	mov	r1, r3
 800316c:	f004 faac 	bl	80076c8 <HAL_GPIO_WritePin>

	ret = HAL_SPI_Transmit(ina229->spi_handle, &dataToWrite, 1, 100);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	f107 0116 	add.w	r1, r7, #22
 8003178:	2364      	movs	r3, #100	@ 0x64
 800317a:	2201      	movs	r2, #1
 800317c:	f00c fefe 	bl	800ff7c <HAL_SPI_Transmit>
 8003180:	4603      	mov	r3, r0
 8003182:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <INA229_ReadRegister+0x68>
		// Release the CS
		HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6858      	ldr	r0, [r3, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	891b      	ldrh	r3, [r3, #8]
 8003192:	2201      	movs	r2, #1
 8003194:	4619      	mov	r1, r3
 8003196:	f004 fa97 	bl	80076c8 <HAL_GPIO_WritePin>
		return ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e01f      	b.n	80031de <INA229_ReadRegister+0xa8>
	}

	ret = HAL_SPI_Receive(ina229->spi_handle, pRead, len, 100);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	7abb      	ldrb	r3, [r7, #10]
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	2364      	movs	r3, #100	@ 0x64
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	f00d f8d5 	bl	8010358 <HAL_SPI_Receive>
 80031ae:	4603      	mov	r3, r0
 80031b0:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d009      	beq.n	80031cc <INA229_ReadRegister+0x96>
		// Release the CS
		HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6858      	ldr	r0, [r3, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	891b      	ldrh	r3, [r3, #8]
 80031c0:	2201      	movs	r2, #1
 80031c2:	4619      	mov	r1, r3
 80031c4:	f004 fa80 	bl	80076c8 <HAL_GPIO_WritePin>
		return  ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e008      	b.n	80031de <INA229_ReadRegister+0xa8>
	}

	// Release the CS
	HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6858      	ldr	r0, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	891b      	ldrh	r3, [r3, #8]
 80031d4:	2201      	movs	r2, #1
 80031d6:	4619      	mov	r1, r3
 80031d8:	f004 fa76 	bl	80076c8 <HAL_GPIO_WritePin>

	return SUCCESS;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <INA229_Init>:
	HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);

	return SUCCESS;
}

uint8_t INA229_Init(INA229_HandleTypeDef *ina229) {
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
	// SHUNT_CAL = 0x1000 at start, this is correct for R_shunt of 0.002 OHMs

	//uint8_t readVal[2];
	//INA229_ReadRegister(ina229, 0x01, readVal, 2);

	return SUCCESS;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <Register24_Int32>:

uint32_t Register24_Int32(uint8_t* pData) {
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	uint32_t out = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]
	// Switch endianess from result
	out |= (uint32_t)(pData[2]);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3302      	adds	r3, #2
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
	out |= (uint32_t)(pData[1]) << 8;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3301      	adds	r3, #1
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
	out |= (uint32_t)(pData[0]) << 16;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]

	return out;
 8003230:	68fb      	ldr	r3, [r7, #12]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <INA229_Get>:

uint8_t INA229_Get(INA229_HandleTypeDef *ina229) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	// Get all the power variables
	uint8_t ret = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	77fb      	strb	r3, [r7, #31]

	// ----- VOLTAGE ----- //

	// Get the VBUS register value, 24 bit
	uint8_t vbus_reg[3];
	ret = INA229_ReadRegister(ina229, 0x05, vbus_reg, 3);
 800324c:	f107 020c 	add.w	r2, r7, #12
 8003250:	2303      	movs	r3, #3
 8003252:	2105      	movs	r1, #5
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff6e 	bl	8003136 <INA229_ReadRegister>
 800325a:	4603      	mov	r3, r0
 800325c:	77fb      	strb	r3, [r7, #31]

	// Covnert register raw to uint
	uint32_t vbus_raw = Register24_Int32(vbus_reg);
 800325e:	f107 030c 	add.w	r3, r7, #12
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ffca 	bl	80031fc <Register24_Int32>
 8003268:	61b8      	str	r0, [r7, #24]
	vbus_raw >>= 4;	// Shift out the reserved bits
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	61bb      	str	r3, [r7, #24]

	// Conversion factor
	ina229->voltage = vbus_raw * 0.0001953125;
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800327a:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 80032f8 <INA229_Get+0xb8>
 800327e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003282:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	edc3 7a03 	vstr	s15, [r3, #12]

	// ----- CURRENT ----- //

	// Get the VBUS register value, 24 bit
	uint8_t cur_reg[3];
	ret = INA229_ReadRegister(ina229, 0x07, cur_reg, 3);
 800328c:	f107 0208 	add.w	r2, r7, #8
 8003290:	2303      	movs	r3, #3
 8003292:	2107      	movs	r1, #7
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff ff4e 	bl	8003136 <INA229_ReadRegister>
 800329a:	4603      	mov	r3, r0
 800329c:	77fb      	strb	r3, [r7, #31]

	// Covnert register raw to uint
	uint32_t cur_raw = Register24_Int32(cur_reg);
 800329e:	f107 0308 	add.w	r3, r7, #8
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff ffaa 	bl	80031fc <Register24_Int32>
 80032a8:	6178      	str	r0, [r7, #20]

	int32_t cur_signed = (cur_raw << 8) | 0b111111111111;	// Pad LSBs with 1's for 2's compliment to be acurate
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	021a      	lsls	r2, r3, #8
 80032ae:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
	cur_signed /= 4096;										// Shift out the reserved bits while respecting negativity (equiv. >> 12)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	da01      	bge.n	80032c0 <INA229_Get+0x80>
 80032bc:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80032c0:	131b      	asrs	r3, r3, #12
 80032c2:	613b      	str	r3, [r7, #16]

	// Conversion factor
	ina229->current = cur_signed * 0.00015625;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80032ce:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8003300 <INA229_Get+0xc0>
 80032d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80032d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	edc3 7a04 	vstr	s15, [r3, #16]

	if (ret) return ret;
 80032e0:	7ffb      	ldrb	r3, [r7, #31]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <INA229_Get+0xaa>
 80032e6:	7ffb      	ldrb	r3, [r7, #31]
 80032e8:	e7ff      	b.n	80032ea <INA229_Get+0xaa>
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3720      	adds	r7, #32
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	f3af 8000 	nop.w
 80032f8:	9999999a 	.word	0x9999999a
 80032fc:	3f299999 	.word	0x3f299999
 8003300:	47ae147b 	.word	0x47ae147b
 8003304:	3f247ae1 	.word	0x3f247ae1

08003308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800330e:	2003      	movs	r0, #3
 8003310:	f000 f98c 	bl	800362c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003314:	f00a fd0c 	bl	800dd30 <HAL_RCC_GetSysClockFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b15      	ldr	r3, [pc, #84]	@ (8003370 <HAL_Init+0x68>)
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	0a1b      	lsrs	r3, r3, #8
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	4913      	ldr	r1, [pc, #76]	@ (8003374 <HAL_Init+0x6c>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
 8003330:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003332:	4b0f      	ldr	r3, [pc, #60]	@ (8003370 <HAL_Init+0x68>)
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	4a0e      	ldr	r2, [pc, #56]	@ (8003374 <HAL_Init+0x6c>)
 800333c:	5cd3      	ldrb	r3, [r2, r3]
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
 8003348:	4a0b      	ldr	r2, [pc, #44]	@ (8003378 <HAL_Init+0x70>)
 800334a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800334c:	4a0b      	ldr	r2, [pc, #44]	@ (800337c <HAL_Init+0x74>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003352:	200f      	movs	r0, #15
 8003354:	f000 f814 	bl	8003380 <HAL_InitTick>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e002      	b.n	8003368 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003362:	f7fe ff5f 	bl	8002224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	58024400 	.word	0x58024400
 8003374:	0801b31c 	.word	0x0801b31c
 8003378:	2400001c 	.word	0x2400001c
 800337c:	24000018 	.word	0x24000018

08003380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003388:	4b15      	ldr	r3, [pc, #84]	@ (80033e0 <HAL_InitTick+0x60>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e021      	b.n	80033d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003394:	4b13      	ldr	r3, [pc, #76]	@ (80033e4 <HAL_InitTick+0x64>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b11      	ldr	r3, [pc, #68]	@ (80033e0 <HAL_InitTick+0x60>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f971 	bl	8003692 <HAL_SYSTICK_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e00e      	b.n	80033d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b0f      	cmp	r3, #15
 80033be:	d80a      	bhi.n	80033d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033c0:	2200      	movs	r2, #0
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295
 80033c8:	f000 f93b 	bl	8003642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033cc:	4a06      	ldr	r2, [pc, #24]	@ (80033e8 <HAL_InitTick+0x68>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e000      	b.n	80033d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	24000024 	.word	0x24000024
 80033e4:	24000018 	.word	0x24000018
 80033e8:	24000020 	.word	0x24000020

080033ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033f0:	4b06      	ldr	r3, [pc, #24]	@ (800340c <HAL_IncTick+0x20>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b06      	ldr	r3, [pc, #24]	@ (8003410 <HAL_IncTick+0x24>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4413      	add	r3, r2
 80033fc:	4a04      	ldr	r2, [pc, #16]	@ (8003410 <HAL_IncTick+0x24>)
 80033fe:	6013      	str	r3, [r2, #0]
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	24000024 	.word	0x24000024
 8003410:	24025d5c 	.word	0x24025d5c

08003414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return uwTick;
 8003418:	4b03      	ldr	r3, [pc, #12]	@ (8003428 <HAL_GetTick+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	24025d5c 	.word	0x24025d5c

0800342c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff ffee 	bl	8003414 <HAL_GetTick>
 8003438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d005      	beq.n	8003452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003446:	4b0a      	ldr	r3, [pc, #40]	@ (8003470 <HAL_Delay+0x44>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003452:	bf00      	nop
 8003454:	f7ff ffde 	bl	8003414 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	429a      	cmp	r2, r3
 8003462:	d8f7      	bhi.n	8003454 <HAL_Delay+0x28>
  {
  }
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	24000024 	.word	0x24000024

08003474 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003478:	4b03      	ldr	r3, [pc, #12]	@ (8003488 <HAL_GetREVID+0x14>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	0c1b      	lsrs	r3, r3, #16
}
 800347e:	4618      	mov	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	5c001000 	.word	0x5c001000

0800348c <__NVIC_SetPriorityGrouping>:
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800349c:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <__NVIC_SetPriorityGrouping+0x40>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034a8:	4013      	ands	r3, r2
 80034aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034b4:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <__NVIC_SetPriorityGrouping+0x44>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ba:	4a04      	ldr	r2, [pc, #16]	@ (80034cc <__NVIC_SetPriorityGrouping+0x40>)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	60d3      	str	r3, [r2, #12]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000ed00 	.word	0xe000ed00
 80034d0:	05fa0000 	.word	0x05fa0000

080034d4 <__NVIC_GetPriorityGrouping>:
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d8:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <__NVIC_GetPriorityGrouping+0x18>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	f003 0307 	and.w	r3, r3, #7
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <__NVIC_EnableIRQ>:
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	db0b      	blt.n	800351a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	f003 021f 	and.w	r2, r3, #31
 8003508:	4907      	ldr	r1, [pc, #28]	@ (8003528 <__NVIC_EnableIRQ+0x38>)
 800350a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2001      	movs	r0, #1
 8003512:	fa00 f202 	lsl.w	r2, r0, r2
 8003516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000e100 	.word	0xe000e100

0800352c <__NVIC_SetPriority>:
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800353c:	2b00      	cmp	r3, #0
 800353e:	db0a      	blt.n	8003556 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	490c      	ldr	r1, [pc, #48]	@ (8003578 <__NVIC_SetPriority+0x4c>)
 8003546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800354a:	0112      	lsls	r2, r2, #4
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	440b      	add	r3, r1
 8003550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003554:	e00a      	b.n	800356c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	4908      	ldr	r1, [pc, #32]	@ (800357c <__NVIC_SetPriority+0x50>)
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	3b04      	subs	r3, #4
 8003564:	0112      	lsls	r2, r2, #4
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	440b      	add	r3, r1
 800356a:	761a      	strb	r2, [r3, #24]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000e100 	.word	0xe000e100
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <NVIC_EncodePriority>:
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	@ 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f1c3 0307 	rsb	r3, r3, #7
 800359a:	2b04      	cmp	r3, #4
 800359c:	bf28      	it	cs
 800359e:	2304      	movcs	r3, #4
 80035a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d902      	bls.n	80035b0 <NVIC_EncodePriority+0x30>
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3b03      	subs	r3, #3
 80035ae:	e000      	b.n	80035b2 <NVIC_EncodePriority+0x32>
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b4:	f04f 32ff 	mov.w	r2, #4294967295
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	401a      	ands	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c8:	f04f 31ff 	mov.w	r1, #4294967295
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	43d9      	mvns	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	4313      	orrs	r3, r2
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3724      	adds	r7, #36	@ 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f8:	d301      	bcc.n	80035fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fa:	2301      	movs	r3, #1
 80035fc:	e00f      	b.n	800361e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003628 <SysTick_Config+0x40>)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3b01      	subs	r3, #1
 8003604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003606:	210f      	movs	r1, #15
 8003608:	f04f 30ff 	mov.w	r0, #4294967295
 800360c:	f7ff ff8e 	bl	800352c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003610:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <SysTick_Config+0x40>)
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003616:	4b04      	ldr	r3, [pc, #16]	@ (8003628 <SysTick_Config+0x40>)
 8003618:	2207      	movs	r2, #7
 800361a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	e000e010 	.word	0xe000e010

0800362c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ff29 	bl	800348c <__NVIC_SetPriorityGrouping>
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b086      	sub	sp, #24
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003650:	f7ff ff40 	bl	80034d4 <__NVIC_GetPriorityGrouping>
 8003654:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	6978      	ldr	r0, [r7, #20]
 800365c:	f7ff ff90 	bl	8003580 <NVIC_EncodePriority>
 8003660:	4602      	mov	r2, r0
 8003662:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff5f 	bl	800352c <__NVIC_SetPriority>
}
 800366e:	bf00      	nop
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	4603      	mov	r3, r0
 800367e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff33 	bl	80034f0 <__NVIC_EnableIRQ>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff ffa4 	bl	80035e8 <SysTick_Config>
 80036a0:	4603      	mov	r3, r0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80036b0:	f3bf 8f5f 	dmb	sy
}
 80036b4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80036b6:	4b07      	ldr	r3, [pc, #28]	@ (80036d4 <HAL_MPU_Disable+0x28>)
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	4a06      	ldr	r2, [pc, #24]	@ (80036d4 <HAL_MPU_Disable+0x28>)
 80036bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80036c2:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <HAL_MPU_Disable+0x2c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	605a      	str	r2, [r3, #4]
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	e000ed00 	.word	0xe000ed00
 80036d8:	e000ed90 	.word	0xe000ed90

080036dc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80036e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003714 <HAL_MPU_Enable+0x38>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80036ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <HAL_MPU_Enable+0x3c>)
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	4a09      	ldr	r2, [pc, #36]	@ (8003718 <HAL_MPU_Enable+0x3c>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80036fa:	f3bf 8f4f 	dsb	sy
}
 80036fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003700:	f3bf 8f6f 	isb	sy
}
 8003704:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	e000ed90 	.word	0xe000ed90
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	785a      	ldrb	r2, [r3, #1]
 8003728:	4b1b      	ldr	r3, [pc, #108]	@ (8003798 <HAL_MPU_ConfigRegion+0x7c>)
 800372a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800372c:	4b1a      	ldr	r3, [pc, #104]	@ (8003798 <HAL_MPU_ConfigRegion+0x7c>)
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	4a19      	ldr	r2, [pc, #100]	@ (8003798 <HAL_MPU_ConfigRegion+0x7c>)
 8003732:	f023 0301 	bic.w	r3, r3, #1
 8003736:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003738:	4a17      	ldr	r2, [pc, #92]	@ (8003798 <HAL_MPU_ConfigRegion+0x7c>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7b1b      	ldrb	r3, [r3, #12]
 8003744:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	7adb      	ldrb	r3, [r3, #11]
 800374a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800374c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	7a9b      	ldrb	r3, [r3, #10]
 8003752:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003754:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7b5b      	ldrb	r3, [r3, #13]
 800375a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800375c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7b9b      	ldrb	r3, [r3, #14]
 8003762:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003764:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7bdb      	ldrb	r3, [r3, #15]
 800376a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800376c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7a5b      	ldrb	r3, [r3, #9]
 8003772:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003774:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7a1b      	ldrb	r3, [r3, #8]
 800377a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800377c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	7812      	ldrb	r2, [r2, #0]
 8003782:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003784:	4a04      	ldr	r2, [pc, #16]	@ (8003798 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003786:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003788:	6113      	str	r3, [r2, #16]
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	e000ed90 	.word	0xe000ed90

0800379c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e069      	b.n	8003882 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fe fd4c 	bl	8002258 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6819      	ldr	r1, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b2a      	ldr	r3, [pc, #168]	@ (800388c <HAL_DCMI_Init+0xf0>)
 80037e2:	400b      	ands	r3, r1
 80037e4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6819      	ldr	r1, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80037fa:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003806:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003812:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800381e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003824:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800382a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b10      	cmp	r3, #16
 800383a:	d112      	bne.n	8003862 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	7f1b      	ldrb	r3, [r3, #28]
 8003840:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	7f5b      	ldrb	r3, [r3, #29]
 8003846:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003848:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	7f9b      	ldrb	r3, [r3, #30]
 800384e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003850:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	7fdb      	ldrb	r3, [r3, #31]
 8003858:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800385e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003860:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 021e 	orr.w	r2, r2, #30
 8003870:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	ffe0f007 	.word	0xffe0f007

08003890 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_DCMI_Start_DMA+0x1c>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e0ab      	b.n	8003a04 <HAL_DCMI_Start_DMA+0x174>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038ca:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0202 	bic.w	r2, r2, #2
 80038da:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6819      	ldr	r1, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f0:	4a46      	ldr	r2, [pc, #280]	@ (8003a0c <HAL_DCMI_Start_DMA+0x17c>)
 80038f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f8:	4a45      	ldr	r2, [pc, #276]	@ (8003a10 <HAL_DCMI_Start_DMA+0x180>)
 80038fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003900:	2200      	movs	r2, #0
 8003902:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003922:	d219      	bcs.n	8003958 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3328      	adds	r3, #40	@ 0x28
 800392e:	4619      	mov	r1, r3
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	f000 fd7a 	bl	800442c <HAL_DMA_Start_IT>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d055      	beq.n	80039ea <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2240      	movs	r2, #64	@ 0x40
 8003942:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e055      	b.n	8003a04 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a0c <HAL_DCMI_Start_DMA+0x17c>)
 800395e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8003972:	e009      	b.n	8003988 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003978:	085a      	lsrs	r2, r3, #1
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003982:	005a      	lsls	r2, r3, #1
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003990:	d2f0      	bcs.n	8003974 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003996:	1e9a      	subs	r2, r3, #2
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3328      	adds	r3, #40	@ 0x28
 80039ba:	4619      	mov	r1, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	f003 f81f 	bl	8006a08 <HAL_DMAEx_MultiBufferStart_IT>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00c      	beq.n	80039ea <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2240      	movs	r2, #64	@ 0x40
 80039d4:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e00c      	b.n	8003a04 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 0201 	orr.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	08003c15 	.word	0x08003c15
 8003a10:	08003d3b 	.word	0x08003d3b

08003a14 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8003a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003acc <HAL_DCMI_Stop+0xb8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a2b      	ldr	r2, [pc, #172]	@ (8003ad0 <HAL_DCMI_Stop+0xbc>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	0a5b      	lsrs	r3, r3, #9
 8003a28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a2c:	fb02 f303 	mul.w	r3, r2, r3
 8003a30:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_DCMI_Stop+0x30>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e03f      	b.n	8003ac4 <HAL_DCMI_Stop+0xb0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d108      	bne.n	8003a82 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a74:	f043 0220 	orr.w	r2, r3, #32
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	72fb      	strb	r3, [r7, #11]
      break;
 8003a80:	e006      	b.n	8003a90 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e9      	bne.n	8003a64 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a9e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 ff2b 	bl	8004900 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8003ac2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	24000018 	.word	0x24000018
 8003ad0:	10624dd3 	.word	0x10624dd3

08003ad4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d016      	beq.n	8003b1c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2204      	movs	r2, #4
 8003af4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afa:	f043 0202 	orr.w	r2, r3, #2
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2204      	movs	r2, #4
 8003b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b0e:	4a31      	ldr	r2, [pc, #196]	@ (8003bd4 <HAL_DCMI_IRQHandler+0x100>)
 8003b10:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b16:	4618      	mov	r0, r3
 8003b18:	f001 fa10 	bl	8004f3c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d016      	beq.n	8003b54 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b32:	f043 0201 	orr.w	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b46:	4a23      	ldr	r2, [pc, #140]	@ (8003bd4 <HAL_DCMI_IRQHandler+0x100>)
 8003b48:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f001 f9f4 	bl	8004f3c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d006      	beq.n	8003b6c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2210      	movs	r2, #16
 8003b64:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f840 	bl	8003bec <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d006      	beq.n	8003b84 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fe f82e 	bl	8001be0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01d      	beq.n	8003bca <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d107      	bne.n	8003bac <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 021e 	bic.w	r2, r2, #30
 8003baa:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f81b 	bl	8003c00 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	08003d3b 	.word	0x08003d3b

08003bd8 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c20:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d043      	beq.n	8003cb2 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c36:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d118      	bne.n	8003c76 <DCMI_DMAXferCplt+0x62>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d015      	beq.n	8003c76 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5c:	00da      	lsls	r2, r3, #3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4413      	add	r3, r2
 8003c62:	2200      	movs	r2, #0
 8003c64:	4619      	mov	r1, r3
 8003c66:	f003 fa2d 	bl	80070c4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6e:	1e5a      	subs	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c74:	e044      	b.n	8003d00 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d13c      	bne.n	8003d00 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c98:	00da      	lsls	r2, r3, #3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f003 fa0f 	bl	80070c4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003caa:	1e5a      	subs	r2, r3, #1
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	639a      	str	r2, [r3, #56]	@ 0x38
 8003cb0:	e026      	b.n	8003d00 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d006      	beq.n	8003cd0 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003ccc:	60da      	str	r2, [r3, #12]
 8003cce:	e017      	b.n	8003d00 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10f      	bne.n	8003d00 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce4:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cea:	0099      	lsls	r1, r3, #2
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	440a      	add	r2, r1
 8003cf6:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d112      	bne.n	8003d32 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d103      	bne.n	8003d32 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d46:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d009      	beq.n	8003d66 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f7ff ff36 	bl	8003bd8 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8003d6c:	bf00      	nop
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003d7c:	f7ff fb4a 	bl	8003414 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e316      	b.n	80043ba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a66      	ldr	r2, [pc, #408]	@ (8003f2c <HAL_DMA_Init+0x1b8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d04a      	beq.n	8003e2c <HAL_DMA_Init+0xb8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a65      	ldr	r2, [pc, #404]	@ (8003f30 <HAL_DMA_Init+0x1bc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d045      	beq.n	8003e2c <HAL_DMA_Init+0xb8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a63      	ldr	r2, [pc, #396]	@ (8003f34 <HAL_DMA_Init+0x1c0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d040      	beq.n	8003e2c <HAL_DMA_Init+0xb8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a62      	ldr	r2, [pc, #392]	@ (8003f38 <HAL_DMA_Init+0x1c4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d03b      	beq.n	8003e2c <HAL_DMA_Init+0xb8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a60      	ldr	r2, [pc, #384]	@ (8003f3c <HAL_DMA_Init+0x1c8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d036      	beq.n	8003e2c <HAL_DMA_Init+0xb8>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a5f      	ldr	r2, [pc, #380]	@ (8003f40 <HAL_DMA_Init+0x1cc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d031      	beq.n	8003e2c <HAL_DMA_Init+0xb8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8003f44 <HAL_DMA_Init+0x1d0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d02c      	beq.n	8003e2c <HAL_DMA_Init+0xb8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a5c      	ldr	r2, [pc, #368]	@ (8003f48 <HAL_DMA_Init+0x1d4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d027      	beq.n	8003e2c <HAL_DMA_Init+0xb8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a5a      	ldr	r2, [pc, #360]	@ (8003f4c <HAL_DMA_Init+0x1d8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d022      	beq.n	8003e2c <HAL_DMA_Init+0xb8>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a59      	ldr	r2, [pc, #356]	@ (8003f50 <HAL_DMA_Init+0x1dc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d01d      	beq.n	8003e2c <HAL_DMA_Init+0xb8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a57      	ldr	r2, [pc, #348]	@ (8003f54 <HAL_DMA_Init+0x1e0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d018      	beq.n	8003e2c <HAL_DMA_Init+0xb8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a56      	ldr	r2, [pc, #344]	@ (8003f58 <HAL_DMA_Init+0x1e4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d013      	beq.n	8003e2c <HAL_DMA_Init+0xb8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a54      	ldr	r2, [pc, #336]	@ (8003f5c <HAL_DMA_Init+0x1e8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00e      	beq.n	8003e2c <HAL_DMA_Init+0xb8>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a53      	ldr	r2, [pc, #332]	@ (8003f60 <HAL_DMA_Init+0x1ec>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d009      	beq.n	8003e2c <HAL_DMA_Init+0xb8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a51      	ldr	r2, [pc, #324]	@ (8003f64 <HAL_DMA_Init+0x1f0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <HAL_DMA_Init+0xb8>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a50      	ldr	r2, [pc, #320]	@ (8003f68 <HAL_DMA_Init+0x1f4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d101      	bne.n	8003e30 <HAL_DMA_Init+0xbc>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <HAL_DMA_Init+0xbe>
 8003e30:	2300      	movs	r3, #0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 813b 	beq.w	80040ae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a37      	ldr	r2, [pc, #220]	@ (8003f2c <HAL_DMA_Init+0x1b8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d04a      	beq.n	8003ee8 <HAL_DMA_Init+0x174>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a36      	ldr	r2, [pc, #216]	@ (8003f30 <HAL_DMA_Init+0x1bc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d045      	beq.n	8003ee8 <HAL_DMA_Init+0x174>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a34      	ldr	r2, [pc, #208]	@ (8003f34 <HAL_DMA_Init+0x1c0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d040      	beq.n	8003ee8 <HAL_DMA_Init+0x174>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a33      	ldr	r2, [pc, #204]	@ (8003f38 <HAL_DMA_Init+0x1c4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d03b      	beq.n	8003ee8 <HAL_DMA_Init+0x174>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a31      	ldr	r2, [pc, #196]	@ (8003f3c <HAL_DMA_Init+0x1c8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d036      	beq.n	8003ee8 <HAL_DMA_Init+0x174>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a30      	ldr	r2, [pc, #192]	@ (8003f40 <HAL_DMA_Init+0x1cc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d031      	beq.n	8003ee8 <HAL_DMA_Init+0x174>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a2e      	ldr	r2, [pc, #184]	@ (8003f44 <HAL_DMA_Init+0x1d0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d02c      	beq.n	8003ee8 <HAL_DMA_Init+0x174>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2d      	ldr	r2, [pc, #180]	@ (8003f48 <HAL_DMA_Init+0x1d4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d027      	beq.n	8003ee8 <HAL_DMA_Init+0x174>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f4c <HAL_DMA_Init+0x1d8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d022      	beq.n	8003ee8 <HAL_DMA_Init+0x174>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8003f50 <HAL_DMA_Init+0x1dc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d01d      	beq.n	8003ee8 <HAL_DMA_Init+0x174>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a28      	ldr	r2, [pc, #160]	@ (8003f54 <HAL_DMA_Init+0x1e0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d018      	beq.n	8003ee8 <HAL_DMA_Init+0x174>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a27      	ldr	r2, [pc, #156]	@ (8003f58 <HAL_DMA_Init+0x1e4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d013      	beq.n	8003ee8 <HAL_DMA_Init+0x174>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a25      	ldr	r2, [pc, #148]	@ (8003f5c <HAL_DMA_Init+0x1e8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00e      	beq.n	8003ee8 <HAL_DMA_Init+0x174>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a24      	ldr	r2, [pc, #144]	@ (8003f60 <HAL_DMA_Init+0x1ec>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d009      	beq.n	8003ee8 <HAL_DMA_Init+0x174>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a22      	ldr	r2, [pc, #136]	@ (8003f64 <HAL_DMA_Init+0x1f0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <HAL_DMA_Init+0x174>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a21      	ldr	r2, [pc, #132]	@ (8003f68 <HAL_DMA_Init+0x1f4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d108      	bne.n	8003efa <HAL_DMA_Init+0x186>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0201 	bic.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	e007      	b.n	8003f0a <HAL_DMA_Init+0x196>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0201 	bic.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f0a:	e02f      	b.n	8003f6c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f0c:	f7ff fa82 	bl	8003414 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b05      	cmp	r3, #5
 8003f18:	d928      	bls.n	8003f6c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2203      	movs	r2, #3
 8003f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e246      	b.n	80043ba <HAL_DMA_Init+0x646>
 8003f2c:	40020010 	.word	0x40020010
 8003f30:	40020028 	.word	0x40020028
 8003f34:	40020040 	.word	0x40020040
 8003f38:	40020058 	.word	0x40020058
 8003f3c:	40020070 	.word	0x40020070
 8003f40:	40020088 	.word	0x40020088
 8003f44:	400200a0 	.word	0x400200a0
 8003f48:	400200b8 	.word	0x400200b8
 8003f4c:	40020410 	.word	0x40020410
 8003f50:	40020428 	.word	0x40020428
 8003f54:	40020440 	.word	0x40020440
 8003f58:	40020458 	.word	0x40020458
 8003f5c:	40020470 	.word	0x40020470
 8003f60:	40020488 	.word	0x40020488
 8003f64:	400204a0 	.word	0x400204a0
 8003f68:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1c8      	bne.n	8003f0c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4b83      	ldr	r3, [pc, #524]	@ (8004194 <HAL_DMA_Init+0x420>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003f92:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003faa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d107      	bne.n	8003fd0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003fd0:	4b71      	ldr	r3, [pc, #452]	@ (8004198 <HAL_DMA_Init+0x424>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b71      	ldr	r3, [pc, #452]	@ (800419c <HAL_DMA_Init+0x428>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fdc:	d328      	bcc.n	8004030 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b28      	cmp	r3, #40	@ 0x28
 8003fe4:	d903      	bls.n	8003fee <HAL_DMA_Init+0x27a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fec:	d917      	bls.n	800401e <HAL_DMA_Init+0x2aa>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ff4:	d903      	bls.n	8003ffe <HAL_DMA_Init+0x28a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b42      	cmp	r3, #66	@ 0x42
 8003ffc:	d90f      	bls.n	800401e <HAL_DMA_Init+0x2aa>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b46      	cmp	r3, #70	@ 0x46
 8004004:	d903      	bls.n	800400e <HAL_DMA_Init+0x29a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b48      	cmp	r3, #72	@ 0x48
 800400c:	d907      	bls.n	800401e <HAL_DMA_Init+0x2aa>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b4e      	cmp	r3, #78	@ 0x4e
 8004014:	d905      	bls.n	8004022 <HAL_DMA_Init+0x2ae>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b52      	cmp	r3, #82	@ 0x52
 800401c:	d801      	bhi.n	8004022 <HAL_DMA_Init+0x2ae>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <HAL_DMA_Init+0x2b0>
 8004022:	2300      	movs	r3, #0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800402e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 0307 	bic.w	r3, r3, #7
 8004046:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	2b04      	cmp	r3, #4
 8004058:	d117      	bne.n	800408a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00e      	beq.n	800408a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f002 fb41 	bl	80066f4 <DMA_CheckFifoParam>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2240      	movs	r2, #64	@ 0x40
 800407c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e197      	b.n	80043ba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f002 fa7c 	bl	8006590 <DMA_CalcBaseAndBitshift>
 8004098:	4603      	mov	r3, r0
 800409a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	223f      	movs	r2, #63	@ 0x3f
 80040a6:	409a      	lsls	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	e0cd      	b.n	800424a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a3b      	ldr	r2, [pc, #236]	@ (80041a0 <HAL_DMA_Init+0x42c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d022      	beq.n	80040fe <HAL_DMA_Init+0x38a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a39      	ldr	r2, [pc, #228]	@ (80041a4 <HAL_DMA_Init+0x430>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01d      	beq.n	80040fe <HAL_DMA_Init+0x38a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a38      	ldr	r2, [pc, #224]	@ (80041a8 <HAL_DMA_Init+0x434>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d018      	beq.n	80040fe <HAL_DMA_Init+0x38a>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a36      	ldr	r2, [pc, #216]	@ (80041ac <HAL_DMA_Init+0x438>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d013      	beq.n	80040fe <HAL_DMA_Init+0x38a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a35      	ldr	r2, [pc, #212]	@ (80041b0 <HAL_DMA_Init+0x43c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00e      	beq.n	80040fe <HAL_DMA_Init+0x38a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a33      	ldr	r2, [pc, #204]	@ (80041b4 <HAL_DMA_Init+0x440>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d009      	beq.n	80040fe <HAL_DMA_Init+0x38a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a32      	ldr	r2, [pc, #200]	@ (80041b8 <HAL_DMA_Init+0x444>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d004      	beq.n	80040fe <HAL_DMA_Init+0x38a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a30      	ldr	r2, [pc, #192]	@ (80041bc <HAL_DMA_Init+0x448>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <HAL_DMA_Init+0x38e>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <HAL_DMA_Init+0x390>
 8004102:	2300      	movs	r3, #0
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8097 	beq.w	8004238 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a24      	ldr	r2, [pc, #144]	@ (80041a0 <HAL_DMA_Init+0x42c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d021      	beq.n	8004158 <HAL_DMA_Init+0x3e4>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a22      	ldr	r2, [pc, #136]	@ (80041a4 <HAL_DMA_Init+0x430>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d01c      	beq.n	8004158 <HAL_DMA_Init+0x3e4>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a21      	ldr	r2, [pc, #132]	@ (80041a8 <HAL_DMA_Init+0x434>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d017      	beq.n	8004158 <HAL_DMA_Init+0x3e4>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1f      	ldr	r2, [pc, #124]	@ (80041ac <HAL_DMA_Init+0x438>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d012      	beq.n	8004158 <HAL_DMA_Init+0x3e4>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1e      	ldr	r2, [pc, #120]	@ (80041b0 <HAL_DMA_Init+0x43c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00d      	beq.n	8004158 <HAL_DMA_Init+0x3e4>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1c      	ldr	r2, [pc, #112]	@ (80041b4 <HAL_DMA_Init+0x440>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d008      	beq.n	8004158 <HAL_DMA_Init+0x3e4>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1b      	ldr	r2, [pc, #108]	@ (80041b8 <HAL_DMA_Init+0x444>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <HAL_DMA_Init+0x3e4>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a19      	ldr	r2, [pc, #100]	@ (80041bc <HAL_DMA_Init+0x448>)
 8004156:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <HAL_DMA_Init+0x44c>)
 8004174:	4013      	ands	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b40      	cmp	r3, #64	@ 0x40
 800417e:	d021      	beq.n	80041c4 <HAL_DMA_Init+0x450>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b80      	cmp	r3, #128	@ 0x80
 8004186:	d102      	bne.n	800418e <HAL_DMA_Init+0x41a>
 8004188:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800418c:	e01b      	b.n	80041c6 <HAL_DMA_Init+0x452>
 800418e:	2300      	movs	r3, #0
 8004190:	e019      	b.n	80041c6 <HAL_DMA_Init+0x452>
 8004192:	bf00      	nop
 8004194:	fe10803f 	.word	0xfe10803f
 8004198:	5c001000 	.word	0x5c001000
 800419c:	ffff0000 	.word	0xffff0000
 80041a0:	58025408 	.word	0x58025408
 80041a4:	5802541c 	.word	0x5802541c
 80041a8:	58025430 	.word	0x58025430
 80041ac:	58025444 	.word	0x58025444
 80041b0:	58025458 	.word	0x58025458
 80041b4:	5802546c 	.word	0x5802546c
 80041b8:	58025480 	.word	0x58025480
 80041bc:	58025494 	.word	0x58025494
 80041c0:	fffe000f 	.word	0xfffe000f
 80041c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68d2      	ldr	r2, [r2, #12]
 80041ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80041d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80041dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80041e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80041ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80041f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	4b6e      	ldr	r3, [pc, #440]	@ (80043c4 <HAL_DMA_Init+0x650>)
 800420c:	4413      	add	r3, r2
 800420e:	4a6e      	ldr	r2, [pc, #440]	@ (80043c8 <HAL_DMA_Init+0x654>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	009a      	lsls	r2, r3, #2
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f002 f9b7 	bl	8006590 <DMA_CalcBaseAndBitshift>
 8004222:	4603      	mov	r3, r0
 8004224:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	2201      	movs	r2, #1
 8004230:	409a      	lsls	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	e008      	b.n	800424a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2240      	movs	r2, #64	@ 0x40
 800423c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2203      	movs	r2, #3
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e0b7      	b.n	80043ba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a5f      	ldr	r2, [pc, #380]	@ (80043cc <HAL_DMA_Init+0x658>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d072      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a5d      	ldr	r2, [pc, #372]	@ (80043d0 <HAL_DMA_Init+0x65c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d06d      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a5c      	ldr	r2, [pc, #368]	@ (80043d4 <HAL_DMA_Init+0x660>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d068      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a5a      	ldr	r2, [pc, #360]	@ (80043d8 <HAL_DMA_Init+0x664>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d063      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a59      	ldr	r2, [pc, #356]	@ (80043dc <HAL_DMA_Init+0x668>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d05e      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a57      	ldr	r2, [pc, #348]	@ (80043e0 <HAL_DMA_Init+0x66c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d059      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a56      	ldr	r2, [pc, #344]	@ (80043e4 <HAL_DMA_Init+0x670>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d054      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a54      	ldr	r2, [pc, #336]	@ (80043e8 <HAL_DMA_Init+0x674>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d04f      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a53      	ldr	r2, [pc, #332]	@ (80043ec <HAL_DMA_Init+0x678>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d04a      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a51      	ldr	r2, [pc, #324]	@ (80043f0 <HAL_DMA_Init+0x67c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d045      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a50      	ldr	r2, [pc, #320]	@ (80043f4 <HAL_DMA_Init+0x680>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d040      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a4e      	ldr	r2, [pc, #312]	@ (80043f8 <HAL_DMA_Init+0x684>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d03b      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a4d      	ldr	r2, [pc, #308]	@ (80043fc <HAL_DMA_Init+0x688>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d036      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a4b      	ldr	r2, [pc, #300]	@ (8004400 <HAL_DMA_Init+0x68c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d031      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a4a      	ldr	r2, [pc, #296]	@ (8004404 <HAL_DMA_Init+0x690>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d02c      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a48      	ldr	r2, [pc, #288]	@ (8004408 <HAL_DMA_Init+0x694>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d027      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a47      	ldr	r2, [pc, #284]	@ (800440c <HAL_DMA_Init+0x698>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d022      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a45      	ldr	r2, [pc, #276]	@ (8004410 <HAL_DMA_Init+0x69c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d01d      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a44      	ldr	r2, [pc, #272]	@ (8004414 <HAL_DMA_Init+0x6a0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d018      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a42      	ldr	r2, [pc, #264]	@ (8004418 <HAL_DMA_Init+0x6a4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d013      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a41      	ldr	r2, [pc, #260]	@ (800441c <HAL_DMA_Init+0x6a8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00e      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a3f      	ldr	r2, [pc, #252]	@ (8004420 <HAL_DMA_Init+0x6ac>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d009      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a3e      	ldr	r2, [pc, #248]	@ (8004424 <HAL_DMA_Init+0x6b0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d004      	beq.n	800433a <HAL_DMA_Init+0x5c6>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a3c      	ldr	r2, [pc, #240]	@ (8004428 <HAL_DMA_Init+0x6b4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d101      	bne.n	800433e <HAL_DMA_Init+0x5ca>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <HAL_DMA_Init+0x5cc>
 800433e:	2300      	movs	r3, #0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d032      	beq.n	80043aa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f002 fa51 	bl	80067ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b80      	cmp	r3, #128	@ 0x80
 8004350:	d102      	bne.n	8004358 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800436c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d010      	beq.n	8004398 <HAL_DMA_Init+0x624>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b08      	cmp	r3, #8
 800437c:	d80c      	bhi.n	8004398 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f002 face 	bl	8006920 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004394:	605a      	str	r2, [r3, #4]
 8004396:	e008      	b.n	80043aa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	a7fdabf8 	.word	0xa7fdabf8
 80043c8:	cccccccd 	.word	0xcccccccd
 80043cc:	40020010 	.word	0x40020010
 80043d0:	40020028 	.word	0x40020028
 80043d4:	40020040 	.word	0x40020040
 80043d8:	40020058 	.word	0x40020058
 80043dc:	40020070 	.word	0x40020070
 80043e0:	40020088 	.word	0x40020088
 80043e4:	400200a0 	.word	0x400200a0
 80043e8:	400200b8 	.word	0x400200b8
 80043ec:	40020410 	.word	0x40020410
 80043f0:	40020428 	.word	0x40020428
 80043f4:	40020440 	.word	0x40020440
 80043f8:	40020458 	.word	0x40020458
 80043fc:	40020470 	.word	0x40020470
 8004400:	40020488 	.word	0x40020488
 8004404:	400204a0 	.word	0x400204a0
 8004408:	400204b8 	.word	0x400204b8
 800440c:	58025408 	.word	0x58025408
 8004410:	5802541c 	.word	0x5802541c
 8004414:	58025430 	.word	0x58025430
 8004418:	58025444 	.word	0x58025444
 800441c:	58025458 	.word	0x58025458
 8004420:	5802546c 	.word	0x5802546c
 8004424:	58025480 	.word	0x58025480
 8004428:	58025494 	.word	0x58025494

0800442c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e226      	b.n	8004896 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_DMA_Start_IT+0x2a>
 8004452:	2302      	movs	r3, #2
 8004454:	e21f      	b.n	8004896 <HAL_DMA_Start_IT+0x46a>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b01      	cmp	r3, #1
 8004468:	f040 820a 	bne.w	8004880 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a68      	ldr	r2, [pc, #416]	@ (8004620 <HAL_DMA_Start_IT+0x1f4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d04a      	beq.n	800451a <HAL_DMA_Start_IT+0xee>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a66      	ldr	r2, [pc, #408]	@ (8004624 <HAL_DMA_Start_IT+0x1f8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d045      	beq.n	800451a <HAL_DMA_Start_IT+0xee>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a65      	ldr	r2, [pc, #404]	@ (8004628 <HAL_DMA_Start_IT+0x1fc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d040      	beq.n	800451a <HAL_DMA_Start_IT+0xee>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a63      	ldr	r2, [pc, #396]	@ (800462c <HAL_DMA_Start_IT+0x200>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d03b      	beq.n	800451a <HAL_DMA_Start_IT+0xee>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a62      	ldr	r2, [pc, #392]	@ (8004630 <HAL_DMA_Start_IT+0x204>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d036      	beq.n	800451a <HAL_DMA_Start_IT+0xee>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a60      	ldr	r2, [pc, #384]	@ (8004634 <HAL_DMA_Start_IT+0x208>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d031      	beq.n	800451a <HAL_DMA_Start_IT+0xee>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a5f      	ldr	r2, [pc, #380]	@ (8004638 <HAL_DMA_Start_IT+0x20c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d02c      	beq.n	800451a <HAL_DMA_Start_IT+0xee>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a5d      	ldr	r2, [pc, #372]	@ (800463c <HAL_DMA_Start_IT+0x210>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d027      	beq.n	800451a <HAL_DMA_Start_IT+0xee>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a5c      	ldr	r2, [pc, #368]	@ (8004640 <HAL_DMA_Start_IT+0x214>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d022      	beq.n	800451a <HAL_DMA_Start_IT+0xee>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a5a      	ldr	r2, [pc, #360]	@ (8004644 <HAL_DMA_Start_IT+0x218>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01d      	beq.n	800451a <HAL_DMA_Start_IT+0xee>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a59      	ldr	r2, [pc, #356]	@ (8004648 <HAL_DMA_Start_IT+0x21c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d018      	beq.n	800451a <HAL_DMA_Start_IT+0xee>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a57      	ldr	r2, [pc, #348]	@ (800464c <HAL_DMA_Start_IT+0x220>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <HAL_DMA_Start_IT+0xee>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a56      	ldr	r2, [pc, #344]	@ (8004650 <HAL_DMA_Start_IT+0x224>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00e      	beq.n	800451a <HAL_DMA_Start_IT+0xee>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a54      	ldr	r2, [pc, #336]	@ (8004654 <HAL_DMA_Start_IT+0x228>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d009      	beq.n	800451a <HAL_DMA_Start_IT+0xee>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a53      	ldr	r2, [pc, #332]	@ (8004658 <HAL_DMA_Start_IT+0x22c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <HAL_DMA_Start_IT+0xee>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a51      	ldr	r2, [pc, #324]	@ (800465c <HAL_DMA_Start_IT+0x230>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d108      	bne.n	800452c <HAL_DMA_Start_IT+0x100>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0201 	bic.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	e007      	b.n	800453c <HAL_DMA_Start_IT+0x110>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f001 fe78 	bl	8006238 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a34      	ldr	r2, [pc, #208]	@ (8004620 <HAL_DMA_Start_IT+0x1f4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d04a      	beq.n	80045e8 <HAL_DMA_Start_IT+0x1bc>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a33      	ldr	r2, [pc, #204]	@ (8004624 <HAL_DMA_Start_IT+0x1f8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d045      	beq.n	80045e8 <HAL_DMA_Start_IT+0x1bc>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a31      	ldr	r2, [pc, #196]	@ (8004628 <HAL_DMA_Start_IT+0x1fc>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d040      	beq.n	80045e8 <HAL_DMA_Start_IT+0x1bc>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a30      	ldr	r2, [pc, #192]	@ (800462c <HAL_DMA_Start_IT+0x200>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d03b      	beq.n	80045e8 <HAL_DMA_Start_IT+0x1bc>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a2e      	ldr	r2, [pc, #184]	@ (8004630 <HAL_DMA_Start_IT+0x204>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d036      	beq.n	80045e8 <HAL_DMA_Start_IT+0x1bc>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a2d      	ldr	r2, [pc, #180]	@ (8004634 <HAL_DMA_Start_IT+0x208>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d031      	beq.n	80045e8 <HAL_DMA_Start_IT+0x1bc>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2b      	ldr	r2, [pc, #172]	@ (8004638 <HAL_DMA_Start_IT+0x20c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d02c      	beq.n	80045e8 <HAL_DMA_Start_IT+0x1bc>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a2a      	ldr	r2, [pc, #168]	@ (800463c <HAL_DMA_Start_IT+0x210>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d027      	beq.n	80045e8 <HAL_DMA_Start_IT+0x1bc>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a28      	ldr	r2, [pc, #160]	@ (8004640 <HAL_DMA_Start_IT+0x214>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d022      	beq.n	80045e8 <HAL_DMA_Start_IT+0x1bc>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a27      	ldr	r2, [pc, #156]	@ (8004644 <HAL_DMA_Start_IT+0x218>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d01d      	beq.n	80045e8 <HAL_DMA_Start_IT+0x1bc>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a25      	ldr	r2, [pc, #148]	@ (8004648 <HAL_DMA_Start_IT+0x21c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d018      	beq.n	80045e8 <HAL_DMA_Start_IT+0x1bc>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a24      	ldr	r2, [pc, #144]	@ (800464c <HAL_DMA_Start_IT+0x220>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d013      	beq.n	80045e8 <HAL_DMA_Start_IT+0x1bc>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a22      	ldr	r2, [pc, #136]	@ (8004650 <HAL_DMA_Start_IT+0x224>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00e      	beq.n	80045e8 <HAL_DMA_Start_IT+0x1bc>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a21      	ldr	r2, [pc, #132]	@ (8004654 <HAL_DMA_Start_IT+0x228>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d009      	beq.n	80045e8 <HAL_DMA_Start_IT+0x1bc>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004658 <HAL_DMA_Start_IT+0x22c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d004      	beq.n	80045e8 <HAL_DMA_Start_IT+0x1bc>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a1e      	ldr	r2, [pc, #120]	@ (800465c <HAL_DMA_Start_IT+0x230>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d101      	bne.n	80045ec <HAL_DMA_Start_IT+0x1c0>
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <HAL_DMA_Start_IT+0x1c2>
 80045ec:	2300      	movs	r3, #0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d036      	beq.n	8004660 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f023 021e 	bic.w	r2, r3, #30
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0216 	orr.w	r2, r2, #22
 8004604:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d03e      	beq.n	800468c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0208 	orr.w	r2, r2, #8
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	e035      	b.n	800468c <HAL_DMA_Start_IT+0x260>
 8004620:	40020010 	.word	0x40020010
 8004624:	40020028 	.word	0x40020028
 8004628:	40020040 	.word	0x40020040
 800462c:	40020058 	.word	0x40020058
 8004630:	40020070 	.word	0x40020070
 8004634:	40020088 	.word	0x40020088
 8004638:	400200a0 	.word	0x400200a0
 800463c:	400200b8 	.word	0x400200b8
 8004640:	40020410 	.word	0x40020410
 8004644:	40020428 	.word	0x40020428
 8004648:	40020440 	.word	0x40020440
 800464c:	40020458 	.word	0x40020458
 8004650:	40020470 	.word	0x40020470
 8004654:	40020488 	.word	0x40020488
 8004658:	400204a0 	.word	0x400204a0
 800465c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 020e 	bic.w	r2, r3, #14
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 020a 	orr.w	r2, r2, #10
 8004672:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0204 	orr.w	r2, r2, #4
 800468a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a83      	ldr	r2, [pc, #524]	@ (80048a0 <HAL_DMA_Start_IT+0x474>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d072      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a82      	ldr	r2, [pc, #520]	@ (80048a4 <HAL_DMA_Start_IT+0x478>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d06d      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a80      	ldr	r2, [pc, #512]	@ (80048a8 <HAL_DMA_Start_IT+0x47c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d068      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a7f      	ldr	r2, [pc, #508]	@ (80048ac <HAL_DMA_Start_IT+0x480>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d063      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a7d      	ldr	r2, [pc, #500]	@ (80048b0 <HAL_DMA_Start_IT+0x484>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d05e      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a7c      	ldr	r2, [pc, #496]	@ (80048b4 <HAL_DMA_Start_IT+0x488>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d059      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a7a      	ldr	r2, [pc, #488]	@ (80048b8 <HAL_DMA_Start_IT+0x48c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d054      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a79      	ldr	r2, [pc, #484]	@ (80048bc <HAL_DMA_Start_IT+0x490>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d04f      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a77      	ldr	r2, [pc, #476]	@ (80048c0 <HAL_DMA_Start_IT+0x494>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d04a      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a76      	ldr	r2, [pc, #472]	@ (80048c4 <HAL_DMA_Start_IT+0x498>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d045      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a74      	ldr	r2, [pc, #464]	@ (80048c8 <HAL_DMA_Start_IT+0x49c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d040      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a73      	ldr	r2, [pc, #460]	@ (80048cc <HAL_DMA_Start_IT+0x4a0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d03b      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a71      	ldr	r2, [pc, #452]	@ (80048d0 <HAL_DMA_Start_IT+0x4a4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d036      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a70      	ldr	r2, [pc, #448]	@ (80048d4 <HAL_DMA_Start_IT+0x4a8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d031      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a6e      	ldr	r2, [pc, #440]	@ (80048d8 <HAL_DMA_Start_IT+0x4ac>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d02c      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a6d      	ldr	r2, [pc, #436]	@ (80048dc <HAL_DMA_Start_IT+0x4b0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d027      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a6b      	ldr	r2, [pc, #428]	@ (80048e0 <HAL_DMA_Start_IT+0x4b4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d022      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a6a      	ldr	r2, [pc, #424]	@ (80048e4 <HAL_DMA_Start_IT+0x4b8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d01d      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a68      	ldr	r2, [pc, #416]	@ (80048e8 <HAL_DMA_Start_IT+0x4bc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d018      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a67      	ldr	r2, [pc, #412]	@ (80048ec <HAL_DMA_Start_IT+0x4c0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a65      	ldr	r2, [pc, #404]	@ (80048f0 <HAL_DMA_Start_IT+0x4c4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00e      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a64      	ldr	r2, [pc, #400]	@ (80048f4 <HAL_DMA_Start_IT+0x4c8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a62      	ldr	r2, [pc, #392]	@ (80048f8 <HAL_DMA_Start_IT+0x4cc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_DMA_Start_IT+0x350>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a61      	ldr	r2, [pc, #388]	@ (80048fc <HAL_DMA_Start_IT+0x4d0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d101      	bne.n	8004780 <HAL_DMA_Start_IT+0x354>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_DMA_Start_IT+0x356>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d01a      	beq.n	80047bc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d007      	beq.n	80047a4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800479e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047a2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047ba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a37      	ldr	r2, [pc, #220]	@ (80048a0 <HAL_DMA_Start_IT+0x474>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d04a      	beq.n	800485c <HAL_DMA_Start_IT+0x430>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a36      	ldr	r2, [pc, #216]	@ (80048a4 <HAL_DMA_Start_IT+0x478>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d045      	beq.n	800485c <HAL_DMA_Start_IT+0x430>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a34      	ldr	r2, [pc, #208]	@ (80048a8 <HAL_DMA_Start_IT+0x47c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d040      	beq.n	800485c <HAL_DMA_Start_IT+0x430>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a33      	ldr	r2, [pc, #204]	@ (80048ac <HAL_DMA_Start_IT+0x480>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d03b      	beq.n	800485c <HAL_DMA_Start_IT+0x430>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a31      	ldr	r2, [pc, #196]	@ (80048b0 <HAL_DMA_Start_IT+0x484>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d036      	beq.n	800485c <HAL_DMA_Start_IT+0x430>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a30      	ldr	r2, [pc, #192]	@ (80048b4 <HAL_DMA_Start_IT+0x488>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d031      	beq.n	800485c <HAL_DMA_Start_IT+0x430>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a2e      	ldr	r2, [pc, #184]	@ (80048b8 <HAL_DMA_Start_IT+0x48c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d02c      	beq.n	800485c <HAL_DMA_Start_IT+0x430>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a2d      	ldr	r2, [pc, #180]	@ (80048bc <HAL_DMA_Start_IT+0x490>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d027      	beq.n	800485c <HAL_DMA_Start_IT+0x430>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a2b      	ldr	r2, [pc, #172]	@ (80048c0 <HAL_DMA_Start_IT+0x494>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d022      	beq.n	800485c <HAL_DMA_Start_IT+0x430>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a2a      	ldr	r2, [pc, #168]	@ (80048c4 <HAL_DMA_Start_IT+0x498>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d01d      	beq.n	800485c <HAL_DMA_Start_IT+0x430>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a28      	ldr	r2, [pc, #160]	@ (80048c8 <HAL_DMA_Start_IT+0x49c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d018      	beq.n	800485c <HAL_DMA_Start_IT+0x430>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a27      	ldr	r2, [pc, #156]	@ (80048cc <HAL_DMA_Start_IT+0x4a0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d013      	beq.n	800485c <HAL_DMA_Start_IT+0x430>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a25      	ldr	r2, [pc, #148]	@ (80048d0 <HAL_DMA_Start_IT+0x4a4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00e      	beq.n	800485c <HAL_DMA_Start_IT+0x430>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a24      	ldr	r2, [pc, #144]	@ (80048d4 <HAL_DMA_Start_IT+0x4a8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d009      	beq.n	800485c <HAL_DMA_Start_IT+0x430>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a22      	ldr	r2, [pc, #136]	@ (80048d8 <HAL_DMA_Start_IT+0x4ac>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d004      	beq.n	800485c <HAL_DMA_Start_IT+0x430>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a21      	ldr	r2, [pc, #132]	@ (80048dc <HAL_DMA_Start_IT+0x4b0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d108      	bne.n	800486e <HAL_DMA_Start_IT+0x442>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e012      	b.n	8004894 <HAL_DMA_Start_IT+0x468>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0201 	orr.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e009      	b.n	8004894 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004886:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004894:	7dfb      	ldrb	r3, [r7, #23]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40020010 	.word	0x40020010
 80048a4:	40020028 	.word	0x40020028
 80048a8:	40020040 	.word	0x40020040
 80048ac:	40020058 	.word	0x40020058
 80048b0:	40020070 	.word	0x40020070
 80048b4:	40020088 	.word	0x40020088
 80048b8:	400200a0 	.word	0x400200a0
 80048bc:	400200b8 	.word	0x400200b8
 80048c0:	40020410 	.word	0x40020410
 80048c4:	40020428 	.word	0x40020428
 80048c8:	40020440 	.word	0x40020440
 80048cc:	40020458 	.word	0x40020458
 80048d0:	40020470 	.word	0x40020470
 80048d4:	40020488 	.word	0x40020488
 80048d8:	400204a0 	.word	0x400204a0
 80048dc:	400204b8 	.word	0x400204b8
 80048e0:	58025408 	.word	0x58025408
 80048e4:	5802541c 	.word	0x5802541c
 80048e8:	58025430 	.word	0x58025430
 80048ec:	58025444 	.word	0x58025444
 80048f0:	58025458 	.word	0x58025458
 80048f4:	5802546c 	.word	0x5802546c
 80048f8:	58025480 	.word	0x58025480
 80048fc:	58025494 	.word	0x58025494

08004900 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004908:	f7fe fd84 	bl	8003414 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e2dc      	b.n	8004ed2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d008      	beq.n	8004936 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2280      	movs	r2, #128	@ 0x80
 8004928:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e2cd      	b.n	8004ed2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a76      	ldr	r2, [pc, #472]	@ (8004b14 <HAL_DMA_Abort+0x214>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d04a      	beq.n	80049d6 <HAL_DMA_Abort+0xd6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a74      	ldr	r2, [pc, #464]	@ (8004b18 <HAL_DMA_Abort+0x218>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d045      	beq.n	80049d6 <HAL_DMA_Abort+0xd6>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a73      	ldr	r2, [pc, #460]	@ (8004b1c <HAL_DMA_Abort+0x21c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d040      	beq.n	80049d6 <HAL_DMA_Abort+0xd6>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a71      	ldr	r2, [pc, #452]	@ (8004b20 <HAL_DMA_Abort+0x220>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d03b      	beq.n	80049d6 <HAL_DMA_Abort+0xd6>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a70      	ldr	r2, [pc, #448]	@ (8004b24 <HAL_DMA_Abort+0x224>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d036      	beq.n	80049d6 <HAL_DMA_Abort+0xd6>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a6e      	ldr	r2, [pc, #440]	@ (8004b28 <HAL_DMA_Abort+0x228>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d031      	beq.n	80049d6 <HAL_DMA_Abort+0xd6>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a6d      	ldr	r2, [pc, #436]	@ (8004b2c <HAL_DMA_Abort+0x22c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d02c      	beq.n	80049d6 <HAL_DMA_Abort+0xd6>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a6b      	ldr	r2, [pc, #428]	@ (8004b30 <HAL_DMA_Abort+0x230>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d027      	beq.n	80049d6 <HAL_DMA_Abort+0xd6>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a6a      	ldr	r2, [pc, #424]	@ (8004b34 <HAL_DMA_Abort+0x234>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d022      	beq.n	80049d6 <HAL_DMA_Abort+0xd6>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a68      	ldr	r2, [pc, #416]	@ (8004b38 <HAL_DMA_Abort+0x238>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01d      	beq.n	80049d6 <HAL_DMA_Abort+0xd6>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a67      	ldr	r2, [pc, #412]	@ (8004b3c <HAL_DMA_Abort+0x23c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d018      	beq.n	80049d6 <HAL_DMA_Abort+0xd6>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a65      	ldr	r2, [pc, #404]	@ (8004b40 <HAL_DMA_Abort+0x240>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <HAL_DMA_Abort+0xd6>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a64      	ldr	r2, [pc, #400]	@ (8004b44 <HAL_DMA_Abort+0x244>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00e      	beq.n	80049d6 <HAL_DMA_Abort+0xd6>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a62      	ldr	r2, [pc, #392]	@ (8004b48 <HAL_DMA_Abort+0x248>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d009      	beq.n	80049d6 <HAL_DMA_Abort+0xd6>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a61      	ldr	r2, [pc, #388]	@ (8004b4c <HAL_DMA_Abort+0x24c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d004      	beq.n	80049d6 <HAL_DMA_Abort+0xd6>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a5f      	ldr	r2, [pc, #380]	@ (8004b50 <HAL_DMA_Abort+0x250>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d101      	bne.n	80049da <HAL_DMA_Abort+0xda>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <HAL_DMA_Abort+0xdc>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d013      	beq.n	8004a08 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 021e 	bic.w	r2, r2, #30
 80049ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695a      	ldr	r2, [r3, #20]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	e00a      	b.n	8004a1e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 020e 	bic.w	r2, r2, #14
 8004a16:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a3c      	ldr	r2, [pc, #240]	@ (8004b14 <HAL_DMA_Abort+0x214>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d072      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a3a      	ldr	r2, [pc, #232]	@ (8004b18 <HAL_DMA_Abort+0x218>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d06d      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a39      	ldr	r2, [pc, #228]	@ (8004b1c <HAL_DMA_Abort+0x21c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d068      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a37      	ldr	r2, [pc, #220]	@ (8004b20 <HAL_DMA_Abort+0x220>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d063      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a36      	ldr	r2, [pc, #216]	@ (8004b24 <HAL_DMA_Abort+0x224>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d05e      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a34      	ldr	r2, [pc, #208]	@ (8004b28 <HAL_DMA_Abort+0x228>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d059      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a33      	ldr	r2, [pc, #204]	@ (8004b2c <HAL_DMA_Abort+0x22c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d054      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a31      	ldr	r2, [pc, #196]	@ (8004b30 <HAL_DMA_Abort+0x230>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d04f      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a30      	ldr	r2, [pc, #192]	@ (8004b34 <HAL_DMA_Abort+0x234>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d04a      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b38 <HAL_DMA_Abort+0x238>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d045      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2d      	ldr	r2, [pc, #180]	@ (8004b3c <HAL_DMA_Abort+0x23c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d040      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a2b      	ldr	r2, [pc, #172]	@ (8004b40 <HAL_DMA_Abort+0x240>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d03b      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8004b44 <HAL_DMA_Abort+0x244>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d036      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a28      	ldr	r2, [pc, #160]	@ (8004b48 <HAL_DMA_Abort+0x248>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d031      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a27      	ldr	r2, [pc, #156]	@ (8004b4c <HAL_DMA_Abort+0x24c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d02c      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a25      	ldr	r2, [pc, #148]	@ (8004b50 <HAL_DMA_Abort+0x250>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d027      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a24      	ldr	r2, [pc, #144]	@ (8004b54 <HAL_DMA_Abort+0x254>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d022      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a22      	ldr	r2, [pc, #136]	@ (8004b58 <HAL_DMA_Abort+0x258>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d01d      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a21      	ldr	r2, [pc, #132]	@ (8004b5c <HAL_DMA_Abort+0x25c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d018      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b60 <HAL_DMA_Abort+0x260>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d013      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1e      	ldr	r2, [pc, #120]	@ (8004b64 <HAL_DMA_Abort+0x264>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00e      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b68 <HAL_DMA_Abort+0x268>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d009      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1b      	ldr	r2, [pc, #108]	@ (8004b6c <HAL_DMA_Abort+0x26c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d004      	beq.n	8004b0e <HAL_DMA_Abort+0x20e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a19      	ldr	r2, [pc, #100]	@ (8004b70 <HAL_DMA_Abort+0x270>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d132      	bne.n	8004b74 <HAL_DMA_Abort+0x274>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e031      	b.n	8004b76 <HAL_DMA_Abort+0x276>
 8004b12:	bf00      	nop
 8004b14:	40020010 	.word	0x40020010
 8004b18:	40020028 	.word	0x40020028
 8004b1c:	40020040 	.word	0x40020040
 8004b20:	40020058 	.word	0x40020058
 8004b24:	40020070 	.word	0x40020070
 8004b28:	40020088 	.word	0x40020088
 8004b2c:	400200a0 	.word	0x400200a0
 8004b30:	400200b8 	.word	0x400200b8
 8004b34:	40020410 	.word	0x40020410
 8004b38:	40020428 	.word	0x40020428
 8004b3c:	40020440 	.word	0x40020440
 8004b40:	40020458 	.word	0x40020458
 8004b44:	40020470 	.word	0x40020470
 8004b48:	40020488 	.word	0x40020488
 8004b4c:	400204a0 	.word	0x400204a0
 8004b50:	400204b8 	.word	0x400204b8
 8004b54:	58025408 	.word	0x58025408
 8004b58:	5802541c 	.word	0x5802541c
 8004b5c:	58025430 	.word	0x58025430
 8004b60:	58025444 	.word	0x58025444
 8004b64:	58025458 	.word	0x58025458
 8004b68:	5802546c 	.word	0x5802546c
 8004b6c:	58025480 	.word	0x58025480
 8004b70:	58025494 	.word	0x58025494
 8004b74:	2300      	movs	r3, #0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b88:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a6d      	ldr	r2, [pc, #436]	@ (8004d44 <HAL_DMA_Abort+0x444>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d04a      	beq.n	8004c2a <HAL_DMA_Abort+0x32a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a6b      	ldr	r2, [pc, #428]	@ (8004d48 <HAL_DMA_Abort+0x448>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d045      	beq.n	8004c2a <HAL_DMA_Abort+0x32a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a6a      	ldr	r2, [pc, #424]	@ (8004d4c <HAL_DMA_Abort+0x44c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d040      	beq.n	8004c2a <HAL_DMA_Abort+0x32a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a68      	ldr	r2, [pc, #416]	@ (8004d50 <HAL_DMA_Abort+0x450>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d03b      	beq.n	8004c2a <HAL_DMA_Abort+0x32a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a67      	ldr	r2, [pc, #412]	@ (8004d54 <HAL_DMA_Abort+0x454>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d036      	beq.n	8004c2a <HAL_DMA_Abort+0x32a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a65      	ldr	r2, [pc, #404]	@ (8004d58 <HAL_DMA_Abort+0x458>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d031      	beq.n	8004c2a <HAL_DMA_Abort+0x32a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a64      	ldr	r2, [pc, #400]	@ (8004d5c <HAL_DMA_Abort+0x45c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d02c      	beq.n	8004c2a <HAL_DMA_Abort+0x32a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a62      	ldr	r2, [pc, #392]	@ (8004d60 <HAL_DMA_Abort+0x460>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d027      	beq.n	8004c2a <HAL_DMA_Abort+0x32a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a61      	ldr	r2, [pc, #388]	@ (8004d64 <HAL_DMA_Abort+0x464>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d022      	beq.n	8004c2a <HAL_DMA_Abort+0x32a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a5f      	ldr	r2, [pc, #380]	@ (8004d68 <HAL_DMA_Abort+0x468>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d01d      	beq.n	8004c2a <HAL_DMA_Abort+0x32a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a5e      	ldr	r2, [pc, #376]	@ (8004d6c <HAL_DMA_Abort+0x46c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d018      	beq.n	8004c2a <HAL_DMA_Abort+0x32a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a5c      	ldr	r2, [pc, #368]	@ (8004d70 <HAL_DMA_Abort+0x470>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d013      	beq.n	8004c2a <HAL_DMA_Abort+0x32a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a5b      	ldr	r2, [pc, #364]	@ (8004d74 <HAL_DMA_Abort+0x474>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00e      	beq.n	8004c2a <HAL_DMA_Abort+0x32a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a59      	ldr	r2, [pc, #356]	@ (8004d78 <HAL_DMA_Abort+0x478>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d009      	beq.n	8004c2a <HAL_DMA_Abort+0x32a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a58      	ldr	r2, [pc, #352]	@ (8004d7c <HAL_DMA_Abort+0x47c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <HAL_DMA_Abort+0x32a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a56      	ldr	r2, [pc, #344]	@ (8004d80 <HAL_DMA_Abort+0x480>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d108      	bne.n	8004c3c <HAL_DMA_Abort+0x33c>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0201 	bic.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e007      	b.n	8004c4c <HAL_DMA_Abort+0x34c>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0201 	bic.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c4c:	e013      	b.n	8004c76 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c4e:	f7fe fbe1 	bl	8003414 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b05      	cmp	r3, #5
 8004c5a:	d90c      	bls.n	8004c76 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2203      	movs	r2, #3
 8004c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e12d      	b.n	8004ed2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e5      	bne.n	8004c4e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a2f      	ldr	r2, [pc, #188]	@ (8004d44 <HAL_DMA_Abort+0x444>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d04a      	beq.n	8004d22 <HAL_DMA_Abort+0x422>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a2d      	ldr	r2, [pc, #180]	@ (8004d48 <HAL_DMA_Abort+0x448>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d045      	beq.n	8004d22 <HAL_DMA_Abort+0x422>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a2c      	ldr	r2, [pc, #176]	@ (8004d4c <HAL_DMA_Abort+0x44c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d040      	beq.n	8004d22 <HAL_DMA_Abort+0x422>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8004d50 <HAL_DMA_Abort+0x450>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d03b      	beq.n	8004d22 <HAL_DMA_Abort+0x422>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a29      	ldr	r2, [pc, #164]	@ (8004d54 <HAL_DMA_Abort+0x454>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d036      	beq.n	8004d22 <HAL_DMA_Abort+0x422>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a27      	ldr	r2, [pc, #156]	@ (8004d58 <HAL_DMA_Abort+0x458>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d031      	beq.n	8004d22 <HAL_DMA_Abort+0x422>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a26      	ldr	r2, [pc, #152]	@ (8004d5c <HAL_DMA_Abort+0x45c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d02c      	beq.n	8004d22 <HAL_DMA_Abort+0x422>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a24      	ldr	r2, [pc, #144]	@ (8004d60 <HAL_DMA_Abort+0x460>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d027      	beq.n	8004d22 <HAL_DMA_Abort+0x422>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a23      	ldr	r2, [pc, #140]	@ (8004d64 <HAL_DMA_Abort+0x464>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d022      	beq.n	8004d22 <HAL_DMA_Abort+0x422>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a21      	ldr	r2, [pc, #132]	@ (8004d68 <HAL_DMA_Abort+0x468>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d01d      	beq.n	8004d22 <HAL_DMA_Abort+0x422>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a20      	ldr	r2, [pc, #128]	@ (8004d6c <HAL_DMA_Abort+0x46c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d018      	beq.n	8004d22 <HAL_DMA_Abort+0x422>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d70 <HAL_DMA_Abort+0x470>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d013      	beq.n	8004d22 <HAL_DMA_Abort+0x422>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8004d74 <HAL_DMA_Abort+0x474>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00e      	beq.n	8004d22 <HAL_DMA_Abort+0x422>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1b      	ldr	r2, [pc, #108]	@ (8004d78 <HAL_DMA_Abort+0x478>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d009      	beq.n	8004d22 <HAL_DMA_Abort+0x422>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1a      	ldr	r2, [pc, #104]	@ (8004d7c <HAL_DMA_Abort+0x47c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d004      	beq.n	8004d22 <HAL_DMA_Abort+0x422>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a18      	ldr	r2, [pc, #96]	@ (8004d80 <HAL_DMA_Abort+0x480>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d101      	bne.n	8004d26 <HAL_DMA_Abort+0x426>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <HAL_DMA_Abort+0x428>
 8004d26:	2300      	movs	r3, #0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d02b      	beq.n	8004d84 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d30:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d36:	f003 031f 	and.w	r3, r3, #31
 8004d3a:	223f      	movs	r2, #63	@ 0x3f
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	609a      	str	r2, [r3, #8]
 8004d42:	e02a      	b.n	8004d9a <HAL_DMA_Abort+0x49a>
 8004d44:	40020010 	.word	0x40020010
 8004d48:	40020028 	.word	0x40020028
 8004d4c:	40020040 	.word	0x40020040
 8004d50:	40020058 	.word	0x40020058
 8004d54:	40020070 	.word	0x40020070
 8004d58:	40020088 	.word	0x40020088
 8004d5c:	400200a0 	.word	0x400200a0
 8004d60:	400200b8 	.word	0x400200b8
 8004d64:	40020410 	.word	0x40020410
 8004d68:	40020428 	.word	0x40020428
 8004d6c:	40020440 	.word	0x40020440
 8004d70:	40020458 	.word	0x40020458
 8004d74:	40020470 	.word	0x40020470
 8004d78:	40020488 	.word	0x40020488
 8004d7c:	400204a0 	.word	0x400204a0
 8004d80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d88:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8e:	f003 031f 	and.w	r3, r3, #31
 8004d92:	2201      	movs	r2, #1
 8004d94:	409a      	lsls	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a4f      	ldr	r2, [pc, #316]	@ (8004edc <HAL_DMA_Abort+0x5dc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d072      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a4d      	ldr	r2, [pc, #308]	@ (8004ee0 <HAL_DMA_Abort+0x5e0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d06d      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a4c      	ldr	r2, [pc, #304]	@ (8004ee4 <HAL_DMA_Abort+0x5e4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d068      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a4a      	ldr	r2, [pc, #296]	@ (8004ee8 <HAL_DMA_Abort+0x5e8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d063      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a49      	ldr	r2, [pc, #292]	@ (8004eec <HAL_DMA_Abort+0x5ec>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d05e      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a47      	ldr	r2, [pc, #284]	@ (8004ef0 <HAL_DMA_Abort+0x5f0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d059      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a46      	ldr	r2, [pc, #280]	@ (8004ef4 <HAL_DMA_Abort+0x5f4>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d054      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a44      	ldr	r2, [pc, #272]	@ (8004ef8 <HAL_DMA_Abort+0x5f8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d04f      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a43      	ldr	r2, [pc, #268]	@ (8004efc <HAL_DMA_Abort+0x5fc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d04a      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a41      	ldr	r2, [pc, #260]	@ (8004f00 <HAL_DMA_Abort+0x600>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d045      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a40      	ldr	r2, [pc, #256]	@ (8004f04 <HAL_DMA_Abort+0x604>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d040      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a3e      	ldr	r2, [pc, #248]	@ (8004f08 <HAL_DMA_Abort+0x608>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d03b      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a3d      	ldr	r2, [pc, #244]	@ (8004f0c <HAL_DMA_Abort+0x60c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d036      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a3b      	ldr	r2, [pc, #236]	@ (8004f10 <HAL_DMA_Abort+0x610>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d031      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a3a      	ldr	r2, [pc, #232]	@ (8004f14 <HAL_DMA_Abort+0x614>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d02c      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a38      	ldr	r2, [pc, #224]	@ (8004f18 <HAL_DMA_Abort+0x618>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d027      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a37      	ldr	r2, [pc, #220]	@ (8004f1c <HAL_DMA_Abort+0x61c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d022      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a35      	ldr	r2, [pc, #212]	@ (8004f20 <HAL_DMA_Abort+0x620>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01d      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a34      	ldr	r2, [pc, #208]	@ (8004f24 <HAL_DMA_Abort+0x624>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d018      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a32      	ldr	r2, [pc, #200]	@ (8004f28 <HAL_DMA_Abort+0x628>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a31      	ldr	r2, [pc, #196]	@ (8004f2c <HAL_DMA_Abort+0x62c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00e      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2f      	ldr	r2, [pc, #188]	@ (8004f30 <HAL_DMA_Abort+0x630>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d009      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2e      	ldr	r2, [pc, #184]	@ (8004f34 <HAL_DMA_Abort+0x634>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <HAL_DMA_Abort+0x58a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2c      	ldr	r2, [pc, #176]	@ (8004f38 <HAL_DMA_Abort+0x638>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d101      	bne.n	8004e8e <HAL_DMA_Abort+0x58e>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <HAL_DMA_Abort+0x590>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d015      	beq.n	8004ec0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e9c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00c      	beq.n	8004ec0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004eb4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004ebe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40020010 	.word	0x40020010
 8004ee0:	40020028 	.word	0x40020028
 8004ee4:	40020040 	.word	0x40020040
 8004ee8:	40020058 	.word	0x40020058
 8004eec:	40020070 	.word	0x40020070
 8004ef0:	40020088 	.word	0x40020088
 8004ef4:	400200a0 	.word	0x400200a0
 8004ef8:	400200b8 	.word	0x400200b8
 8004efc:	40020410 	.word	0x40020410
 8004f00:	40020428 	.word	0x40020428
 8004f04:	40020440 	.word	0x40020440
 8004f08:	40020458 	.word	0x40020458
 8004f0c:	40020470 	.word	0x40020470
 8004f10:	40020488 	.word	0x40020488
 8004f14:	400204a0 	.word	0x400204a0
 8004f18:	400204b8 	.word	0x400204b8
 8004f1c:	58025408 	.word	0x58025408
 8004f20:	5802541c 	.word	0x5802541c
 8004f24:	58025430 	.word	0x58025430
 8004f28:	58025444 	.word	0x58025444
 8004f2c:	58025458 	.word	0x58025458
 8004f30:	5802546c 	.word	0x5802546c
 8004f34:	58025480 	.word	0x58025480
 8004f38:	58025494 	.word	0x58025494

08004f3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e237      	b.n	80053be <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d004      	beq.n	8004f64 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2280      	movs	r2, #128	@ 0x80
 8004f5e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e22c      	b.n	80053be <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a5c      	ldr	r2, [pc, #368]	@ (80050dc <HAL_DMA_Abort_IT+0x1a0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d04a      	beq.n	8005004 <HAL_DMA_Abort_IT+0xc8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a5b      	ldr	r2, [pc, #364]	@ (80050e0 <HAL_DMA_Abort_IT+0x1a4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d045      	beq.n	8005004 <HAL_DMA_Abort_IT+0xc8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a59      	ldr	r2, [pc, #356]	@ (80050e4 <HAL_DMA_Abort_IT+0x1a8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d040      	beq.n	8005004 <HAL_DMA_Abort_IT+0xc8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a58      	ldr	r2, [pc, #352]	@ (80050e8 <HAL_DMA_Abort_IT+0x1ac>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d03b      	beq.n	8005004 <HAL_DMA_Abort_IT+0xc8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a56      	ldr	r2, [pc, #344]	@ (80050ec <HAL_DMA_Abort_IT+0x1b0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d036      	beq.n	8005004 <HAL_DMA_Abort_IT+0xc8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a55      	ldr	r2, [pc, #340]	@ (80050f0 <HAL_DMA_Abort_IT+0x1b4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d031      	beq.n	8005004 <HAL_DMA_Abort_IT+0xc8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a53      	ldr	r2, [pc, #332]	@ (80050f4 <HAL_DMA_Abort_IT+0x1b8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d02c      	beq.n	8005004 <HAL_DMA_Abort_IT+0xc8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a52      	ldr	r2, [pc, #328]	@ (80050f8 <HAL_DMA_Abort_IT+0x1bc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d027      	beq.n	8005004 <HAL_DMA_Abort_IT+0xc8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a50      	ldr	r2, [pc, #320]	@ (80050fc <HAL_DMA_Abort_IT+0x1c0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d022      	beq.n	8005004 <HAL_DMA_Abort_IT+0xc8>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a4f      	ldr	r2, [pc, #316]	@ (8005100 <HAL_DMA_Abort_IT+0x1c4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d01d      	beq.n	8005004 <HAL_DMA_Abort_IT+0xc8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a4d      	ldr	r2, [pc, #308]	@ (8005104 <HAL_DMA_Abort_IT+0x1c8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d018      	beq.n	8005004 <HAL_DMA_Abort_IT+0xc8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a4c      	ldr	r2, [pc, #304]	@ (8005108 <HAL_DMA_Abort_IT+0x1cc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d013      	beq.n	8005004 <HAL_DMA_Abort_IT+0xc8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a4a      	ldr	r2, [pc, #296]	@ (800510c <HAL_DMA_Abort_IT+0x1d0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00e      	beq.n	8005004 <HAL_DMA_Abort_IT+0xc8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a49      	ldr	r2, [pc, #292]	@ (8005110 <HAL_DMA_Abort_IT+0x1d4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d009      	beq.n	8005004 <HAL_DMA_Abort_IT+0xc8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a47      	ldr	r2, [pc, #284]	@ (8005114 <HAL_DMA_Abort_IT+0x1d8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <HAL_DMA_Abort_IT+0xc8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a46      	ldr	r2, [pc, #280]	@ (8005118 <HAL_DMA_Abort_IT+0x1dc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d101      	bne.n	8005008 <HAL_DMA_Abort_IT+0xcc>
 8005004:	2301      	movs	r3, #1
 8005006:	e000      	b.n	800500a <HAL_DMA_Abort_IT+0xce>
 8005008:	2300      	movs	r3, #0
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8086 	beq.w	800511c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2204      	movs	r2, #4
 8005014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a2f      	ldr	r2, [pc, #188]	@ (80050dc <HAL_DMA_Abort_IT+0x1a0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d04a      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x17c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a2e      	ldr	r2, [pc, #184]	@ (80050e0 <HAL_DMA_Abort_IT+0x1a4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d045      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x17c>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a2c      	ldr	r2, [pc, #176]	@ (80050e4 <HAL_DMA_Abort_IT+0x1a8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d040      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x17c>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a2b      	ldr	r2, [pc, #172]	@ (80050e8 <HAL_DMA_Abort_IT+0x1ac>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d03b      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x17c>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a29      	ldr	r2, [pc, #164]	@ (80050ec <HAL_DMA_Abort_IT+0x1b0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d036      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x17c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a28      	ldr	r2, [pc, #160]	@ (80050f0 <HAL_DMA_Abort_IT+0x1b4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d031      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x17c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a26      	ldr	r2, [pc, #152]	@ (80050f4 <HAL_DMA_Abort_IT+0x1b8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d02c      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x17c>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a25      	ldr	r2, [pc, #148]	@ (80050f8 <HAL_DMA_Abort_IT+0x1bc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d027      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x17c>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a23      	ldr	r2, [pc, #140]	@ (80050fc <HAL_DMA_Abort_IT+0x1c0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d022      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x17c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a22      	ldr	r2, [pc, #136]	@ (8005100 <HAL_DMA_Abort_IT+0x1c4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d01d      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x17c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a20      	ldr	r2, [pc, #128]	@ (8005104 <HAL_DMA_Abort_IT+0x1c8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d018      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x17c>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1f      	ldr	r2, [pc, #124]	@ (8005108 <HAL_DMA_Abort_IT+0x1cc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x17c>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1d      	ldr	r2, [pc, #116]	@ (800510c <HAL_DMA_Abort_IT+0x1d0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00e      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x17c>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1c      	ldr	r2, [pc, #112]	@ (8005110 <HAL_DMA_Abort_IT+0x1d4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d009      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x17c>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005114 <HAL_DMA_Abort_IT+0x1d8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x17c>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a19      	ldr	r2, [pc, #100]	@ (8005118 <HAL_DMA_Abort_IT+0x1dc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d108      	bne.n	80050ca <HAL_DMA_Abort_IT+0x18e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0201 	bic.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	e178      	b.n	80053bc <HAL_DMA_Abort_IT+0x480>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e16f      	b.n	80053bc <HAL_DMA_Abort_IT+0x480>
 80050dc:	40020010 	.word	0x40020010
 80050e0:	40020028 	.word	0x40020028
 80050e4:	40020040 	.word	0x40020040
 80050e8:	40020058 	.word	0x40020058
 80050ec:	40020070 	.word	0x40020070
 80050f0:	40020088 	.word	0x40020088
 80050f4:	400200a0 	.word	0x400200a0
 80050f8:	400200b8 	.word	0x400200b8
 80050fc:	40020410 	.word	0x40020410
 8005100:	40020428 	.word	0x40020428
 8005104:	40020440 	.word	0x40020440
 8005108:	40020458 	.word	0x40020458
 800510c:	40020470 	.word	0x40020470
 8005110:	40020488 	.word	0x40020488
 8005114:	400204a0 	.word	0x400204a0
 8005118:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 020e 	bic.w	r2, r2, #14
 800512a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a6c      	ldr	r2, [pc, #432]	@ (80052e4 <HAL_DMA_Abort_IT+0x3a8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d04a      	beq.n	80051cc <HAL_DMA_Abort_IT+0x290>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a6b      	ldr	r2, [pc, #428]	@ (80052e8 <HAL_DMA_Abort_IT+0x3ac>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d045      	beq.n	80051cc <HAL_DMA_Abort_IT+0x290>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a69      	ldr	r2, [pc, #420]	@ (80052ec <HAL_DMA_Abort_IT+0x3b0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d040      	beq.n	80051cc <HAL_DMA_Abort_IT+0x290>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a68      	ldr	r2, [pc, #416]	@ (80052f0 <HAL_DMA_Abort_IT+0x3b4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d03b      	beq.n	80051cc <HAL_DMA_Abort_IT+0x290>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a66      	ldr	r2, [pc, #408]	@ (80052f4 <HAL_DMA_Abort_IT+0x3b8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d036      	beq.n	80051cc <HAL_DMA_Abort_IT+0x290>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a65      	ldr	r2, [pc, #404]	@ (80052f8 <HAL_DMA_Abort_IT+0x3bc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d031      	beq.n	80051cc <HAL_DMA_Abort_IT+0x290>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a63      	ldr	r2, [pc, #396]	@ (80052fc <HAL_DMA_Abort_IT+0x3c0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d02c      	beq.n	80051cc <HAL_DMA_Abort_IT+0x290>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a62      	ldr	r2, [pc, #392]	@ (8005300 <HAL_DMA_Abort_IT+0x3c4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d027      	beq.n	80051cc <HAL_DMA_Abort_IT+0x290>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a60      	ldr	r2, [pc, #384]	@ (8005304 <HAL_DMA_Abort_IT+0x3c8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d022      	beq.n	80051cc <HAL_DMA_Abort_IT+0x290>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a5f      	ldr	r2, [pc, #380]	@ (8005308 <HAL_DMA_Abort_IT+0x3cc>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d01d      	beq.n	80051cc <HAL_DMA_Abort_IT+0x290>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a5d      	ldr	r2, [pc, #372]	@ (800530c <HAL_DMA_Abort_IT+0x3d0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d018      	beq.n	80051cc <HAL_DMA_Abort_IT+0x290>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a5c      	ldr	r2, [pc, #368]	@ (8005310 <HAL_DMA_Abort_IT+0x3d4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d013      	beq.n	80051cc <HAL_DMA_Abort_IT+0x290>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a5a      	ldr	r2, [pc, #360]	@ (8005314 <HAL_DMA_Abort_IT+0x3d8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00e      	beq.n	80051cc <HAL_DMA_Abort_IT+0x290>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a59      	ldr	r2, [pc, #356]	@ (8005318 <HAL_DMA_Abort_IT+0x3dc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d009      	beq.n	80051cc <HAL_DMA_Abort_IT+0x290>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a57      	ldr	r2, [pc, #348]	@ (800531c <HAL_DMA_Abort_IT+0x3e0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d004      	beq.n	80051cc <HAL_DMA_Abort_IT+0x290>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a56      	ldr	r2, [pc, #344]	@ (8005320 <HAL_DMA_Abort_IT+0x3e4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d108      	bne.n	80051de <HAL_DMA_Abort_IT+0x2a2>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0201 	bic.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	e007      	b.n	80051ee <HAL_DMA_Abort_IT+0x2b2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0201 	bic.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a3c      	ldr	r2, [pc, #240]	@ (80052e4 <HAL_DMA_Abort_IT+0x3a8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d072      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a3a      	ldr	r2, [pc, #232]	@ (80052e8 <HAL_DMA_Abort_IT+0x3ac>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d06d      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a39      	ldr	r2, [pc, #228]	@ (80052ec <HAL_DMA_Abort_IT+0x3b0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d068      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a37      	ldr	r2, [pc, #220]	@ (80052f0 <HAL_DMA_Abort_IT+0x3b4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d063      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a36      	ldr	r2, [pc, #216]	@ (80052f4 <HAL_DMA_Abort_IT+0x3b8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d05e      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a34      	ldr	r2, [pc, #208]	@ (80052f8 <HAL_DMA_Abort_IT+0x3bc>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d059      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a33      	ldr	r2, [pc, #204]	@ (80052fc <HAL_DMA_Abort_IT+0x3c0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d054      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a31      	ldr	r2, [pc, #196]	@ (8005300 <HAL_DMA_Abort_IT+0x3c4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d04f      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a30      	ldr	r2, [pc, #192]	@ (8005304 <HAL_DMA_Abort_IT+0x3c8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d04a      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2e      	ldr	r2, [pc, #184]	@ (8005308 <HAL_DMA_Abort_IT+0x3cc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d045      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a2d      	ldr	r2, [pc, #180]	@ (800530c <HAL_DMA_Abort_IT+0x3d0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d040      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2b      	ldr	r2, [pc, #172]	@ (8005310 <HAL_DMA_Abort_IT+0x3d4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d03b      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a2a      	ldr	r2, [pc, #168]	@ (8005314 <HAL_DMA_Abort_IT+0x3d8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d036      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a28      	ldr	r2, [pc, #160]	@ (8005318 <HAL_DMA_Abort_IT+0x3dc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d031      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a27      	ldr	r2, [pc, #156]	@ (800531c <HAL_DMA_Abort_IT+0x3e0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d02c      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a25      	ldr	r2, [pc, #148]	@ (8005320 <HAL_DMA_Abort_IT+0x3e4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d027      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a24      	ldr	r2, [pc, #144]	@ (8005324 <HAL_DMA_Abort_IT+0x3e8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d022      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a22      	ldr	r2, [pc, #136]	@ (8005328 <HAL_DMA_Abort_IT+0x3ec>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d01d      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a21      	ldr	r2, [pc, #132]	@ (800532c <HAL_DMA_Abort_IT+0x3f0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d018      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005330 <HAL_DMA_Abort_IT+0x3f4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005334 <HAL_DMA_Abort_IT+0x3f8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00e      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005338 <HAL_DMA_Abort_IT+0x3fc>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d009      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1b      	ldr	r2, [pc, #108]	@ (800533c <HAL_DMA_Abort_IT+0x400>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d004      	beq.n	80052de <HAL_DMA_Abort_IT+0x3a2>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a19      	ldr	r2, [pc, #100]	@ (8005340 <HAL_DMA_Abort_IT+0x404>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d132      	bne.n	8005344 <HAL_DMA_Abort_IT+0x408>
 80052de:	2301      	movs	r3, #1
 80052e0:	e031      	b.n	8005346 <HAL_DMA_Abort_IT+0x40a>
 80052e2:	bf00      	nop
 80052e4:	40020010 	.word	0x40020010
 80052e8:	40020028 	.word	0x40020028
 80052ec:	40020040 	.word	0x40020040
 80052f0:	40020058 	.word	0x40020058
 80052f4:	40020070 	.word	0x40020070
 80052f8:	40020088 	.word	0x40020088
 80052fc:	400200a0 	.word	0x400200a0
 8005300:	400200b8 	.word	0x400200b8
 8005304:	40020410 	.word	0x40020410
 8005308:	40020428 	.word	0x40020428
 800530c:	40020440 	.word	0x40020440
 8005310:	40020458 	.word	0x40020458
 8005314:	40020470 	.word	0x40020470
 8005318:	40020488 	.word	0x40020488
 800531c:	400204a0 	.word	0x400204a0
 8005320:	400204b8 	.word	0x400204b8
 8005324:	58025408 	.word	0x58025408
 8005328:	5802541c 	.word	0x5802541c
 800532c:	58025430 	.word	0x58025430
 8005330:	58025444 	.word	0x58025444
 8005334:	58025458 	.word	0x58025458
 8005338:	5802546c 	.word	0x5802546c
 800533c:	58025480 	.word	0x58025480
 8005340:	58025494 	.word	0x58025494
 8005344:	2300      	movs	r3, #0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d028      	beq.n	800539c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005354:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005358:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005364:	f003 031f 	and.w	r3, r3, #31
 8005368:	2201      	movs	r2, #1
 800536a:	409a      	lsls	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005378:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00c      	beq.n	800539c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800538c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005390:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800539a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop

080053c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	@ 0x28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053d4:	4b67      	ldr	r3, [pc, #412]	@ (8005574 <HAL_DMA_IRQHandler+0x1ac>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a67      	ldr	r2, [pc, #412]	@ (8005578 <HAL_DMA_IRQHandler+0x1b0>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	0a9b      	lsrs	r3, r3, #10
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a5f      	ldr	r2, [pc, #380]	@ (800557c <HAL_DMA_IRQHandler+0x1b4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d04a      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a5d      	ldr	r2, [pc, #372]	@ (8005580 <HAL_DMA_IRQHandler+0x1b8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d045      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a5c      	ldr	r2, [pc, #368]	@ (8005584 <HAL_DMA_IRQHandler+0x1bc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d040      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a5a      	ldr	r2, [pc, #360]	@ (8005588 <HAL_DMA_IRQHandler+0x1c0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d03b      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a59      	ldr	r2, [pc, #356]	@ (800558c <HAL_DMA_IRQHandler+0x1c4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d036      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a57      	ldr	r2, [pc, #348]	@ (8005590 <HAL_DMA_IRQHandler+0x1c8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d031      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a56      	ldr	r2, [pc, #344]	@ (8005594 <HAL_DMA_IRQHandler+0x1cc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d02c      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a54      	ldr	r2, [pc, #336]	@ (8005598 <HAL_DMA_IRQHandler+0x1d0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d027      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a53      	ldr	r2, [pc, #332]	@ (800559c <HAL_DMA_IRQHandler+0x1d4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d022      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a51      	ldr	r2, [pc, #324]	@ (80055a0 <HAL_DMA_IRQHandler+0x1d8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d01d      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a50      	ldr	r2, [pc, #320]	@ (80055a4 <HAL_DMA_IRQHandler+0x1dc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d018      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a4e      	ldr	r2, [pc, #312]	@ (80055a8 <HAL_DMA_IRQHandler+0x1e0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a4d      	ldr	r2, [pc, #308]	@ (80055ac <HAL_DMA_IRQHandler+0x1e4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a4b      	ldr	r2, [pc, #300]	@ (80055b0 <HAL_DMA_IRQHandler+0x1e8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d009      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a4a      	ldr	r2, [pc, #296]	@ (80055b4 <HAL_DMA_IRQHandler+0x1ec>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_DMA_IRQHandler+0xd2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a48      	ldr	r2, [pc, #288]	@ (80055b8 <HAL_DMA_IRQHandler+0x1f0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d101      	bne.n	800549e <HAL_DMA_IRQHandler+0xd6>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <HAL_DMA_IRQHandler+0xd8>
 800549e:	2300      	movs	r3, #0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 842b 	beq.w	8005cfc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054aa:	f003 031f 	and.w	r3, r3, #31
 80054ae:	2208      	movs	r2, #8
 80054b0:	409a      	lsls	r2, r3
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	4013      	ands	r3, r2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 80a2 	beq.w	8005600 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a2e      	ldr	r2, [pc, #184]	@ (800557c <HAL_DMA_IRQHandler+0x1b4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d04a      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005580 <HAL_DMA_IRQHandler+0x1b8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d045      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005584 <HAL_DMA_IRQHandler+0x1bc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d040      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2a      	ldr	r2, [pc, #168]	@ (8005588 <HAL_DMA_IRQHandler+0x1c0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d03b      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a28      	ldr	r2, [pc, #160]	@ (800558c <HAL_DMA_IRQHandler+0x1c4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d036      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a27      	ldr	r2, [pc, #156]	@ (8005590 <HAL_DMA_IRQHandler+0x1c8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d031      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a25      	ldr	r2, [pc, #148]	@ (8005594 <HAL_DMA_IRQHandler+0x1cc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d02c      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a24      	ldr	r2, [pc, #144]	@ (8005598 <HAL_DMA_IRQHandler+0x1d0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d027      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a22      	ldr	r2, [pc, #136]	@ (800559c <HAL_DMA_IRQHandler+0x1d4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d022      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a21      	ldr	r2, [pc, #132]	@ (80055a0 <HAL_DMA_IRQHandler+0x1d8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d01d      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1f      	ldr	r2, [pc, #124]	@ (80055a4 <HAL_DMA_IRQHandler+0x1dc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d018      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1e      	ldr	r2, [pc, #120]	@ (80055a8 <HAL_DMA_IRQHandler+0x1e0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d013      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1c      	ldr	r2, [pc, #112]	@ (80055ac <HAL_DMA_IRQHandler+0x1e4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00e      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1b      	ldr	r2, [pc, #108]	@ (80055b0 <HAL_DMA_IRQHandler+0x1e8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d009      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a19      	ldr	r2, [pc, #100]	@ (80055b4 <HAL_DMA_IRQHandler+0x1ec>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d004      	beq.n	800555c <HAL_DMA_IRQHandler+0x194>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a18      	ldr	r2, [pc, #96]	@ (80055b8 <HAL_DMA_IRQHandler+0x1f0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d12f      	bne.n	80055bc <HAL_DMA_IRQHandler+0x1f4>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b00      	cmp	r3, #0
 8005568:	bf14      	ite	ne
 800556a:	2301      	movne	r3, #1
 800556c:	2300      	moveq	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	e02e      	b.n	80055d0 <HAL_DMA_IRQHandler+0x208>
 8005572:	bf00      	nop
 8005574:	24000018 	.word	0x24000018
 8005578:	1b4e81b5 	.word	0x1b4e81b5
 800557c:	40020010 	.word	0x40020010
 8005580:	40020028 	.word	0x40020028
 8005584:	40020040 	.word	0x40020040
 8005588:	40020058 	.word	0x40020058
 800558c:	40020070 	.word	0x40020070
 8005590:	40020088 	.word	0x40020088
 8005594:	400200a0 	.word	0x400200a0
 8005598:	400200b8 	.word	0x400200b8
 800559c:	40020410 	.word	0x40020410
 80055a0:	40020428 	.word	0x40020428
 80055a4:	40020440 	.word	0x40020440
 80055a8:	40020458 	.word	0x40020458
 80055ac:	40020470 	.word	0x40020470
 80055b0:	40020488 	.word	0x40020488
 80055b4:	400204a0 	.word	0x400204a0
 80055b8:	400204b8 	.word	0x400204b8
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bf14      	ite	ne
 80055ca:	2301      	movne	r3, #1
 80055cc:	2300      	moveq	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d015      	beq.n	8005600 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0204 	bic.w	r2, r2, #4
 80055e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	2208      	movs	r2, #8
 80055ee:	409a      	lsls	r2, r3
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f8:	f043 0201 	orr.w	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005604:	f003 031f 	and.w	r3, r3, #31
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	fa22 f303 	lsr.w	r3, r2, r3
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d06e      	beq.n	80056f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a69      	ldr	r2, [pc, #420]	@ (80057c0 <HAL_DMA_IRQHandler+0x3f8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d04a      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a67      	ldr	r2, [pc, #412]	@ (80057c4 <HAL_DMA_IRQHandler+0x3fc>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d045      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a66      	ldr	r2, [pc, #408]	@ (80057c8 <HAL_DMA_IRQHandler+0x400>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d040      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a64      	ldr	r2, [pc, #400]	@ (80057cc <HAL_DMA_IRQHandler+0x404>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d03b      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a63      	ldr	r2, [pc, #396]	@ (80057d0 <HAL_DMA_IRQHandler+0x408>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d036      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a61      	ldr	r2, [pc, #388]	@ (80057d4 <HAL_DMA_IRQHandler+0x40c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d031      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a60      	ldr	r2, [pc, #384]	@ (80057d8 <HAL_DMA_IRQHandler+0x410>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d02c      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a5e      	ldr	r2, [pc, #376]	@ (80057dc <HAL_DMA_IRQHandler+0x414>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d027      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a5d      	ldr	r2, [pc, #372]	@ (80057e0 <HAL_DMA_IRQHandler+0x418>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d022      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a5b      	ldr	r2, [pc, #364]	@ (80057e4 <HAL_DMA_IRQHandler+0x41c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d01d      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a5a      	ldr	r2, [pc, #360]	@ (80057e8 <HAL_DMA_IRQHandler+0x420>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d018      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a58      	ldr	r2, [pc, #352]	@ (80057ec <HAL_DMA_IRQHandler+0x424>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d013      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a57      	ldr	r2, [pc, #348]	@ (80057f0 <HAL_DMA_IRQHandler+0x428>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00e      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a55      	ldr	r2, [pc, #340]	@ (80057f4 <HAL_DMA_IRQHandler+0x42c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d009      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a54      	ldr	r2, [pc, #336]	@ (80057f8 <HAL_DMA_IRQHandler+0x430>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d004      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2ee>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a52      	ldr	r2, [pc, #328]	@ (80057fc <HAL_DMA_IRQHandler+0x434>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d10a      	bne.n	80056cc <HAL_DMA_IRQHandler+0x304>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	bf14      	ite	ne
 80056c4:	2301      	movne	r3, #1
 80056c6:	2300      	moveq	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	e003      	b.n	80056d4 <HAL_DMA_IRQHandler+0x30c>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2300      	movs	r3, #0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00d      	beq.n	80056f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056dc:	f003 031f 	and.w	r3, r3, #31
 80056e0:	2201      	movs	r2, #1
 80056e2:	409a      	lsls	r2, r3
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ec:	f043 0202 	orr.w	r2, r3, #2
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f8:	f003 031f 	and.w	r3, r3, #31
 80056fc:	2204      	movs	r2, #4
 80056fe:	409a      	lsls	r2, r3
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	4013      	ands	r3, r2
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 808f 	beq.w	8005828 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a2c      	ldr	r2, [pc, #176]	@ (80057c0 <HAL_DMA_IRQHandler+0x3f8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d04a      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a2a      	ldr	r2, [pc, #168]	@ (80057c4 <HAL_DMA_IRQHandler+0x3fc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d045      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a29      	ldr	r2, [pc, #164]	@ (80057c8 <HAL_DMA_IRQHandler+0x400>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d040      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a27      	ldr	r2, [pc, #156]	@ (80057cc <HAL_DMA_IRQHandler+0x404>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d03b      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a26      	ldr	r2, [pc, #152]	@ (80057d0 <HAL_DMA_IRQHandler+0x408>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d036      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a24      	ldr	r2, [pc, #144]	@ (80057d4 <HAL_DMA_IRQHandler+0x40c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d031      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a23      	ldr	r2, [pc, #140]	@ (80057d8 <HAL_DMA_IRQHandler+0x410>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d02c      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a21      	ldr	r2, [pc, #132]	@ (80057dc <HAL_DMA_IRQHandler+0x414>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d027      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a20      	ldr	r2, [pc, #128]	@ (80057e0 <HAL_DMA_IRQHandler+0x418>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d022      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1e      	ldr	r2, [pc, #120]	@ (80057e4 <HAL_DMA_IRQHandler+0x41c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d01d      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1d      	ldr	r2, [pc, #116]	@ (80057e8 <HAL_DMA_IRQHandler+0x420>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d018      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1b      	ldr	r2, [pc, #108]	@ (80057ec <HAL_DMA_IRQHandler+0x424>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d013      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1a      	ldr	r2, [pc, #104]	@ (80057f0 <HAL_DMA_IRQHandler+0x428>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00e      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a18      	ldr	r2, [pc, #96]	@ (80057f4 <HAL_DMA_IRQHandler+0x42c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d009      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a17      	ldr	r2, [pc, #92]	@ (80057f8 <HAL_DMA_IRQHandler+0x430>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d004      	beq.n	80057aa <HAL_DMA_IRQHandler+0x3e2>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a15      	ldr	r2, [pc, #84]	@ (80057fc <HAL_DMA_IRQHandler+0x434>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d12a      	bne.n	8005800 <HAL_DMA_IRQHandler+0x438>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	bf14      	ite	ne
 80057b8:	2301      	movne	r3, #1
 80057ba:	2300      	moveq	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	e023      	b.n	8005808 <HAL_DMA_IRQHandler+0x440>
 80057c0:	40020010 	.word	0x40020010
 80057c4:	40020028 	.word	0x40020028
 80057c8:	40020040 	.word	0x40020040
 80057cc:	40020058 	.word	0x40020058
 80057d0:	40020070 	.word	0x40020070
 80057d4:	40020088 	.word	0x40020088
 80057d8:	400200a0 	.word	0x400200a0
 80057dc:	400200b8 	.word	0x400200b8
 80057e0:	40020410 	.word	0x40020410
 80057e4:	40020428 	.word	0x40020428
 80057e8:	40020440 	.word	0x40020440
 80057ec:	40020458 	.word	0x40020458
 80057f0:	40020470 	.word	0x40020470
 80057f4:	40020488 	.word	0x40020488
 80057f8:	400204a0 	.word	0x400204a0
 80057fc:	400204b8 	.word	0x400204b8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2300      	movs	r3, #0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00d      	beq.n	8005828 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	2204      	movs	r2, #4
 8005816:	409a      	lsls	r2, r3
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005820:	f043 0204 	orr.w	r2, r3, #4
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	2210      	movs	r2, #16
 8005832:	409a      	lsls	r2, r3
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	4013      	ands	r3, r2
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 80a6 	beq.w	800598a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a85      	ldr	r2, [pc, #532]	@ (8005a58 <HAL_DMA_IRQHandler+0x690>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d04a      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a83      	ldr	r2, [pc, #524]	@ (8005a5c <HAL_DMA_IRQHandler+0x694>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d045      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a82      	ldr	r2, [pc, #520]	@ (8005a60 <HAL_DMA_IRQHandler+0x698>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d040      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a80      	ldr	r2, [pc, #512]	@ (8005a64 <HAL_DMA_IRQHandler+0x69c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d03b      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a7f      	ldr	r2, [pc, #508]	@ (8005a68 <HAL_DMA_IRQHandler+0x6a0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d036      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a7d      	ldr	r2, [pc, #500]	@ (8005a6c <HAL_DMA_IRQHandler+0x6a4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d031      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a7c      	ldr	r2, [pc, #496]	@ (8005a70 <HAL_DMA_IRQHandler+0x6a8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d02c      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a7a      	ldr	r2, [pc, #488]	@ (8005a74 <HAL_DMA_IRQHandler+0x6ac>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d027      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a79      	ldr	r2, [pc, #484]	@ (8005a78 <HAL_DMA_IRQHandler+0x6b0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d022      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a77      	ldr	r2, [pc, #476]	@ (8005a7c <HAL_DMA_IRQHandler+0x6b4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01d      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a76      	ldr	r2, [pc, #472]	@ (8005a80 <HAL_DMA_IRQHandler+0x6b8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d018      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a74      	ldr	r2, [pc, #464]	@ (8005a84 <HAL_DMA_IRQHandler+0x6bc>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d013      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a73      	ldr	r2, [pc, #460]	@ (8005a88 <HAL_DMA_IRQHandler+0x6c0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00e      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a71      	ldr	r2, [pc, #452]	@ (8005a8c <HAL_DMA_IRQHandler+0x6c4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d009      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a70      	ldr	r2, [pc, #448]	@ (8005a90 <HAL_DMA_IRQHandler+0x6c8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d004      	beq.n	80058de <HAL_DMA_IRQHandler+0x516>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a6e      	ldr	r2, [pc, #440]	@ (8005a94 <HAL_DMA_IRQHandler+0x6cc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d10a      	bne.n	80058f4 <HAL_DMA_IRQHandler+0x52c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	bf14      	ite	ne
 80058ec:	2301      	movne	r3, #1
 80058ee:	2300      	moveq	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	e009      	b.n	8005908 <HAL_DMA_IRQHandler+0x540>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	bf14      	ite	ne
 8005902:	2301      	movne	r3, #1
 8005904:	2300      	moveq	r3, #0
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d03e      	beq.n	800598a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	2210      	movs	r2, #16
 8005916:	409a      	lsls	r2, r3
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d018      	beq.n	800595c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d108      	bne.n	800594a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	d024      	beq.n	800598a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	4798      	blx	r3
 8005948:	e01f      	b.n	800598a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800594e:	2b00      	cmp	r3, #0
 8005950:	d01b      	beq.n	800598a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	4798      	blx	r3
 800595a:	e016      	b.n	800598a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005966:	2b00      	cmp	r3, #0
 8005968:	d107      	bne.n	800597a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0208 	bic.w	r2, r2, #8
 8005978:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800598e:	f003 031f 	and.w	r3, r3, #31
 8005992:	2220      	movs	r2, #32
 8005994:	409a      	lsls	r2, r3
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	4013      	ands	r3, r2
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8110 	beq.w	8005bc0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005a58 <HAL_DMA_IRQHandler+0x690>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d04a      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a2b      	ldr	r2, [pc, #172]	@ (8005a5c <HAL_DMA_IRQHandler+0x694>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d045      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a29      	ldr	r2, [pc, #164]	@ (8005a60 <HAL_DMA_IRQHandler+0x698>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d040      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a28      	ldr	r2, [pc, #160]	@ (8005a64 <HAL_DMA_IRQHandler+0x69c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d03b      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a26      	ldr	r2, [pc, #152]	@ (8005a68 <HAL_DMA_IRQHandler+0x6a0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d036      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a25      	ldr	r2, [pc, #148]	@ (8005a6c <HAL_DMA_IRQHandler+0x6a4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d031      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a23      	ldr	r2, [pc, #140]	@ (8005a70 <HAL_DMA_IRQHandler+0x6a8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d02c      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a22      	ldr	r2, [pc, #136]	@ (8005a74 <HAL_DMA_IRQHandler+0x6ac>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d027      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a20      	ldr	r2, [pc, #128]	@ (8005a78 <HAL_DMA_IRQHandler+0x6b0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d022      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a1f      	ldr	r2, [pc, #124]	@ (8005a7c <HAL_DMA_IRQHandler+0x6b4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d01d      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1d      	ldr	r2, [pc, #116]	@ (8005a80 <HAL_DMA_IRQHandler+0x6b8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d018      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1c      	ldr	r2, [pc, #112]	@ (8005a84 <HAL_DMA_IRQHandler+0x6bc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d013      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a88 <HAL_DMA_IRQHandler+0x6c0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d00e      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a19      	ldr	r2, [pc, #100]	@ (8005a8c <HAL_DMA_IRQHandler+0x6c4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d009      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a17      	ldr	r2, [pc, #92]	@ (8005a90 <HAL_DMA_IRQHandler+0x6c8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d004      	beq.n	8005a40 <HAL_DMA_IRQHandler+0x678>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a16      	ldr	r2, [pc, #88]	@ (8005a94 <HAL_DMA_IRQHandler+0x6cc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d12b      	bne.n	8005a98 <HAL_DMA_IRQHandler+0x6d0>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bf14      	ite	ne
 8005a4e:	2301      	movne	r3, #1
 8005a50:	2300      	moveq	r3, #0
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	e02a      	b.n	8005aac <HAL_DMA_IRQHandler+0x6e4>
 8005a56:	bf00      	nop
 8005a58:	40020010 	.word	0x40020010
 8005a5c:	40020028 	.word	0x40020028
 8005a60:	40020040 	.word	0x40020040
 8005a64:	40020058 	.word	0x40020058
 8005a68:	40020070 	.word	0x40020070
 8005a6c:	40020088 	.word	0x40020088
 8005a70:	400200a0 	.word	0x400200a0
 8005a74:	400200b8 	.word	0x400200b8
 8005a78:	40020410 	.word	0x40020410
 8005a7c:	40020428 	.word	0x40020428
 8005a80:	40020440 	.word	0x40020440
 8005a84:	40020458 	.word	0x40020458
 8005a88:	40020470 	.word	0x40020470
 8005a8c:	40020488 	.word	0x40020488
 8005a90:	400204a0 	.word	0x400204a0
 8005a94:	400204b8 	.word	0x400204b8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bf14      	ite	ne
 8005aa6:	2301      	movne	r3, #1
 8005aa8:	2300      	moveq	r3, #0
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 8087 	beq.w	8005bc0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ab6:	f003 031f 	and.w	r3, r3, #31
 8005aba:	2220      	movs	r2, #32
 8005abc:	409a      	lsls	r2, r3
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d139      	bne.n	8005b42 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0216 	bic.w	r2, r2, #22
 8005adc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695a      	ldr	r2, [r3, #20]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005aec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d103      	bne.n	8005afe <HAL_DMA_IRQHandler+0x736>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d007      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0208 	bic.w	r2, r2, #8
 8005b0c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b12:	f003 031f 	and.w	r3, r3, #31
 8005b16:	223f      	movs	r2, #63	@ 0x3f
 8005b18:	409a      	lsls	r2, r3
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 834a 	beq.w	80061cc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4798      	blx	r3
          }
          return;
 8005b40:	e344      	b.n	80061cc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d018      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d108      	bne.n	8005b70 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d02c      	beq.n	8005bc0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	4798      	blx	r3
 8005b6e:	e027      	b.n	8005bc0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d023      	beq.n	8005bc0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	4798      	blx	r3
 8005b80:	e01e      	b.n	8005bc0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10f      	bne.n	8005bb0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0210 	bic.w	r2, r2, #16
 8005b9e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 8306 	beq.w	80061d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 8088 	beq.w	8005ce8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2204      	movs	r2, #4
 8005bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a7a      	ldr	r2, [pc, #488]	@ (8005dd0 <HAL_DMA_IRQHandler+0xa08>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d04a      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a79      	ldr	r2, [pc, #484]	@ (8005dd4 <HAL_DMA_IRQHandler+0xa0c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d045      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a77      	ldr	r2, [pc, #476]	@ (8005dd8 <HAL_DMA_IRQHandler+0xa10>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d040      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a76      	ldr	r2, [pc, #472]	@ (8005ddc <HAL_DMA_IRQHandler+0xa14>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d03b      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a74      	ldr	r2, [pc, #464]	@ (8005de0 <HAL_DMA_IRQHandler+0xa18>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d036      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a73      	ldr	r2, [pc, #460]	@ (8005de4 <HAL_DMA_IRQHandler+0xa1c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d031      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a71      	ldr	r2, [pc, #452]	@ (8005de8 <HAL_DMA_IRQHandler+0xa20>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d02c      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a70      	ldr	r2, [pc, #448]	@ (8005dec <HAL_DMA_IRQHandler+0xa24>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d027      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a6e      	ldr	r2, [pc, #440]	@ (8005df0 <HAL_DMA_IRQHandler+0xa28>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d022      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a6d      	ldr	r2, [pc, #436]	@ (8005df4 <HAL_DMA_IRQHandler+0xa2c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d01d      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a6b      	ldr	r2, [pc, #428]	@ (8005df8 <HAL_DMA_IRQHandler+0xa30>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d018      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a6a      	ldr	r2, [pc, #424]	@ (8005dfc <HAL_DMA_IRQHandler+0xa34>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d013      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a68      	ldr	r2, [pc, #416]	@ (8005e00 <HAL_DMA_IRQHandler+0xa38>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00e      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a67      	ldr	r2, [pc, #412]	@ (8005e04 <HAL_DMA_IRQHandler+0xa3c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d009      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a65      	ldr	r2, [pc, #404]	@ (8005e08 <HAL_DMA_IRQHandler+0xa40>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d004      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x8b8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a64      	ldr	r2, [pc, #400]	@ (8005e0c <HAL_DMA_IRQHandler+0xa44>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d108      	bne.n	8005c92 <HAL_DMA_IRQHandler+0x8ca>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0201 	bic.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	e007      	b.n	8005ca2 <HAL_DMA_IRQHandler+0x8da>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d307      	bcc.n	8005cbe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f2      	bne.n	8005ca2 <HAL_DMA_IRQHandler+0x8da>
 8005cbc:	e000      	b.n	8005cc0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005cbe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d004      	beq.n	8005cd8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005cd6:	e003      	b.n	8005ce0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 8272 	beq.w	80061d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	4798      	blx	r3
 8005cfa:	e26c      	b.n	80061d6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a43      	ldr	r2, [pc, #268]	@ (8005e10 <HAL_DMA_IRQHandler+0xa48>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d022      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x984>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a42      	ldr	r2, [pc, #264]	@ (8005e14 <HAL_DMA_IRQHandler+0xa4c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d01d      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x984>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a40      	ldr	r2, [pc, #256]	@ (8005e18 <HAL_DMA_IRQHandler+0xa50>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d018      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x984>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a3f      	ldr	r2, [pc, #252]	@ (8005e1c <HAL_DMA_IRQHandler+0xa54>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d013      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x984>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a3d      	ldr	r2, [pc, #244]	@ (8005e20 <HAL_DMA_IRQHandler+0xa58>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00e      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x984>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a3c      	ldr	r2, [pc, #240]	@ (8005e24 <HAL_DMA_IRQHandler+0xa5c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d009      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x984>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a3a      	ldr	r2, [pc, #232]	@ (8005e28 <HAL_DMA_IRQHandler+0xa60>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x984>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a39      	ldr	r2, [pc, #228]	@ (8005e2c <HAL_DMA_IRQHandler+0xa64>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d101      	bne.n	8005d50 <HAL_DMA_IRQHandler+0x988>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <HAL_DMA_IRQHandler+0x98a>
 8005d50:	2300      	movs	r3, #0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 823f 	beq.w	80061d6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	2204      	movs	r2, #4
 8005d6a:	409a      	lsls	r2, r3
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80cd 	beq.w	8005f10 <HAL_DMA_IRQHandler+0xb48>
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 80c7 	beq.w	8005f10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	409a      	lsls	r2, r3
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d049      	beq.n	8005e30 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8210 	beq.w	80061d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005db8:	e20a      	b.n	80061d0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 8206 	beq.w	80061d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dcc:	e200      	b.n	80061d0 <HAL_DMA_IRQHandler+0xe08>
 8005dce:	bf00      	nop
 8005dd0:	40020010 	.word	0x40020010
 8005dd4:	40020028 	.word	0x40020028
 8005dd8:	40020040 	.word	0x40020040
 8005ddc:	40020058 	.word	0x40020058
 8005de0:	40020070 	.word	0x40020070
 8005de4:	40020088 	.word	0x40020088
 8005de8:	400200a0 	.word	0x400200a0
 8005dec:	400200b8 	.word	0x400200b8
 8005df0:	40020410 	.word	0x40020410
 8005df4:	40020428 	.word	0x40020428
 8005df8:	40020440 	.word	0x40020440
 8005dfc:	40020458 	.word	0x40020458
 8005e00:	40020470 	.word	0x40020470
 8005e04:	40020488 	.word	0x40020488
 8005e08:	400204a0 	.word	0x400204a0
 8005e0c:	400204b8 	.word	0x400204b8
 8005e10:	58025408 	.word	0x58025408
 8005e14:	5802541c 	.word	0x5802541c
 8005e18:	58025430 	.word	0x58025430
 8005e1c:	58025444 	.word	0x58025444
 8005e20:	58025458 	.word	0x58025458
 8005e24:	5802546c 	.word	0x5802546c
 8005e28:	58025480 	.word	0x58025480
 8005e2c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d160      	bne.n	8005efc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a7f      	ldr	r2, [pc, #508]	@ (800603c <HAL_DMA_IRQHandler+0xc74>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d04a      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a7d      	ldr	r2, [pc, #500]	@ (8006040 <HAL_DMA_IRQHandler+0xc78>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d045      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a7c      	ldr	r2, [pc, #496]	@ (8006044 <HAL_DMA_IRQHandler+0xc7c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d040      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a7a      	ldr	r2, [pc, #488]	@ (8006048 <HAL_DMA_IRQHandler+0xc80>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d03b      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a79      	ldr	r2, [pc, #484]	@ (800604c <HAL_DMA_IRQHandler+0xc84>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d036      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a77      	ldr	r2, [pc, #476]	@ (8006050 <HAL_DMA_IRQHandler+0xc88>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d031      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a76      	ldr	r2, [pc, #472]	@ (8006054 <HAL_DMA_IRQHandler+0xc8c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d02c      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a74      	ldr	r2, [pc, #464]	@ (8006058 <HAL_DMA_IRQHandler+0xc90>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d027      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a73      	ldr	r2, [pc, #460]	@ (800605c <HAL_DMA_IRQHandler+0xc94>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d022      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a71      	ldr	r2, [pc, #452]	@ (8006060 <HAL_DMA_IRQHandler+0xc98>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d01d      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a70      	ldr	r2, [pc, #448]	@ (8006064 <HAL_DMA_IRQHandler+0xc9c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d018      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a6e      	ldr	r2, [pc, #440]	@ (8006068 <HAL_DMA_IRQHandler+0xca0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d013      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a6d      	ldr	r2, [pc, #436]	@ (800606c <HAL_DMA_IRQHandler+0xca4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00e      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a6b      	ldr	r2, [pc, #428]	@ (8006070 <HAL_DMA_IRQHandler+0xca8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d009      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a6a      	ldr	r2, [pc, #424]	@ (8006074 <HAL_DMA_IRQHandler+0xcac>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d004      	beq.n	8005eda <HAL_DMA_IRQHandler+0xb12>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a68      	ldr	r2, [pc, #416]	@ (8006078 <HAL_DMA_IRQHandler+0xcb0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d108      	bne.n	8005eec <HAL_DMA_IRQHandler+0xb24>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0208 	bic.w	r2, r2, #8
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	e007      	b.n	8005efc <HAL_DMA_IRQHandler+0xb34>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0204 	bic.w	r2, r2, #4
 8005efa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 8165 	beq.w	80061d0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f0e:	e15f      	b.n	80061d0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	2202      	movs	r2, #2
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80c5 	beq.w	80060b0 <HAL_DMA_IRQHandler+0xce8>
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80bf 	beq.w	80060b0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f36:	f003 031f 	and.w	r3, r3, #31
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	409a      	lsls	r2, r3
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d018      	beq.n	8005f7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d109      	bne.n	8005f6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 813a 	beq.w	80061d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f68:	e134      	b.n	80061d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 8130 	beq.w	80061d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f7c:	e12a      	b.n	80061d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f040 8089 	bne.w	800609c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a2b      	ldr	r2, [pc, #172]	@ (800603c <HAL_DMA_IRQHandler+0xc74>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d04a      	beq.n	800602a <HAL_DMA_IRQHandler+0xc62>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a29      	ldr	r2, [pc, #164]	@ (8006040 <HAL_DMA_IRQHandler+0xc78>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d045      	beq.n	800602a <HAL_DMA_IRQHandler+0xc62>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a28      	ldr	r2, [pc, #160]	@ (8006044 <HAL_DMA_IRQHandler+0xc7c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d040      	beq.n	800602a <HAL_DMA_IRQHandler+0xc62>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a26      	ldr	r2, [pc, #152]	@ (8006048 <HAL_DMA_IRQHandler+0xc80>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d03b      	beq.n	800602a <HAL_DMA_IRQHandler+0xc62>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a25      	ldr	r2, [pc, #148]	@ (800604c <HAL_DMA_IRQHandler+0xc84>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d036      	beq.n	800602a <HAL_DMA_IRQHandler+0xc62>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a23      	ldr	r2, [pc, #140]	@ (8006050 <HAL_DMA_IRQHandler+0xc88>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d031      	beq.n	800602a <HAL_DMA_IRQHandler+0xc62>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a22      	ldr	r2, [pc, #136]	@ (8006054 <HAL_DMA_IRQHandler+0xc8c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d02c      	beq.n	800602a <HAL_DMA_IRQHandler+0xc62>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a20      	ldr	r2, [pc, #128]	@ (8006058 <HAL_DMA_IRQHandler+0xc90>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d027      	beq.n	800602a <HAL_DMA_IRQHandler+0xc62>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1f      	ldr	r2, [pc, #124]	@ (800605c <HAL_DMA_IRQHandler+0xc94>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d022      	beq.n	800602a <HAL_DMA_IRQHandler+0xc62>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8006060 <HAL_DMA_IRQHandler+0xc98>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d01d      	beq.n	800602a <HAL_DMA_IRQHandler+0xc62>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8006064 <HAL_DMA_IRQHandler+0xc9c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d018      	beq.n	800602a <HAL_DMA_IRQHandler+0xc62>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8006068 <HAL_DMA_IRQHandler+0xca0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d013      	beq.n	800602a <HAL_DMA_IRQHandler+0xc62>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a19      	ldr	r2, [pc, #100]	@ (800606c <HAL_DMA_IRQHandler+0xca4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00e      	beq.n	800602a <HAL_DMA_IRQHandler+0xc62>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a17      	ldr	r2, [pc, #92]	@ (8006070 <HAL_DMA_IRQHandler+0xca8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d009      	beq.n	800602a <HAL_DMA_IRQHandler+0xc62>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a16      	ldr	r2, [pc, #88]	@ (8006074 <HAL_DMA_IRQHandler+0xcac>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d004      	beq.n	800602a <HAL_DMA_IRQHandler+0xc62>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a14      	ldr	r2, [pc, #80]	@ (8006078 <HAL_DMA_IRQHandler+0xcb0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d128      	bne.n	800607c <HAL_DMA_IRQHandler+0xcb4>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0214 	bic.w	r2, r2, #20
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e027      	b.n	800608c <HAL_DMA_IRQHandler+0xcc4>
 800603c:	40020010 	.word	0x40020010
 8006040:	40020028 	.word	0x40020028
 8006044:	40020040 	.word	0x40020040
 8006048:	40020058 	.word	0x40020058
 800604c:	40020070 	.word	0x40020070
 8006050:	40020088 	.word	0x40020088
 8006054:	400200a0 	.word	0x400200a0
 8006058:	400200b8 	.word	0x400200b8
 800605c:	40020410 	.word	0x40020410
 8006060:	40020428 	.word	0x40020428
 8006064:	40020440 	.word	0x40020440
 8006068:	40020458 	.word	0x40020458
 800606c:	40020470 	.word	0x40020470
 8006070:	40020488 	.word	0x40020488
 8006074:	400204a0 	.word	0x400204a0
 8006078:	400204b8 	.word	0x400204b8
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 020a 	bic.w	r2, r2, #10
 800608a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8097 	beq.w	80061d4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060ae:	e091      	b.n	80061d4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b4:	f003 031f 	and.w	r3, r3, #31
 80060b8:	2208      	movs	r2, #8
 80060ba:	409a      	lsls	r2, r3
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	4013      	ands	r3, r2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 8088 	beq.w	80061d6 <HAL_DMA_IRQHandler+0xe0e>
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 8082 	beq.w	80061d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a41      	ldr	r2, [pc, #260]	@ (80061dc <HAL_DMA_IRQHandler+0xe14>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d04a      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a3f      	ldr	r2, [pc, #252]	@ (80061e0 <HAL_DMA_IRQHandler+0xe18>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d045      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a3e      	ldr	r2, [pc, #248]	@ (80061e4 <HAL_DMA_IRQHandler+0xe1c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d040      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a3c      	ldr	r2, [pc, #240]	@ (80061e8 <HAL_DMA_IRQHandler+0xe20>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d03b      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a3b      	ldr	r2, [pc, #236]	@ (80061ec <HAL_DMA_IRQHandler+0xe24>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d036      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a39      	ldr	r2, [pc, #228]	@ (80061f0 <HAL_DMA_IRQHandler+0xe28>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d031      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a38      	ldr	r2, [pc, #224]	@ (80061f4 <HAL_DMA_IRQHandler+0xe2c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d02c      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a36      	ldr	r2, [pc, #216]	@ (80061f8 <HAL_DMA_IRQHandler+0xe30>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d027      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a35      	ldr	r2, [pc, #212]	@ (80061fc <HAL_DMA_IRQHandler+0xe34>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d022      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a33      	ldr	r2, [pc, #204]	@ (8006200 <HAL_DMA_IRQHandler+0xe38>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d01d      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a32      	ldr	r2, [pc, #200]	@ (8006204 <HAL_DMA_IRQHandler+0xe3c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d018      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a30      	ldr	r2, [pc, #192]	@ (8006208 <HAL_DMA_IRQHandler+0xe40>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a2f      	ldr	r2, [pc, #188]	@ (800620c <HAL_DMA_IRQHandler+0xe44>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00e      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a2d      	ldr	r2, [pc, #180]	@ (8006210 <HAL_DMA_IRQHandler+0xe48>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d009      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a2c      	ldr	r2, [pc, #176]	@ (8006214 <HAL_DMA_IRQHandler+0xe4c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d004      	beq.n	8006172 <HAL_DMA_IRQHandler+0xdaa>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a2a      	ldr	r2, [pc, #168]	@ (8006218 <HAL_DMA_IRQHandler+0xe50>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d108      	bne.n	8006184 <HAL_DMA_IRQHandler+0xdbc>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 021c 	bic.w	r2, r2, #28
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	e007      	b.n	8006194 <HAL_DMA_IRQHandler+0xdcc>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 020e 	bic.w	r2, r2, #14
 8006192:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006198:	f003 031f 	and.w	r3, r3, #31
 800619c:	2201      	movs	r2, #1
 800619e:	409a      	lsls	r2, r3
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	4798      	blx	r3
 80061ca:	e004      	b.n	80061d6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80061cc:	bf00      	nop
 80061ce:	e002      	b.n	80061d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061d0:	bf00      	nop
 80061d2:	e000      	b.n	80061d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061d4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061d6:	3728      	adds	r7, #40	@ 0x28
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40020010 	.word	0x40020010
 80061e0:	40020028 	.word	0x40020028
 80061e4:	40020040 	.word	0x40020040
 80061e8:	40020058 	.word	0x40020058
 80061ec:	40020070 	.word	0x40020070
 80061f0:	40020088 	.word	0x40020088
 80061f4:	400200a0 	.word	0x400200a0
 80061f8:	400200b8 	.word	0x400200b8
 80061fc:	40020410 	.word	0x40020410
 8006200:	40020428 	.word	0x40020428
 8006204:	40020440 	.word	0x40020440
 8006208:	40020458 	.word	0x40020458
 800620c:	40020470 	.word	0x40020470
 8006210:	40020488 	.word	0x40020488
 8006214:	400204a0 	.word	0x400204a0
 8006218:	400204b8 	.word	0x400204b8

0800621c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800622a:	b2db      	uxtb	r3, r3
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006250:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a7f      	ldr	r2, [pc, #508]	@ (8006454 <DMA_SetConfig+0x21c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d072      	beq.n	8006342 <DMA_SetConfig+0x10a>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a7d      	ldr	r2, [pc, #500]	@ (8006458 <DMA_SetConfig+0x220>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d06d      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a7c      	ldr	r2, [pc, #496]	@ (800645c <DMA_SetConfig+0x224>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d068      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a7a      	ldr	r2, [pc, #488]	@ (8006460 <DMA_SetConfig+0x228>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d063      	beq.n	8006342 <DMA_SetConfig+0x10a>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a79      	ldr	r2, [pc, #484]	@ (8006464 <DMA_SetConfig+0x22c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d05e      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a77      	ldr	r2, [pc, #476]	@ (8006468 <DMA_SetConfig+0x230>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d059      	beq.n	8006342 <DMA_SetConfig+0x10a>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a76      	ldr	r2, [pc, #472]	@ (800646c <DMA_SetConfig+0x234>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d054      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a74      	ldr	r2, [pc, #464]	@ (8006470 <DMA_SetConfig+0x238>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d04f      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a73      	ldr	r2, [pc, #460]	@ (8006474 <DMA_SetConfig+0x23c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d04a      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a71      	ldr	r2, [pc, #452]	@ (8006478 <DMA_SetConfig+0x240>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d045      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a70      	ldr	r2, [pc, #448]	@ (800647c <DMA_SetConfig+0x244>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d040      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a6e      	ldr	r2, [pc, #440]	@ (8006480 <DMA_SetConfig+0x248>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d03b      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a6d      	ldr	r2, [pc, #436]	@ (8006484 <DMA_SetConfig+0x24c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d036      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a6b      	ldr	r2, [pc, #428]	@ (8006488 <DMA_SetConfig+0x250>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d031      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a6a      	ldr	r2, [pc, #424]	@ (800648c <DMA_SetConfig+0x254>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d02c      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a68      	ldr	r2, [pc, #416]	@ (8006490 <DMA_SetConfig+0x258>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d027      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a67      	ldr	r2, [pc, #412]	@ (8006494 <DMA_SetConfig+0x25c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d022      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a65      	ldr	r2, [pc, #404]	@ (8006498 <DMA_SetConfig+0x260>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01d      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a64      	ldr	r2, [pc, #400]	@ (800649c <DMA_SetConfig+0x264>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d018      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a62      	ldr	r2, [pc, #392]	@ (80064a0 <DMA_SetConfig+0x268>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <DMA_SetConfig+0x10a>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a61      	ldr	r2, [pc, #388]	@ (80064a4 <DMA_SetConfig+0x26c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00e      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a5f      	ldr	r2, [pc, #380]	@ (80064a8 <DMA_SetConfig+0x270>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d009      	beq.n	8006342 <DMA_SetConfig+0x10a>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a5e      	ldr	r2, [pc, #376]	@ (80064ac <DMA_SetConfig+0x274>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a5c      	ldr	r2, [pc, #368]	@ (80064b0 <DMA_SetConfig+0x278>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d101      	bne.n	8006346 <DMA_SetConfig+0x10e>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <DMA_SetConfig+0x110>
 8006346:	2300      	movs	r3, #0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00d      	beq.n	8006368 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006354:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d004      	beq.n	8006368 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006366:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a39      	ldr	r2, [pc, #228]	@ (8006454 <DMA_SetConfig+0x21c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d04a      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a38      	ldr	r2, [pc, #224]	@ (8006458 <DMA_SetConfig+0x220>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d045      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a36      	ldr	r2, [pc, #216]	@ (800645c <DMA_SetConfig+0x224>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d040      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a35      	ldr	r2, [pc, #212]	@ (8006460 <DMA_SetConfig+0x228>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d03b      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a33      	ldr	r2, [pc, #204]	@ (8006464 <DMA_SetConfig+0x22c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d036      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a32      	ldr	r2, [pc, #200]	@ (8006468 <DMA_SetConfig+0x230>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d031      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a30      	ldr	r2, [pc, #192]	@ (800646c <DMA_SetConfig+0x234>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d02c      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a2f      	ldr	r2, [pc, #188]	@ (8006470 <DMA_SetConfig+0x238>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d027      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006474 <DMA_SetConfig+0x23c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d022      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006478 <DMA_SetConfig+0x240>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d01d      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a2a      	ldr	r2, [pc, #168]	@ (800647c <DMA_SetConfig+0x244>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d018      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a29      	ldr	r2, [pc, #164]	@ (8006480 <DMA_SetConfig+0x248>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d013      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a27      	ldr	r2, [pc, #156]	@ (8006484 <DMA_SetConfig+0x24c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00e      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a26      	ldr	r2, [pc, #152]	@ (8006488 <DMA_SetConfig+0x250>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d009      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a24      	ldr	r2, [pc, #144]	@ (800648c <DMA_SetConfig+0x254>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d004      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a23      	ldr	r2, [pc, #140]	@ (8006490 <DMA_SetConfig+0x258>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d101      	bne.n	800640c <DMA_SetConfig+0x1d4>
 8006408:	2301      	movs	r3, #1
 800640a:	e000      	b.n	800640e <DMA_SetConfig+0x1d6>
 800640c:	2300      	movs	r3, #0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d059      	beq.n	80064c6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006416:	f003 031f 	and.w	r3, r3, #31
 800641a:	223f      	movs	r2, #63	@ 0x3f
 800641c:	409a      	lsls	r2, r3
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006430:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2b40      	cmp	r3, #64	@ 0x40
 8006440:	d138      	bne.n	80064b4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006452:	e086      	b.n	8006562 <DMA_SetConfig+0x32a>
 8006454:	40020010 	.word	0x40020010
 8006458:	40020028 	.word	0x40020028
 800645c:	40020040 	.word	0x40020040
 8006460:	40020058 	.word	0x40020058
 8006464:	40020070 	.word	0x40020070
 8006468:	40020088 	.word	0x40020088
 800646c:	400200a0 	.word	0x400200a0
 8006470:	400200b8 	.word	0x400200b8
 8006474:	40020410 	.word	0x40020410
 8006478:	40020428 	.word	0x40020428
 800647c:	40020440 	.word	0x40020440
 8006480:	40020458 	.word	0x40020458
 8006484:	40020470 	.word	0x40020470
 8006488:	40020488 	.word	0x40020488
 800648c:	400204a0 	.word	0x400204a0
 8006490:	400204b8 	.word	0x400204b8
 8006494:	58025408 	.word	0x58025408
 8006498:	5802541c 	.word	0x5802541c
 800649c:	58025430 	.word	0x58025430
 80064a0:	58025444 	.word	0x58025444
 80064a4:	58025458 	.word	0x58025458
 80064a8:	5802546c 	.word	0x5802546c
 80064ac:	58025480 	.word	0x58025480
 80064b0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]
}
 80064c4:	e04d      	b.n	8006562 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a29      	ldr	r2, [pc, #164]	@ (8006570 <DMA_SetConfig+0x338>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d022      	beq.n	8006516 <DMA_SetConfig+0x2de>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a27      	ldr	r2, [pc, #156]	@ (8006574 <DMA_SetConfig+0x33c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d01d      	beq.n	8006516 <DMA_SetConfig+0x2de>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a26      	ldr	r2, [pc, #152]	@ (8006578 <DMA_SetConfig+0x340>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d018      	beq.n	8006516 <DMA_SetConfig+0x2de>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a24      	ldr	r2, [pc, #144]	@ (800657c <DMA_SetConfig+0x344>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <DMA_SetConfig+0x2de>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a23      	ldr	r2, [pc, #140]	@ (8006580 <DMA_SetConfig+0x348>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <DMA_SetConfig+0x2de>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a21      	ldr	r2, [pc, #132]	@ (8006584 <DMA_SetConfig+0x34c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d009      	beq.n	8006516 <DMA_SetConfig+0x2de>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a20      	ldr	r2, [pc, #128]	@ (8006588 <DMA_SetConfig+0x350>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <DMA_SetConfig+0x2de>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1e      	ldr	r2, [pc, #120]	@ (800658c <DMA_SetConfig+0x354>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d101      	bne.n	800651a <DMA_SetConfig+0x2e2>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <DMA_SetConfig+0x2e4>
 800651a:	2300      	movs	r3, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d020      	beq.n	8006562 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	2201      	movs	r2, #1
 800652a:	409a      	lsls	r2, r3
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	2b40      	cmp	r3, #64	@ 0x40
 800653e:	d108      	bne.n	8006552 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	60da      	str	r2, [r3, #12]
}
 8006550:	e007      	b.n	8006562 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	60da      	str	r2, [r3, #12]
}
 8006562:	bf00      	nop
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	58025408 	.word	0x58025408
 8006574:	5802541c 	.word	0x5802541c
 8006578:	58025430 	.word	0x58025430
 800657c:	58025444 	.word	0x58025444
 8006580:	58025458 	.word	0x58025458
 8006584:	5802546c 	.word	0x5802546c
 8006588:	58025480 	.word	0x58025480
 800658c:	58025494 	.word	0x58025494

08006590 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a42      	ldr	r2, [pc, #264]	@ (80066a8 <DMA_CalcBaseAndBitshift+0x118>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d04a      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a41      	ldr	r2, [pc, #260]	@ (80066ac <DMA_CalcBaseAndBitshift+0x11c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d045      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a3f      	ldr	r2, [pc, #252]	@ (80066b0 <DMA_CalcBaseAndBitshift+0x120>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d040      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a3e      	ldr	r2, [pc, #248]	@ (80066b4 <DMA_CalcBaseAndBitshift+0x124>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d03b      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a3c      	ldr	r2, [pc, #240]	@ (80066b8 <DMA_CalcBaseAndBitshift+0x128>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d036      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a3b      	ldr	r2, [pc, #236]	@ (80066bc <DMA_CalcBaseAndBitshift+0x12c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d031      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a39      	ldr	r2, [pc, #228]	@ (80066c0 <DMA_CalcBaseAndBitshift+0x130>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d02c      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a38      	ldr	r2, [pc, #224]	@ (80066c4 <DMA_CalcBaseAndBitshift+0x134>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d027      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a36      	ldr	r2, [pc, #216]	@ (80066c8 <DMA_CalcBaseAndBitshift+0x138>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d022      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a35      	ldr	r2, [pc, #212]	@ (80066cc <DMA_CalcBaseAndBitshift+0x13c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d01d      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a33      	ldr	r2, [pc, #204]	@ (80066d0 <DMA_CalcBaseAndBitshift+0x140>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d018      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a32      	ldr	r2, [pc, #200]	@ (80066d4 <DMA_CalcBaseAndBitshift+0x144>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d013      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a30      	ldr	r2, [pc, #192]	@ (80066d8 <DMA_CalcBaseAndBitshift+0x148>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00e      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a2f      	ldr	r2, [pc, #188]	@ (80066dc <DMA_CalcBaseAndBitshift+0x14c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d009      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a2d      	ldr	r2, [pc, #180]	@ (80066e0 <DMA_CalcBaseAndBitshift+0x150>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a2c      	ldr	r2, [pc, #176]	@ (80066e4 <DMA_CalcBaseAndBitshift+0x154>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d101      	bne.n	800663c <DMA_CalcBaseAndBitshift+0xac>
 8006638:	2301      	movs	r3, #1
 800663a:	e000      	b.n	800663e <DMA_CalcBaseAndBitshift+0xae>
 800663c:	2300      	movs	r3, #0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d024      	beq.n	800668c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	3b10      	subs	r3, #16
 800664a:	4a27      	ldr	r2, [pc, #156]	@ (80066e8 <DMA_CalcBaseAndBitshift+0x158>)
 800664c:	fba2 2303 	umull	r2, r3, r2, r3
 8006650:	091b      	lsrs	r3, r3, #4
 8006652:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	4a24      	ldr	r2, [pc, #144]	@ (80066ec <DMA_CalcBaseAndBitshift+0x15c>)
 800665c:	5cd3      	ldrb	r3, [r2, r3]
 800665e:	461a      	mov	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b03      	cmp	r3, #3
 8006668:	d908      	bls.n	800667c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	4b1f      	ldr	r3, [pc, #124]	@ (80066f0 <DMA_CalcBaseAndBitshift+0x160>)
 8006672:	4013      	ands	r3, r2
 8006674:	1d1a      	adds	r2, r3, #4
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	659a      	str	r2, [r3, #88]	@ 0x58
 800667a:	e00d      	b.n	8006698 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	4b1b      	ldr	r3, [pc, #108]	@ (80066f0 <DMA_CalcBaseAndBitshift+0x160>)
 8006684:	4013      	ands	r3, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6593      	str	r3, [r2, #88]	@ 0x58
 800668a:	e005      	b.n	8006698 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	40020010 	.word	0x40020010
 80066ac:	40020028 	.word	0x40020028
 80066b0:	40020040 	.word	0x40020040
 80066b4:	40020058 	.word	0x40020058
 80066b8:	40020070 	.word	0x40020070
 80066bc:	40020088 	.word	0x40020088
 80066c0:	400200a0 	.word	0x400200a0
 80066c4:	400200b8 	.word	0x400200b8
 80066c8:	40020410 	.word	0x40020410
 80066cc:	40020428 	.word	0x40020428
 80066d0:	40020440 	.word	0x40020440
 80066d4:	40020458 	.word	0x40020458
 80066d8:	40020470 	.word	0x40020470
 80066dc:	40020488 	.word	0x40020488
 80066e0:	400204a0 	.word	0x400204a0
 80066e4:	400204b8 	.word	0x400204b8
 80066e8:	aaaaaaab 	.word	0xaaaaaaab
 80066ec:	0801b32c 	.word	0x0801b32c
 80066f0:	fffffc00 	.word	0xfffffc00

080066f4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d120      	bne.n	800674a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670c:	2b03      	cmp	r3, #3
 800670e:	d858      	bhi.n	80067c2 <DMA_CheckFifoParam+0xce>
 8006710:	a201      	add	r2, pc, #4	@ (adr r2, 8006718 <DMA_CheckFifoParam+0x24>)
 8006712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006716:	bf00      	nop
 8006718:	08006729 	.word	0x08006729
 800671c:	0800673b 	.word	0x0800673b
 8006720:	08006729 	.word	0x08006729
 8006724:	080067c3 	.word	0x080067c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d048      	beq.n	80067c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006738:	e045      	b.n	80067c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006742:	d142      	bne.n	80067ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006748:	e03f      	b.n	80067ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006752:	d123      	bne.n	800679c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006758:	2b03      	cmp	r3, #3
 800675a:	d838      	bhi.n	80067ce <DMA_CheckFifoParam+0xda>
 800675c:	a201      	add	r2, pc, #4	@ (adr r2, 8006764 <DMA_CheckFifoParam+0x70>)
 800675e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006762:	bf00      	nop
 8006764:	08006775 	.word	0x08006775
 8006768:	0800677b 	.word	0x0800677b
 800676c:	08006775 	.word	0x08006775
 8006770:	0800678d 	.word	0x0800678d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
        break;
 8006778:	e030      	b.n	80067dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d025      	beq.n	80067d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800678a:	e022      	b.n	80067d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006790:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006794:	d11f      	bne.n	80067d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800679a:	e01c      	b.n	80067d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d902      	bls.n	80067aa <DMA_CheckFifoParam+0xb6>
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d003      	beq.n	80067b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80067a8:	e018      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	73fb      	strb	r3, [r7, #15]
        break;
 80067ae:	e015      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00e      	beq.n	80067da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]
    break;
 80067c0:	e00b      	b.n	80067da <DMA_CheckFifoParam+0xe6>
        break;
 80067c2:	bf00      	nop
 80067c4:	e00a      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
        break;
 80067c6:	bf00      	nop
 80067c8:	e008      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
        break;
 80067ca:	bf00      	nop
 80067cc:	e006      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
        break;
 80067ce:	bf00      	nop
 80067d0:	e004      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
        break;
 80067d2:	bf00      	nop
 80067d4:	e002      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
        break;
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
    break;
 80067da:	bf00      	nop
    }
  }

  return status;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop

080067ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a38      	ldr	r2, [pc, #224]	@ (80068e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d022      	beq.n	800684a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a36      	ldr	r2, [pc, #216]	@ (80068e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d01d      	beq.n	800684a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a35      	ldr	r2, [pc, #212]	@ (80068e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d018      	beq.n	800684a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a33      	ldr	r2, [pc, #204]	@ (80068ec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d013      	beq.n	800684a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a32      	ldr	r2, [pc, #200]	@ (80068f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00e      	beq.n	800684a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a30      	ldr	r2, [pc, #192]	@ (80068f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d009      	beq.n	800684a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a2f      	ldr	r2, [pc, #188]	@ (80068f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d004      	beq.n	800684a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a2d      	ldr	r2, [pc, #180]	@ (80068fc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d101      	bne.n	800684e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800684e:	2300      	movs	r3, #0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01a      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	3b08      	subs	r3, #8
 800685c:	4a28      	ldr	r2, [pc, #160]	@ (8006900 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	091b      	lsrs	r3, r3, #4
 8006864:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4b26      	ldr	r3, [pc, #152]	@ (8006904 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800686a:	4413      	add	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	461a      	mov	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a24      	ldr	r2, [pc, #144]	@ (8006908 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006878:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	2201      	movs	r2, #1
 8006882:	409a      	lsls	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006888:	e024      	b.n	80068d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	3b10      	subs	r3, #16
 8006892:	4a1e      	ldr	r2, [pc, #120]	@ (800690c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006894:	fba2 2303 	umull	r2, r3, r2, r3
 8006898:	091b      	lsrs	r3, r3, #4
 800689a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	4a1c      	ldr	r2, [pc, #112]	@ (8006910 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d806      	bhi.n	80068b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006914 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d902      	bls.n	80068b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3308      	adds	r3, #8
 80068b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4b18      	ldr	r3, [pc, #96]	@ (8006918 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80068b6:	4413      	add	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	461a      	mov	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a16      	ldr	r2, [pc, #88]	@ (800691c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80068c4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f003 031f 	and.w	r3, r3, #31
 80068cc:	2201      	movs	r2, #1
 80068ce:	409a      	lsls	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80068d4:	bf00      	nop
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	58025408 	.word	0x58025408
 80068e4:	5802541c 	.word	0x5802541c
 80068e8:	58025430 	.word	0x58025430
 80068ec:	58025444 	.word	0x58025444
 80068f0:	58025458 	.word	0x58025458
 80068f4:	5802546c 	.word	0x5802546c
 80068f8:	58025480 	.word	0x58025480
 80068fc:	58025494 	.word	0x58025494
 8006900:	cccccccd 	.word	0xcccccccd
 8006904:	16009600 	.word	0x16009600
 8006908:	58025880 	.word	0x58025880
 800690c:	aaaaaaab 	.word	0xaaaaaaab
 8006910:	400204b8 	.word	0x400204b8
 8006914:	4002040f 	.word	0x4002040f
 8006918:	10008200 	.word	0x10008200
 800691c:	40020880 	.word	0x40020880

08006920 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	b2db      	uxtb	r3, r3
 800692e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d04a      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b08      	cmp	r3, #8
 800693a:	d847      	bhi.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a25      	ldr	r2, [pc, #148]	@ (80069d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d022      	beq.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a24      	ldr	r2, [pc, #144]	@ (80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d01d      	beq.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a22      	ldr	r2, [pc, #136]	@ (80069e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d018      	beq.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a21      	ldr	r2, [pc, #132]	@ (80069e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d013      	beq.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a1f      	ldr	r2, [pc, #124]	@ (80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d00e      	beq.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a1e      	ldr	r2, [pc, #120]	@ (80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d009      	beq.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a1c      	ldr	r2, [pc, #112]	@ (80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d004      	beq.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a1b      	ldr	r2, [pc, #108]	@ (80069f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d101      	bne.n	8006990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006990:	2300      	movs	r3, #0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4b17      	ldr	r3, [pc, #92]	@ (80069f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	461a      	mov	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a15      	ldr	r2, [pc, #84]	@ (80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80069a8:	671a      	str	r2, [r3, #112]	@ 0x70
 80069aa:	e009      	b.n	80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4b14      	ldr	r3, [pc, #80]	@ (8006a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80069b0:	4413      	add	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	461a      	mov	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a11      	ldr	r2, [pc, #68]	@ (8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80069be:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	2201      	movs	r2, #1
 80069c6:	409a      	lsls	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80069cc:	bf00      	nop
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	58025408 	.word	0x58025408
 80069dc:	5802541c 	.word	0x5802541c
 80069e0:	58025430 	.word	0x58025430
 80069e4:	58025444 	.word	0x58025444
 80069e8:	58025458 	.word	0x58025458
 80069ec:	5802546c 	.word	0x5802546c
 80069f0:	58025480 	.word	0x58025480
 80069f4:	58025494 	.word	0x58025494
 80069f8:	1600963f 	.word	0x1600963f
 80069fc:	58025940 	.word	0x58025940
 8006a00:	1000823f 	.word	0x1000823f
 8006a04:	40020940 	.word	0x40020940

08006a08 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	2b80      	cmp	r3, #128	@ 0x80
 8006a20:	d105      	bne.n	8006a2e <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a28:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e315      	b.n	800705a <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e30e      	b.n	800705a <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	f040 82fd 	bne.w	800704c <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a82      	ldr	r2, [pc, #520]	@ (8006c70 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d04a      	beq.n	8006b00 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a81      	ldr	r2, [pc, #516]	@ (8006c74 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d045      	beq.n	8006b00 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a7f      	ldr	r2, [pc, #508]	@ (8006c78 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d040      	beq.n	8006b00 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a7e      	ldr	r2, [pc, #504]	@ (8006c7c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d03b      	beq.n	8006b00 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a7c      	ldr	r2, [pc, #496]	@ (8006c80 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d036      	beq.n	8006b00 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a7b      	ldr	r2, [pc, #492]	@ (8006c84 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d031      	beq.n	8006b00 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a79      	ldr	r2, [pc, #484]	@ (8006c88 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d02c      	beq.n	8006b00 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a78      	ldr	r2, [pc, #480]	@ (8006c8c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d027      	beq.n	8006b00 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a76      	ldr	r2, [pc, #472]	@ (8006c90 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d022      	beq.n	8006b00 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a75      	ldr	r2, [pc, #468]	@ (8006c94 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d01d      	beq.n	8006b00 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a73      	ldr	r2, [pc, #460]	@ (8006c98 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d018      	beq.n	8006b00 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a72      	ldr	r2, [pc, #456]	@ (8006c9c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d013      	beq.n	8006b00 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a70      	ldr	r2, [pc, #448]	@ (8006ca0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00e      	beq.n	8006b00 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a6f      	ldr	r2, [pc, #444]	@ (8006ca4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d009      	beq.n	8006b00 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a6d      	ldr	r2, [pc, #436]	@ (8006ca8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d004      	beq.n	8006b00 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a6c      	ldr	r2, [pc, #432]	@ (8006cac <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d101      	bne.n	8006b04 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8006b04:	2300      	movs	r3, #0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d018      	beq.n	8006b3c <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006b18:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b26:	3308      	adds	r3, #8
 8006b28:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b2e:	f003 031f 	and.w	r3, r3, #31
 8006b32:	223f      	movs	r2, #63	@ 0x3f
 8006b34:	409a      	lsls	r2, r3
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e018      	b.n	8006b6e <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6819      	ldr	r1, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	f248 0320 	movw	r3, #32800	@ 0x8020
 8006b4a:	430b      	orrs	r3, r1
 8006b4c:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b62:	f003 031f 	and.w	r3, r3, #31
 8006b66:	2201      	movs	r2, #1
 8006b68:	409a      	lsls	r2, r3
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 fb41 	bl	80071fc <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a3c      	ldr	r2, [pc, #240]	@ (8006c70 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d072      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a3a      	ldr	r2, [pc, #232]	@ (8006c74 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d06d      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a39      	ldr	r2, [pc, #228]	@ (8006c78 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d068      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a37      	ldr	r2, [pc, #220]	@ (8006c7c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d063      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a36      	ldr	r2, [pc, #216]	@ (8006c80 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d05e      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a34      	ldr	r2, [pc, #208]	@ (8006c84 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d059      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a33      	ldr	r2, [pc, #204]	@ (8006c88 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d054      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a31      	ldr	r2, [pc, #196]	@ (8006c8c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d04f      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a30      	ldr	r2, [pc, #192]	@ (8006c90 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d04a      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a2e      	ldr	r2, [pc, #184]	@ (8006c94 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d045      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a2d      	ldr	r2, [pc, #180]	@ (8006c98 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d040      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a2b      	ldr	r2, [pc, #172]	@ (8006c9c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d03b      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8006ca0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d036      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a28      	ldr	r2, [pc, #160]	@ (8006ca4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d031      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a27      	ldr	r2, [pc, #156]	@ (8006ca8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d02c      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a25      	ldr	r2, [pc, #148]	@ (8006cac <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d027      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a24      	ldr	r2, [pc, #144]	@ (8006cb0 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d022      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a22      	ldr	r2, [pc, #136]	@ (8006cb4 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d01d      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a21      	ldr	r2, [pc, #132]	@ (8006cb8 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d018      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8006cbc <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d013      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a1e      	ldr	r2, [pc, #120]	@ (8006cc0 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00e      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a1c      	ldr	r2, [pc, #112]	@ (8006cc4 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d009      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006cc8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d004      	beq.n	8006c6a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a19      	ldr	r2, [pc, #100]	@ (8006ccc <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d132      	bne.n	8006cd0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e031      	b.n	8006cd2 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8006c6e:	bf00      	nop
 8006c70:	40020010 	.word	0x40020010
 8006c74:	40020028 	.word	0x40020028
 8006c78:	40020040 	.word	0x40020040
 8006c7c:	40020058 	.word	0x40020058
 8006c80:	40020070 	.word	0x40020070
 8006c84:	40020088 	.word	0x40020088
 8006c88:	400200a0 	.word	0x400200a0
 8006c8c:	400200b8 	.word	0x400200b8
 8006c90:	40020410 	.word	0x40020410
 8006c94:	40020428 	.word	0x40020428
 8006c98:	40020440 	.word	0x40020440
 8006c9c:	40020458 	.word	0x40020458
 8006ca0:	40020470 	.word	0x40020470
 8006ca4:	40020488 	.word	0x40020488
 8006ca8:	400204a0 	.word	0x400204a0
 8006cac:	400204b8 	.word	0x400204b8
 8006cb0:	58025408 	.word	0x58025408
 8006cb4:	5802541c 	.word	0x5802541c
 8006cb8:	58025430 	.word	0x58025430
 8006cbc:	58025444 	.word	0x58025444
 8006cc0:	58025458 	.word	0x58025458
 8006cc4:	5802546c 	.word	0x5802546c
 8006cc8:	58025480 	.word	0x58025480
 8006ccc:	58025494 	.word	0x58025494
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00d      	beq.n	8006cf2 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006cde:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d004      	beq.n	8006cf2 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006cf0:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a3b      	ldr	r2, [pc, #236]	@ (8006de4 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d04a      	beq.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a39      	ldr	r2, [pc, #228]	@ (8006de8 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d045      	beq.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a38      	ldr	r2, [pc, #224]	@ (8006dec <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d040      	beq.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a36      	ldr	r2, [pc, #216]	@ (8006df0 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d03b      	beq.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a35      	ldr	r2, [pc, #212]	@ (8006df4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d036      	beq.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a33      	ldr	r2, [pc, #204]	@ (8006df8 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d031      	beq.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a32      	ldr	r2, [pc, #200]	@ (8006dfc <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d02c      	beq.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a30      	ldr	r2, [pc, #192]	@ (8006e00 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d027      	beq.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a2f      	ldr	r2, [pc, #188]	@ (8006e04 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d022      	beq.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a2d      	ldr	r2, [pc, #180]	@ (8006e08 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d01d      	beq.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a2c      	ldr	r2, [pc, #176]	@ (8006e0c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d018      	beq.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a2a      	ldr	r2, [pc, #168]	@ (8006e10 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d013      	beq.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a29      	ldr	r2, [pc, #164]	@ (8006e14 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00e      	beq.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a27      	ldr	r2, [pc, #156]	@ (8006e18 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d009      	beq.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a26      	ldr	r2, [pc, #152]	@ (8006e1c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d004      	beq.n	8006d92 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a24      	ldr	r2, [pc, #144]	@ (8006e20 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d101      	bne.n	8006d96 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8006d96:	2300      	movs	r3, #0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d043      	beq.n	8006e24 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f023 021e 	bic.w	r2, r3, #30
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0216 	orr.w	r2, r2, #22
 8006dae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695a      	ldr	r2, [r3, #20]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006dbe:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d103      	bne.n	8006dd0 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d043      	beq.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0208 	orr.w	r2, r2, #8
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	e03a      	b.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8006de2:	bf00      	nop
 8006de4:	40020010 	.word	0x40020010
 8006de8:	40020028 	.word	0x40020028
 8006dec:	40020040 	.word	0x40020040
 8006df0:	40020058 	.word	0x40020058
 8006df4:	40020070 	.word	0x40020070
 8006df8:	40020088 	.word	0x40020088
 8006dfc:	400200a0 	.word	0x400200a0
 8006e00:	400200b8 	.word	0x400200b8
 8006e04:	40020410 	.word	0x40020410
 8006e08:	40020428 	.word	0x40020428
 8006e0c:	40020440 	.word	0x40020440
 8006e10:	40020458 	.word	0x40020458
 8006e14:	40020470 	.word	0x40020470
 8006e18:	40020488 	.word	0x40020488
 8006e1c:	400204a0 	.word	0x400204a0
 8006e20:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f023 020e 	bic.w	r2, r3, #14
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 020a 	orr.w	r2, r2, #10
 8006e36:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d103      	bne.n	8006e48 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d007      	beq.n	8006e58 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0204 	orr.w	r2, r2, #4
 8006e56:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a81      	ldr	r2, [pc, #516]	@ (8007064 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d072      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a80      	ldr	r2, [pc, #512]	@ (8007068 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d06d      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a7e      	ldr	r2, [pc, #504]	@ (800706c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d068      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a7d      	ldr	r2, [pc, #500]	@ (8007070 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d063      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a7b      	ldr	r2, [pc, #492]	@ (8007074 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d05e      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a7a      	ldr	r2, [pc, #488]	@ (8007078 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d059      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a78      	ldr	r2, [pc, #480]	@ (800707c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d054      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a77      	ldr	r2, [pc, #476]	@ (8007080 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d04f      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a75      	ldr	r2, [pc, #468]	@ (8007084 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d04a      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a74      	ldr	r2, [pc, #464]	@ (8007088 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d045      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a72      	ldr	r2, [pc, #456]	@ (800708c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d040      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a71      	ldr	r2, [pc, #452]	@ (8007090 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d03b      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a6f      	ldr	r2, [pc, #444]	@ (8007094 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d036      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a6e      	ldr	r2, [pc, #440]	@ (8007098 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d031      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a6c      	ldr	r2, [pc, #432]	@ (800709c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d02c      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a6b      	ldr	r2, [pc, #428]	@ (80070a0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d027      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a69      	ldr	r2, [pc, #420]	@ (80070a4 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d022      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a68      	ldr	r2, [pc, #416]	@ (80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d01d      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a66      	ldr	r2, [pc, #408]	@ (80070ac <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d018      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a65      	ldr	r2, [pc, #404]	@ (80070b0 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d013      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a63      	ldr	r2, [pc, #396]	@ (80070b4 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d00e      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a62      	ldr	r2, [pc, #392]	@ (80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d009      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a60      	ldr	r2, [pc, #384]	@ (80070bc <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d004      	beq.n	8006f48 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a5f      	ldr	r2, [pc, #380]	@ (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d101      	bne.n	8006f4c <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01a      	beq.n	8006f88 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d007      	beq.n	8006f70 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f6e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d007      	beq.n	8006f88 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f86:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a35      	ldr	r2, [pc, #212]	@ (8007064 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d04a      	beq.n	8007028 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a34      	ldr	r2, [pc, #208]	@ (8007068 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d045      	beq.n	8007028 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a32      	ldr	r2, [pc, #200]	@ (800706c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d040      	beq.n	8007028 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a31      	ldr	r2, [pc, #196]	@ (8007070 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d03b      	beq.n	8007028 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a2f      	ldr	r2, [pc, #188]	@ (8007074 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d036      	beq.n	8007028 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8007078 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d031      	beq.n	8007028 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a2c      	ldr	r2, [pc, #176]	@ (800707c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d02c      	beq.n	8007028 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a2b      	ldr	r2, [pc, #172]	@ (8007080 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d027      	beq.n	8007028 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a29      	ldr	r2, [pc, #164]	@ (8007084 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d022      	beq.n	8007028 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a28      	ldr	r2, [pc, #160]	@ (8007088 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d01d      	beq.n	8007028 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a26      	ldr	r2, [pc, #152]	@ (800708c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d018      	beq.n	8007028 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a25      	ldr	r2, [pc, #148]	@ (8007090 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d013      	beq.n	8007028 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a23      	ldr	r2, [pc, #140]	@ (8007094 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d00e      	beq.n	8007028 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a22      	ldr	r2, [pc, #136]	@ (8007098 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d009      	beq.n	8007028 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a20      	ldr	r2, [pc, #128]	@ (800709c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d004      	beq.n	8007028 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a1f      	ldr	r2, [pc, #124]	@ (80070a0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d108      	bne.n	800703a <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	e00e      	b.n	8007058 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0201 	orr.w	r2, r2, #1
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	e005      	b.n	8007058 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007052:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007058:	7dfb      	ldrb	r3, [r7, #23]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	40020010 	.word	0x40020010
 8007068:	40020028 	.word	0x40020028
 800706c:	40020040 	.word	0x40020040
 8007070:	40020058 	.word	0x40020058
 8007074:	40020070 	.word	0x40020070
 8007078:	40020088 	.word	0x40020088
 800707c:	400200a0 	.word	0x400200a0
 8007080:	400200b8 	.word	0x400200b8
 8007084:	40020410 	.word	0x40020410
 8007088:	40020428 	.word	0x40020428
 800708c:	40020440 	.word	0x40020440
 8007090:	40020458 	.word	0x40020458
 8007094:	40020470 	.word	0x40020470
 8007098:	40020488 	.word	0x40020488
 800709c:	400204a0 	.word	0x400204a0
 80070a0:	400204b8 	.word	0x400204b8
 80070a4:	58025408 	.word	0x58025408
 80070a8:	5802541c 	.word	0x5802541c
 80070ac:	58025430 	.word	0x58025430
 80070b0:	58025444 	.word	0x58025444
 80070b4:	58025458 	.word	0x58025458
 80070b8:	5802546c 	.word	0x5802546c
 80070bc:	58025480 	.word	0x58025480
 80070c0:	58025494 	.word	0x58025494

080070c4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	4613      	mov	r3, r2
 80070d0:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a39      	ldr	r2, [pc, #228]	@ (80071bc <HAL_DMAEx_ChangeMemory+0xf8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d04a      	beq.n	8007172 <HAL_DMAEx_ChangeMemory+0xae>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a37      	ldr	r2, [pc, #220]	@ (80071c0 <HAL_DMAEx_ChangeMemory+0xfc>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d045      	beq.n	8007172 <HAL_DMAEx_ChangeMemory+0xae>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a36      	ldr	r2, [pc, #216]	@ (80071c4 <HAL_DMAEx_ChangeMemory+0x100>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d040      	beq.n	8007172 <HAL_DMAEx_ChangeMemory+0xae>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a34      	ldr	r2, [pc, #208]	@ (80071c8 <HAL_DMAEx_ChangeMemory+0x104>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d03b      	beq.n	8007172 <HAL_DMAEx_ChangeMemory+0xae>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a33      	ldr	r2, [pc, #204]	@ (80071cc <HAL_DMAEx_ChangeMemory+0x108>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d036      	beq.n	8007172 <HAL_DMAEx_ChangeMemory+0xae>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a31      	ldr	r2, [pc, #196]	@ (80071d0 <HAL_DMAEx_ChangeMemory+0x10c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d031      	beq.n	8007172 <HAL_DMAEx_ChangeMemory+0xae>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a30      	ldr	r2, [pc, #192]	@ (80071d4 <HAL_DMAEx_ChangeMemory+0x110>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d02c      	beq.n	8007172 <HAL_DMAEx_ChangeMemory+0xae>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a2e      	ldr	r2, [pc, #184]	@ (80071d8 <HAL_DMAEx_ChangeMemory+0x114>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d027      	beq.n	8007172 <HAL_DMAEx_ChangeMemory+0xae>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a2d      	ldr	r2, [pc, #180]	@ (80071dc <HAL_DMAEx_ChangeMemory+0x118>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d022      	beq.n	8007172 <HAL_DMAEx_ChangeMemory+0xae>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a2b      	ldr	r2, [pc, #172]	@ (80071e0 <HAL_DMAEx_ChangeMemory+0x11c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d01d      	beq.n	8007172 <HAL_DMAEx_ChangeMemory+0xae>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a2a      	ldr	r2, [pc, #168]	@ (80071e4 <HAL_DMAEx_ChangeMemory+0x120>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d018      	beq.n	8007172 <HAL_DMAEx_ChangeMemory+0xae>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a28      	ldr	r2, [pc, #160]	@ (80071e8 <HAL_DMAEx_ChangeMemory+0x124>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <HAL_DMAEx_ChangeMemory+0xae>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a27      	ldr	r2, [pc, #156]	@ (80071ec <HAL_DMAEx_ChangeMemory+0x128>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00e      	beq.n	8007172 <HAL_DMAEx_ChangeMemory+0xae>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a25      	ldr	r2, [pc, #148]	@ (80071f0 <HAL_DMAEx_ChangeMemory+0x12c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d009      	beq.n	8007172 <HAL_DMAEx_ChangeMemory+0xae>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a24      	ldr	r2, [pc, #144]	@ (80071f4 <HAL_DMAEx_ChangeMemory+0x130>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d004      	beq.n	8007172 <HAL_DMAEx_ChangeMemory+0xae>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a22      	ldr	r2, [pc, #136]	@ (80071f8 <HAL_DMAEx_ChangeMemory+0x134>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d101      	bne.n	8007176 <HAL_DMAEx_ChangeMemory+0xb2>
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <HAL_DMAEx_ChangeMemory+0xb4>
 8007176:	2300      	movs	r3, #0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00c      	beq.n	8007196 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d104      	bne.n	800718c <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	60da      	str	r2, [r3, #12]
 800718a:	e010      	b.n	80071ae <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	611a      	str	r2, [r3, #16]
 8007194:	e00b      	b.n	80071ae <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d104      	bne.n	80071a6 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	60da      	str	r2, [r3, #12]
 80071a4:	e003      	b.n	80071ae <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	40020010 	.word	0x40020010
 80071c0:	40020028 	.word	0x40020028
 80071c4:	40020040 	.word	0x40020040
 80071c8:	40020058 	.word	0x40020058
 80071cc:	40020070 	.word	0x40020070
 80071d0:	40020088 	.word	0x40020088
 80071d4:	400200a0 	.word	0x400200a0
 80071d8:	400200b8 	.word	0x400200b8
 80071dc:	40020410 	.word	0x40020410
 80071e0:	40020428 	.word	0x40020428
 80071e4:	40020440 	.word	0x40020440
 80071e8:	40020458 	.word	0x40020458
 80071ec:	40020470 	.word	0x40020470
 80071f0:	40020488 	.word	0x40020488
 80071f4:	400204a0 	.word	0x400204a0
 80071f8:	400204b8 	.word	0x400204b8

080071fc <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a46      	ldr	r2, [pc, #280]	@ (8007328 <DMA_MultiBufferSetConfig+0x12c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d04a      	beq.n	80072aa <DMA_MultiBufferSetConfig+0xae>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a44      	ldr	r2, [pc, #272]	@ (800732c <DMA_MultiBufferSetConfig+0x130>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d045      	beq.n	80072aa <DMA_MultiBufferSetConfig+0xae>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a43      	ldr	r2, [pc, #268]	@ (8007330 <DMA_MultiBufferSetConfig+0x134>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d040      	beq.n	80072aa <DMA_MultiBufferSetConfig+0xae>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a41      	ldr	r2, [pc, #260]	@ (8007334 <DMA_MultiBufferSetConfig+0x138>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d03b      	beq.n	80072aa <DMA_MultiBufferSetConfig+0xae>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a40      	ldr	r2, [pc, #256]	@ (8007338 <DMA_MultiBufferSetConfig+0x13c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d036      	beq.n	80072aa <DMA_MultiBufferSetConfig+0xae>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a3e      	ldr	r2, [pc, #248]	@ (800733c <DMA_MultiBufferSetConfig+0x140>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d031      	beq.n	80072aa <DMA_MultiBufferSetConfig+0xae>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a3d      	ldr	r2, [pc, #244]	@ (8007340 <DMA_MultiBufferSetConfig+0x144>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d02c      	beq.n	80072aa <DMA_MultiBufferSetConfig+0xae>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a3b      	ldr	r2, [pc, #236]	@ (8007344 <DMA_MultiBufferSetConfig+0x148>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d027      	beq.n	80072aa <DMA_MultiBufferSetConfig+0xae>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a3a      	ldr	r2, [pc, #232]	@ (8007348 <DMA_MultiBufferSetConfig+0x14c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d022      	beq.n	80072aa <DMA_MultiBufferSetConfig+0xae>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a38      	ldr	r2, [pc, #224]	@ (800734c <DMA_MultiBufferSetConfig+0x150>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d01d      	beq.n	80072aa <DMA_MultiBufferSetConfig+0xae>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a37      	ldr	r2, [pc, #220]	@ (8007350 <DMA_MultiBufferSetConfig+0x154>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d018      	beq.n	80072aa <DMA_MultiBufferSetConfig+0xae>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a35      	ldr	r2, [pc, #212]	@ (8007354 <DMA_MultiBufferSetConfig+0x158>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <DMA_MultiBufferSetConfig+0xae>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a34      	ldr	r2, [pc, #208]	@ (8007358 <DMA_MultiBufferSetConfig+0x15c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00e      	beq.n	80072aa <DMA_MultiBufferSetConfig+0xae>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a32      	ldr	r2, [pc, #200]	@ (800735c <DMA_MultiBufferSetConfig+0x160>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d009      	beq.n	80072aa <DMA_MultiBufferSetConfig+0xae>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a31      	ldr	r2, [pc, #196]	@ (8007360 <DMA_MultiBufferSetConfig+0x164>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d004      	beq.n	80072aa <DMA_MultiBufferSetConfig+0xae>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a2f      	ldr	r2, [pc, #188]	@ (8007364 <DMA_MultiBufferSetConfig+0x168>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d101      	bne.n	80072ae <DMA_MultiBufferSetConfig+0xb2>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <DMA_MultiBufferSetConfig+0xb4>
 80072ae:	2300      	movs	r3, #0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d019      	beq.n	80072e8 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	2b40      	cmp	r3, #64	@ 0x40
 80072c2:	d108      	bne.n	80072d6 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 80072d4:	e021      	b.n	800731a <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	60da      	str	r2, [r3, #12]
}
 80072e6:	e018      	b.n	800731a <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	2b40      	cmp	r3, #64	@ 0x40
 80072f6:	d108      	bne.n	800730a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	60da      	str	r2, [r3, #12]
}
 8007308:	e007      	b.n	800731a <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	60da      	str	r2, [r3, #12]
}
 800731a:	bf00      	nop
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40020010 	.word	0x40020010
 800732c:	40020028 	.word	0x40020028
 8007330:	40020040 	.word	0x40020040
 8007334:	40020058 	.word	0x40020058
 8007338:	40020070 	.word	0x40020070
 800733c:	40020088 	.word	0x40020088
 8007340:	400200a0 	.word	0x400200a0
 8007344:	400200b8 	.word	0x400200b8
 8007348:	40020410 	.word	0x40020410
 800734c:	40020428 	.word	0x40020428
 8007350:	40020440 	.word	0x40020440
 8007354:	40020458 	.word	0x40020458
 8007358:	40020470 	.word	0x40020470
 800735c:	40020488 	.word	0x40020488
 8007360:	400204a0 	.word	0x400204a0
 8007364:	400204b8 	.word	0x400204b8

08007368 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007368:	b480      	push	{r7}
 800736a:	b089      	sub	sp, #36	@ 0x24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007372:	2300      	movs	r3, #0
 8007374:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007376:	4b89      	ldr	r3, [pc, #548]	@ (800759c <HAL_GPIO_Init+0x234>)
 8007378:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800737a:	e194      	b.n	80076a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	2101      	movs	r1, #1
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	fa01 f303 	lsl.w	r3, r1, r3
 8007388:	4013      	ands	r3, r2
 800738a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 8186 	beq.w	80076a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f003 0303 	and.w	r3, r3, #3
 800739c:	2b01      	cmp	r3, #1
 800739e:	d005      	beq.n	80073ac <HAL_GPIO_Init+0x44>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f003 0303 	and.w	r3, r3, #3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d130      	bne.n	800740e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	2203      	movs	r2, #3
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	43db      	mvns	r3, r3
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	4013      	ands	r3, r2
 80073c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	68da      	ldr	r2, [r3, #12]
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	fa02 f303 	lsl.w	r3, r2, r3
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	69ba      	ldr	r2, [r7, #24]
 80073da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073e2:	2201      	movs	r2, #1
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ea:	43db      	mvns	r3, r3
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	4013      	ands	r3, r2
 80073f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	091b      	lsrs	r3, r3, #4
 80073f8:	f003 0201 	and.w	r2, r3, #1
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	4313      	orrs	r3, r2
 8007406:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	2b03      	cmp	r3, #3
 8007418:	d017      	beq.n	800744a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	2203      	movs	r2, #3
 8007426:	fa02 f303 	lsl.w	r3, r2, r3
 800742a:	43db      	mvns	r3, r3
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	4013      	ands	r3, r2
 8007430:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	689a      	ldr	r2, [r3, #8]
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	fa02 f303 	lsl.w	r3, r2, r3
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	4313      	orrs	r3, r2
 8007442:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f003 0303 	and.w	r3, r3, #3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d123      	bne.n	800749e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	08da      	lsrs	r2, r3, #3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3208      	adds	r2, #8
 800745e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	f003 0307 	and.w	r3, r3, #7
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	220f      	movs	r2, #15
 800746e:	fa02 f303 	lsl.w	r3, r2, r3
 8007472:	43db      	mvns	r3, r3
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	4013      	ands	r3, r2
 8007478:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	691a      	ldr	r2, [r3, #16]
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	f003 0307 	and.w	r3, r3, #7
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	fa02 f303 	lsl.w	r3, r2, r3
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	4313      	orrs	r3, r2
 800748e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	08da      	lsrs	r2, r3, #3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3208      	adds	r2, #8
 8007498:	69b9      	ldr	r1, [r7, #24]
 800749a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	2203      	movs	r2, #3
 80074aa:	fa02 f303 	lsl.w	r3, r2, r3
 80074ae:	43db      	mvns	r3, r3
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	4013      	ands	r3, r2
 80074b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f003 0203 	and.w	r2, r3, #3
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	fa02 f303 	lsl.w	r3, r2, r3
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 80e0 	beq.w	80076a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074e0:	4b2f      	ldr	r3, [pc, #188]	@ (80075a0 <HAL_GPIO_Init+0x238>)
 80074e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074e6:	4a2e      	ldr	r2, [pc, #184]	@ (80075a0 <HAL_GPIO_Init+0x238>)
 80074e8:	f043 0302 	orr.w	r3, r3, #2
 80074ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80074f0:	4b2b      	ldr	r3, [pc, #172]	@ (80075a0 <HAL_GPIO_Init+0x238>)
 80074f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80074fe:	4a29      	ldr	r2, [pc, #164]	@ (80075a4 <HAL_GPIO_Init+0x23c>)
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	089b      	lsrs	r3, r3, #2
 8007504:	3302      	adds	r3, #2
 8007506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800750a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	220f      	movs	r2, #15
 8007516:	fa02 f303 	lsl.w	r3, r2, r3
 800751a:	43db      	mvns	r3, r3
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	4013      	ands	r3, r2
 8007520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a20      	ldr	r2, [pc, #128]	@ (80075a8 <HAL_GPIO_Init+0x240>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d052      	beq.n	80075d0 <HAL_GPIO_Init+0x268>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a1f      	ldr	r2, [pc, #124]	@ (80075ac <HAL_GPIO_Init+0x244>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d031      	beq.n	8007596 <HAL_GPIO_Init+0x22e>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a1e      	ldr	r2, [pc, #120]	@ (80075b0 <HAL_GPIO_Init+0x248>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d02b      	beq.n	8007592 <HAL_GPIO_Init+0x22a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a1d      	ldr	r2, [pc, #116]	@ (80075b4 <HAL_GPIO_Init+0x24c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d025      	beq.n	800758e <HAL_GPIO_Init+0x226>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a1c      	ldr	r2, [pc, #112]	@ (80075b8 <HAL_GPIO_Init+0x250>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d01f      	beq.n	800758a <HAL_GPIO_Init+0x222>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a1b      	ldr	r2, [pc, #108]	@ (80075bc <HAL_GPIO_Init+0x254>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d019      	beq.n	8007586 <HAL_GPIO_Init+0x21e>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a1a      	ldr	r2, [pc, #104]	@ (80075c0 <HAL_GPIO_Init+0x258>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d013      	beq.n	8007582 <HAL_GPIO_Init+0x21a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a19      	ldr	r2, [pc, #100]	@ (80075c4 <HAL_GPIO_Init+0x25c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d00d      	beq.n	800757e <HAL_GPIO_Init+0x216>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a18      	ldr	r2, [pc, #96]	@ (80075c8 <HAL_GPIO_Init+0x260>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d007      	beq.n	800757a <HAL_GPIO_Init+0x212>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a17      	ldr	r2, [pc, #92]	@ (80075cc <HAL_GPIO_Init+0x264>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d101      	bne.n	8007576 <HAL_GPIO_Init+0x20e>
 8007572:	2309      	movs	r3, #9
 8007574:	e02d      	b.n	80075d2 <HAL_GPIO_Init+0x26a>
 8007576:	230a      	movs	r3, #10
 8007578:	e02b      	b.n	80075d2 <HAL_GPIO_Init+0x26a>
 800757a:	2308      	movs	r3, #8
 800757c:	e029      	b.n	80075d2 <HAL_GPIO_Init+0x26a>
 800757e:	2307      	movs	r3, #7
 8007580:	e027      	b.n	80075d2 <HAL_GPIO_Init+0x26a>
 8007582:	2306      	movs	r3, #6
 8007584:	e025      	b.n	80075d2 <HAL_GPIO_Init+0x26a>
 8007586:	2305      	movs	r3, #5
 8007588:	e023      	b.n	80075d2 <HAL_GPIO_Init+0x26a>
 800758a:	2304      	movs	r3, #4
 800758c:	e021      	b.n	80075d2 <HAL_GPIO_Init+0x26a>
 800758e:	2303      	movs	r3, #3
 8007590:	e01f      	b.n	80075d2 <HAL_GPIO_Init+0x26a>
 8007592:	2302      	movs	r3, #2
 8007594:	e01d      	b.n	80075d2 <HAL_GPIO_Init+0x26a>
 8007596:	2301      	movs	r3, #1
 8007598:	e01b      	b.n	80075d2 <HAL_GPIO_Init+0x26a>
 800759a:	bf00      	nop
 800759c:	58000080 	.word	0x58000080
 80075a0:	58024400 	.word	0x58024400
 80075a4:	58000400 	.word	0x58000400
 80075a8:	58020000 	.word	0x58020000
 80075ac:	58020400 	.word	0x58020400
 80075b0:	58020800 	.word	0x58020800
 80075b4:	58020c00 	.word	0x58020c00
 80075b8:	58021000 	.word	0x58021000
 80075bc:	58021400 	.word	0x58021400
 80075c0:	58021800 	.word	0x58021800
 80075c4:	58021c00 	.word	0x58021c00
 80075c8:	58022000 	.word	0x58022000
 80075cc:	58022400 	.word	0x58022400
 80075d0:	2300      	movs	r3, #0
 80075d2:	69fa      	ldr	r2, [r7, #28]
 80075d4:	f002 0203 	and.w	r2, r2, #3
 80075d8:	0092      	lsls	r2, r2, #2
 80075da:	4093      	lsls	r3, r2
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	4313      	orrs	r3, r2
 80075e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075e2:	4938      	ldr	r1, [pc, #224]	@ (80076c4 <HAL_GPIO_Init+0x35c>)
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	089b      	lsrs	r3, r3, #2
 80075e8:	3302      	adds	r3, #2
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	43db      	mvns	r3, r3
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	4013      	ands	r3, r2
 8007600:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800760e:	69ba      	ldr	r2, [r7, #24]
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	4313      	orrs	r3, r2
 8007614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007616:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800761e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	43db      	mvns	r3, r3
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	4013      	ands	r3, r2
 800762e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	4313      	orrs	r3, r2
 8007642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007644:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	43db      	mvns	r3, r3
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	4013      	ands	r3, r2
 800765a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	4313      	orrs	r3, r2
 800766e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	43db      	mvns	r3, r3
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	4013      	ands	r3, r2
 8007684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	4313      	orrs	r3, r2
 8007698:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	3301      	adds	r3, #1
 80076a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	fa22 f303 	lsr.w	r3, r2, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f47f ae63 	bne.w	800737c <HAL_GPIO_Init+0x14>
  }
}
 80076b6:	bf00      	nop
 80076b8:	bf00      	nop
 80076ba:	3724      	adds	r7, #36	@ 0x24
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	58000400 	.word	0x58000400

080076c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	807b      	strh	r3, [r7, #2]
 80076d4:	4613      	mov	r3, r2
 80076d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80076d8:	787b      	ldrb	r3, [r7, #1]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80076de:	887a      	ldrh	r2, [r7, #2]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80076e4:	e003      	b.n	80076ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80076e6:	887b      	ldrh	r3, [r7, #2]
 80076e8:	041a      	lsls	r2, r3, #16
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	619a      	str	r2, [r3, #24]
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
	...

080076fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e08b      	b.n	8007826 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d106      	bne.n	8007728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7fa feac 	bl	8002480 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2224      	movs	r2, #36	@ 0x24
 800772c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f022 0201 	bic.w	r2, r2, #1
 800773e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800774c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800775c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d107      	bne.n	8007776 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689a      	ldr	r2, [r3, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007772:	609a      	str	r2, [r3, #8]
 8007774:	e006      	b.n	8007784 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007782:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	2b02      	cmp	r3, #2
 800778a:	d108      	bne.n	800779e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800779a:	605a      	str	r2, [r3, #4]
 800779c:	e007      	b.n	80077ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6859      	ldr	r1, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007830 <HAL_I2C_Init+0x134>)
 80077ba:	430b      	orrs	r3, r1
 80077bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691a      	ldr	r2, [r3, #16]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	69d9      	ldr	r1, [r3, #28]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a1a      	ldr	r2, [r3, #32]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f042 0201 	orr.w	r2, r2, #1
 8007806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2220      	movs	r2, #32
 8007812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	02008000 	.word	0x02008000

08007834 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af02      	add	r7, sp, #8
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	607a      	str	r2, [r7, #4]
 800783e:	461a      	mov	r2, r3
 8007840:	460b      	mov	r3, r1
 8007842:	817b      	strh	r3, [r7, #10]
 8007844:	4613      	mov	r3, r2
 8007846:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b20      	cmp	r3, #32
 8007852:	f040 80fd 	bne.w	8007a50 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800785c:	2b01      	cmp	r3, #1
 800785e:	d101      	bne.n	8007864 <HAL_I2C_Master_Transmit+0x30>
 8007860:	2302      	movs	r3, #2
 8007862:	e0f6      	b.n	8007a52 <HAL_I2C_Master_Transmit+0x21e>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800786c:	f7fb fdd2 	bl	8003414 <HAL_GetTick>
 8007870:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	2319      	movs	r3, #25
 8007878:	2201      	movs	r2, #1
 800787a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f001 f891 	bl	80089a6 <I2C_WaitOnFlagUntilTimeout>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e0e1      	b.n	8007a52 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2221      	movs	r2, #33	@ 0x21
 8007892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2210      	movs	r2, #16
 800789a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	893a      	ldrh	r2, [r7, #8]
 80078ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	2bff      	cmp	r3, #255	@ 0xff
 80078be:	d906      	bls.n	80078ce <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	22ff      	movs	r2, #255	@ 0xff
 80078c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80078c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	e007      	b.n	80078de <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80078d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80078dc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d024      	beq.n	8007930 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ea:	781a      	ldrb	r2, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800790e:	3b01      	subs	r3, #1
 8007910:	b29a      	uxth	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800791a:	b2db      	uxtb	r3, r3
 800791c:	3301      	adds	r3, #1
 800791e:	b2da      	uxtb	r2, r3
 8007920:	8979      	ldrh	r1, [r7, #10]
 8007922:	4b4e      	ldr	r3, [pc, #312]	@ (8007a5c <HAL_I2C_Master_Transmit+0x228>)
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f001 fa8b 	bl	8008e44 <I2C_TransferConfig>
 800792e:	e066      	b.n	80079fe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007934:	b2da      	uxtb	r2, r3
 8007936:	8979      	ldrh	r1, [r7, #10]
 8007938:	4b48      	ldr	r3, [pc, #288]	@ (8007a5c <HAL_I2C_Master_Transmit+0x228>)
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f001 fa80 	bl	8008e44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007944:	e05b      	b.n	80079fe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	6a39      	ldr	r1, [r7, #32]
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f001 f884 	bl	8008a58 <I2C_WaitOnTXISFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e07b      	b.n	8007a52 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795e:	781a      	ldrb	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007974:	b29b      	uxth	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007982:	3b01      	subs	r3, #1
 8007984:	b29a      	uxth	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800798e:	b29b      	uxth	r3, r3
 8007990:	2b00      	cmp	r3, #0
 8007992:	d034      	beq.n	80079fe <HAL_I2C_Master_Transmit+0x1ca>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007998:	2b00      	cmp	r3, #0
 800799a:	d130      	bne.n	80079fe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	2200      	movs	r2, #0
 80079a4:	2180      	movs	r1, #128	@ 0x80
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 fffd 	bl	80089a6 <I2C_WaitOnFlagUntilTimeout>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e04d      	b.n	8007a52 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	2bff      	cmp	r3, #255	@ 0xff
 80079be:	d90e      	bls.n	80079de <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	22ff      	movs	r2, #255	@ 0xff
 80079c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	8979      	ldrh	r1, [r7, #10]
 80079ce:	2300      	movs	r3, #0
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f001 fa34 	bl	8008e44 <I2C_TransferConfig>
 80079dc:	e00f      	b.n	80079fe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	8979      	ldrh	r1, [r7, #10]
 80079f0:	2300      	movs	r3, #0
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f001 fa23 	bl	8008e44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d19e      	bne.n	8007946 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	6a39      	ldr	r1, [r7, #32]
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f001 f86a 	bl	8008ae6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e01a      	b.n	8007a52 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2220      	movs	r2, #32
 8007a22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6859      	ldr	r1, [r3, #4]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a60 <HAL_I2C_Master_Transmit+0x22c>)
 8007a30:	400b      	ands	r3, r1
 8007a32:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2220      	movs	r2, #32
 8007a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	e000      	b.n	8007a52 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007a50:	2302      	movs	r3, #2
  }
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	80002000 	.word	0x80002000
 8007a60:	fe00e800 	.word	0xfe00e800

08007a64 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b088      	sub	sp, #32
 8007a68:	af02      	add	r7, sp, #8
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	607a      	str	r2, [r7, #4]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	460b      	mov	r3, r1
 8007a72:	817b      	strh	r3, [r7, #10]
 8007a74:	4613      	mov	r3, r2
 8007a76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b20      	cmp	r3, #32
 8007a82:	f040 80db 	bne.w	8007c3c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d101      	bne.n	8007a94 <HAL_I2C_Master_Receive+0x30>
 8007a90:	2302      	movs	r3, #2
 8007a92:	e0d4      	b.n	8007c3e <HAL_I2C_Master_Receive+0x1da>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a9c:	f7fb fcba 	bl	8003414 <HAL_GetTick>
 8007aa0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	2319      	movs	r3, #25
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 ff79 	bl	80089a6 <I2C_WaitOnFlagUntilTimeout>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e0bf      	b.n	8007c3e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2222      	movs	r2, #34	@ 0x22
 8007ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2210      	movs	r2, #16
 8007aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	893a      	ldrh	r2, [r7, #8]
 8007ade:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	2bff      	cmp	r3, #255	@ 0xff
 8007aee:	d90e      	bls.n	8007b0e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	22ff      	movs	r2, #255	@ 0xff
 8007af4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	8979      	ldrh	r1, [r7, #10]
 8007afe:	4b52      	ldr	r3, [pc, #328]	@ (8007c48 <HAL_I2C_Master_Receive+0x1e4>)
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f001 f99c 	bl	8008e44 <I2C_TransferConfig>
 8007b0c:	e06d      	b.n	8007bea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	8979      	ldrh	r1, [r7, #10]
 8007b20:	4b49      	ldr	r3, [pc, #292]	@ (8007c48 <HAL_I2C_Master_Receive+0x1e4>)
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f001 f98b 	bl	8008e44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007b2e:	e05c      	b.n	8007bea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	6a39      	ldr	r1, [r7, #32]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f001 f819 	bl	8008b6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e07c      	b.n	8007c3e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4e:	b2d2      	uxtb	r2, r2
 8007b50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b56:	1c5a      	adds	r2, r3, #1
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b60:	3b01      	subs	r3, #1
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d034      	beq.n	8007bea <HAL_I2C_Master_Receive+0x186>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d130      	bne.n	8007bea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2180      	movs	r1, #128	@ 0x80
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 ff07 	bl	80089a6 <I2C_WaitOnFlagUntilTimeout>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e04d      	b.n	8007c3e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	2bff      	cmp	r3, #255	@ 0xff
 8007baa:	d90e      	bls.n	8007bca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	22ff      	movs	r2, #255	@ 0xff
 8007bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	8979      	ldrh	r1, [r7, #10]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f001 f93e 	bl	8008e44 <I2C_TransferConfig>
 8007bc8:	e00f      	b.n	8007bea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	8979      	ldrh	r1, [r7, #10]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f001 f92d 	bl	8008e44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d19d      	bne.n	8007b30 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	6a39      	ldr	r1, [r7, #32]
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 ff74 	bl	8008ae6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e01a      	b.n	8007c3e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6859      	ldr	r1, [r3, #4]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c4c <HAL_I2C_Master_Receive+0x1e8>)
 8007c1c:	400b      	ands	r3, r1
 8007c1e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	e000      	b.n	8007c3e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007c3c:	2302      	movs	r3, #2
  }
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	80002400 	.word	0x80002400
 8007c4c:	fe00e800 	.word	0xfe00e800

08007c50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d005      	beq.n	8007c7c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	68f9      	ldr	r1, [r7, #12]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	4798      	blx	r3
  }
}
 8007c7c:	bf00      	nop
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	0a1b      	lsrs	r3, r3, #8
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d010      	beq.n	8007cca <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	09db      	lsrs	r3, r3, #7
 8007cac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00a      	beq.n	8007cca <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb8:	f043 0201 	orr.w	r2, r3, #1
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cc8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	0a9b      	lsrs	r3, r3, #10
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d010      	beq.n	8007cf8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	09db      	lsrs	r3, r3, #7
 8007cda:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ce6:	f043 0208 	orr.w	r2, r3, #8
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007cf6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	0a5b      	lsrs	r3, r3, #9
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d010      	beq.n	8007d26 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	09db      	lsrs	r3, r3, #7
 8007d08:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00a      	beq.n	8007d26 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d14:	f043 0202 	orr.w	r2, r3, #2
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d24:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f003 030b 	and.w	r3, r3, #11
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007d36:	68f9      	ldr	r1, [r7, #12]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fcdb 	bl	80086f4 <I2C_ITError>
  }
}
 8007d3e:	bf00      	nop
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007d4e:	bf00      	nop
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	460b      	mov	r3, r1
 8007d78:	70fb      	strb	r3, [r7, #3]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007d92:	bf00      	nop
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b086      	sub	sp, #24
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d101      	bne.n	8007dea <I2C_Slave_ISR_IT+0x24>
 8007de6:	2302      	movs	r3, #2
 8007de8:	e0ed      	b.n	8007fc6 <I2C_Slave_ISR_IT+0x200>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	095b      	lsrs	r3, r3, #5
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	095b      	lsrs	r3, r3, #5
 8007e02:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d004      	beq.n	8007e14 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007e0a:	6939      	ldr	r1, [r7, #16]
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f9c1 	bl	8008194 <I2C_ITSlaveCplt>
 8007e12:	e0d3      	b.n	8007fbc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	091b      	lsrs	r3, r3, #4
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d04d      	beq.n	8007ebc <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	091b      	lsrs	r3, r3, #4
 8007e24:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d047      	beq.n	8007ebc <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d128      	bne.n	8007e88 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b28      	cmp	r3, #40	@ 0x28
 8007e40:	d108      	bne.n	8007e54 <I2C_Slave_ISR_IT+0x8e>
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e48:	d104      	bne.n	8007e54 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007e4a:	6939      	ldr	r1, [r7, #16]
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 fbfb 	bl	8008648 <I2C_ITListenCplt>
 8007e52:	e032      	b.n	8007eba <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b29      	cmp	r3, #41	@ 0x29
 8007e5e:	d10e      	bne.n	8007e7e <I2C_Slave_ISR_IT+0xb8>
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e66:	d00a      	beq.n	8007e7e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2210      	movs	r2, #16
 8007e6e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 fd56 	bl	8008922 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f000 f92d 	bl	80080d6 <I2C_ITSlaveSeqCplt>
 8007e7c:	e01d      	b.n	8007eba <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2210      	movs	r2, #16
 8007e84:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007e86:	e096      	b.n	8007fb6 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2210      	movs	r2, #16
 8007e8e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e94:	f043 0204 	orr.w	r2, r3, #4
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d004      	beq.n	8007eac <I2C_Slave_ISR_IT+0xe6>
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ea8:	f040 8085 	bne.w	8007fb6 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f000 fc1e 	bl	80086f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007eb8:	e07d      	b.n	8007fb6 <I2C_Slave_ISR_IT+0x1f0>
 8007eba:	e07c      	b.n	8007fb6 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	089b      	lsrs	r3, r3, #2
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d030      	beq.n	8007f2a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	089b      	lsrs	r3, r3, #2
 8007ecc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d02a      	beq.n	8007f2a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d018      	beq.n	8007f10 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee8:	b2d2      	uxtb	r2, r2
 8007eea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007efa:	3b01      	subs	r3, #1
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d14f      	bne.n	8007fba <I2C_Slave_ISR_IT+0x1f4>
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f20:	d04b      	beq.n	8007fba <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 f8d7 	bl	80080d6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007f28:	e047      	b.n	8007fba <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	08db      	lsrs	r3, r3, #3
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00a      	beq.n	8007f4c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	08db      	lsrs	r3, r3, #3
 8007f3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d004      	beq.n	8007f4c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007f42:	6939      	ldr	r1, [r7, #16]
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 f842 	bl	8007fce <I2C_ITAddrCplt>
 8007f4a:	e037      	b.n	8007fbc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d031      	beq.n	8007fbc <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	085b      	lsrs	r3, r3, #1
 8007f5c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d02b      	beq.n	8007fbc <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d018      	beq.n	8007fa0 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f72:	781a      	ldrb	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f96:	3b01      	subs	r3, #1
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007f9e:	e00d      	b.n	8007fbc <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fa6:	d002      	beq.n	8007fae <I2C_Slave_ISR_IT+0x1e8>
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d106      	bne.n	8007fbc <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 f891 	bl	80080d6 <I2C_ITSlaveSeqCplt>
 8007fb4:	e002      	b.n	8007fbc <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8007fb6:	bf00      	nop
 8007fb8:	e000      	b.n	8007fbc <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8007fba:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fe4:	2b28      	cmp	r3, #40	@ 0x28
 8007fe6:	d16a      	bne.n	80080be <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	0c1b      	lsrs	r3, r3, #16
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	0c1b      	lsrs	r3, r3, #16
 8008000:	b29b      	uxth	r3, r3
 8008002:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008006:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	b29b      	uxth	r3, r3
 8008010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008014:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	b29b      	uxth	r3, r3
 800801e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008022:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	2b02      	cmp	r3, #2
 800802a:	d138      	bne.n	800809e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800802c:	897b      	ldrh	r3, [r7, #10]
 800802e:	09db      	lsrs	r3, r3, #7
 8008030:	b29a      	uxth	r2, r3
 8008032:	89bb      	ldrh	r3, [r7, #12]
 8008034:	4053      	eors	r3, r2
 8008036:	b29b      	uxth	r3, r3
 8008038:	f003 0306 	and.w	r3, r3, #6
 800803c:	2b00      	cmp	r3, #0
 800803e:	d11c      	bne.n	800807a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008040:	897b      	ldrh	r3, [r7, #10]
 8008042:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008052:	2b02      	cmp	r3, #2
 8008054:	d13b      	bne.n	80080ce <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2208      	movs	r2, #8
 8008062:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800806c:	89ba      	ldrh	r2, [r7, #12]
 800806e:	7bfb      	ldrb	r3, [r7, #15]
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7ff fe7b 	bl	8007d6e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008078:	e029      	b.n	80080ce <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800807a:	893b      	ldrh	r3, [r7, #8]
 800807c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800807e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 ff10 	bl	8008ea8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008090:	89ba      	ldrh	r2, [r7, #12]
 8008092:	7bfb      	ldrb	r3, [r7, #15]
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff fe69 	bl	8007d6e <HAL_I2C_AddrCallback>
}
 800809c:	e017      	b.n	80080ce <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800809e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 ff00 	bl	8008ea8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80080b0:	89ba      	ldrh	r2, [r7, #12]
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7ff fe59 	bl	8007d6e <HAL_I2C_AddrCallback>
}
 80080bc:	e007      	b.n	80080ce <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2208      	movs	r2, #8
 80080c4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80080ce:	bf00      	nop
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	0b9b      	lsrs	r3, r3, #14
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d008      	beq.n	800810c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	e00d      	b.n	8008128 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	0bdb      	lsrs	r3, r3, #15
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	2b00      	cmp	r3, #0
 8008116:	d007      	beq.n	8008128 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008126:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b29      	cmp	r3, #41	@ 0x29
 8008132:	d112      	bne.n	800815a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2228      	movs	r2, #40	@ 0x28
 8008138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2221      	movs	r2, #33	@ 0x21
 8008140:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008142:	2101      	movs	r1, #1
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 feaf 	bl	8008ea8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7ff fdf7 	bl	8007d46 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008158:	e017      	b.n	800818a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b2a      	cmp	r3, #42	@ 0x2a
 8008164:	d111      	bne.n	800818a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2228      	movs	r2, #40	@ 0x28
 800816a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2222      	movs	r2, #34	@ 0x22
 8008172:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008174:	2102      	movs	r1, #2
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fe96 	bl	8008ea8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff fde8 	bl	8007d5a <HAL_I2C_SlaveRxCpltCallback>
}
 800818a:	bf00      	nop
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ae:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081b6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2220      	movs	r2, #32
 80081be:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80081c0:	7afb      	ldrb	r3, [r7, #11]
 80081c2:	2b21      	cmp	r3, #33	@ 0x21
 80081c4:	d002      	beq.n	80081cc <I2C_ITSlaveCplt+0x38>
 80081c6:	7afb      	ldrb	r3, [r7, #11]
 80081c8:	2b29      	cmp	r3, #41	@ 0x29
 80081ca:	d108      	bne.n	80081de <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80081cc:	f248 0101 	movw	r1, #32769	@ 0x8001
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fe69 	bl	8008ea8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2221      	movs	r2, #33	@ 0x21
 80081da:	631a      	str	r2, [r3, #48]	@ 0x30
 80081dc:	e019      	b.n	8008212 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80081de:	7afb      	ldrb	r3, [r7, #11]
 80081e0:	2b22      	cmp	r3, #34	@ 0x22
 80081e2:	d002      	beq.n	80081ea <I2C_ITSlaveCplt+0x56>
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80081e8:	d108      	bne.n	80081fc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80081ea:	f248 0102 	movw	r1, #32770	@ 0x8002
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fe5a 	bl	8008ea8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2222      	movs	r2, #34	@ 0x22
 80081f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80081fa:	e00a      	b.n	8008212 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80081fc:	7afb      	ldrb	r3, [r7, #11]
 80081fe:	2b28      	cmp	r3, #40	@ 0x28
 8008200:	d107      	bne.n	8008212 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008202:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fe4e 	bl	8008ea8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008220:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6859      	ldr	r1, [r3, #4]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	4b80      	ldr	r3, [pc, #512]	@ (8008430 <I2C_ITSlaveCplt+0x29c>)
 800822e:	400b      	ands	r3, r1
 8008230:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fb75 	bl	8008922 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	0b9b      	lsrs	r3, r3, #14
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b00      	cmp	r3, #0
 8008242:	d07a      	beq.n	800833a <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008252:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 8112 	beq.w	8008482 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a73      	ldr	r2, [pc, #460]	@ (8008434 <I2C_ITSlaveCplt+0x2a0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d059      	beq.n	800831e <I2C_ITSlaveCplt+0x18a>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a71      	ldr	r2, [pc, #452]	@ (8008438 <I2C_ITSlaveCplt+0x2a4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d053      	beq.n	800831e <I2C_ITSlaveCplt+0x18a>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a6f      	ldr	r2, [pc, #444]	@ (800843c <I2C_ITSlaveCplt+0x2a8>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d04d      	beq.n	800831e <I2C_ITSlaveCplt+0x18a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a6d      	ldr	r2, [pc, #436]	@ (8008440 <I2C_ITSlaveCplt+0x2ac>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d047      	beq.n	800831e <I2C_ITSlaveCplt+0x18a>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a6b      	ldr	r2, [pc, #428]	@ (8008444 <I2C_ITSlaveCplt+0x2b0>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d041      	beq.n	800831e <I2C_ITSlaveCplt+0x18a>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a69      	ldr	r2, [pc, #420]	@ (8008448 <I2C_ITSlaveCplt+0x2b4>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d03b      	beq.n	800831e <I2C_ITSlaveCplt+0x18a>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a67      	ldr	r2, [pc, #412]	@ (800844c <I2C_ITSlaveCplt+0x2b8>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d035      	beq.n	800831e <I2C_ITSlaveCplt+0x18a>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a65      	ldr	r2, [pc, #404]	@ (8008450 <I2C_ITSlaveCplt+0x2bc>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d02f      	beq.n	800831e <I2C_ITSlaveCplt+0x18a>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a63      	ldr	r2, [pc, #396]	@ (8008454 <I2C_ITSlaveCplt+0x2c0>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d029      	beq.n	800831e <I2C_ITSlaveCplt+0x18a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a61      	ldr	r2, [pc, #388]	@ (8008458 <I2C_ITSlaveCplt+0x2c4>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d023      	beq.n	800831e <I2C_ITSlaveCplt+0x18a>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a5f      	ldr	r2, [pc, #380]	@ (800845c <I2C_ITSlaveCplt+0x2c8>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d01d      	beq.n	800831e <I2C_ITSlaveCplt+0x18a>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a5d      	ldr	r2, [pc, #372]	@ (8008460 <I2C_ITSlaveCplt+0x2cc>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d017      	beq.n	800831e <I2C_ITSlaveCplt+0x18a>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a5b      	ldr	r2, [pc, #364]	@ (8008464 <I2C_ITSlaveCplt+0x2d0>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d011      	beq.n	800831e <I2C_ITSlaveCplt+0x18a>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a59      	ldr	r2, [pc, #356]	@ (8008468 <I2C_ITSlaveCplt+0x2d4>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d00b      	beq.n	800831e <I2C_ITSlaveCplt+0x18a>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a57      	ldr	r2, [pc, #348]	@ (800846c <I2C_ITSlaveCplt+0x2d8>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d005      	beq.n	800831e <I2C_ITSlaveCplt+0x18a>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a55      	ldr	r2, [pc, #340]	@ (8008470 <I2C_ITSlaveCplt+0x2dc>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d105      	bne.n	800832a <I2C_ITSlaveCplt+0x196>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	b29b      	uxth	r3, r3
 8008328:	e004      	b.n	8008334 <I2C_ITSlaveCplt+0x1a0>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	b29b      	uxth	r3, r3
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8008338:	e0a3      	b.n	8008482 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	0bdb      	lsrs	r3, r3, #15
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 809d 	beq.w	8008482 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008356:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 8090 	beq.w	8008482 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a32      	ldr	r2, [pc, #200]	@ (8008434 <I2C_ITSlaveCplt+0x2a0>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d059      	beq.n	8008422 <I2C_ITSlaveCplt+0x28e>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a30      	ldr	r2, [pc, #192]	@ (8008438 <I2C_ITSlaveCplt+0x2a4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d053      	beq.n	8008422 <I2C_ITSlaveCplt+0x28e>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a2e      	ldr	r2, [pc, #184]	@ (800843c <I2C_ITSlaveCplt+0x2a8>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d04d      	beq.n	8008422 <I2C_ITSlaveCplt+0x28e>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a2c      	ldr	r2, [pc, #176]	@ (8008440 <I2C_ITSlaveCplt+0x2ac>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d047      	beq.n	8008422 <I2C_ITSlaveCplt+0x28e>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a2a      	ldr	r2, [pc, #168]	@ (8008444 <I2C_ITSlaveCplt+0x2b0>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d041      	beq.n	8008422 <I2C_ITSlaveCplt+0x28e>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a28      	ldr	r2, [pc, #160]	@ (8008448 <I2C_ITSlaveCplt+0x2b4>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d03b      	beq.n	8008422 <I2C_ITSlaveCplt+0x28e>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a26      	ldr	r2, [pc, #152]	@ (800844c <I2C_ITSlaveCplt+0x2b8>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d035      	beq.n	8008422 <I2C_ITSlaveCplt+0x28e>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a24      	ldr	r2, [pc, #144]	@ (8008450 <I2C_ITSlaveCplt+0x2bc>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d02f      	beq.n	8008422 <I2C_ITSlaveCplt+0x28e>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a22      	ldr	r2, [pc, #136]	@ (8008454 <I2C_ITSlaveCplt+0x2c0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d029      	beq.n	8008422 <I2C_ITSlaveCplt+0x28e>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a20      	ldr	r2, [pc, #128]	@ (8008458 <I2C_ITSlaveCplt+0x2c4>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d023      	beq.n	8008422 <I2C_ITSlaveCplt+0x28e>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a1e      	ldr	r2, [pc, #120]	@ (800845c <I2C_ITSlaveCplt+0x2c8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d01d      	beq.n	8008422 <I2C_ITSlaveCplt+0x28e>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008460 <I2C_ITSlaveCplt+0x2cc>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d017      	beq.n	8008422 <I2C_ITSlaveCplt+0x28e>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a1a      	ldr	r2, [pc, #104]	@ (8008464 <I2C_ITSlaveCplt+0x2d0>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d011      	beq.n	8008422 <I2C_ITSlaveCplt+0x28e>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a18      	ldr	r2, [pc, #96]	@ (8008468 <I2C_ITSlaveCplt+0x2d4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d00b      	beq.n	8008422 <I2C_ITSlaveCplt+0x28e>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a16      	ldr	r2, [pc, #88]	@ (800846c <I2C_ITSlaveCplt+0x2d8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d005      	beq.n	8008422 <I2C_ITSlaveCplt+0x28e>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a14      	ldr	r2, [pc, #80]	@ (8008470 <I2C_ITSlaveCplt+0x2dc>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d128      	bne.n	8008474 <I2C_ITSlaveCplt+0x2e0>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	b29b      	uxth	r3, r3
 800842c:	e027      	b.n	800847e <I2C_ITSlaveCplt+0x2ea>
 800842e:	bf00      	nop
 8008430:	fe00e800 	.word	0xfe00e800
 8008434:	40020010 	.word	0x40020010
 8008438:	40020028 	.word	0x40020028
 800843c:	40020040 	.word	0x40020040
 8008440:	40020058 	.word	0x40020058
 8008444:	40020070 	.word	0x40020070
 8008448:	40020088 	.word	0x40020088
 800844c:	400200a0 	.word	0x400200a0
 8008450:	400200b8 	.word	0x400200b8
 8008454:	40020410 	.word	0x40020410
 8008458:	40020428 	.word	0x40020428
 800845c:	40020440 	.word	0x40020440
 8008460:	40020458 	.word	0x40020458
 8008464:	40020470 	.word	0x40020470
 8008468:	40020488 	.word	0x40020488
 800846c:	400204a0 	.word	0x400204a0
 8008470:	400204b8 	.word	0x400204b8
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	b29b      	uxth	r3, r3
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	089b      	lsrs	r3, r3, #2
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d020      	beq.n	80084d0 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f023 0304 	bic.w	r3, r3, #4
 8008494:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a0:	b2d2      	uxtb	r2, r2
 80084a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a8:	1c5a      	adds	r2, r3, #1
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00c      	beq.n	80084d0 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084ba:	3b01      	subs	r3, #1
 80084bc:	b29a      	uxth	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	3b01      	subs	r3, #1
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d005      	beq.n	80084e6 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084de:	f043 0204 	orr.w	r2, r3, #4
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	091b      	lsrs	r3, r3, #4
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d04a      	beq.n	8008588 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	091b      	lsrs	r3, r3, #4
 80084f6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d044      	beq.n	8008588 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008502:	b29b      	uxth	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d128      	bne.n	800855a <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b28      	cmp	r3, #40	@ 0x28
 8008512:	d108      	bne.n	8008526 <I2C_ITSlaveCplt+0x392>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800851a:	d104      	bne.n	8008526 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800851c:	6979      	ldr	r1, [r7, #20]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f892 	bl	8008648 <I2C_ITListenCplt>
 8008524:	e030      	b.n	8008588 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b29      	cmp	r3, #41	@ 0x29
 8008530:	d10e      	bne.n	8008550 <I2C_ITSlaveCplt+0x3bc>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008538:	d00a      	beq.n	8008550 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2210      	movs	r2, #16
 8008540:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f9ed 	bl	8008922 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7ff fdc4 	bl	80080d6 <I2C_ITSlaveSeqCplt>
 800854e:	e01b      	b.n	8008588 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2210      	movs	r2, #16
 8008556:	61da      	str	r2, [r3, #28]
 8008558:	e016      	b.n	8008588 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2210      	movs	r2, #16
 8008560:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008566:	f043 0204 	orr.w	r2, r3, #4
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <I2C_ITSlaveCplt+0x3e8>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800857a:	d105      	bne.n	8008588 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f8b6 	bl	80086f4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800859a:	2b00      	cmp	r3, #0
 800859c:	d010      	beq.n	80085c0 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f8a5 	bl	80086f4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b28      	cmp	r3, #40	@ 0x28
 80085b4:	d141      	bne.n	800863a <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80085b6:	6979      	ldr	r1, [r7, #20]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f845 	bl	8008648 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085be:	e03c      	b.n	800863a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80085c8:	d014      	beq.n	80085f4 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7ff fd83 	bl	80080d6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a1c      	ldr	r2, [pc, #112]	@ (8008644 <I2C_ITSlaveCplt+0x4b0>)
 80085d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2220      	movs	r2, #32
 80085da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff fbcc 	bl	8007d8a <HAL_I2C_ListenCpltCallback>
}
 80085f2:	e022      	b.n	800863a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b22      	cmp	r3, #34	@ 0x22
 80085fe:	d10e      	bne.n	800861e <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2220      	movs	r2, #32
 8008604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff fb9f 	bl	8007d5a <HAL_I2C_SlaveRxCpltCallback>
}
 800861c:	e00d      	b.n	800863a <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2220      	movs	r2, #32
 8008622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7ff fb86 	bl	8007d46 <HAL_I2C_SlaveTxCpltCallback>
}
 800863a:	bf00      	nop
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	ffff0000 	.word	0xffff0000

08008648 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a26      	ldr	r2, [pc, #152]	@ (80086f0 <I2C_ITListenCplt+0xa8>)
 8008656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2220      	movs	r2, #32
 8008662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	089b      	lsrs	r3, r3, #2
 8008678:	f003 0301 	and.w	r3, r3, #1
 800867c:	2b00      	cmp	r3, #0
 800867e:	d022      	beq.n	80086c6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868a:	b2d2      	uxtb	r2, r2
 800868c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008692:	1c5a      	adds	r2, r3, #1
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800869c:	2b00      	cmp	r3, #0
 800869e:	d012      	beq.n	80086c6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086a4:	3b01      	subs	r3, #1
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	3b01      	subs	r3, #1
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086be:	f043 0204 	orr.w	r2, r3, #4
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80086c6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fbec 	bl	8008ea8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2210      	movs	r2, #16
 80086d6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff fb52 	bl	8007d8a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80086e6:	bf00      	nop
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	ffff0000 	.word	0xffff0000

080086f4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008704:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a6d      	ldr	r2, [pc, #436]	@ (80088c8 <I2C_ITError+0x1d4>)
 8008712:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	431a      	orrs	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008726:	7bfb      	ldrb	r3, [r7, #15]
 8008728:	2b28      	cmp	r3, #40	@ 0x28
 800872a:	d005      	beq.n	8008738 <I2C_ITError+0x44>
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	2b29      	cmp	r3, #41	@ 0x29
 8008730:	d002      	beq.n	8008738 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	2b2a      	cmp	r3, #42	@ 0x2a
 8008736:	d10b      	bne.n	8008750 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008738:	2103      	movs	r1, #3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fbb4 	bl	8008ea8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2228      	movs	r2, #40	@ 0x28
 8008744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a60      	ldr	r2, [pc, #384]	@ (80088cc <I2C_ITError+0x1d8>)
 800874c:	635a      	str	r2, [r3, #52]	@ 0x34
 800874e:	e030      	b.n	80087b2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008750:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fba7 	bl	8008ea8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f8e1 	bl	8008922 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b60      	cmp	r3, #96	@ 0x60
 800876a:	d01f      	beq.n	80087ac <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2220      	movs	r2, #32
 8008770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b20      	cmp	r3, #32
 8008780:	d114      	bne.n	80087ac <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	f003 0310 	and.w	r3, r3, #16
 800878c:	2b10      	cmp	r3, #16
 800878e:	d109      	bne.n	80087a4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2210      	movs	r2, #16
 8008796:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800879c:	f043 0204 	orr.w	r2, r3, #4
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2220      	movs	r2, #32
 80087aa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d039      	beq.n	8008834 <I2C_ITError+0x140>
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2b11      	cmp	r3, #17
 80087c4:	d002      	beq.n	80087cc <I2C_ITError+0xd8>
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	2b21      	cmp	r3, #33	@ 0x21
 80087ca:	d133      	bne.n	8008834 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087da:	d107      	bne.n	80087ec <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80087ea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fd fd13 	bl	800621c <HAL_DMA_GetState>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d017      	beq.n	800882c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008800:	4a33      	ldr	r2, [pc, #204]	@ (80088d0 <I2C_ITError+0x1dc>)
 8008802:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008810:	4618      	mov	r0, r3
 8008812:	f7fc fb93 	bl	8004f3c <HAL_DMA_Abort_IT>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d04d      	beq.n	80088b8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008826:	4610      	mov	r0, r2
 8008828:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800882a:	e045      	b.n	80088b8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f851 	bl	80088d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008832:	e041      	b.n	80088b8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008838:	2b00      	cmp	r3, #0
 800883a:	d039      	beq.n	80088b0 <I2C_ITError+0x1bc>
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b12      	cmp	r3, #18
 8008840:	d002      	beq.n	8008848 <I2C_ITError+0x154>
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2b22      	cmp	r3, #34	@ 0x22
 8008846:	d133      	bne.n	80088b0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008856:	d107      	bne.n	8008868 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008866:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800886c:	4618      	mov	r0, r3
 800886e:	f7fd fcd5 	bl	800621c <HAL_DMA_GetState>
 8008872:	4603      	mov	r3, r0
 8008874:	2b01      	cmp	r3, #1
 8008876:	d017      	beq.n	80088a8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800887c:	4a14      	ldr	r2, [pc, #80]	@ (80088d0 <I2C_ITError+0x1dc>)
 800887e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800888c:	4618      	mov	r0, r3
 800888e:	f7fc fb55 	bl	8004f3c <HAL_DMA_Abort_IT>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d011      	beq.n	80088bc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800889c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80088a2:	4610      	mov	r0, r2
 80088a4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088a6:	e009      	b.n	80088bc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f813 	bl	80088d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088ae:	e005      	b.n	80088bc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f80f 	bl	80088d4 <I2C_TreatErrorCallback>
  }
}
 80088b6:	e002      	b.n	80088be <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80088b8:	bf00      	nop
 80088ba:	e000      	b.n	80088be <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088bc:	bf00      	nop
}
 80088be:	bf00      	nop
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	ffff0000 	.word	0xffff0000
 80088cc:	08007dc7 	.word	0x08007dc7
 80088d0:	0800896b 	.word	0x0800896b

080088d4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b60      	cmp	r3, #96	@ 0x60
 80088e6:	d10e      	bne.n	8008906 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2220      	movs	r2, #32
 80088ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7ff fa57 	bl	8007db2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008904:	e009      	b.n	800891a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7ff fa42 	bl	8007d9e <HAL_I2C_ErrorCallback>
}
 800891a:	bf00      	nop
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008922:	b480      	push	{r7}
 8008924:	b083      	sub	sp, #12
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b02      	cmp	r3, #2
 8008936:	d103      	bne.n	8008940 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2200      	movs	r2, #0
 800893e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b01      	cmp	r3, #1
 800894c:	d007      	beq.n	800895e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	699a      	ldr	r2, [r3, #24]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f042 0201 	orr.w	r2, r2, #1
 800895c:	619a      	str	r2, [r3, #24]
  }
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008976:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800897c:	2b00      	cmp	r3, #0
 800897e:	d003      	beq.n	8008988 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008984:	2200      	movs	r2, #0
 8008986:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d003      	beq.n	8008998 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008994:	2200      	movs	r2, #0
 8008996:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f7ff ff9b 	bl	80088d4 <I2C_TreatErrorCallback>
}
 800899e:	bf00      	nop
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	603b      	str	r3, [r7, #0]
 80089b2:	4613      	mov	r3, r2
 80089b4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089b6:	e03b      	b.n	8008a30 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 f961 	bl	8008c84 <I2C_IsErrorOccurred>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e041      	b.n	8008a50 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d2:	d02d      	beq.n	8008a30 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089d4:	f7fa fd1e 	bl	8003414 <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d302      	bcc.n	80089ea <I2C_WaitOnFlagUntilTimeout+0x44>
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d122      	bne.n	8008a30 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	699a      	ldr	r2, [r3, #24]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	4013      	ands	r3, r2
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	bf0c      	ite	eq
 80089fa:	2301      	moveq	r3, #1
 80089fc:	2300      	movne	r3, #0
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	461a      	mov	r2, r3
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d113      	bne.n	8008a30 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a0c:	f043 0220 	orr.w	r2, r3, #32
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2220      	movs	r2, #32
 8008a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e00f      	b.n	8008a50 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	699a      	ldr	r2, [r3, #24]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	bf0c      	ite	eq
 8008a40:	2301      	moveq	r3, #1
 8008a42:	2300      	movne	r3, #0
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	461a      	mov	r2, r3
 8008a48:	79fb      	ldrb	r3, [r7, #7]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d0b4      	beq.n	80089b8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a64:	e033      	b.n	8008ace <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	68b9      	ldr	r1, [r7, #8]
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 f90a 	bl	8008c84 <I2C_IsErrorOccurred>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e031      	b.n	8008ade <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a80:	d025      	beq.n	8008ace <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a82:	f7fa fcc7 	bl	8003414 <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d302      	bcc.n	8008a98 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d11a      	bne.n	8008ace <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	f003 0302 	and.w	r3, r3, #2
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d013      	beq.n	8008ace <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aaa:	f043 0220 	orr.w	r2, r3, #32
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e007      	b.n	8008ade <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	f003 0302 	and.w	r3, r3, #2
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d1c4      	bne.n	8008a66 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b084      	sub	sp, #16
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008af2:	e02f      	b.n	8008b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	68b9      	ldr	r1, [r7, #8]
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 f8c3 	bl	8008c84 <I2C_IsErrorOccurred>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e02d      	b.n	8008b64 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b08:	f7fa fc84 	bl	8003414 <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d302      	bcc.n	8008b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d11a      	bne.n	8008b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	f003 0320 	and.w	r3, r3, #32
 8008b28:	2b20      	cmp	r3, #32
 8008b2a:	d013      	beq.n	8008b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b30:	f043 0220 	orr.w	r2, r3, #32
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e007      	b.n	8008b64 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	f003 0320 	and.w	r3, r3, #32
 8008b5e:	2b20      	cmp	r3, #32
 8008b60:	d1c8      	bne.n	8008af4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008b7c:	e071      	b.n	8008c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	68b9      	ldr	r1, [r7, #8]
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 f87e 	bl	8008c84 <I2C_IsErrorOccurred>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	f003 0320 	and.w	r3, r3, #32
 8008b9c:	2b20      	cmp	r3, #32
 8008b9e:	d13b      	bne.n	8008c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d138      	bne.n	8008c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	f003 0304 	and.w	r3, r3, #4
 8008bb0:	2b04      	cmp	r3, #4
 8008bb2:	d105      	bne.n	8008bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	f003 0310 	and.w	r3, r3, #16
 8008bca:	2b10      	cmp	r3, #16
 8008bcc:	d121      	bne.n	8008c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2210      	movs	r2, #16
 8008bd4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2204      	movs	r2, #4
 8008bda:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2220      	movs	r2, #32
 8008be2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6859      	ldr	r1, [r3, #4]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	4b24      	ldr	r3, [pc, #144]	@ (8008c80 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008bf0:	400b      	ands	r3, r1
 8008bf2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	75fb      	strb	r3, [r7, #23]
 8008c10:	e002      	b.n	8008c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008c18:	f7fa fbfc 	bl	8003414 <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d302      	bcc.n	8008c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d119      	bne.n	8008c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d116      	bne.n	8008c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	f003 0304 	and.w	r3, r3, #4
 8008c3e:	2b04      	cmp	r3, #4
 8008c40:	d00f      	beq.n	8008c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c46:	f043 0220 	orr.w	r2, r3, #32
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	f003 0304 	and.w	r3, r3, #4
 8008c6c:	2b04      	cmp	r3, #4
 8008c6e:	d002      	beq.n	8008c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d083      	beq.n	8008b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3718      	adds	r7, #24
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	fe00e800 	.word	0xfe00e800

08008c84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b08a      	sub	sp, #40	@ 0x28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	f003 0310 	and.w	r3, r3, #16
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d068      	beq.n	8008d82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2210      	movs	r2, #16
 8008cb6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008cb8:	e049      	b.n	8008d4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc0:	d045      	beq.n	8008d4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008cc2:	f7fa fba7 	bl	8003414 <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d302      	bcc.n	8008cd8 <I2C_IsErrorOccurred+0x54>
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d13a      	bne.n	8008d4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ce2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cfa:	d121      	bne.n	8008d40 <I2C_IsErrorOccurred+0xbc>
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d02:	d01d      	beq.n	8008d40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008d04:	7cfb      	ldrb	r3, [r7, #19]
 8008d06:	2b20      	cmp	r3, #32
 8008d08:	d01a      	beq.n	8008d40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008d1a:	f7fa fb7b 	bl	8003414 <HAL_GetTick>
 8008d1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d20:	e00e      	b.n	8008d40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008d22:	f7fa fb77 	bl	8003414 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b19      	cmp	r3, #25
 8008d2e:	d907      	bls.n	8008d40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008d30:	6a3b      	ldr	r3, [r7, #32]
 8008d32:	f043 0320 	orr.w	r3, r3, #32
 8008d36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008d3e:	e006      	b.n	8008d4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	f003 0320 	and.w	r3, r3, #32
 8008d4a:	2b20      	cmp	r3, #32
 8008d4c:	d1e9      	bne.n	8008d22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	f003 0320 	and.w	r3, r3, #32
 8008d58:	2b20      	cmp	r3, #32
 8008d5a:	d003      	beq.n	8008d64 <I2C_IsErrorOccurred+0xe0>
 8008d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d0aa      	beq.n	8008cba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d103      	bne.n	8008d74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2220      	movs	r2, #32
 8008d72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	f043 0304 	orr.w	r3, r3, #4
 8008d7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00b      	beq.n	8008dac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	f043 0301 	orr.w	r3, r3, #1
 8008d9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008da4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00b      	beq.n	8008dce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	f043 0308 	orr.w	r3, r3, #8
 8008dbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008dc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00b      	beq.n	8008df0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008dd8:	6a3b      	ldr	r3, [r7, #32]
 8008dda:	f043 0302 	orr.w	r3, r3, #2
 8008dde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008de8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008df0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d01c      	beq.n	8008e32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f7ff fd92 	bl	8008922 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6859      	ldr	r1, [r3, #4]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	4b0d      	ldr	r3, [pc, #52]	@ (8008e40 <I2C_IsErrorOccurred+0x1bc>)
 8008e0a:	400b      	ands	r3, r1
 8008e0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	431a      	orrs	r2, r3
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2220      	movs	r2, #32
 8008e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008e32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3728      	adds	r7, #40	@ 0x28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	fe00e800 	.word	0xfe00e800

08008e44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b087      	sub	sp, #28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	607b      	str	r3, [r7, #4]
 8008e4e:	460b      	mov	r3, r1
 8008e50:	817b      	strh	r3, [r7, #10]
 8008e52:	4613      	mov	r3, r2
 8008e54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e56:	897b      	ldrh	r3, [r7, #10]
 8008e58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e5c:	7a7b      	ldrb	r3, [r7, #9]
 8008e5e:	041b      	lsls	r3, r3, #16
 8008e60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e64:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e72:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	0d5b      	lsrs	r3, r3, #21
 8008e7e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008e82:	4b08      	ldr	r3, [pc, #32]	@ (8008ea4 <I2C_TransferConfig+0x60>)
 8008e84:	430b      	orrs	r3, r1
 8008e86:	43db      	mvns	r3, r3
 8008e88:	ea02 0103 	and.w	r1, r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008e96:	bf00      	nop
 8008e98:	371c      	adds	r7, #28
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	03ff63ff 	.word	0x03ff63ff

08008ea8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008eb8:	887b      	ldrh	r3, [r7, #2]
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00f      	beq.n	8008ee2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008ec8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008ed6:	2b28      	cmp	r3, #40	@ 0x28
 8008ed8:	d003      	beq.n	8008ee2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008ee0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008ee2:	887b      	ldrh	r3, [r7, #2]
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00f      	beq.n	8008f0c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008ef2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008f00:	2b28      	cmp	r3, #40	@ 0x28
 8008f02:	d003      	beq.n	8008f0c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008f0a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008f0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	da03      	bge.n	8008f1c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008f1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008f1c:	887b      	ldrh	r3, [r7, #2]
 8008f1e:	2b10      	cmp	r3, #16
 8008f20:	d103      	bne.n	8008f2a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008f28:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008f2a:	887b      	ldrh	r3, [r7, #2]
 8008f2c:	2b20      	cmp	r3, #32
 8008f2e:	d103      	bne.n	8008f38 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f043 0320 	orr.w	r3, r3, #32
 8008f36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008f38:	887b      	ldrh	r3, [r7, #2]
 8008f3a:	2b40      	cmp	r3, #64	@ 0x40
 8008f3c:	d103      	bne.n	8008f46 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f44:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6819      	ldr	r1, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	43da      	mvns	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	400a      	ands	r2, r1
 8008f56:	601a      	str	r2, [r3, #0]
}
 8008f58:	bf00      	nop
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b20      	cmp	r3, #32
 8008f78:	d138      	bne.n	8008fec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d101      	bne.n	8008f88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f84:	2302      	movs	r3, #2
 8008f86:	e032      	b.n	8008fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2224      	movs	r2, #36	@ 0x24
 8008f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 0201 	bic.w	r2, r2, #1
 8008fa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008fb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6819      	ldr	r1, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f042 0201 	orr.w	r2, r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2220      	movs	r2, #32
 8008fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e000      	b.n	8008fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fec:	2302      	movs	r3, #2
  }
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b085      	sub	sp, #20
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b20      	cmp	r3, #32
 800900e:	d139      	bne.n	8009084 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009016:	2b01      	cmp	r3, #1
 8009018:	d101      	bne.n	800901e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800901a:	2302      	movs	r3, #2
 800901c:	e033      	b.n	8009086 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2224      	movs	r2, #36	@ 0x24
 800902a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f022 0201 	bic.w	r2, r2, #1
 800903c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800904c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	021b      	lsls	r3, r3, #8
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0201 	orr.w	r2, r2, #1
 800906e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2220      	movs	r2, #32
 8009074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	e000      	b.n	8009086 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009084:	2302      	movs	r3, #2
  }
}
 8009086:	4618      	mov	r0, r3
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
	...

08009094 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e070      	b.n	8009188 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d106      	bne.n	80090c0 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7f9 fa6c 	bl	8002598 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f042 0201 	orr.w	r2, r2, #1
 80090d6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f022 0201 	bic.w	r2, r2, #1
 80090e6:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80090f6:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009106:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009116:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009126:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a19      	ldr	r2, [pc, #100]	@ (8009190 <HAL_JPEG_Init+0xfc>)
 800912c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a18      	ldr	r2, [pc, #96]	@ (8009194 <HAL_JPEG_Init+0x100>)
 8009132:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fe97 	bl	8009e74 <JPEG_Set_HuffEnc_Mem>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d004      	beq.n	8009156 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e018      	b.n	8009188 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009164:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	0801b514 	.word	0x0801b514
 8009194:	0801b554 	.word	0x0801b554

08009198 <HAL_JPEG_ConfigEncoding>:
  * @param  pConf pointer to a JPEG_ConfTypeDef structure that contains
  *         the encoding configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_ConfigEncoding(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pConf)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint32_t vfactor;
  uint32_t hMCU;
  uint32_t vMCU;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pConf == NULL))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d002      	beq.n	80091ae <HAL_JPEG_ConfigEncoding+0x16>
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d101      	bne.n	80091b2 <HAL_JPEG_ConfigEncoding+0x1a>
  {
    return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e191      	b.n	80094d6 <HAL_JPEG_ConfigEncoding+0x33e>
    assert_param(IS_JPEG_COLORSPACE(pConf->ColorSpace));
    assert_param(IS_JPEG_CHROMASUBSAMPLING(pConf->ChromaSubsampling));
    assert_param(IS_JPEG_IMAGE_QUALITY(pConf->ImageQuality));

    /* Process Locked */
    __HAL_LOCK(hjpeg);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d101      	bne.n	80091c0 <HAL_JPEG_ConfigEncoding+0x28>
 80091bc:	2302      	movs	r3, #2
 80091be:	e18a      	b.n	80094d6 <HAL_JPEG_ConfigEncoding+0x33e>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    if (hjpeg->State == HAL_JPEG_STATE_READY)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	f040 817b 	bne.w	80094cc <HAL_JPEG_ConfigEncoding+0x334>
    {
      hjpeg->State = HAL_JPEG_STATE_BUSY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2202      	movs	r2, #2
 80091da:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      hjpeg->Conf.ColorSpace          =  pConf->ColorSpace;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	605a      	str	r2, [r3, #4]
      hjpeg->Conf.ChromaSubsampling   =  pConf->ChromaSubsampling;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	685a      	ldr	r2, [r3, #4]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	609a      	str	r2, [r3, #8]
      hjpeg->Conf.ImageHeight         =  pConf->ImageHeight;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	689a      	ldr	r2, [r3, #8]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	60da      	str	r2, [r3, #12]
      hjpeg->Conf.ImageWidth          =  pConf->ImageWidth;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	68da      	ldr	r2, [r3, #12]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	611a      	str	r2, [r3, #16]
      hjpeg->Conf.ImageQuality        =  pConf->ImageQuality;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	691a      	ldr	r2, [r3, #16]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	615a      	str	r2, [r3, #20]

      /* Reset the Color Space : by default only one quantization table is used*/
      hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_COLORSPACE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8009214:	605a      	str	r2, [r3, #4]

      /* Set Number of color components*/
      if (hjpeg->Conf.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d110      	bne.n	8009240 <HAL_JPEG_ConfigEncoding+0xa8>
      {
        /*Gray Scale is only one component 8x8 blocks i.e 4:4:4*/
        hjpeg->Conf.ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	609a      	str	r2, [r3, #8]

        JPEG_SetColorGrayScale(hjpeg);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 f991 	bl	800a54c <JPEG_SetColorGrayScale>
        /* Set quantization table 0*/
        error = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3350      	adds	r3, #80	@ 0x50
 8009234:	461a      	mov	r2, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f001 f89e 	bl	800a378 <JPEG_Set_Quantization_Mem>
 800923c:	61f8      	str	r0, [r7, #28]
 800923e:	e0c5      	b.n	80093cc <HAL_JPEG_ConfigEncoding+0x234>
      }
      else if (hjpeg->Conf.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	2b10      	cmp	r3, #16
 8009246:	d166      	bne.n	8009316 <HAL_JPEG_ConfigEncoding+0x17e>
      {
        /*
           Set the Color Space for YCbCr : 2 quantization tables are used
           one for Luminance(Y) and one for both Chrominances (Cb & Cr)
          */
        hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_0;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f042 0210 	orr.w	r2, r2, #16
 8009256:	605a      	str	r2, [r3, #4]

        JPEG_SetColorYCBCR(hjpeg);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 f8ff 	bl	800a45c <JPEG_SetColorYCBCR>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3350      	adds	r3, #80	@ 0x50
 8009268:	461a      	mov	r2, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f001 f884 	bl	800a378 <JPEG_Set_Quantization_Mem>
 8009270:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for component 0 and quantization table 1 for both components 1 and 2*/
        error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3390      	adds	r3, #144	@ 0x90
 800927c:	461a      	mov	r2, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f001 f87a 	bl	800a378 <JPEG_Set_Quantization_Mem>
 8009284:	4602      	mov	r2, r0
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	4313      	orrs	r3, r2
 800928a:	61fb      	str	r3, [r7, #28]

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009290:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009294:	2b00      	cmp	r3, #0
 8009296:	f000 8099 	beq.w	80093cc <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 3 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 &= (~JPEG_CONFR1_COLORSPACE);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	685a      	ldr	r2, [r3, #4]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80092a8:	605a      	str	r2, [r3, #4]
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_1;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f042 0220 	orr.w	r2, r2, #32
 80092b8:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	33d0      	adds	r3, #208	@ 0xd0
 80092c4:	461a      	mov	r2, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f001 f856 	bl	800a378 <JPEG_Set_Quantization_Mem>
 80092cc:	4602      	mov	r2, r0
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 &= (~JPEG_CONFR5_QT);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	695a      	ldr	r2, [r3, #20]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f022 020c 	bic.w	r2, r2, #12
 80092e2:	615a      	str	r2, [r3, #20]
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	695a      	ldr	r2, [r3, #20]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f042 0204 	orr.w	r2, r2, #4
 80092f2:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 &= (~JPEG_CONFR6_QT);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	699a      	ldr	r2, [r3, #24]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f022 020c 	bic.w	r2, r2, #12
 8009302:	619a      	str	r2, [r3, #24]
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	699a      	ldr	r2, [r3, #24]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f042 0208 	orr.w	r2, r2, #8
 8009312:	619a      	str	r2, [r3, #24]
 8009314:	e05a      	b.n	80093cc <HAL_JPEG_ConfigEncoding+0x234>
        }
      }
      else /* ColorSpace == JPEG_CMYK_COLORSPACE */
      {
        JPEG_SetColorCMYK(hjpeg);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 f936 	bl	800a588 <JPEG_SetColorCMYK>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3350      	adds	r3, #80	@ 0x50
 8009326:	461a      	mov	r2, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f001 f825 	bl	800a378 <JPEG_Set_Quantization_Mem>
 800932e:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for All components*/

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d047      	beq.n	80093cc <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 4 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800934a:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3390      	adds	r3, #144	@ 0x90
 8009356:	461a      	mov	r2, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f001 f80d 	bl	800a378 <JPEG_Set_Quantization_Mem>
 800935e:	4602      	mov	r2, r0
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	4313      	orrs	r3, r2
 8009364:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	33d0      	adds	r3, #208	@ 0xd0
 8009370:	461a      	mov	r2, r3
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f001 f800 	bl	800a378 <JPEG_Set_Quantization_Mem>
 8009378:	4602      	mov	r2, r0
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	4313      	orrs	r3, r2
 800937e:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable3, (hjpeg->Instance->QMEM3));
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800938c:	461a      	mov	r2, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fff2 	bl	800a378 <JPEG_Set_Quantization_Mem>
 8009394:	4602      	mov	r2, r0
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	4313      	orrs	r3, r2
 800939a:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	695a      	ldr	r2, [r3, #20]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 0204 	orr.w	r2, r2, #4
 80093aa:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	699a      	ldr	r2, [r3, #24]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f042 0208 	orr.w	r2, r2, #8
 80093ba:	619a      	str	r2, [r3, #24]

          /*Use Quantization 3 table for component 3*/
          hjpeg->Instance->CONFR7 |=  JPEG_CONFR7_QT;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	69da      	ldr	r2, [r3, #28]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f042 020c 	orr.w	r2, r2, #12
 80093ca:	61da      	str	r2, [r3, #28]
        }
      }

      if (error != 0UL)
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00c      	beq.n	80093ec <HAL_JPEG_ConfigEncoding+0x254>
      {
        hjpeg->ErrorCode = HAL_JPEG_ERROR_QUANT_TABLE;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2202      	movs	r2, #2
 80093d6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Set the JPEG State to ready */
        hjpeg->State = HAL_JPEG_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        return  HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e074      	b.n	80094d6 <HAL_JPEG_ConfigEncoding+0x33e>
      }
      /* Set the image size*/
      /* set the number of lines*/
      MODIFY_REG(hjpeg->Instance->CONFR1, JPEG_CONFR1_YSIZE, ((hjpeg->Conf.ImageHeight & 0x0000FFFFUL) << 16));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	b299      	uxth	r1, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	041a      	lsls	r2, r3, #16
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	430a      	orrs	r2, r1
 8009400:	605a      	str	r2, [r3, #4]
      /* set the number of pixels per line*/
      MODIFY_REG(hjpeg->Instance->CONFR3, JPEG_CONFR3_XSIZE, ((hjpeg->Conf.ImageWidth & 0x0000FFFFUL) << 16));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	b299      	uxth	r1, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	041a      	lsls	r2, r3, #16
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	430a      	orrs	r2, r1
 8009416:	60da      	str	r2, [r3, #12]


      if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING) /* 4:2:0*/
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d104      	bne.n	800942a <HAL_JPEG_ConfigEncoding+0x292>
      {
        hfactor = 16;
 8009420:	2310      	movs	r3, #16
 8009422:	61bb      	str	r3, [r7, #24]
        vfactor = 16;
 8009424:	2310      	movs	r3, #16
 8009426:	617b      	str	r3, [r7, #20]
 8009428:	e00c      	b.n	8009444 <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING) /* 4:2:2*/
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	2b02      	cmp	r3, #2
 8009430:	d104      	bne.n	800943c <HAL_JPEG_ConfigEncoding+0x2a4>
      {
        hfactor = 16;
 8009432:	2310      	movs	r3, #16
 8009434:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 8009436:	2308      	movs	r3, #8
 8009438:	617b      	str	r3, [r7, #20]
 800943a:	e003      	b.n	8009444 <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else /* Default is 8x8 MCU,  4:4:4*/
      {
        hfactor = 8;
 800943c:	2308      	movs	r3, #8
 800943e:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 8009440:	2308      	movs	r3, #8
 8009442:	617b      	str	r3, [r7, #20]
      }

      hMCU = (hjpeg->Conf.ImageWidth / hfactor);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	691a      	ldr	r2, [r3, #16]
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	fbb2 f3f3 	udiv	r3, r2, r3
 800944e:	613b      	str	r3, [r7, #16]
      if ((hjpeg->Conf.ImageWidth % hfactor) != 0UL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	fbb3 f2f2 	udiv	r2, r3, r2
 800945a:	69b9      	ldr	r1, [r7, #24]
 800945c:	fb01 f202 	mul.w	r2, r1, r2
 8009460:	1a9b      	subs	r3, r3, r2
 8009462:	2b00      	cmp	r3, #0
 8009464:	d002      	beq.n	800946c <HAL_JPEG_ConfigEncoding+0x2d4>
      {
        hMCU++; /*+1 for horizontal incomplete MCU */
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	3301      	adds	r3, #1
 800946a:	613b      	str	r3, [r7, #16]
      }

      vMCU = (hjpeg->Conf.ImageHeight / vfactor);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	fbb2 f3f3 	udiv	r3, r2, r3
 8009476:	60fb      	str	r3, [r7, #12]
      if ((hjpeg->Conf.ImageHeight % vfactor) != 0UL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009482:	6979      	ldr	r1, [r7, #20]
 8009484:	fb01 f202 	mul.w	r2, r1, r2
 8009488:	1a9b      	subs	r3, r3, r2
 800948a:	2b00      	cmp	r3, #0
 800948c:	d002      	beq.n	8009494 <HAL_JPEG_ConfigEncoding+0x2fc>
      {
        vMCU++; /*+1 for vertical incomplete MCU */
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3301      	adds	r3, #1
 8009492:	60fb      	str	r3, [r7, #12]
      }

      numberMCU = (hMCU * vMCU) - 1UL; /* Bit Field JPEG_CONFR2_NMCU shall be set to NB_MCU - 1*/
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	fb02 f303 	mul.w	r3, r2, r3
 800949c:	3b01      	subs	r3, #1
 800949e:	60bb      	str	r3, [r7, #8]
      /* Set the number of MCU*/
      hjpeg->Instance->CONFR2 = (numberMCU & JPEG_CONFR2_NMCU);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80094aa:	609a      	str	r2, [r3, #8]

      hjpeg->Context |= JPEG_CONTEXT_CONF_ENCODING;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Set the JPEG State to ready */
      hjpeg->State = HAL_JPEG_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Return function status */
      return HAL_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	e004      	b.n	80094d6 <HAL_JPEG_ConfigEncoding+0x33e>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Return function status */
      return HAL_BUSY;
 80094d4:	2302      	movs	r3, #2
    }
  }
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3720      	adds	r7, #32
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b086      	sub	sp, #24
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <HAL_JPEG_GetInfo+0x16>
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d101      	bne.n	80094f8 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e083      	b.n	8009600 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	f003 0303 	and.w	r3, r3, #3
 8009502:	2b02      	cmp	r3, #2
 8009504:	d103      	bne.n	800950e <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2210      	movs	r2, #16
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	e017      	b.n	800953e <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	f003 0303 	and.w	r3, r3, #3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d103      	bne.n	8009524 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2200      	movs	r2, #0
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	e00c      	b.n	800953e <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	f003 0303 	and.w	r3, r3, #3
 800952e:	2b03      	cmp	r3, #3
 8009530:	d103      	bne.n	800953a <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2230      	movs	r2, #48	@ 0x30
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	e001      	b.n	800953e <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e060      	b.n	8009600 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	0c1b      	lsrs	r3, r3, #16
 8009546:	b29a      	uxth	r2, r3
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	0c1b      	lsrs	r3, r3, #16
 8009554:	b29a      	uxth	r2, r3
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b10      	cmp	r3, #16
 8009560:	d003      	beq.n	800956a <HAL_JPEG_GetInfo+0x8c>
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b30      	cmp	r3, #48	@ 0x30
 8009568:	d140      	bne.n	80095ec <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	091b      	lsrs	r3, r3, #4
 8009572:	f003 030f 	and.w	r3, r3, #15
 8009576:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	091b      	lsrs	r3, r3, #4
 8009580:	f003 030f 	and.w	r3, r3, #15
 8009584:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	091b      	lsrs	r3, r3, #4
 800958e:	f003 030f 	and.w	r3, r3, #15
 8009592:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d109      	bne.n	80095ae <HAL_JPEG_GetInfo+0xd0>
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d106      	bne.n	80095ae <HAL_JPEG_GetInfo+0xd0>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d103      	bne.n	80095ae <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	2202      	movs	r2, #2
 80095aa:	605a      	str	r2, [r3, #4]
 80095ac:	e01d      	b.n	80095ea <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d109      	bne.n	80095c8 <HAL_JPEG_GetInfo+0xea>
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d106      	bne.n	80095c8 <HAL_JPEG_GetInfo+0xea>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d103      	bne.n	80095c8 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2200      	movs	r2, #0
 80095c4:	605a      	str	r2, [r3, #4]
 80095c6:	e010      	b.n	80095ea <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	2b03      	cmp	r3, #3
 80095cc:	d109      	bne.n	80095e2 <HAL_JPEG_GetInfo+0x104>
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d106      	bne.n	80095e2 <HAL_JPEG_GetInfo+0x104>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d103      	bne.n	80095e2 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	2201      	movs	r2, #1
 80095de:	605a      	str	r2, [r3, #4]
 80095e0:	e003      	b.n	80095ea <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2200      	movs	r2, #0
 80095e6:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80095e8:	e003      	b.n	80095f2 <HAL_JPEG_GetInfo+0x114>
 80095ea:	e002      	b.n	80095f2 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	2200      	movs	r2, #0
 80095f0:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f001 fea2 	bl	800b33c <JPEG_GetQuality>
 80095f8:	4602      	mov	r2, r0
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <HAL_JPEG_Encode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Encode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataInMCU, uint32_t InDataLength,
                                       uint8_t *pDataOut, uint32_t OutDataLength)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
 8009614:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataInMCU == NULL) || (pDataOut == NULL))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d005      	beq.n	8009628 <HAL_JPEG_Encode_DMA+0x20>
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <HAL_JPEG_Encode_DMA+0x20>
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d101      	bne.n	800962c <HAL_JPEG_Encode_DMA+0x24>
  {
    return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e059      	b.n	80096e0 <HAL_JPEG_Encode_DMA+0xd8>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009632:	2b01      	cmp	r3, #1
 8009634:	d101      	bne.n	800963a <HAL_JPEG_Encode_DMA+0x32>
 8009636:	2302      	movs	r3, #2
 8009638:	e052      	b.n	80096e0 <HAL_JPEG_Encode_DMA+0xd8>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State != HAL_JPEG_STATE_READY)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b01      	cmp	r3, #1
 800964c:	d005      	beq.n	800965a <HAL_JPEG_Encode_DMA+0x52>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8009656:	2302      	movs	r3, #2
 8009658:	e042      	b.n	80096e0 <HAL_JPEG_Encode_DMA+0xd8>
  }
  else
  {
    if ((hjpeg->Context & JPEG_CONTEXT_CONF_ENCODING) == JPEG_CONTEXT_CONF_ENCODING)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800965e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009666:	d134      	bne.n	80096d2 <HAL_JPEG_Encode_DMA+0xca>
    {
      /*Change JPEG state*/
      hjpeg->State = HAL_JPEG_STATE_BUSY_ENCODING;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2203      	movs	r2, #3
 800966c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /*Set the Context to Encode with DMA*/
      hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009674:	f023 020f 	bic.w	r2, r3, #15
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	655a      	str	r2, [r3, #84]	@ 0x54
      hjpeg->Context |= (JPEG_CONTEXT_ENCODE | JPEG_CONTEXT_DMA);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009680:	f043 020d 	orr.w	r2, r3, #13
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	655a      	str	r2, [r3, #84]	@ 0x54

      /*Store In/out buffers pointers and size*/
      hjpeg->pJpegInBuffPtr = pDataInMCU;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	619a      	str	r2, [r3, #24]
      hjpeg->pJpegOutBuffPtr = pDataOut;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	61da      	str	r2, [r3, #28]
      hjpeg->InDataLength = InDataLength;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	629a      	str	r2, [r3, #40]	@ 0x28
      hjpeg->OutDataLength = OutDataLength;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	69ba      	ldr	r2, [r7, #24]
 800969e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /*Reset In/out data counter */
      hjpeg->JpegInCount = 0;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	621a      	str	r2, [r3, #32]
      hjpeg->JpegOutCount = 0;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Init decoding process*/
      JPEG_Init_Process(hjpeg);
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f000 ffd5 	bl	800a65c <JPEG_Init_Process>

      /* JPEG encoding process using DMA */
      if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f001 faf6 	bl	800aca4 <JPEG_DMA_StartProcess>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00f      	beq.n	80096de <HAL_JPEG_Encode_DMA+0xd6>
      {
        /* Update State */
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2206      	movs	r2, #6
 80096c2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e006      	b.n	80096e0 <HAL_JPEG_Encode_DMA+0xd8>

    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e000      	b.n	80096e0 <HAL_JPEG_Encode_DMA+0xd8>
    }
  }
  /* Return function status */
  return HAL_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096fa:	f003 030c 	and.w	r3, r3, #12
 80096fe:	2b0c      	cmp	r3, #12
 8009700:	d116      	bne.n	8009730 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d005      	beq.n	8009718 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009710:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	f003 0302 	and.w	r3, r3, #2
 800971e:	2b00      	cmp	r3, #0
 8009720:	d033      	beq.n	800978a <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009726:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	655a      	str	r2, [r3, #84]	@ 0x54
 800972e:	e02c      	b.n	800978a <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009734:	f003 030c 	and.w	r3, r3, #12
 8009738:	2b08      	cmp	r3, #8
 800973a:	d126      	bne.n	800978a <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	f003 0301 	and.w	r3, r3, #1
 8009742:	2b00      	cmp	r3, #0
 8009744:	d009      	beq.n	800975a <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800974a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f043 0306 	orr.w	r3, r3, #6
 8009758:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	f003 0302 	and.w	r3, r3, #2
 8009760:	2b00      	cmp	r3, #0
 8009762:	d009      	beq.n	8009778 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009768:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8009776:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	43da      	mvns	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	400a      	ands	r2, r1
 8009788:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3714      	adds	r7, #20
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80097b0:	bf00      	nop
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80097d4:	bf00      	nop
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 80097ea:	bf00      	nop
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 80097fe:	bf00      	nop
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b082      	sub	sp, #8
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009818:	b2db      	uxtb	r3, r3
 800981a:	3b03      	subs	r3, #3
 800981c:	2b01      	cmp	r3, #1
 800981e:	d813      	bhi.n	8009848 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009824:	f003 030c 	and.w	r3, r3, #12
 8009828:	2b08      	cmp	r3, #8
 800982a:	d103      	bne.n	8009834 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 ff89 	bl	800a744 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8009832:	e00b      	b.n	800984c <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009838:	f003 030c 	and.w	r3, r3, #12
 800983c:	2b0c      	cmp	r3, #12
 800983e:	d105      	bne.n	800984c <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f001 fac9 	bl	800add8 <JPEG_DMA_ContinueProcess>
      break;
 8009846:	e001      	b.n	800984c <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8009848:	bf00      	nop
 800984a:	e000      	b.n	800984e <HAL_JPEG_IRQHandler+0x44>
      break;
 800984c:	bf00      	nop
  }
}
 800984e:	bf00      	nop
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8009856:	b480      	push	{r7}
 8009858:	b08b      	sub	sp, #44	@ 0x2c
 800985a:	af00      	add	r7, sp, #0
 800985c:	60f8      	str	r0, [r7, #12]
 800985e:	60b9      	str	r1, [r7, #8]
 8009860:	607a      	str	r2, [r7, #4]
 8009862:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8009864:	2300      	movs	r3, #0
 8009866:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8009868:	2300      	movs	r3, #0
 800986a:	61fb      	str	r3, [r7, #28]
 800986c:	e020      	b.n	80098b0 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	4413      	add	r3, r2
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8009878:	6a3a      	ldr	r2, [r7, #32]
 800987a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987c:	4413      	add	r3, r2
 800987e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009882:	d90f      	bls.n	80098a4 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e055      	b.n	8009934 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	b2da      	uxtb	r2, r3
 800988c:	68b9      	ldr	r1, [r7, #8]
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	440b      	add	r3, r1
 8009892:	3201      	adds	r2, #1
 8009894:	b2d2      	uxtb	r2, r2
 8009896:	701a      	strb	r2, [r3, #0]
      p++;
 8009898:	6a3b      	ldr	r3, [r7, #32]
 800989a:	3301      	adds	r3, #1
 800989c:	623b      	str	r3, [r7, #32]
      i--;
 800989e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a0:	3b01      	subs	r3, #1
 80098a2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 80098a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1ee      	bne.n	8009888 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	3301      	adds	r3, #1
 80098ae:	61fb      	str	r3, [r7, #28]
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	2b0f      	cmp	r3, #15
 80098b4:	d9db      	bls.n	800986e <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	4413      	add	r3, r2
 80098bc:	2200      	movs	r2, #0
 80098be:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	6a3a      	ldr	r2, [r7, #32]
 80098c4:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	617b      	str	r3, [r7, #20]
  p = 0;
 80098d0:	2300      	movs	r3, #0
 80098d2:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80098d4:	e027      	b.n	8009926 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	4413      	add	r3, r2
 80098de:	69ba      	ldr	r2, [r7, #24]
 80098e0:	601a      	str	r2, [r3, #0]
      p++;
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	3301      	adds	r3, #1
 80098e6:	623b      	str	r3, [r7, #32]
      code++;
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	3301      	adds	r3, #1
 80098ec:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	4413      	add	r3, r2
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d0eb      	beq.n	80098d6 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	2b1f      	cmp	r3, #31
 8009902:	d901      	bls.n	8009908 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e015      	b.n	8009934 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009908:	2201      	movs	r2, #1
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	fa02 f303 	lsl.w	r3, r2, r3
 8009910:	69ba      	ldr	r2, [r7, #24]
 8009912:	429a      	cmp	r2, r3
 8009914:	d301      	bcc.n	800991a <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e00c      	b.n	8009934 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	61bb      	str	r3, [r7, #24]
    si++;
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	3301      	adds	r3, #1
 8009924:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	4413      	add	r3, r2
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1dd      	bne.n	80098ee <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	372c      	adds	r7, #44	@ 0x2c
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8009946:	af00      	add	r7, sp, #0
 8009948:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800994c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009950:	6018      	str	r0, [r3, #0]
 8009952:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009956:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800995a:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800995c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009960:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009964:	6818      	ldr	r0, [r3, #0]
 8009966:	f107 0308 	add.w	r3, r7, #8
 800996a:	f107 020c 	add.w	r2, r7, #12
 800996e:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8009972:	f7ff ff70 	bl	8009856 <JPEG_Bits_To_SizeCodes>
 8009976:	4603      	mov	r3, r0
 8009978:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 800997c:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009980:	2b00      	cmp	r3, #0
 8009982:	d002      	beq.n	800998a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009984:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009988:	e075      	b.n	8009a76 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8009990:	e067      	b.n	8009a62 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8009992:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009996:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80099a0:	4413      	add	r3, r2
 80099a2:	3310      	adds	r3, #16
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 80099aa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d103      	bne.n	80099ba <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 80099b2:	23a0      	movs	r3, #160	@ 0xa0
 80099b4:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80099b8:	e021      	b.n	80099fe <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80099ba:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80099be:	2bf0      	cmp	r3, #240	@ 0xf0
 80099c0:	d103      	bne.n	80099ca <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 80099c2:	23a1      	movs	r3, #161	@ 0xa1
 80099c4:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80099c8:	e019      	b.n	80099fe <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80099ca:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80099ce:	091b      	lsrs	r3, r3, #4
 80099d0:	f003 030f 	and.w	r3, r3, #15
 80099d4:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 80099d8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80099dc:	f003 030f 	and.w	r3, r3, #15
 80099e0:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80099e4:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 80099e8:	4613      	mov	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	005b      	lsls	r3, r3, #1
 80099f0:	461a      	mov	r2, r3
 80099f2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80099f6:	4413      	add	r3, r2
 80099f8:	3b01      	subs	r3, #1
 80099fa:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80099fe:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a02:	2ba1      	cmp	r3, #161	@ 0xa1
 8009a04:	d901      	bls.n	8009a0a <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009a06:	2301      	movs	r3, #1
 8009a08:	e035      	b.n	8009a76 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009a0a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a0e:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009a12:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009a16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a1a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a1e:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009a22:	6819      	ldr	r1, [r3, #0]
 8009a24:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a28:	3328      	adds	r3, #40	@ 0x28
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	440b      	add	r3, r1
 8009a2e:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009a30:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a34:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8009a38:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009a3c:	4413      	add	r3, r2
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	b2d9      	uxtb	r1, r3
 8009a44:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a48:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a52:	4413      	add	r3, r2
 8009a54:	460a      	mov	r2, r1
 8009a56:	701a      	strb	r2, [r3, #0]
      k++;
 8009a58:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8009a62:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a66:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d38e      	bcc.n	8009992 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009a8c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009a90:	6018      	str	r0, [r3, #0]
 8009a92:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009a96:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009a9a:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009a9c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009aa0:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009aa4:	6818      	ldr	r0, [r3, #0]
 8009aa6:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8009aaa:	f107 0208 	add.w	r2, r7, #8
 8009aae:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8009ab2:	f7ff fed0 	bl	8009856 <JPEG_Bits_To_SizeCodes>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8009abc:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d002      	beq.n	8009aca <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009ac4:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009ac8:	e048      	b.n	8009b5c <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8009ad0:	e03d      	b.n	8009b4e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8009ad2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009ad6:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009ae0:	4413      	add	r3, r2
 8009ae2:	3310      	adds	r3, #16
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8009aea:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009aee:	2b0b      	cmp	r3, #11
 8009af0:	d901      	bls.n	8009af6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009af2:	2301      	movs	r3, #1
 8009af4:	e032      	b.n	8009b5c <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009af6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009afa:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8009afe:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8009b02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b06:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b0a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009b0e:	6819      	ldr	r1, [r3, #0]
 8009b10:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009b14:	3302      	adds	r3, #2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	440b      	add	r3, r1
 8009b1a:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009b1c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b20:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8009b24:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009b28:	4413      	add	r3, r2
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	b2d9      	uxtb	r1, r3
 8009b30:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b34:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009b3e:	4413      	add	r3, r2
 8009b40:	460a      	mov	r2, r1
 8009b42:	701a      	strb	r2, [r3, #0]
      k++;
 8009b44:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009b48:	3301      	adds	r3, #1
 8009b4a:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8009b4e:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8009b52:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d3bb      	bcc.n	8009ad2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b09a      	sub	sp, #104	@ 0x68
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	60f8      	str	r0, [r7, #12]
 8009b6e:	60b9      	str	r1, [r7, #8]
 8009b70:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d106      	bne.n	8009b8e <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009b88:	3318      	adds	r3, #24
 8009b8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b8c:	e00f      	b.n	8009bae <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d106      	bne.n	8009baa <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009ba4:	3318      	adds	r3, #24
 8009ba6:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ba8:	e001      	b.n	8009bae <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e059      	b.n	8009c62 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d055      	beq.n	8009c60 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8009bb4:	f107 0314 	add.w	r3, r7, #20
 8009bb8:	4619      	mov	r1, r3
 8009bba:	68b8      	ldr	r0, [r7, #8]
 8009bbc:	f7ff ff60 	bl	8009a80 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8009bc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d002      	beq.n	8009bd4 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8009bce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009bd2:	e046      	b.n	8009c62 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8009bd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bd6:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009bd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009bda:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009bde:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009be0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009be2:	3304      	adds	r3, #4
 8009be4:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009be6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009be8:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009bec:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8009bee:	230c      	movs	r3, #12
 8009bf0:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8009bf2:	e032      	b.n	8009c5a <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8009bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8009bfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bfc:	3b04      	subs	r3, #4
 8009bfe:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009c00:	f107 0214 	add.w	r2, r7, #20
 8009c04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c06:	4413      	add	r3, r2
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	021b      	lsls	r3, r3, #8
 8009c0c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009c10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c12:	3302      	adds	r3, #2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	3368      	adds	r3, #104	@ 0x68
 8009c18:	443b      	add	r3, r7
 8009c1a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	4313      	orrs	r3, r2
 8009c22:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8009c24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c26:	3b01      	subs	r3, #1
 8009c28:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009c2a:	f107 0214 	add.w	r2, r7, #20
 8009c2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c30:	4413      	add	r3, r2
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	021b      	lsls	r3, r3, #8
 8009c36:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009c3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c3c:	3302      	adds	r3, #2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	3368      	adds	r3, #104	@ 0x68
 8009c42:	443b      	add	r3, r7
 8009c44:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c50:	041a      	lsls	r2, r3, #16
 8009c52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c54:	431a      	orrs	r2, r3
 8009c56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c58:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8009c5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d8c9      	bhi.n	8009bf4 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3768      	adds	r7, #104	@ 0x68
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009c78:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009c7c:	6018      	str	r0, [r3, #0]
 8009c7e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009c82:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009c86:	6019      	str	r1, [r3, #0]
 8009c88:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009c8c:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8009c90:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8009c92:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009c96:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ca2:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009ca6:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009caa:	6812      	ldr	r2, [r2, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d10c      	bne.n	8009cca <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009cb0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009cb4:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cc0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009cc4:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009cc8:	e01d      	b.n	8009d06 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8009cca:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009cce:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009cda:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009cde:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009ce2:	6812      	ldr	r2, [r2, #0]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d10c      	bne.n	8009d02 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009ce8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009cec:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009cf8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009cfc:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009d00:	e001      	b.n	8009d06 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e0a8      	b.n	8009e58 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8009d06:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d0a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f000 80a0 	beq.w	8009e56 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8009d16:	f107 0214 	add.w	r2, r7, #20
 8009d1a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d1e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009d22:	4611      	mov	r1, r2
 8009d24:	6818      	ldr	r0, [r3, #0]
 8009d26:	f7ff fe0b 	bl	8009940 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8009d30:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8009d38:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009d3c:	e08c      	b.n	8009e58 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8009d3e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009d42:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8009d46:	2300      	movs	r3, #0
 8009d48:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8009d4c:	e00e      	b.n	8009d6c <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8009d4e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009d52:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009d56:	601a      	str	r2, [r3, #0]
      addressDef++;
 8009d58:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8009d62:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009d66:	3301      	adds	r3, #1
 8009d68:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8009d6c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d9ec      	bls.n	8009d4e <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8009d74:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009d78:	4a3a      	ldr	r2, [pc, #232]	@ (8009e64 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8009d7a:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009d7c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009d80:	3304      	adds	r3, #4
 8009d82:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8009d86:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009d8a:	4a37      	ldr	r2, [pc, #220]	@ (8009e68 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8009d8c:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009d8e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009d92:	3304      	adds	r3, #4
 8009d94:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8009d98:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009d9c:	4a33      	ldr	r2, [pc, #204]	@ (8009e6c <JPEG_Set_HuffAC_Mem+0x200>)
 8009d9e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009da0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009da4:	3304      	adds	r3, #4
 8009da6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8009daa:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009dae:	4a30      	ldr	r2, [pc, #192]	@ (8009e70 <JPEG_Set_HuffAC_Mem+0x204>)
 8009db0:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8009db2:	23a2      	movs	r3, #162	@ 0xa2
 8009db4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8009db8:	e049      	b.n	8009e4e <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8009dba:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8009dc4:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009dc8:	3b04      	subs	r3, #4
 8009dca:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009dce:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009dd2:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8009dd6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009dda:	4413      	add	r3, r2
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	021b      	lsls	r3, r3, #8
 8009de0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009de4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009de8:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009dec:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009df0:	3328      	adds	r3, #40	@ 0x28
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	440b      	add	r3, r1
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8009e00:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e04:	3b01      	subs	r3, #1
 8009e06:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009e0a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009e0e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8009e12:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e16:	4413      	add	r3, r2
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	021b      	lsls	r3, r3, #8
 8009e1c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009e20:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009e24:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009e28:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e2c:	3328      	adds	r3, #40	@ 0x28
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	440b      	add	r3, r1
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	4313      	orrs	r3, r2
 8009e38:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009e3c:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8009e40:	041a      	lsls	r2, r3, #16
 8009e42:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8009e46:	431a      	orrs	r2, r3
 8009e48:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009e4c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8009e4e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d8b1      	bhi.n	8009dba <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	0fd10fd0 	.word	0x0fd10fd0
 8009e68:	0fd30fd2 	.word	0x0fd30fd2
 8009e6c:	0fd50fd4 	.word	0x0fd50fd4
 8009e70:	0fd70fd6 	.word	0x0fd70fd6

08009e74 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f84d 	bl	8009f1c <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	491f      	ldr	r1, [pc, #124]	@ (8009f0c <JPEG_Set_HuffEnc_Mem+0x98>)
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f7ff feec 	bl	8009c6c <JPEG_Set_HuffAC_Mem>
 8009e94:	4603      	mov	r3, r0
 8009e96:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d001      	beq.n	8009ea2 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ea0:	e030      	b.n	8009f04 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8009eaa:	461a      	mov	r2, r3
 8009eac:	4918      	ldr	r1, [pc, #96]	@ (8009f10 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7ff fedc 	bl	8009c6c <JPEG_Set_HuffAC_Mem>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
 8009ec0:	e020      	b.n	8009f04 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8009eca:	461a      	mov	r2, r3
 8009ecc:	4911      	ldr	r1, [pc, #68]	@ (8009f14 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7ff fe49 	bl	8009b66 <JPEG_Set_HuffDC_Mem>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
 8009ee0:	e010      	b.n	8009f04 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8009eea:	461a      	mov	r2, r3
 8009eec:	490a      	ldr	r1, [pc, #40]	@ (8009f18 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7ff fe39 	bl	8009b66 <JPEG_Set_HuffDC_Mem>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	e000      	b.n	8009f04 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	0801b36c 	.word	0x0801b36c
 8009f10:	0801b420 	.word	0x0801b420
 8009f14:	0801b334 	.word	0x0801b334
 8009f18:	0801b350 	.word	0x0801b350

08009f1c <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b08b      	sub	sp, #44	@ 0x2c
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8009f24:	4b80      	ldr	r3, [pc, #512]	@ (800a128 <JPEG_Set_Huff_DHTMem+0x20c>)
 8009f26:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8009f28:	4b80      	ldr	r3, [pc, #512]	@ (800a12c <JPEG_Set_Huff_DHTMem+0x210>)
 8009f2a:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8009f2c:	4b80      	ldr	r3, [pc, #512]	@ (800a130 <JPEG_Set_Huff_DHTMem+0x214>)
 8009f2e:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8009f30:	4b80      	ldr	r3, [pc, #512]	@ (800a134 <JPEG_Set_Huff_DHTMem+0x218>)
 8009f32:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009f3c:	330c      	adds	r3, #12
 8009f3e:	623b      	str	r3, [r7, #32]
  index = 16;
 8009f40:	2310      	movs	r3, #16
 8009f42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009f44:	e01d      	b.n	8009f82 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	5cd3      	ldrb	r3, [r2, r3]
 8009f4e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f52:	3b02      	subs	r3, #2
 8009f54:	6979      	ldr	r1, [r7, #20]
 8009f56:	5ccb      	ldrb	r3, [r1, r3]
 8009f58:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009f5a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5e:	3b03      	subs	r3, #3
 8009f60:	6979      	ldr	r1, [r7, #20]
 8009f62:	5ccb      	ldrb	r3, [r1, r3]
 8009f64:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009f66:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8009f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f6a:	3a04      	subs	r2, #4
 8009f6c:	6979      	ldr	r1, [r7, #20]
 8009f6e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009f70:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009f72:	6a3b      	ldr	r3, [r7, #32]
 8009f74:	601a      	str	r2, [r3, #0]
    address--;
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	3b04      	subs	r3, #4
 8009f7a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7e:	3b04      	subs	r3, #4
 8009f80:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f84:	2b03      	cmp	r3, #3
 8009f86:	d8de      	bhi.n	8009f46 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009f90:	3318      	adds	r3, #24
 8009f92:	623b      	str	r3, [r7, #32]
  index = 12;
 8009f94:	230c      	movs	r3, #12
 8009f96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009f98:	e021      	b.n	8009fde <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	7c1b      	ldrb	r3, [r3, #16]
 8009fa4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa8:	3b02      	subs	r3, #2
 8009faa:	6979      	ldr	r1, [r7, #20]
 8009fac:	440b      	add	r3, r1
 8009fae:	7c1b      	ldrb	r3, [r3, #16]
 8009fb0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009fb2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb6:	3b03      	subs	r3, #3
 8009fb8:	6979      	ldr	r1, [r7, #20]
 8009fba:	440b      	add	r3, r1
 8009fbc:	7c1b      	ldrb	r3, [r3, #16]
 8009fbe:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009fc0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8009fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fc4:	3a04      	subs	r2, #4
 8009fc6:	6979      	ldr	r1, [r7, #20]
 8009fc8:	440a      	add	r2, r1
 8009fca:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009fcc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	601a      	str	r2, [r3, #0]
    address--;
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	3b04      	subs	r3, #4
 8009fd6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fda:	3b04      	subs	r3, #4
 8009fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d8da      	bhi.n	8009f9a <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009fec:	3328      	adds	r3, #40	@ 0x28
 8009fee:	623b      	str	r3, [r7, #32]
  index = 16;
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009ff4:	e01d      	b.n	800a032 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	69fa      	ldr	r2, [r7, #28]
 8009ffc:	5cd3      	ldrb	r3, [r2, r3]
 8009ffe:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a002:	3b02      	subs	r3, #2
 800a004:	69f9      	ldr	r1, [r7, #28]
 800a006:	5ccb      	ldrb	r3, [r1, r3]
 800a008:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a00a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00e:	3b03      	subs	r3, #3
 800a010:	69f9      	ldr	r1, [r7, #28]
 800a012:	5ccb      	ldrb	r3, [r1, r3]
 800a014:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a016:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a01a:	3a04      	subs	r2, #4
 800a01c:	69f9      	ldr	r1, [r7, #28]
 800a01e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a020:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	601a      	str	r2, [r3, #0]
    address--;
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	3b04      	subs	r3, #4
 800a02a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02e:	3b04      	subs	r3, #4
 800a030:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a034:	2b03      	cmp	r3, #3
 800a036:	d8de      	bhi.n	8009ff6 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a040:	33cc      	adds	r3, #204	@ 0xcc
 800a042:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	4b3b      	ldr	r3, [pc, #236]	@ (800a138 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a04a:	4013      	ands	r3, r2
 800a04c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800a054:	021a      	lsls	r2, r3, #8
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	4313      	orrs	r3, r2
 800a05a:	69fa      	ldr	r2, [r7, #28]
 800a05c:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800a060:	4313      	orrs	r3, r2
 800a062:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	3b04      	subs	r3, #4
 800a06e:	623b      	str	r3, [r7, #32]
  index = 160;
 800a070:	23a0      	movs	r3, #160	@ 0xa0
 800a072:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a074:	e021      	b.n	800a0ba <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a078:	3b01      	subs	r3, #1
 800a07a:	69fa      	ldr	r2, [r7, #28]
 800a07c:	4413      	add	r3, r2
 800a07e:	7c1b      	ldrb	r3, [r3, #16]
 800a080:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a084:	3b02      	subs	r3, #2
 800a086:	69f9      	ldr	r1, [r7, #28]
 800a088:	440b      	add	r3, r1
 800a08a:	7c1b      	ldrb	r3, [r3, #16]
 800a08c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a08e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a092:	3b03      	subs	r3, #3
 800a094:	69f9      	ldr	r1, [r7, #28]
 800a096:	440b      	add	r3, r1
 800a098:	7c1b      	ldrb	r3, [r3, #16]
 800a09a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a09c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a09e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0a0:	3a04      	subs	r2, #4
 800a0a2:	69f9      	ldr	r1, [r7, #28]
 800a0a4:	440a      	add	r2, r1
 800a0a6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a0a8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	601a      	str	r2, [r3, #0]
    address--;
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	3b04      	subs	r3, #4
 800a0b2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b6:	3b04      	subs	r3, #4
 800a0b8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0bc:	2b03      	cmp	r3, #3
 800a0be:	d8da      	bhi.n	800a076 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a0c8:	33cc      	adds	r3, #204	@ 0xcc
 800a0ca:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	785b      	ldrb	r3, [r3, #1]
 800a0d8:	061a      	lsls	r2, r3, #24
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	431a      	orrs	r2, r3
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	041b      	lsls	r3, r3, #16
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a0e8:	6a3b      	ldr	r3, [r7, #32]
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a0f6:	33dc      	adds	r3, #220	@ 0xdc
 800a0f8:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a138 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a100:	4013      	ands	r3, r2
 800a102:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	7bdb      	ldrb	r3, [r3, #15]
 800a108:	021a      	lsls	r2, r3, #8
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	7b92      	ldrb	r2, [r2, #14]
 800a112:	4313      	orrs	r3, r2
 800a114:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	3b04      	subs	r3, #4
 800a120:	623b      	str	r3, [r7, #32]
  index = 12;
 800a122:	230c      	movs	r3, #12
 800a124:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a126:	e027      	b.n	800a178 <JPEG_Set_Huff_DHTMem+0x25c>
 800a128:	0801b36c 	.word	0x0801b36c
 800a12c:	0801b420 	.word	0x0801b420
 800a130:	0801b334 	.word	0x0801b334
 800a134:	0801b350 	.word	0x0801b350
 800a138:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13e:	3301      	adds	r3, #1
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	5cd3      	ldrb	r3, [r2, r3]
 800a144:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a146:	6939      	ldr	r1, [r7, #16]
 800a148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14a:	440b      	add	r3, r1
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a150:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a154:	3b01      	subs	r3, #1
 800a156:	6939      	ldr	r1, [r7, #16]
 800a158:	5ccb      	ldrb	r3, [r1, r3]
 800a15a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a15c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800a15e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a160:	3a02      	subs	r2, #2
 800a162:	6939      	ldr	r1, [r7, #16]
 800a164:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a166:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a168:	6a3b      	ldr	r3, [r7, #32]
 800a16a:	601a      	str	r2, [r3, #0]
    address--;
 800a16c:	6a3b      	ldr	r3, [r7, #32]
 800a16e:	3b04      	subs	r3, #4
 800a170:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a174:	3b04      	subs	r3, #4
 800a176:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d8de      	bhi.n	800a13c <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a186:	33dc      	adds	r3, #220	@ 0xdc
 800a188:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a18a:	6a3b      	ldr	r3, [r7, #32]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	b29b      	uxth	r3, r3
 800a190:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	7c5b      	ldrb	r3, [r3, #17]
 800a196:	061a      	lsls	r2, r3, #24
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	431a      	orrs	r2, r3
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	7c1b      	ldrb	r3, [r3, #16]
 800a1a0:	041b      	lsls	r3, r3, #16
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a1b4:	33e8      	adds	r3, #232	@ 0xe8
 800a1b6:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	4b6d      	ldr	r3, [pc, #436]	@ (800a374 <JPEG_Set_Huff_DHTMem+0x458>)
 800a1be:	4013      	ands	r3, r2
 800a1c0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	7edb      	ldrb	r3, [r3, #27]
 800a1c6:	021a      	lsls	r2, r3, #8
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	7e92      	ldrb	r2, [r2, #26]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800a1da:	6a3b      	ldr	r3, [r7, #32]
 800a1dc:	3b04      	subs	r3, #4
 800a1de:	623b      	str	r3, [r7, #32]
  index = 8;
 800a1e0:	2308      	movs	r3, #8
 800a1e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a1e4:	e021      	b.n	800a22a <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	693a      	ldr	r2, [r7, #16]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	7c1b      	ldrb	r3, [r3, #16]
 800a1f0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a1f2:	6939      	ldr	r1, [r7, #16]
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f6:	440b      	add	r3, r1
 800a1f8:	3310      	adds	r3, #16
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a1fe:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a202:	3b01      	subs	r3, #1
 800a204:	6939      	ldr	r1, [r7, #16]
 800a206:	440b      	add	r3, r1
 800a208:	7c1b      	ldrb	r3, [r3, #16]
 800a20a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a20c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800a20e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a210:	3a02      	subs	r2, #2
 800a212:	6939      	ldr	r1, [r7, #16]
 800a214:	440a      	add	r2, r1
 800a216:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a218:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	601a      	str	r2, [r3, #0]
    address--;
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	3b04      	subs	r3, #4
 800a222:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a226:	3b04      	subs	r3, #4
 800a228:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	d8da      	bhi.n	800a1e6 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a238:	33e8      	adds	r3, #232	@ 0xe8
 800a23a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	b29b      	uxth	r3, r3
 800a242:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	785b      	ldrb	r3, [r3, #1]
 800a248:	061a      	lsls	r2, r3, #24
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	431a      	orrs	r2, r3
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	041b      	lsls	r3, r3, #16
 800a254:	4313      	orrs	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a266:	33f8      	adds	r3, #248	@ 0xf8
 800a268:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	4b41      	ldr	r3, [pc, #260]	@ (800a374 <JPEG_Set_Huff_DHTMem+0x458>)
 800a270:	4013      	ands	r3, r2
 800a272:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	7bdb      	ldrb	r3, [r3, #15]
 800a278:	021a      	lsls	r2, r3, #8
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	69ba      	ldr	r2, [r7, #24]
 800a280:	7b92      	ldrb	r2, [r2, #14]
 800a282:	4313      	orrs	r3, r2
 800a284:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	3b04      	subs	r3, #4
 800a290:	623b      	str	r3, [r7, #32]
  index = 12;
 800a292:	230c      	movs	r3, #12
 800a294:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a296:	e01d      	b.n	800a2d4 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29a:	3301      	adds	r3, #1
 800a29c:	69ba      	ldr	r2, [r7, #24]
 800a29e:	5cd3      	ldrb	r3, [r2, r3]
 800a2a0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a2a2:	69b9      	ldr	r1, [r7, #24]
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a6:	440b      	add	r3, r1
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a2ac:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	69b9      	ldr	r1, [r7, #24]
 800a2b4:	5ccb      	ldrb	r3, [r1, r3]
 800a2b6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a2b8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800a2ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2bc:	3a02      	subs	r2, #2
 800a2be:	69b9      	ldr	r1, [r7, #24]
 800a2c0:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a2c2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a2c4:	6a3b      	ldr	r3, [r7, #32]
 800a2c6:	601a      	str	r2, [r3, #0]
    address--;
 800a2c8:	6a3b      	ldr	r3, [r7, #32]
 800a2ca:	3b04      	subs	r3, #4
 800a2cc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d0:	3b04      	subs	r3, #4
 800a2d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d6:	2b03      	cmp	r3, #3
 800a2d8:	d8de      	bhi.n	800a298 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a2e2:	33f8      	adds	r3, #248	@ 0xf8
 800a2e4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a2e6:	6a3b      	ldr	r3, [r7, #32]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	7c5b      	ldrb	r3, [r3, #17]
 800a2f2:	061a      	lsls	r2, r3, #24
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	431a      	orrs	r2, r3
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	7c1b      	ldrb	r3, [r3, #16]
 800a2fc:	041b      	lsls	r3, r3, #16
 800a2fe:	4313      	orrs	r3, r2
 800a300:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a302:	6a3b      	ldr	r3, [r7, #32]
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a310:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800a314:	623b      	str	r3, [r7, #32]
  index = 160;
 800a316:	23a0      	movs	r3, #160	@ 0xa0
 800a318:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a31a:	e021      	b.n	800a360 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31e:	3301      	adds	r3, #1
 800a320:	69ba      	ldr	r2, [r7, #24]
 800a322:	4413      	add	r3, r2
 800a324:	7c1b      	ldrb	r3, [r3, #16]
 800a326:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a328:	69b9      	ldr	r1, [r7, #24]
 800a32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32c:	440b      	add	r3, r1
 800a32e:	3310      	adds	r3, #16
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a334:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a338:	3b01      	subs	r3, #1
 800a33a:	69b9      	ldr	r1, [r7, #24]
 800a33c:	440b      	add	r3, r1
 800a33e:	7c1b      	ldrb	r3, [r3, #16]
 800a340:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a342:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a346:	3a02      	subs	r2, #2
 800a348:	69b9      	ldr	r1, [r7, #24]
 800a34a:	440a      	add	r2, r1
 800a34c:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a34e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a350:	6a3b      	ldr	r3, [r7, #32]
 800a352:	601a      	str	r2, [r3, #0]
    address--;
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	3b04      	subs	r3, #4
 800a358:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35c:	3b04      	subs	r3, #4
 800a35e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a362:	2b03      	cmp	r3, #3
 800a364:	d8da      	bhi.n	800a31c <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800a366:	bf00      	nop
 800a368:	bf00      	nop
 800a36a:	372c      	adds	r7, #44	@ 0x2c
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	ffff0000 	.word	0xffff0000

0800a378 <JPEG_Set_Quantization_Mem>:
  *         it could be QMEM0, QMEM1, QMEM2 or QMEM3
  * @retval 0 if no error, 1 if error
  */
static uint32_t JPEG_Set_Quantization_Mem(JPEG_HandleTypeDef *hjpeg, uint8_t *QTable,
                                                    __IO uint32_t *QTableAddress)
{
 800a378:	b480      	push	{r7}
 800a37a:	b08b      	sub	sp, #44	@ 0x2c
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
  uint32_t quantRow;
  uint32_t quantVal;
  uint32_t ScaleFactor;
  __IO uint32_t *tableAddress;

  tableAddress = QTableAddress;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	613b      	str	r3, [r7, #16]

  if ((hjpeg->Conf.ImageQuality >= 50UL) && (hjpeg->Conf.ImageQuality <= 100UL))
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	2b31      	cmp	r3, #49	@ 0x31
 800a38e:	d90a      	bls.n	800a3a6 <JPEG_Set_Quantization_Mem+0x2e>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	695b      	ldr	r3, [r3, #20]
 800a394:	2b64      	cmp	r3, #100	@ 0x64
 800a396:	d806      	bhi.n	800a3a6 <JPEG_Set_Quantization_Mem+0x2e>
  {
    ScaleFactor = 200UL - (hjpeg->Conf.ImageQuality * 2UL);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	695b      	ldr	r3, [r3, #20]
 800a39c:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800a3a0:	005b      	lsls	r3, r3, #1
 800a3a2:	617b      	str	r3, [r7, #20]
 800a3a4:	e00d      	b.n	800a3c2 <JPEG_Set_Quantization_Mem+0x4a>
  }
  else if (hjpeg->Conf.ImageQuality > 0UL)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	695b      	ldr	r3, [r3, #20]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d007      	beq.n	800a3be <JPEG_Set_Quantization_Mem+0x46>
  {
    ScaleFactor = ((uint32_t) 5000) / ((uint32_t) hjpeg->Conf.ImageQuality);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ba:	617b      	str	r3, [r7, #20]
 800a3bc:	e001      	b.n	800a3c2 <JPEG_Set_Quantization_Mem+0x4a>
  }
  else
  {
    return 1UL;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e041      	b.n	800a446 <JPEG_Set_Quantization_Mem+0xce>
  }

  /*Quantization_table = (Standard_quanization_table * ScaleFactor + 50) / 100*/
  i = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a3c6:	e03a      	b.n	800a43e <JPEG_Set_Quantization_Mem+0xc6>
  {
    quantRow = 0;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	623b      	str	r3, [r7, #32]
 800a3d0:	e029      	b.n	800a426 <JPEG_Set_Quantization_Mem+0xae>
    {
      /* Note that the quantization coefficients must be specified in the table in zigzag order */
      quantVal = ((((uint32_t) QTable[JPEG_ZIGZAG_ORDER[i + j]]) * ScaleFactor) + 50UL) / 100UL;
 800a3d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	4a1e      	ldr	r2, [pc, #120]	@ (800a454 <JPEG_Set_Quantization_Mem+0xdc>)
 800a3da:	5cd3      	ldrb	r3, [r2, r3]
 800a3dc:	461a      	mov	r2, r3
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	fb02 f303 	mul.w	r3, r2, r3
 800a3ec:	3332      	adds	r3, #50	@ 0x32
 800a3ee:	4a1a      	ldr	r2, [pc, #104]	@ (800a458 <JPEG_Set_Quantization_Mem+0xe0>)
 800a3f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a3f4:	095b      	lsrs	r3, r3, #5
 800a3f6:	61bb      	str	r3, [r7, #24]

      if (quantVal == 0UL)
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d102      	bne.n	800a404 <JPEG_Set_Quantization_Mem+0x8c>
      {
        quantVal = 1UL;
 800a3fe:	2301      	movs	r3, #1
 800a400:	61bb      	str	r3, [r7, #24]
 800a402:	e004      	b.n	800a40e <JPEG_Set_Quantization_Mem+0x96>
      }
      else if (quantVal > 255UL)
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	2bff      	cmp	r3, #255	@ 0xff
 800a408:	d901      	bls.n	800a40e <JPEG_Set_Quantization_Mem+0x96>
      {
        quantVal = 255UL;
 800a40a:	23ff      	movs	r3, #255	@ 0xff
 800a40c:	61bb      	str	r3, [r7, #24]
      else
      {
        /* Nothing to do, keep same value of quantVal */
      }

      quantRow |= ((quantVal & 0xFFUL) << (8UL * j));
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	b2da      	uxtb	r2, r3
 800a412:	6a3b      	ldr	r3, [r7, #32]
 800a414:	00db      	lsls	r3, r3, #3
 800a416:	fa02 f303 	lsl.w	r3, r2, r3
 800a41a:	69fa      	ldr	r2, [r7, #28]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	3301      	adds	r3, #1
 800a424:	623b      	str	r3, [r7, #32]
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	2b03      	cmp	r3, #3
 800a42a:	d9d2      	bls.n	800a3d2 <JPEG_Set_Quantization_Mem+0x5a>
    }

    i += 4UL;
 800a42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42e:	3304      	adds	r3, #4
 800a430:	627b      	str	r3, [r7, #36]	@ 0x24
    *tableAddress = quantRow;
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	69fa      	ldr	r2, [r7, #28]
 800a436:	601a      	str	r2, [r3, #0]
    tableAddress ++;
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	3304      	adds	r3, #4
 800a43c:	613b      	str	r3, [r7, #16]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a440:	2b3c      	cmp	r3, #60	@ 0x3c
 800a442:	d9c1      	bls.n	800a3c8 <JPEG_Set_Quantization_Mem+0x50>
  }

  /* Return function status */
  return 0UL;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	372c      	adds	r7, #44	@ 0x2c
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	0801b4d4 	.word	0x0801b4d4
 800a458:	51eb851f 	.word	0x51eb851f

0800a45c <JPEG_SetColorYCBCR>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorYCBCR(JPEG_HandleTypeDef *hjpeg)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b087      	sub	sp, #28
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 3*/
  hjpeg->Instance->CONFR1 &=  ~JPEG_CONFR1_NF;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f022 0203 	bic.w	r2, r2, #3
 800a472:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |=  JPEG_CONFR1_NF_1;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	685a      	ldr	r2, [r3, #4]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f042 0202 	orr.w	r2, r2, #2
 800a482:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d108      	bne.n	800a49e <JPEG_SetColorYCBCR+0x42>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a48c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a490:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 800a492:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a496:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 800a498:	2330      	movs	r3, #48	@ 0x30
 800a49a:	60fb      	str	r3, [r7, #12]
 800a49c:	e014      	b.n	800a4c8 <JPEG_SetColorYCBCR+0x6c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d108      	bne.n	800a4b8 <JPEG_SetColorYCBCR+0x5c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a4a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a4aa:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a4ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a4b0:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 800a4b2:	2310      	movs	r3, #16
 800a4b4:	60fb      	str	r3, [r7, #12]
 800a4b6:	e007      	b.n	800a4c8 <JPEG_SetColorYCBCR+0x6c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 800a4b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a4bc:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a4be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a4c2:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	60fb      	str	r3, [r7, #12]
  }

  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 800a4d6:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF_1 | JPEG_CONFR1_NS_1);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f042 0282 	orr.w	r2, r2, #130	@ 0x82
 800a4e6:	605a      	str	r2, [r3, #4]

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	6919      	ldr	r1, [r3, #16]
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	431a      	orrs	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a502:	431a      	orrs	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	430a      	orrs	r2, r1
 800a50a:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2200      	movs	r2, #0
 800a512:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0 | JPEG_CONFR5_QT_0 | JPEG_CONFR5_HA | JPEG_CONFR5_HD);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6959      	ldr	r1, [r3, #20]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	f241 1307 	movw	r3, #4359	@ 0x1107
 800a522:	430b      	orrs	r3, r1
 800a524:	6153      	str	r3, [r2, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2200      	movs	r2, #0
 800a52c:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor and number of blocks for component 2*/
  /* In YCBCR , by default, both chrominance components (component 1 and component 2) use the same Quantization table (table 1) */
  /* In YCBCR , both chrominance components (component 1 and component 2) use the same Huffman tables (table 1) */
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0 | JPEG_CONFR6_QT_0 | JPEG_CONFR6_HA | JPEG_CONFR6_HD);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	6999      	ldr	r1, [r3, #24]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	f241 1307 	movw	r3, #4359	@ 0x1107
 800a53c:	430b      	orrs	r3, r1
 800a53e:	6193      	str	r3, [r2, #24]

}
 800a540:	bf00      	nop
 800a542:	371c      	adds	r7, #28
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <JPEG_SetColorGrayScale>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorGrayScale(JPEG_HandleTypeDef *hjpeg)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  /*Set Number of color components to 1*/
  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	685a      	ldr	r2, [r3, #4]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 800a562:	605a      	str	r2, [r3, #4]

  /*in GrayScale use 1 single Quantization table (Table 0)*/
  /*in GrayScale use only one couple of AC/DC huffman table (table 0)*/

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2200      	movs	r2, #0
 800a56a:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |=  JPEG_CONFR4_HSF_0 | JPEG_CONFR4_VSF_0 ;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	691a      	ldr	r2, [r3, #16]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a57a:	611a      	str	r2, [r3, #16]
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <JPEG_SetColorCMYK>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorCMYK(JPEG_HandleTypeDef *hjpeg)
{
 800a588:	b480      	push	{r7}
 800a58a:	b087      	sub	sp, #28
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 4*/
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	685a      	ldr	r2, [r3, #4]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f042 02c3 	orr.w	r2, r2, #195	@ 0xc3
 800a59e:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d108      	bne.n	800a5ba <JPEG_SetColorCMYK+0x32>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a5a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a5ac:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 800a5ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5b2:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 800a5b4:	2330      	movs	r3, #48	@ 0x30
 800a5b6:	60fb      	str	r3, [r7, #12]
 800a5b8:	e014      	b.n	800a5e4 <JPEG_SetColorCMYK+0x5c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d108      	bne.n	800a5d4 <JPEG_SetColorCMYK+0x4c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a5c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a5c6:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a5c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a5cc:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 800a5ce:	2310      	movs	r3, #16
 800a5d0:	60fb      	str	r3, [r7, #12]
 800a5d2:	e007      	b.n	800a5e4 <JPEG_SetColorCMYK+0x5c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 800a5d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5d8:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a5da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a5de:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	60fb      	str	r3, [r7, #12]
  }

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6919      	ldr	r1, [r3, #16]
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	431a      	orrs	r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5fe:	431a      	orrs	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	430a      	orrs	r2, r1
 800a606:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2200      	movs	r2, #0
 800a60e:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	695a      	ldr	r2, [r3, #20]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a61e:	615a      	str	r2, [r3, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2200      	movs	r2, #0
 800a626:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 2*/
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	699a      	ldr	r2, [r3, #24]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a636:	619a      	str	r2, [r3, #24]

  /*Reset CONFR7 register*/
  hjpeg->Instance->CONFR7 =  0;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2200      	movs	r2, #0
 800a63e:	61da      	str	r2, [r3, #28]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 3*/
  hjpeg->Instance->CONFR7 |= (JPEG_CONFR7_HSF_0 | JPEG_CONFR7_VSF_0);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	69da      	ldr	r2, [r3, #28]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a64e:	61da      	str	r2, [r3, #28]
}
 800a650:	bf00      	nop
 800a652:	371c      	adds	r7, #28
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a668:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a674:	f003 0303 	and.w	r3, r3, #3
 800a678:	2b02      	cmp	r3, #2
 800a67a:	d108      	bne.n	800a68e <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f042 0208 	orr.w	r2, r2, #8
 800a68a:	605a      	str	r2, [r3, #4]
 800a68c:	e007      	b.n	800a69e <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f022 0208 	bic.w	r2, r2, #8
 800a69c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f022 0201 	bic.w	r2, r2, #1
 800a6ac:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a6bc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a6cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a6dc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a6ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f042 0201 	orr.w	r2, r2, #1
 800a6fc:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a702:	f003 030c 	and.w	r3, r3, #12
 800a706:	2b08      	cmp	r3, #8
 800a708:	d108      	bne.n	800a71c <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800a718:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800a71a:	e00d      	b.n	800a738 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a720:	f003 030c 	and.w	r3, r3, #12
 800a724:	2b0c      	cmp	r3, #12
 800a726:	d107      	bne.n	800a738 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a736:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a750:	f003 0303 	and.w	r3, r3, #3
 800a754:	2b02      	cmp	r3, #2
 800a756:	d125      	bne.n	800a7a4 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a75e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a762:	2b00      	cmp	r3, #0
 800a764:	d01e      	beq.n	800a7a4 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	3304      	adds	r3, #4
 800a76a:	4619      	mov	r1, r3
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7fe feb6 	bl	80094de <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	3304      	adds	r3, #4
 800a77c:	4619      	mov	r1, r3
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f7ff f82e 	bl	80097e0 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a792:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a7a2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d116      	bne.n	800a7de <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7b6:	f003 0302 	and.w	r3, r3, #2
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d004      	beq.n	800a7c8 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a7be:	2108      	movs	r1, #8
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f988 	bl	800aad6 <JPEG_ReadInputData>
 800a7c6:	e00a      	b.n	800a7de <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ce:	f003 0304 	and.w	r3, r3, #4
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f97c 	bl	800aad6 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d116      	bne.n	800a818 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7f0:	f003 0308 	and.w	r3, r3, #8
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d004      	beq.n	800a802 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a7f8:	2108      	movs	r1, #8
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f864 	bl	800a8c8 <JPEG_StoreOutputData>
 800a800:	e00a      	b.n	800a818 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a808:	f003 0310 	and.w	r3, r3, #16
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d003      	beq.n	800a818 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800a810:	2101      	movs	r1, #1
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f858 	bl	800a8c8 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a81e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a822:	2b20      	cmp	r3, #32
 800a824:	d14b      	bne.n	800a8be <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f022 0201 	bic.w	r2, r2, #1
 800a834:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a83a:	f003 030c 	and.w	r3, r3, #12
 800a83e:	2b08      	cmp	r3, #8
 800a840:	d107      	bne.n	800a852 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a850:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a860:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00a      	beq.n	800a880 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	69d9      	ldr	r1, [r3, #28]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a872:	461a      	mov	r2, r3
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7f7 fa17 	bl	8001ca8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a884:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a88a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f003 0303 	and.w	r3, r3, #3
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d103      	bne.n	800a8b4 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f7fe ffa2 	bl	80097f6 <HAL_JPEG_DecodeCpltCallback>
 800a8b2:	e002      	b.n	800a8ba <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7f7 fa13 	bl	8001ce0 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e000      	b.n	800a8c0 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	440b      	add	r3, r1
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d34b      	bcc.n	800a97c <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	617b      	str	r3, [r7, #20]
 800a8e8:	e031      	b.n	800a94e <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8f0:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	69da      	ldr	r2, [r3, #28]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8fa:	4413      	add	r3, r2
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	b2d2      	uxtb	r2, r2
 800a900:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	0a19      	lsrs	r1, r3, #8
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	69da      	ldr	r2, [r3, #28]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90e:	3301      	adds	r3, #1
 800a910:	4413      	add	r3, r2
 800a912:	b2ca      	uxtb	r2, r1
 800a914:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	0c19      	lsrs	r1, r3, #16
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	69da      	ldr	r2, [r3, #28]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a922:	3302      	adds	r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	b2ca      	uxtb	r2, r1
 800a928:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	0e19      	lsrs	r1, r3, #24
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	69da      	ldr	r2, [r3, #28]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a936:	3303      	adds	r3, #3
 800a938:	4413      	add	r3, r2
 800a93a:	b2ca      	uxtb	r2, r1
 800a93c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a942:	1d1a      	adds	r2, r3, #4
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	3301      	adds	r3, #1
 800a94c:	617b      	str	r3, [r7, #20]
 800a94e:	697a      	ldr	r2, [r7, #20]
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	429a      	cmp	r2, r3
 800a954:	d3c9      	bcc.n	800a8ea <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a95e:	429a      	cmp	r2, r3
 800a960:	f040 80b5 	bne.w	800aace <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	69d9      	ldr	r1, [r3, #28]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96c:	461a      	mov	r2, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7f7 f99a 	bl	8001ca8 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800a97a:	e0a8      	b.n	800aace <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a984:	429a      	cmp	r2, r3
 800a986:	f240 80a2 	bls.w	800aace <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a992:	1ad3      	subs	r3, r2, r3
 800a994:	089b      	lsrs	r3, r3, #2
 800a996:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800a998:	2300      	movs	r3, #0
 800a99a:	617b      	str	r3, [r7, #20]
 800a99c:	e031      	b.n	800aa02 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9a4:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	69da      	ldr	r2, [r3, #28]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ae:	4413      	add	r3, r2
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	b2d2      	uxtb	r2, r2
 800a9b4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	0a19      	lsrs	r1, r3, #8
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	69da      	ldr	r2, [r3, #28]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	4413      	add	r3, r2
 800a9c6:	b2ca      	uxtb	r2, r1
 800a9c8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	0c19      	lsrs	r1, r3, #16
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	69da      	ldr	r2, [r3, #28]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d6:	3302      	adds	r3, #2
 800a9d8:	4413      	add	r3, r2
 800a9da:	b2ca      	uxtb	r2, r1
 800a9dc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	0e19      	lsrs	r1, r3, #24
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	69da      	ldr	r2, [r3, #28]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ea:	3303      	adds	r3, #3
 800a9ec:	4413      	add	r3, r2
 800a9ee:	b2ca      	uxtb	r2, r1
 800a9f0:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f6:	1d1a      	adds	r2, r3, #4
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	617b      	str	r3, [r7, #20]
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d3c9      	bcc.n	800a99e <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d10b      	bne.n	800aa2e <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	69d9      	ldr	r1, [r3, #28]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1e:	461a      	mov	r2, r3
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7f7 f941 	bl	8001ca8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800aa2c:	e04f      	b.n	800aace <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa40:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800aa42:	2300      	movs	r3, #0
 800aa44:	617b      	str	r3, [r7, #20]
 800aa46:	e015      	b.n	800aa74 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	f003 0303 	and.w	r3, r3, #3
 800aa4e:	00db      	lsls	r3, r3, #3
 800aa50:	68ba      	ldr	r2, [r7, #8]
 800aa52:	fa22 f103 	lsr.w	r1, r2, r3
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	69da      	ldr	r2, [r3, #28]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa5e:	4413      	add	r3, r2
 800aa60:	b2ca      	uxtb	r2, r1
 800aa62:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	3301      	adds	r3, #1
 800aa72:	617b      	str	r3, [r7, #20]
 800aa74:	697a      	ldr	r2, [r7, #20]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d3e5      	bcc.n	800aa48 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	69d9      	ldr	r1, [r3, #28]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa84:	461a      	mov	r2, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7f7 f90e 	bl	8001ca8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f1c3 0304 	rsb	r3, r3, #4
 800aa98:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	617b      	str	r3, [r7, #20]
 800aa9e:	e013      	b.n	800aac8 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	fa22 f103 	lsr.w	r1, r2, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	69da      	ldr	r2, [r3, #28]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab2:	4413      	add	r3, r2
 800aab4:	b2ca      	uxtb	r2, r1
 800aab6:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aabc:	1c5a      	adds	r2, r3, #1
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	3301      	adds	r3, #1
 800aac6:	617b      	str	r3, [r7, #20]
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	d9e8      	bls.n	800aaa0 <JPEG_StoreOutputData+0x1d8>
}
 800aace:	bf00      	nop
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b088      	sub	sp, #32
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800aae0:	2300      	movs	r3, #0
 800aae2:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d002      	beq.n	800aaf2 <JPEG_ReadInputData+0x1c>
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d104      	bne.n	800aafc <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800aaf2:	2101      	movs	r1, #1
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7fe fdf7 	bl	80096e8 <HAL_JPEG_Pause>
 800aafa:	e028      	b.n	800ab4e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a1b      	ldr	r3, [r3, #32]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d906      	bls.n	800ab16 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a1b      	ldr	r3, [r3, #32]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	61fb      	str	r3, [r7, #28]
 800ab14:	e01b      	b.n	800ab4e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d115      	bne.n	800ab4e <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	4619      	mov	r1, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7f7 f88b 	bl	8001c44 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab32:	2b04      	cmp	r3, #4
 800ab34:	d905      	bls.n	800ab42 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab3a:	f023 0203 	bic.w	r2, r3, #3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab4c:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f040 809f 	bne.w	800ac9a <JPEG_ReadInputData+0x1c4>
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f000 809b 	beq.w	800ac9a <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	089b      	lsrs	r3, r3, #2
 800ab68:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d335      	bcc.n	800abde <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800ab72:	2300      	movs	r3, #0
 800ab74:	61bb      	str	r3, [r7, #24]
 800ab76:	e02d      	b.n	800abd4 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	699a      	ldr	r2, [r3, #24]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	4413      	add	r3, r2
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	699a      	ldr	r2, [r3, #24]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	3301      	adds	r3, #1
 800ab92:	4413      	add	r3, r2
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ab98:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6999      	ldr	r1, [r3, #24]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	3302      	adds	r3, #2
 800aba4:	440b      	add	r3, r1
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800abaa:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	699a      	ldr	r2, [r3, #24]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	3303      	adds	r3, #3
 800abb6:	4413      	add	r3, r2
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800abc0:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800abc2:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6a1b      	ldr	r3, [r3, #32]
 800abc8:	1d1a      	adds	r2, r3, #4
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	3301      	adds	r3, #1
 800abd2:	61bb      	str	r3, [r7, #24]
 800abd4:	69ba      	ldr	r2, [r7, #24]
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d3cd      	bcc.n	800ab78 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800abdc:	e05d      	b.n	800ac9a <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d035      	beq.n	800ac50 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800abe4:	2300      	movs	r3, #0
 800abe6:	61bb      	str	r3, [r7, #24]
 800abe8:	e02d      	b.n	800ac46 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	699a      	ldr	r2, [r3, #24]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4413      	add	r3, r2
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	699a      	ldr	r2, [r3, #24]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	3301      	adds	r3, #1
 800ac04:	4413      	add	r3, r2
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac0a:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6999      	ldr	r1, [r3, #24]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	3302      	adds	r3, #2
 800ac16:	440b      	add	r3, r1
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ac1c:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	699a      	ldr	r2, [r3, #24]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3303      	adds	r3, #3
 800ac28:	4413      	add	r3, r2
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ac32:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac34:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a1b      	ldr	r3, [r3, #32]
 800ac3a:	1d1a      	adds	r2, r3, #4
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	3301      	adds	r3, #1
 800ac44:	61bb      	str	r3, [r7, #24]
 800ac46:	69ba      	ldr	r2, [r7, #24]
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d3cd      	bcc.n	800abea <JPEG_ReadInputData+0x114>
}
 800ac4e:	e024      	b.n	800ac9a <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800ac50:	2300      	movs	r3, #0
 800ac52:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800ac54:	2300      	movs	r3, #0
 800ac56:	61bb      	str	r3, [r7, #24]
 800ac58:	e017      	b.n	800ac8a <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	699a      	ldr	r2, [r3, #24]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	4413      	add	r3, r2
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	461a      	mov	r2, r3
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	f003 0303 	and.w	r3, r3, #3
 800ac6e:	00db      	lsls	r3, r3, #3
 800ac70:	fa02 f303 	lsl.w	r3, r2, r3
 800ac74:	697a      	ldr	r2, [r7, #20]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	1c5a      	adds	r2, r3, #1
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	3301      	adds	r3, #1
 800ac88:	61bb      	str	r3, [r7, #24]
 800ac8a:	69ba      	ldr	r2, [r7, #24]
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d3e3      	bcc.n	800ac5a <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	697a      	ldr	r2, [r7, #20]
 800ac98:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ac9a:	bf00      	nop
 800ac9c:	3720      	adds	r7, #32
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800aca4:	b590      	push	{r4, r7, lr}
 800aca6:	b087      	sub	sp, #28
 800aca8:	af02      	add	r7, sp, #8
 800acaa:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb2:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acba:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d804      	bhi.n	800acd0 <JPEG_DMA_StartProcess+0x2c>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	429a      	cmp	r2, r3
 800acce:	d901      	bls.n	800acd4 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e074      	b.n	800adbe <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acd8:	4a3b      	ldr	r2, [pc, #236]	@ (800adc8 <JPEG_DMA_StartProcess+0x124>)
 800acda:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ace0:	4a3a      	ldr	r2, [pc, #232]	@ (800adcc <JPEG_DMA_StartProcess+0x128>)
 800ace2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ace8:	4a39      	ldr	r2, [pc, #228]	@ (800add0 <JPEG_DMA_StartProcess+0x12c>)
 800acea:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acf0:	4a36      	ldr	r2, [pc, #216]	@ (800adcc <JPEG_DMA_StartProcess+0x128>)
 800acf2:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acf8:	4a36      	ldr	r2, [pc, #216]	@ (800add4 <JPEG_DMA_StartProcess+0x130>)
 800acfa:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d002      	beq.n	800ad08 <JPEG_DMA_StartProcess+0x64>
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d107      	bne.n	800ad18 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad0c:	f043 0204 	orr.w	r2, r3, #4
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e052      	b.n	800adbe <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad20:	68f9      	ldr	r1, [r7, #12]
 800ad22:	fbb3 f1f1 	udiv	r1, r3, r1
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	fb00 f101 	mul.w	r1, r0, r1
 800ad2c:	1a5b      	subs	r3, r3, r1
 800ad2e:	1ad2      	subs	r2, r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad3c:	68b9      	ldr	r1, [r7, #8]
 800ad3e:	fbb3 f1f1 	udiv	r1, r3, r1
 800ad42:	68b8      	ldr	r0, [r7, #8]
 800ad44:	fb00 f101 	mul.w	r1, r0, r1
 800ad48:	1a5b      	subs	r3, r3, r1
 800ad4a:	1ad2      	subs	r2, r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	3344      	adds	r3, #68	@ 0x44
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	69db      	ldr	r3, [r3, #28]
 800ad60:	461c      	mov	r4, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad66:	2201      	movs	r2, #1
 800ad68:	9200      	str	r2, [sp, #0]
 800ad6a:	4622      	mov	r2, r4
 800ad6c:	f000 fbe2 	bl	800b534 <HAL_MDMA_Start_IT>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d007      	beq.n	800ad86 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad7a:	f043 0204 	orr.w	r2, r3, #4
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e01b      	b.n	800adbe <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3340      	adds	r3, #64	@ 0x40
 800ad96:	461c      	mov	r4, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	9200      	str	r2, [sp, #0]
 800ada0:	4622      	mov	r2, r4
 800ada2:	f000 fbc7 	bl	800b534 <HAL_MDMA_Start_IT>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d007      	beq.n	800adbc <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adb0:	f043 0204 	orr.w	r2, r3, #4
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	e000      	b.n	800adbe <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3714      	adds	r7, #20
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd90      	pop	{r4, r7, pc}
 800adc6:	bf00      	nop
 800adc8:	0800b0d7 	.word	0x0800b0d7
 800adcc:	0800b2c5 	.word	0x0800b2c5
 800add0:	0800b203 	.word	0x0800b203
 800add4:	0800b315 	.word	0x0800b315

0800add8 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ade4:	f003 0303 	and.w	r3, r3, #3
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d125      	bne.n	800ae38 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d01e      	beq.n	800ae38 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	3304      	adds	r3, #4
 800adfe:	4619      	mov	r1, r3
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7fe fb6c 	bl	80094de <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3304      	adds	r3, #4
 800ae10:	4619      	mov	r1, r3
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f7fe fce4 	bl	80097e0 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ae26:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae36:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae3e:	f003 0320 	and.w	r3, r3, #32
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d039      	beq.n	800aeba <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae4a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f022 0201 	bic.w	r2, r2, #1
 800ae60:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ae70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ae80:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d104      	bne.n	800ae9a <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae94:	4618      	mov	r0, r3
 800ae96:	f000 fbce 	bl	800b636 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	d105      	bne.n	800aeb4 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeac:	4618      	mov	r0, r3
 800aeae:	f000 fbc2 	bl	800b636 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800aeb2:	e002      	b.n	800aeba <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f804 	bl	800aec2 <JPEG_DMA_EndProcess>
}
 800aeba:	bf00      	nop
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b084      	sub	sp, #16
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	695b      	ldr	r3, [r3, #20]
 800aed6:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800aeda:	1ad2      	subs	r2, r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d10a      	bne.n	800af02 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	69d9      	ldr	r1, [r3, #28]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef4:	461a      	mov	r2, r3
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7f6 fed6 	bl	8001ca8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af08:	f003 0310 	and.w	r3, r3, #16
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d134      	bne.n	800af7a <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00a      	beq.n	800af2e <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	69d9      	ldr	r1, [r3, #28]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af20:	461a      	mov	r2, r3
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f7f6 fec0 	bl	8001ca8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f022 0201 	bic.w	r2, r2, #1
 800af3c:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af42:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af48:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f003 0303 	and.w	r3, r3, #3
 800af66:	2b02      	cmp	r3, #2
 800af68:	d103      	bne.n	800af72 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7fe fc43 	bl	80097f6 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800af70:	e00c      	b.n	800af8c <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f7f6 feb4 	bl	8001ce0 <HAL_JPEG_EncodeCpltCallback>
}
 800af78:	e008      	b.n	800af8c <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af82:	2b00      	cmp	r3, #0
 800af84:	d102      	bne.n	800af8c <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f804 	bl	800af94 <JPEG_DMA_PollResidualData>
}
 800af8c:	bf00      	nop
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800af9c:	2310      	movs	r3, #16
 800af9e:	617b      	str	r3, [r7, #20]
 800afa0:	e04f      	b.n	800b042 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d146      	bne.n	800b03c <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afb4:	f003 0310 	and.w	r3, r3, #16
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d03f      	beq.n	800b03c <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afc2:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	69da      	ldr	r2, [r3, #28]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afcc:	4413      	add	r3, r2
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	b2d2      	uxtb	r2, r2
 800afd2:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	0a19      	lsrs	r1, r3, #8
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	69da      	ldr	r2, [r3, #28]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afe0:	3301      	adds	r3, #1
 800afe2:	4413      	add	r3, r2
 800afe4:	b2ca      	uxtb	r2, r1
 800afe6:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	0c19      	lsrs	r1, r3, #16
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	69da      	ldr	r2, [r3, #28]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aff4:	3302      	adds	r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	b2ca      	uxtb	r2, r1
 800affa:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	0e19      	lsrs	r1, r3, #24
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	69da      	ldr	r2, [r3, #28]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b008:	3303      	adds	r3, #3
 800b00a:	4413      	add	r3, r2
 800b00c:	b2ca      	uxtb	r2, r1
 800b00e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b014:	1d1a      	adds	r2, r3, #4
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b022:	429a      	cmp	r2, r3
 800b024:	d10a      	bne.n	800b03c <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	69d9      	ldr	r1, [r3, #28]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b02e:	461a      	mov	r2, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7f6 fe39 	bl	8001ca8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	3b01      	subs	r3, #1
 800b040:	617b      	str	r3, [r7, #20]
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1ac      	bne.n	800afa2 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b04c:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b054:	f003 0310 	and.w	r3, r3, #16
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d004      	beq.n	800b066 <JPEG_DMA_PollResidualData+0xd2>
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b062:	2b00      	cmp	r3, #0
 800b064:	d133      	bne.n	800b0ce <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f022 0201 	bic.w	r2, r2, #1
 800b074:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00a      	beq.n	800b094 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	69d9      	ldr	r1, [r3, #28]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b086:	461a      	mov	r2, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7f6 fe0d 	bl	8001ca8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b098:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b09e:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f003 0303 	and.w	r3, r3, #3
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d103      	bne.n	800b0c8 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7fe fb98 	bl	80097f6 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800b0c6:	e002      	b.n	800b0ce <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7f6 fe09 	bl	8001ce0 <HAL_JPEG_EncodeCpltCallback>
}
 800b0ce:	bf00      	nop
 800b0d0:	3718      	adds	r7, #24
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b0d6:	b590      	push	{r4, r7, lr}
 800b0d8:	b087      	sub	sp, #28
 800b0da:	af02      	add	r7, sp, #8
 800b0dc:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0e2:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b0f2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b0f8:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	2b0c      	cmp	r3, #12
 800b100:	d17c      	bne.n	800b1fc <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b108:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	695b      	ldr	r3, [r3, #20]
 800b114:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b118:	1ad2      	subs	r2, r2, r3
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	4619      	mov	r1, r3
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f7f6 fd8d 	bl	8001c44 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	429a      	cmp	r2, r3
 800b132:	d81f      	bhi.n	800b174 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d10d      	bne.n	800b156 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b13e:	f043 0204 	orr.w	r2, r3, #4
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2206      	movs	r2, #6
 800b14a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f7f6 fdda 	bl	8001d08 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b154:	e052      	b.n	800b1fc <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b15e:	68b9      	ldr	r1, [r7, #8]
 800b160:	fbb3 f1f1 	udiv	r1, r3, r1
 800b164:	68b8      	ldr	r0, [r7, #8]
 800b166:	fb00 f101 	mul.w	r1, r0, r1
 800b16a:	1a5b      	subs	r3, r3, r1
 800b16c:	1ad2      	subs	r2, r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	629a      	str	r2, [r3, #40]	@ 0x28
 800b172:	e010      	b.n	800b196 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00c      	beq.n	800b196 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b180:	f003 0303 	and.w	r3, r3, #3
 800b184:	2b00      	cmp	r3, #0
 800b186:	d006      	beq.n	800b196 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b18c:	089b      	lsrs	r3, r3, #2
 800b18e:	3301      	adds	r3, #1
 800b190:	009a      	lsls	r2, r3, #2
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b19a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d124      	bne.n	800b1ec <JPEG_MDMAInCpltCallback+0x116>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d020      	beq.n	800b1ec <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	699b      	ldr	r3, [r3, #24]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3340      	adds	r3, #64	@ 0x40
 800b1ba:	461c      	mov	r4, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	9200      	str	r2, [sp, #0]
 800b1c4:	4622      	mov	r2, r4
 800b1c6:	f000 f9b5 	bl	800b534 <HAL_MDMA_Start_IT>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00d      	beq.n	800b1ec <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1d4:	f043 0204 	orr.w	r2, r3, #4
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2206      	movs	r2, #6
 800b1e0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f7f6 fd8f 	bl	8001d08 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b1ea:	e007      	b.n	800b1fc <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b1fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800b1fc:	3714      	adds	r7, #20
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd90      	pop	{r4, r7, pc}

0800b202 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b202:	b590      	push	{r4, r7, lr}
 800b204:	b087      	sub	sp, #28
 800b206:	af02      	add	r7, sp, #8
 800b208:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b20e:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b21e:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b224:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b228:	4013      	ands	r3, r2
 800b22a:	2b0c      	cmp	r3, #12
 800b22c:	d147      	bne.n	800b2be <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b234:	f003 0320 	and.w	r3, r3, #32
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d138      	bne.n	800b2ae <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b24a:	1ad2      	subs	r2, r2, r3
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	69d9      	ldr	r1, [r3, #28]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b258:	461a      	mov	r2, r3
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f7f6 fd24 	bl	8001ca8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d120      	bne.n	800b2ae <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3344      	adds	r3, #68	@ 0x44
 800b276:	4619      	mov	r1, r3
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	69db      	ldr	r3, [r3, #28]
 800b27c:	461c      	mov	r4, r3
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b282:	2201      	movs	r2, #1
 800b284:	9200      	str	r2, [sp, #0]
 800b286:	4622      	mov	r2, r4
 800b288:	f000 f954 	bl	800b534 <HAL_MDMA_Start_IT>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00d      	beq.n	800b2ae <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b296:	f043 0204 	orr.w	r2, r3, #4
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2206      	movs	r2, #6
 800b2a2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800b2a6:	68f8      	ldr	r0, [r7, #12]
 800b2a8:	f7f6 fd2e 	bl	8001d08 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800b2ac:	e007      	b.n	800b2be <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b2bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800b2be:	3714      	adds	r7, #20
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd90      	pop	{r4, r7, pc}

0800b2c4 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2d0:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f022 0201 	bic.w	r2, r2, #1
 800b2e0:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b2f0:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2fe:	f043 0204 	orr.w	r2, r3, #4
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f7f6 fcfe 	bl	8001d08 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800b30c:	bf00      	nop
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b320:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b326:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d002      	beq.n	800b334 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	f7ff fdc7 	bl	800aec2 <JPEG_DMA_EndProcess>
  }
}
 800b334:	bf00      	nop
 800b336:	3710      	adds	r7, #16
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b08b      	sub	sp, #44	@ 0x2c
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800b344:	2300      	movs	r3, #0
 800b346:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	3350      	adds	r3, #80	@ 0x50
 800b34e:	61bb      	str	r3, [r7, #24]

  i = 0;
 800b350:	2300      	movs	r3, #0
 800b352:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800b354:	e042      	b.n	800b3dc <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800b35c:	2300      	movs	r3, #0
 800b35e:	61fb      	str	r3, [r7, #28]
 800b360:	e033      	b.n	800b3ca <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	00db      	lsls	r3, r3, #3
 800b366:	697a      	ldr	r2, [r7, #20]
 800b368:	fa22 f303 	lsr.w	r3, r2, r3
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	2b01      	cmp	r3, #1
 800b374:	d103      	bne.n	800b37e <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800b376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b378:	3364      	adds	r3, #100	@ 0x64
 800b37a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b37c:	e022      	b.n	800b3c4 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	2264      	movs	r2, #100	@ 0x64
 800b382:	fb02 f303 	mul.w	r3, r2, r3
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b38a:	6a38      	ldr	r0, [r7, #32]
 800b38c:	69f9      	ldr	r1, [r7, #28]
 800b38e:	4401      	add	r1, r0
 800b390:	4818      	ldr	r0, [pc, #96]	@ (800b3f4 <JPEG_GetQuality+0xb8>)
 800b392:	5c41      	ldrb	r1, [r0, r1]
 800b394:	440a      	add	r2, r1
 800b396:	7812      	ldrb	r2, [r2, #0]
 800b398:	fbb3 f3f2 	udiv	r3, r3, r2
 800b39c:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2b64      	cmp	r3, #100	@ 0x64
 800b3a2:	d807      	bhi.n	800b3b4 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800b3aa:	085b      	lsrs	r3, r3, #1
 800b3ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3ae:	4413      	add	r3, r2
 800b3b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3b2:	e007      	b.n	800b3c4 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800b3b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3c0:	4413      	add	r3, r2
 800b3c2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	61fb      	str	r3, [r7, #28]
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	2b03      	cmp	r3, #3
 800b3ce:	d9c8      	bls.n	800b362 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800b3d0:	6a3b      	ldr	r3, [r7, #32]
 800b3d2:	3304      	adds	r3, #4
 800b3d4:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	3304      	adds	r3, #4
 800b3da:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800b3dc:	6a3b      	ldr	r3, [r7, #32]
 800b3de:	2b3c      	cmp	r3, #60	@ 0x3c
 800b3e0:	d9b9      	bls.n	800b356 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e4:	099b      	lsrs	r3, r3, #6
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	372c      	adds	r7, #44	@ 0x2c
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	0801b4d4 	.word	0x0801b4d4

0800b3f8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b400:	f7f8 f808 	bl	8003414 <HAL_GetTick>
 800b404:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e03b      	b.n	800b488 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2202      	movs	r2, #2
 800b41c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68da      	ldr	r2, [r3, #12]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f022 0201 	bic.w	r2, r2, #1
 800b42e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b430:	e00f      	b.n	800b452 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800b432:	f7f7 ffef 	bl	8003414 <HAL_GetTick>
 800b436:	4602      	mov	r2, r0
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	1ad3      	subs	r3, r2, r3
 800b43c:	2b05      	cmp	r3, #5
 800b43e:	d908      	bls.n	800b452 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2240      	movs	r2, #64	@ 0x40
 800b444:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2203      	movs	r2, #3
 800b44a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e01a      	b.n	800b488 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	f003 0301 	and.w	r3, r3, #1
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1e8      	bne.n	800b432 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 fad3 	bl	800ba0c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2201      	movs	r2, #1
 800b482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800b490:	b480      	push	{r7}
 800b492:	b087      	sub	sp, #28
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d101      	bne.n	800b4aa <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e03e      	b.n	800b528 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d101      	bne.n	800b4b8 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	e037      	b.n	800b528 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d126      	bne.n	800b51a <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	691b      	ldr	r3, [r3, #16]
 800b4d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d11c      	bne.n	800b514 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d108      	bne.n	800b502 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	691a      	ldr	r2, [r3, #16]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b4fe:	611a      	str	r2, [r3, #16]
 800b500:	e00d      	b.n	800b51e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	691a      	ldr	r2, [r3, #16]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b510:	611a      	str	r2, [r3, #16]
 800b512:	e004      	b.n	800b51e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	75fb      	strb	r3, [r7, #23]
 800b518:	e001      	b.n	800b51e <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b526:	7dfb      	ldrb	r3, [r7, #23]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	371c      	adds	r7, #28
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af02      	add	r7, sp, #8
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
 800b540:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d101      	bne.n	800b54c <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	e070      	b.n	800b62e <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b552:	2b01      	cmp	r3, #1
 800b554:	d101      	bne.n	800b55a <HAL_MDMA_Start_IT+0x26>
 800b556:	2302      	movs	r3, #2
 800b558:	e069      	b.n	800b62e <HAL_MDMA_Start_IT+0xfa>
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2201      	movs	r2, #1
 800b55e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d158      	bne.n	800b620 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2202      	movs	r2, #2
 800b572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	68da      	ldr	r2, [r3, #12]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f022 0201 	bic.w	r2, r2, #1
 800b58a:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	68b9      	ldr	r1, [r7, #8]
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f000 f9c8 	bl	800b92c <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68da      	ldr	r2, [r3, #12]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f042 0206 	orr.w	r2, r2, #6
 800b5aa:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d007      	beq.n	800b5c4 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68da      	ldr	r2, [r3, #12]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f042 0210 	orr.w	r2, r2, #16
 800b5c2:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d007      	beq.n	800b5dc <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	68da      	ldr	r2, [r3, #12]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f042 0208 	orr.w	r2, r2, #8
 800b5da:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d007      	beq.n	800b5f4 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	68da      	ldr	r2, [r3, #12]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f042 0220 	orr.w	r2, r2, #32
 800b5f2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68da      	ldr	r2, [r3, #12]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f042 0201 	orr.w	r2, r2, #1
 800b602:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b60c:	d10e      	bne.n	800b62c <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	68da      	ldr	r2, [r3, #12]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b61c:	60da      	str	r2, [r3, #12]
 800b61e:	e005      	b.n	800b62c <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800b628:	2302      	movs	r3, #2
 800b62a:	e000      	b.n	800b62e <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800b636:	b480      	push	{r7}
 800b638:	b083      	sub	sp, #12
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d101      	bne.n	800b648 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	e017      	b.n	800b678 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	2b02      	cmp	r3, #2
 800b652:	d004      	beq.n	800b65e <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2280      	movs	r2, #128	@ 0x80
 800b658:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	e00c      	b.n	800b678 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2204      	movs	r2, #4
 800b662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	68da      	ldr	r2, [r3, #12]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f022 0201 	bic.w	r2, r2, #1
 800b674:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800b68c:	2300      	movs	r3, #0
 800b68e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b690:	4b91      	ldr	r3, [pc, #580]	@ (800b8d8 <HAL_MDMA_IRQHandler+0x254>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a91      	ldr	r2, [pc, #580]	@ (800b8dc <HAL_MDMA_IRQHandler+0x258>)
 800b696:	fba2 2303 	umull	r2, r3, r2, r3
 800b69a:	0a9b      	lsrs	r3, r3, #10
 800b69c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	4b8e      	ldr	r3, [pc, #568]	@ (800b8e0 <HAL_MDMA_IRQHandler+0x25c>)
 800b6a6:	4413      	add	r3, r2
 800b6a8:	099b      	lsrs	r3, r3, #6
 800b6aa:	f003 031f 	and.w	r3, r3, #31
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b4:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800b6b6:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	4013      	ands	r3, r2
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f000 812d 	beq.w	800b920 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f003 0301 	and.w	r3, r3, #1
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d054      	beq.n	800b77e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	f003 0302 	and.w	r3, r3, #2
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d04d      	beq.n	800b77e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68da      	ldr	r2, [r3, #12]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f022 0202 	bic.w	r2, r2, #2
 800b6f0:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b700:	2b00      	cmp	r3, #0
 800b702:	d106      	bne.n	800b712 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b708:	f043 0201 	orr.w	r2, r3, #1
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	669a      	str	r2, [r3, #104]	@ 0x68
 800b710:	e005      	b.n	800b71e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b716:	f043 0202 	orr.w	r2, r3, #2
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b724:	2b00      	cmp	r3, #0
 800b726:	d005      	beq.n	800b734 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b72c:	f043 0204 	orr.w	r2, r3, #4
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d005      	beq.n	800b74a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b742:	f043 0208 	orr.w	r2, r3, #8
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b750:	2b00      	cmp	r3, #0
 800b752:	d005      	beq.n	800b760 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b758:	f043 0210 	orr.w	r2, r3, #16
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b766:	2b00      	cmp	r3, #0
 800b768:	d005      	beq.n	800b776 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b76e:	f043 0220 	orr.w	r2, r3, #32
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2201      	movs	r2, #1
 800b77c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f003 0310 	and.w	r3, r3, #16
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d012      	beq.n	800b7b2 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	f003 0320 	and.w	r3, r3, #32
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00b      	beq.n	800b7b2 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2210      	movs	r2, #16
 800b7a0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d003      	beq.n	800b7b2 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f003 0308 	and.w	r3, r3, #8
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d012      	beq.n	800b7e6 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	f003 0310 	and.w	r3, r3, #16
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00b      	beq.n	800b7e6 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2208      	movs	r2, #8
 800b7d4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 0304 	and.w	r3, r3, #4
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d012      	beq.n	800b81a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	f003 0308 	and.w	r3, r3, #8
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00b      	beq.n	800b81a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2204      	movs	r2, #4
 800b808:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d003      	beq.n	800b81a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 0302 	and.w	r3, r3, #2
 800b824:	2b00      	cmp	r3, #0
 800b826:	d039      	beq.n	800b89c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	f003 0304 	and.w	r3, r3, #4
 800b832:	2b00      	cmp	r3, #0
 800b834:	d032      	beq.n	800b89c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68da      	ldr	r2, [r3, #12]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800b844:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2b04      	cmp	r3, #4
 800b850:	d110      	bne.n	800b874 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2201      	movs	r2, #1
 800b85e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b866:	2b00      	cmp	r3, #0
 800b868:	d05c      	beq.n	800b924 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	4798      	blx	r3
        }
        return;
 800b872:	e057      	b.n	800b924 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2202      	movs	r2, #2
 800b87a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b890:	2b00      	cmp	r3, #0
 800b892:	d003      	beq.n	800b89c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d040      	beq.n	800b926 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2204      	movs	r2, #4
 800b8a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	68da      	ldr	r2, [r3, #12]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f022 0201 	bic.w	r2, r2, #1
 800b8ba:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	60bb      	str	r3, [r7, #8]
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d30d      	bcc.n	800b8e4 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1f2      	bne.n	800b8bc <HAL_MDMA_IRQHandler+0x238>
 800b8d6:	e006      	b.n	800b8e6 <HAL_MDMA_IRQHandler+0x262>
 800b8d8:	24000018 	.word	0x24000018
 800b8dc:	1b4e81b5 	.word	0x1b4e81b5
 800b8e0:	adffffc0 	.word	0xadffffc0
        break;
 800b8e4:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	f003 0301 	and.w	r3, r3, #1
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d004      	beq.n	800b906 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2203      	movs	r2, #3
 800b900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b904:	e003      	b.n	800b90e <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b912:	2b00      	cmp	r3, #0
 800b914:	d007      	beq.n	800b926 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	4798      	blx	r3
 800b91e:	e002      	b.n	800b926 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800b920:	bf00      	nop
 800b922:	e000      	b.n	800b926 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800b924:	bf00      	nop
    }
  }
}
 800b926:	3718      	adds	r7, #24
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b087      	sub	sp, #28
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	695a      	ldr	r2, [r3, #20]
 800b940:	4b31      	ldr	r3, [pc, #196]	@ (800ba08 <MDMA_SetConfig+0xdc>)
 800b942:	4013      	ands	r3, r2
 800b944:	683a      	ldr	r2, [r7, #0]
 800b946:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	6812      	ldr	r2, [r2, #0]
 800b94e:	430b      	orrs	r3, r1
 800b950:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	695b      	ldr	r3, [r3, #20]
 800b958:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800b95c:	6a3b      	ldr	r3, [r7, #32]
 800b95e:	3b01      	subs	r3, #1
 800b960:	051a      	lsls	r2, r3, #20
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	430a      	orrs	r2, r1
 800b968:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	221f      	movs	r2, #31
 800b970:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68ba      	ldr	r2, [r7, #8]
 800b980:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800b988:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b990:	d002      	beq.n	800b998 <MDMA_SetConfig+0x6c>
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d108      	bne.n	800b9aa <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b9a6:	629a      	str	r2, [r3, #40]	@ 0x28
 800b9a8:	e007      	b.n	800b9ba <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b9b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800b9c0:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9c8:	d002      	beq.n	800b9d0 <MDMA_SetConfig+0xa4>
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d108      	bne.n	800b9e2 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b9de:	629a      	str	r2, [r3, #40]	@ 0x28
 800b9e0:	e007      	b.n	800b9f2 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800b9f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b9fc:	bf00      	nop
 800b9fe:	371c      	adds	r7, #28
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	fffe0000 	.word	0xfffe0000

0800ba0c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	68d9      	ldr	r1, [r3, #12]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	691a      	ldr	r2, [r3, #16]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	430a      	orrs	r2, r1
 800ba22:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	695a      	ldr	r2, [r3, #20]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	699b      	ldr	r3, [r3, #24]
 800ba2c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ba32:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a1b      	ldr	r3, [r3, #32]
 800ba38:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800ba3e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba44:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ba4a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba50:	3b01      	subs	r3, #1
 800ba52:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800ba54:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ba60:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ba62:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba6c:	d107      	bne.n	800ba7e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	691a      	ldr	r2, [r3, #16]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800ba7c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2200      	movs	r2, #0
 800ba84:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	da11      	bge.n	800bab2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	695a      	ldr	r2, [r3, #20]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ba9c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baa2:	425b      	negs	r3, r3
 800baa4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68fa      	ldr	r2, [r7, #12]
 800baac:	b292      	uxth	r2, r2
 800baae:	621a      	str	r2, [r3, #32]
 800bab0:	e006      	b.n	800bac0 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bab6:	461a      	mov	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	b292      	uxth	r2, r2
 800babe:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	da15      	bge.n	800baf4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	695a      	ldr	r2, [r3, #20]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800bad6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800badc:	425b      	negs	r3, r3
 800bade:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	6a19      	ldr	r1, [r3, #32]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	041a      	lsls	r2, r3, #16
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	430a      	orrs	r2, r1
 800baf0:	621a      	str	r2, [r3, #32]
 800baf2:	e009      	b.n	800bb08 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	6a19      	ldr	r1, [r3, #32]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bafe:	041a      	lsls	r2, r3, #16
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	430a      	orrs	r2, r1
 800bb06:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb10:	d006      	beq.n	800bb20 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	685a      	ldr	r2, [r3, #4]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	b2d2      	uxtb	r2, r2
 800bb1c:	629a      	str	r2, [r3, #40]	@ 0x28
 800bb1e:	e003      	b.n	800bb28 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2200      	movs	r2, #0
 800bb26:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800bb30:	bf00      	nop
 800bb32:	3714      	adds	r7, #20
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af02      	add	r7, sp, #8
 800bb42:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e0fe      	b.n	800bd4c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d106      	bne.n	800bb68 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f00c f98c 	bl	8017e80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2203      	movs	r2, #3
 800bb6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f008 fb3c 	bl	80141f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6818      	ldr	r0, [r3, #0]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	7c1a      	ldrb	r2, [r3, #16]
 800bb82:	f88d 2000 	strb.w	r2, [sp]
 800bb86:	3304      	adds	r3, #4
 800bb88:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bb8a:	f008 fa0d 	bl	8013fa8 <USB_CoreInit>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d005      	beq.n	800bba0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2202      	movs	r2, #2
 800bb98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e0d5      	b.n	800bd4c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2100      	movs	r1, #0
 800bba6:	4618      	mov	r0, r3
 800bba8:	f008 fb34 	bl	8014214 <USB_SetCurrentMode>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d005      	beq.n	800bbbe <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2202      	movs	r2, #2
 800bbb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e0c6      	b.n	800bd4c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	73fb      	strb	r3, [r7, #15]
 800bbc2:	e04a      	b.n	800bc5a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bbc4:	7bfa      	ldrb	r2, [r7, #15]
 800bbc6:	6879      	ldr	r1, [r7, #4]
 800bbc8:	4613      	mov	r3, r2
 800bbca:	00db      	lsls	r3, r3, #3
 800bbcc:	4413      	add	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	440b      	add	r3, r1
 800bbd2:	3315      	adds	r3, #21
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bbd8:	7bfa      	ldrb	r2, [r7, #15]
 800bbda:	6879      	ldr	r1, [r7, #4]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	00db      	lsls	r3, r3, #3
 800bbe0:	4413      	add	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	440b      	add	r3, r1
 800bbe6:	3314      	adds	r3, #20
 800bbe8:	7bfa      	ldrb	r2, [r7, #15]
 800bbea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bbec:	7bfa      	ldrb	r2, [r7, #15]
 800bbee:	7bfb      	ldrb	r3, [r7, #15]
 800bbf0:	b298      	uxth	r0, r3
 800bbf2:	6879      	ldr	r1, [r7, #4]
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	00db      	lsls	r3, r3, #3
 800bbf8:	4413      	add	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	440b      	add	r3, r1
 800bbfe:	332e      	adds	r3, #46	@ 0x2e
 800bc00:	4602      	mov	r2, r0
 800bc02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bc04:	7bfa      	ldrb	r2, [r7, #15]
 800bc06:	6879      	ldr	r1, [r7, #4]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	00db      	lsls	r3, r3, #3
 800bc0c:	4413      	add	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	440b      	add	r3, r1
 800bc12:	3318      	adds	r3, #24
 800bc14:	2200      	movs	r2, #0
 800bc16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bc18:	7bfa      	ldrb	r2, [r7, #15]
 800bc1a:	6879      	ldr	r1, [r7, #4]
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	00db      	lsls	r3, r3, #3
 800bc20:	4413      	add	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	440b      	add	r3, r1
 800bc26:	331c      	adds	r3, #28
 800bc28:	2200      	movs	r2, #0
 800bc2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bc2c:	7bfa      	ldrb	r2, [r7, #15]
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	4613      	mov	r3, r2
 800bc32:	00db      	lsls	r3, r3, #3
 800bc34:	4413      	add	r3, r2
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	440b      	add	r3, r1
 800bc3a:	3320      	adds	r3, #32
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bc40:	7bfa      	ldrb	r2, [r7, #15]
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	4613      	mov	r3, r2
 800bc46:	00db      	lsls	r3, r3, #3
 800bc48:	4413      	add	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	440b      	add	r3, r1
 800bc4e:	3324      	adds	r3, #36	@ 0x24
 800bc50:	2200      	movs	r2, #0
 800bc52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc54:	7bfb      	ldrb	r3, [r7, #15]
 800bc56:	3301      	adds	r3, #1
 800bc58:	73fb      	strb	r3, [r7, #15]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	791b      	ldrb	r3, [r3, #4]
 800bc5e:	7bfa      	ldrb	r2, [r7, #15]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d3af      	bcc.n	800bbc4 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc64:	2300      	movs	r3, #0
 800bc66:	73fb      	strb	r3, [r7, #15]
 800bc68:	e044      	b.n	800bcf4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bc6a:	7bfa      	ldrb	r2, [r7, #15]
 800bc6c:	6879      	ldr	r1, [r7, #4]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	00db      	lsls	r3, r3, #3
 800bc72:	4413      	add	r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	440b      	add	r3, r1
 800bc78:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bc80:	7bfa      	ldrb	r2, [r7, #15]
 800bc82:	6879      	ldr	r1, [r7, #4]
 800bc84:	4613      	mov	r3, r2
 800bc86:	00db      	lsls	r3, r3, #3
 800bc88:	4413      	add	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	440b      	add	r3, r1
 800bc8e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800bc92:	7bfa      	ldrb	r2, [r7, #15]
 800bc94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bc96:	7bfa      	ldrb	r2, [r7, #15]
 800bc98:	6879      	ldr	r1, [r7, #4]
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	00db      	lsls	r3, r3, #3
 800bc9e:	4413      	add	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	440b      	add	r3, r1
 800bca4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bca8:	2200      	movs	r2, #0
 800bcaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bcac:	7bfa      	ldrb	r2, [r7, #15]
 800bcae:	6879      	ldr	r1, [r7, #4]
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	00db      	lsls	r3, r3, #3
 800bcb4:	4413      	add	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	440b      	add	r3, r1
 800bcba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bcc2:	7bfa      	ldrb	r2, [r7, #15]
 800bcc4:	6879      	ldr	r1, [r7, #4]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	00db      	lsls	r3, r3, #3
 800bcca:	4413      	add	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	440b      	add	r3, r1
 800bcd0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bcd8:	7bfa      	ldrb	r2, [r7, #15]
 800bcda:	6879      	ldr	r1, [r7, #4]
 800bcdc:	4613      	mov	r3, r2
 800bcde:	00db      	lsls	r3, r3, #3
 800bce0:	4413      	add	r3, r2
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	440b      	add	r3, r1
 800bce6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800bcea:	2200      	movs	r2, #0
 800bcec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bcee:	7bfb      	ldrb	r3, [r7, #15]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	73fb      	strb	r3, [r7, #15]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	791b      	ldrb	r3, [r3, #4]
 800bcf8:	7bfa      	ldrb	r2, [r7, #15]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d3b5      	bcc.n	800bc6a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6818      	ldr	r0, [r3, #0]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	7c1a      	ldrb	r2, [r3, #16]
 800bd06:	f88d 2000 	strb.w	r2, [sp]
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd0e:	f008 facd 	bl	80142ac <USB_DevInit>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d005      	beq.n	800bd24 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2202      	movs	r2, #2
 800bd1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	e013      	b.n	800bd4c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	7b1b      	ldrb	r3, [r3, #12]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d102      	bne.n	800bd40 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f001 f96e 	bl	800d01c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f009 fb10 	bl	801536a <USB_DevDisconnect>

  return HAL_OK;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d101      	bne.n	800bd70 <HAL_PCD_Start+0x1c>
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	e022      	b.n	800bdb6 <HAL_PCD_Start+0x62>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d009      	beq.n	800bd98 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d105      	bne.n	800bd98 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f008 fa17 	bl	80141d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f009 fabe 	bl	8015328 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bdb4:	2300      	movs	r3, #0
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800bdbe:	b590      	push	{r4, r7, lr}
 800bdc0:	b08d      	sub	sp, #52	@ 0x34
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdcc:	6a3b      	ldr	r3, [r7, #32]
 800bdce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f009 fb7c 	bl	80154d2 <USB_GetMode>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f040 84b9 	bne.w	800c754 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4618      	mov	r0, r3
 800bde8:	f009 fae0 	bl	80153ac <USB_ReadInterrupts>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f000 84af 	beq.w	800c752 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	0a1b      	lsrs	r3, r3, #8
 800bdfe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4618      	mov	r0, r3
 800be0e:	f009 facd 	bl	80153ac <USB_ReadInterrupts>
 800be12:	4603      	mov	r3, r0
 800be14:	f003 0302 	and.w	r3, r3, #2
 800be18:	2b02      	cmp	r3, #2
 800be1a:	d107      	bne.n	800be2c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	695a      	ldr	r2, [r3, #20]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f002 0202 	and.w	r2, r2, #2
 800be2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4618      	mov	r0, r3
 800be32:	f009 fabb 	bl	80153ac <USB_ReadInterrupts>
 800be36:	4603      	mov	r3, r0
 800be38:	f003 0310 	and.w	r3, r3, #16
 800be3c:	2b10      	cmp	r3, #16
 800be3e:	d161      	bne.n	800bf04 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	699a      	ldr	r2, [r3, #24]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f022 0210 	bic.w	r2, r2, #16
 800be4e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800be50:	6a3b      	ldr	r3, [r7, #32]
 800be52:	6a1b      	ldr	r3, [r3, #32]
 800be54:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	f003 020f 	and.w	r2, r3, #15
 800be5c:	4613      	mov	r3, r2
 800be5e:	00db      	lsls	r3, r3, #3
 800be60:	4413      	add	r3, r2
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	4413      	add	r3, r2
 800be6c:	3304      	adds	r3, #4
 800be6e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800be76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800be7a:	d124      	bne.n	800bec6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800be7c:	69ba      	ldr	r2, [r7, #24]
 800be7e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800be82:	4013      	ands	r3, r2
 800be84:	2b00      	cmp	r3, #0
 800be86:	d035      	beq.n	800bef4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	091b      	lsrs	r3, r3, #4
 800be90:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800be92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800be96:	b29b      	uxth	r3, r3
 800be98:	461a      	mov	r2, r3
 800be9a:	6a38      	ldr	r0, [r7, #32]
 800be9c:	f009 f8f2 	bl	8015084 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	68da      	ldr	r2, [r3, #12]
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	091b      	lsrs	r3, r3, #4
 800bea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800beac:	441a      	add	r2, r3
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	695a      	ldr	r2, [r3, #20]
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	091b      	lsrs	r3, r3, #4
 800beba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bebe:	441a      	add	r2, r3
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	615a      	str	r2, [r3, #20]
 800bec4:	e016      	b.n	800bef4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800becc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800bed0:	d110      	bne.n	800bef4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bed8:	2208      	movs	r2, #8
 800beda:	4619      	mov	r1, r3
 800bedc:	6a38      	ldr	r0, [r7, #32]
 800bede:	f009 f8d1 	bl	8015084 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	695a      	ldr	r2, [r3, #20]
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	091b      	lsrs	r3, r3, #4
 800beea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800beee:	441a      	add	r2, r3
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	699a      	ldr	r2, [r3, #24]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f042 0210 	orr.w	r2, r2, #16
 800bf02:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f009 fa4f 	bl	80153ac <USB_ReadInterrupts>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bf14:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bf18:	f040 80a7 	bne.w	800c06a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4618      	mov	r0, r3
 800bf26:	f009 fa54 	bl	80153d2 <USB_ReadDevAllOutEpInterrupt>
 800bf2a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800bf2c:	e099      	b.n	800c062 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800bf2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 808e 	beq.w	800c056 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf40:	b2d2      	uxtb	r2, r2
 800bf42:	4611      	mov	r1, r2
 800bf44:	4618      	mov	r0, r3
 800bf46:	f009 fa78 	bl	801543a <USB_ReadDevOutEPInterrupt>
 800bf4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	f003 0301 	and.w	r3, r3, #1
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00c      	beq.n	800bf70 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800bf56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf58:	015a      	lsls	r2, r3, #5
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf62:	461a      	mov	r2, r3
 800bf64:	2301      	movs	r3, #1
 800bf66:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800bf68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 fed0 	bl	800cd10 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	f003 0308 	and.w	r3, r3, #8
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00c      	beq.n	800bf94 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800bf7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf7c:	015a      	lsls	r2, r3, #5
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	4413      	add	r3, r2
 800bf82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf86:	461a      	mov	r2, r3
 800bf88:	2308      	movs	r3, #8
 800bf8a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800bf8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 ffa6 	bl	800cee0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	f003 0310 	and.w	r3, r3, #16
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d008      	beq.n	800bfb0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa0:	015a      	lsls	r2, r3, #5
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfaa:	461a      	mov	r2, r3
 800bfac:	2310      	movs	r3, #16
 800bfae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	f003 0302 	and.w	r3, r3, #2
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d030      	beq.n	800c01c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800bfba:	6a3b      	ldr	r3, [r7, #32]
 800bfbc:	695b      	ldr	r3, [r3, #20]
 800bfbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfc2:	2b80      	cmp	r3, #128	@ 0x80
 800bfc4:	d109      	bne.n	800bfda <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	69fa      	ldr	r2, [r7, #28]
 800bfd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bfd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bfd8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800bfda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfdc:	4613      	mov	r3, r2
 800bfde:	00db      	lsls	r3, r3, #3
 800bfe0:	4413      	add	r3, r2
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	4413      	add	r3, r2
 800bfec:	3304      	adds	r3, #4
 800bfee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	78db      	ldrb	r3, [r3, #3]
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d108      	bne.n	800c00a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	2200      	movs	r2, #0
 800bffc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800bffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c000:	b2db      	uxtb	r3, r3
 800c002:	4619      	mov	r1, r3
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f00c f861 	bl	80180cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c00c:	015a      	lsls	r2, r3, #5
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	4413      	add	r3, r2
 800c012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c016:	461a      	mov	r2, r3
 800c018:	2302      	movs	r3, #2
 800c01a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	f003 0320 	and.w	r3, r3, #32
 800c022:	2b00      	cmp	r3, #0
 800c024:	d008      	beq.n	800c038 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c028:	015a      	lsls	r2, r3, #5
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	4413      	add	r3, r2
 800c02e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c032:	461a      	mov	r2, r3
 800c034:	2320      	movs	r3, #32
 800c036:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d009      	beq.n	800c056 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c044:	015a      	lsls	r2, r3, #5
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	4413      	add	r3, r2
 800c04a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c04e:	461a      	mov	r2, r3
 800c050:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c054:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c058:	3301      	adds	r3, #1
 800c05a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c05e:	085b      	lsrs	r3, r3, #1
 800c060:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c064:	2b00      	cmp	r3, #0
 800c066:	f47f af62 	bne.w	800bf2e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4618      	mov	r0, r3
 800c070:	f009 f99c 	bl	80153ac <USB_ReadInterrupts>
 800c074:	4603      	mov	r3, r0
 800c076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c07a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c07e:	f040 80db 	bne.w	800c238 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4618      	mov	r0, r3
 800c088:	f009 f9bd 	bl	8015406 <USB_ReadDevAllInEpInterrupt>
 800c08c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800c08e:	2300      	movs	r3, #0
 800c090:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800c092:	e0cd      	b.n	800c230 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c096:	f003 0301 	and.w	r3, r3, #1
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	f000 80c2 	beq.w	800c224 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0a6:	b2d2      	uxtb	r2, r2
 800c0a8:	4611      	mov	r1, r2
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f009 f9e3 	bl	8015476 <USB_ReadDevInEPInterrupt>
 800c0b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d057      	beq.n	800c16c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0be:	f003 030f 	and.w	r3, r3, #15
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	43db      	mvns	r3, r3
 800c0d6:	69f9      	ldr	r1, [r7, #28]
 800c0d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c0dc:	4013      	ands	r3, r2
 800c0de:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e2:	015a      	lsls	r2, r3, #5
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	799b      	ldrb	r3, [r3, #6]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d132      	bne.n	800c160 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c0fa:	6879      	ldr	r1, [r7, #4]
 800c0fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0fe:	4613      	mov	r3, r2
 800c100:	00db      	lsls	r3, r3, #3
 800c102:	4413      	add	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	440b      	add	r3, r1
 800c108:	3320      	adds	r3, #32
 800c10a:	6819      	ldr	r1, [r3, #0]
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c110:	4613      	mov	r3, r2
 800c112:	00db      	lsls	r3, r3, #3
 800c114:	4413      	add	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4403      	add	r3, r0
 800c11a:	331c      	adds	r3, #28
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4419      	add	r1, r3
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c124:	4613      	mov	r3, r2
 800c126:	00db      	lsls	r3, r3, #3
 800c128:	4413      	add	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4403      	add	r3, r0
 800c12e:	3320      	adds	r3, #32
 800c130:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c134:	2b00      	cmp	r3, #0
 800c136:	d113      	bne.n	800c160 <HAL_PCD_IRQHandler+0x3a2>
 800c138:	6879      	ldr	r1, [r7, #4]
 800c13a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c13c:	4613      	mov	r3, r2
 800c13e:	00db      	lsls	r3, r3, #3
 800c140:	4413      	add	r3, r2
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	440b      	add	r3, r1
 800c146:	3324      	adds	r3, #36	@ 0x24
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d108      	bne.n	800c160 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6818      	ldr	r0, [r3, #0]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c158:	461a      	mov	r2, r3
 800c15a:	2101      	movs	r1, #1
 800c15c:	f009 f9ec 	bl	8015538 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c162:	b2db      	uxtb	r3, r3
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f00b ff2b 	bl	8017fc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	f003 0308 	and.w	r3, r3, #8
 800c172:	2b00      	cmp	r3, #0
 800c174:	d008      	beq.n	800c188 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c178:	015a      	lsls	r2, r3, #5
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	4413      	add	r3, r2
 800c17e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c182:	461a      	mov	r2, r3
 800c184:	2308      	movs	r3, #8
 800c186:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	f003 0310 	and.w	r3, r3, #16
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d008      	beq.n	800c1a4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c194:	015a      	lsls	r2, r3, #5
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	4413      	add	r3, r2
 800c19a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c19e:	461a      	mov	r2, r3
 800c1a0:	2310      	movs	r3, #16
 800c1a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d008      	beq.n	800c1c0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b0:	015a      	lsls	r2, r3, #5
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	2340      	movs	r3, #64	@ 0x40
 800c1be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	f003 0302 	and.w	r3, r3, #2
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d023      	beq.n	800c212 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800c1ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c1cc:	6a38      	ldr	r0, [r7, #32]
 800c1ce:	f008 f9cb 	bl	8014568 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800c1d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	00db      	lsls	r3, r3, #3
 800c1d8:	4413      	add	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	3310      	adds	r3, #16
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	3304      	adds	r3, #4
 800c1e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	78db      	ldrb	r3, [r3, #3]
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d108      	bne.n	800c200 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f00b ff78 	bl	80180f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c202:	015a      	lsls	r2, r3, #5
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	4413      	add	r3, r2
 800c208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c20c:	461a      	mov	r2, r3
 800c20e:	2302      	movs	r3, #2
 800c210:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d003      	beq.n	800c224 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c21c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fcea 	bl	800cbf8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c226:	3301      	adds	r3, #1
 800c228:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c22c:	085b      	lsrs	r3, r3, #1
 800c22e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c232:	2b00      	cmp	r3, #0
 800c234:	f47f af2e 	bne.w	800c094 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f009 f8b5 	bl	80153ac <USB_ReadInterrupts>
 800c242:	4603      	mov	r3, r0
 800c244:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c248:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c24c:	d122      	bne.n	800c294 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	69fa      	ldr	r2, [r7, #28]
 800c258:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c25c:	f023 0301 	bic.w	r3, r3, #1
 800c260:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d108      	bne.n	800c27e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c274:	2100      	movs	r1, #0
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 fef4 	bl	800d064 <HAL_PCDEx_LPM_Callback>
 800c27c:	e002      	b.n	800c284 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f00b ff16 	bl	80180b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	695a      	ldr	r2, [r3, #20]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800c292:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4618      	mov	r0, r3
 800c29a:	f009 f887 	bl	80153ac <USB_ReadInterrupts>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c2a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c2a8:	d112      	bne.n	800c2d0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	f003 0301 	and.w	r3, r3, #1
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d102      	bne.n	800c2c0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f00b fed2 	bl	8018064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	695a      	ldr	r2, [r3, #20]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800c2ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f009 f869 	bl	80153ac <USB_ReadInterrupts>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c2e4:	d121      	bne.n	800c32a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	695a      	ldr	r2, [r3, #20]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800c2f4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d111      	bne.n	800c324 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c30e:	089b      	lsrs	r3, r3, #2
 800c310:	f003 020f 	and.w	r2, r3, #15
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c31a:	2101      	movs	r1, #1
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 fea1 	bl	800d064 <HAL_PCDEx_LPM_Callback>
 800c322:	e002      	b.n	800c32a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f00b fe9d 	bl	8018064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4618      	mov	r0, r3
 800c330:	f009 f83c 	bl	80153ac <USB_ReadInterrupts>
 800c334:	4603      	mov	r3, r0
 800c336:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c33a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c33e:	f040 80b7 	bne.w	800c4b0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	69fa      	ldr	r2, [r7, #28]
 800c34c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c350:	f023 0301 	bic.w	r3, r3, #1
 800c354:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	2110      	movs	r1, #16
 800c35c:	4618      	mov	r0, r3
 800c35e:	f008 f903 	bl	8014568 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c362:	2300      	movs	r3, #0
 800c364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c366:	e046      	b.n	800c3f6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c36a:	015a      	lsls	r2, r3, #5
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	4413      	add	r3, r2
 800c370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c374:	461a      	mov	r2, r3
 800c376:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c37a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c37e:	015a      	lsls	r2, r3, #5
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	4413      	add	r3, r2
 800c384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c38c:	0151      	lsls	r1, r2, #5
 800c38e:	69fa      	ldr	r2, [r7, #28]
 800c390:	440a      	add	r2, r1
 800c392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c396:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c39a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c39e:	015a      	lsls	r2, r3, #5
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c3ae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3b2:	015a      	lsls	r2, r3, #5
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3c0:	0151      	lsls	r1, r2, #5
 800c3c2:	69fa      	ldr	r2, [r7, #28]
 800c3c4:	440a      	add	r2, r1
 800c3c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c3ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3d2:	015a      	lsls	r2, r3, #5
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	4413      	add	r3, r2
 800c3d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3e0:	0151      	lsls	r1, r2, #5
 800c3e2:	69fa      	ldr	r2, [r7, #28]
 800c3e4:	440a      	add	r2, r1
 800c3e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c3ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c3ee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	791b      	ldrb	r3, [r3, #4]
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d3b2      	bcc.n	800c368 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c408:	69db      	ldr	r3, [r3, #28]
 800c40a:	69fa      	ldr	r2, [r7, #28]
 800c40c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c410:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800c414:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	7bdb      	ldrb	r3, [r3, #15]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d016      	beq.n	800c44c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c41e:	69fb      	ldr	r3, [r7, #28]
 800c420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c428:	69fa      	ldr	r2, [r7, #28]
 800c42a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c42e:	f043 030b 	orr.w	r3, r3, #11
 800c432:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c436:	69fb      	ldr	r3, [r7, #28]
 800c438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c43c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c43e:	69fa      	ldr	r2, [r7, #28]
 800c440:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c444:	f043 030b 	orr.w	r3, r3, #11
 800c448:	6453      	str	r3, [r2, #68]	@ 0x44
 800c44a:	e015      	b.n	800c478 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c452:	695a      	ldr	r2, [r3, #20]
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c45a:	4619      	mov	r1, r3
 800c45c:	f242 032b 	movw	r3, #8235	@ 0x202b
 800c460:	4313      	orrs	r3, r2
 800c462:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c46a:	691b      	ldr	r3, [r3, #16]
 800c46c:	69fa      	ldr	r2, [r7, #28]
 800c46e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c472:	f043 030b 	orr.w	r3, r3, #11
 800c476:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	69fa      	ldr	r2, [r7, #28]
 800c482:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c486:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c48a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6818      	ldr	r0, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c49a:	461a      	mov	r2, r3
 800c49c:	f009 f84c 	bl	8015538 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	695a      	ldr	r2, [r3, #20]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800c4ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f008 ff79 	bl	80153ac <USB_ReadInterrupts>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c4c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4c4:	d123      	bne.n	800c50e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f009 f810 	bl	80154f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f008 f8c0 	bl	801465a <USB_GetDevSpeed>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	461a      	mov	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681c      	ldr	r4, [r3, #0]
 800c4e6:	f001 fd9d 	bl	800e024 <HAL_RCC_GetHCLKFreq>
 800c4ea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f007 fdca 	bl	801408c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f00b fd8a 	bl	8018012 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	695a      	ldr	r2, [r3, #20]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800c50c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4618      	mov	r0, r3
 800c514:	f008 ff4a 	bl	80153ac <USB_ReadInterrupts>
 800c518:	4603      	mov	r3, r0
 800c51a:	f003 0308 	and.w	r3, r3, #8
 800c51e:	2b08      	cmp	r3, #8
 800c520:	d10a      	bne.n	800c538 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f00b fd67 	bl	8017ff6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	695a      	ldr	r2, [r3, #20]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f002 0208 	and.w	r2, r2, #8
 800c536:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f008 ff35 	bl	80153ac <USB_ReadInterrupts>
 800c542:	4603      	mov	r3, r0
 800c544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c548:	2b80      	cmp	r3, #128	@ 0x80
 800c54a:	d123      	bne.n	800c594 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800c54c:	6a3b      	ldr	r3, [r7, #32]
 800c54e:	699b      	ldr	r3, [r3, #24]
 800c550:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c554:	6a3b      	ldr	r3, [r7, #32]
 800c556:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c558:	2301      	movs	r3, #1
 800c55a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c55c:	e014      	b.n	800c588 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800c55e:	6879      	ldr	r1, [r7, #4]
 800c560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c562:	4613      	mov	r3, r2
 800c564:	00db      	lsls	r3, r3, #3
 800c566:	4413      	add	r3, r2
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	440b      	add	r3, r1
 800c56c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d105      	bne.n	800c582 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800c576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	4619      	mov	r1, r3
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 fb0a 	bl	800cb96 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c584:	3301      	adds	r3, #1
 800c586:	627b      	str	r3, [r7, #36]	@ 0x24
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	791b      	ldrb	r3, [r3, #4]
 800c58c:	461a      	mov	r2, r3
 800c58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c590:	4293      	cmp	r3, r2
 800c592:	d3e4      	bcc.n	800c55e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4618      	mov	r0, r3
 800c59a:	f008 ff07 	bl	80153ac <USB_ReadInterrupts>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c5a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5a8:	d13c      	bne.n	800c624 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5ae:	e02b      	b.n	800c608 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b2:	015a      	lsls	r2, r3, #5
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c5c0:	6879      	ldr	r1, [r7, #4]
 800c5c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	00db      	lsls	r3, r3, #3
 800c5c8:	4413      	add	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	440b      	add	r3, r1
 800c5ce:	3318      	adds	r3, #24
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d115      	bne.n	800c602 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800c5d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	da12      	bge.n	800c602 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800c5dc:	6879      	ldr	r1, [r7, #4]
 800c5de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	00db      	lsls	r3, r3, #3
 800c5e4:	4413      	add	r3, r2
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	440b      	add	r3, r1
 800c5ea:	3317      	adds	r3, #23
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 faca 	bl	800cb96 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c604:	3301      	adds	r3, #1
 800c606:	627b      	str	r3, [r7, #36]	@ 0x24
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	791b      	ldrb	r3, [r3, #4]
 800c60c:	461a      	mov	r2, r3
 800c60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c610:	4293      	cmp	r3, r2
 800c612:	d3cd      	bcc.n	800c5b0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	695a      	ldr	r2, [r3, #20]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800c622:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4618      	mov	r0, r3
 800c62a:	f008 febf 	bl	80153ac <USB_ReadInterrupts>
 800c62e:	4603      	mov	r3, r0
 800c630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c634:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c638:	d156      	bne.n	800c6e8 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c63a:	2301      	movs	r3, #1
 800c63c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c63e:	e045      	b.n	800c6cc <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800c640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c642:	015a      	lsls	r2, r3, #5
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	4413      	add	r3, r2
 800c648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c650:	6879      	ldr	r1, [r7, #4]
 800c652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c654:	4613      	mov	r3, r2
 800c656:	00db      	lsls	r3, r3, #3
 800c658:	4413      	add	r3, r2
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	440b      	add	r3, r1
 800c65e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b01      	cmp	r3, #1
 800c666:	d12e      	bne.n	800c6c6 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c668:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	da2b      	bge.n	800c6c6 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	0c1a      	lsrs	r2, r3, #16
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800c678:	4053      	eors	r3, r2
 800c67a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d121      	bne.n	800c6c6 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800c682:	6879      	ldr	r1, [r7, #4]
 800c684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c686:	4613      	mov	r3, r2
 800c688:	00db      	lsls	r3, r3, #3
 800c68a:	4413      	add	r3, r2
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	440b      	add	r3, r1
 800c690:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c694:	2201      	movs	r2, #1
 800c696:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c698:	6a3b      	ldr	r3, [r7, #32]
 800c69a:	699b      	ldr	r3, [r3, #24]
 800c69c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c6a0:	6a3b      	ldr	r3, [r7, #32]
 800c6a2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c6a4:	6a3b      	ldr	r3, [r7, #32]
 800c6a6:	695b      	ldr	r3, [r3, #20]
 800c6a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10a      	bne.n	800c6c6 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	69fa      	ldr	r2, [r7, #28]
 800c6ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c6be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c6c2:	6053      	str	r3, [r2, #4]
            break;
 800c6c4:	e008      	b.n	800c6d8 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	791b      	ldrb	r3, [r3, #4]
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d3b3      	bcc.n	800c640 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	695a      	ldr	r2, [r3, #20]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800c6e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f008 fe5d 	bl	80153ac <USB_ReadInterrupts>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c6f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6fc:	d10a      	bne.n	800c714 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f00b fd08 	bl	8018114 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	695a      	ldr	r2, [r3, #20]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c712:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4618      	mov	r0, r3
 800c71a:	f008 fe47 	bl	80153ac <USB_ReadInterrupts>
 800c71e:	4603      	mov	r3, r0
 800c720:	f003 0304 	and.w	r3, r3, #4
 800c724:	2b04      	cmp	r3, #4
 800c726:	d115      	bne.n	800c754 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	f003 0304 	and.w	r3, r3, #4
 800c736:	2b00      	cmp	r3, #0
 800c738:	d002      	beq.n	800c740 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f00b fcf8 	bl	8018130 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	6859      	ldr	r1, [r3, #4]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	69ba      	ldr	r2, [r7, #24]
 800c74c:	430a      	orrs	r2, r1
 800c74e:	605a      	str	r2, [r3, #4]
 800c750:	e000      	b.n	800c754 <HAL_PCD_IRQHandler+0x996>
      return;
 800c752:	bf00      	nop
    }
  }
}
 800c754:	3734      	adds	r7, #52	@ 0x34
 800c756:	46bd      	mov	sp, r7
 800c758:	bd90      	pop	{r4, r7, pc}

0800c75a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b082      	sub	sp, #8
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	460b      	mov	r3, r1
 800c764:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d101      	bne.n	800c774 <HAL_PCD_SetAddress+0x1a>
 800c770:	2302      	movs	r3, #2
 800c772:	e012      	b.n	800c79a <HAL_PCD_SetAddress+0x40>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2201      	movs	r2, #1
 800c778:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	78fa      	ldrb	r2, [r7, #3]
 800c780:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	78fa      	ldrb	r2, [r7, #3]
 800c788:	4611      	mov	r1, r2
 800c78a:	4618      	mov	r0, r3
 800c78c:	f008 fda6 	bl	80152dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3708      	adds	r7, #8
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b084      	sub	sp, #16
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
 800c7aa:	4608      	mov	r0, r1
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	70fb      	strb	r3, [r7, #3]
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	803b      	strh	r3, [r7, #0]
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c7c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	da0f      	bge.n	800c7e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c7c8:	78fb      	ldrb	r3, [r7, #3]
 800c7ca:	f003 020f 	and.w	r2, r3, #15
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	00db      	lsls	r3, r3, #3
 800c7d2:	4413      	add	r3, r2
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	3310      	adds	r3, #16
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	4413      	add	r3, r2
 800c7dc:	3304      	adds	r3, #4
 800c7de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	705a      	strb	r2, [r3, #1]
 800c7e6:	e00f      	b.n	800c808 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c7e8:	78fb      	ldrb	r3, [r7, #3]
 800c7ea:	f003 020f 	and.w	r2, r3, #15
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	00db      	lsls	r3, r3, #3
 800c7f2:	4413      	add	r3, r2
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	3304      	adds	r3, #4
 800c800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2200      	movs	r2, #0
 800c806:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c808:	78fb      	ldrb	r3, [r7, #3]
 800c80a:	f003 030f 	and.w	r3, r3, #15
 800c80e:	b2da      	uxtb	r2, r3
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800c814:	883b      	ldrh	r3, [r7, #0]
 800c816:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	78ba      	ldrb	r2, [r7, #2]
 800c822:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	785b      	ldrb	r3, [r3, #1]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d004      	beq.n	800c836 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	461a      	mov	r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c836:	78bb      	ldrb	r3, [r7, #2]
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d102      	bne.n	800c842 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2200      	movs	r2, #0
 800c840:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d101      	bne.n	800c850 <HAL_PCD_EP_Open+0xae>
 800c84c:	2302      	movs	r3, #2
 800c84e:	e00e      	b.n	800c86e <HAL_PCD_EP_Open+0xcc>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	68f9      	ldr	r1, [r7, #12]
 800c85e:	4618      	mov	r0, r3
 800c860:	f007 ff20 	bl	80146a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c86c:	7afb      	ldrb	r3, [r7, #11]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b084      	sub	sp, #16
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
 800c87e:	460b      	mov	r3, r1
 800c880:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c882:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c886:	2b00      	cmp	r3, #0
 800c888:	da0f      	bge.n	800c8aa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c88a:	78fb      	ldrb	r3, [r7, #3]
 800c88c:	f003 020f 	and.w	r2, r3, #15
 800c890:	4613      	mov	r3, r2
 800c892:	00db      	lsls	r3, r3, #3
 800c894:	4413      	add	r3, r2
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	3310      	adds	r3, #16
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	4413      	add	r3, r2
 800c89e:	3304      	adds	r3, #4
 800c8a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	705a      	strb	r2, [r3, #1]
 800c8a8:	e00f      	b.n	800c8ca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c8aa:	78fb      	ldrb	r3, [r7, #3]
 800c8ac:	f003 020f 	and.w	r2, r3, #15
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	00db      	lsls	r3, r3, #3
 800c8b4:	4413      	add	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	4413      	add	r3, r2
 800c8c0:	3304      	adds	r3, #4
 800c8c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c8ca:	78fb      	ldrb	r3, [r7, #3]
 800c8cc:	f003 030f 	and.w	r3, r3, #15
 800c8d0:	b2da      	uxtb	r2, r3
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d101      	bne.n	800c8e4 <HAL_PCD_EP_Close+0x6e>
 800c8e0:	2302      	movs	r3, #2
 800c8e2:	e00e      	b.n	800c902 <HAL_PCD_EP_Close+0x8c>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	68f9      	ldr	r1, [r7, #12]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f007 ff5e 	bl	80147b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b086      	sub	sp, #24
 800c90e:	af00      	add	r7, sp, #0
 800c910:	60f8      	str	r0, [r7, #12]
 800c912:	607a      	str	r2, [r7, #4]
 800c914:	603b      	str	r3, [r7, #0]
 800c916:	460b      	mov	r3, r1
 800c918:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c91a:	7afb      	ldrb	r3, [r7, #11]
 800c91c:	f003 020f 	and.w	r2, r3, #15
 800c920:	4613      	mov	r3, r2
 800c922:	00db      	lsls	r3, r3, #3
 800c924:	4413      	add	r3, r2
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	4413      	add	r3, r2
 800c930:	3304      	adds	r3, #4
 800c932:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	683a      	ldr	r2, [r7, #0]
 800c93e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	2200      	movs	r2, #0
 800c944:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	2200      	movs	r2, #0
 800c94a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c94c:	7afb      	ldrb	r3, [r7, #11]
 800c94e:	f003 030f 	and.w	r3, r3, #15
 800c952:	b2da      	uxtb	r2, r3
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	799b      	ldrb	r3, [r3, #6]
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d102      	bne.n	800c966 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6818      	ldr	r0, [r3, #0]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	799b      	ldrb	r3, [r3, #6]
 800c96e:	461a      	mov	r2, r3
 800c970:	6979      	ldr	r1, [r7, #20]
 800c972:	f007 fffb 	bl	801496c <USB_EPStartXfer>

  return HAL_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3718      	adds	r7, #24
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c980:	b480      	push	{r7}
 800c982:	b083      	sub	sp, #12
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	460b      	mov	r3, r1
 800c98a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c98c:	78fb      	ldrb	r3, [r7, #3]
 800c98e:	f003 020f 	and.w	r2, r3, #15
 800c992:	6879      	ldr	r1, [r7, #4]
 800c994:	4613      	mov	r3, r2
 800c996:	00db      	lsls	r3, r3, #3
 800c998:	4413      	add	r3, r2
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	440b      	add	r3, r1
 800c99e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c9a2:	681b      	ldr	r3, [r3, #0]
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	607a      	str	r2, [r7, #4]
 800c9ba:	603b      	str	r3, [r7, #0]
 800c9bc:	460b      	mov	r3, r1
 800c9be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c9c0:	7afb      	ldrb	r3, [r7, #11]
 800c9c2:	f003 020f 	and.w	r2, r3, #15
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	00db      	lsls	r3, r3, #3
 800c9ca:	4413      	add	r3, r2
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	3310      	adds	r3, #16
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	683a      	ldr	r2, [r7, #0]
 800c9e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c9f0:	7afb      	ldrb	r3, [r7, #11]
 800c9f2:	f003 030f 	and.w	r3, r3, #15
 800c9f6:	b2da      	uxtb	r2, r3
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	799b      	ldrb	r3, [r3, #6]
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d102      	bne.n	800ca0a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	6818      	ldr	r0, [r3, #0]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	799b      	ldrb	r3, [r3, #6]
 800ca12:	461a      	mov	r2, r3
 800ca14:	6979      	ldr	r1, [r7, #20]
 800ca16:	f007 ffa9 	bl	801496c <USB_EPStartXfer>

  return HAL_OK;
 800ca1a:	2300      	movs	r3, #0
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3718      	adds	r7, #24
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ca30:	78fb      	ldrb	r3, [r7, #3]
 800ca32:	f003 030f 	and.w	r3, r3, #15
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	7912      	ldrb	r2, [r2, #4]
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d901      	bls.n	800ca42 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e04f      	b.n	800cae2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ca42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	da0f      	bge.n	800ca6a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca4a:	78fb      	ldrb	r3, [r7, #3]
 800ca4c:	f003 020f 	and.w	r2, r3, #15
 800ca50:	4613      	mov	r3, r2
 800ca52:	00db      	lsls	r3, r3, #3
 800ca54:	4413      	add	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	3310      	adds	r3, #16
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	3304      	adds	r3, #4
 800ca60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2201      	movs	r2, #1
 800ca66:	705a      	strb	r2, [r3, #1]
 800ca68:	e00d      	b.n	800ca86 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ca6a:	78fa      	ldrb	r2, [r7, #3]
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	00db      	lsls	r3, r3, #3
 800ca70:	4413      	add	r3, r2
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	3304      	adds	r3, #4
 800ca7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2200      	movs	r2, #0
 800ca84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca8c:	78fb      	ldrb	r3, [r7, #3]
 800ca8e:	f003 030f 	and.w	r3, r3, #15
 800ca92:	b2da      	uxtb	r2, r3
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d101      	bne.n	800caa6 <HAL_PCD_EP_SetStall+0x82>
 800caa2:	2302      	movs	r3, #2
 800caa4:	e01d      	b.n	800cae2 <HAL_PCD_EP_SetStall+0xbe>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2201      	movs	r2, #1
 800caaa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	68f9      	ldr	r1, [r7, #12]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f008 fb3d 	bl	8015134 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800caba:	78fb      	ldrb	r3, [r7, #3]
 800cabc:	f003 030f 	and.w	r3, r3, #15
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d109      	bne.n	800cad8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6818      	ldr	r0, [r3, #0]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	7999      	ldrb	r1, [r3, #6]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cad2:	461a      	mov	r2, r3
 800cad4:	f008 fd30 	bl	8015538 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3710      	adds	r7, #16
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b084      	sub	sp, #16
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	460b      	mov	r3, r1
 800caf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800caf6:	78fb      	ldrb	r3, [r7, #3]
 800caf8:	f003 030f 	and.w	r3, r3, #15
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	7912      	ldrb	r2, [r2, #4]
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d901      	bls.n	800cb08 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cb04:	2301      	movs	r3, #1
 800cb06:	e042      	b.n	800cb8e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cb08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	da0f      	bge.n	800cb30 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb10:	78fb      	ldrb	r3, [r7, #3]
 800cb12:	f003 020f 	and.w	r2, r3, #15
 800cb16:	4613      	mov	r3, r2
 800cb18:	00db      	lsls	r3, r3, #3
 800cb1a:	4413      	add	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	3310      	adds	r3, #16
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	4413      	add	r3, r2
 800cb24:	3304      	adds	r3, #4
 800cb26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	705a      	strb	r2, [r3, #1]
 800cb2e:	e00f      	b.n	800cb50 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cb30:	78fb      	ldrb	r3, [r7, #3]
 800cb32:	f003 020f 	and.w	r2, r3, #15
 800cb36:	4613      	mov	r3, r2
 800cb38:	00db      	lsls	r3, r3, #3
 800cb3a:	4413      	add	r3, r2
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	4413      	add	r3, r2
 800cb46:	3304      	adds	r3, #4
 800cb48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2200      	movs	r2, #0
 800cb54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cb56:	78fb      	ldrb	r3, [r7, #3]
 800cb58:	f003 030f 	and.w	r3, r3, #15
 800cb5c:	b2da      	uxtb	r2, r3
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d101      	bne.n	800cb70 <HAL_PCD_EP_ClrStall+0x86>
 800cb6c:	2302      	movs	r3, #2
 800cb6e:	e00e      	b.n	800cb8e <HAL_PCD_EP_ClrStall+0xa4>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2201      	movs	r2, #1
 800cb74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	68f9      	ldr	r1, [r7, #12]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f008 fb46 	bl	8015210 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3710      	adds	r7, #16
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b084      	sub	sp, #16
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	460b      	mov	r3, r1
 800cba0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800cba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	da0c      	bge.n	800cbc4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cbaa:	78fb      	ldrb	r3, [r7, #3]
 800cbac:	f003 020f 	and.w	r2, r3, #15
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	00db      	lsls	r3, r3, #3
 800cbb4:	4413      	add	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	3310      	adds	r3, #16
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	3304      	adds	r3, #4
 800cbc0:	60fb      	str	r3, [r7, #12]
 800cbc2:	e00c      	b.n	800cbde <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cbc4:	78fb      	ldrb	r3, [r7, #3]
 800cbc6:	f003 020f 	and.w	r2, r3, #15
 800cbca:	4613      	mov	r3, r2
 800cbcc:	00db      	lsls	r3, r3, #3
 800cbce:	4413      	add	r3, r2
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	4413      	add	r3, r2
 800cbda:	3304      	adds	r3, #4
 800cbdc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68f9      	ldr	r1, [r7, #12]
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f008 f965 	bl	8014eb4 <USB_EPStopXfer>
 800cbea:	4603      	mov	r3, r0
 800cbec:	72fb      	strb	r3, [r7, #11]

  return ret;
 800cbee:	7afb      	ldrb	r3, [r7, #11]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3710      	adds	r7, #16
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b08a      	sub	sp, #40	@ 0x28
 800cbfc:	af02      	add	r7, sp, #8
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cc0c:	683a      	ldr	r2, [r7, #0]
 800cc0e:	4613      	mov	r3, r2
 800cc10:	00db      	lsls	r3, r3, #3
 800cc12:	4413      	add	r3, r2
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	3310      	adds	r3, #16
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	3304      	adds	r3, #4
 800cc1e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	695a      	ldr	r2, [r3, #20]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	691b      	ldr	r3, [r3, #16]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d901      	bls.n	800cc30 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	e06b      	b.n	800cd08 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	691a      	ldr	r2, [r3, #16]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	695b      	ldr	r3, [r3, #20]
 800cc38:	1ad3      	subs	r3, r2, r3
 800cc3a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	69fa      	ldr	r2, [r7, #28]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d902      	bls.n	800cc4c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	3303      	adds	r3, #3
 800cc50:	089b      	lsrs	r3, r3, #2
 800cc52:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cc54:	e02a      	b.n	800ccac <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	691a      	ldr	r2, [r3, #16]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	695b      	ldr	r3, [r3, #20]
 800cc5e:	1ad3      	subs	r3, r2, r3
 800cc60:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	689b      	ldr	r3, [r3, #8]
 800cc66:	69fa      	ldr	r2, [r7, #28]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d902      	bls.n	800cc72 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	3303      	adds	r3, #3
 800cc76:	089b      	lsrs	r3, r3, #2
 800cc78:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	68d9      	ldr	r1, [r3, #12]
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	69fb      	ldr	r3, [r7, #28]
 800cc84:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cc8a:	9300      	str	r3, [sp, #0]
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	6978      	ldr	r0, [r7, #20]
 800cc90:	f008 f9ba 	bl	8015008 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	68da      	ldr	r2, [r3, #12]
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	441a      	add	r2, r3
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	695a      	ldr	r2, [r3, #20]
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	441a      	add	r2, r3
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	015a      	lsls	r2, r3, #5
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccb8:	699b      	ldr	r3, [r3, #24]
 800ccba:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ccbc:	69ba      	ldr	r2, [r7, #24]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d809      	bhi.n	800ccd6 <PCD_WriteEmptyTxFifo+0xde>
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	695a      	ldr	r2, [r3, #20]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d203      	bcs.n	800ccd6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	691b      	ldr	r3, [r3, #16]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d1bf      	bne.n	800cc56 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	691a      	ldr	r2, [r3, #16]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	695b      	ldr	r3, [r3, #20]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d811      	bhi.n	800cd06 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	f003 030f 	and.w	r3, r3, #15
 800cce8:	2201      	movs	r2, #1
 800ccea:	fa02 f303 	lsl.w	r3, r2, r3
 800ccee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ccf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	43db      	mvns	r3, r3
 800ccfc:	6939      	ldr	r1, [r7, #16]
 800ccfe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cd02:	4013      	ands	r3, r2
 800cd04:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800cd06:	2300      	movs	r3, #0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3720      	adds	r7, #32
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b088      	sub	sp, #32
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	333c      	adds	r3, #60	@ 0x3c
 800cd28:	3304      	adds	r3, #4
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	015a      	lsls	r2, r3, #5
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	4413      	add	r3, r2
 800cd36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	799b      	ldrb	r3, [r3, #6]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d17b      	bne.n	800ce3e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	f003 0308 	and.w	r3, r3, #8
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d015      	beq.n	800cd7c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	4a61      	ldr	r2, [pc, #388]	@ (800ced8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	f240 80b9 	bls.w	800cecc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 80b3 	beq.w	800cecc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	015a      	lsls	r2, r3, #5
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd72:	461a      	mov	r2, r3
 800cd74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd78:	6093      	str	r3, [r2, #8]
 800cd7a:	e0a7      	b.n	800cecc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	f003 0320 	and.w	r3, r3, #32
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d009      	beq.n	800cd9a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	015a      	lsls	r2, r3, #5
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd92:	461a      	mov	r2, r3
 800cd94:	2320      	movs	r3, #32
 800cd96:	6093      	str	r3, [r2, #8]
 800cd98:	e098      	b.n	800cecc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f040 8093 	bne.w	800cecc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	4a4b      	ldr	r2, [pc, #300]	@ (800ced8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d90f      	bls.n	800cdce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d00a      	beq.n	800cdce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	015a      	lsls	r2, r3, #5
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	4413      	add	r3, r2
 800cdc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cdca:	6093      	str	r3, [r2, #8]
 800cdcc:	e07e      	b.n	800cecc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	00db      	lsls	r3, r3, #3
 800cdd4:	4413      	add	r3, r2
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	4413      	add	r3, r2
 800cde0:	3304      	adds	r3, #4
 800cde2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6a1a      	ldr	r2, [r3, #32]
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	0159      	lsls	r1, r3, #5
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	440b      	add	r3, r1
 800cdf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdf4:	691b      	ldr	r3, [r3, #16]
 800cdf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cdfa:	1ad2      	subs	r2, r2, r3
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d114      	bne.n	800ce30 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d109      	bne.n	800ce22 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6818      	ldr	r0, [r3, #0]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ce18:	461a      	mov	r2, r3
 800ce1a:	2101      	movs	r1, #1
 800ce1c:	f008 fb8c 	bl	8015538 <USB_EP0_OutStart>
 800ce20:	e006      	b.n	800ce30 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	68da      	ldr	r2, [r3, #12]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	695b      	ldr	r3, [r3, #20]
 800ce2a:	441a      	add	r2, r3
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	4619      	mov	r1, r3
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f00b f8a8 	bl	8017f8c <HAL_PCD_DataOutStageCallback>
 800ce3c:	e046      	b.n	800cecc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	4a26      	ldr	r2, [pc, #152]	@ (800cedc <PCD_EP_OutXfrComplete_int+0x1cc>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d124      	bne.n	800ce90 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00a      	beq.n	800ce66 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	015a      	lsls	r2, r3, #5
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	4413      	add	r3, r2
 800ce58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce62:	6093      	str	r3, [r2, #8]
 800ce64:	e032      	b.n	800cecc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	f003 0320 	and.w	r3, r3, #32
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d008      	beq.n	800ce82 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	015a      	lsls	r2, r3, #5
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	4413      	add	r3, r2
 800ce78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	2320      	movs	r3, #32
 800ce80:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	4619      	mov	r1, r3
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f00b f87f 	bl	8017f8c <HAL_PCD_DataOutStageCallback>
 800ce8e:	e01d      	b.n	800cecc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d114      	bne.n	800cec0 <PCD_EP_OutXfrComplete_int+0x1b0>
 800ce96:	6879      	ldr	r1, [r7, #4]
 800ce98:	683a      	ldr	r2, [r7, #0]
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	00db      	lsls	r3, r3, #3
 800ce9e:	4413      	add	r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	440b      	add	r3, r1
 800cea4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d108      	bne.n	800cec0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6818      	ldr	r0, [r3, #0]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ceb8:	461a      	mov	r2, r3
 800ceba:	2100      	movs	r1, #0
 800cebc:	f008 fb3c 	bl	8015538 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	4619      	mov	r1, r3
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f00b f860 	bl	8017f8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800cecc:	2300      	movs	r3, #0
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3720      	adds	r7, #32
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	4f54300a 	.word	0x4f54300a
 800cedc:	4f54310a 	.word	0x4f54310a

0800cee0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b086      	sub	sp, #24
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	333c      	adds	r3, #60	@ 0x3c
 800cef8:	3304      	adds	r3, #4
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	015a      	lsls	r2, r3, #5
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	4413      	add	r3, r2
 800cf06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf0a:	689b      	ldr	r3, [r3, #8]
 800cf0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	4a15      	ldr	r2, [pc, #84]	@ (800cf68 <PCD_EP_OutSetupPacket_int+0x88>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d90e      	bls.n	800cf34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d009      	beq.n	800cf34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	015a      	lsls	r2, r3, #5
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	4413      	add	r3, r2
 800cf28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f00b f817 	bl	8017f68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	4a0a      	ldr	r2, [pc, #40]	@ (800cf68 <PCD_EP_OutSetupPacket_int+0x88>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d90c      	bls.n	800cf5c <PCD_EP_OutSetupPacket_int+0x7c>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	799b      	ldrb	r3, [r3, #6]
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d108      	bne.n	800cf5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6818      	ldr	r0, [r3, #0]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cf54:	461a      	mov	r2, r3
 800cf56:	2101      	movs	r1, #1
 800cf58:	f008 faee 	bl	8015538 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800cf5c:	2300      	movs	r3, #0
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3718      	adds	r7, #24
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	4f54300a 	.word	0x4f54300a

0800cf6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b085      	sub	sp, #20
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	460b      	mov	r3, r1
 800cf76:	70fb      	strb	r3, [r7, #3]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800cf84:	78fb      	ldrb	r3, [r7, #3]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d107      	bne.n	800cf9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800cf8a:	883b      	ldrh	r3, [r7, #0]
 800cf8c:	0419      	lsls	r1, r3, #16
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	430a      	orrs	r2, r1
 800cf96:	629a      	str	r2, [r3, #40]	@ 0x28
 800cf98:	e028      	b.n	800cfec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfa0:	0c1b      	lsrs	r3, r3, #16
 800cfa2:	68ba      	ldr	r2, [r7, #8]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	73fb      	strb	r3, [r7, #15]
 800cfac:	e00d      	b.n	800cfca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	7bfb      	ldrb	r3, [r7, #15]
 800cfb4:	3340      	adds	r3, #64	@ 0x40
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	4413      	add	r3, r2
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	0c1b      	lsrs	r3, r3, #16
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	73fb      	strb	r3, [r7, #15]
 800cfca:	7bfa      	ldrb	r2, [r7, #15]
 800cfcc:	78fb      	ldrb	r3, [r7, #3]
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d3ec      	bcc.n	800cfae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800cfd4:	883b      	ldrh	r3, [r7, #0]
 800cfd6:	0418      	lsls	r0, r3, #16
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6819      	ldr	r1, [r3, #0]
 800cfdc:	78fb      	ldrb	r3, [r7, #3]
 800cfde:	3b01      	subs	r3, #1
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	4302      	orrs	r2, r0
 800cfe4:	3340      	adds	r3, #64	@ 0x40
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	440b      	add	r3, r1
 800cfea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800cfec:	2300      	movs	r3, #0
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3714      	adds	r7, #20
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr

0800cffa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800cffa:	b480      	push	{r7}
 800cffc:	b083      	sub	sp, #12
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	460b      	mov	r3, r1
 800d004:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	887a      	ldrh	r2, [r7, #2]
 800d00c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d00e:	2300      	movs	r3, #0
}
 800d010:	4618      	mov	r0, r3
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b085      	sub	sp, #20
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2201      	movs	r2, #1
 800d02e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2200      	movs	r2, #0
 800d036:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	699b      	ldr	r3, [r3, #24]
 800d03e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d04a:	4b05      	ldr	r3, [pc, #20]	@ (800d060 <HAL_PCDEx_ActivateLPM+0x44>)
 800d04c:	4313      	orrs	r3, r2
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800d052:	2300      	movs	r3, #0
}
 800d054:	4618      	mov	r0, r3
 800d056:	3714      	adds	r7, #20
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr
 800d060:	10000003 	.word	0x10000003

0800d064 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	460b      	mov	r3, r1
 800d06e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d070:	bf00      	nop
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d084:	4b19      	ldr	r3, [pc, #100]	@ (800d0ec <HAL_PWREx_ConfigSupply+0x70>)
 800d086:	68db      	ldr	r3, [r3, #12]
 800d088:	f003 0304 	and.w	r3, r3, #4
 800d08c:	2b04      	cmp	r3, #4
 800d08e:	d00a      	beq.n	800d0a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d090:	4b16      	ldr	r3, [pc, #88]	@ (800d0ec <HAL_PWREx_ConfigSupply+0x70>)
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	f003 0307 	and.w	r3, r3, #7
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d001      	beq.n	800d0a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e01f      	b.n	800d0e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	e01d      	b.n	800d0e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d0a6:	4b11      	ldr	r3, [pc, #68]	@ (800d0ec <HAL_PWREx_ConfigSupply+0x70>)
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	f023 0207 	bic.w	r2, r3, #7
 800d0ae:	490f      	ldr	r1, [pc, #60]	@ (800d0ec <HAL_PWREx_ConfigSupply+0x70>)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d0b6:	f7f6 f9ad 	bl	8003414 <HAL_GetTick>
 800d0ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d0bc:	e009      	b.n	800d0d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d0be:	f7f6 f9a9 	bl	8003414 <HAL_GetTick>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	1ad3      	subs	r3, r2, r3
 800d0c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d0cc:	d901      	bls.n	800d0d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e007      	b.n	800d0e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d0d2:	4b06      	ldr	r3, [pc, #24]	@ (800d0ec <HAL_PWREx_ConfigSupply+0x70>)
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d0da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0de:	d1ee      	bne.n	800d0be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	58024800 	.word	0x58024800

0800d0f0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d0f4:	4b05      	ldr	r3, [pc, #20]	@ (800d10c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	4a04      	ldr	r2, [pc, #16]	@ (800d10c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d0fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d0fe:	60d3      	str	r3, [r2, #12]
}
 800d100:	bf00      	nop
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop
 800d10c:	58024800 	.word	0x58024800

0800d110 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b08c      	sub	sp, #48	@ 0x30
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d102      	bne.n	800d124 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	f000 bc48 	b.w	800d9b4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f003 0301 	and.w	r3, r3, #1
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f000 8088 	beq.w	800d242 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d132:	4b99      	ldr	r3, [pc, #612]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d134:	691b      	ldr	r3, [r3, #16]
 800d136:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d13a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d13c:	4b96      	ldr	r3, [pc, #600]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d13e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d140:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d144:	2b10      	cmp	r3, #16
 800d146:	d007      	beq.n	800d158 <HAL_RCC_OscConfig+0x48>
 800d148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d14a:	2b18      	cmp	r3, #24
 800d14c:	d111      	bne.n	800d172 <HAL_RCC_OscConfig+0x62>
 800d14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d150:	f003 0303 	and.w	r3, r3, #3
 800d154:	2b02      	cmp	r3, #2
 800d156:	d10c      	bne.n	800d172 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d158:	4b8f      	ldr	r3, [pc, #572]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d160:	2b00      	cmp	r3, #0
 800d162:	d06d      	beq.n	800d240 <HAL_RCC_OscConfig+0x130>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d169      	bne.n	800d240 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d16c:	2301      	movs	r3, #1
 800d16e:	f000 bc21 	b.w	800d9b4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d17a:	d106      	bne.n	800d18a <HAL_RCC_OscConfig+0x7a>
 800d17c:	4b86      	ldr	r3, [pc, #536]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a85      	ldr	r2, [pc, #532]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d186:	6013      	str	r3, [r2, #0]
 800d188:	e02e      	b.n	800d1e8 <HAL_RCC_OscConfig+0xd8>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d10c      	bne.n	800d1ac <HAL_RCC_OscConfig+0x9c>
 800d192:	4b81      	ldr	r3, [pc, #516]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4a80      	ldr	r2, [pc, #512]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d19c:	6013      	str	r3, [r2, #0]
 800d19e:	4b7e      	ldr	r3, [pc, #504]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a7d      	ldr	r2, [pc, #500]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d1a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d1a8:	6013      	str	r3, [r2, #0]
 800d1aa:	e01d      	b.n	800d1e8 <HAL_RCC_OscConfig+0xd8>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d1b4:	d10c      	bne.n	800d1d0 <HAL_RCC_OscConfig+0xc0>
 800d1b6:	4b78      	ldr	r3, [pc, #480]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a77      	ldr	r2, [pc, #476]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d1bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d1c0:	6013      	str	r3, [r2, #0]
 800d1c2:	4b75      	ldr	r3, [pc, #468]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a74      	ldr	r2, [pc, #464]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d1c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d1cc:	6013      	str	r3, [r2, #0]
 800d1ce:	e00b      	b.n	800d1e8 <HAL_RCC_OscConfig+0xd8>
 800d1d0:	4b71      	ldr	r3, [pc, #452]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a70      	ldr	r2, [pc, #448]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d1d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d1da:	6013      	str	r3, [r2, #0]
 800d1dc:	4b6e      	ldr	r3, [pc, #440]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a6d      	ldr	r2, [pc, #436]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d1e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d1e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d013      	beq.n	800d218 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1f0:	f7f6 f910 	bl	8003414 <HAL_GetTick>
 800d1f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d1f6:	e008      	b.n	800d20a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d1f8:	f7f6 f90c 	bl	8003414 <HAL_GetTick>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d200:	1ad3      	subs	r3, r2, r3
 800d202:	2b64      	cmp	r3, #100	@ 0x64
 800d204:	d901      	bls.n	800d20a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d206:	2303      	movs	r3, #3
 800d208:	e3d4      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d20a:	4b63      	ldr	r3, [pc, #396]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d212:	2b00      	cmp	r3, #0
 800d214:	d0f0      	beq.n	800d1f8 <HAL_RCC_OscConfig+0xe8>
 800d216:	e014      	b.n	800d242 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d218:	f7f6 f8fc 	bl	8003414 <HAL_GetTick>
 800d21c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d21e:	e008      	b.n	800d232 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d220:	f7f6 f8f8 	bl	8003414 <HAL_GetTick>
 800d224:	4602      	mov	r2, r0
 800d226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d228:	1ad3      	subs	r3, r2, r3
 800d22a:	2b64      	cmp	r3, #100	@ 0x64
 800d22c:	d901      	bls.n	800d232 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d22e:	2303      	movs	r3, #3
 800d230:	e3c0      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d232:	4b59      	ldr	r3, [pc, #356]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d1f0      	bne.n	800d220 <HAL_RCC_OscConfig+0x110>
 800d23e:	e000      	b.n	800d242 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f003 0302 	and.w	r3, r3, #2
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	f000 80ca 	beq.w	800d3e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d250:	4b51      	ldr	r3, [pc, #324]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d258:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d25a:	4b4f      	ldr	r3, [pc, #316]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d25c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d25e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d260:	6a3b      	ldr	r3, [r7, #32]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d007      	beq.n	800d276 <HAL_RCC_OscConfig+0x166>
 800d266:	6a3b      	ldr	r3, [r7, #32]
 800d268:	2b18      	cmp	r3, #24
 800d26a:	d156      	bne.n	800d31a <HAL_RCC_OscConfig+0x20a>
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	f003 0303 	and.w	r3, r3, #3
 800d272:	2b00      	cmp	r3, #0
 800d274:	d151      	bne.n	800d31a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d276:	4b48      	ldr	r3, [pc, #288]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f003 0304 	and.w	r3, r3, #4
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d005      	beq.n	800d28e <HAL_RCC_OscConfig+0x17e>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d101      	bne.n	800d28e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	e392      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d28e:	4b42      	ldr	r3, [pc, #264]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f023 0219 	bic.w	r2, r3, #25
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	493f      	ldr	r1, [pc, #252]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d29c:	4313      	orrs	r3, r2
 800d29e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2a0:	f7f6 f8b8 	bl	8003414 <HAL_GetTick>
 800d2a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d2a6:	e008      	b.n	800d2ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d2a8:	f7f6 f8b4 	bl	8003414 <HAL_GetTick>
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	d901      	bls.n	800d2ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d2b6:	2303      	movs	r3, #3
 800d2b8:	e37c      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d2ba:	4b37      	ldr	r3, [pc, #220]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f003 0304 	and.w	r3, r3, #4
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d0f0      	beq.n	800d2a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d2c6:	f7f6 f8d5 	bl	8003474 <HAL_GetREVID>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d817      	bhi.n	800d304 <HAL_RCC_OscConfig+0x1f4>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	691b      	ldr	r3, [r3, #16]
 800d2d8:	2b40      	cmp	r3, #64	@ 0x40
 800d2da:	d108      	bne.n	800d2ee <HAL_RCC_OscConfig+0x1de>
 800d2dc:	4b2e      	ldr	r3, [pc, #184]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d2e4:	4a2c      	ldr	r2, [pc, #176]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d2e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d2ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d2ec:	e07a      	b.n	800d3e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d2ee:	4b2a      	ldr	r3, [pc, #168]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	691b      	ldr	r3, [r3, #16]
 800d2fa:	031b      	lsls	r3, r3, #12
 800d2fc:	4926      	ldr	r1, [pc, #152]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d2fe:	4313      	orrs	r3, r2
 800d300:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d302:	e06f      	b.n	800d3e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d304:	4b24      	ldr	r3, [pc, #144]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	691b      	ldr	r3, [r3, #16]
 800d310:	061b      	lsls	r3, r3, #24
 800d312:	4921      	ldr	r1, [pc, #132]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d314:	4313      	orrs	r3, r2
 800d316:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d318:	e064      	b.n	800d3e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d047      	beq.n	800d3b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d322:	4b1d      	ldr	r3, [pc, #116]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f023 0219 	bic.w	r2, r3, #25
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	491a      	ldr	r1, [pc, #104]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d330:	4313      	orrs	r3, r2
 800d332:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d334:	f7f6 f86e 	bl	8003414 <HAL_GetTick>
 800d338:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d33a:	e008      	b.n	800d34e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d33c:	f7f6 f86a 	bl	8003414 <HAL_GetTick>
 800d340:	4602      	mov	r2, r0
 800d342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d344:	1ad3      	subs	r3, r2, r3
 800d346:	2b02      	cmp	r3, #2
 800d348:	d901      	bls.n	800d34e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d34a:	2303      	movs	r3, #3
 800d34c:	e332      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d34e:	4b12      	ldr	r3, [pc, #72]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f003 0304 	and.w	r3, r3, #4
 800d356:	2b00      	cmp	r3, #0
 800d358:	d0f0      	beq.n	800d33c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d35a:	f7f6 f88b 	bl	8003474 <HAL_GetREVID>
 800d35e:	4603      	mov	r3, r0
 800d360:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d364:	4293      	cmp	r3, r2
 800d366:	d819      	bhi.n	800d39c <HAL_RCC_OscConfig+0x28c>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	691b      	ldr	r3, [r3, #16]
 800d36c:	2b40      	cmp	r3, #64	@ 0x40
 800d36e:	d108      	bne.n	800d382 <HAL_RCC_OscConfig+0x272>
 800d370:	4b09      	ldr	r3, [pc, #36]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d378:	4a07      	ldr	r2, [pc, #28]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d37a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d37e:	6053      	str	r3, [r2, #4]
 800d380:	e030      	b.n	800d3e4 <HAL_RCC_OscConfig+0x2d4>
 800d382:	4b05      	ldr	r3, [pc, #20]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	031b      	lsls	r3, r3, #12
 800d390:	4901      	ldr	r1, [pc, #4]	@ (800d398 <HAL_RCC_OscConfig+0x288>)
 800d392:	4313      	orrs	r3, r2
 800d394:	604b      	str	r3, [r1, #4]
 800d396:	e025      	b.n	800d3e4 <HAL_RCC_OscConfig+0x2d4>
 800d398:	58024400 	.word	0x58024400
 800d39c:	4b9a      	ldr	r3, [pc, #616]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	691b      	ldr	r3, [r3, #16]
 800d3a8:	061b      	lsls	r3, r3, #24
 800d3aa:	4997      	ldr	r1, [pc, #604]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	604b      	str	r3, [r1, #4]
 800d3b0:	e018      	b.n	800d3e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d3b2:	4b95      	ldr	r3, [pc, #596]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4a94      	ldr	r2, [pc, #592]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d3b8:	f023 0301 	bic.w	r3, r3, #1
 800d3bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3be:	f7f6 f829 	bl	8003414 <HAL_GetTick>
 800d3c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d3c4:	e008      	b.n	800d3d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d3c6:	f7f6 f825 	bl	8003414 <HAL_GetTick>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ce:	1ad3      	subs	r3, r2, r3
 800d3d0:	2b02      	cmp	r3, #2
 800d3d2:	d901      	bls.n	800d3d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	e2ed      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d3d8:	4b8b      	ldr	r3, [pc, #556]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f003 0304 	and.w	r3, r3, #4
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d1f0      	bne.n	800d3c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f003 0310 	and.w	r3, r3, #16
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f000 80a9 	beq.w	800d544 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d3f2:	4b85      	ldr	r3, [pc, #532]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d3f4:	691b      	ldr	r3, [r3, #16]
 800d3f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d3fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d3fc:	4b82      	ldr	r3, [pc, #520]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d400:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	2b08      	cmp	r3, #8
 800d406:	d007      	beq.n	800d418 <HAL_RCC_OscConfig+0x308>
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	2b18      	cmp	r3, #24
 800d40c:	d13a      	bne.n	800d484 <HAL_RCC_OscConfig+0x374>
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	f003 0303 	and.w	r3, r3, #3
 800d414:	2b01      	cmp	r3, #1
 800d416:	d135      	bne.n	800d484 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d418:	4b7b      	ldr	r3, [pc, #492]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d420:	2b00      	cmp	r3, #0
 800d422:	d005      	beq.n	800d430 <HAL_RCC_OscConfig+0x320>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	69db      	ldr	r3, [r3, #28]
 800d428:	2b80      	cmp	r3, #128	@ 0x80
 800d42a:	d001      	beq.n	800d430 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800d42c:	2301      	movs	r3, #1
 800d42e:	e2c1      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d430:	f7f6 f820 	bl	8003474 <HAL_GetREVID>
 800d434:	4603      	mov	r3, r0
 800d436:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d817      	bhi.n	800d46e <HAL_RCC_OscConfig+0x35e>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6a1b      	ldr	r3, [r3, #32]
 800d442:	2b20      	cmp	r3, #32
 800d444:	d108      	bne.n	800d458 <HAL_RCC_OscConfig+0x348>
 800d446:	4b70      	ldr	r3, [pc, #448]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d44e:	4a6e      	ldr	r2, [pc, #440]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d450:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d454:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d456:	e075      	b.n	800d544 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d458:	4b6b      	ldr	r3, [pc, #428]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d45a:	685b      	ldr	r3, [r3, #4]
 800d45c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6a1b      	ldr	r3, [r3, #32]
 800d464:	069b      	lsls	r3, r3, #26
 800d466:	4968      	ldr	r1, [pc, #416]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d468:	4313      	orrs	r3, r2
 800d46a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d46c:	e06a      	b.n	800d544 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d46e:	4b66      	ldr	r3, [pc, #408]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6a1b      	ldr	r3, [r3, #32]
 800d47a:	061b      	lsls	r3, r3, #24
 800d47c:	4962      	ldr	r1, [pc, #392]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d47e:	4313      	orrs	r3, r2
 800d480:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d482:	e05f      	b.n	800d544 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	69db      	ldr	r3, [r3, #28]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d042      	beq.n	800d512 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d48c:	4b5e      	ldr	r3, [pc, #376]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4a5d      	ldr	r2, [pc, #372]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d498:	f7f5 ffbc 	bl	8003414 <HAL_GetTick>
 800d49c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d49e:	e008      	b.n	800d4b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d4a0:	f7f5 ffb8 	bl	8003414 <HAL_GetTick>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a8:	1ad3      	subs	r3, r2, r3
 800d4aa:	2b02      	cmp	r3, #2
 800d4ac:	d901      	bls.n	800d4b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800d4ae:	2303      	movs	r3, #3
 800d4b0:	e280      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d4b2:	4b55      	ldr	r3, [pc, #340]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d0f0      	beq.n	800d4a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d4be:	f7f5 ffd9 	bl	8003474 <HAL_GetREVID>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d817      	bhi.n	800d4fc <HAL_RCC_OscConfig+0x3ec>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6a1b      	ldr	r3, [r3, #32]
 800d4d0:	2b20      	cmp	r3, #32
 800d4d2:	d108      	bne.n	800d4e6 <HAL_RCC_OscConfig+0x3d6>
 800d4d4:	4b4c      	ldr	r3, [pc, #304]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d4dc:	4a4a      	ldr	r2, [pc, #296]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d4de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d4e2:	6053      	str	r3, [r2, #4]
 800d4e4:	e02e      	b.n	800d544 <HAL_RCC_OscConfig+0x434>
 800d4e6:	4b48      	ldr	r3, [pc, #288]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6a1b      	ldr	r3, [r3, #32]
 800d4f2:	069b      	lsls	r3, r3, #26
 800d4f4:	4944      	ldr	r1, [pc, #272]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	604b      	str	r3, [r1, #4]
 800d4fa:	e023      	b.n	800d544 <HAL_RCC_OscConfig+0x434>
 800d4fc:	4b42      	ldr	r3, [pc, #264]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6a1b      	ldr	r3, [r3, #32]
 800d508:	061b      	lsls	r3, r3, #24
 800d50a:	493f      	ldr	r1, [pc, #252]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d50c:	4313      	orrs	r3, r2
 800d50e:	60cb      	str	r3, [r1, #12]
 800d510:	e018      	b.n	800d544 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d512:	4b3d      	ldr	r3, [pc, #244]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	4a3c      	ldr	r2, [pc, #240]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d518:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d51c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d51e:	f7f5 ff79 	bl	8003414 <HAL_GetTick>
 800d522:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d524:	e008      	b.n	800d538 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d526:	f7f5 ff75 	bl	8003414 <HAL_GetTick>
 800d52a:	4602      	mov	r2, r0
 800d52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d52e:	1ad3      	subs	r3, r2, r3
 800d530:	2b02      	cmp	r3, #2
 800d532:	d901      	bls.n	800d538 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d534:	2303      	movs	r3, #3
 800d536:	e23d      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d538:	4b33      	ldr	r3, [pc, #204]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d540:	2b00      	cmp	r3, #0
 800d542:	d1f0      	bne.n	800d526 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f003 0308 	and.w	r3, r3, #8
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d036      	beq.n	800d5be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	695b      	ldr	r3, [r3, #20]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d019      	beq.n	800d58c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d558:	4b2b      	ldr	r3, [pc, #172]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d55a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d55c:	4a2a      	ldr	r2, [pc, #168]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d55e:	f043 0301 	orr.w	r3, r3, #1
 800d562:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d564:	f7f5 ff56 	bl	8003414 <HAL_GetTick>
 800d568:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d56a:	e008      	b.n	800d57e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d56c:	f7f5 ff52 	bl	8003414 <HAL_GetTick>
 800d570:	4602      	mov	r2, r0
 800d572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d574:	1ad3      	subs	r3, r2, r3
 800d576:	2b02      	cmp	r3, #2
 800d578:	d901      	bls.n	800d57e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800d57a:	2303      	movs	r3, #3
 800d57c:	e21a      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d57e:	4b22      	ldr	r3, [pc, #136]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d582:	f003 0302 	and.w	r3, r3, #2
 800d586:	2b00      	cmp	r3, #0
 800d588:	d0f0      	beq.n	800d56c <HAL_RCC_OscConfig+0x45c>
 800d58a:	e018      	b.n	800d5be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d58c:	4b1e      	ldr	r3, [pc, #120]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d58e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d590:	4a1d      	ldr	r2, [pc, #116]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d592:	f023 0301 	bic.w	r3, r3, #1
 800d596:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d598:	f7f5 ff3c 	bl	8003414 <HAL_GetTick>
 800d59c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d59e:	e008      	b.n	800d5b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d5a0:	f7f5 ff38 	bl	8003414 <HAL_GetTick>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a8:	1ad3      	subs	r3, r2, r3
 800d5aa:	2b02      	cmp	r3, #2
 800d5ac:	d901      	bls.n	800d5b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800d5ae:	2303      	movs	r3, #3
 800d5b0:	e200      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d5b2:	4b15      	ldr	r3, [pc, #84]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d5b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5b6:	f003 0302 	and.w	r3, r3, #2
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1f0      	bne.n	800d5a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f003 0320 	and.w	r3, r3, #32
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d039      	beq.n	800d63e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	699b      	ldr	r3, [r3, #24]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d01c      	beq.n	800d60c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d5d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a0c      	ldr	r2, [pc, #48]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d5d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d5dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d5de:	f7f5 ff19 	bl	8003414 <HAL_GetTick>
 800d5e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d5e4:	e008      	b.n	800d5f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d5e6:	f7f5 ff15 	bl	8003414 <HAL_GetTick>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	2b02      	cmp	r3, #2
 800d5f2:	d901      	bls.n	800d5f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d5f4:	2303      	movs	r3, #3
 800d5f6:	e1dd      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d5f8:	4b03      	ldr	r3, [pc, #12]	@ (800d608 <HAL_RCC_OscConfig+0x4f8>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d600:	2b00      	cmp	r3, #0
 800d602:	d0f0      	beq.n	800d5e6 <HAL_RCC_OscConfig+0x4d6>
 800d604:	e01b      	b.n	800d63e <HAL_RCC_OscConfig+0x52e>
 800d606:	bf00      	nop
 800d608:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d60c:	4b9b      	ldr	r3, [pc, #620]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a9a      	ldr	r2, [pc, #616]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d612:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d616:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d618:	f7f5 fefc 	bl	8003414 <HAL_GetTick>
 800d61c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d61e:	e008      	b.n	800d632 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d620:	f7f5 fef8 	bl	8003414 <HAL_GetTick>
 800d624:	4602      	mov	r2, r0
 800d626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d628:	1ad3      	subs	r3, r2, r3
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	d901      	bls.n	800d632 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800d62e:	2303      	movs	r3, #3
 800d630:	e1c0      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d632:	4b92      	ldr	r3, [pc, #584]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d1f0      	bne.n	800d620 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f003 0304 	and.w	r3, r3, #4
 800d646:	2b00      	cmp	r3, #0
 800d648:	f000 8081 	beq.w	800d74e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d64c:	4b8c      	ldr	r3, [pc, #560]	@ (800d880 <HAL_RCC_OscConfig+0x770>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a8b      	ldr	r2, [pc, #556]	@ (800d880 <HAL_RCC_OscConfig+0x770>)
 800d652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d656:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d658:	f7f5 fedc 	bl	8003414 <HAL_GetTick>
 800d65c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d65e:	e008      	b.n	800d672 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d660:	f7f5 fed8 	bl	8003414 <HAL_GetTick>
 800d664:	4602      	mov	r2, r0
 800d666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d668:	1ad3      	subs	r3, r2, r3
 800d66a:	2b64      	cmp	r3, #100	@ 0x64
 800d66c:	d901      	bls.n	800d672 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800d66e:	2303      	movs	r3, #3
 800d670:	e1a0      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d672:	4b83      	ldr	r3, [pc, #524]	@ (800d880 <HAL_RCC_OscConfig+0x770>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d0f0      	beq.n	800d660 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	2b01      	cmp	r3, #1
 800d684:	d106      	bne.n	800d694 <HAL_RCC_OscConfig+0x584>
 800d686:	4b7d      	ldr	r3, [pc, #500]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d68a:	4a7c      	ldr	r2, [pc, #496]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d68c:	f043 0301 	orr.w	r3, r3, #1
 800d690:	6713      	str	r3, [r2, #112]	@ 0x70
 800d692:	e02d      	b.n	800d6f0 <HAL_RCC_OscConfig+0x5e0>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d10c      	bne.n	800d6b6 <HAL_RCC_OscConfig+0x5a6>
 800d69c:	4b77      	ldr	r3, [pc, #476]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d69e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6a0:	4a76      	ldr	r2, [pc, #472]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d6a2:	f023 0301 	bic.w	r3, r3, #1
 800d6a6:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6a8:	4b74      	ldr	r3, [pc, #464]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d6aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6ac:	4a73      	ldr	r2, [pc, #460]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d6ae:	f023 0304 	bic.w	r3, r3, #4
 800d6b2:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6b4:	e01c      	b.n	800d6f0 <HAL_RCC_OscConfig+0x5e0>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	689b      	ldr	r3, [r3, #8]
 800d6ba:	2b05      	cmp	r3, #5
 800d6bc:	d10c      	bne.n	800d6d8 <HAL_RCC_OscConfig+0x5c8>
 800d6be:	4b6f      	ldr	r3, [pc, #444]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d6c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6c2:	4a6e      	ldr	r2, [pc, #440]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d6c4:	f043 0304 	orr.w	r3, r3, #4
 800d6c8:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6ca:	4b6c      	ldr	r3, [pc, #432]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d6cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6ce:	4a6b      	ldr	r2, [pc, #428]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d6d0:	f043 0301 	orr.w	r3, r3, #1
 800d6d4:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6d6:	e00b      	b.n	800d6f0 <HAL_RCC_OscConfig+0x5e0>
 800d6d8:	4b68      	ldr	r3, [pc, #416]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d6da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6dc:	4a67      	ldr	r2, [pc, #412]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d6de:	f023 0301 	bic.w	r3, r3, #1
 800d6e2:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6e4:	4b65      	ldr	r3, [pc, #404]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d6e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6e8:	4a64      	ldr	r2, [pc, #400]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d6ea:	f023 0304 	bic.w	r3, r3, #4
 800d6ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d015      	beq.n	800d724 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d6f8:	f7f5 fe8c 	bl	8003414 <HAL_GetTick>
 800d6fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d6fe:	e00a      	b.n	800d716 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d700:	f7f5 fe88 	bl	8003414 <HAL_GetTick>
 800d704:	4602      	mov	r2, r0
 800d706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d708:	1ad3      	subs	r3, r2, r3
 800d70a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d70e:	4293      	cmp	r3, r2
 800d710:	d901      	bls.n	800d716 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800d712:	2303      	movs	r3, #3
 800d714:	e14e      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d716:	4b59      	ldr	r3, [pc, #356]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d71a:	f003 0302 	and.w	r3, r3, #2
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d0ee      	beq.n	800d700 <HAL_RCC_OscConfig+0x5f0>
 800d722:	e014      	b.n	800d74e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d724:	f7f5 fe76 	bl	8003414 <HAL_GetTick>
 800d728:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d72a:	e00a      	b.n	800d742 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d72c:	f7f5 fe72 	bl	8003414 <HAL_GetTick>
 800d730:	4602      	mov	r2, r0
 800d732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d734:	1ad3      	subs	r3, r2, r3
 800d736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d901      	bls.n	800d742 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800d73e:	2303      	movs	r3, #3
 800d740:	e138      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d742:	4b4e      	ldr	r3, [pc, #312]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d746:	f003 0302 	and.w	r3, r3, #2
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d1ee      	bne.n	800d72c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d752:	2b00      	cmp	r3, #0
 800d754:	f000 812d 	beq.w	800d9b2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d758:	4b48      	ldr	r3, [pc, #288]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d75a:	691b      	ldr	r3, [r3, #16]
 800d75c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d760:	2b18      	cmp	r3, #24
 800d762:	f000 80bd 	beq.w	800d8e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d76a:	2b02      	cmp	r3, #2
 800d76c:	f040 809e 	bne.w	800d8ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d770:	4b42      	ldr	r3, [pc, #264]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4a41      	ldr	r2, [pc, #260]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d776:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d77a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d77c:	f7f5 fe4a 	bl	8003414 <HAL_GetTick>
 800d780:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d782:	e008      	b.n	800d796 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d784:	f7f5 fe46 	bl	8003414 <HAL_GetTick>
 800d788:	4602      	mov	r2, r0
 800d78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d78c:	1ad3      	subs	r3, r2, r3
 800d78e:	2b02      	cmp	r3, #2
 800d790:	d901      	bls.n	800d796 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800d792:	2303      	movs	r3, #3
 800d794:	e10e      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d796:	4b39      	ldr	r3, [pc, #228]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1f0      	bne.n	800d784 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d7a2:	4b36      	ldr	r3, [pc, #216]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d7a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d7a6:	4b37      	ldr	r3, [pc, #220]	@ (800d884 <HAL_RCC_OscConfig+0x774>)
 800d7a8:	4013      	ands	r3, r2
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d7b2:	0112      	lsls	r2, r2, #4
 800d7b4:	430a      	orrs	r2, r1
 800d7b6:	4931      	ldr	r1, [pc, #196]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	628b      	str	r3, [r1, #40]	@ 0x28
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7c0:	3b01      	subs	r3, #1
 800d7c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7ca:	3b01      	subs	r3, #1
 800d7cc:	025b      	lsls	r3, r3, #9
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	431a      	orrs	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	041b      	lsls	r3, r3, #16
 800d7da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d7de:	431a      	orrs	r2, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	061b      	lsls	r3, r3, #24
 800d7e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d7ec:	4923      	ldr	r1, [pc, #140]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d7f2:	4b22      	ldr	r3, [pc, #136]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7f6:	4a21      	ldr	r2, [pc, #132]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d7f8:	f023 0301 	bic.w	r3, r3, #1
 800d7fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d7fe:	4b1f      	ldr	r3, [pc, #124]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d802:	4b21      	ldr	r3, [pc, #132]	@ (800d888 <HAL_RCC_OscConfig+0x778>)
 800d804:	4013      	ands	r3, r2
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d80a:	00d2      	lsls	r2, r2, #3
 800d80c:	491b      	ldr	r1, [pc, #108]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d80e:	4313      	orrs	r3, r2
 800d810:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d812:	4b1a      	ldr	r3, [pc, #104]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d816:	f023 020c 	bic.w	r2, r3, #12
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d81e:	4917      	ldr	r1, [pc, #92]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d820:	4313      	orrs	r3, r2
 800d822:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d824:	4b15      	ldr	r3, [pc, #84]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d828:	f023 0202 	bic.w	r2, r3, #2
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d830:	4912      	ldr	r1, [pc, #72]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d832:	4313      	orrs	r3, r2
 800d834:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d836:	4b11      	ldr	r3, [pc, #68]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d83a:	4a10      	ldr	r2, [pc, #64]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d83c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d840:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d842:	4b0e      	ldr	r3, [pc, #56]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d846:	4a0d      	ldr	r2, [pc, #52]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d84c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d84e:	4b0b      	ldr	r3, [pc, #44]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d852:	4a0a      	ldr	r2, [pc, #40]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d854:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d858:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d85a:	4b08      	ldr	r3, [pc, #32]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d85e:	4a07      	ldr	r2, [pc, #28]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d860:	f043 0301 	orr.w	r3, r3, #1
 800d864:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d866:	4b05      	ldr	r3, [pc, #20]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a04      	ldr	r2, [pc, #16]	@ (800d87c <HAL_RCC_OscConfig+0x76c>)
 800d86c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d872:	f7f5 fdcf 	bl	8003414 <HAL_GetTick>
 800d876:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d878:	e011      	b.n	800d89e <HAL_RCC_OscConfig+0x78e>
 800d87a:	bf00      	nop
 800d87c:	58024400 	.word	0x58024400
 800d880:	58024800 	.word	0x58024800
 800d884:	fffffc0c 	.word	0xfffffc0c
 800d888:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d88c:	f7f5 fdc2 	bl	8003414 <HAL_GetTick>
 800d890:	4602      	mov	r2, r0
 800d892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	2b02      	cmp	r3, #2
 800d898:	d901      	bls.n	800d89e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d89a:	2303      	movs	r3, #3
 800d89c:	e08a      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d89e:	4b47      	ldr	r3, [pc, #284]	@ (800d9bc <HAL_RCC_OscConfig+0x8ac>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d0f0      	beq.n	800d88c <HAL_RCC_OscConfig+0x77c>
 800d8aa:	e082      	b.n	800d9b2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d8ac:	4b43      	ldr	r3, [pc, #268]	@ (800d9bc <HAL_RCC_OscConfig+0x8ac>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a42      	ldr	r2, [pc, #264]	@ (800d9bc <HAL_RCC_OscConfig+0x8ac>)
 800d8b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d8b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8b8:	f7f5 fdac 	bl	8003414 <HAL_GetTick>
 800d8bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d8be:	e008      	b.n	800d8d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d8c0:	f7f5 fda8 	bl	8003414 <HAL_GetTick>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d901      	bls.n	800d8d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d8ce:	2303      	movs	r3, #3
 800d8d0:	e070      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d8d2:	4b3a      	ldr	r3, [pc, #232]	@ (800d9bc <HAL_RCC_OscConfig+0x8ac>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1f0      	bne.n	800d8c0 <HAL_RCC_OscConfig+0x7b0>
 800d8de:	e068      	b.n	800d9b2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d8e0:	4b36      	ldr	r3, [pc, #216]	@ (800d9bc <HAL_RCC_OscConfig+0x8ac>)
 800d8e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d8e6:	4b35      	ldr	r3, [pc, #212]	@ (800d9bc <HAL_RCC_OscConfig+0x8ac>)
 800d8e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d031      	beq.n	800d958 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	f003 0203 	and.w	r2, r3, #3
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d12a      	bne.n	800d958 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	091b      	lsrs	r3, r3, #4
 800d906:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d90e:	429a      	cmp	r2, r3
 800d910:	d122      	bne.n	800d958 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d91c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d91e:	429a      	cmp	r2, r3
 800d920:	d11a      	bne.n	800d958 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	0a5b      	lsrs	r3, r3, #9
 800d926:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d92e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d930:	429a      	cmp	r2, r3
 800d932:	d111      	bne.n	800d958 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	0c1b      	lsrs	r3, r3, #16
 800d938:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d940:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d942:	429a      	cmp	r2, r3
 800d944:	d108      	bne.n	800d958 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	0e1b      	lsrs	r3, r3, #24
 800d94a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d952:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d954:	429a      	cmp	r2, r3
 800d956:	d001      	beq.n	800d95c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d958:	2301      	movs	r3, #1
 800d95a:	e02b      	b.n	800d9b4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d95c:	4b17      	ldr	r3, [pc, #92]	@ (800d9bc <HAL_RCC_OscConfig+0x8ac>)
 800d95e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d960:	08db      	lsrs	r3, r3, #3
 800d962:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d966:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d96c:	693a      	ldr	r2, [r7, #16]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d01f      	beq.n	800d9b2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d972:	4b12      	ldr	r3, [pc, #72]	@ (800d9bc <HAL_RCC_OscConfig+0x8ac>)
 800d974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d976:	4a11      	ldr	r2, [pc, #68]	@ (800d9bc <HAL_RCC_OscConfig+0x8ac>)
 800d978:	f023 0301 	bic.w	r3, r3, #1
 800d97c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d97e:	f7f5 fd49 	bl	8003414 <HAL_GetTick>
 800d982:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d984:	bf00      	nop
 800d986:	f7f5 fd45 	bl	8003414 <HAL_GetTick>
 800d98a:	4602      	mov	r2, r0
 800d98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d98e:	4293      	cmp	r3, r2
 800d990:	d0f9      	beq.n	800d986 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d992:	4b0a      	ldr	r3, [pc, #40]	@ (800d9bc <HAL_RCC_OscConfig+0x8ac>)
 800d994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d996:	4b0a      	ldr	r3, [pc, #40]	@ (800d9c0 <HAL_RCC_OscConfig+0x8b0>)
 800d998:	4013      	ands	r3, r2
 800d99a:	687a      	ldr	r2, [r7, #4]
 800d99c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d99e:	00d2      	lsls	r2, r2, #3
 800d9a0:	4906      	ldr	r1, [pc, #24]	@ (800d9bc <HAL_RCC_OscConfig+0x8ac>)
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d9a6:	4b05      	ldr	r3, [pc, #20]	@ (800d9bc <HAL_RCC_OscConfig+0x8ac>)
 800d9a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9aa:	4a04      	ldr	r2, [pc, #16]	@ (800d9bc <HAL_RCC_OscConfig+0x8ac>)
 800d9ac:	f043 0301 	orr.w	r3, r3, #1
 800d9b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3730      	adds	r7, #48	@ 0x30
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	58024400 	.word	0x58024400
 800d9c0:	ffff0007 	.word	0xffff0007

0800d9c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d101      	bne.n	800d9d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	e19c      	b.n	800dd12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d9d8:	4b8a      	ldr	r3, [pc, #552]	@ (800dc04 <HAL_RCC_ClockConfig+0x240>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f003 030f 	and.w	r3, r3, #15
 800d9e0:	683a      	ldr	r2, [r7, #0]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d910      	bls.n	800da08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d9e6:	4b87      	ldr	r3, [pc, #540]	@ (800dc04 <HAL_RCC_ClockConfig+0x240>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f023 020f 	bic.w	r2, r3, #15
 800d9ee:	4985      	ldr	r1, [pc, #532]	@ (800dc04 <HAL_RCC_ClockConfig+0x240>)
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d9f6:	4b83      	ldr	r3, [pc, #524]	@ (800dc04 <HAL_RCC_ClockConfig+0x240>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f003 030f 	and.w	r3, r3, #15
 800d9fe:	683a      	ldr	r2, [r7, #0]
 800da00:	429a      	cmp	r2, r3
 800da02:	d001      	beq.n	800da08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800da04:	2301      	movs	r3, #1
 800da06:	e184      	b.n	800dd12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f003 0304 	and.w	r3, r3, #4
 800da10:	2b00      	cmp	r3, #0
 800da12:	d010      	beq.n	800da36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	691a      	ldr	r2, [r3, #16]
 800da18:	4b7b      	ldr	r3, [pc, #492]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800da1a:	699b      	ldr	r3, [r3, #24]
 800da1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800da20:	429a      	cmp	r2, r3
 800da22:	d908      	bls.n	800da36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800da24:	4b78      	ldr	r3, [pc, #480]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800da26:	699b      	ldr	r3, [r3, #24]
 800da28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	691b      	ldr	r3, [r3, #16]
 800da30:	4975      	ldr	r1, [pc, #468]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800da32:	4313      	orrs	r3, r2
 800da34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f003 0308 	and.w	r3, r3, #8
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d010      	beq.n	800da64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	695a      	ldr	r2, [r3, #20]
 800da46:	4b70      	ldr	r3, [pc, #448]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800da48:	69db      	ldr	r3, [r3, #28]
 800da4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800da4e:	429a      	cmp	r2, r3
 800da50:	d908      	bls.n	800da64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800da52:	4b6d      	ldr	r3, [pc, #436]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800da54:	69db      	ldr	r3, [r3, #28]
 800da56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	695b      	ldr	r3, [r3, #20]
 800da5e:	496a      	ldr	r1, [pc, #424]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800da60:	4313      	orrs	r3, r2
 800da62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f003 0310 	and.w	r3, r3, #16
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d010      	beq.n	800da92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	699a      	ldr	r2, [r3, #24]
 800da74:	4b64      	ldr	r3, [pc, #400]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800da76:	69db      	ldr	r3, [r3, #28]
 800da78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d908      	bls.n	800da92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800da80:	4b61      	ldr	r3, [pc, #388]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800da82:	69db      	ldr	r3, [r3, #28]
 800da84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	699b      	ldr	r3, [r3, #24]
 800da8c:	495e      	ldr	r1, [pc, #376]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800da8e:	4313      	orrs	r3, r2
 800da90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f003 0320 	and.w	r3, r3, #32
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d010      	beq.n	800dac0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	69da      	ldr	r2, [r3, #28]
 800daa2:	4b59      	ldr	r3, [pc, #356]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800daa4:	6a1b      	ldr	r3, [r3, #32]
 800daa6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800daaa:	429a      	cmp	r2, r3
 800daac:	d908      	bls.n	800dac0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800daae:	4b56      	ldr	r3, [pc, #344]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800dab0:	6a1b      	ldr	r3, [r3, #32]
 800dab2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	69db      	ldr	r3, [r3, #28]
 800daba:	4953      	ldr	r1, [pc, #332]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800dabc:	4313      	orrs	r3, r2
 800dabe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f003 0302 	and.w	r3, r3, #2
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d010      	beq.n	800daee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	68da      	ldr	r2, [r3, #12]
 800dad0:	4b4d      	ldr	r3, [pc, #308]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800dad2:	699b      	ldr	r3, [r3, #24]
 800dad4:	f003 030f 	and.w	r3, r3, #15
 800dad8:	429a      	cmp	r2, r3
 800dada:	d908      	bls.n	800daee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dadc:	4b4a      	ldr	r3, [pc, #296]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800dade:	699b      	ldr	r3, [r3, #24]
 800dae0:	f023 020f 	bic.w	r2, r3, #15
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	4947      	ldr	r1, [pc, #284]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800daea:	4313      	orrs	r3, r2
 800daec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f003 0301 	and.w	r3, r3, #1
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d055      	beq.n	800dba6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800dafa:	4b43      	ldr	r3, [pc, #268]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800dafc:	699b      	ldr	r3, [r3, #24]
 800dafe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	4940      	ldr	r1, [pc, #256]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800db08:	4313      	orrs	r3, r2
 800db0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	2b02      	cmp	r3, #2
 800db12:	d107      	bne.n	800db24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800db14:	4b3c      	ldr	r3, [pc, #240]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d121      	bne.n	800db64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800db20:	2301      	movs	r3, #1
 800db22:	e0f6      	b.n	800dd12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	2b03      	cmp	r3, #3
 800db2a:	d107      	bne.n	800db3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800db2c:	4b36      	ldr	r3, [pc, #216]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db34:	2b00      	cmp	r3, #0
 800db36:	d115      	bne.n	800db64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800db38:	2301      	movs	r3, #1
 800db3a:	e0ea      	b.n	800dd12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	2b01      	cmp	r3, #1
 800db42:	d107      	bne.n	800db54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800db44:	4b30      	ldr	r3, [pc, #192]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d109      	bne.n	800db64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800db50:	2301      	movs	r3, #1
 800db52:	e0de      	b.n	800dd12 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800db54:	4b2c      	ldr	r3, [pc, #176]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f003 0304 	and.w	r3, r3, #4
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d101      	bne.n	800db64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800db60:	2301      	movs	r3, #1
 800db62:	e0d6      	b.n	800dd12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800db64:	4b28      	ldr	r3, [pc, #160]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800db66:	691b      	ldr	r3, [r3, #16]
 800db68:	f023 0207 	bic.w	r2, r3, #7
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	4925      	ldr	r1, [pc, #148]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800db72:	4313      	orrs	r3, r2
 800db74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db76:	f7f5 fc4d 	bl	8003414 <HAL_GetTick>
 800db7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db7c:	e00a      	b.n	800db94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800db7e:	f7f5 fc49 	bl	8003414 <HAL_GetTick>
 800db82:	4602      	mov	r2, r0
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	1ad3      	subs	r3, r2, r3
 800db88:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d901      	bls.n	800db94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800db90:	2303      	movs	r3, #3
 800db92:	e0be      	b.n	800dd12 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db94:	4b1c      	ldr	r3, [pc, #112]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800db96:	691b      	ldr	r3, [r3, #16]
 800db98:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	00db      	lsls	r3, r3, #3
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d1eb      	bne.n	800db7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f003 0302 	and.w	r3, r3, #2
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d010      	beq.n	800dbd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	68da      	ldr	r2, [r3, #12]
 800dbb6:	4b14      	ldr	r3, [pc, #80]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800dbb8:	699b      	ldr	r3, [r3, #24]
 800dbba:	f003 030f 	and.w	r3, r3, #15
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d208      	bcs.n	800dbd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dbc2:	4b11      	ldr	r3, [pc, #68]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800dbc4:	699b      	ldr	r3, [r3, #24]
 800dbc6:	f023 020f 	bic.w	r2, r3, #15
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	490e      	ldr	r1, [pc, #56]	@ (800dc08 <HAL_RCC_ClockConfig+0x244>)
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dbd4:	4b0b      	ldr	r3, [pc, #44]	@ (800dc04 <HAL_RCC_ClockConfig+0x240>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f003 030f 	and.w	r3, r3, #15
 800dbdc:	683a      	ldr	r2, [r7, #0]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d214      	bcs.n	800dc0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dbe2:	4b08      	ldr	r3, [pc, #32]	@ (800dc04 <HAL_RCC_ClockConfig+0x240>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f023 020f 	bic.w	r2, r3, #15
 800dbea:	4906      	ldr	r1, [pc, #24]	@ (800dc04 <HAL_RCC_ClockConfig+0x240>)
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dbf2:	4b04      	ldr	r3, [pc, #16]	@ (800dc04 <HAL_RCC_ClockConfig+0x240>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f003 030f 	and.w	r3, r3, #15
 800dbfa:	683a      	ldr	r2, [r7, #0]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d005      	beq.n	800dc0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800dc00:	2301      	movs	r3, #1
 800dc02:	e086      	b.n	800dd12 <HAL_RCC_ClockConfig+0x34e>
 800dc04:	52002000 	.word	0x52002000
 800dc08:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f003 0304 	and.w	r3, r3, #4
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d010      	beq.n	800dc3a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	691a      	ldr	r2, [r3, #16]
 800dc1c:	4b3f      	ldr	r3, [pc, #252]	@ (800dd1c <HAL_RCC_ClockConfig+0x358>)
 800dc1e:	699b      	ldr	r3, [r3, #24]
 800dc20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d208      	bcs.n	800dc3a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dc28:	4b3c      	ldr	r3, [pc, #240]	@ (800dd1c <HAL_RCC_ClockConfig+0x358>)
 800dc2a:	699b      	ldr	r3, [r3, #24]
 800dc2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	4939      	ldr	r1, [pc, #228]	@ (800dd1c <HAL_RCC_ClockConfig+0x358>)
 800dc36:	4313      	orrs	r3, r2
 800dc38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f003 0308 	and.w	r3, r3, #8
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d010      	beq.n	800dc68 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	695a      	ldr	r2, [r3, #20]
 800dc4a:	4b34      	ldr	r3, [pc, #208]	@ (800dd1c <HAL_RCC_ClockConfig+0x358>)
 800dc4c:	69db      	ldr	r3, [r3, #28]
 800dc4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d208      	bcs.n	800dc68 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dc56:	4b31      	ldr	r3, [pc, #196]	@ (800dd1c <HAL_RCC_ClockConfig+0x358>)
 800dc58:	69db      	ldr	r3, [r3, #28]
 800dc5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	695b      	ldr	r3, [r3, #20]
 800dc62:	492e      	ldr	r1, [pc, #184]	@ (800dd1c <HAL_RCC_ClockConfig+0x358>)
 800dc64:	4313      	orrs	r3, r2
 800dc66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f003 0310 	and.w	r3, r3, #16
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d010      	beq.n	800dc96 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	699a      	ldr	r2, [r3, #24]
 800dc78:	4b28      	ldr	r3, [pc, #160]	@ (800dd1c <HAL_RCC_ClockConfig+0x358>)
 800dc7a:	69db      	ldr	r3, [r3, #28]
 800dc7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d208      	bcs.n	800dc96 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dc84:	4b25      	ldr	r3, [pc, #148]	@ (800dd1c <HAL_RCC_ClockConfig+0x358>)
 800dc86:	69db      	ldr	r3, [r3, #28]
 800dc88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	699b      	ldr	r3, [r3, #24]
 800dc90:	4922      	ldr	r1, [pc, #136]	@ (800dd1c <HAL_RCC_ClockConfig+0x358>)
 800dc92:	4313      	orrs	r3, r2
 800dc94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f003 0320 	and.w	r3, r3, #32
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d010      	beq.n	800dcc4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	69da      	ldr	r2, [r3, #28]
 800dca6:	4b1d      	ldr	r3, [pc, #116]	@ (800dd1c <HAL_RCC_ClockConfig+0x358>)
 800dca8:	6a1b      	ldr	r3, [r3, #32]
 800dcaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d208      	bcs.n	800dcc4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800dcb2:	4b1a      	ldr	r3, [pc, #104]	@ (800dd1c <HAL_RCC_ClockConfig+0x358>)
 800dcb4:	6a1b      	ldr	r3, [r3, #32]
 800dcb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	69db      	ldr	r3, [r3, #28]
 800dcbe:	4917      	ldr	r1, [pc, #92]	@ (800dd1c <HAL_RCC_ClockConfig+0x358>)
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dcc4:	f000 f834 	bl	800dd30 <HAL_RCC_GetSysClockFreq>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	4b14      	ldr	r3, [pc, #80]	@ (800dd1c <HAL_RCC_ClockConfig+0x358>)
 800dccc:	699b      	ldr	r3, [r3, #24]
 800dcce:	0a1b      	lsrs	r3, r3, #8
 800dcd0:	f003 030f 	and.w	r3, r3, #15
 800dcd4:	4912      	ldr	r1, [pc, #72]	@ (800dd20 <HAL_RCC_ClockConfig+0x35c>)
 800dcd6:	5ccb      	ldrb	r3, [r1, r3]
 800dcd8:	f003 031f 	and.w	r3, r3, #31
 800dcdc:	fa22 f303 	lsr.w	r3, r2, r3
 800dce0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dce2:	4b0e      	ldr	r3, [pc, #56]	@ (800dd1c <HAL_RCC_ClockConfig+0x358>)
 800dce4:	699b      	ldr	r3, [r3, #24]
 800dce6:	f003 030f 	and.w	r3, r3, #15
 800dcea:	4a0d      	ldr	r2, [pc, #52]	@ (800dd20 <HAL_RCC_ClockConfig+0x35c>)
 800dcec:	5cd3      	ldrb	r3, [r2, r3]
 800dcee:	f003 031f 	and.w	r3, r3, #31
 800dcf2:	693a      	ldr	r2, [r7, #16]
 800dcf4:	fa22 f303 	lsr.w	r3, r2, r3
 800dcf8:	4a0a      	ldr	r2, [pc, #40]	@ (800dd24 <HAL_RCC_ClockConfig+0x360>)
 800dcfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dcfc:	4a0a      	ldr	r2, [pc, #40]	@ (800dd28 <HAL_RCC_ClockConfig+0x364>)
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800dd02:	4b0a      	ldr	r3, [pc, #40]	@ (800dd2c <HAL_RCC_ClockConfig+0x368>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7f5 fb3a 	bl	8003380 <HAL_InitTick>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800dd10:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3718      	adds	r7, #24
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	58024400 	.word	0x58024400
 800dd20:	0801b31c 	.word	0x0801b31c
 800dd24:	2400001c 	.word	0x2400001c
 800dd28:	24000018 	.word	0x24000018
 800dd2c:	24000020 	.word	0x24000020

0800dd30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b089      	sub	sp, #36	@ 0x24
 800dd34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dd36:	4bb3      	ldr	r3, [pc, #716]	@ (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd38:	691b      	ldr	r3, [r3, #16]
 800dd3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dd3e:	2b18      	cmp	r3, #24
 800dd40:	f200 8155 	bhi.w	800dfee <HAL_RCC_GetSysClockFreq+0x2be>
 800dd44:	a201      	add	r2, pc, #4	@ (adr r2, 800dd4c <HAL_RCC_GetSysClockFreq+0x1c>)
 800dd46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd4a:	bf00      	nop
 800dd4c:	0800ddb1 	.word	0x0800ddb1
 800dd50:	0800dfef 	.word	0x0800dfef
 800dd54:	0800dfef 	.word	0x0800dfef
 800dd58:	0800dfef 	.word	0x0800dfef
 800dd5c:	0800dfef 	.word	0x0800dfef
 800dd60:	0800dfef 	.word	0x0800dfef
 800dd64:	0800dfef 	.word	0x0800dfef
 800dd68:	0800dfef 	.word	0x0800dfef
 800dd6c:	0800ddd7 	.word	0x0800ddd7
 800dd70:	0800dfef 	.word	0x0800dfef
 800dd74:	0800dfef 	.word	0x0800dfef
 800dd78:	0800dfef 	.word	0x0800dfef
 800dd7c:	0800dfef 	.word	0x0800dfef
 800dd80:	0800dfef 	.word	0x0800dfef
 800dd84:	0800dfef 	.word	0x0800dfef
 800dd88:	0800dfef 	.word	0x0800dfef
 800dd8c:	0800dddd 	.word	0x0800dddd
 800dd90:	0800dfef 	.word	0x0800dfef
 800dd94:	0800dfef 	.word	0x0800dfef
 800dd98:	0800dfef 	.word	0x0800dfef
 800dd9c:	0800dfef 	.word	0x0800dfef
 800dda0:	0800dfef 	.word	0x0800dfef
 800dda4:	0800dfef 	.word	0x0800dfef
 800dda8:	0800dfef 	.word	0x0800dfef
 800ddac:	0800dde3 	.word	0x0800dde3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddb0:	4b94      	ldr	r3, [pc, #592]	@ (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f003 0320 	and.w	r3, r3, #32
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d009      	beq.n	800ddd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ddbc:	4b91      	ldr	r3, [pc, #580]	@ (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	08db      	lsrs	r3, r3, #3
 800ddc2:	f003 0303 	and.w	r3, r3, #3
 800ddc6:	4a90      	ldr	r2, [pc, #576]	@ (800e008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ddc8:	fa22 f303 	lsr.w	r3, r2, r3
 800ddcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ddce:	e111      	b.n	800dff4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ddd0:	4b8d      	ldr	r3, [pc, #564]	@ (800e008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ddd2:	61bb      	str	r3, [r7, #24]
      break;
 800ddd4:	e10e      	b.n	800dff4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ddd6:	4b8d      	ldr	r3, [pc, #564]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ddd8:	61bb      	str	r3, [r7, #24]
      break;
 800ddda:	e10b      	b.n	800dff4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800dddc:	4b8c      	ldr	r3, [pc, #560]	@ (800e010 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ddde:	61bb      	str	r3, [r7, #24]
      break;
 800dde0:	e108      	b.n	800dff4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dde2:	4b88      	ldr	r3, [pc, #544]	@ (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dde4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dde6:	f003 0303 	and.w	r3, r3, #3
 800ddea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ddec:	4b85      	ldr	r3, [pc, #532]	@ (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddf0:	091b      	lsrs	r3, r3, #4
 800ddf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ddf6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ddf8:	4b82      	ldr	r3, [pc, #520]	@ (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddfc:	f003 0301 	and.w	r3, r3, #1
 800de00:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800de02:	4b80      	ldr	r3, [pc, #512]	@ (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de06:	08db      	lsrs	r3, r3, #3
 800de08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de0c:	68fa      	ldr	r2, [r7, #12]
 800de0e:	fb02 f303 	mul.w	r3, r2, r3
 800de12:	ee07 3a90 	vmov	s15, r3
 800de16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de1a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	2b00      	cmp	r3, #0
 800de22:	f000 80e1 	beq.w	800dfe8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	2b02      	cmp	r3, #2
 800de2a:	f000 8083 	beq.w	800df34 <HAL_RCC_GetSysClockFreq+0x204>
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	2b02      	cmp	r3, #2
 800de32:	f200 80a1 	bhi.w	800df78 <HAL_RCC_GetSysClockFreq+0x248>
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d003      	beq.n	800de44 <HAL_RCC_GetSysClockFreq+0x114>
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	2b01      	cmp	r3, #1
 800de40:	d056      	beq.n	800def0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800de42:	e099      	b.n	800df78 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de44:	4b6f      	ldr	r3, [pc, #444]	@ (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f003 0320 	and.w	r3, r3, #32
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d02d      	beq.n	800deac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de50:	4b6c      	ldr	r3, [pc, #432]	@ (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	08db      	lsrs	r3, r3, #3
 800de56:	f003 0303 	and.w	r3, r3, #3
 800de5a:	4a6b      	ldr	r2, [pc, #428]	@ (800e008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800de5c:	fa22 f303 	lsr.w	r3, r2, r3
 800de60:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	ee07 3a90 	vmov	s15, r3
 800de68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	ee07 3a90 	vmov	s15, r3
 800de72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de7a:	4b62      	ldr	r3, [pc, #392]	@ (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de82:	ee07 3a90 	vmov	s15, r3
 800de86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de8a:	ed97 6a02 	vldr	s12, [r7, #8]
 800de8e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800e014 <HAL_RCC_GetSysClockFreq+0x2e4>
 800de92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dea6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800deaa:	e087      	b.n	800dfbc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	ee07 3a90 	vmov	s15, r3
 800deb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800deb6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800e018 <HAL_RCC_GetSysClockFreq+0x2e8>
 800deba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800debe:	4b51      	ldr	r3, [pc, #324]	@ (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dec6:	ee07 3a90 	vmov	s15, r3
 800deca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dece:	ed97 6a02 	vldr	s12, [r7, #8]
 800ded2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800e014 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ded6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800deda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800deee:	e065      	b.n	800dfbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	ee07 3a90 	vmov	s15, r3
 800def6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800defa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800e01c <HAL_RCC_GetSysClockFreq+0x2ec>
 800defe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df02:	4b40      	ldr	r3, [pc, #256]	@ (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df0a:	ee07 3a90 	vmov	s15, r3
 800df0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df12:	ed97 6a02 	vldr	s12, [r7, #8]
 800df16:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e014 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800df32:	e043      	b.n	800dfbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	ee07 3a90 	vmov	s15, r3
 800df3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df3e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800e020 <HAL_RCC_GetSysClockFreq+0x2f0>
 800df42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df46:	4b2f      	ldr	r3, [pc, #188]	@ (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df4e:	ee07 3a90 	vmov	s15, r3
 800df52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df56:	ed97 6a02 	vldr	s12, [r7, #8]
 800df5a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e014 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800df76:	e021      	b.n	800dfbc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	ee07 3a90 	vmov	s15, r3
 800df7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df82:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e01c <HAL_RCC_GetSysClockFreq+0x2ec>
 800df86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df8a:	4b1e      	ldr	r3, [pc, #120]	@ (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df92:	ee07 3a90 	vmov	s15, r3
 800df96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df9a:	ed97 6a02 	vldr	s12, [r7, #8]
 800df9e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800e014 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dfa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dfba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800dfbc:	4b11      	ldr	r3, [pc, #68]	@ (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dfbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfc0:	0a5b      	lsrs	r3, r3, #9
 800dfc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	ee07 3a90 	vmov	s15, r3
 800dfd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dfd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800dfd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dfe0:	ee17 3a90 	vmov	r3, s15
 800dfe4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800dfe6:	e005      	b.n	800dff4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	61bb      	str	r3, [r7, #24]
      break;
 800dfec:	e002      	b.n	800dff4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800dfee:	4b07      	ldr	r3, [pc, #28]	@ (800e00c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800dff0:	61bb      	str	r3, [r7, #24]
      break;
 800dff2:	bf00      	nop
  }

  return sysclockfreq;
 800dff4:	69bb      	ldr	r3, [r7, #24]
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3724      	adds	r7, #36	@ 0x24
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop
 800e004:	58024400 	.word	0x58024400
 800e008:	03d09000 	.word	0x03d09000
 800e00c:	003d0900 	.word	0x003d0900
 800e010:	017d7840 	.word	0x017d7840
 800e014:	46000000 	.word	0x46000000
 800e018:	4c742400 	.word	0x4c742400
 800e01c:	4a742400 	.word	0x4a742400
 800e020:	4bbebc20 	.word	0x4bbebc20

0800e024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e02a:	f7ff fe81 	bl	800dd30 <HAL_RCC_GetSysClockFreq>
 800e02e:	4602      	mov	r2, r0
 800e030:	4b10      	ldr	r3, [pc, #64]	@ (800e074 <HAL_RCC_GetHCLKFreq+0x50>)
 800e032:	699b      	ldr	r3, [r3, #24]
 800e034:	0a1b      	lsrs	r3, r3, #8
 800e036:	f003 030f 	and.w	r3, r3, #15
 800e03a:	490f      	ldr	r1, [pc, #60]	@ (800e078 <HAL_RCC_GetHCLKFreq+0x54>)
 800e03c:	5ccb      	ldrb	r3, [r1, r3]
 800e03e:	f003 031f 	and.w	r3, r3, #31
 800e042:	fa22 f303 	lsr.w	r3, r2, r3
 800e046:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e048:	4b0a      	ldr	r3, [pc, #40]	@ (800e074 <HAL_RCC_GetHCLKFreq+0x50>)
 800e04a:	699b      	ldr	r3, [r3, #24]
 800e04c:	f003 030f 	and.w	r3, r3, #15
 800e050:	4a09      	ldr	r2, [pc, #36]	@ (800e078 <HAL_RCC_GetHCLKFreq+0x54>)
 800e052:	5cd3      	ldrb	r3, [r2, r3]
 800e054:	f003 031f 	and.w	r3, r3, #31
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	fa22 f303 	lsr.w	r3, r2, r3
 800e05e:	4a07      	ldr	r2, [pc, #28]	@ (800e07c <HAL_RCC_GetHCLKFreq+0x58>)
 800e060:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e062:	4a07      	ldr	r2, [pc, #28]	@ (800e080 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e068:	4b04      	ldr	r3, [pc, #16]	@ (800e07c <HAL_RCC_GetHCLKFreq+0x58>)
 800e06a:	681b      	ldr	r3, [r3, #0]
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3708      	adds	r7, #8
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	58024400 	.word	0x58024400
 800e078:	0801b31c 	.word	0x0801b31c
 800e07c:	2400001c 	.word	0x2400001c
 800e080:	24000018 	.word	0x24000018

0800e084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e088:	f7ff ffcc 	bl	800e024 <HAL_RCC_GetHCLKFreq>
 800e08c:	4602      	mov	r2, r0
 800e08e:	4b06      	ldr	r3, [pc, #24]	@ (800e0a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e090:	69db      	ldr	r3, [r3, #28]
 800e092:	091b      	lsrs	r3, r3, #4
 800e094:	f003 0307 	and.w	r3, r3, #7
 800e098:	4904      	ldr	r1, [pc, #16]	@ (800e0ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800e09a:	5ccb      	ldrb	r3, [r1, r3]
 800e09c:	f003 031f 	and.w	r3, r3, #31
 800e0a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	bd80      	pop	{r7, pc}
 800e0a8:	58024400 	.word	0x58024400
 800e0ac:	0801b31c 	.word	0x0801b31c

0800e0b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e0b4:	f7ff ffb6 	bl	800e024 <HAL_RCC_GetHCLKFreq>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	4b06      	ldr	r3, [pc, #24]	@ (800e0d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e0bc:	69db      	ldr	r3, [r3, #28]
 800e0be:	0a1b      	lsrs	r3, r3, #8
 800e0c0:	f003 0307 	and.w	r3, r3, #7
 800e0c4:	4904      	ldr	r1, [pc, #16]	@ (800e0d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e0c6:	5ccb      	ldrb	r3, [r1, r3]
 800e0c8:	f003 031f 	and.w	r3, r3, #31
 800e0cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	58024400 	.word	0x58024400
 800e0d8:	0801b31c 	.word	0x0801b31c

0800e0dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e0dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0e0:	b0ca      	sub	sp, #296	@ 0x128
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e0f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800e100:	2500      	movs	r5, #0
 800e102:	ea54 0305 	orrs.w	r3, r4, r5
 800e106:	d049      	beq.n	800e19c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e10c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e10e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e112:	d02f      	beq.n	800e174 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e114:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e118:	d828      	bhi.n	800e16c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e11a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e11e:	d01a      	beq.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e120:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e124:	d822      	bhi.n	800e16c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e126:	2b00      	cmp	r3, #0
 800e128:	d003      	beq.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e12a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e12e:	d007      	beq.n	800e140 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e130:	e01c      	b.n	800e16c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e132:	4bb8      	ldr	r3, [pc, #736]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e136:	4ab7      	ldr	r2, [pc, #732]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e13c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e13e:	e01a      	b.n	800e176 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e144:	3308      	adds	r3, #8
 800e146:	2102      	movs	r1, #2
 800e148:	4618      	mov	r0, r3
 800e14a:	f001 fc8f 	bl	800fa6c <RCCEx_PLL2_Config>
 800e14e:	4603      	mov	r3, r0
 800e150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e154:	e00f      	b.n	800e176 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e15a:	3328      	adds	r3, #40	@ 0x28
 800e15c:	2102      	movs	r1, #2
 800e15e:	4618      	mov	r0, r3
 800e160:	f001 fd36 	bl	800fbd0 <RCCEx_PLL3_Config>
 800e164:	4603      	mov	r3, r0
 800e166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e16a:	e004      	b.n	800e176 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e16c:	2301      	movs	r3, #1
 800e16e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e172:	e000      	b.n	800e176 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e174:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d10a      	bne.n	800e194 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e17e:	4ba5      	ldr	r3, [pc, #660]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e182:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e18a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e18c:	4aa1      	ldr	r2, [pc, #644]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e18e:	430b      	orrs	r3, r1
 800e190:	6513      	str	r3, [r2, #80]	@ 0x50
 800e192:	e003      	b.n	800e19c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800e1a8:	f04f 0900 	mov.w	r9, #0
 800e1ac:	ea58 0309 	orrs.w	r3, r8, r9
 800e1b0:	d047      	beq.n	800e242 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1b8:	2b04      	cmp	r3, #4
 800e1ba:	d82a      	bhi.n	800e212 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e1bc:	a201      	add	r2, pc, #4	@ (adr r2, 800e1c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c2:	bf00      	nop
 800e1c4:	0800e1d9 	.word	0x0800e1d9
 800e1c8:	0800e1e7 	.word	0x0800e1e7
 800e1cc:	0800e1fd 	.word	0x0800e1fd
 800e1d0:	0800e21b 	.word	0x0800e21b
 800e1d4:	0800e21b 	.word	0x0800e21b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1d8:	4b8e      	ldr	r3, [pc, #568]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1dc:	4a8d      	ldr	r2, [pc, #564]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e1de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e1e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e1e4:	e01a      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1ea:	3308      	adds	r3, #8
 800e1ec:	2100      	movs	r1, #0
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f001 fc3c 	bl	800fa6c <RCCEx_PLL2_Config>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e1fa:	e00f      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e1fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e200:	3328      	adds	r3, #40	@ 0x28
 800e202:	2100      	movs	r1, #0
 800e204:	4618      	mov	r0, r3
 800e206:	f001 fce3 	bl	800fbd0 <RCCEx_PLL3_Config>
 800e20a:	4603      	mov	r3, r0
 800e20c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e210:	e004      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e212:	2301      	movs	r3, #1
 800e214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e218:	e000      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e21a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e21c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e220:	2b00      	cmp	r3, #0
 800e222:	d10a      	bne.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e224:	4b7b      	ldr	r3, [pc, #492]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e228:	f023 0107 	bic.w	r1, r3, #7
 800e22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e232:	4a78      	ldr	r2, [pc, #480]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e234:	430b      	orrs	r3, r1
 800e236:	6513      	str	r3, [r2, #80]	@ 0x50
 800e238:	e003      	b.n	800e242 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e23a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e23e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800e24e:	f04f 0b00 	mov.w	fp, #0
 800e252:	ea5a 030b 	orrs.w	r3, sl, fp
 800e256:	d04c      	beq.n	800e2f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800e258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e25c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e25e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e262:	d030      	beq.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800e264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e268:	d829      	bhi.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e26a:	2bc0      	cmp	r3, #192	@ 0xc0
 800e26c:	d02d      	beq.n	800e2ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e26e:	2bc0      	cmp	r3, #192	@ 0xc0
 800e270:	d825      	bhi.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e272:	2b80      	cmp	r3, #128	@ 0x80
 800e274:	d018      	beq.n	800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800e276:	2b80      	cmp	r3, #128	@ 0x80
 800e278:	d821      	bhi.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d002      	beq.n	800e284 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800e27e:	2b40      	cmp	r3, #64	@ 0x40
 800e280:	d007      	beq.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800e282:	e01c      	b.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e284:	4b63      	ldr	r3, [pc, #396]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e288:	4a62      	ldr	r2, [pc, #392]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e28a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e28e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e290:	e01c      	b.n	800e2cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e296:	3308      	adds	r3, #8
 800e298:	2100      	movs	r1, #0
 800e29a:	4618      	mov	r0, r3
 800e29c:	f001 fbe6 	bl	800fa6c <RCCEx_PLL2_Config>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e2a6:	e011      	b.n	800e2cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2ac:	3328      	adds	r3, #40	@ 0x28
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f001 fc8d 	bl	800fbd0 <RCCEx_PLL3_Config>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e2bc:	e006      	b.n	800e2cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e2c4:	e002      	b.n	800e2cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e2c6:	bf00      	nop
 800e2c8:	e000      	b.n	800e2cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e2ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d10a      	bne.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e2d4:	4b4f      	ldr	r3, [pc, #316]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e2d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800e2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2e2:	4a4c      	ldr	r2, [pc, #304]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e2e4:	430b      	orrs	r3, r1
 800e2e6:	6513      	str	r3, [r2, #80]	@ 0x50
 800e2e8:	e003      	b.n	800e2f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e2f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800e2fe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800e302:	2300      	movs	r3, #0
 800e304:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800e308:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800e30c:	460b      	mov	r3, r1
 800e30e:	4313      	orrs	r3, r2
 800e310:	d053      	beq.n	800e3ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e316:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e31a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e31e:	d035      	beq.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800e320:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e324:	d82e      	bhi.n	800e384 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e326:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e32a:	d031      	beq.n	800e390 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800e32c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e330:	d828      	bhi.n	800e384 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e336:	d01a      	beq.n	800e36e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800e338:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e33c:	d822      	bhi.n	800e384 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d003      	beq.n	800e34a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800e342:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e346:	d007      	beq.n	800e358 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800e348:	e01c      	b.n	800e384 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e34a:	4b32      	ldr	r3, [pc, #200]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e34e:	4a31      	ldr	r2, [pc, #196]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e354:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e356:	e01c      	b.n	800e392 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e35c:	3308      	adds	r3, #8
 800e35e:	2100      	movs	r1, #0
 800e360:	4618      	mov	r0, r3
 800e362:	f001 fb83 	bl	800fa6c <RCCEx_PLL2_Config>
 800e366:	4603      	mov	r3, r0
 800e368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e36c:	e011      	b.n	800e392 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e372:	3328      	adds	r3, #40	@ 0x28
 800e374:	2100      	movs	r1, #0
 800e376:	4618      	mov	r0, r3
 800e378:	f001 fc2a 	bl	800fbd0 <RCCEx_PLL3_Config>
 800e37c:	4603      	mov	r3, r0
 800e37e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e382:	e006      	b.n	800e392 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e384:	2301      	movs	r3, #1
 800e386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e38a:	e002      	b.n	800e392 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e38c:	bf00      	nop
 800e38e:	e000      	b.n	800e392 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e390:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e396:	2b00      	cmp	r3, #0
 800e398:	d10b      	bne.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e39a:	4b1e      	ldr	r3, [pc, #120]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e39c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e39e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800e3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e3aa:	4a1a      	ldr	r2, [pc, #104]	@ (800e414 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e3ac:	430b      	orrs	r3, r1
 800e3ae:	6593      	str	r3, [r2, #88]	@ 0x58
 800e3b0:	e003      	b.n	800e3ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e3b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e3ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800e3c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800e3d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800e3d4:	460b      	mov	r3, r1
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	d056      	beq.n	800e488 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e3e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e3e6:	d038      	beq.n	800e45a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e3e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e3ec:	d831      	bhi.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e3ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e3f2:	d034      	beq.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800e3f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e3f8:	d82b      	bhi.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e3fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e3fe:	d01d      	beq.n	800e43c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800e400:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e404:	d825      	bhi.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e406:	2b00      	cmp	r3, #0
 800e408:	d006      	beq.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e40a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e40e:	d00a      	beq.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e410:	e01f      	b.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e412:	bf00      	nop
 800e414:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e418:	4ba2      	ldr	r3, [pc, #648]	@ (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e41c:	4aa1      	ldr	r2, [pc, #644]	@ (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e41e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e424:	e01c      	b.n	800e460 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e42a:	3308      	adds	r3, #8
 800e42c:	2100      	movs	r1, #0
 800e42e:	4618      	mov	r0, r3
 800e430:	f001 fb1c 	bl	800fa6c <RCCEx_PLL2_Config>
 800e434:	4603      	mov	r3, r0
 800e436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e43a:	e011      	b.n	800e460 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e440:	3328      	adds	r3, #40	@ 0x28
 800e442:	2100      	movs	r1, #0
 800e444:	4618      	mov	r0, r3
 800e446:	f001 fbc3 	bl	800fbd0 <RCCEx_PLL3_Config>
 800e44a:	4603      	mov	r3, r0
 800e44c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e450:	e006      	b.n	800e460 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e452:	2301      	movs	r3, #1
 800e454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e458:	e002      	b.n	800e460 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e45a:	bf00      	nop
 800e45c:	e000      	b.n	800e460 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e45e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e464:	2b00      	cmp	r3, #0
 800e466:	d10b      	bne.n	800e480 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e468:	4b8e      	ldr	r3, [pc, #568]	@ (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e46a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e46c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800e470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e474:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e478:	4a8a      	ldr	r2, [pc, #552]	@ (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e47a:	430b      	orrs	r3, r1
 800e47c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e47e:	e003      	b.n	800e488 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e484:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e490:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e494:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e498:	2300      	movs	r3, #0
 800e49a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e49e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	4313      	orrs	r3, r2
 800e4a6:	d03a      	beq.n	800e51e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800e4a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4ae:	2b30      	cmp	r3, #48	@ 0x30
 800e4b0:	d01f      	beq.n	800e4f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800e4b2:	2b30      	cmp	r3, #48	@ 0x30
 800e4b4:	d819      	bhi.n	800e4ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e4b6:	2b20      	cmp	r3, #32
 800e4b8:	d00c      	beq.n	800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800e4ba:	2b20      	cmp	r3, #32
 800e4bc:	d815      	bhi.n	800e4ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d019      	beq.n	800e4f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800e4c2:	2b10      	cmp	r3, #16
 800e4c4:	d111      	bne.n	800e4ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4c6:	4b77      	ldr	r3, [pc, #476]	@ (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ca:	4a76      	ldr	r2, [pc, #472]	@ (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e4cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e4d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e4d2:	e011      	b.n	800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4d8:	3308      	adds	r3, #8
 800e4da:	2102      	movs	r1, #2
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f001 fac5 	bl	800fa6c <RCCEx_PLL2_Config>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e4e8:	e006      	b.n	800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e4f0:	e002      	b.n	800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e4f2:	bf00      	nop
 800e4f4:	e000      	b.n	800e4f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e4f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d10a      	bne.n	800e516 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e500:	4b68      	ldr	r3, [pc, #416]	@ (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e504:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800e508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e50c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e50e:	4a65      	ldr	r2, [pc, #404]	@ (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e510:	430b      	orrs	r3, r1
 800e512:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e514:	e003      	b.n	800e51e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e51a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e526:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e52a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e52e:	2300      	movs	r3, #0
 800e530:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e534:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800e538:	460b      	mov	r3, r1
 800e53a:	4313      	orrs	r3, r2
 800e53c:	d051      	beq.n	800e5e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e548:	d035      	beq.n	800e5b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800e54a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e54e:	d82e      	bhi.n	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e550:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e554:	d031      	beq.n	800e5ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800e556:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e55a:	d828      	bhi.n	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e55c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e560:	d01a      	beq.n	800e598 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800e562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e566:	d822      	bhi.n	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d003      	beq.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800e56c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e570:	d007      	beq.n	800e582 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800e572:	e01c      	b.n	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e574:	4b4b      	ldr	r3, [pc, #300]	@ (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e578:	4a4a      	ldr	r2, [pc, #296]	@ (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e57a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e57e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e580:	e01c      	b.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e586:	3308      	adds	r3, #8
 800e588:	2100      	movs	r1, #0
 800e58a:	4618      	mov	r0, r3
 800e58c:	f001 fa6e 	bl	800fa6c <RCCEx_PLL2_Config>
 800e590:	4603      	mov	r3, r0
 800e592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e596:	e011      	b.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e59c:	3328      	adds	r3, #40	@ 0x28
 800e59e:	2100      	movs	r1, #0
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f001 fb15 	bl	800fbd0 <RCCEx_PLL3_Config>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e5ac:	e006      	b.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e5b4:	e002      	b.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e5b6:	bf00      	nop
 800e5b8:	e000      	b.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e5ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d10a      	bne.n	800e5da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e5c4:	4b37      	ldr	r3, [pc, #220]	@ (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e5c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e5d2:	4a34      	ldr	r2, [pc, #208]	@ (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e5d4:	430b      	orrs	r3, r1
 800e5d6:	6513      	str	r3, [r2, #80]	@ 0x50
 800e5d8:	e003      	b.n	800e5e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e5ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e5f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	4313      	orrs	r3, r2
 800e600:	d056      	beq.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e608:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e60c:	d033      	beq.n	800e676 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800e60e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e612:	d82c      	bhi.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e614:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e618:	d02f      	beq.n	800e67a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e61a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e61e:	d826      	bhi.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e620:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e624:	d02b      	beq.n	800e67e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800e626:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e62a:	d820      	bhi.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e62c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e630:	d012      	beq.n	800e658 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800e632:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e636:	d81a      	bhi.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d022      	beq.n	800e682 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e63c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e640:	d115      	bne.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e646:	3308      	adds	r3, #8
 800e648:	2101      	movs	r1, #1
 800e64a:	4618      	mov	r0, r3
 800e64c:	f001 fa0e 	bl	800fa6c <RCCEx_PLL2_Config>
 800e650:	4603      	mov	r3, r0
 800e652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e656:	e015      	b.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e65c:	3328      	adds	r3, #40	@ 0x28
 800e65e:	2101      	movs	r1, #1
 800e660:	4618      	mov	r0, r3
 800e662:	f001 fab5 	bl	800fbd0 <RCCEx_PLL3_Config>
 800e666:	4603      	mov	r3, r0
 800e668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e66c:	e00a      	b.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e66e:	2301      	movs	r3, #1
 800e670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e674:	e006      	b.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e676:	bf00      	nop
 800e678:	e004      	b.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e67a:	bf00      	nop
 800e67c:	e002      	b.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e67e:	bf00      	nop
 800e680:	e000      	b.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e682:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d10d      	bne.n	800e6a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e68c:	4b05      	ldr	r3, [pc, #20]	@ (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e68e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e690:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e698:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e69a:	4a02      	ldr	r2, [pc, #8]	@ (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e69c:	430b      	orrs	r3, r1
 800e69e:	6513      	str	r3, [r2, #80]	@ 0x50
 800e6a0:	e006      	b.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e6a2:	bf00      	nop
 800e6a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e6ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e6bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e6c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	4313      	orrs	r3, r2
 800e6ce:	d055      	beq.n	800e77c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e6d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e6dc:	d033      	beq.n	800e746 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800e6de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e6e2:	d82c      	bhi.n	800e73e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e6e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6e8:	d02f      	beq.n	800e74a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e6ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6ee:	d826      	bhi.n	800e73e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e6f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e6f4:	d02b      	beq.n	800e74e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800e6f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e6fa:	d820      	bhi.n	800e73e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e6fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e700:	d012      	beq.n	800e728 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800e702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e706:	d81a      	bhi.n	800e73e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d022      	beq.n	800e752 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800e70c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e710:	d115      	bne.n	800e73e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e716:	3308      	adds	r3, #8
 800e718:	2101      	movs	r1, #1
 800e71a:	4618      	mov	r0, r3
 800e71c:	f001 f9a6 	bl	800fa6c <RCCEx_PLL2_Config>
 800e720:	4603      	mov	r3, r0
 800e722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e726:	e015      	b.n	800e754 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e72c:	3328      	adds	r3, #40	@ 0x28
 800e72e:	2101      	movs	r1, #1
 800e730:	4618      	mov	r0, r3
 800e732:	f001 fa4d 	bl	800fbd0 <RCCEx_PLL3_Config>
 800e736:	4603      	mov	r3, r0
 800e738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e73c:	e00a      	b.n	800e754 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e73e:	2301      	movs	r3, #1
 800e740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e744:	e006      	b.n	800e754 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e746:	bf00      	nop
 800e748:	e004      	b.n	800e754 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e74a:	bf00      	nop
 800e74c:	e002      	b.n	800e754 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e74e:	bf00      	nop
 800e750:	e000      	b.n	800e754 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e752:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d10b      	bne.n	800e774 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e75c:	4ba3      	ldr	r3, [pc, #652]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e75e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e760:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e768:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e76c:	4a9f      	ldr	r2, [pc, #636]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e76e:	430b      	orrs	r3, r1
 800e770:	6593      	str	r3, [r2, #88]	@ 0x58
 800e772:	e003      	b.n	800e77c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e778:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e784:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e788:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e78c:	2300      	movs	r3, #0
 800e78e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e792:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e796:	460b      	mov	r3, r1
 800e798:	4313      	orrs	r3, r2
 800e79a:	d037      	beq.n	800e80c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e7a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e7a6:	d00e      	beq.n	800e7c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800e7a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e7ac:	d816      	bhi.n	800e7dc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d018      	beq.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800e7b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e7b6:	d111      	bne.n	800e7dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7b8:	4b8c      	ldr	r3, [pc, #560]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7bc:	4a8b      	ldr	r2, [pc, #556]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e7c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e7c4:	e00f      	b.n	800e7e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7ca:	3308      	adds	r3, #8
 800e7cc:	2101      	movs	r1, #1
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f001 f94c 	bl	800fa6c <RCCEx_PLL2_Config>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e7da:	e004      	b.n	800e7e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e7e2:	e000      	b.n	800e7e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800e7e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d10a      	bne.n	800e804 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e7ee:	4b7f      	ldr	r3, [pc, #508]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e7fc:	4a7b      	ldr	r2, [pc, #492]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7fe:	430b      	orrs	r3, r1
 800e800:	6513      	str	r3, [r2, #80]	@ 0x50
 800e802:	e003      	b.n	800e80c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e808:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e814:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e818:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e81c:	2300      	movs	r3, #0
 800e81e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e822:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800e826:	460b      	mov	r3, r1
 800e828:	4313      	orrs	r3, r2
 800e82a:	d039      	beq.n	800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e82c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e832:	2b03      	cmp	r3, #3
 800e834:	d81c      	bhi.n	800e870 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800e836:	a201      	add	r2, pc, #4	@ (adr r2, 800e83c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800e838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e83c:	0800e879 	.word	0x0800e879
 800e840:	0800e84d 	.word	0x0800e84d
 800e844:	0800e85b 	.word	0x0800e85b
 800e848:	0800e879 	.word	0x0800e879
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e84c:	4b67      	ldr	r3, [pc, #412]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e84e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e850:	4a66      	ldr	r2, [pc, #408]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e858:	e00f      	b.n	800e87a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e85e:	3308      	adds	r3, #8
 800e860:	2102      	movs	r1, #2
 800e862:	4618      	mov	r0, r3
 800e864:	f001 f902 	bl	800fa6c <RCCEx_PLL2_Config>
 800e868:	4603      	mov	r3, r0
 800e86a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e86e:	e004      	b.n	800e87a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e870:	2301      	movs	r3, #1
 800e872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e876:	e000      	b.n	800e87a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e87a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d10a      	bne.n	800e898 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e882:	4b5a      	ldr	r3, [pc, #360]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e886:	f023 0103 	bic.w	r1, r3, #3
 800e88a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e88e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e890:	4a56      	ldr	r2, [pc, #344]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e892:	430b      	orrs	r3, r1
 800e894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e896:	e003      	b.n	800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e89c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e8a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e8ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e8b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	4313      	orrs	r3, r2
 800e8be:	f000 809f 	beq.w	800ea00 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e8c2:	4b4b      	ldr	r3, [pc, #300]	@ (800e9f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a4a      	ldr	r2, [pc, #296]	@ (800e9f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e8c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e8cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e8ce:	f7f4 fda1 	bl	8003414 <HAL_GetTick>
 800e8d2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e8d6:	e00b      	b.n	800e8f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e8d8:	f7f4 fd9c 	bl	8003414 <HAL_GetTick>
 800e8dc:	4602      	mov	r2, r0
 800e8de:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e8e2:	1ad3      	subs	r3, r2, r3
 800e8e4:	2b64      	cmp	r3, #100	@ 0x64
 800e8e6:	d903      	bls.n	800e8f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e8e8:	2303      	movs	r3, #3
 800e8ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e8ee:	e005      	b.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e8f0:	4b3f      	ldr	r3, [pc, #252]	@ (800e9f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d0ed      	beq.n	800e8d8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e8fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e900:	2b00      	cmp	r3, #0
 800e902:	d179      	bne.n	800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e904:	4b39      	ldr	r3, [pc, #228]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e906:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e90c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e910:	4053      	eors	r3, r2
 800e912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e916:	2b00      	cmp	r3, #0
 800e918:	d015      	beq.n	800e946 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e91a:	4b34      	ldr	r3, [pc, #208]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e91c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e91e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e922:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e926:	4b31      	ldr	r3, [pc, #196]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e92a:	4a30      	ldr	r2, [pc, #192]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e92c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e930:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e932:	4b2e      	ldr	r3, [pc, #184]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e936:	4a2d      	ldr	r2, [pc, #180]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e93c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e93e:	4a2b      	ldr	r2, [pc, #172]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e944:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e94a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e94e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e952:	d118      	bne.n	800e986 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e954:	f7f4 fd5e 	bl	8003414 <HAL_GetTick>
 800e958:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e95c:	e00d      	b.n	800e97a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e95e:	f7f4 fd59 	bl	8003414 <HAL_GetTick>
 800e962:	4602      	mov	r2, r0
 800e964:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e968:	1ad2      	subs	r2, r2, r3
 800e96a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e96e:	429a      	cmp	r2, r3
 800e970:	d903      	bls.n	800e97a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800e972:	2303      	movs	r3, #3
 800e974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800e978:	e005      	b.n	800e986 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e97a:	4b1c      	ldr	r3, [pc, #112]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e97c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e97e:	f003 0302 	and.w	r3, r3, #2
 800e982:	2b00      	cmp	r3, #0
 800e984:	d0eb      	beq.n	800e95e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800e986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d129      	bne.n	800e9e2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e992:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e99a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e99e:	d10e      	bne.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e9a0:	4b12      	ldr	r3, [pc, #72]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9a2:	691b      	ldr	r3, [r3, #16]
 800e9a4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e9b0:	091a      	lsrs	r2, r3, #4
 800e9b2:	4b10      	ldr	r3, [pc, #64]	@ (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e9b4:	4013      	ands	r3, r2
 800e9b6:	4a0d      	ldr	r2, [pc, #52]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9b8:	430b      	orrs	r3, r1
 800e9ba:	6113      	str	r3, [r2, #16]
 800e9bc:	e005      	b.n	800e9ca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e9be:	4b0b      	ldr	r3, [pc, #44]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9c0:	691b      	ldr	r3, [r3, #16]
 800e9c2:	4a0a      	ldr	r2, [pc, #40]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e9c8:	6113      	str	r3, [r2, #16]
 800e9ca:	4b08      	ldr	r3, [pc, #32]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9cc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e9d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e9da:	4a04      	ldr	r2, [pc, #16]	@ (800e9ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9dc:	430b      	orrs	r3, r1
 800e9de:	6713      	str	r3, [r2, #112]	@ 0x70
 800e9e0:	e00e      	b.n	800ea00 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e9e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e9ea:	e009      	b.n	800ea00 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e9ec:	58024400 	.word	0x58024400
 800e9f0:	58024800 	.word	0x58024800
 800e9f4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ea00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea08:	f002 0301 	and.w	r3, r2, #1
 800ea0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ea10:	2300      	movs	r3, #0
 800ea12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ea16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	f000 8089 	beq.w	800eb34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ea22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ea28:	2b28      	cmp	r3, #40	@ 0x28
 800ea2a:	d86b      	bhi.n	800eb04 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ea2c:	a201      	add	r2, pc, #4	@ (adr r2, 800ea34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ea2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea32:	bf00      	nop
 800ea34:	0800eb0d 	.word	0x0800eb0d
 800ea38:	0800eb05 	.word	0x0800eb05
 800ea3c:	0800eb05 	.word	0x0800eb05
 800ea40:	0800eb05 	.word	0x0800eb05
 800ea44:	0800eb05 	.word	0x0800eb05
 800ea48:	0800eb05 	.word	0x0800eb05
 800ea4c:	0800eb05 	.word	0x0800eb05
 800ea50:	0800eb05 	.word	0x0800eb05
 800ea54:	0800ead9 	.word	0x0800ead9
 800ea58:	0800eb05 	.word	0x0800eb05
 800ea5c:	0800eb05 	.word	0x0800eb05
 800ea60:	0800eb05 	.word	0x0800eb05
 800ea64:	0800eb05 	.word	0x0800eb05
 800ea68:	0800eb05 	.word	0x0800eb05
 800ea6c:	0800eb05 	.word	0x0800eb05
 800ea70:	0800eb05 	.word	0x0800eb05
 800ea74:	0800eaef 	.word	0x0800eaef
 800ea78:	0800eb05 	.word	0x0800eb05
 800ea7c:	0800eb05 	.word	0x0800eb05
 800ea80:	0800eb05 	.word	0x0800eb05
 800ea84:	0800eb05 	.word	0x0800eb05
 800ea88:	0800eb05 	.word	0x0800eb05
 800ea8c:	0800eb05 	.word	0x0800eb05
 800ea90:	0800eb05 	.word	0x0800eb05
 800ea94:	0800eb0d 	.word	0x0800eb0d
 800ea98:	0800eb05 	.word	0x0800eb05
 800ea9c:	0800eb05 	.word	0x0800eb05
 800eaa0:	0800eb05 	.word	0x0800eb05
 800eaa4:	0800eb05 	.word	0x0800eb05
 800eaa8:	0800eb05 	.word	0x0800eb05
 800eaac:	0800eb05 	.word	0x0800eb05
 800eab0:	0800eb05 	.word	0x0800eb05
 800eab4:	0800eb0d 	.word	0x0800eb0d
 800eab8:	0800eb05 	.word	0x0800eb05
 800eabc:	0800eb05 	.word	0x0800eb05
 800eac0:	0800eb05 	.word	0x0800eb05
 800eac4:	0800eb05 	.word	0x0800eb05
 800eac8:	0800eb05 	.word	0x0800eb05
 800eacc:	0800eb05 	.word	0x0800eb05
 800ead0:	0800eb05 	.word	0x0800eb05
 800ead4:	0800eb0d 	.word	0x0800eb0d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ead8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eadc:	3308      	adds	r3, #8
 800eade:	2101      	movs	r1, #1
 800eae0:	4618      	mov	r0, r3
 800eae2:	f000 ffc3 	bl	800fa6c <RCCEx_PLL2_Config>
 800eae6:	4603      	mov	r3, r0
 800eae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800eaec:	e00f      	b.n	800eb0e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eaee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eaf2:	3328      	adds	r3, #40	@ 0x28
 800eaf4:	2101      	movs	r1, #1
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f001 f86a 	bl	800fbd0 <RCCEx_PLL3_Config>
 800eafc:	4603      	mov	r3, r0
 800eafe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800eb02:	e004      	b.n	800eb0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eb0a:	e000      	b.n	800eb0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800eb0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d10a      	bne.n	800eb2c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800eb16:	4bbf      	ldr	r3, [pc, #764]	@ (800ee14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eb18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb1a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800eb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eb24:	4abb      	ldr	r2, [pc, #748]	@ (800ee14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eb26:	430b      	orrs	r3, r1
 800eb28:	6553      	str	r3, [r2, #84]	@ 0x54
 800eb2a:	e003      	b.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800eb34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3c:	f002 0302 	and.w	r3, r2, #2
 800eb40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eb44:	2300      	movs	r3, #0
 800eb46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800eb4a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800eb4e:	460b      	mov	r3, r1
 800eb50:	4313      	orrs	r3, r2
 800eb52:	d041      	beq.n	800ebd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800eb54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eb5a:	2b05      	cmp	r3, #5
 800eb5c:	d824      	bhi.n	800eba8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800eb5e:	a201      	add	r2, pc, #4	@ (adr r2, 800eb64 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800eb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb64:	0800ebb1 	.word	0x0800ebb1
 800eb68:	0800eb7d 	.word	0x0800eb7d
 800eb6c:	0800eb93 	.word	0x0800eb93
 800eb70:	0800ebb1 	.word	0x0800ebb1
 800eb74:	0800ebb1 	.word	0x0800ebb1
 800eb78:	0800ebb1 	.word	0x0800ebb1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb80:	3308      	adds	r3, #8
 800eb82:	2101      	movs	r1, #1
 800eb84:	4618      	mov	r0, r3
 800eb86:	f000 ff71 	bl	800fa6c <RCCEx_PLL2_Config>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800eb90:	e00f      	b.n	800ebb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eb92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb96:	3328      	adds	r3, #40	@ 0x28
 800eb98:	2101      	movs	r1, #1
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f001 f818 	bl	800fbd0 <RCCEx_PLL3_Config>
 800eba0:	4603      	mov	r3, r0
 800eba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800eba6:	e004      	b.n	800ebb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ebae:	e000      	b.n	800ebb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ebb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d10a      	bne.n	800ebd0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ebba:	4b96      	ldr	r3, [pc, #600]	@ (800ee14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ebbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebbe:	f023 0107 	bic.w	r1, r3, #7
 800ebc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebc8:	4a92      	ldr	r2, [pc, #584]	@ (800ee14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ebca:	430b      	orrs	r3, r1
 800ebcc:	6553      	str	r3, [r2, #84]	@ 0x54
 800ebce:	e003      	b.n	800ebd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ebd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe0:	f002 0304 	and.w	r3, r2, #4
 800ebe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ebe8:	2300      	movs	r3, #0
 800ebea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ebee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	4313      	orrs	r3, r2
 800ebf6:	d044      	beq.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ebf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec00:	2b05      	cmp	r3, #5
 800ec02:	d825      	bhi.n	800ec50 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ec04:	a201      	add	r2, pc, #4	@ (adr r2, 800ec0c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ec06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec0a:	bf00      	nop
 800ec0c:	0800ec59 	.word	0x0800ec59
 800ec10:	0800ec25 	.word	0x0800ec25
 800ec14:	0800ec3b 	.word	0x0800ec3b
 800ec18:	0800ec59 	.word	0x0800ec59
 800ec1c:	0800ec59 	.word	0x0800ec59
 800ec20:	0800ec59 	.word	0x0800ec59
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ec24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec28:	3308      	adds	r3, #8
 800ec2a:	2101      	movs	r1, #1
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f000 ff1d 	bl	800fa6c <RCCEx_PLL2_Config>
 800ec32:	4603      	mov	r3, r0
 800ec34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ec38:	e00f      	b.n	800ec5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ec3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec3e:	3328      	adds	r3, #40	@ 0x28
 800ec40:	2101      	movs	r1, #1
 800ec42:	4618      	mov	r0, r3
 800ec44:	f000 ffc4 	bl	800fbd0 <RCCEx_PLL3_Config>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ec4e:	e004      	b.n	800ec5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec50:	2301      	movs	r3, #1
 800ec52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ec56:	e000      	b.n	800ec5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800ec58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d10b      	bne.n	800ec7a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ec62:	4b6c      	ldr	r3, [pc, #432]	@ (800ee14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ec64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec66:	f023 0107 	bic.w	r1, r3, #7
 800ec6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec72:	4a68      	ldr	r2, [pc, #416]	@ (800ee14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ec74:	430b      	orrs	r3, r1
 800ec76:	6593      	str	r3, [r2, #88]	@ 0x58
 800ec78:	e003      	b.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ec82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8a:	f002 0320 	and.w	r3, r2, #32
 800ec8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ec92:	2300      	movs	r3, #0
 800ec94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ec98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	d055      	beq.n	800ed4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800eca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ecaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ecae:	d033      	beq.n	800ed18 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800ecb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ecb4:	d82c      	bhi.n	800ed10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ecb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ecba:	d02f      	beq.n	800ed1c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800ecbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ecc0:	d826      	bhi.n	800ed10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ecc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ecc6:	d02b      	beq.n	800ed20 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800ecc8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800eccc:	d820      	bhi.n	800ed10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ecce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ecd2:	d012      	beq.n	800ecfa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ecd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ecd8:	d81a      	bhi.n	800ed10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d022      	beq.n	800ed24 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800ecde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ece2:	d115      	bne.n	800ed10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ece4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ece8:	3308      	adds	r3, #8
 800ecea:	2100      	movs	r1, #0
 800ecec:	4618      	mov	r0, r3
 800ecee:	f000 febd 	bl	800fa6c <RCCEx_PLL2_Config>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ecf8:	e015      	b.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ecfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecfe:	3328      	adds	r3, #40	@ 0x28
 800ed00:	2102      	movs	r1, #2
 800ed02:	4618      	mov	r0, r3
 800ed04:	f000 ff64 	bl	800fbd0 <RCCEx_PLL3_Config>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ed0e:	e00a      	b.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ed10:	2301      	movs	r3, #1
 800ed12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ed16:	e006      	b.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ed18:	bf00      	nop
 800ed1a:	e004      	b.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ed1c:	bf00      	nop
 800ed1e:	e002      	b.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ed20:	bf00      	nop
 800ed22:	e000      	b.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ed24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d10b      	bne.n	800ed46 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ed2e:	4b39      	ldr	r3, [pc, #228]	@ (800ee14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ed30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed32:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ed36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed3e:	4a35      	ldr	r2, [pc, #212]	@ (800ee14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ed40:	430b      	orrs	r3, r1
 800ed42:	6553      	str	r3, [r2, #84]	@ 0x54
 800ed44:	e003      	b.n	800ed4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ed4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed56:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ed5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ed5e:	2300      	movs	r3, #0
 800ed60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ed64:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ed68:	460b      	mov	r3, r1
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	d058      	beq.n	800ee20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ed6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ed76:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ed7a:	d033      	beq.n	800ede4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ed7c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ed80:	d82c      	bhi.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ed82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed86:	d02f      	beq.n	800ede8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800ed88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed8c:	d826      	bhi.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ed8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ed92:	d02b      	beq.n	800edec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800ed94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ed98:	d820      	bhi.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ed9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ed9e:	d012      	beq.n	800edc6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800eda0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eda4:	d81a      	bhi.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d022      	beq.n	800edf0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800edaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800edae:	d115      	bne.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800edb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edb4:	3308      	adds	r3, #8
 800edb6:	2100      	movs	r1, #0
 800edb8:	4618      	mov	r0, r3
 800edba:	f000 fe57 	bl	800fa6c <RCCEx_PLL2_Config>
 800edbe:	4603      	mov	r3, r0
 800edc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800edc4:	e015      	b.n	800edf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800edc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edca:	3328      	adds	r3, #40	@ 0x28
 800edcc:	2102      	movs	r1, #2
 800edce:	4618      	mov	r0, r3
 800edd0:	f000 fefe 	bl	800fbd0 <RCCEx_PLL3_Config>
 800edd4:	4603      	mov	r3, r0
 800edd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800edda:	e00a      	b.n	800edf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eddc:	2301      	movs	r3, #1
 800edde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ede2:	e006      	b.n	800edf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ede4:	bf00      	nop
 800ede6:	e004      	b.n	800edf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ede8:	bf00      	nop
 800edea:	e002      	b.n	800edf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800edec:	bf00      	nop
 800edee:	e000      	b.n	800edf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800edf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800edf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d10e      	bne.n	800ee18 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800edfa:	4b06      	ldr	r3, [pc, #24]	@ (800ee14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800edfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800edfe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ee02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee0a:	4a02      	ldr	r2, [pc, #8]	@ (800ee14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ee0c:	430b      	orrs	r3, r1
 800ee0e:	6593      	str	r3, [r2, #88]	@ 0x58
 800ee10:	e006      	b.n	800ee20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800ee12:	bf00      	nop
 800ee14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ee20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee28:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ee2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ee30:	2300      	movs	r3, #0
 800ee32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ee36:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ee3a:	460b      	mov	r3, r1
 800ee3c:	4313      	orrs	r3, r2
 800ee3e:	d055      	beq.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ee40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ee48:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ee4c:	d033      	beq.n	800eeb6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800ee4e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ee52:	d82c      	bhi.n	800eeae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ee54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee58:	d02f      	beq.n	800eeba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800ee5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee5e:	d826      	bhi.n	800eeae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ee60:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ee64:	d02b      	beq.n	800eebe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800ee66:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ee6a:	d820      	bhi.n	800eeae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ee6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ee70:	d012      	beq.n	800ee98 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ee72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ee76:	d81a      	bhi.n	800eeae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d022      	beq.n	800eec2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ee7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ee80:	d115      	bne.n	800eeae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ee82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee86:	3308      	adds	r3, #8
 800ee88:	2100      	movs	r1, #0
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f000 fdee 	bl	800fa6c <RCCEx_PLL2_Config>
 800ee90:	4603      	mov	r3, r0
 800ee92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ee96:	e015      	b.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ee98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee9c:	3328      	adds	r3, #40	@ 0x28
 800ee9e:	2102      	movs	r1, #2
 800eea0:	4618      	mov	r0, r3
 800eea2:	f000 fe95 	bl	800fbd0 <RCCEx_PLL3_Config>
 800eea6:	4603      	mov	r3, r0
 800eea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800eeac:	e00a      	b.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eeb4:	e006      	b.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800eeb6:	bf00      	nop
 800eeb8:	e004      	b.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800eeba:	bf00      	nop
 800eebc:	e002      	b.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800eebe:	bf00      	nop
 800eec0:	e000      	b.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800eec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d10b      	bne.n	800eee4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800eecc:	4ba1      	ldr	r3, [pc, #644]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eed0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800eed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eed8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eedc:	4a9d      	ldr	r2, [pc, #628]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eede:	430b      	orrs	r3, r1
 800eee0:	6593      	str	r3, [r2, #88]	@ 0x58
 800eee2:	e003      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800eeec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef4:	f002 0308 	and.w	r3, r2, #8
 800eef8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800eefc:	2300      	movs	r3, #0
 800eefe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ef02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ef06:	460b      	mov	r3, r1
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	d01e      	beq.n	800ef4a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ef0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef18:	d10c      	bne.n	800ef34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ef1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef1e:	3328      	adds	r3, #40	@ 0x28
 800ef20:	2102      	movs	r1, #2
 800ef22:	4618      	mov	r0, r3
 800ef24:	f000 fe54 	bl	800fbd0 <RCCEx_PLL3_Config>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d002      	beq.n	800ef34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ef34:	4b87      	ldr	r3, [pc, #540]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef38:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ef3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef44:	4a83      	ldr	r2, [pc, #524]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef46:	430b      	orrs	r3, r1
 800ef48:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ef4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef52:	f002 0310 	and.w	r3, r2, #16
 800ef56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ef60:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ef64:	460b      	mov	r3, r1
 800ef66:	4313      	orrs	r3, r2
 800ef68:	d01e      	beq.n	800efa8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ef6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ef72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef76:	d10c      	bne.n	800ef92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ef78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef7c:	3328      	adds	r3, #40	@ 0x28
 800ef7e:	2102      	movs	r1, #2
 800ef80:	4618      	mov	r0, r3
 800ef82:	f000 fe25 	bl	800fbd0 <RCCEx_PLL3_Config>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d002      	beq.n	800ef92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ef92:	4b70      	ldr	r3, [pc, #448]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ef9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800efa2:	4a6c      	ldr	r2, [pc, #432]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800efa4:	430b      	orrs	r3, r1
 800efa6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800efa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800efb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800efb8:	2300      	movs	r3, #0
 800efba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800efbe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800efc2:	460b      	mov	r3, r1
 800efc4:	4313      	orrs	r3, r2
 800efc6:	d03e      	beq.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800efc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800efd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800efd4:	d022      	beq.n	800f01c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800efd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800efda:	d81b      	bhi.n	800f014 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d003      	beq.n	800efe8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800efe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800efe4:	d00b      	beq.n	800effe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800efe6:	e015      	b.n	800f014 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800efe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efec:	3308      	adds	r3, #8
 800efee:	2100      	movs	r1, #0
 800eff0:	4618      	mov	r0, r3
 800eff2:	f000 fd3b 	bl	800fa6c <RCCEx_PLL2_Config>
 800eff6:	4603      	mov	r3, r0
 800eff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800effc:	e00f      	b.n	800f01e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800effe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f002:	3328      	adds	r3, #40	@ 0x28
 800f004:	2102      	movs	r1, #2
 800f006:	4618      	mov	r0, r3
 800f008:	f000 fde2 	bl	800fbd0 <RCCEx_PLL3_Config>
 800f00c:	4603      	mov	r3, r0
 800f00e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f012:	e004      	b.n	800f01e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f014:	2301      	movs	r3, #1
 800f016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f01a:	e000      	b.n	800f01e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800f01c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f01e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f022:	2b00      	cmp	r3, #0
 800f024:	d10b      	bne.n	800f03e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f026:	4b4b      	ldr	r3, [pc, #300]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f02a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800f02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f032:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f036:	4a47      	ldr	r2, [pc, #284]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f038:	430b      	orrs	r3, r1
 800f03a:	6593      	str	r3, [r2, #88]	@ 0x58
 800f03c:	e003      	b.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f03e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f042:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800f052:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f054:	2300      	movs	r3, #0
 800f056:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f058:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800f05c:	460b      	mov	r3, r1
 800f05e:	4313      	orrs	r3, r2
 800f060:	d03b      	beq.n	800f0da <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f06a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f06e:	d01f      	beq.n	800f0b0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800f070:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f074:	d818      	bhi.n	800f0a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800f076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f07a:	d003      	beq.n	800f084 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800f07c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f080:	d007      	beq.n	800f092 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800f082:	e011      	b.n	800f0a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f084:	4b33      	ldr	r3, [pc, #204]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f088:	4a32      	ldr	r2, [pc, #200]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f08a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f08e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f090:	e00f      	b.n	800f0b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f096:	3328      	adds	r3, #40	@ 0x28
 800f098:	2101      	movs	r1, #1
 800f09a:	4618      	mov	r0, r3
 800f09c:	f000 fd98 	bl	800fbd0 <RCCEx_PLL3_Config>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800f0a6:	e004      	b.n	800f0b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f0ae:	e000      	b.n	800f0b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800f0b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d10b      	bne.n	800f0d2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f0ba:	4b26      	ldr	r3, [pc, #152]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f0bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f0ca:	4a22      	ldr	r2, [pc, #136]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f0cc:	430b      	orrs	r3, r1
 800f0ce:	6553      	str	r3, [r2, #84]	@ 0x54
 800f0d0:	e003      	b.n	800f0da <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f0d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f0e6:	673b      	str	r3, [r7, #112]	@ 0x70
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	677b      	str	r3, [r7, #116]	@ 0x74
 800f0ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	4313      	orrs	r3, r2
 800f0f4:	d034      	beq.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d003      	beq.n	800f108 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800f100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f104:	d007      	beq.n	800f116 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800f106:	e011      	b.n	800f12c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f108:	4b12      	ldr	r3, [pc, #72]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f10a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f10c:	4a11      	ldr	r2, [pc, #68]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f10e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f114:	e00e      	b.n	800f134 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f11a:	3308      	adds	r3, #8
 800f11c:	2102      	movs	r1, #2
 800f11e:	4618      	mov	r0, r3
 800f120:	f000 fca4 	bl	800fa6c <RCCEx_PLL2_Config>
 800f124:	4603      	mov	r3, r0
 800f126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f12a:	e003      	b.n	800f134 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800f12c:	2301      	movs	r3, #1
 800f12e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f132:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f134:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d10d      	bne.n	800f158 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f13c:	4b05      	ldr	r3, [pc, #20]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f13e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f140:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f14a:	4a02      	ldr	r2, [pc, #8]	@ (800f154 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f14c:	430b      	orrs	r3, r1
 800f14e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f150:	e006      	b.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800f152:	bf00      	nop
 800f154:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f158:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f15c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f168:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800f16c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f16e:	2300      	movs	r3, #0
 800f170:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f172:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f176:	460b      	mov	r3, r1
 800f178:	4313      	orrs	r3, r2
 800f17a:	d00c      	beq.n	800f196 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f180:	3328      	adds	r3, #40	@ 0x28
 800f182:	2102      	movs	r1, #2
 800f184:	4618      	mov	r0, r3
 800f186:	f000 fd23 	bl	800fbd0 <RCCEx_PLL3_Config>
 800f18a:	4603      	mov	r3, r0
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d002      	beq.n	800f196 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800f190:	2301      	movs	r3, #1
 800f192:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800f1a2:	663b      	str	r3, [r7, #96]	@ 0x60
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	667b      	str	r3, [r7, #100]	@ 0x64
 800f1a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800f1ac:	460b      	mov	r3, r1
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	d038      	beq.n	800f224 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f1be:	d018      	beq.n	800f1f2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800f1c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f1c4:	d811      	bhi.n	800f1ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f1c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1ca:	d014      	beq.n	800f1f6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800f1cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1d0:	d80b      	bhi.n	800f1ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d011      	beq.n	800f1fa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800f1d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f1da:	d106      	bne.n	800f1ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f1dc:	4bc3      	ldr	r3, [pc, #780]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1e0:	4ac2      	ldr	r2, [pc, #776]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f1e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f1e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f1e8:	e008      	b.n	800f1fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f1f0:	e004      	b.n	800f1fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f1f2:	bf00      	nop
 800f1f4:	e002      	b.n	800f1fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f1f6:	bf00      	nop
 800f1f8:	e000      	b.n	800f1fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f1fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f200:	2b00      	cmp	r3, #0
 800f202:	d10b      	bne.n	800f21c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f204:	4bb9      	ldr	r3, [pc, #740]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f208:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f214:	4ab5      	ldr	r2, [pc, #724]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f216:	430b      	orrs	r3, r1
 800f218:	6553      	str	r3, [r2, #84]	@ 0x54
 800f21a:	e003      	b.n	800f224 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f21c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800f230:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f232:	2300      	movs	r3, #0
 800f234:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f236:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800f23a:	460b      	mov	r3, r1
 800f23c:	4313      	orrs	r3, r2
 800f23e:	d009      	beq.n	800f254 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f240:	4baa      	ldr	r3, [pc, #680]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f244:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f24c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f24e:	4aa7      	ldr	r2, [pc, #668]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f250:	430b      	orrs	r3, r1
 800f252:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800f260:	653b      	str	r3, [r7, #80]	@ 0x50
 800f262:	2300      	movs	r3, #0
 800f264:	657b      	str	r3, [r7, #84]	@ 0x54
 800f266:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800f26a:	460b      	mov	r3, r1
 800f26c:	4313      	orrs	r3, r2
 800f26e:	d00a      	beq.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800f270:	4b9e      	ldr	r3, [pc, #632]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f272:	691b      	ldr	r3, [r3, #16]
 800f274:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800f278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f27c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f280:	4a9a      	ldr	r2, [pc, #616]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f282:	430b      	orrs	r3, r1
 800f284:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800f292:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f294:	2300      	movs	r3, #0
 800f296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f298:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800f29c:	460b      	mov	r3, r1
 800f29e:	4313      	orrs	r3, r2
 800f2a0:	d009      	beq.n	800f2b6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f2a2:	4b92      	ldr	r3, [pc, #584]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f2a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f2a6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800f2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f2b0:	4a8e      	ldr	r2, [pc, #568]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f2b2:	430b      	orrs	r3, r1
 800f2b4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2be:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800f2c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800f2c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	4313      	orrs	r3, r2
 800f2d0:	d00e      	beq.n	800f2f0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f2d2:	4b86      	ldr	r3, [pc, #536]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f2d4:	691b      	ldr	r3, [r3, #16]
 800f2d6:	4a85      	ldr	r2, [pc, #532]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f2d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f2dc:	6113      	str	r3, [r2, #16]
 800f2de:	4b83      	ldr	r3, [pc, #524]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f2e0:	6919      	ldr	r1, [r3, #16]
 800f2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f2ea:	4a80      	ldr	r2, [pc, #512]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f2ec:	430b      	orrs	r3, r1
 800f2ee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800f2fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f2fe:	2300      	movs	r3, #0
 800f300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f302:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800f306:	460b      	mov	r3, r1
 800f308:	4313      	orrs	r3, r2
 800f30a:	d009      	beq.n	800f320 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f30c:	4b77      	ldr	r3, [pc, #476]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f30e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f310:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f31a:	4a74      	ldr	r2, [pc, #464]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f31c:	430b      	orrs	r3, r1
 800f31e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f328:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800f32c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f32e:	2300      	movs	r3, #0
 800f330:	637b      	str	r3, [r7, #52]	@ 0x34
 800f332:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800f336:	460b      	mov	r3, r1
 800f338:	4313      	orrs	r3, r2
 800f33a:	d00a      	beq.n	800f352 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f33c:	4b6b      	ldr	r3, [pc, #428]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f33e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f340:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800f344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f34c:	4a67      	ldr	r2, [pc, #412]	@ (800f4ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f34e:	430b      	orrs	r3, r1
 800f350:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f35a:	2100      	movs	r1, #0
 800f35c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800f35e:	f003 0301 	and.w	r3, r3, #1
 800f362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f364:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800f368:	460b      	mov	r3, r1
 800f36a:	4313      	orrs	r3, r2
 800f36c:	d011      	beq.n	800f392 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f372:	3308      	adds	r3, #8
 800f374:	2100      	movs	r1, #0
 800f376:	4618      	mov	r0, r3
 800f378:	f000 fb78 	bl	800fa6c <RCCEx_PLL2_Config>
 800f37c:	4603      	mov	r3, r0
 800f37e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f386:	2b00      	cmp	r3, #0
 800f388:	d003      	beq.n	800f392 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f38a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f38e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39a:	2100      	movs	r1, #0
 800f39c:	6239      	str	r1, [r7, #32]
 800f39e:	f003 0302 	and.w	r3, r3, #2
 800f3a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f3a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	d011      	beq.n	800f3d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3b2:	3308      	adds	r3, #8
 800f3b4:	2101      	movs	r1, #1
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f000 fb58 	bl	800fa6c <RCCEx_PLL2_Config>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f3c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d003      	beq.n	800f3d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f3ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f3d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3da:	2100      	movs	r1, #0
 800f3dc:	61b9      	str	r1, [r7, #24]
 800f3de:	f003 0304 	and.w	r3, r3, #4
 800f3e2:	61fb      	str	r3, [r7, #28]
 800f3e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f3e8:	460b      	mov	r3, r1
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	d011      	beq.n	800f412 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3f2:	3308      	adds	r3, #8
 800f3f4:	2102      	movs	r1, #2
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f000 fb38 	bl	800fa6c <RCCEx_PLL2_Config>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f406:	2b00      	cmp	r3, #0
 800f408:	d003      	beq.n	800f412 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f40a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f40e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41a:	2100      	movs	r1, #0
 800f41c:	6139      	str	r1, [r7, #16]
 800f41e:	f003 0308 	and.w	r3, r3, #8
 800f422:	617b      	str	r3, [r7, #20]
 800f424:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f428:	460b      	mov	r3, r1
 800f42a:	4313      	orrs	r3, r2
 800f42c:	d011      	beq.n	800f452 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f432:	3328      	adds	r3, #40	@ 0x28
 800f434:	2100      	movs	r1, #0
 800f436:	4618      	mov	r0, r3
 800f438:	f000 fbca 	bl	800fbd0 <RCCEx_PLL3_Config>
 800f43c:	4603      	mov	r3, r0
 800f43e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800f442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f446:	2b00      	cmp	r3, #0
 800f448:	d003      	beq.n	800f452 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f44a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f44e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45a:	2100      	movs	r1, #0
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	f003 0310 	and.w	r3, r3, #16
 800f462:	60fb      	str	r3, [r7, #12]
 800f464:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f468:	460b      	mov	r3, r1
 800f46a:	4313      	orrs	r3, r2
 800f46c:	d011      	beq.n	800f492 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f472:	3328      	adds	r3, #40	@ 0x28
 800f474:	2101      	movs	r1, #1
 800f476:	4618      	mov	r0, r3
 800f478:	f000 fbaa 	bl	800fbd0 <RCCEx_PLL3_Config>
 800f47c:	4603      	mov	r3, r0
 800f47e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f486:	2b00      	cmp	r3, #0
 800f488:	d003      	beq.n	800f492 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f48a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f48e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49a:	2100      	movs	r1, #0
 800f49c:	6039      	str	r1, [r7, #0]
 800f49e:	f003 0320 	and.w	r3, r3, #32
 800f4a2:	607b      	str	r3, [r7, #4]
 800f4a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	d011      	beq.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f4ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4b2:	3328      	adds	r3, #40	@ 0x28
 800f4b4:	2102      	movs	r1, #2
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f000 fb8a 	bl	800fbd0 <RCCEx_PLL3_Config>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f4c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d003      	beq.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f4ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800f4d2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d101      	bne.n	800f4de <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	e000      	b.n	800f4e0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800f4de:	2301      	movs	r3, #1
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f4ec:	58024400 	.word	0x58024400

0800f4f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f4f4:	f7fe fd96 	bl	800e024 <HAL_RCC_GetHCLKFreq>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	4b06      	ldr	r3, [pc, #24]	@ (800f514 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f4fc:	6a1b      	ldr	r3, [r3, #32]
 800f4fe:	091b      	lsrs	r3, r3, #4
 800f500:	f003 0307 	and.w	r3, r3, #7
 800f504:	4904      	ldr	r1, [pc, #16]	@ (800f518 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f506:	5ccb      	ldrb	r3, [r1, r3]
 800f508:	f003 031f 	and.w	r3, r3, #31
 800f50c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f510:	4618      	mov	r0, r3
 800f512:	bd80      	pop	{r7, pc}
 800f514:	58024400 	.word	0x58024400
 800f518:	0801b31c 	.word	0x0801b31c

0800f51c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b089      	sub	sp, #36	@ 0x24
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f524:	4ba1      	ldr	r3, [pc, #644]	@ (800f7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f528:	f003 0303 	and.w	r3, r3, #3
 800f52c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f52e:	4b9f      	ldr	r3, [pc, #636]	@ (800f7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f532:	0b1b      	lsrs	r3, r3, #12
 800f534:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f538:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f53a:	4b9c      	ldr	r3, [pc, #624]	@ (800f7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f53e:	091b      	lsrs	r3, r3, #4
 800f540:	f003 0301 	and.w	r3, r3, #1
 800f544:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f546:	4b99      	ldr	r3, [pc, #612]	@ (800f7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f54a:	08db      	lsrs	r3, r3, #3
 800f54c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f550:	693a      	ldr	r2, [r7, #16]
 800f552:	fb02 f303 	mul.w	r3, r2, r3
 800f556:	ee07 3a90 	vmov	s15, r3
 800f55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f55e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	2b00      	cmp	r3, #0
 800f566:	f000 8111 	beq.w	800f78c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f56a:	69bb      	ldr	r3, [r7, #24]
 800f56c:	2b02      	cmp	r3, #2
 800f56e:	f000 8083 	beq.w	800f678 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f572:	69bb      	ldr	r3, [r7, #24]
 800f574:	2b02      	cmp	r3, #2
 800f576:	f200 80a1 	bhi.w	800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d003      	beq.n	800f588 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f580:	69bb      	ldr	r3, [r7, #24]
 800f582:	2b01      	cmp	r3, #1
 800f584:	d056      	beq.n	800f634 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f586:	e099      	b.n	800f6bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f588:	4b88      	ldr	r3, [pc, #544]	@ (800f7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	f003 0320 	and.w	r3, r3, #32
 800f590:	2b00      	cmp	r3, #0
 800f592:	d02d      	beq.n	800f5f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f594:	4b85      	ldr	r3, [pc, #532]	@ (800f7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	08db      	lsrs	r3, r3, #3
 800f59a:	f003 0303 	and.w	r3, r3, #3
 800f59e:	4a84      	ldr	r2, [pc, #528]	@ (800f7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f5a0:	fa22 f303 	lsr.w	r3, r2, r3
 800f5a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	ee07 3a90 	vmov	s15, r3
 800f5ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	ee07 3a90 	vmov	s15, r3
 800f5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f5be:	4b7b      	ldr	r3, [pc, #492]	@ (800f7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5c6:	ee07 3a90 	vmov	s15, r3
 800f5ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800f5d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f5d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f5da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f5de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f5e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f5ee:	e087      	b.n	800f700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	ee07 3a90 	vmov	s15, r3
 800f5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f5fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f602:	4b6a      	ldr	r3, [pc, #424]	@ (800f7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f60a:	ee07 3a90 	vmov	s15, r3
 800f60e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f612:	ed97 6a03 	vldr	s12, [r7, #12]
 800f616:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f61a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f61e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f62e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f632:	e065      	b.n	800f700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	ee07 3a90 	vmov	s15, r3
 800f63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f63e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f7bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f646:	4b59      	ldr	r3, [pc, #356]	@ (800f7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f64e:	ee07 3a90 	vmov	s15, r3
 800f652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f656:	ed97 6a03 	vldr	s12, [r7, #12]
 800f65a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f65e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f66a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f66e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f676:	e043      	b.n	800f700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	ee07 3a90 	vmov	s15, r3
 800f67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f682:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f68a:	4b48      	ldr	r3, [pc, #288]	@ (800f7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f68c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f692:	ee07 3a90 	vmov	s15, r3
 800f696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f69a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f69e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f6a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f6ba:	e021      	b.n	800f700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	ee07 3a90 	vmov	s15, r3
 800f6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f7bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6ce:	4b37      	ldr	r3, [pc, #220]	@ (800f7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6d6:	ee07 3a90 	vmov	s15, r3
 800f6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6de:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f6fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f700:	4b2a      	ldr	r3, [pc, #168]	@ (800f7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f704:	0a5b      	lsrs	r3, r3, #9
 800f706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f70a:	ee07 3a90 	vmov	s15, r3
 800f70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f712:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f716:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f71a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f71e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f726:	ee17 2a90 	vmov	r2, s15
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f72e:	4b1f      	ldr	r3, [pc, #124]	@ (800f7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f732:	0c1b      	lsrs	r3, r3, #16
 800f734:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f738:	ee07 3a90 	vmov	s15, r3
 800f73c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f740:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f744:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f748:	edd7 6a07 	vldr	s13, [r7, #28]
 800f74c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f754:	ee17 2a90 	vmov	r2, s15
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f75c:	4b13      	ldr	r3, [pc, #76]	@ (800f7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f760:	0e1b      	lsrs	r3, r3, #24
 800f762:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f766:	ee07 3a90 	vmov	s15, r3
 800f76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f76e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f772:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f776:	edd7 6a07 	vldr	s13, [r7, #28]
 800f77a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f77e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f782:	ee17 2a90 	vmov	r2, s15
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f78a:	e008      	b.n	800f79e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2200      	movs	r2, #0
 800f790:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2200      	movs	r2, #0
 800f796:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2200      	movs	r2, #0
 800f79c:	609a      	str	r2, [r3, #8]
}
 800f79e:	bf00      	nop
 800f7a0:	3724      	adds	r7, #36	@ 0x24
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr
 800f7aa:	bf00      	nop
 800f7ac:	58024400 	.word	0x58024400
 800f7b0:	03d09000 	.word	0x03d09000
 800f7b4:	46000000 	.word	0x46000000
 800f7b8:	4c742400 	.word	0x4c742400
 800f7bc:	4a742400 	.word	0x4a742400
 800f7c0:	4bbebc20 	.word	0x4bbebc20

0800f7c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b089      	sub	sp, #36	@ 0x24
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f7cc:	4ba1      	ldr	r3, [pc, #644]	@ (800fa54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7d0:	f003 0303 	and.w	r3, r3, #3
 800f7d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f7d6:	4b9f      	ldr	r3, [pc, #636]	@ (800fa54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f7d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7da:	0d1b      	lsrs	r3, r3, #20
 800f7dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f7e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f7e2:	4b9c      	ldr	r3, [pc, #624]	@ (800fa54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f7e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7e6:	0a1b      	lsrs	r3, r3, #8
 800f7e8:	f003 0301 	and.w	r3, r3, #1
 800f7ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f7ee:	4b99      	ldr	r3, [pc, #612]	@ (800fa54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f7f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7f2:	08db      	lsrs	r3, r3, #3
 800f7f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f7f8:	693a      	ldr	r2, [r7, #16]
 800f7fa:	fb02 f303 	mul.w	r3, r2, r3
 800f7fe:	ee07 3a90 	vmov	s15, r3
 800f802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f806:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	f000 8111 	beq.w	800fa34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f812:	69bb      	ldr	r3, [r7, #24]
 800f814:	2b02      	cmp	r3, #2
 800f816:	f000 8083 	beq.w	800f920 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f81a:	69bb      	ldr	r3, [r7, #24]
 800f81c:	2b02      	cmp	r3, #2
 800f81e:	f200 80a1 	bhi.w	800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f822:	69bb      	ldr	r3, [r7, #24]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d003      	beq.n	800f830 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f828:	69bb      	ldr	r3, [r7, #24]
 800f82a:	2b01      	cmp	r3, #1
 800f82c:	d056      	beq.n	800f8dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f82e:	e099      	b.n	800f964 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f830:	4b88      	ldr	r3, [pc, #544]	@ (800fa54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f003 0320 	and.w	r3, r3, #32
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d02d      	beq.n	800f898 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f83c:	4b85      	ldr	r3, [pc, #532]	@ (800fa54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	08db      	lsrs	r3, r3, #3
 800f842:	f003 0303 	and.w	r3, r3, #3
 800f846:	4a84      	ldr	r2, [pc, #528]	@ (800fa58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f848:	fa22 f303 	lsr.w	r3, r2, r3
 800f84c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	ee07 3a90 	vmov	s15, r3
 800f854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	ee07 3a90 	vmov	s15, r3
 800f85e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f866:	4b7b      	ldr	r3, [pc, #492]	@ (800fa54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f86e:	ee07 3a90 	vmov	s15, r3
 800f872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f876:	ed97 6a03 	vldr	s12, [r7, #12]
 800f87a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fa5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f87e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f88a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f892:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f896:	e087      	b.n	800f9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	ee07 3a90 	vmov	s15, r3
 800f89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fa60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f8a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8aa:	4b6a      	ldr	r3, [pc, #424]	@ (800fa54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8b2:	ee07 3a90 	vmov	s15, r3
 800f8b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800f8be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fa5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f8c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f8ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f8da:	e065      	b.n	800f9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	ee07 3a90 	vmov	s15, r3
 800f8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fa64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8ee:	4b59      	ldr	r3, [pc, #356]	@ (800fa54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8f6:	ee07 3a90 	vmov	s15, r3
 800f8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800f902:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fa5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f90e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f91a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f91e:	e043      	b.n	800f9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	ee07 3a90 	vmov	s15, r3
 800f926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f92a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fa68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f932:	4b48      	ldr	r3, [pc, #288]	@ (800fa54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f93a:	ee07 3a90 	vmov	s15, r3
 800f93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f942:	ed97 6a03 	vldr	s12, [r7, #12]
 800f946:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fa5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f95e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f962:	e021      	b.n	800f9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	ee07 3a90 	vmov	s15, r3
 800f96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f96e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fa64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f976:	4b37      	ldr	r3, [pc, #220]	@ (800fa54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f97e:	ee07 3a90 	vmov	s15, r3
 800f982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f986:	ed97 6a03 	vldr	s12, [r7, #12]
 800f98a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fa5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f9a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f9a8:	4b2a      	ldr	r3, [pc, #168]	@ (800fa54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9ac:	0a5b      	lsrs	r3, r3, #9
 800f9ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f9b2:	ee07 3a90 	vmov	s15, r3
 800f9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f9be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f9c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800f9c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f9ce:	ee17 2a90 	vmov	r2, s15
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f9d6:	4b1f      	ldr	r3, [pc, #124]	@ (800fa54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9da:	0c1b      	lsrs	r3, r3, #16
 800f9dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f9e0:	ee07 3a90 	vmov	s15, r3
 800f9e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f9ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f9f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800f9f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f9fc:	ee17 2a90 	vmov	r2, s15
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800fa04:	4b13      	ldr	r3, [pc, #76]	@ (800fa54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa08:	0e1b      	lsrs	r3, r3, #24
 800fa0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fa0e:	ee07 3a90 	vmov	s15, r3
 800fa12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fa1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa2a:	ee17 2a90 	vmov	r2, s15
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800fa32:	e008      	b.n	800fa46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2200      	movs	r2, #0
 800fa38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2200      	movs	r2, #0
 800fa44:	609a      	str	r2, [r3, #8]
}
 800fa46:	bf00      	nop
 800fa48:	3724      	adds	r7, #36	@ 0x24
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa50:	4770      	bx	lr
 800fa52:	bf00      	nop
 800fa54:	58024400 	.word	0x58024400
 800fa58:	03d09000 	.word	0x03d09000
 800fa5c:	46000000 	.word	0x46000000
 800fa60:	4c742400 	.word	0x4c742400
 800fa64:	4a742400 	.word	0x4a742400
 800fa68:	4bbebc20 	.word	0x4bbebc20

0800fa6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b084      	sub	sp, #16
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fa76:	2300      	movs	r3, #0
 800fa78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fa7a:	4b53      	ldr	r3, [pc, #332]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fa7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa7e:	f003 0303 	and.w	r3, r3, #3
 800fa82:	2b03      	cmp	r3, #3
 800fa84:	d101      	bne.n	800fa8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800fa86:	2301      	movs	r3, #1
 800fa88:	e099      	b.n	800fbbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fa8a:	4b4f      	ldr	r3, [pc, #316]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4a4e      	ldr	r2, [pc, #312]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fa90:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fa94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fa96:	f7f3 fcbd 	bl	8003414 <HAL_GetTick>
 800fa9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fa9c:	e008      	b.n	800fab0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fa9e:	f7f3 fcb9 	bl	8003414 <HAL_GetTick>
 800faa2:	4602      	mov	r2, r0
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	1ad3      	subs	r3, r2, r3
 800faa8:	2b02      	cmp	r3, #2
 800faaa:	d901      	bls.n	800fab0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800faac:	2303      	movs	r3, #3
 800faae:	e086      	b.n	800fbbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fab0:	4b45      	ldr	r3, [pc, #276]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d1f0      	bne.n	800fa9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fabc:	4b42      	ldr	r3, [pc, #264]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fabe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fac0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	031b      	lsls	r3, r3, #12
 800faca:	493f      	ldr	r1, [pc, #252]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800facc:	4313      	orrs	r3, r2
 800face:	628b      	str	r3, [r1, #40]	@ 0x28
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	3b01      	subs	r3, #1
 800fad6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	689b      	ldr	r3, [r3, #8]
 800fade:	3b01      	subs	r3, #1
 800fae0:	025b      	lsls	r3, r3, #9
 800fae2:	b29b      	uxth	r3, r3
 800fae4:	431a      	orrs	r2, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	68db      	ldr	r3, [r3, #12]
 800faea:	3b01      	subs	r3, #1
 800faec:	041b      	lsls	r3, r3, #16
 800faee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800faf2:	431a      	orrs	r2, r3
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	691b      	ldr	r3, [r3, #16]
 800faf8:	3b01      	subs	r3, #1
 800fafa:	061b      	lsls	r3, r3, #24
 800fafc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fb00:	4931      	ldr	r1, [pc, #196]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb02:	4313      	orrs	r3, r2
 800fb04:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800fb06:	4b30      	ldr	r3, [pc, #192]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	695b      	ldr	r3, [r3, #20]
 800fb12:	492d      	ldr	r1, [pc, #180]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb14:	4313      	orrs	r3, r2
 800fb16:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800fb18:	4b2b      	ldr	r3, [pc, #172]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb1c:	f023 0220 	bic.w	r2, r3, #32
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	699b      	ldr	r3, [r3, #24]
 800fb24:	4928      	ldr	r1, [pc, #160]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb26:	4313      	orrs	r3, r2
 800fb28:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800fb2a:	4b27      	ldr	r3, [pc, #156]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb2e:	4a26      	ldr	r2, [pc, #152]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb30:	f023 0310 	bic.w	r3, r3, #16
 800fb34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fb36:	4b24      	ldr	r3, [pc, #144]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fb3a:	4b24      	ldr	r3, [pc, #144]	@ (800fbcc <RCCEx_PLL2_Config+0x160>)
 800fb3c:	4013      	ands	r3, r2
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	69d2      	ldr	r2, [r2, #28]
 800fb42:	00d2      	lsls	r2, r2, #3
 800fb44:	4920      	ldr	r1, [pc, #128]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb46:	4313      	orrs	r3, r2
 800fb48:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800fb4a:	4b1f      	ldr	r3, [pc, #124]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb4e:	4a1e      	ldr	r2, [pc, #120]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb50:	f043 0310 	orr.w	r3, r3, #16
 800fb54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d106      	bne.n	800fb6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800fb5c:	4b1a      	ldr	r3, [pc, #104]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb60:	4a19      	ldr	r2, [pc, #100]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fb66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fb68:	e00f      	b.n	800fb8a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d106      	bne.n	800fb7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800fb70:	4b15      	ldr	r3, [pc, #84]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb74:	4a14      	ldr	r2, [pc, #80]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fb7c:	e005      	b.n	800fb8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800fb7e:	4b12      	ldr	r3, [pc, #72]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb82:	4a11      	ldr	r2, [pc, #68]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800fb88:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800fb8a:	4b0f      	ldr	r3, [pc, #60]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	4a0e      	ldr	r2, [pc, #56]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fb90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fb94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fb96:	f7f3 fc3d 	bl	8003414 <HAL_GetTick>
 800fb9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fb9c:	e008      	b.n	800fbb0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fb9e:	f7f3 fc39 	bl	8003414 <HAL_GetTick>
 800fba2:	4602      	mov	r2, r0
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	1ad3      	subs	r3, r2, r3
 800fba8:	2b02      	cmp	r3, #2
 800fbaa:	d901      	bls.n	800fbb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fbac:	2303      	movs	r3, #3
 800fbae:	e006      	b.n	800fbbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fbb0:	4b05      	ldr	r3, [pc, #20]	@ (800fbc8 <RCCEx_PLL2_Config+0x15c>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d0f0      	beq.n	800fb9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800fbbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	58024400 	.word	0x58024400
 800fbcc:	ffff0007 	.word	0xffff0007

0800fbd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fbde:	4b53      	ldr	r3, [pc, #332]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fbe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbe2:	f003 0303 	and.w	r3, r3, #3
 800fbe6:	2b03      	cmp	r3, #3
 800fbe8:	d101      	bne.n	800fbee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800fbea:	2301      	movs	r3, #1
 800fbec:	e099      	b.n	800fd22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800fbee:	4b4f      	ldr	r3, [pc, #316]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	4a4e      	ldr	r2, [pc, #312]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fbf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fbf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fbfa:	f7f3 fc0b 	bl	8003414 <HAL_GetTick>
 800fbfe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fc00:	e008      	b.n	800fc14 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fc02:	f7f3 fc07 	bl	8003414 <HAL_GetTick>
 800fc06:	4602      	mov	r2, r0
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	1ad3      	subs	r3, r2, r3
 800fc0c:	2b02      	cmp	r3, #2
 800fc0e:	d901      	bls.n	800fc14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fc10:	2303      	movs	r3, #3
 800fc12:	e086      	b.n	800fd22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fc14:	4b45      	ldr	r3, [pc, #276]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d1f0      	bne.n	800fc02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800fc20:	4b42      	ldr	r3, [pc, #264]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fc22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc24:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	051b      	lsls	r3, r3, #20
 800fc2e:	493f      	ldr	r1, [pc, #252]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fc30:	4313      	orrs	r3, r2
 800fc32:	628b      	str	r3, [r1, #40]	@ 0x28
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	3b01      	subs	r3, #1
 800fc3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	689b      	ldr	r3, [r3, #8]
 800fc42:	3b01      	subs	r3, #1
 800fc44:	025b      	lsls	r3, r3, #9
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	431a      	orrs	r2, r3
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	68db      	ldr	r3, [r3, #12]
 800fc4e:	3b01      	subs	r3, #1
 800fc50:	041b      	lsls	r3, r3, #16
 800fc52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800fc56:	431a      	orrs	r2, r3
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	691b      	ldr	r3, [r3, #16]
 800fc5c:	3b01      	subs	r3, #1
 800fc5e:	061b      	lsls	r3, r3, #24
 800fc60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fc64:	4931      	ldr	r1, [pc, #196]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fc66:	4313      	orrs	r3, r2
 800fc68:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800fc6a:	4b30      	ldr	r3, [pc, #192]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fc6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	695b      	ldr	r3, [r3, #20]
 800fc76:	492d      	ldr	r1, [pc, #180]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fc78:	4313      	orrs	r3, r2
 800fc7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800fc7c:	4b2b      	ldr	r3, [pc, #172]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fc7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc80:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	699b      	ldr	r3, [r3, #24]
 800fc88:	4928      	ldr	r1, [pc, #160]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800fc8e:	4b27      	ldr	r3, [pc, #156]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fc90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc92:	4a26      	ldr	r2, [pc, #152]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fc94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fc98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fc9a:	4b24      	ldr	r3, [pc, #144]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fc9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fc9e:	4b24      	ldr	r3, [pc, #144]	@ (800fd30 <RCCEx_PLL3_Config+0x160>)
 800fca0:	4013      	ands	r3, r2
 800fca2:	687a      	ldr	r2, [r7, #4]
 800fca4:	69d2      	ldr	r2, [r2, #28]
 800fca6:	00d2      	lsls	r2, r2, #3
 800fca8:	4920      	ldr	r1, [pc, #128]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fcaa:	4313      	orrs	r3, r2
 800fcac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800fcae:	4b1f      	ldr	r3, [pc, #124]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fcb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcb2:	4a1e      	ldr	r2, [pc, #120]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fcb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fcb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d106      	bne.n	800fcce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800fcc0:	4b1a      	ldr	r3, [pc, #104]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fcc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcc4:	4a19      	ldr	r2, [pc, #100]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fcc6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800fcca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fccc:	e00f      	b.n	800fcee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d106      	bne.n	800fce2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800fcd4:	4b15      	ldr	r3, [pc, #84]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fcd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcd8:	4a14      	ldr	r2, [pc, #80]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fcda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800fcde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fce0:	e005      	b.n	800fcee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800fce2:	4b12      	ldr	r3, [pc, #72]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fce6:	4a11      	ldr	r2, [pc, #68]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fce8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fcec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800fcee:	4b0f      	ldr	r3, [pc, #60]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4a0e      	ldr	r2, [pc, #56]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fcf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fcf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fcfa:	f7f3 fb8b 	bl	8003414 <HAL_GetTick>
 800fcfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fd00:	e008      	b.n	800fd14 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fd02:	f7f3 fb87 	bl	8003414 <HAL_GetTick>
 800fd06:	4602      	mov	r2, r0
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	1ad3      	subs	r3, r2, r3
 800fd0c:	2b02      	cmp	r3, #2
 800fd0e:	d901      	bls.n	800fd14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fd10:	2303      	movs	r3, #3
 800fd12:	e006      	b.n	800fd22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fd14:	4b05      	ldr	r3, [pc, #20]	@ (800fd2c <RCCEx_PLL3_Config+0x15c>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d0f0      	beq.n	800fd02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800fd20:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3710      	adds	r7, #16
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	58024400 	.word	0x58024400
 800fd30:	ffff0007 	.word	0xffff0007

0800fd34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b084      	sub	sp, #16
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d101      	bne.n	800fd46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fd42:	2301      	movs	r3, #1
 800fd44:	e10f      	b.n	800ff66 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4a87      	ldr	r2, [pc, #540]	@ (800ff70 <HAL_SPI_Init+0x23c>)
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d00f      	beq.n	800fd76 <HAL_SPI_Init+0x42>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4a86      	ldr	r2, [pc, #536]	@ (800ff74 <HAL_SPI_Init+0x240>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d00a      	beq.n	800fd76 <HAL_SPI_Init+0x42>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4a84      	ldr	r2, [pc, #528]	@ (800ff78 <HAL_SPI_Init+0x244>)
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d005      	beq.n	800fd76 <HAL_SPI_Init+0x42>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	68db      	ldr	r3, [r3, #12]
 800fd6e:	2b0f      	cmp	r3, #15
 800fd70:	d901      	bls.n	800fd76 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800fd72:	2301      	movs	r3, #1
 800fd74:	e0f7      	b.n	800ff66 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f000 fe2e 	bl	80109d8 <SPI_GetPacketSize>
 800fd7c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	4a7b      	ldr	r2, [pc, #492]	@ (800ff70 <HAL_SPI_Init+0x23c>)
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d00c      	beq.n	800fda2 <HAL_SPI_Init+0x6e>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	4a79      	ldr	r2, [pc, #484]	@ (800ff74 <HAL_SPI_Init+0x240>)
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d007      	beq.n	800fda2 <HAL_SPI_Init+0x6e>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4a78      	ldr	r2, [pc, #480]	@ (800ff78 <HAL_SPI_Init+0x244>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d002      	beq.n	800fda2 <HAL_SPI_Init+0x6e>
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	2b08      	cmp	r3, #8
 800fda0:	d811      	bhi.n	800fdc6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fda6:	4a72      	ldr	r2, [pc, #456]	@ (800ff70 <HAL_SPI_Init+0x23c>)
 800fda8:	4293      	cmp	r3, r2
 800fdaa:	d009      	beq.n	800fdc0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a70      	ldr	r2, [pc, #448]	@ (800ff74 <HAL_SPI_Init+0x240>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d004      	beq.n	800fdc0 <HAL_SPI_Init+0x8c>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a6f      	ldr	r2, [pc, #444]	@ (800ff78 <HAL_SPI_Init+0x244>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d104      	bne.n	800fdca <HAL_SPI_Init+0x96>
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2b10      	cmp	r3, #16
 800fdc4:	d901      	bls.n	800fdca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	e0cd      	b.n	800ff66 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fdd0:	b2db      	uxtb	r3, r3
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d106      	bne.n	800fde4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f7f2 fc98 	bl	8002714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2202      	movs	r2, #2
 800fde8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f022 0201 	bic.w	r2, r2, #1
 800fdfa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	689b      	ldr	r3, [r3, #8]
 800fe02:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800fe06:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	699b      	ldr	r3, [r3, #24]
 800fe0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fe10:	d119      	bne.n	800fe46 <HAL_SPI_Init+0x112>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	685b      	ldr	r3, [r3, #4]
 800fe16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fe1a:	d103      	bne.n	800fe24 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d008      	beq.n	800fe36 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d10c      	bne.n	800fe46 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fe30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe34:	d107      	bne.n	800fe46 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	681a      	ldr	r2, [r3, #0]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800fe44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d00f      	beq.n	800fe72 <HAL_SPI_Init+0x13e>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	68db      	ldr	r3, [r3, #12]
 800fe56:	2b06      	cmp	r3, #6
 800fe58:	d90b      	bls.n	800fe72 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	430a      	orrs	r2, r1
 800fe6e:	601a      	str	r2, [r3, #0]
 800fe70:	e007      	b.n	800fe82 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800fe80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	69da      	ldr	r2, [r3, #28]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe8a:	431a      	orrs	r2, r3
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	431a      	orrs	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe94:	ea42 0103 	orr.w	r1, r2, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	68da      	ldr	r2, [r3, #12]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	430a      	orrs	r2, r1
 800fea2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feac:	431a      	orrs	r2, r3
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feb2:	431a      	orrs	r2, r3
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	699b      	ldr	r3, [r3, #24]
 800feb8:	431a      	orrs	r2, r3
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	691b      	ldr	r3, [r3, #16]
 800febe:	431a      	orrs	r2, r3
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	695b      	ldr	r3, [r3, #20]
 800fec4:	431a      	orrs	r2, r3
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6a1b      	ldr	r3, [r3, #32]
 800feca:	431a      	orrs	r2, r3
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	431a      	orrs	r2, r3
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fed6:	431a      	orrs	r2, r3
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	689b      	ldr	r3, [r3, #8]
 800fedc:	431a      	orrs	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fee2:	ea42 0103 	orr.w	r1, r2, r3
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	430a      	orrs	r2, r1
 800fef0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d113      	bne.n	800ff22 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	689b      	ldr	r3, [r3, #8]
 800ff00:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ff0c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	689b      	ldr	r3, [r3, #8]
 800ff14:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ff20:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f022 0201 	bic.w	r2, r2, #1
 800ff30:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d00a      	beq.n	800ff54 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	68db      	ldr	r3, [r3, #12]
 800ff44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	430a      	orrs	r2, r1
 800ff52:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2200      	movs	r2, #0
 800ff58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2201      	movs	r2, #1
 800ff60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800ff64:	2300      	movs	r3, #0
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3710      	adds	r7, #16
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	40013000 	.word	0x40013000
 800ff74:	40003800 	.word	0x40003800
 800ff78:	40003c00 	.word	0x40003c00

0800ff7c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b088      	sub	sp, #32
 800ff80:	af02      	add	r7, sp, #8
 800ff82:	60f8      	str	r0, [r7, #12]
 800ff84:	60b9      	str	r1, [r7, #8]
 800ff86:	603b      	str	r3, [r7, #0]
 800ff88:	4613      	mov	r3, r2
 800ff8a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	3320      	adds	r3, #32
 800ff92:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ff94:	f7f3 fa3e 	bl	8003414 <HAL_GetTick>
 800ff98:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ffa0:	b2db      	uxtb	r3, r3
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	d001      	beq.n	800ffaa <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800ffa6:	2302      	movs	r3, #2
 800ffa8:	e1d1      	b.n	801034e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d002      	beq.n	800ffb6 <HAL_SPI_Transmit+0x3a>
 800ffb0:	88fb      	ldrh	r3, [r7, #6]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d101      	bne.n	800ffba <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	e1c9      	b.n	801034e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d101      	bne.n	800ffc8 <HAL_SPI_Transmit+0x4c>
 800ffc4:	2302      	movs	r3, #2
 800ffc6:	e1c2      	b.n	801034e <HAL_SPI_Transmit+0x3d2>
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	2201      	movs	r2, #1
 800ffcc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	2203      	movs	r2, #3
 800ffd4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	68ba      	ldr	r2, [r7, #8]
 800ffe4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	88fa      	ldrh	r2, [r7, #6]
 800ffea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	88fa      	ldrh	r2, [r7, #6]
 800fff2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2200      	movs	r2, #0
 800fffa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	2200      	movs	r2, #0
 8010000:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2200      	movs	r2, #0
 8010008:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	2200      	movs	r2, #0
 8010010:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2200      	movs	r2, #0
 8010016:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	689b      	ldr	r3, [r3, #8]
 801001c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010020:	d108      	bne.n	8010034 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010030:	601a      	str	r2, [r3, #0]
 8010032:	e009      	b.n	8010048 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010046:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	685a      	ldr	r2, [r3, #4]
 801004e:	4b96      	ldr	r3, [pc, #600]	@ (80102a8 <HAL_SPI_Transmit+0x32c>)
 8010050:	4013      	ands	r3, r2
 8010052:	88f9      	ldrh	r1, [r7, #6]
 8010054:	68fa      	ldr	r2, [r7, #12]
 8010056:	6812      	ldr	r2, [r2, #0]
 8010058:	430b      	orrs	r3, r1
 801005a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	f042 0201 	orr.w	r2, r2, #1
 801006a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010074:	d107      	bne.n	8010086 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	681a      	ldr	r2, [r3, #0]
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010084:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	68db      	ldr	r3, [r3, #12]
 801008a:	2b0f      	cmp	r3, #15
 801008c:	d947      	bls.n	801011e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801008e:	e03f      	b.n	8010110 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	695b      	ldr	r3, [r3, #20]
 8010096:	f003 0302 	and.w	r3, r3, #2
 801009a:	2b02      	cmp	r3, #2
 801009c:	d114      	bne.n	80100c8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	6812      	ldr	r2, [r2, #0]
 80100a8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80100ae:	1d1a      	adds	r2, r3, #4
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80100ba:	b29b      	uxth	r3, r3
 80100bc:	3b01      	subs	r3, #1
 80100be:	b29a      	uxth	r2, r3
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80100c6:	e023      	b.n	8010110 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100c8:	f7f3 f9a4 	bl	8003414 <HAL_GetTick>
 80100cc:	4602      	mov	r2, r0
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	1ad3      	subs	r3, r2, r3
 80100d2:	683a      	ldr	r2, [r7, #0]
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d803      	bhi.n	80100e0 <HAL_SPI_Transmit+0x164>
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100de:	d102      	bne.n	80100e6 <HAL_SPI_Transmit+0x16a>
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d114      	bne.n	8010110 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80100e6:	68f8      	ldr	r0, [r7, #12]
 80100e8:	f000 fba8 	bl	801083c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80100f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2201      	movs	r2, #1
 8010100:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2200      	movs	r2, #0
 8010108:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801010c:	2303      	movs	r3, #3
 801010e:	e11e      	b.n	801034e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010116:	b29b      	uxth	r3, r3
 8010118:	2b00      	cmp	r3, #0
 801011a:	d1b9      	bne.n	8010090 <HAL_SPI_Transmit+0x114>
 801011c:	e0f1      	b.n	8010302 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	68db      	ldr	r3, [r3, #12]
 8010122:	2b07      	cmp	r3, #7
 8010124:	f240 80e6 	bls.w	80102f4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010128:	e05d      	b.n	80101e6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	695b      	ldr	r3, [r3, #20]
 8010130:	f003 0302 	and.w	r3, r3, #2
 8010134:	2b02      	cmp	r3, #2
 8010136:	d132      	bne.n	801019e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801013e:	b29b      	uxth	r3, r3
 8010140:	2b01      	cmp	r3, #1
 8010142:	d918      	bls.n	8010176 <HAL_SPI_Transmit+0x1fa>
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010148:	2b00      	cmp	r3, #0
 801014a:	d014      	beq.n	8010176 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	6812      	ldr	r2, [r2, #0]
 8010156:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801015c:	1d1a      	adds	r2, r3, #4
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010168:	b29b      	uxth	r3, r3
 801016a:	3b02      	subs	r3, #2
 801016c:	b29a      	uxth	r2, r3
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010174:	e037      	b.n	80101e6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801017a:	881a      	ldrh	r2, [r3, #0]
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010184:	1c9a      	adds	r2, r3, #2
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010190:	b29b      	uxth	r3, r3
 8010192:	3b01      	subs	r3, #1
 8010194:	b29a      	uxth	r2, r3
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801019c:	e023      	b.n	80101e6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801019e:	f7f3 f939 	bl	8003414 <HAL_GetTick>
 80101a2:	4602      	mov	r2, r0
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	1ad3      	subs	r3, r2, r3
 80101a8:	683a      	ldr	r2, [r7, #0]
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d803      	bhi.n	80101b6 <HAL_SPI_Transmit+0x23a>
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101b4:	d102      	bne.n	80101bc <HAL_SPI_Transmit+0x240>
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d114      	bne.n	80101e6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80101bc:	68f8      	ldr	r0, [r7, #12]
 80101be:	f000 fb3d 	bl	801083c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80101c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	2201      	movs	r2, #1
 80101d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	2200      	movs	r2, #0
 80101de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80101e2:	2303      	movs	r3, #3
 80101e4:	e0b3      	b.n	801034e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d19b      	bne.n	801012a <HAL_SPI_Transmit+0x1ae>
 80101f2:	e086      	b.n	8010302 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	695b      	ldr	r3, [r3, #20]
 80101fa:	f003 0302 	and.w	r3, r3, #2
 80101fe:	2b02      	cmp	r3, #2
 8010200:	d154      	bne.n	80102ac <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010208:	b29b      	uxth	r3, r3
 801020a:	2b03      	cmp	r3, #3
 801020c:	d918      	bls.n	8010240 <HAL_SPI_Transmit+0x2c4>
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010212:	2b40      	cmp	r3, #64	@ 0x40
 8010214:	d914      	bls.n	8010240 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	6812      	ldr	r2, [r2, #0]
 8010220:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010226:	1d1a      	adds	r2, r3, #4
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010232:	b29b      	uxth	r3, r3
 8010234:	3b04      	subs	r3, #4
 8010236:	b29a      	uxth	r2, r3
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801023e:	e059      	b.n	80102f4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010246:	b29b      	uxth	r3, r3
 8010248:	2b01      	cmp	r3, #1
 801024a:	d917      	bls.n	801027c <HAL_SPI_Transmit+0x300>
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010250:	2b00      	cmp	r3, #0
 8010252:	d013      	beq.n	801027c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010258:	881a      	ldrh	r2, [r3, #0]
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010262:	1c9a      	adds	r2, r3, #2
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801026e:	b29b      	uxth	r3, r3
 8010270:	3b02      	subs	r3, #2
 8010272:	b29a      	uxth	r2, r3
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801027a:	e03b      	b.n	80102f4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	3320      	adds	r3, #32
 8010286:	7812      	ldrb	r2, [r2, #0]
 8010288:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801028e:	1c5a      	adds	r2, r3, #1
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801029a:	b29b      	uxth	r3, r3
 801029c:	3b01      	subs	r3, #1
 801029e:	b29a      	uxth	r2, r3
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80102a6:	e025      	b.n	80102f4 <HAL_SPI_Transmit+0x378>
 80102a8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80102ac:	f7f3 f8b2 	bl	8003414 <HAL_GetTick>
 80102b0:	4602      	mov	r2, r0
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	1ad3      	subs	r3, r2, r3
 80102b6:	683a      	ldr	r2, [r7, #0]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d803      	bhi.n	80102c4 <HAL_SPI_Transmit+0x348>
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c2:	d102      	bne.n	80102ca <HAL_SPI_Transmit+0x34e>
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d114      	bne.n	80102f4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80102ca:	68f8      	ldr	r0, [r7, #12]
 80102cc:	f000 fab6 	bl	801083c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80102d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2201      	movs	r2, #1
 80102e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	2200      	movs	r2, #0
 80102ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80102f0:	2303      	movs	r3, #3
 80102f2:	e02c      	b.n	801034e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f47f af79 	bne.w	80101f4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	9300      	str	r3, [sp, #0]
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	2200      	movs	r2, #0
 801030a:	2108      	movs	r1, #8
 801030c:	68f8      	ldr	r0, [r7, #12]
 801030e:	f000 fb35 	bl	801097c <SPI_WaitOnFlagUntilTimeout>
 8010312:	4603      	mov	r3, r0
 8010314:	2b00      	cmp	r3, #0
 8010316:	d007      	beq.n	8010328 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801031e:	f043 0220 	orr.w	r2, r3, #32
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010328:	68f8      	ldr	r0, [r7, #12]
 801032a:	f000 fa87 	bl	801083c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2201      	movs	r2, #1
 8010332:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2200      	movs	r2, #0
 801033a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010344:	2b00      	cmp	r3, #0
 8010346:	d001      	beq.n	801034c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8010348:	2301      	movs	r3, #1
 801034a:	e000      	b.n	801034e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 801034c:	2300      	movs	r3, #0
  }
}
 801034e:	4618      	mov	r0, r3
 8010350:	3718      	adds	r7, #24
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop

08010358 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b088      	sub	sp, #32
 801035c:	af00      	add	r7, sp, #0
 801035e:	60f8      	str	r0, [r7, #12]
 8010360:	60b9      	str	r1, [r7, #8]
 8010362:	603b      	str	r3, [r7, #0]
 8010364:	4613      	mov	r3, r2
 8010366:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801036c:	095b      	lsrs	r3, r3, #5
 801036e:	b29b      	uxth	r3, r3
 8010370:	3301      	adds	r3, #1
 8010372:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	3330      	adds	r3, #48	@ 0x30
 801037a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801037c:	f7f3 f84a 	bl	8003414 <HAL_GetTick>
 8010380:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010388:	b2db      	uxtb	r3, r3
 801038a:	2b01      	cmp	r3, #1
 801038c:	d001      	beq.n	8010392 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 801038e:	2302      	movs	r3, #2
 8010390:	e250      	b.n	8010834 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d002      	beq.n	801039e <HAL_SPI_Receive+0x46>
 8010398:	88fb      	ldrh	r3, [r7, #6]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d101      	bne.n	80103a2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 801039e:	2301      	movs	r3, #1
 80103a0:	e248      	b.n	8010834 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80103a8:	2b01      	cmp	r3, #1
 80103aa:	d101      	bne.n	80103b0 <HAL_SPI_Receive+0x58>
 80103ac:	2302      	movs	r3, #2
 80103ae:	e241      	b.n	8010834 <HAL_SPI_Receive+0x4dc>
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	2201      	movs	r2, #1
 80103b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2204      	movs	r2, #4
 80103bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2200      	movs	r2, #0
 80103c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	68ba      	ldr	r2, [r7, #8]
 80103cc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	88fa      	ldrh	r2, [r7, #6]
 80103d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	88fa      	ldrh	r2, [r7, #6]
 80103da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2200      	movs	r2, #0
 80103e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	2200      	movs	r2, #0
 80103e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	2200      	movs	r2, #0
 80103f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	2200      	movs	r2, #0
 80103f8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2200      	movs	r2, #0
 80103fe:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	689b      	ldr	r3, [r3, #8]
 8010404:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010408:	d108      	bne.n	801041c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	681a      	ldr	r2, [r3, #0]
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010418:	601a      	str	r2, [r3, #0]
 801041a:	e009      	b.n	8010430 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	68db      	ldr	r3, [r3, #12]
 8010422:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801042e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	685a      	ldr	r2, [r3, #4]
 8010436:	4b95      	ldr	r3, [pc, #596]	@ (801068c <HAL_SPI_Receive+0x334>)
 8010438:	4013      	ands	r3, r2
 801043a:	88f9      	ldrh	r1, [r7, #6]
 801043c:	68fa      	ldr	r2, [r7, #12]
 801043e:	6812      	ldr	r2, [r2, #0]
 8010440:	430b      	orrs	r3, r1
 8010442:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f042 0201 	orr.w	r2, r2, #1
 8010452:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801045c:	d107      	bne.n	801046e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	681a      	ldr	r2, [r3, #0]
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801046c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	68db      	ldr	r3, [r3, #12]
 8010472:	2b0f      	cmp	r3, #15
 8010474:	d96c      	bls.n	8010550 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010476:	e064      	b.n	8010542 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	695b      	ldr	r3, [r3, #20]
 801047e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	695b      	ldr	r3, [r3, #20]
 8010486:	f003 0301 	and.w	r3, r3, #1
 801048a:	2b01      	cmp	r3, #1
 801048c:	d114      	bne.n	80104b8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	681a      	ldr	r2, [r3, #0]
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010496:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010498:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801049e:	1d1a      	adds	r2, r3, #4
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	3b01      	subs	r3, #1
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80104b6:	e044      	b.n	8010542 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80104be:	b29b      	uxth	r3, r3
 80104c0:	8bfa      	ldrh	r2, [r7, #30]
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d919      	bls.n	80104fa <HAL_SPI_Receive+0x1a2>
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d014      	beq.n	80104fa <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80104d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80104da:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80104e0:	1d1a      	adds	r2, r3, #4
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80104ec:	b29b      	uxth	r3, r3
 80104ee:	3b01      	subs	r3, #1
 80104f0:	b29a      	uxth	r2, r3
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80104f8:	e023      	b.n	8010542 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80104fa:	f7f2 ff8b 	bl	8003414 <HAL_GetTick>
 80104fe:	4602      	mov	r2, r0
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	1ad3      	subs	r3, r2, r3
 8010504:	683a      	ldr	r2, [r7, #0]
 8010506:	429a      	cmp	r2, r3
 8010508:	d803      	bhi.n	8010512 <HAL_SPI_Receive+0x1ba>
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010510:	d102      	bne.n	8010518 <HAL_SPI_Receive+0x1c0>
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d114      	bne.n	8010542 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010518:	68f8      	ldr	r0, [r7, #12]
 801051a:	f000 f98f 	bl	801083c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010524:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	2201      	movs	r2, #1
 8010532:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	2200      	movs	r2, #0
 801053a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801053e:	2303      	movs	r3, #3
 8010540:	e178      	b.n	8010834 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010548:	b29b      	uxth	r3, r3
 801054a:	2b00      	cmp	r3, #0
 801054c:	d194      	bne.n	8010478 <HAL_SPI_Receive+0x120>
 801054e:	e15e      	b.n	801080e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	68db      	ldr	r3, [r3, #12]
 8010554:	2b07      	cmp	r3, #7
 8010556:	f240 8153 	bls.w	8010800 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 801055a:	e08f      	b.n	801067c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	695b      	ldr	r3, [r3, #20]
 8010562:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	695b      	ldr	r3, [r3, #20]
 801056a:	f003 0301 	and.w	r3, r3, #1
 801056e:	2b01      	cmp	r3, #1
 8010570:	d114      	bne.n	801059c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010576:	69ba      	ldr	r2, [r7, #24]
 8010578:	8812      	ldrh	r2, [r2, #0]
 801057a:	b292      	uxth	r2, r2
 801057c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010582:	1c9a      	adds	r2, r3, #2
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801058e:	b29b      	uxth	r3, r3
 8010590:	3b01      	subs	r3, #1
 8010592:	b29a      	uxth	r2, r3
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801059a:	e06f      	b.n	801067c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80105a2:	b29b      	uxth	r3, r3
 80105a4:	8bfa      	ldrh	r2, [r7, #30]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d924      	bls.n	80105f4 <HAL_SPI_Receive+0x29c>
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d01f      	beq.n	80105f4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105b8:	69ba      	ldr	r2, [r7, #24]
 80105ba:	8812      	ldrh	r2, [r2, #0]
 80105bc:	b292      	uxth	r2, r2
 80105be:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105c4:	1c9a      	adds	r2, r3, #2
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105ce:	69ba      	ldr	r2, [r7, #24]
 80105d0:	8812      	ldrh	r2, [r2, #0]
 80105d2:	b292      	uxth	r2, r2
 80105d4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105da:	1c9a      	adds	r2, r3, #2
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80105e6:	b29b      	uxth	r3, r3
 80105e8:	3b02      	subs	r3, #2
 80105ea:	b29a      	uxth	r2, r3
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80105f2:	e043      	b.n	801067c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d119      	bne.n	8010634 <HAL_SPI_Receive+0x2dc>
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010606:	2b00      	cmp	r3, #0
 8010608:	d014      	beq.n	8010634 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801060e:	69ba      	ldr	r2, [r7, #24]
 8010610:	8812      	ldrh	r2, [r2, #0]
 8010612:	b292      	uxth	r2, r2
 8010614:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801061a:	1c9a      	adds	r2, r3, #2
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010626:	b29b      	uxth	r3, r3
 8010628:	3b01      	subs	r3, #1
 801062a:	b29a      	uxth	r2, r3
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010632:	e023      	b.n	801067c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010634:	f7f2 feee 	bl	8003414 <HAL_GetTick>
 8010638:	4602      	mov	r2, r0
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	1ad3      	subs	r3, r2, r3
 801063e:	683a      	ldr	r2, [r7, #0]
 8010640:	429a      	cmp	r2, r3
 8010642:	d803      	bhi.n	801064c <HAL_SPI_Receive+0x2f4>
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	f1b3 3fff 	cmp.w	r3, #4294967295
 801064a:	d102      	bne.n	8010652 <HAL_SPI_Receive+0x2fa>
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d114      	bne.n	801067c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010652:	68f8      	ldr	r0, [r7, #12]
 8010654:	f000 f8f2 	bl	801083c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801065e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	2201      	movs	r2, #1
 801066c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	2200      	movs	r2, #0
 8010674:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010678:	2303      	movs	r3, #3
 801067a:	e0db      	b.n	8010834 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010682:	b29b      	uxth	r3, r3
 8010684:	2b00      	cmp	r3, #0
 8010686:	f47f af69 	bne.w	801055c <HAL_SPI_Receive+0x204>
 801068a:	e0c0      	b.n	801080e <HAL_SPI_Receive+0x4b6>
 801068c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	695b      	ldr	r3, [r3, #20]
 8010696:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	695b      	ldr	r3, [r3, #20]
 801069e:	f003 0301 	and.w	r3, r3, #1
 80106a2:	2b01      	cmp	r3, #1
 80106a4:	d117      	bne.n	80106d6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80106b2:	7812      	ldrb	r2, [r2, #0]
 80106b4:	b2d2      	uxtb	r2, r2
 80106b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80106bc:	1c5a      	adds	r2, r3, #1
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	3b01      	subs	r3, #1
 80106cc:	b29a      	uxth	r2, r3
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80106d4:	e094      	b.n	8010800 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80106dc:	b29b      	uxth	r3, r3
 80106de:	8bfa      	ldrh	r2, [r7, #30]
 80106e0:	429a      	cmp	r2, r3
 80106e2:	d946      	bls.n	8010772 <HAL_SPI_Receive+0x41a>
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d041      	beq.n	8010772 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80106fa:	7812      	ldrb	r2, [r2, #0]
 80106fc:	b2d2      	uxtb	r2, r2
 80106fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010704:	1c5a      	adds	r2, r3, #1
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010716:	7812      	ldrb	r2, [r2, #0]
 8010718:	b2d2      	uxtb	r2, r2
 801071a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010720:	1c5a      	adds	r2, r3, #1
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010732:	7812      	ldrb	r2, [r2, #0]
 8010734:	b2d2      	uxtb	r2, r2
 8010736:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801073c:	1c5a      	adds	r2, r3, #1
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801074e:	7812      	ldrb	r2, [r2, #0]
 8010750:	b2d2      	uxtb	r2, r2
 8010752:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010758:	1c5a      	adds	r2, r3, #1
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010764:	b29b      	uxth	r3, r3
 8010766:	3b04      	subs	r3, #4
 8010768:	b29a      	uxth	r2, r3
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010770:	e046      	b.n	8010800 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010778:	b29b      	uxth	r3, r3
 801077a:	2b03      	cmp	r3, #3
 801077c:	d81c      	bhi.n	80107b8 <HAL_SPI_Receive+0x460>
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8010784:	2b00      	cmp	r3, #0
 8010786:	d017      	beq.n	80107b8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010794:	7812      	ldrb	r2, [r2, #0]
 8010796:	b2d2      	uxtb	r2, r2
 8010798:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801079e:	1c5a      	adds	r2, r3, #1
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	3b01      	subs	r3, #1
 80107ae:	b29a      	uxth	r2, r3
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80107b6:	e023      	b.n	8010800 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80107b8:	f7f2 fe2c 	bl	8003414 <HAL_GetTick>
 80107bc:	4602      	mov	r2, r0
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	1ad3      	subs	r3, r2, r3
 80107c2:	683a      	ldr	r2, [r7, #0]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d803      	bhi.n	80107d0 <HAL_SPI_Receive+0x478>
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107ce:	d102      	bne.n	80107d6 <HAL_SPI_Receive+0x47e>
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d114      	bne.n	8010800 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80107d6:	68f8      	ldr	r0, [r7, #12]
 80107d8:	f000 f830 	bl	801083c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80107e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	2201      	movs	r2, #1
 80107f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	2200      	movs	r2, #0
 80107f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80107fc:	2303      	movs	r3, #3
 80107fe:	e019      	b.n	8010834 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010806:	b29b      	uxth	r3, r3
 8010808:	2b00      	cmp	r3, #0
 801080a:	f47f af41 	bne.w	8010690 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801080e:	68f8      	ldr	r0, [r7, #12]
 8010810:	f000 f814 	bl	801083c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	2201      	movs	r2, #1
 8010818:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2200      	movs	r2, #0
 8010820:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801082a:	2b00      	cmp	r3, #0
 801082c:	d001      	beq.n	8010832 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 801082e:	2301      	movs	r3, #1
 8010830:	e000      	b.n	8010834 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8010832:	2300      	movs	r3, #0
  }
}
 8010834:	4618      	mov	r0, r3
 8010836:	3720      	adds	r7, #32
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801083c:	b480      	push	{r7}
 801083e:	b085      	sub	sp, #20
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	695b      	ldr	r3, [r3, #20]
 801084a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	699a      	ldr	r2, [r3, #24]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	f042 0208 	orr.w	r2, r2, #8
 801085a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	699a      	ldr	r2, [r3, #24]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f042 0210 	orr.w	r2, r2, #16
 801086a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	681a      	ldr	r2, [r3, #0]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f022 0201 	bic.w	r2, r2, #1
 801087a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	6919      	ldr	r1, [r3, #16]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681a      	ldr	r2, [r3, #0]
 8010886:	4b3c      	ldr	r3, [pc, #240]	@ (8010978 <SPI_CloseTransfer+0x13c>)
 8010888:	400b      	ands	r3, r1
 801088a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	689a      	ldr	r2, [r3, #8]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801089a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	2b04      	cmp	r3, #4
 80108a6:	d014      	beq.n	80108d2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f003 0320 	and.w	r3, r3, #32
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d00f      	beq.n	80108d2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	699a      	ldr	r2, [r3, #24]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	f042 0220 	orr.w	r2, r2, #32
 80108d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	2b03      	cmp	r3, #3
 80108dc:	d014      	beq.n	8010908 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d00f      	beq.n	8010908 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108ee:	f043 0204 	orr.w	r2, r3, #4
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	699a      	ldr	r2, [r3, #24]
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010906:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801090e:	2b00      	cmp	r3, #0
 8010910:	d00f      	beq.n	8010932 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010918:	f043 0201 	orr.w	r2, r3, #1
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	699a      	ldr	r2, [r3, #24]
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010930:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010938:	2b00      	cmp	r3, #0
 801093a:	d00f      	beq.n	801095c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010942:	f043 0208 	orr.w	r2, r3, #8
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	699a      	ldr	r2, [r3, #24]
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801095a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2200      	movs	r2, #0
 8010960:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2200      	movs	r2, #0
 8010968:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 801096c:	bf00      	nop
 801096e:	3714      	adds	r7, #20
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr
 8010978:	fffffc90 	.word	0xfffffc90

0801097c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b084      	sub	sp, #16
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	603b      	str	r3, [r7, #0]
 8010988:	4613      	mov	r3, r2
 801098a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801098c:	e010      	b.n	80109b0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801098e:	f7f2 fd41 	bl	8003414 <HAL_GetTick>
 8010992:	4602      	mov	r2, r0
 8010994:	69bb      	ldr	r3, [r7, #24]
 8010996:	1ad3      	subs	r3, r2, r3
 8010998:	683a      	ldr	r2, [r7, #0]
 801099a:	429a      	cmp	r2, r3
 801099c:	d803      	bhi.n	80109a6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a4:	d102      	bne.n	80109ac <SPI_WaitOnFlagUntilTimeout+0x30>
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d101      	bne.n	80109b0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80109ac:	2303      	movs	r3, #3
 80109ae:	e00f      	b.n	80109d0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	695a      	ldr	r2, [r3, #20]
 80109b6:	68bb      	ldr	r3, [r7, #8]
 80109b8:	4013      	ands	r3, r2
 80109ba:	68ba      	ldr	r2, [r7, #8]
 80109bc:	429a      	cmp	r2, r3
 80109be:	bf0c      	ite	eq
 80109c0:	2301      	moveq	r3, #1
 80109c2:	2300      	movne	r3, #0
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	461a      	mov	r2, r3
 80109c8:	79fb      	ldrb	r3, [r7, #7]
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d0df      	beq.n	801098e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80109ce:	2300      	movs	r3, #0
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3710      	adds	r7, #16
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80109d8:	b480      	push	{r7}
 80109da:	b085      	sub	sp, #20
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109e4:	095b      	lsrs	r3, r3, #5
 80109e6:	3301      	adds	r3, #1
 80109e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	68db      	ldr	r3, [r3, #12]
 80109ee:	3301      	adds	r3, #1
 80109f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	3307      	adds	r3, #7
 80109f6:	08db      	lsrs	r3, r3, #3
 80109f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	68fa      	ldr	r2, [r7, #12]
 80109fe:	fb02 f303 	mul.w	r3, r2, r3
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3714      	adds	r7, #20
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr

08010a0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010a0e:	b580      	push	{r7, lr}
 8010a10:	b082      	sub	sp, #8
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d101      	bne.n	8010a20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	e049      	b.n	8010ab4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d106      	bne.n	8010a3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2200      	movs	r2, #0
 8010a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f7f1 ff61 	bl	80028fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2202      	movs	r2, #2
 8010a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681a      	ldr	r2, [r3, #0]
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	3304      	adds	r3, #4
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	4610      	mov	r0, r2
 8010a4e:	f000 fd59 	bl	8011504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2201      	movs	r2, #1
 8010a56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2201      	movs	r2, #1
 8010a66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2201      	movs	r2, #1
 8010a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2201      	movs	r2, #1
 8010a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2201      	movs	r2, #1
 8010a86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2201      	movs	r2, #1
 8010a96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2201      	movs	r2, #1
 8010a9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2201      	movs	r2, #1
 8010aa6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2201      	movs	r2, #1
 8010aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010ab2:	2300      	movs	r3, #0
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3708      	adds	r7, #8
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010abc:	b480      	push	{r7}
 8010abe:	b085      	sub	sp, #20
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d001      	beq.n	8010ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	e054      	b.n	8010b7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2202      	movs	r2, #2
 8010ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	68da      	ldr	r2, [r3, #12]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f042 0201 	orr.w	r2, r2, #1
 8010aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	4a26      	ldr	r2, [pc, #152]	@ (8010b8c <HAL_TIM_Base_Start_IT+0xd0>)
 8010af2:	4293      	cmp	r3, r2
 8010af4:	d022      	beq.n	8010b3c <HAL_TIM_Base_Start_IT+0x80>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010afe:	d01d      	beq.n	8010b3c <HAL_TIM_Base_Start_IT+0x80>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4a22      	ldr	r2, [pc, #136]	@ (8010b90 <HAL_TIM_Base_Start_IT+0xd4>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d018      	beq.n	8010b3c <HAL_TIM_Base_Start_IT+0x80>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	4a21      	ldr	r2, [pc, #132]	@ (8010b94 <HAL_TIM_Base_Start_IT+0xd8>)
 8010b10:	4293      	cmp	r3, r2
 8010b12:	d013      	beq.n	8010b3c <HAL_TIM_Base_Start_IT+0x80>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	4a1f      	ldr	r2, [pc, #124]	@ (8010b98 <HAL_TIM_Base_Start_IT+0xdc>)
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d00e      	beq.n	8010b3c <HAL_TIM_Base_Start_IT+0x80>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	4a1e      	ldr	r2, [pc, #120]	@ (8010b9c <HAL_TIM_Base_Start_IT+0xe0>)
 8010b24:	4293      	cmp	r3, r2
 8010b26:	d009      	beq.n	8010b3c <HAL_TIM_Base_Start_IT+0x80>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8010ba0 <HAL_TIM_Base_Start_IT+0xe4>)
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	d004      	beq.n	8010b3c <HAL_TIM_Base_Start_IT+0x80>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	4a1b      	ldr	r2, [pc, #108]	@ (8010ba4 <HAL_TIM_Base_Start_IT+0xe8>)
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	d115      	bne.n	8010b68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	689a      	ldr	r2, [r3, #8]
 8010b42:	4b19      	ldr	r3, [pc, #100]	@ (8010ba8 <HAL_TIM_Base_Start_IT+0xec>)
 8010b44:	4013      	ands	r3, r2
 8010b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	2b06      	cmp	r3, #6
 8010b4c:	d015      	beq.n	8010b7a <HAL_TIM_Base_Start_IT+0xbe>
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b54:	d011      	beq.n	8010b7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	f042 0201 	orr.w	r2, r2, #1
 8010b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b66:	e008      	b.n	8010b7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	681a      	ldr	r2, [r3, #0]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f042 0201 	orr.w	r2, r2, #1
 8010b76:	601a      	str	r2, [r3, #0]
 8010b78:	e000      	b.n	8010b7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010b7c:	2300      	movs	r3, #0
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3714      	adds	r7, #20
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr
 8010b8a:	bf00      	nop
 8010b8c:	40010000 	.word	0x40010000
 8010b90:	40000400 	.word	0x40000400
 8010b94:	40000800 	.word	0x40000800
 8010b98:	40000c00 	.word	0x40000c00
 8010b9c:	40010400 	.word	0x40010400
 8010ba0:	40001800 	.word	0x40001800
 8010ba4:	40014000 	.word	0x40014000
 8010ba8:	00010007 	.word	0x00010007

08010bac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d101      	bne.n	8010bbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010bba:	2301      	movs	r3, #1
 8010bbc:	e049      	b.n	8010c52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010bc4:	b2db      	uxtb	r3, r3
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d106      	bne.n	8010bd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2200      	movs	r2, #0
 8010bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f7f1 fe2c 	bl	8002830 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2202      	movs	r2, #2
 8010bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681a      	ldr	r2, [r3, #0]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	3304      	adds	r3, #4
 8010be8:	4619      	mov	r1, r3
 8010bea:	4610      	mov	r0, r2
 8010bec:	f000 fc8a 	bl	8011504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2201      	movs	r2, #1
 8010bf4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2201      	movs	r2, #1
 8010c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2201      	movs	r2, #1
 8010c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2201      	movs	r2, #1
 8010c24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2201      	movs	r2, #1
 8010c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2201      	movs	r2, #1
 8010c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2201      	movs	r2, #1
 8010c44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010c50:	2300      	movs	r3, #0
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3708      	adds	r7, #8
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
	...

08010c5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d109      	bne.n	8010c80 <HAL_TIM_PWM_Start+0x24>
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010c72:	b2db      	uxtb	r3, r3
 8010c74:	2b01      	cmp	r3, #1
 8010c76:	bf14      	ite	ne
 8010c78:	2301      	movne	r3, #1
 8010c7a:	2300      	moveq	r3, #0
 8010c7c:	b2db      	uxtb	r3, r3
 8010c7e:	e03c      	b.n	8010cfa <HAL_TIM_PWM_Start+0x9e>
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	2b04      	cmp	r3, #4
 8010c84:	d109      	bne.n	8010c9a <HAL_TIM_PWM_Start+0x3e>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	2b01      	cmp	r3, #1
 8010c90:	bf14      	ite	ne
 8010c92:	2301      	movne	r3, #1
 8010c94:	2300      	moveq	r3, #0
 8010c96:	b2db      	uxtb	r3, r3
 8010c98:	e02f      	b.n	8010cfa <HAL_TIM_PWM_Start+0x9e>
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	2b08      	cmp	r3, #8
 8010c9e:	d109      	bne.n	8010cb4 <HAL_TIM_PWM_Start+0x58>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	bf14      	ite	ne
 8010cac:	2301      	movne	r3, #1
 8010cae:	2300      	moveq	r3, #0
 8010cb0:	b2db      	uxtb	r3, r3
 8010cb2:	e022      	b.n	8010cfa <HAL_TIM_PWM_Start+0x9e>
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	2b0c      	cmp	r3, #12
 8010cb8:	d109      	bne.n	8010cce <HAL_TIM_PWM_Start+0x72>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010cc0:	b2db      	uxtb	r3, r3
 8010cc2:	2b01      	cmp	r3, #1
 8010cc4:	bf14      	ite	ne
 8010cc6:	2301      	movne	r3, #1
 8010cc8:	2300      	moveq	r3, #0
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	e015      	b.n	8010cfa <HAL_TIM_PWM_Start+0x9e>
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	2b10      	cmp	r3, #16
 8010cd2:	d109      	bne.n	8010ce8 <HAL_TIM_PWM_Start+0x8c>
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	bf14      	ite	ne
 8010ce0:	2301      	movne	r3, #1
 8010ce2:	2300      	moveq	r3, #0
 8010ce4:	b2db      	uxtb	r3, r3
 8010ce6:	e008      	b.n	8010cfa <HAL_TIM_PWM_Start+0x9e>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010cee:	b2db      	uxtb	r3, r3
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	bf14      	ite	ne
 8010cf4:	2301      	movne	r3, #1
 8010cf6:	2300      	moveq	r3, #0
 8010cf8:	b2db      	uxtb	r3, r3
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d001      	beq.n	8010d02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010cfe:	2301      	movs	r3, #1
 8010d00:	e0a1      	b.n	8010e46 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d104      	bne.n	8010d12 <HAL_TIM_PWM_Start+0xb6>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2202      	movs	r2, #2
 8010d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010d10:	e023      	b.n	8010d5a <HAL_TIM_PWM_Start+0xfe>
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	2b04      	cmp	r3, #4
 8010d16:	d104      	bne.n	8010d22 <HAL_TIM_PWM_Start+0xc6>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2202      	movs	r2, #2
 8010d1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010d20:	e01b      	b.n	8010d5a <HAL_TIM_PWM_Start+0xfe>
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	2b08      	cmp	r3, #8
 8010d26:	d104      	bne.n	8010d32 <HAL_TIM_PWM_Start+0xd6>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2202      	movs	r2, #2
 8010d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010d30:	e013      	b.n	8010d5a <HAL_TIM_PWM_Start+0xfe>
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	2b0c      	cmp	r3, #12
 8010d36:	d104      	bne.n	8010d42 <HAL_TIM_PWM_Start+0xe6>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2202      	movs	r2, #2
 8010d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010d40:	e00b      	b.n	8010d5a <HAL_TIM_PWM_Start+0xfe>
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	2b10      	cmp	r3, #16
 8010d46:	d104      	bne.n	8010d52 <HAL_TIM_PWM_Start+0xf6>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2202      	movs	r2, #2
 8010d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010d50:	e003      	b.n	8010d5a <HAL_TIM_PWM_Start+0xfe>
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2202      	movs	r2, #2
 8010d56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	2201      	movs	r2, #1
 8010d60:	6839      	ldr	r1, [r7, #0]
 8010d62:	4618      	mov	r0, r3
 8010d64:	f000 ffe2 	bl	8011d2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	4a38      	ldr	r2, [pc, #224]	@ (8010e50 <HAL_TIM_PWM_Start+0x1f4>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d013      	beq.n	8010d9a <HAL_TIM_PWM_Start+0x13e>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	4a37      	ldr	r2, [pc, #220]	@ (8010e54 <HAL_TIM_PWM_Start+0x1f8>)
 8010d78:	4293      	cmp	r3, r2
 8010d7a:	d00e      	beq.n	8010d9a <HAL_TIM_PWM_Start+0x13e>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	4a35      	ldr	r2, [pc, #212]	@ (8010e58 <HAL_TIM_PWM_Start+0x1fc>)
 8010d82:	4293      	cmp	r3, r2
 8010d84:	d009      	beq.n	8010d9a <HAL_TIM_PWM_Start+0x13e>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	4a34      	ldr	r2, [pc, #208]	@ (8010e5c <HAL_TIM_PWM_Start+0x200>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d004      	beq.n	8010d9a <HAL_TIM_PWM_Start+0x13e>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	4a32      	ldr	r2, [pc, #200]	@ (8010e60 <HAL_TIM_PWM_Start+0x204>)
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d101      	bne.n	8010d9e <HAL_TIM_PWM_Start+0x142>
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	e000      	b.n	8010da0 <HAL_TIM_PWM_Start+0x144>
 8010d9e:	2300      	movs	r3, #0
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d007      	beq.n	8010db4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010db2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	4a25      	ldr	r2, [pc, #148]	@ (8010e50 <HAL_TIM_PWM_Start+0x1f4>)
 8010dba:	4293      	cmp	r3, r2
 8010dbc:	d022      	beq.n	8010e04 <HAL_TIM_PWM_Start+0x1a8>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010dc6:	d01d      	beq.n	8010e04 <HAL_TIM_PWM_Start+0x1a8>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	4a25      	ldr	r2, [pc, #148]	@ (8010e64 <HAL_TIM_PWM_Start+0x208>)
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d018      	beq.n	8010e04 <HAL_TIM_PWM_Start+0x1a8>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	4a24      	ldr	r2, [pc, #144]	@ (8010e68 <HAL_TIM_PWM_Start+0x20c>)
 8010dd8:	4293      	cmp	r3, r2
 8010dda:	d013      	beq.n	8010e04 <HAL_TIM_PWM_Start+0x1a8>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	4a22      	ldr	r2, [pc, #136]	@ (8010e6c <HAL_TIM_PWM_Start+0x210>)
 8010de2:	4293      	cmp	r3, r2
 8010de4:	d00e      	beq.n	8010e04 <HAL_TIM_PWM_Start+0x1a8>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	4a1a      	ldr	r2, [pc, #104]	@ (8010e54 <HAL_TIM_PWM_Start+0x1f8>)
 8010dec:	4293      	cmp	r3, r2
 8010dee:	d009      	beq.n	8010e04 <HAL_TIM_PWM_Start+0x1a8>
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	4a1e      	ldr	r2, [pc, #120]	@ (8010e70 <HAL_TIM_PWM_Start+0x214>)
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d004      	beq.n	8010e04 <HAL_TIM_PWM_Start+0x1a8>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	4a16      	ldr	r2, [pc, #88]	@ (8010e58 <HAL_TIM_PWM_Start+0x1fc>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d115      	bne.n	8010e30 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	689a      	ldr	r2, [r3, #8]
 8010e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8010e74 <HAL_TIM_PWM_Start+0x218>)
 8010e0c:	4013      	ands	r3, r2
 8010e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	2b06      	cmp	r3, #6
 8010e14:	d015      	beq.n	8010e42 <HAL_TIM_PWM_Start+0x1e6>
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010e1c:	d011      	beq.n	8010e42 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	681a      	ldr	r2, [r3, #0]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	f042 0201 	orr.w	r2, r2, #1
 8010e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e2e:	e008      	b.n	8010e42 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	681a      	ldr	r2, [r3, #0]
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f042 0201 	orr.w	r2, r2, #1
 8010e3e:	601a      	str	r2, [r3, #0]
 8010e40:	e000      	b.n	8010e44 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010e44:	2300      	movs	r3, #0
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3710      	adds	r7, #16
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	40010000 	.word	0x40010000
 8010e54:	40010400 	.word	0x40010400
 8010e58:	40014000 	.word	0x40014000
 8010e5c:	40014400 	.word	0x40014400
 8010e60:	40014800 	.word	0x40014800
 8010e64:	40000400 	.word	0x40000400
 8010e68:	40000800 	.word	0x40000800
 8010e6c:	40000c00 	.word	0x40000c00
 8010e70:	40001800 	.word	0x40001800
 8010e74:	00010007 	.word	0x00010007

08010e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b084      	sub	sp, #16
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	68db      	ldr	r3, [r3, #12]
 8010e86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	691b      	ldr	r3, [r3, #16]
 8010e8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	f003 0302 	and.w	r3, r3, #2
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d020      	beq.n	8010edc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	f003 0302 	and.w	r3, r3, #2
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d01b      	beq.n	8010edc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f06f 0202 	mvn.w	r2, #2
 8010eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	699b      	ldr	r3, [r3, #24]
 8010eba:	f003 0303 	and.w	r3, r3, #3
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d003      	beq.n	8010eca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f000 fb00 	bl	80114c8 <HAL_TIM_IC_CaptureCallback>
 8010ec8:	e005      	b.n	8010ed6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 faf2 	bl	80114b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f000 fb03 	bl	80114dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2200      	movs	r2, #0
 8010eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	f003 0304 	and.w	r3, r3, #4
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d020      	beq.n	8010f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	f003 0304 	and.w	r3, r3, #4
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d01b      	beq.n	8010f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	f06f 0204 	mvn.w	r2, #4
 8010ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2202      	movs	r2, #2
 8010efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	699b      	ldr	r3, [r3, #24]
 8010f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d003      	beq.n	8010f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f000 fada 	bl	80114c8 <HAL_TIM_IC_CaptureCallback>
 8010f14:	e005      	b.n	8010f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f000 facc 	bl	80114b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f000 fadd 	bl	80114dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2200      	movs	r2, #0
 8010f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	f003 0308 	and.w	r3, r3, #8
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d020      	beq.n	8010f74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	f003 0308 	and.w	r3, r3, #8
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d01b      	beq.n	8010f74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f06f 0208 	mvn.w	r2, #8
 8010f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2204      	movs	r2, #4
 8010f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	69db      	ldr	r3, [r3, #28]
 8010f52:	f003 0303 	and.w	r3, r3, #3
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d003      	beq.n	8010f62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f000 fab4 	bl	80114c8 <HAL_TIM_IC_CaptureCallback>
 8010f60:	e005      	b.n	8010f6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f62:	6878      	ldr	r0, [r7, #4]
 8010f64:	f000 faa6 	bl	80114b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f000 fab7 	bl	80114dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2200      	movs	r2, #0
 8010f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	f003 0310 	and.w	r3, r3, #16
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d020      	beq.n	8010fc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	f003 0310 	and.w	r3, r3, #16
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d01b      	beq.n	8010fc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	f06f 0210 	mvn.w	r2, #16
 8010f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2208      	movs	r2, #8
 8010f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	69db      	ldr	r3, [r3, #28]
 8010f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d003      	beq.n	8010fae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f000 fa8e 	bl	80114c8 <HAL_TIM_IC_CaptureCallback>
 8010fac:	e005      	b.n	8010fba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f000 fa80 	bl	80114b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f000 fa91 	bl	80114dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	f003 0301 	and.w	r3, r3, #1
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d00c      	beq.n	8010fe4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	f003 0301 	and.w	r3, r3, #1
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d007      	beq.n	8010fe4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	f06f 0201 	mvn.w	r2, #1
 8010fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 fa5e 	bl	80114a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d104      	bne.n	8010ff8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d00c      	beq.n	8011012 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d007      	beq.n	8011012 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801100a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f000 ffc9 	bl	8011fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011018:	2b00      	cmp	r3, #0
 801101a:	d00c      	beq.n	8011036 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011022:	2b00      	cmp	r3, #0
 8011024:	d007      	beq.n	8011036 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801102e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f000 ffc1 	bl	8011fb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801103c:	2b00      	cmp	r3, #0
 801103e:	d00c      	beq.n	801105a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011046:	2b00      	cmp	r3, #0
 8011048:	d007      	beq.n	801105a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8011052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f000 fa4b 	bl	80114f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	f003 0320 	and.w	r3, r3, #32
 8011060:	2b00      	cmp	r3, #0
 8011062:	d00c      	beq.n	801107e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f003 0320 	and.w	r3, r3, #32
 801106a:	2b00      	cmp	r3, #0
 801106c:	d007      	beq.n	801107e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	f06f 0220 	mvn.w	r2, #32
 8011076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f000 ff89 	bl	8011f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801107e:	bf00      	nop
 8011080:	3710      	adds	r7, #16
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
	...

08011088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b086      	sub	sp, #24
 801108c:	af00      	add	r7, sp, #0
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011094:	2300      	movs	r3, #0
 8011096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801109e:	2b01      	cmp	r3, #1
 80110a0:	d101      	bne.n	80110a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80110a2:	2302      	movs	r3, #2
 80110a4:	e0ff      	b.n	80112a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	2201      	movs	r2, #1
 80110aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2b14      	cmp	r3, #20
 80110b2:	f200 80f0 	bhi.w	8011296 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80110b6:	a201      	add	r2, pc, #4	@ (adr r2, 80110bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80110b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110bc:	08011111 	.word	0x08011111
 80110c0:	08011297 	.word	0x08011297
 80110c4:	08011297 	.word	0x08011297
 80110c8:	08011297 	.word	0x08011297
 80110cc:	08011151 	.word	0x08011151
 80110d0:	08011297 	.word	0x08011297
 80110d4:	08011297 	.word	0x08011297
 80110d8:	08011297 	.word	0x08011297
 80110dc:	08011193 	.word	0x08011193
 80110e0:	08011297 	.word	0x08011297
 80110e4:	08011297 	.word	0x08011297
 80110e8:	08011297 	.word	0x08011297
 80110ec:	080111d3 	.word	0x080111d3
 80110f0:	08011297 	.word	0x08011297
 80110f4:	08011297 	.word	0x08011297
 80110f8:	08011297 	.word	0x08011297
 80110fc:	08011215 	.word	0x08011215
 8011100:	08011297 	.word	0x08011297
 8011104:	08011297 	.word	0x08011297
 8011108:	08011297 	.word	0x08011297
 801110c:	08011255 	.word	0x08011255
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	68b9      	ldr	r1, [r7, #8]
 8011116:	4618      	mov	r0, r3
 8011118:	f000 fa94 	bl	8011644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	699a      	ldr	r2, [r3, #24]
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	f042 0208 	orr.w	r2, r2, #8
 801112a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	699a      	ldr	r2, [r3, #24]
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	f022 0204 	bic.w	r2, r2, #4
 801113a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	6999      	ldr	r1, [r3, #24]
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	691a      	ldr	r2, [r3, #16]
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	430a      	orrs	r2, r1
 801114c:	619a      	str	r2, [r3, #24]
      break;
 801114e:	e0a5      	b.n	801129c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	68b9      	ldr	r1, [r7, #8]
 8011156:	4618      	mov	r0, r3
 8011158:	f000 fb04 	bl	8011764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	699a      	ldr	r2, [r3, #24]
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801116a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	699a      	ldr	r2, [r3, #24]
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801117a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	6999      	ldr	r1, [r3, #24]
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	691b      	ldr	r3, [r3, #16]
 8011186:	021a      	lsls	r2, r3, #8
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	430a      	orrs	r2, r1
 801118e:	619a      	str	r2, [r3, #24]
      break;
 8011190:	e084      	b.n	801129c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	68b9      	ldr	r1, [r7, #8]
 8011198:	4618      	mov	r0, r3
 801119a:	f000 fb6d 	bl	8011878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	69da      	ldr	r2, [r3, #28]
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	f042 0208 	orr.w	r2, r2, #8
 80111ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	69da      	ldr	r2, [r3, #28]
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	f022 0204 	bic.w	r2, r2, #4
 80111bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	69d9      	ldr	r1, [r3, #28]
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	691a      	ldr	r2, [r3, #16]
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	430a      	orrs	r2, r1
 80111ce:	61da      	str	r2, [r3, #28]
      break;
 80111d0:	e064      	b.n	801129c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	68b9      	ldr	r1, [r7, #8]
 80111d8:	4618      	mov	r0, r3
 80111da:	f000 fbd5 	bl	8011988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	69da      	ldr	r2, [r3, #28]
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80111ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	69da      	ldr	r2, [r3, #28]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80111fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	69d9      	ldr	r1, [r3, #28]
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	691b      	ldr	r3, [r3, #16]
 8011208:	021a      	lsls	r2, r3, #8
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	430a      	orrs	r2, r1
 8011210:	61da      	str	r2, [r3, #28]
      break;
 8011212:	e043      	b.n	801129c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	68b9      	ldr	r1, [r7, #8]
 801121a:	4618      	mov	r0, r3
 801121c:	f000 fc1e 	bl	8011a5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	f042 0208 	orr.w	r2, r2, #8
 801122e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f022 0204 	bic.w	r2, r2, #4
 801123e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	691a      	ldr	r2, [r3, #16]
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	430a      	orrs	r2, r1
 8011250:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8011252:	e023      	b.n	801129c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	68b9      	ldr	r1, [r7, #8]
 801125a:	4618      	mov	r0, r3
 801125c:	f000 fc62 	bl	8011b24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801126e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801127e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	691b      	ldr	r3, [r3, #16]
 801128a:	021a      	lsls	r2, r3, #8
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	430a      	orrs	r2, r1
 8011292:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8011294:	e002      	b.n	801129c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011296:	2301      	movs	r3, #1
 8011298:	75fb      	strb	r3, [r7, #23]
      break;
 801129a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	2200      	movs	r2, #0
 80112a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80112a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	3718      	adds	r7, #24
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}
 80112ae:	bf00      	nop

080112b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b084      	sub	sp, #16
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80112ba:	2300      	movs	r3, #0
 80112bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	d101      	bne.n	80112cc <HAL_TIM_ConfigClockSource+0x1c>
 80112c8:	2302      	movs	r3, #2
 80112ca:	e0dc      	b.n	8011486 <HAL_TIM_ConfigClockSource+0x1d6>
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2201      	movs	r2, #1
 80112d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2202      	movs	r2, #2
 80112d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	689b      	ldr	r3, [r3, #8]
 80112e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80112e4:	68ba      	ldr	r2, [r7, #8]
 80112e6:	4b6a      	ldr	r3, [pc, #424]	@ (8011490 <HAL_TIM_ConfigClockSource+0x1e0>)
 80112e8:	4013      	ands	r3, r2
 80112ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80112f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	68ba      	ldr	r2, [r7, #8]
 80112fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	4a64      	ldr	r2, [pc, #400]	@ (8011494 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011302:	4293      	cmp	r3, r2
 8011304:	f000 80a9 	beq.w	801145a <HAL_TIM_ConfigClockSource+0x1aa>
 8011308:	4a62      	ldr	r2, [pc, #392]	@ (8011494 <HAL_TIM_ConfigClockSource+0x1e4>)
 801130a:	4293      	cmp	r3, r2
 801130c:	f200 80ae 	bhi.w	801146c <HAL_TIM_ConfigClockSource+0x1bc>
 8011310:	4a61      	ldr	r2, [pc, #388]	@ (8011498 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011312:	4293      	cmp	r3, r2
 8011314:	f000 80a1 	beq.w	801145a <HAL_TIM_ConfigClockSource+0x1aa>
 8011318:	4a5f      	ldr	r2, [pc, #380]	@ (8011498 <HAL_TIM_ConfigClockSource+0x1e8>)
 801131a:	4293      	cmp	r3, r2
 801131c:	f200 80a6 	bhi.w	801146c <HAL_TIM_ConfigClockSource+0x1bc>
 8011320:	4a5e      	ldr	r2, [pc, #376]	@ (801149c <HAL_TIM_ConfigClockSource+0x1ec>)
 8011322:	4293      	cmp	r3, r2
 8011324:	f000 8099 	beq.w	801145a <HAL_TIM_ConfigClockSource+0x1aa>
 8011328:	4a5c      	ldr	r2, [pc, #368]	@ (801149c <HAL_TIM_ConfigClockSource+0x1ec>)
 801132a:	4293      	cmp	r3, r2
 801132c:	f200 809e 	bhi.w	801146c <HAL_TIM_ConfigClockSource+0x1bc>
 8011330:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8011334:	f000 8091 	beq.w	801145a <HAL_TIM_ConfigClockSource+0x1aa>
 8011338:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801133c:	f200 8096 	bhi.w	801146c <HAL_TIM_ConfigClockSource+0x1bc>
 8011340:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011344:	f000 8089 	beq.w	801145a <HAL_TIM_ConfigClockSource+0x1aa>
 8011348:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801134c:	f200 808e 	bhi.w	801146c <HAL_TIM_ConfigClockSource+0x1bc>
 8011350:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011354:	d03e      	beq.n	80113d4 <HAL_TIM_ConfigClockSource+0x124>
 8011356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801135a:	f200 8087 	bhi.w	801146c <HAL_TIM_ConfigClockSource+0x1bc>
 801135e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011362:	f000 8086 	beq.w	8011472 <HAL_TIM_ConfigClockSource+0x1c2>
 8011366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801136a:	d87f      	bhi.n	801146c <HAL_TIM_ConfigClockSource+0x1bc>
 801136c:	2b70      	cmp	r3, #112	@ 0x70
 801136e:	d01a      	beq.n	80113a6 <HAL_TIM_ConfigClockSource+0xf6>
 8011370:	2b70      	cmp	r3, #112	@ 0x70
 8011372:	d87b      	bhi.n	801146c <HAL_TIM_ConfigClockSource+0x1bc>
 8011374:	2b60      	cmp	r3, #96	@ 0x60
 8011376:	d050      	beq.n	801141a <HAL_TIM_ConfigClockSource+0x16a>
 8011378:	2b60      	cmp	r3, #96	@ 0x60
 801137a:	d877      	bhi.n	801146c <HAL_TIM_ConfigClockSource+0x1bc>
 801137c:	2b50      	cmp	r3, #80	@ 0x50
 801137e:	d03c      	beq.n	80113fa <HAL_TIM_ConfigClockSource+0x14a>
 8011380:	2b50      	cmp	r3, #80	@ 0x50
 8011382:	d873      	bhi.n	801146c <HAL_TIM_ConfigClockSource+0x1bc>
 8011384:	2b40      	cmp	r3, #64	@ 0x40
 8011386:	d058      	beq.n	801143a <HAL_TIM_ConfigClockSource+0x18a>
 8011388:	2b40      	cmp	r3, #64	@ 0x40
 801138a:	d86f      	bhi.n	801146c <HAL_TIM_ConfigClockSource+0x1bc>
 801138c:	2b30      	cmp	r3, #48	@ 0x30
 801138e:	d064      	beq.n	801145a <HAL_TIM_ConfigClockSource+0x1aa>
 8011390:	2b30      	cmp	r3, #48	@ 0x30
 8011392:	d86b      	bhi.n	801146c <HAL_TIM_ConfigClockSource+0x1bc>
 8011394:	2b20      	cmp	r3, #32
 8011396:	d060      	beq.n	801145a <HAL_TIM_ConfigClockSource+0x1aa>
 8011398:	2b20      	cmp	r3, #32
 801139a:	d867      	bhi.n	801146c <HAL_TIM_ConfigClockSource+0x1bc>
 801139c:	2b00      	cmp	r3, #0
 801139e:	d05c      	beq.n	801145a <HAL_TIM_ConfigClockSource+0x1aa>
 80113a0:	2b10      	cmp	r3, #16
 80113a2:	d05a      	beq.n	801145a <HAL_TIM_ConfigClockSource+0x1aa>
 80113a4:	e062      	b.n	801146c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80113b6:	f000 fc99 	bl	8011cec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	689b      	ldr	r3, [r3, #8]
 80113c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80113c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	68ba      	ldr	r2, [r7, #8]
 80113d0:	609a      	str	r2, [r3, #8]
      break;
 80113d2:	e04f      	b.n	8011474 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80113e4:	f000 fc82 	bl	8011cec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	689a      	ldr	r2, [r3, #8]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80113f6:	609a      	str	r2, [r3, #8]
      break;
 80113f8:	e03c      	b.n	8011474 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011406:	461a      	mov	r2, r3
 8011408:	f000 fbf2 	bl	8011bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	2150      	movs	r1, #80	@ 0x50
 8011412:	4618      	mov	r0, r3
 8011414:	f000 fc4c 	bl	8011cb0 <TIM_ITRx_SetConfig>
      break;
 8011418:	e02c      	b.n	8011474 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011426:	461a      	mov	r2, r3
 8011428:	f000 fc11 	bl	8011c4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	2160      	movs	r1, #96	@ 0x60
 8011432:	4618      	mov	r0, r3
 8011434:	f000 fc3c 	bl	8011cb0 <TIM_ITRx_SetConfig>
      break;
 8011438:	e01c      	b.n	8011474 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011446:	461a      	mov	r2, r3
 8011448:	f000 fbd2 	bl	8011bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	2140      	movs	r1, #64	@ 0x40
 8011452:	4618      	mov	r0, r3
 8011454:	f000 fc2c 	bl	8011cb0 <TIM_ITRx_SetConfig>
      break;
 8011458:	e00c      	b.n	8011474 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681a      	ldr	r2, [r3, #0]
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	4619      	mov	r1, r3
 8011464:	4610      	mov	r0, r2
 8011466:	f000 fc23 	bl	8011cb0 <TIM_ITRx_SetConfig>
      break;
 801146a:	e003      	b.n	8011474 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801146c:	2301      	movs	r3, #1
 801146e:	73fb      	strb	r3, [r7, #15]
      break;
 8011470:	e000      	b.n	8011474 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8011472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2201      	movs	r2, #1
 8011478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2200      	movs	r2, #0
 8011480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011484:	7bfb      	ldrb	r3, [r7, #15]
}
 8011486:	4618      	mov	r0, r3
 8011488:	3710      	adds	r7, #16
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}
 801148e:	bf00      	nop
 8011490:	ffceff88 	.word	0xffceff88
 8011494:	00100040 	.word	0x00100040
 8011498:	00100030 	.word	0x00100030
 801149c:	00100020 	.word	0x00100020

080114a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80114a8:	bf00      	nop
 80114aa:	370c      	adds	r7, #12
 80114ac:	46bd      	mov	sp, r7
 80114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b2:	4770      	bx	lr

080114b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80114b4:	b480      	push	{r7}
 80114b6:	b083      	sub	sp, #12
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80114bc:	bf00      	nop
 80114be:	370c      	adds	r7, #12
 80114c0:	46bd      	mov	sp, r7
 80114c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c6:	4770      	bx	lr

080114c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b083      	sub	sp, #12
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80114d0:	bf00      	nop
 80114d2:	370c      	adds	r7, #12
 80114d4:	46bd      	mov	sp, r7
 80114d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114da:	4770      	bx	lr

080114dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80114dc:	b480      	push	{r7}
 80114de:	b083      	sub	sp, #12
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80114e4:	bf00      	nop
 80114e6:	370c      	adds	r7, #12
 80114e8:	46bd      	mov	sp, r7
 80114ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ee:	4770      	bx	lr

080114f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80114f0:	b480      	push	{r7}
 80114f2:	b083      	sub	sp, #12
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80114f8:	bf00      	nop
 80114fa:	370c      	adds	r7, #12
 80114fc:	46bd      	mov	sp, r7
 80114fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011502:	4770      	bx	lr

08011504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011504:	b480      	push	{r7}
 8011506:	b085      	sub	sp, #20
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
 801150c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	4a43      	ldr	r2, [pc, #268]	@ (8011624 <TIM_Base_SetConfig+0x120>)
 8011518:	4293      	cmp	r3, r2
 801151a:	d013      	beq.n	8011544 <TIM_Base_SetConfig+0x40>
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011522:	d00f      	beq.n	8011544 <TIM_Base_SetConfig+0x40>
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	4a40      	ldr	r2, [pc, #256]	@ (8011628 <TIM_Base_SetConfig+0x124>)
 8011528:	4293      	cmp	r3, r2
 801152a:	d00b      	beq.n	8011544 <TIM_Base_SetConfig+0x40>
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	4a3f      	ldr	r2, [pc, #252]	@ (801162c <TIM_Base_SetConfig+0x128>)
 8011530:	4293      	cmp	r3, r2
 8011532:	d007      	beq.n	8011544 <TIM_Base_SetConfig+0x40>
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	4a3e      	ldr	r2, [pc, #248]	@ (8011630 <TIM_Base_SetConfig+0x12c>)
 8011538:	4293      	cmp	r3, r2
 801153a:	d003      	beq.n	8011544 <TIM_Base_SetConfig+0x40>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	4a3d      	ldr	r2, [pc, #244]	@ (8011634 <TIM_Base_SetConfig+0x130>)
 8011540:	4293      	cmp	r3, r2
 8011542:	d108      	bne.n	8011556 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801154a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	68fa      	ldr	r2, [r7, #12]
 8011552:	4313      	orrs	r3, r2
 8011554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	4a32      	ldr	r2, [pc, #200]	@ (8011624 <TIM_Base_SetConfig+0x120>)
 801155a:	4293      	cmp	r3, r2
 801155c:	d01f      	beq.n	801159e <TIM_Base_SetConfig+0x9a>
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011564:	d01b      	beq.n	801159e <TIM_Base_SetConfig+0x9a>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	4a2f      	ldr	r2, [pc, #188]	@ (8011628 <TIM_Base_SetConfig+0x124>)
 801156a:	4293      	cmp	r3, r2
 801156c:	d017      	beq.n	801159e <TIM_Base_SetConfig+0x9a>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	4a2e      	ldr	r2, [pc, #184]	@ (801162c <TIM_Base_SetConfig+0x128>)
 8011572:	4293      	cmp	r3, r2
 8011574:	d013      	beq.n	801159e <TIM_Base_SetConfig+0x9a>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	4a2d      	ldr	r2, [pc, #180]	@ (8011630 <TIM_Base_SetConfig+0x12c>)
 801157a:	4293      	cmp	r3, r2
 801157c:	d00f      	beq.n	801159e <TIM_Base_SetConfig+0x9a>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	4a2c      	ldr	r2, [pc, #176]	@ (8011634 <TIM_Base_SetConfig+0x130>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d00b      	beq.n	801159e <TIM_Base_SetConfig+0x9a>
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	4a2b      	ldr	r2, [pc, #172]	@ (8011638 <TIM_Base_SetConfig+0x134>)
 801158a:	4293      	cmp	r3, r2
 801158c:	d007      	beq.n	801159e <TIM_Base_SetConfig+0x9a>
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	4a2a      	ldr	r2, [pc, #168]	@ (801163c <TIM_Base_SetConfig+0x138>)
 8011592:	4293      	cmp	r3, r2
 8011594:	d003      	beq.n	801159e <TIM_Base_SetConfig+0x9a>
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	4a29      	ldr	r2, [pc, #164]	@ (8011640 <TIM_Base_SetConfig+0x13c>)
 801159a:	4293      	cmp	r3, r2
 801159c:	d108      	bne.n	80115b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80115a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	68fa      	ldr	r2, [r7, #12]
 80115ac:	4313      	orrs	r3, r2
 80115ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	695b      	ldr	r3, [r3, #20]
 80115ba:	4313      	orrs	r3, r2
 80115bc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	689a      	ldr	r2, [r3, #8]
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	4a14      	ldr	r2, [pc, #80]	@ (8011624 <TIM_Base_SetConfig+0x120>)
 80115d2:	4293      	cmp	r3, r2
 80115d4:	d00f      	beq.n	80115f6 <TIM_Base_SetConfig+0xf2>
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	4a16      	ldr	r2, [pc, #88]	@ (8011634 <TIM_Base_SetConfig+0x130>)
 80115da:	4293      	cmp	r3, r2
 80115dc:	d00b      	beq.n	80115f6 <TIM_Base_SetConfig+0xf2>
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	4a15      	ldr	r2, [pc, #84]	@ (8011638 <TIM_Base_SetConfig+0x134>)
 80115e2:	4293      	cmp	r3, r2
 80115e4:	d007      	beq.n	80115f6 <TIM_Base_SetConfig+0xf2>
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	4a14      	ldr	r2, [pc, #80]	@ (801163c <TIM_Base_SetConfig+0x138>)
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d003      	beq.n	80115f6 <TIM_Base_SetConfig+0xf2>
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	4a13      	ldr	r2, [pc, #76]	@ (8011640 <TIM_Base_SetConfig+0x13c>)
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d103      	bne.n	80115fe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	691a      	ldr	r2, [r3, #16]
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	f043 0204 	orr.w	r2, r3, #4
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2201      	movs	r2, #1
 801160e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	68fa      	ldr	r2, [r7, #12]
 8011614:	601a      	str	r2, [r3, #0]
}
 8011616:	bf00      	nop
 8011618:	3714      	adds	r7, #20
 801161a:	46bd      	mov	sp, r7
 801161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011620:	4770      	bx	lr
 8011622:	bf00      	nop
 8011624:	40010000 	.word	0x40010000
 8011628:	40000400 	.word	0x40000400
 801162c:	40000800 	.word	0x40000800
 8011630:	40000c00 	.word	0x40000c00
 8011634:	40010400 	.word	0x40010400
 8011638:	40014000 	.word	0x40014000
 801163c:	40014400 	.word	0x40014400
 8011640:	40014800 	.word	0x40014800

08011644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011644:	b480      	push	{r7}
 8011646:	b087      	sub	sp, #28
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6a1b      	ldr	r3, [r3, #32]
 8011652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	6a1b      	ldr	r3, [r3, #32]
 8011658:	f023 0201 	bic.w	r2, r3, #1
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	699b      	ldr	r3, [r3, #24]
 801166a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801166c:	68fa      	ldr	r2, [r7, #12]
 801166e:	4b37      	ldr	r3, [pc, #220]	@ (801174c <TIM_OC1_SetConfig+0x108>)
 8011670:	4013      	ands	r3, r2
 8011672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	f023 0303 	bic.w	r3, r3, #3
 801167a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	68fa      	ldr	r2, [r7, #12]
 8011682:	4313      	orrs	r3, r2
 8011684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	f023 0302 	bic.w	r3, r3, #2
 801168c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	689b      	ldr	r3, [r3, #8]
 8011692:	697a      	ldr	r2, [r7, #20]
 8011694:	4313      	orrs	r3, r2
 8011696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	4a2d      	ldr	r2, [pc, #180]	@ (8011750 <TIM_OC1_SetConfig+0x10c>)
 801169c:	4293      	cmp	r3, r2
 801169e:	d00f      	beq.n	80116c0 <TIM_OC1_SetConfig+0x7c>
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	4a2c      	ldr	r2, [pc, #176]	@ (8011754 <TIM_OC1_SetConfig+0x110>)
 80116a4:	4293      	cmp	r3, r2
 80116a6:	d00b      	beq.n	80116c0 <TIM_OC1_SetConfig+0x7c>
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	4a2b      	ldr	r2, [pc, #172]	@ (8011758 <TIM_OC1_SetConfig+0x114>)
 80116ac:	4293      	cmp	r3, r2
 80116ae:	d007      	beq.n	80116c0 <TIM_OC1_SetConfig+0x7c>
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	4a2a      	ldr	r2, [pc, #168]	@ (801175c <TIM_OC1_SetConfig+0x118>)
 80116b4:	4293      	cmp	r3, r2
 80116b6:	d003      	beq.n	80116c0 <TIM_OC1_SetConfig+0x7c>
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	4a29      	ldr	r2, [pc, #164]	@ (8011760 <TIM_OC1_SetConfig+0x11c>)
 80116bc:	4293      	cmp	r3, r2
 80116be:	d10c      	bne.n	80116da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	f023 0308 	bic.w	r3, r3, #8
 80116c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	697a      	ldr	r2, [r7, #20]
 80116ce:	4313      	orrs	r3, r2
 80116d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80116d2:	697b      	ldr	r3, [r7, #20]
 80116d4:	f023 0304 	bic.w	r3, r3, #4
 80116d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	4a1c      	ldr	r2, [pc, #112]	@ (8011750 <TIM_OC1_SetConfig+0x10c>)
 80116de:	4293      	cmp	r3, r2
 80116e0:	d00f      	beq.n	8011702 <TIM_OC1_SetConfig+0xbe>
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	4a1b      	ldr	r2, [pc, #108]	@ (8011754 <TIM_OC1_SetConfig+0x110>)
 80116e6:	4293      	cmp	r3, r2
 80116e8:	d00b      	beq.n	8011702 <TIM_OC1_SetConfig+0xbe>
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	4a1a      	ldr	r2, [pc, #104]	@ (8011758 <TIM_OC1_SetConfig+0x114>)
 80116ee:	4293      	cmp	r3, r2
 80116f0:	d007      	beq.n	8011702 <TIM_OC1_SetConfig+0xbe>
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	4a19      	ldr	r2, [pc, #100]	@ (801175c <TIM_OC1_SetConfig+0x118>)
 80116f6:	4293      	cmp	r3, r2
 80116f8:	d003      	beq.n	8011702 <TIM_OC1_SetConfig+0xbe>
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	4a18      	ldr	r2, [pc, #96]	@ (8011760 <TIM_OC1_SetConfig+0x11c>)
 80116fe:	4293      	cmp	r3, r2
 8011700:	d111      	bne.n	8011726 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011702:	693b      	ldr	r3, [r7, #16]
 8011704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	695b      	ldr	r3, [r3, #20]
 8011716:	693a      	ldr	r2, [r7, #16]
 8011718:	4313      	orrs	r3, r2
 801171a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	699b      	ldr	r3, [r3, #24]
 8011720:	693a      	ldr	r2, [r7, #16]
 8011722:	4313      	orrs	r3, r2
 8011724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	693a      	ldr	r2, [r7, #16]
 801172a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	68fa      	ldr	r2, [r7, #12]
 8011730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	685a      	ldr	r2, [r3, #4]
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	697a      	ldr	r2, [r7, #20]
 801173e:	621a      	str	r2, [r3, #32]
}
 8011740:	bf00      	nop
 8011742:	371c      	adds	r7, #28
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr
 801174c:	fffeff8f 	.word	0xfffeff8f
 8011750:	40010000 	.word	0x40010000
 8011754:	40010400 	.word	0x40010400
 8011758:	40014000 	.word	0x40014000
 801175c:	40014400 	.word	0x40014400
 8011760:	40014800 	.word	0x40014800

08011764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011764:	b480      	push	{r7}
 8011766:	b087      	sub	sp, #28
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6a1b      	ldr	r3, [r3, #32]
 8011772:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6a1b      	ldr	r3, [r3, #32]
 8011778:	f023 0210 	bic.w	r2, r3, #16
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	699b      	ldr	r3, [r3, #24]
 801178a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801178c:	68fa      	ldr	r2, [r7, #12]
 801178e:	4b34      	ldr	r3, [pc, #208]	@ (8011860 <TIM_OC2_SetConfig+0xfc>)
 8011790:	4013      	ands	r3, r2
 8011792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801179a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	021b      	lsls	r3, r3, #8
 80117a2:	68fa      	ldr	r2, [r7, #12]
 80117a4:	4313      	orrs	r3, r2
 80117a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	f023 0320 	bic.w	r3, r3, #32
 80117ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	689b      	ldr	r3, [r3, #8]
 80117b4:	011b      	lsls	r3, r3, #4
 80117b6:	697a      	ldr	r2, [r7, #20]
 80117b8:	4313      	orrs	r3, r2
 80117ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	4a29      	ldr	r2, [pc, #164]	@ (8011864 <TIM_OC2_SetConfig+0x100>)
 80117c0:	4293      	cmp	r3, r2
 80117c2:	d003      	beq.n	80117cc <TIM_OC2_SetConfig+0x68>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	4a28      	ldr	r2, [pc, #160]	@ (8011868 <TIM_OC2_SetConfig+0x104>)
 80117c8:	4293      	cmp	r3, r2
 80117ca:	d10d      	bne.n	80117e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80117d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	68db      	ldr	r3, [r3, #12]
 80117d8:	011b      	lsls	r3, r3, #4
 80117da:	697a      	ldr	r2, [r7, #20]
 80117dc:	4313      	orrs	r3, r2
 80117de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80117e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	4a1e      	ldr	r2, [pc, #120]	@ (8011864 <TIM_OC2_SetConfig+0x100>)
 80117ec:	4293      	cmp	r3, r2
 80117ee:	d00f      	beq.n	8011810 <TIM_OC2_SetConfig+0xac>
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	4a1d      	ldr	r2, [pc, #116]	@ (8011868 <TIM_OC2_SetConfig+0x104>)
 80117f4:	4293      	cmp	r3, r2
 80117f6:	d00b      	beq.n	8011810 <TIM_OC2_SetConfig+0xac>
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	4a1c      	ldr	r2, [pc, #112]	@ (801186c <TIM_OC2_SetConfig+0x108>)
 80117fc:	4293      	cmp	r3, r2
 80117fe:	d007      	beq.n	8011810 <TIM_OC2_SetConfig+0xac>
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	4a1b      	ldr	r2, [pc, #108]	@ (8011870 <TIM_OC2_SetConfig+0x10c>)
 8011804:	4293      	cmp	r3, r2
 8011806:	d003      	beq.n	8011810 <TIM_OC2_SetConfig+0xac>
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	4a1a      	ldr	r2, [pc, #104]	@ (8011874 <TIM_OC2_SetConfig+0x110>)
 801180c:	4293      	cmp	r3, r2
 801180e:	d113      	bne.n	8011838 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011810:	693b      	ldr	r3, [r7, #16]
 8011812:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8011816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011818:	693b      	ldr	r3, [r7, #16]
 801181a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801181e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	695b      	ldr	r3, [r3, #20]
 8011824:	009b      	lsls	r3, r3, #2
 8011826:	693a      	ldr	r2, [r7, #16]
 8011828:	4313      	orrs	r3, r2
 801182a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	699b      	ldr	r3, [r3, #24]
 8011830:	009b      	lsls	r3, r3, #2
 8011832:	693a      	ldr	r2, [r7, #16]
 8011834:	4313      	orrs	r3, r2
 8011836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	693a      	ldr	r2, [r7, #16]
 801183c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	68fa      	ldr	r2, [r7, #12]
 8011842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	685a      	ldr	r2, [r3, #4]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	697a      	ldr	r2, [r7, #20]
 8011850:	621a      	str	r2, [r3, #32]
}
 8011852:	bf00      	nop
 8011854:	371c      	adds	r7, #28
 8011856:	46bd      	mov	sp, r7
 8011858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185c:	4770      	bx	lr
 801185e:	bf00      	nop
 8011860:	feff8fff 	.word	0xfeff8fff
 8011864:	40010000 	.word	0x40010000
 8011868:	40010400 	.word	0x40010400
 801186c:	40014000 	.word	0x40014000
 8011870:	40014400 	.word	0x40014400
 8011874:	40014800 	.word	0x40014800

08011878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011878:	b480      	push	{r7}
 801187a:	b087      	sub	sp, #28
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
 8011880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6a1b      	ldr	r3, [r3, #32]
 8011886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6a1b      	ldr	r3, [r3, #32]
 801188c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	685b      	ldr	r3, [r3, #4]
 8011898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	69db      	ldr	r3, [r3, #28]
 801189e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80118a0:	68fa      	ldr	r2, [r7, #12]
 80118a2:	4b33      	ldr	r3, [pc, #204]	@ (8011970 <TIM_OC3_SetConfig+0xf8>)
 80118a4:	4013      	ands	r3, r2
 80118a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	f023 0303 	bic.w	r3, r3, #3
 80118ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	68fa      	ldr	r2, [r7, #12]
 80118b6:	4313      	orrs	r3, r2
 80118b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80118c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	689b      	ldr	r3, [r3, #8]
 80118c6:	021b      	lsls	r3, r3, #8
 80118c8:	697a      	ldr	r2, [r7, #20]
 80118ca:	4313      	orrs	r3, r2
 80118cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	4a28      	ldr	r2, [pc, #160]	@ (8011974 <TIM_OC3_SetConfig+0xfc>)
 80118d2:	4293      	cmp	r3, r2
 80118d4:	d003      	beq.n	80118de <TIM_OC3_SetConfig+0x66>
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	4a27      	ldr	r2, [pc, #156]	@ (8011978 <TIM_OC3_SetConfig+0x100>)
 80118da:	4293      	cmp	r3, r2
 80118dc:	d10d      	bne.n	80118fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80118e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	68db      	ldr	r3, [r3, #12]
 80118ea:	021b      	lsls	r3, r3, #8
 80118ec:	697a      	ldr	r2, [r7, #20]
 80118ee:	4313      	orrs	r3, r2
 80118f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80118f2:	697b      	ldr	r3, [r7, #20]
 80118f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80118f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	4a1d      	ldr	r2, [pc, #116]	@ (8011974 <TIM_OC3_SetConfig+0xfc>)
 80118fe:	4293      	cmp	r3, r2
 8011900:	d00f      	beq.n	8011922 <TIM_OC3_SetConfig+0xaa>
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	4a1c      	ldr	r2, [pc, #112]	@ (8011978 <TIM_OC3_SetConfig+0x100>)
 8011906:	4293      	cmp	r3, r2
 8011908:	d00b      	beq.n	8011922 <TIM_OC3_SetConfig+0xaa>
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	4a1b      	ldr	r2, [pc, #108]	@ (801197c <TIM_OC3_SetConfig+0x104>)
 801190e:	4293      	cmp	r3, r2
 8011910:	d007      	beq.n	8011922 <TIM_OC3_SetConfig+0xaa>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	4a1a      	ldr	r2, [pc, #104]	@ (8011980 <TIM_OC3_SetConfig+0x108>)
 8011916:	4293      	cmp	r3, r2
 8011918:	d003      	beq.n	8011922 <TIM_OC3_SetConfig+0xaa>
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	4a19      	ldr	r2, [pc, #100]	@ (8011984 <TIM_OC3_SetConfig+0x10c>)
 801191e:	4293      	cmp	r3, r2
 8011920:	d113      	bne.n	801194a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	695b      	ldr	r3, [r3, #20]
 8011936:	011b      	lsls	r3, r3, #4
 8011938:	693a      	ldr	r2, [r7, #16]
 801193a:	4313      	orrs	r3, r2
 801193c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	699b      	ldr	r3, [r3, #24]
 8011942:	011b      	lsls	r3, r3, #4
 8011944:	693a      	ldr	r2, [r7, #16]
 8011946:	4313      	orrs	r3, r2
 8011948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	693a      	ldr	r2, [r7, #16]
 801194e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	68fa      	ldr	r2, [r7, #12]
 8011954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	685a      	ldr	r2, [r3, #4]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	697a      	ldr	r2, [r7, #20]
 8011962:	621a      	str	r2, [r3, #32]
}
 8011964:	bf00      	nop
 8011966:	371c      	adds	r7, #28
 8011968:	46bd      	mov	sp, r7
 801196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196e:	4770      	bx	lr
 8011970:	fffeff8f 	.word	0xfffeff8f
 8011974:	40010000 	.word	0x40010000
 8011978:	40010400 	.word	0x40010400
 801197c:	40014000 	.word	0x40014000
 8011980:	40014400 	.word	0x40014400
 8011984:	40014800 	.word	0x40014800

08011988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011988:	b480      	push	{r7}
 801198a:	b087      	sub	sp, #28
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6a1b      	ldr	r3, [r3, #32]
 8011996:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6a1b      	ldr	r3, [r3, #32]
 801199c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	685b      	ldr	r3, [r3, #4]
 80119a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	69db      	ldr	r3, [r3, #28]
 80119ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80119b0:	68fa      	ldr	r2, [r7, #12]
 80119b2:	4b24      	ldr	r3, [pc, #144]	@ (8011a44 <TIM_OC4_SetConfig+0xbc>)
 80119b4:	4013      	ands	r3, r2
 80119b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80119be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	021b      	lsls	r3, r3, #8
 80119c6:	68fa      	ldr	r2, [r7, #12]
 80119c8:	4313      	orrs	r3, r2
 80119ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80119d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	689b      	ldr	r3, [r3, #8]
 80119d8:	031b      	lsls	r3, r3, #12
 80119da:	693a      	ldr	r2, [r7, #16]
 80119dc:	4313      	orrs	r3, r2
 80119de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	4a19      	ldr	r2, [pc, #100]	@ (8011a48 <TIM_OC4_SetConfig+0xc0>)
 80119e4:	4293      	cmp	r3, r2
 80119e6:	d00f      	beq.n	8011a08 <TIM_OC4_SetConfig+0x80>
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	4a18      	ldr	r2, [pc, #96]	@ (8011a4c <TIM_OC4_SetConfig+0xc4>)
 80119ec:	4293      	cmp	r3, r2
 80119ee:	d00b      	beq.n	8011a08 <TIM_OC4_SetConfig+0x80>
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	4a17      	ldr	r2, [pc, #92]	@ (8011a50 <TIM_OC4_SetConfig+0xc8>)
 80119f4:	4293      	cmp	r3, r2
 80119f6:	d007      	beq.n	8011a08 <TIM_OC4_SetConfig+0x80>
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	4a16      	ldr	r2, [pc, #88]	@ (8011a54 <TIM_OC4_SetConfig+0xcc>)
 80119fc:	4293      	cmp	r3, r2
 80119fe:	d003      	beq.n	8011a08 <TIM_OC4_SetConfig+0x80>
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	4a15      	ldr	r2, [pc, #84]	@ (8011a58 <TIM_OC4_SetConfig+0xd0>)
 8011a04:	4293      	cmp	r3, r2
 8011a06:	d109      	bne.n	8011a1c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011a0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	695b      	ldr	r3, [r3, #20]
 8011a14:	019b      	lsls	r3, r3, #6
 8011a16:	697a      	ldr	r2, [r7, #20]
 8011a18:	4313      	orrs	r3, r2
 8011a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	697a      	ldr	r2, [r7, #20]
 8011a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	68fa      	ldr	r2, [r7, #12]
 8011a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	685a      	ldr	r2, [r3, #4]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	693a      	ldr	r2, [r7, #16]
 8011a34:	621a      	str	r2, [r3, #32]
}
 8011a36:	bf00      	nop
 8011a38:	371c      	adds	r7, #28
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a40:	4770      	bx	lr
 8011a42:	bf00      	nop
 8011a44:	feff8fff 	.word	0xfeff8fff
 8011a48:	40010000 	.word	0x40010000
 8011a4c:	40010400 	.word	0x40010400
 8011a50:	40014000 	.word	0x40014000
 8011a54:	40014400 	.word	0x40014400
 8011a58:	40014800 	.word	0x40014800

08011a5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b087      	sub	sp, #28
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
 8011a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6a1b      	ldr	r3, [r3, #32]
 8011a6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6a1b      	ldr	r3, [r3, #32]
 8011a70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011a84:	68fa      	ldr	r2, [r7, #12]
 8011a86:	4b21      	ldr	r3, [pc, #132]	@ (8011b0c <TIM_OC5_SetConfig+0xb0>)
 8011a88:	4013      	ands	r3, r2
 8011a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	68fa      	ldr	r2, [r7, #12]
 8011a92:	4313      	orrs	r3, r2
 8011a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011a96:	693b      	ldr	r3, [r7, #16]
 8011a98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8011a9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	689b      	ldr	r3, [r3, #8]
 8011aa2:	041b      	lsls	r3, r3, #16
 8011aa4:	693a      	ldr	r2, [r7, #16]
 8011aa6:	4313      	orrs	r3, r2
 8011aa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	4a18      	ldr	r2, [pc, #96]	@ (8011b10 <TIM_OC5_SetConfig+0xb4>)
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	d00f      	beq.n	8011ad2 <TIM_OC5_SetConfig+0x76>
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	4a17      	ldr	r2, [pc, #92]	@ (8011b14 <TIM_OC5_SetConfig+0xb8>)
 8011ab6:	4293      	cmp	r3, r2
 8011ab8:	d00b      	beq.n	8011ad2 <TIM_OC5_SetConfig+0x76>
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	4a16      	ldr	r2, [pc, #88]	@ (8011b18 <TIM_OC5_SetConfig+0xbc>)
 8011abe:	4293      	cmp	r3, r2
 8011ac0:	d007      	beq.n	8011ad2 <TIM_OC5_SetConfig+0x76>
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	4a15      	ldr	r2, [pc, #84]	@ (8011b1c <TIM_OC5_SetConfig+0xc0>)
 8011ac6:	4293      	cmp	r3, r2
 8011ac8:	d003      	beq.n	8011ad2 <TIM_OC5_SetConfig+0x76>
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	4a14      	ldr	r2, [pc, #80]	@ (8011b20 <TIM_OC5_SetConfig+0xc4>)
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d109      	bne.n	8011ae6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	695b      	ldr	r3, [r3, #20]
 8011ade:	021b      	lsls	r3, r3, #8
 8011ae0:	697a      	ldr	r2, [r7, #20]
 8011ae2:	4313      	orrs	r3, r2
 8011ae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	697a      	ldr	r2, [r7, #20]
 8011aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	68fa      	ldr	r2, [r7, #12]
 8011af0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	685a      	ldr	r2, [r3, #4]
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	693a      	ldr	r2, [r7, #16]
 8011afe:	621a      	str	r2, [r3, #32]
}
 8011b00:	bf00      	nop
 8011b02:	371c      	adds	r7, #28
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr
 8011b0c:	fffeff8f 	.word	0xfffeff8f
 8011b10:	40010000 	.word	0x40010000
 8011b14:	40010400 	.word	0x40010400
 8011b18:	40014000 	.word	0x40014000
 8011b1c:	40014400 	.word	0x40014400
 8011b20:	40014800 	.word	0x40014800

08011b24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011b24:	b480      	push	{r7}
 8011b26:	b087      	sub	sp, #28
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6a1b      	ldr	r3, [r3, #32]
 8011b32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6a1b      	ldr	r3, [r3, #32]
 8011b38:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	685b      	ldr	r3, [r3, #4]
 8011b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011b4c:	68fa      	ldr	r2, [r7, #12]
 8011b4e:	4b22      	ldr	r3, [pc, #136]	@ (8011bd8 <TIM_OC6_SetConfig+0xb4>)
 8011b50:	4013      	ands	r3, r2
 8011b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	021b      	lsls	r3, r3, #8
 8011b5a:	68fa      	ldr	r2, [r7, #12]
 8011b5c:	4313      	orrs	r3, r2
 8011b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	689b      	ldr	r3, [r3, #8]
 8011b6c:	051b      	lsls	r3, r3, #20
 8011b6e:	693a      	ldr	r2, [r7, #16]
 8011b70:	4313      	orrs	r3, r2
 8011b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	4a19      	ldr	r2, [pc, #100]	@ (8011bdc <TIM_OC6_SetConfig+0xb8>)
 8011b78:	4293      	cmp	r3, r2
 8011b7a:	d00f      	beq.n	8011b9c <TIM_OC6_SetConfig+0x78>
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	4a18      	ldr	r2, [pc, #96]	@ (8011be0 <TIM_OC6_SetConfig+0xbc>)
 8011b80:	4293      	cmp	r3, r2
 8011b82:	d00b      	beq.n	8011b9c <TIM_OC6_SetConfig+0x78>
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	4a17      	ldr	r2, [pc, #92]	@ (8011be4 <TIM_OC6_SetConfig+0xc0>)
 8011b88:	4293      	cmp	r3, r2
 8011b8a:	d007      	beq.n	8011b9c <TIM_OC6_SetConfig+0x78>
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	4a16      	ldr	r2, [pc, #88]	@ (8011be8 <TIM_OC6_SetConfig+0xc4>)
 8011b90:	4293      	cmp	r3, r2
 8011b92:	d003      	beq.n	8011b9c <TIM_OC6_SetConfig+0x78>
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	4a15      	ldr	r2, [pc, #84]	@ (8011bec <TIM_OC6_SetConfig+0xc8>)
 8011b98:	4293      	cmp	r3, r2
 8011b9a:	d109      	bne.n	8011bb0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	695b      	ldr	r3, [r3, #20]
 8011ba8:	029b      	lsls	r3, r3, #10
 8011baa:	697a      	ldr	r2, [r7, #20]
 8011bac:	4313      	orrs	r3, r2
 8011bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	697a      	ldr	r2, [r7, #20]
 8011bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	68fa      	ldr	r2, [r7, #12]
 8011bba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	685a      	ldr	r2, [r3, #4]
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	693a      	ldr	r2, [r7, #16]
 8011bc8:	621a      	str	r2, [r3, #32]
}
 8011bca:	bf00      	nop
 8011bcc:	371c      	adds	r7, #28
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd4:	4770      	bx	lr
 8011bd6:	bf00      	nop
 8011bd8:	feff8fff 	.word	0xfeff8fff
 8011bdc:	40010000 	.word	0x40010000
 8011be0:	40010400 	.word	0x40010400
 8011be4:	40014000 	.word	0x40014000
 8011be8:	40014400 	.word	0x40014400
 8011bec:	40014800 	.word	0x40014800

08011bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011bf0:	b480      	push	{r7}
 8011bf2:	b087      	sub	sp, #28
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	60f8      	str	r0, [r7, #12]
 8011bf8:	60b9      	str	r1, [r7, #8]
 8011bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	6a1b      	ldr	r3, [r3, #32]
 8011c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	6a1b      	ldr	r3, [r3, #32]
 8011c06:	f023 0201 	bic.w	r2, r3, #1
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	699b      	ldr	r3, [r3, #24]
 8011c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011c14:	693b      	ldr	r3, [r7, #16]
 8011c16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	011b      	lsls	r3, r3, #4
 8011c20:	693a      	ldr	r2, [r7, #16]
 8011c22:	4313      	orrs	r3, r2
 8011c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	f023 030a 	bic.w	r3, r3, #10
 8011c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011c2e:	697a      	ldr	r2, [r7, #20]
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	4313      	orrs	r3, r2
 8011c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	693a      	ldr	r2, [r7, #16]
 8011c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	697a      	ldr	r2, [r7, #20]
 8011c40:	621a      	str	r2, [r3, #32]
}
 8011c42:	bf00      	nop
 8011c44:	371c      	adds	r7, #28
 8011c46:	46bd      	mov	sp, r7
 8011c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4c:	4770      	bx	lr

08011c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011c4e:	b480      	push	{r7}
 8011c50:	b087      	sub	sp, #28
 8011c52:	af00      	add	r7, sp, #0
 8011c54:	60f8      	str	r0, [r7, #12]
 8011c56:	60b9      	str	r1, [r7, #8]
 8011c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	6a1b      	ldr	r3, [r3, #32]
 8011c5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	6a1b      	ldr	r3, [r3, #32]
 8011c64:	f023 0210 	bic.w	r2, r3, #16
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	699b      	ldr	r3, [r3, #24]
 8011c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	031b      	lsls	r3, r3, #12
 8011c7e:	693a      	ldr	r2, [r7, #16]
 8011c80:	4313      	orrs	r3, r2
 8011c82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011c84:	697b      	ldr	r3, [r7, #20]
 8011c86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011c8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	011b      	lsls	r3, r3, #4
 8011c90:	697a      	ldr	r2, [r7, #20]
 8011c92:	4313      	orrs	r3, r2
 8011c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	693a      	ldr	r2, [r7, #16]
 8011c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	697a      	ldr	r2, [r7, #20]
 8011ca0:	621a      	str	r2, [r3, #32]
}
 8011ca2:	bf00      	nop
 8011ca4:	371c      	adds	r7, #28
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cac:	4770      	bx	lr
	...

08011cb0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011cb0:	b480      	push	{r7}
 8011cb2:	b085      	sub	sp, #20
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	689b      	ldr	r3, [r3, #8]
 8011cbe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011cc0:	68fa      	ldr	r2, [r7, #12]
 8011cc2:	4b09      	ldr	r3, [pc, #36]	@ (8011ce8 <TIM_ITRx_SetConfig+0x38>)
 8011cc4:	4013      	ands	r3, r2
 8011cc6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011cc8:	683a      	ldr	r2, [r7, #0]
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	4313      	orrs	r3, r2
 8011cce:	f043 0307 	orr.w	r3, r3, #7
 8011cd2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	68fa      	ldr	r2, [r7, #12]
 8011cd8:	609a      	str	r2, [r3, #8]
}
 8011cda:	bf00      	nop
 8011cdc:	3714      	adds	r7, #20
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce4:	4770      	bx	lr
 8011ce6:	bf00      	nop
 8011ce8:	ffcfff8f 	.word	0xffcfff8f

08011cec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011cec:	b480      	push	{r7}
 8011cee:	b087      	sub	sp, #28
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	60f8      	str	r0, [r7, #12]
 8011cf4:	60b9      	str	r1, [r7, #8]
 8011cf6:	607a      	str	r2, [r7, #4]
 8011cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	689b      	ldr	r3, [r3, #8]
 8011cfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011d06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	021a      	lsls	r2, r3, #8
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	431a      	orrs	r2, r3
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	4313      	orrs	r3, r2
 8011d14:	697a      	ldr	r2, [r7, #20]
 8011d16:	4313      	orrs	r3, r2
 8011d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	697a      	ldr	r2, [r7, #20]
 8011d1e:	609a      	str	r2, [r3, #8]
}
 8011d20:	bf00      	nop
 8011d22:	371c      	adds	r7, #28
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr

08011d2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	b087      	sub	sp, #28
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	60f8      	str	r0, [r7, #12]
 8011d34:	60b9      	str	r1, [r7, #8]
 8011d36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	f003 031f 	and.w	r3, r3, #31
 8011d3e:	2201      	movs	r2, #1
 8011d40:	fa02 f303 	lsl.w	r3, r2, r3
 8011d44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	6a1a      	ldr	r2, [r3, #32]
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	43db      	mvns	r3, r3
 8011d4e:	401a      	ands	r2, r3
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	6a1a      	ldr	r2, [r3, #32]
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	f003 031f 	and.w	r3, r3, #31
 8011d5e:	6879      	ldr	r1, [r7, #4]
 8011d60:	fa01 f303 	lsl.w	r3, r1, r3
 8011d64:	431a      	orrs	r2, r3
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	621a      	str	r2, [r3, #32]
}
 8011d6a:	bf00      	nop
 8011d6c:	371c      	adds	r7, #28
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d74:	4770      	bx	lr
	...

08011d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011d78:	b480      	push	{r7}
 8011d7a:	b085      	sub	sp, #20
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	d101      	bne.n	8011d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011d8c:	2302      	movs	r3, #2
 8011d8e:	e06d      	b.n	8011e6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2201      	movs	r2, #1
 8011d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2202      	movs	r2, #2
 8011d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	689b      	ldr	r3, [r3, #8]
 8011dae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	4a30      	ldr	r2, [pc, #192]	@ (8011e78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011db6:	4293      	cmp	r3, r2
 8011db8:	d004      	beq.n	8011dc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	4a2f      	ldr	r2, [pc, #188]	@ (8011e7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011dc0:	4293      	cmp	r3, r2
 8011dc2:	d108      	bne.n	8011dd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8011dca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	685b      	ldr	r3, [r3, #4]
 8011dd0:	68fa      	ldr	r2, [r7, #12]
 8011dd2:	4313      	orrs	r3, r2
 8011dd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ddc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	68fa      	ldr	r2, [r7, #12]
 8011de4:	4313      	orrs	r3, r2
 8011de6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	68fa      	ldr	r2, [r7, #12]
 8011dee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	4a20      	ldr	r2, [pc, #128]	@ (8011e78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011df6:	4293      	cmp	r3, r2
 8011df8:	d022      	beq.n	8011e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011e02:	d01d      	beq.n	8011e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	4a1d      	ldr	r2, [pc, #116]	@ (8011e80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011e0a:	4293      	cmp	r3, r2
 8011e0c:	d018      	beq.n	8011e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	4a1c      	ldr	r2, [pc, #112]	@ (8011e84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011e14:	4293      	cmp	r3, r2
 8011e16:	d013      	beq.n	8011e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8011e88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011e1e:	4293      	cmp	r3, r2
 8011e20:	d00e      	beq.n	8011e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	4a15      	ldr	r2, [pc, #84]	@ (8011e7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011e28:	4293      	cmp	r3, r2
 8011e2a:	d009      	beq.n	8011e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	4a16      	ldr	r2, [pc, #88]	@ (8011e8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011e32:	4293      	cmp	r3, r2
 8011e34:	d004      	beq.n	8011e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	4a15      	ldr	r2, [pc, #84]	@ (8011e90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011e3c:	4293      	cmp	r3, r2
 8011e3e:	d10c      	bne.n	8011e5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011e46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	689b      	ldr	r3, [r3, #8]
 8011e4c:	68ba      	ldr	r2, [r7, #8]
 8011e4e:	4313      	orrs	r3, r2
 8011e50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	68ba      	ldr	r2, [r7, #8]
 8011e58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	2201      	movs	r2, #1
 8011e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	2200      	movs	r2, #0
 8011e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011e6a:	2300      	movs	r3, #0
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3714      	adds	r7, #20
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr
 8011e78:	40010000 	.word	0x40010000
 8011e7c:	40010400 	.word	0x40010400
 8011e80:	40000400 	.word	0x40000400
 8011e84:	40000800 	.word	0x40000800
 8011e88:	40000c00 	.word	0x40000c00
 8011e8c:	40001800 	.word	0x40001800
 8011e90:	40014000 	.word	0x40014000

08011e94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011e94:	b480      	push	{r7}
 8011e96:	b085      	sub	sp, #20
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011ea8:	2b01      	cmp	r3, #1
 8011eaa:	d101      	bne.n	8011eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011eac:	2302      	movs	r3, #2
 8011eae:	e065      	b.n	8011f7c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2201      	movs	r2, #1
 8011eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	68db      	ldr	r3, [r3, #12]
 8011ec2:	4313      	orrs	r3, r2
 8011ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	689b      	ldr	r3, [r3, #8]
 8011ed0:	4313      	orrs	r3, r2
 8011ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	4313      	orrs	r3, r2
 8011ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	4313      	orrs	r3, r2
 8011eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	691b      	ldr	r3, [r3, #16]
 8011efa:	4313      	orrs	r3, r2
 8011efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	695b      	ldr	r3, [r3, #20]
 8011f08:	4313      	orrs	r3, r2
 8011f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f16:	4313      	orrs	r3, r2
 8011f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	699b      	ldr	r3, [r3, #24]
 8011f24:	041b      	lsls	r3, r3, #16
 8011f26:	4313      	orrs	r3, r2
 8011f28:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	4a16      	ldr	r2, [pc, #88]	@ (8011f88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d004      	beq.n	8011f3e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	4a14      	ldr	r2, [pc, #80]	@ (8011f8c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8011f3a:	4293      	cmp	r3, r2
 8011f3c:	d115      	bne.n	8011f6a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f48:	051b      	lsls	r3, r3, #20
 8011f4a:	4313      	orrs	r3, r2
 8011f4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	69db      	ldr	r3, [r3, #28]
 8011f58:	4313      	orrs	r3, r2
 8011f5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	6a1b      	ldr	r3, [r3, #32]
 8011f66:	4313      	orrs	r3, r2
 8011f68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	68fa      	ldr	r2, [r7, #12]
 8011f70:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2200      	movs	r2, #0
 8011f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011f7a:	2300      	movs	r3, #0
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3714      	adds	r7, #20
 8011f80:	46bd      	mov	sp, r7
 8011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f86:	4770      	bx	lr
 8011f88:	40010000 	.word	0x40010000
 8011f8c:	40010400 	.word	0x40010400

08011f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011f98:	bf00      	nop
 8011f9a:	370c      	adds	r7, #12
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa2:	4770      	bx	lr

08011fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011fac:	bf00      	nop
 8011fae:	370c      	adds	r7, #12
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb6:	4770      	bx	lr

08011fb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011fb8:	b480      	push	{r7}
 8011fba:	b083      	sub	sp, #12
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011fc0:	bf00      	nop
 8011fc2:	370c      	adds	r7, #12
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fca:	4770      	bx	lr

08011fcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d101      	bne.n	8011fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011fda:	2301      	movs	r3, #1
 8011fdc:	e042      	b.n	8012064 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d106      	bne.n	8011ff6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2200      	movs	r2, #0
 8011fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f7f0 fda5 	bl	8002b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2224      	movs	r2, #36	@ 0x24
 8011ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	681a      	ldr	r2, [r3, #0]
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	f022 0201 	bic.w	r2, r2, #1
 801200c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012012:	2b00      	cmp	r3, #0
 8012014:	d002      	beq.n	801201c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f001 fa6a 	bl	80134f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f000 fcff 	bl	8012a20 <UART_SetConfig>
 8012022:	4603      	mov	r3, r0
 8012024:	2b01      	cmp	r3, #1
 8012026:	d101      	bne.n	801202c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8012028:	2301      	movs	r3, #1
 801202a:	e01b      	b.n	8012064 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	685a      	ldr	r2, [r3, #4]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801203a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	689a      	ldr	r2, [r3, #8]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801204a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	681a      	ldr	r2, [r3, #0]
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	f042 0201 	orr.w	r2, r2, #1
 801205a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f001 fae9 	bl	8013634 <UART_CheckIdleState>
 8012062:	4603      	mov	r3, r0
}
 8012064:	4618      	mov	r0, r3
 8012066:	3708      	adds	r7, #8
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}

0801206c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b08a      	sub	sp, #40	@ 0x28
 8012070:	af02      	add	r7, sp, #8
 8012072:	60f8      	str	r0, [r7, #12]
 8012074:	60b9      	str	r1, [r7, #8]
 8012076:	603b      	str	r3, [r7, #0]
 8012078:	4613      	mov	r3, r2
 801207a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012082:	2b20      	cmp	r3, #32
 8012084:	d17b      	bne.n	801217e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d002      	beq.n	8012092 <HAL_UART_Transmit+0x26>
 801208c:	88fb      	ldrh	r3, [r7, #6]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d101      	bne.n	8012096 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012092:	2301      	movs	r3, #1
 8012094:	e074      	b.n	8012180 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	2200      	movs	r2, #0
 801209a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	2221      	movs	r2, #33	@ 0x21
 80120a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80120a6:	f7f1 f9b5 	bl	8003414 <HAL_GetTick>
 80120aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	88fa      	ldrh	r2, [r7, #6]
 80120b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	88fa      	ldrh	r2, [r7, #6]
 80120b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	689b      	ldr	r3, [r3, #8]
 80120c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80120c4:	d108      	bne.n	80120d8 <HAL_UART_Transmit+0x6c>
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	691b      	ldr	r3, [r3, #16]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d104      	bne.n	80120d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80120ce:	2300      	movs	r3, #0
 80120d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	61bb      	str	r3, [r7, #24]
 80120d6:	e003      	b.n	80120e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80120dc:	2300      	movs	r3, #0
 80120de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80120e0:	e030      	b.n	8012144 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	9300      	str	r3, [sp, #0]
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	2200      	movs	r2, #0
 80120ea:	2180      	movs	r1, #128	@ 0x80
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	f001 fb4b 	bl	8013788 <UART_WaitOnFlagUntilTimeout>
 80120f2:	4603      	mov	r3, r0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d005      	beq.n	8012104 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	2220      	movs	r2, #32
 80120fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8012100:	2303      	movs	r3, #3
 8012102:	e03d      	b.n	8012180 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8012104:	69fb      	ldr	r3, [r7, #28]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d10b      	bne.n	8012122 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	881b      	ldrh	r3, [r3, #0]
 801210e:	461a      	mov	r2, r3
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012118:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801211a:	69bb      	ldr	r3, [r7, #24]
 801211c:	3302      	adds	r3, #2
 801211e:	61bb      	str	r3, [r7, #24]
 8012120:	e007      	b.n	8012132 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	781a      	ldrb	r2, [r3, #0]
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801212c:	69fb      	ldr	r3, [r7, #28]
 801212e:	3301      	adds	r3, #1
 8012130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012138:	b29b      	uxth	r3, r3
 801213a:	3b01      	subs	r3, #1
 801213c:	b29a      	uxth	r2, r3
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801214a:	b29b      	uxth	r3, r3
 801214c:	2b00      	cmp	r3, #0
 801214e:	d1c8      	bne.n	80120e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	9300      	str	r3, [sp, #0]
 8012154:	697b      	ldr	r3, [r7, #20]
 8012156:	2200      	movs	r2, #0
 8012158:	2140      	movs	r1, #64	@ 0x40
 801215a:	68f8      	ldr	r0, [r7, #12]
 801215c:	f001 fb14 	bl	8013788 <UART_WaitOnFlagUntilTimeout>
 8012160:	4603      	mov	r3, r0
 8012162:	2b00      	cmp	r3, #0
 8012164:	d005      	beq.n	8012172 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	2220      	movs	r2, #32
 801216a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801216e:	2303      	movs	r3, #3
 8012170:	e006      	b.n	8012180 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	2220      	movs	r2, #32
 8012176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801217a:	2300      	movs	r3, #0
 801217c:	e000      	b.n	8012180 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801217e:	2302      	movs	r3, #2
  }
}
 8012180:	4618      	mov	r0, r3
 8012182:	3720      	adds	r7, #32
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}

08012188 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b08a      	sub	sp, #40	@ 0x28
 801218c:	af00      	add	r7, sp, #0
 801218e:	60f8      	str	r0, [r7, #12]
 8012190:	60b9      	str	r1, [r7, #8]
 8012192:	4613      	mov	r3, r2
 8012194:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801219c:	2b20      	cmp	r3, #32
 801219e:	d137      	bne.n	8012210 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d002      	beq.n	80121ac <HAL_UART_Receive_DMA+0x24>
 80121a6:	88fb      	ldrh	r3, [r7, #6]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d101      	bne.n	80121b0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80121ac:	2301      	movs	r3, #1
 80121ae:	e030      	b.n	8012212 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	2200      	movs	r2, #0
 80121b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	4a18      	ldr	r2, [pc, #96]	@ (801221c <HAL_UART_Receive_DMA+0x94>)
 80121bc:	4293      	cmp	r3, r2
 80121be:	d01f      	beq.n	8012200 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d018      	beq.n	8012200 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	e853 3f00 	ldrex	r3, [r3]
 80121da:	613b      	str	r3, [r7, #16]
   return(result);
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80121e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	461a      	mov	r2, r3
 80121ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ec:	623b      	str	r3, [r7, #32]
 80121ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121f0:	69f9      	ldr	r1, [r7, #28]
 80121f2:	6a3a      	ldr	r2, [r7, #32]
 80121f4:	e841 2300 	strex	r3, r2, [r1]
 80121f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80121fa:	69bb      	ldr	r3, [r7, #24]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d1e6      	bne.n	80121ce <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8012200:	88fb      	ldrh	r3, [r7, #6]
 8012202:	461a      	mov	r2, r3
 8012204:	68b9      	ldr	r1, [r7, #8]
 8012206:	68f8      	ldr	r0, [r7, #12]
 8012208:	f001 fb2c 	bl	8013864 <UART_Start_Receive_DMA>
 801220c:	4603      	mov	r3, r0
 801220e:	e000      	b.n	8012212 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012210:	2302      	movs	r3, #2
  }
}
 8012212:	4618      	mov	r0, r3
 8012214:	3728      	adds	r7, #40	@ 0x28
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}
 801221a:	bf00      	nop
 801221c:	58000c00 	.word	0x58000c00

08012220 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b0ba      	sub	sp, #232	@ 0xe8
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	69db      	ldr	r3, [r3, #28]
 801222e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	689b      	ldr	r3, [r3, #8]
 8012242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012246:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801224a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801224e:	4013      	ands	r3, r2
 8012250:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8012254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012258:	2b00      	cmp	r3, #0
 801225a:	d11b      	bne.n	8012294 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801225c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012260:	f003 0320 	and.w	r3, r3, #32
 8012264:	2b00      	cmp	r3, #0
 8012266:	d015      	beq.n	8012294 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801226c:	f003 0320 	and.w	r3, r3, #32
 8012270:	2b00      	cmp	r3, #0
 8012272:	d105      	bne.n	8012280 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801227c:	2b00      	cmp	r3, #0
 801227e:	d009      	beq.n	8012294 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012284:	2b00      	cmp	r3, #0
 8012286:	f000 8393 	beq.w	80129b0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	4798      	blx	r3
      }
      return;
 8012292:	e38d      	b.n	80129b0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012298:	2b00      	cmp	r3, #0
 801229a:	f000 8123 	beq.w	80124e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801229e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80122a2:	4b8d      	ldr	r3, [pc, #564]	@ (80124d8 <HAL_UART_IRQHandler+0x2b8>)
 80122a4:	4013      	ands	r3, r2
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d106      	bne.n	80122b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80122aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80122ae:	4b8b      	ldr	r3, [pc, #556]	@ (80124dc <HAL_UART_IRQHandler+0x2bc>)
 80122b0:	4013      	ands	r3, r2
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	f000 8116 	beq.w	80124e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80122b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80122bc:	f003 0301 	and.w	r3, r3, #1
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d011      	beq.n	80122e8 <HAL_UART_IRQHandler+0xc8>
 80122c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80122c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d00b      	beq.n	80122e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2201      	movs	r2, #1
 80122d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80122de:	f043 0201 	orr.w	r2, r3, #1
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80122e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80122ec:	f003 0302 	and.w	r3, r3, #2
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d011      	beq.n	8012318 <HAL_UART_IRQHandler+0xf8>
 80122f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80122f8:	f003 0301 	and.w	r3, r3, #1
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d00b      	beq.n	8012318 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	2202      	movs	r2, #2
 8012306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801230e:	f043 0204 	orr.w	r2, r3, #4
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801231c:	f003 0304 	and.w	r3, r3, #4
 8012320:	2b00      	cmp	r3, #0
 8012322:	d011      	beq.n	8012348 <HAL_UART_IRQHandler+0x128>
 8012324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012328:	f003 0301 	and.w	r3, r3, #1
 801232c:	2b00      	cmp	r3, #0
 801232e:	d00b      	beq.n	8012348 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	2204      	movs	r2, #4
 8012336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801233e:	f043 0202 	orr.w	r2, r3, #2
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801234c:	f003 0308 	and.w	r3, r3, #8
 8012350:	2b00      	cmp	r3, #0
 8012352:	d017      	beq.n	8012384 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012358:	f003 0320 	and.w	r3, r3, #32
 801235c:	2b00      	cmp	r3, #0
 801235e:	d105      	bne.n	801236c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012360:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012364:	4b5c      	ldr	r3, [pc, #368]	@ (80124d8 <HAL_UART_IRQHandler+0x2b8>)
 8012366:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012368:	2b00      	cmp	r3, #0
 801236a:	d00b      	beq.n	8012384 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	2208      	movs	r2, #8
 8012372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801237a:	f043 0208 	orr.w	r2, r3, #8
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801238c:	2b00      	cmp	r3, #0
 801238e:	d012      	beq.n	80123b6 <HAL_UART_IRQHandler+0x196>
 8012390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012394:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012398:	2b00      	cmp	r3, #0
 801239a:	d00c      	beq.n	80123b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80123a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80123ac:	f043 0220 	orr.w	r2, r3, #32
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80123bc:	2b00      	cmp	r3, #0
 80123be:	f000 82f9 	beq.w	80129b4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80123c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80123c6:	f003 0320 	and.w	r3, r3, #32
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d013      	beq.n	80123f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80123ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80123d2:	f003 0320 	and.w	r3, r3, #32
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d105      	bne.n	80123e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80123da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80123de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d007      	beq.n	80123f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d003      	beq.n	80123f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80123fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	689b      	ldr	r3, [r3, #8]
 8012406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801240a:	2b40      	cmp	r3, #64	@ 0x40
 801240c:	d005      	beq.n	801241a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801240e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012412:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012416:	2b00      	cmp	r3, #0
 8012418:	d054      	beq.n	80124c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801241a:	6878      	ldr	r0, [r7, #4]
 801241c:	f001 fb0a 	bl	8013a34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	689b      	ldr	r3, [r3, #8]
 8012426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801242a:	2b40      	cmp	r3, #64	@ 0x40
 801242c:	d146      	bne.n	80124bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	3308      	adds	r3, #8
 8012434:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012438:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801243c:	e853 3f00 	ldrex	r3, [r3]
 8012440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8012444:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801244c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	3308      	adds	r3, #8
 8012456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801245a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801245e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8012466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801246a:	e841 2300 	strex	r3, r2, [r1]
 801246e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8012472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012476:	2b00      	cmp	r3, #0
 8012478:	d1d9      	bne.n	801242e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012480:	2b00      	cmp	r3, #0
 8012482:	d017      	beq.n	80124b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801248a:	4a15      	ldr	r2, [pc, #84]	@ (80124e0 <HAL_UART_IRQHandler+0x2c0>)
 801248c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012494:	4618      	mov	r0, r3
 8012496:	f7f2 fd51 	bl	8004f3c <HAL_DMA_Abort_IT>
 801249a:	4603      	mov	r3, r0
 801249c:	2b00      	cmp	r3, #0
 801249e:	d019      	beq.n	80124d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80124a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80124a8:	687a      	ldr	r2, [r7, #4]
 80124aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80124ae:	4610      	mov	r0, r2
 80124b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80124b2:	e00f      	b.n	80124d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f000 fa9d 	bl	80129f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80124ba:	e00b      	b.n	80124d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f000 fa99 	bl	80129f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80124c2:	e007      	b.n	80124d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f000 fa95 	bl	80129f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	2200      	movs	r2, #0
 80124ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80124d2:	e26f      	b.n	80129b4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80124d4:	bf00      	nop
    return;
 80124d6:	e26d      	b.n	80129b4 <HAL_UART_IRQHandler+0x794>
 80124d8:	10000001 	.word	0x10000001
 80124dc:	04000120 	.word	0x04000120
 80124e0:	08013ce7 	.word	0x08013ce7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124e8:	2b01      	cmp	r3, #1
 80124ea:	f040 8203 	bne.w	80128f4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80124ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80124f2:	f003 0310 	and.w	r3, r3, #16
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	f000 81fc 	beq.w	80128f4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80124fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012500:	f003 0310 	and.w	r3, r3, #16
 8012504:	2b00      	cmp	r3, #0
 8012506:	f000 81f5 	beq.w	80128f4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	2210      	movs	r2, #16
 8012510:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	689b      	ldr	r3, [r3, #8]
 8012518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801251c:	2b40      	cmp	r3, #64	@ 0x40
 801251e:	f040 816d 	bne.w	80127fc <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	4aa4      	ldr	r2, [pc, #656]	@ (80127bc <HAL_UART_IRQHandler+0x59c>)
 801252c:	4293      	cmp	r3, r2
 801252e:	d068      	beq.n	8012602 <HAL_UART_IRQHandler+0x3e2>
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	4aa1      	ldr	r2, [pc, #644]	@ (80127c0 <HAL_UART_IRQHandler+0x5a0>)
 801253a:	4293      	cmp	r3, r2
 801253c:	d061      	beq.n	8012602 <HAL_UART_IRQHandler+0x3e2>
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	4a9f      	ldr	r2, [pc, #636]	@ (80127c4 <HAL_UART_IRQHandler+0x5a4>)
 8012548:	4293      	cmp	r3, r2
 801254a:	d05a      	beq.n	8012602 <HAL_UART_IRQHandler+0x3e2>
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	4a9c      	ldr	r2, [pc, #624]	@ (80127c8 <HAL_UART_IRQHandler+0x5a8>)
 8012556:	4293      	cmp	r3, r2
 8012558:	d053      	beq.n	8012602 <HAL_UART_IRQHandler+0x3e2>
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	4a9a      	ldr	r2, [pc, #616]	@ (80127cc <HAL_UART_IRQHandler+0x5ac>)
 8012564:	4293      	cmp	r3, r2
 8012566:	d04c      	beq.n	8012602 <HAL_UART_IRQHandler+0x3e2>
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	4a97      	ldr	r2, [pc, #604]	@ (80127d0 <HAL_UART_IRQHandler+0x5b0>)
 8012572:	4293      	cmp	r3, r2
 8012574:	d045      	beq.n	8012602 <HAL_UART_IRQHandler+0x3e2>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	4a95      	ldr	r2, [pc, #596]	@ (80127d4 <HAL_UART_IRQHandler+0x5b4>)
 8012580:	4293      	cmp	r3, r2
 8012582:	d03e      	beq.n	8012602 <HAL_UART_IRQHandler+0x3e2>
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	4a92      	ldr	r2, [pc, #584]	@ (80127d8 <HAL_UART_IRQHandler+0x5b8>)
 801258e:	4293      	cmp	r3, r2
 8012590:	d037      	beq.n	8012602 <HAL_UART_IRQHandler+0x3e2>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	4a90      	ldr	r2, [pc, #576]	@ (80127dc <HAL_UART_IRQHandler+0x5bc>)
 801259c:	4293      	cmp	r3, r2
 801259e:	d030      	beq.n	8012602 <HAL_UART_IRQHandler+0x3e2>
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	4a8d      	ldr	r2, [pc, #564]	@ (80127e0 <HAL_UART_IRQHandler+0x5c0>)
 80125aa:	4293      	cmp	r3, r2
 80125ac:	d029      	beq.n	8012602 <HAL_UART_IRQHandler+0x3e2>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	4a8b      	ldr	r2, [pc, #556]	@ (80127e4 <HAL_UART_IRQHandler+0x5c4>)
 80125b8:	4293      	cmp	r3, r2
 80125ba:	d022      	beq.n	8012602 <HAL_UART_IRQHandler+0x3e2>
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	4a88      	ldr	r2, [pc, #544]	@ (80127e8 <HAL_UART_IRQHandler+0x5c8>)
 80125c6:	4293      	cmp	r3, r2
 80125c8:	d01b      	beq.n	8012602 <HAL_UART_IRQHandler+0x3e2>
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	4a86      	ldr	r2, [pc, #536]	@ (80127ec <HAL_UART_IRQHandler+0x5cc>)
 80125d4:	4293      	cmp	r3, r2
 80125d6:	d014      	beq.n	8012602 <HAL_UART_IRQHandler+0x3e2>
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	4a83      	ldr	r2, [pc, #524]	@ (80127f0 <HAL_UART_IRQHandler+0x5d0>)
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d00d      	beq.n	8012602 <HAL_UART_IRQHandler+0x3e2>
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	4a81      	ldr	r2, [pc, #516]	@ (80127f4 <HAL_UART_IRQHandler+0x5d4>)
 80125f0:	4293      	cmp	r3, r2
 80125f2:	d006      	beq.n	8012602 <HAL_UART_IRQHandler+0x3e2>
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	4a7e      	ldr	r2, [pc, #504]	@ (80127f8 <HAL_UART_IRQHandler+0x5d8>)
 80125fe:	4293      	cmp	r3, r2
 8012600:	d106      	bne.n	8012610 <HAL_UART_IRQHandler+0x3f0>
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	685b      	ldr	r3, [r3, #4]
 801260c:	b29b      	uxth	r3, r3
 801260e:	e005      	b.n	801261c <HAL_UART_IRQHandler+0x3fc>
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	b29b      	uxth	r3, r3
 801261c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012620:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8012624:	2b00      	cmp	r3, #0
 8012626:	f000 80ad 	beq.w	8012784 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012630:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012634:	429a      	cmp	r2, r3
 8012636:	f080 80a5 	bcs.w	8012784 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012640:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801264a:	69db      	ldr	r3, [r3, #28]
 801264c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012650:	f000 8087 	beq.w	8012762 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801265c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012660:	e853 3f00 	ldrex	r3, [r3]
 8012664:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8012668:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801266c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	461a      	mov	r2, r3
 801267a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801267e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012682:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012686:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801268a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801268e:	e841 2300 	strex	r3, r2, [r1]
 8012692:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8012696:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801269a:	2b00      	cmp	r3, #0
 801269c:	d1da      	bne.n	8012654 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	3308      	adds	r3, #8
 80126a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80126a8:	e853 3f00 	ldrex	r3, [r3]
 80126ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80126ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80126b0:	f023 0301 	bic.w	r3, r3, #1
 80126b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	3308      	adds	r3, #8
 80126be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80126c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80126c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80126ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80126ce:	e841 2300 	strex	r3, r2, [r1]
 80126d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80126d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d1e1      	bne.n	801269e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	3308      	adds	r3, #8
 80126e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80126e4:	e853 3f00 	ldrex	r3, [r3]
 80126e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80126ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80126ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80126f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	3308      	adds	r3, #8
 80126fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80126fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012700:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012702:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012704:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012706:	e841 2300 	strex	r3, r2, [r1]
 801270a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801270c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801270e:	2b00      	cmp	r3, #0
 8012710:	d1e3      	bne.n	80126da <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2220      	movs	r2, #32
 8012716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2200      	movs	r2, #0
 801271e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012728:	e853 3f00 	ldrex	r3, [r3]
 801272c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801272e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012730:	f023 0310 	bic.w	r3, r3, #16
 8012734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	461a      	mov	r2, r3
 801273e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012742:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012744:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012746:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012748:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801274a:	e841 2300 	strex	r3, r2, [r1]
 801274e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012752:	2b00      	cmp	r3, #0
 8012754:	d1e4      	bne.n	8012720 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801275c:	4618      	mov	r0, r3
 801275e:	f7f2 f8cf 	bl	8004900 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2202      	movs	r2, #2
 8012766:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012774:	b29b      	uxth	r3, r3
 8012776:	1ad3      	subs	r3, r2, r3
 8012778:	b29b      	uxth	r3, r3
 801277a:	4619      	mov	r1, r3
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f000 f943 	bl	8012a08 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8012782:	e119      	b.n	80129b8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801278a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801278e:	429a      	cmp	r2, r3
 8012790:	f040 8112 	bne.w	80129b8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801279a:	69db      	ldr	r3, [r3, #28]
 801279c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80127a0:	f040 810a 	bne.w	80129b8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2202      	movs	r2, #2
 80127a8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80127b0:	4619      	mov	r1, r3
 80127b2:	6878      	ldr	r0, [r7, #4]
 80127b4:	f000 f928 	bl	8012a08 <HAL_UARTEx_RxEventCallback>
      return;
 80127b8:	e0fe      	b.n	80129b8 <HAL_UART_IRQHandler+0x798>
 80127ba:	bf00      	nop
 80127bc:	40020010 	.word	0x40020010
 80127c0:	40020028 	.word	0x40020028
 80127c4:	40020040 	.word	0x40020040
 80127c8:	40020058 	.word	0x40020058
 80127cc:	40020070 	.word	0x40020070
 80127d0:	40020088 	.word	0x40020088
 80127d4:	400200a0 	.word	0x400200a0
 80127d8:	400200b8 	.word	0x400200b8
 80127dc:	40020410 	.word	0x40020410
 80127e0:	40020428 	.word	0x40020428
 80127e4:	40020440 	.word	0x40020440
 80127e8:	40020458 	.word	0x40020458
 80127ec:	40020470 	.word	0x40020470
 80127f0:	40020488 	.word	0x40020488
 80127f4:	400204a0 	.word	0x400204a0
 80127f8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012808:	b29b      	uxth	r3, r3
 801280a:	1ad3      	subs	r3, r2, r3
 801280c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012816:	b29b      	uxth	r3, r3
 8012818:	2b00      	cmp	r3, #0
 801281a:	f000 80cf 	beq.w	80129bc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 801281e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012822:	2b00      	cmp	r3, #0
 8012824:	f000 80ca 	beq.w	80129bc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801282e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012830:	e853 3f00 	ldrex	r3, [r3]
 8012834:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801283c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	461a      	mov	r2, r3
 8012846:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801284a:	647b      	str	r3, [r7, #68]	@ 0x44
 801284c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801284e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012850:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012852:	e841 2300 	strex	r3, r2, [r1]
 8012856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801285a:	2b00      	cmp	r3, #0
 801285c:	d1e4      	bne.n	8012828 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	3308      	adds	r3, #8
 8012864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012868:	e853 3f00 	ldrex	r3, [r3]
 801286c:	623b      	str	r3, [r7, #32]
   return(result);
 801286e:	6a3a      	ldr	r2, [r7, #32]
 8012870:	4b55      	ldr	r3, [pc, #340]	@ (80129c8 <HAL_UART_IRQHandler+0x7a8>)
 8012872:	4013      	ands	r3, r2
 8012874:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	3308      	adds	r3, #8
 801287e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012882:	633a      	str	r2, [r7, #48]	@ 0x30
 8012884:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801288a:	e841 2300 	strex	r3, r2, [r1]
 801288e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012892:	2b00      	cmp	r3, #0
 8012894:	d1e3      	bne.n	801285e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2220      	movs	r2, #32
 801289a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	2200      	movs	r2, #0
 80128a2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2200      	movs	r2, #0
 80128a8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128b0:	693b      	ldr	r3, [r7, #16]
 80128b2:	e853 3f00 	ldrex	r3, [r3]
 80128b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	f023 0310 	bic.w	r3, r3, #16
 80128be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	461a      	mov	r2, r3
 80128c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80128cc:	61fb      	str	r3, [r7, #28]
 80128ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128d0:	69b9      	ldr	r1, [r7, #24]
 80128d2:	69fa      	ldr	r2, [r7, #28]
 80128d4:	e841 2300 	strex	r3, r2, [r1]
 80128d8:	617b      	str	r3, [r7, #20]
   return(result);
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d1e4      	bne.n	80128aa <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2202      	movs	r2, #2
 80128e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80128e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80128ea:	4619      	mov	r1, r3
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f000 f88b 	bl	8012a08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80128f2:	e063      	b.n	80129bc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80128f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80128f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d00e      	beq.n	801291e <HAL_UART_IRQHandler+0x6fe>
 8012900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012904:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012908:	2b00      	cmp	r3, #0
 801290a:	d008      	beq.n	801291e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8012914:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012916:	6878      	ldr	r0, [r7, #4]
 8012918:	f001 fa22 	bl	8013d60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801291c:	e051      	b.n	80129c2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801291e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012926:	2b00      	cmp	r3, #0
 8012928:	d014      	beq.n	8012954 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801292a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801292e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012932:	2b00      	cmp	r3, #0
 8012934:	d105      	bne.n	8012942 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801293a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801293e:	2b00      	cmp	r3, #0
 8012940:	d008      	beq.n	8012954 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012946:	2b00      	cmp	r3, #0
 8012948:	d03a      	beq.n	80129c0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801294e:	6878      	ldr	r0, [r7, #4]
 8012950:	4798      	blx	r3
    }
    return;
 8012952:	e035      	b.n	80129c0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801295c:	2b00      	cmp	r3, #0
 801295e:	d009      	beq.n	8012974 <HAL_UART_IRQHandler+0x754>
 8012960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012968:	2b00      	cmp	r3, #0
 801296a:	d003      	beq.n	8012974 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f001 f9cc 	bl	8013d0a <UART_EndTransmit_IT>
    return;
 8012972:	e026      	b.n	80129c2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801297c:	2b00      	cmp	r3, #0
 801297e:	d009      	beq.n	8012994 <HAL_UART_IRQHandler+0x774>
 8012980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012984:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012988:	2b00      	cmp	r3, #0
 801298a:	d003      	beq.n	8012994 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f001 f9fb 	bl	8013d88 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012992:	e016      	b.n	80129c2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801299c:	2b00      	cmp	r3, #0
 801299e:	d010      	beq.n	80129c2 <HAL_UART_IRQHandler+0x7a2>
 80129a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	da0c      	bge.n	80129c2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80129a8:	6878      	ldr	r0, [r7, #4]
 80129aa:	f001 f9e3 	bl	8013d74 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80129ae:	e008      	b.n	80129c2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80129b0:	bf00      	nop
 80129b2:	e006      	b.n	80129c2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80129b4:	bf00      	nop
 80129b6:	e004      	b.n	80129c2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80129b8:	bf00      	nop
 80129ba:	e002      	b.n	80129c2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80129bc:	bf00      	nop
 80129be:	e000      	b.n	80129c2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80129c0:	bf00      	nop
  }
}
 80129c2:	37e8      	adds	r7, #232	@ 0xe8
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}
 80129c8:	effffffe 	.word	0xeffffffe

080129cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80129cc:	b480      	push	{r7}
 80129ce:	b083      	sub	sp, #12
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80129d4:	bf00      	nop
 80129d6:	370c      	adds	r7, #12
 80129d8:	46bd      	mov	sp, r7
 80129da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129de:	4770      	bx	lr

080129e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80129e0:	b480      	push	{r7}
 80129e2:	b083      	sub	sp, #12
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80129e8:	bf00      	nop
 80129ea:	370c      	adds	r7, #12
 80129ec:	46bd      	mov	sp, r7
 80129ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f2:	4770      	bx	lr

080129f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b083      	sub	sp, #12
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80129fc:	bf00      	nop
 80129fe:	370c      	adds	r7, #12
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr

08012a08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b083      	sub	sp, #12
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	460b      	mov	r3, r1
 8012a12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012a14:	bf00      	nop
 8012a16:	370c      	adds	r7, #12
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1e:	4770      	bx	lr

08012a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012a24:	b092      	sub	sp, #72	@ 0x48
 8012a26:	af00      	add	r7, sp, #0
 8012a28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	689a      	ldr	r2, [r3, #8]
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	691b      	ldr	r3, [r3, #16]
 8012a38:	431a      	orrs	r2, r3
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	695b      	ldr	r3, [r3, #20]
 8012a3e:	431a      	orrs	r2, r3
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	69db      	ldr	r3, [r3, #28]
 8012a44:	4313      	orrs	r3, r2
 8012a46:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012a48:	697b      	ldr	r3, [r7, #20]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	681a      	ldr	r2, [r3, #0]
 8012a4e:	4bbe      	ldr	r3, [pc, #760]	@ (8012d48 <UART_SetConfig+0x328>)
 8012a50:	4013      	ands	r3, r2
 8012a52:	697a      	ldr	r2, [r7, #20]
 8012a54:	6812      	ldr	r2, [r2, #0]
 8012a56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012a58:	430b      	orrs	r3, r1
 8012a5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	685b      	ldr	r3, [r3, #4]
 8012a62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	68da      	ldr	r2, [r3, #12]
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	430a      	orrs	r2, r1
 8012a70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	699b      	ldr	r3, [r3, #24]
 8012a76:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	4ab3      	ldr	r2, [pc, #716]	@ (8012d4c <UART_SetConfig+0x32c>)
 8012a7e:	4293      	cmp	r3, r2
 8012a80:	d004      	beq.n	8012a8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	6a1b      	ldr	r3, [r3, #32]
 8012a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012a88:	4313      	orrs	r3, r2
 8012a8a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	689a      	ldr	r2, [r3, #8]
 8012a92:	4baf      	ldr	r3, [pc, #700]	@ (8012d50 <UART_SetConfig+0x330>)
 8012a94:	4013      	ands	r3, r2
 8012a96:	697a      	ldr	r2, [r7, #20]
 8012a98:	6812      	ldr	r2, [r2, #0]
 8012a9a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012a9c:	430b      	orrs	r3, r1
 8012a9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012aa6:	f023 010f 	bic.w	r1, r3, #15
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	430a      	orrs	r2, r1
 8012ab4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012ab6:	697b      	ldr	r3, [r7, #20]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	4aa6      	ldr	r2, [pc, #664]	@ (8012d54 <UART_SetConfig+0x334>)
 8012abc:	4293      	cmp	r3, r2
 8012abe:	d177      	bne.n	8012bb0 <UART_SetConfig+0x190>
 8012ac0:	4ba5      	ldr	r3, [pc, #660]	@ (8012d58 <UART_SetConfig+0x338>)
 8012ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ac4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012ac8:	2b28      	cmp	r3, #40	@ 0x28
 8012aca:	d86d      	bhi.n	8012ba8 <UART_SetConfig+0x188>
 8012acc:	a201      	add	r2, pc, #4	@ (adr r2, 8012ad4 <UART_SetConfig+0xb4>)
 8012ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ad2:	bf00      	nop
 8012ad4:	08012b79 	.word	0x08012b79
 8012ad8:	08012ba9 	.word	0x08012ba9
 8012adc:	08012ba9 	.word	0x08012ba9
 8012ae0:	08012ba9 	.word	0x08012ba9
 8012ae4:	08012ba9 	.word	0x08012ba9
 8012ae8:	08012ba9 	.word	0x08012ba9
 8012aec:	08012ba9 	.word	0x08012ba9
 8012af0:	08012ba9 	.word	0x08012ba9
 8012af4:	08012b81 	.word	0x08012b81
 8012af8:	08012ba9 	.word	0x08012ba9
 8012afc:	08012ba9 	.word	0x08012ba9
 8012b00:	08012ba9 	.word	0x08012ba9
 8012b04:	08012ba9 	.word	0x08012ba9
 8012b08:	08012ba9 	.word	0x08012ba9
 8012b0c:	08012ba9 	.word	0x08012ba9
 8012b10:	08012ba9 	.word	0x08012ba9
 8012b14:	08012b89 	.word	0x08012b89
 8012b18:	08012ba9 	.word	0x08012ba9
 8012b1c:	08012ba9 	.word	0x08012ba9
 8012b20:	08012ba9 	.word	0x08012ba9
 8012b24:	08012ba9 	.word	0x08012ba9
 8012b28:	08012ba9 	.word	0x08012ba9
 8012b2c:	08012ba9 	.word	0x08012ba9
 8012b30:	08012ba9 	.word	0x08012ba9
 8012b34:	08012b91 	.word	0x08012b91
 8012b38:	08012ba9 	.word	0x08012ba9
 8012b3c:	08012ba9 	.word	0x08012ba9
 8012b40:	08012ba9 	.word	0x08012ba9
 8012b44:	08012ba9 	.word	0x08012ba9
 8012b48:	08012ba9 	.word	0x08012ba9
 8012b4c:	08012ba9 	.word	0x08012ba9
 8012b50:	08012ba9 	.word	0x08012ba9
 8012b54:	08012b99 	.word	0x08012b99
 8012b58:	08012ba9 	.word	0x08012ba9
 8012b5c:	08012ba9 	.word	0x08012ba9
 8012b60:	08012ba9 	.word	0x08012ba9
 8012b64:	08012ba9 	.word	0x08012ba9
 8012b68:	08012ba9 	.word	0x08012ba9
 8012b6c:	08012ba9 	.word	0x08012ba9
 8012b70:	08012ba9 	.word	0x08012ba9
 8012b74:	08012ba1 	.word	0x08012ba1
 8012b78:	2301      	movs	r3, #1
 8012b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b7e:	e222      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012b80:	2304      	movs	r3, #4
 8012b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b86:	e21e      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012b88:	2308      	movs	r3, #8
 8012b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b8e:	e21a      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012b90:	2310      	movs	r3, #16
 8012b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b96:	e216      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012b98:	2320      	movs	r3, #32
 8012b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b9e:	e212      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012ba0:	2340      	movs	r3, #64	@ 0x40
 8012ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ba6:	e20e      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012ba8:	2380      	movs	r3, #128	@ 0x80
 8012baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bae:	e20a      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012bb0:	697b      	ldr	r3, [r7, #20]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	4a69      	ldr	r2, [pc, #420]	@ (8012d5c <UART_SetConfig+0x33c>)
 8012bb6:	4293      	cmp	r3, r2
 8012bb8:	d130      	bne.n	8012c1c <UART_SetConfig+0x1fc>
 8012bba:	4b67      	ldr	r3, [pc, #412]	@ (8012d58 <UART_SetConfig+0x338>)
 8012bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012bbe:	f003 0307 	and.w	r3, r3, #7
 8012bc2:	2b05      	cmp	r3, #5
 8012bc4:	d826      	bhi.n	8012c14 <UART_SetConfig+0x1f4>
 8012bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8012bcc <UART_SetConfig+0x1ac>)
 8012bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bcc:	08012be5 	.word	0x08012be5
 8012bd0:	08012bed 	.word	0x08012bed
 8012bd4:	08012bf5 	.word	0x08012bf5
 8012bd8:	08012bfd 	.word	0x08012bfd
 8012bdc:	08012c05 	.word	0x08012c05
 8012be0:	08012c0d 	.word	0x08012c0d
 8012be4:	2300      	movs	r3, #0
 8012be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bea:	e1ec      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012bec:	2304      	movs	r3, #4
 8012bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bf2:	e1e8      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012bf4:	2308      	movs	r3, #8
 8012bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bfa:	e1e4      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012bfc:	2310      	movs	r3, #16
 8012bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c02:	e1e0      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012c04:	2320      	movs	r3, #32
 8012c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c0a:	e1dc      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012c0c:	2340      	movs	r3, #64	@ 0x40
 8012c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c12:	e1d8      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012c14:	2380      	movs	r3, #128	@ 0x80
 8012c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c1a:	e1d4      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012c1c:	697b      	ldr	r3, [r7, #20]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	4a4f      	ldr	r2, [pc, #316]	@ (8012d60 <UART_SetConfig+0x340>)
 8012c22:	4293      	cmp	r3, r2
 8012c24:	d130      	bne.n	8012c88 <UART_SetConfig+0x268>
 8012c26:	4b4c      	ldr	r3, [pc, #304]	@ (8012d58 <UART_SetConfig+0x338>)
 8012c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c2a:	f003 0307 	and.w	r3, r3, #7
 8012c2e:	2b05      	cmp	r3, #5
 8012c30:	d826      	bhi.n	8012c80 <UART_SetConfig+0x260>
 8012c32:	a201      	add	r2, pc, #4	@ (adr r2, 8012c38 <UART_SetConfig+0x218>)
 8012c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c38:	08012c51 	.word	0x08012c51
 8012c3c:	08012c59 	.word	0x08012c59
 8012c40:	08012c61 	.word	0x08012c61
 8012c44:	08012c69 	.word	0x08012c69
 8012c48:	08012c71 	.word	0x08012c71
 8012c4c:	08012c79 	.word	0x08012c79
 8012c50:	2300      	movs	r3, #0
 8012c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c56:	e1b6      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012c58:	2304      	movs	r3, #4
 8012c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c5e:	e1b2      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012c60:	2308      	movs	r3, #8
 8012c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c66:	e1ae      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012c68:	2310      	movs	r3, #16
 8012c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c6e:	e1aa      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012c70:	2320      	movs	r3, #32
 8012c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c76:	e1a6      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012c78:	2340      	movs	r3, #64	@ 0x40
 8012c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c7e:	e1a2      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012c80:	2380      	movs	r3, #128	@ 0x80
 8012c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c86:	e19e      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012c88:	697b      	ldr	r3, [r7, #20]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	4a35      	ldr	r2, [pc, #212]	@ (8012d64 <UART_SetConfig+0x344>)
 8012c8e:	4293      	cmp	r3, r2
 8012c90:	d130      	bne.n	8012cf4 <UART_SetConfig+0x2d4>
 8012c92:	4b31      	ldr	r3, [pc, #196]	@ (8012d58 <UART_SetConfig+0x338>)
 8012c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c96:	f003 0307 	and.w	r3, r3, #7
 8012c9a:	2b05      	cmp	r3, #5
 8012c9c:	d826      	bhi.n	8012cec <UART_SetConfig+0x2cc>
 8012c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8012ca4 <UART_SetConfig+0x284>)
 8012ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ca4:	08012cbd 	.word	0x08012cbd
 8012ca8:	08012cc5 	.word	0x08012cc5
 8012cac:	08012ccd 	.word	0x08012ccd
 8012cb0:	08012cd5 	.word	0x08012cd5
 8012cb4:	08012cdd 	.word	0x08012cdd
 8012cb8:	08012ce5 	.word	0x08012ce5
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cc2:	e180      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012cc4:	2304      	movs	r3, #4
 8012cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cca:	e17c      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012ccc:	2308      	movs	r3, #8
 8012cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cd2:	e178      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012cd4:	2310      	movs	r3, #16
 8012cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cda:	e174      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012cdc:	2320      	movs	r3, #32
 8012cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ce2:	e170      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012ce4:	2340      	movs	r3, #64	@ 0x40
 8012ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cea:	e16c      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012cec:	2380      	movs	r3, #128	@ 0x80
 8012cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cf2:	e168      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012cf4:	697b      	ldr	r3, [r7, #20]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8012d68 <UART_SetConfig+0x348>)
 8012cfa:	4293      	cmp	r3, r2
 8012cfc:	d142      	bne.n	8012d84 <UART_SetConfig+0x364>
 8012cfe:	4b16      	ldr	r3, [pc, #88]	@ (8012d58 <UART_SetConfig+0x338>)
 8012d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d02:	f003 0307 	and.w	r3, r3, #7
 8012d06:	2b05      	cmp	r3, #5
 8012d08:	d838      	bhi.n	8012d7c <UART_SetConfig+0x35c>
 8012d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8012d10 <UART_SetConfig+0x2f0>)
 8012d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d10:	08012d29 	.word	0x08012d29
 8012d14:	08012d31 	.word	0x08012d31
 8012d18:	08012d39 	.word	0x08012d39
 8012d1c:	08012d41 	.word	0x08012d41
 8012d20:	08012d6d 	.word	0x08012d6d
 8012d24:	08012d75 	.word	0x08012d75
 8012d28:	2300      	movs	r3, #0
 8012d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d2e:	e14a      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012d30:	2304      	movs	r3, #4
 8012d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d36:	e146      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012d38:	2308      	movs	r3, #8
 8012d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d3e:	e142      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012d40:	2310      	movs	r3, #16
 8012d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d46:	e13e      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012d48:	cfff69f3 	.word	0xcfff69f3
 8012d4c:	58000c00 	.word	0x58000c00
 8012d50:	11fff4ff 	.word	0x11fff4ff
 8012d54:	40011000 	.word	0x40011000
 8012d58:	58024400 	.word	0x58024400
 8012d5c:	40004400 	.word	0x40004400
 8012d60:	40004800 	.word	0x40004800
 8012d64:	40004c00 	.word	0x40004c00
 8012d68:	40005000 	.word	0x40005000
 8012d6c:	2320      	movs	r3, #32
 8012d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d72:	e128      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012d74:	2340      	movs	r3, #64	@ 0x40
 8012d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d7a:	e124      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012d7c:	2380      	movs	r3, #128	@ 0x80
 8012d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d82:	e120      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	4acb      	ldr	r2, [pc, #812]	@ (80130b8 <UART_SetConfig+0x698>)
 8012d8a:	4293      	cmp	r3, r2
 8012d8c:	d176      	bne.n	8012e7c <UART_SetConfig+0x45c>
 8012d8e:	4bcb      	ldr	r3, [pc, #812]	@ (80130bc <UART_SetConfig+0x69c>)
 8012d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012d96:	2b28      	cmp	r3, #40	@ 0x28
 8012d98:	d86c      	bhi.n	8012e74 <UART_SetConfig+0x454>
 8012d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8012da0 <UART_SetConfig+0x380>)
 8012d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012da0:	08012e45 	.word	0x08012e45
 8012da4:	08012e75 	.word	0x08012e75
 8012da8:	08012e75 	.word	0x08012e75
 8012dac:	08012e75 	.word	0x08012e75
 8012db0:	08012e75 	.word	0x08012e75
 8012db4:	08012e75 	.word	0x08012e75
 8012db8:	08012e75 	.word	0x08012e75
 8012dbc:	08012e75 	.word	0x08012e75
 8012dc0:	08012e4d 	.word	0x08012e4d
 8012dc4:	08012e75 	.word	0x08012e75
 8012dc8:	08012e75 	.word	0x08012e75
 8012dcc:	08012e75 	.word	0x08012e75
 8012dd0:	08012e75 	.word	0x08012e75
 8012dd4:	08012e75 	.word	0x08012e75
 8012dd8:	08012e75 	.word	0x08012e75
 8012ddc:	08012e75 	.word	0x08012e75
 8012de0:	08012e55 	.word	0x08012e55
 8012de4:	08012e75 	.word	0x08012e75
 8012de8:	08012e75 	.word	0x08012e75
 8012dec:	08012e75 	.word	0x08012e75
 8012df0:	08012e75 	.word	0x08012e75
 8012df4:	08012e75 	.word	0x08012e75
 8012df8:	08012e75 	.word	0x08012e75
 8012dfc:	08012e75 	.word	0x08012e75
 8012e00:	08012e5d 	.word	0x08012e5d
 8012e04:	08012e75 	.word	0x08012e75
 8012e08:	08012e75 	.word	0x08012e75
 8012e0c:	08012e75 	.word	0x08012e75
 8012e10:	08012e75 	.word	0x08012e75
 8012e14:	08012e75 	.word	0x08012e75
 8012e18:	08012e75 	.word	0x08012e75
 8012e1c:	08012e75 	.word	0x08012e75
 8012e20:	08012e65 	.word	0x08012e65
 8012e24:	08012e75 	.word	0x08012e75
 8012e28:	08012e75 	.word	0x08012e75
 8012e2c:	08012e75 	.word	0x08012e75
 8012e30:	08012e75 	.word	0x08012e75
 8012e34:	08012e75 	.word	0x08012e75
 8012e38:	08012e75 	.word	0x08012e75
 8012e3c:	08012e75 	.word	0x08012e75
 8012e40:	08012e6d 	.word	0x08012e6d
 8012e44:	2301      	movs	r3, #1
 8012e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e4a:	e0bc      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012e4c:	2304      	movs	r3, #4
 8012e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e52:	e0b8      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012e54:	2308      	movs	r3, #8
 8012e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e5a:	e0b4      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012e5c:	2310      	movs	r3, #16
 8012e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e62:	e0b0      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012e64:	2320      	movs	r3, #32
 8012e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e6a:	e0ac      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012e6c:	2340      	movs	r3, #64	@ 0x40
 8012e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e72:	e0a8      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012e74:	2380      	movs	r3, #128	@ 0x80
 8012e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e7a:	e0a4      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012e7c:	697b      	ldr	r3, [r7, #20]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	4a8f      	ldr	r2, [pc, #572]	@ (80130c0 <UART_SetConfig+0x6a0>)
 8012e82:	4293      	cmp	r3, r2
 8012e84:	d130      	bne.n	8012ee8 <UART_SetConfig+0x4c8>
 8012e86:	4b8d      	ldr	r3, [pc, #564]	@ (80130bc <UART_SetConfig+0x69c>)
 8012e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e8a:	f003 0307 	and.w	r3, r3, #7
 8012e8e:	2b05      	cmp	r3, #5
 8012e90:	d826      	bhi.n	8012ee0 <UART_SetConfig+0x4c0>
 8012e92:	a201      	add	r2, pc, #4	@ (adr r2, 8012e98 <UART_SetConfig+0x478>)
 8012e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e98:	08012eb1 	.word	0x08012eb1
 8012e9c:	08012eb9 	.word	0x08012eb9
 8012ea0:	08012ec1 	.word	0x08012ec1
 8012ea4:	08012ec9 	.word	0x08012ec9
 8012ea8:	08012ed1 	.word	0x08012ed1
 8012eac:	08012ed9 	.word	0x08012ed9
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012eb6:	e086      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012eb8:	2304      	movs	r3, #4
 8012eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ebe:	e082      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012ec0:	2308      	movs	r3, #8
 8012ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ec6:	e07e      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012ec8:	2310      	movs	r3, #16
 8012eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ece:	e07a      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012ed0:	2320      	movs	r3, #32
 8012ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ed6:	e076      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012ed8:	2340      	movs	r3, #64	@ 0x40
 8012eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ede:	e072      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012ee0:	2380      	movs	r3, #128	@ 0x80
 8012ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ee6:	e06e      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	4a75      	ldr	r2, [pc, #468]	@ (80130c4 <UART_SetConfig+0x6a4>)
 8012eee:	4293      	cmp	r3, r2
 8012ef0:	d130      	bne.n	8012f54 <UART_SetConfig+0x534>
 8012ef2:	4b72      	ldr	r3, [pc, #456]	@ (80130bc <UART_SetConfig+0x69c>)
 8012ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ef6:	f003 0307 	and.w	r3, r3, #7
 8012efa:	2b05      	cmp	r3, #5
 8012efc:	d826      	bhi.n	8012f4c <UART_SetConfig+0x52c>
 8012efe:	a201      	add	r2, pc, #4	@ (adr r2, 8012f04 <UART_SetConfig+0x4e4>)
 8012f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f04:	08012f1d 	.word	0x08012f1d
 8012f08:	08012f25 	.word	0x08012f25
 8012f0c:	08012f2d 	.word	0x08012f2d
 8012f10:	08012f35 	.word	0x08012f35
 8012f14:	08012f3d 	.word	0x08012f3d
 8012f18:	08012f45 	.word	0x08012f45
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f22:	e050      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012f24:	2304      	movs	r3, #4
 8012f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f2a:	e04c      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012f2c:	2308      	movs	r3, #8
 8012f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f32:	e048      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012f34:	2310      	movs	r3, #16
 8012f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f3a:	e044      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012f3c:	2320      	movs	r3, #32
 8012f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f42:	e040      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012f44:	2340      	movs	r3, #64	@ 0x40
 8012f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f4a:	e03c      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012f4c:	2380      	movs	r3, #128	@ 0x80
 8012f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f52:	e038      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	4a5b      	ldr	r2, [pc, #364]	@ (80130c8 <UART_SetConfig+0x6a8>)
 8012f5a:	4293      	cmp	r3, r2
 8012f5c:	d130      	bne.n	8012fc0 <UART_SetConfig+0x5a0>
 8012f5e:	4b57      	ldr	r3, [pc, #348]	@ (80130bc <UART_SetConfig+0x69c>)
 8012f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012f62:	f003 0307 	and.w	r3, r3, #7
 8012f66:	2b05      	cmp	r3, #5
 8012f68:	d826      	bhi.n	8012fb8 <UART_SetConfig+0x598>
 8012f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8012f70 <UART_SetConfig+0x550>)
 8012f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f70:	08012f89 	.word	0x08012f89
 8012f74:	08012f91 	.word	0x08012f91
 8012f78:	08012f99 	.word	0x08012f99
 8012f7c:	08012fa1 	.word	0x08012fa1
 8012f80:	08012fa9 	.word	0x08012fa9
 8012f84:	08012fb1 	.word	0x08012fb1
 8012f88:	2302      	movs	r3, #2
 8012f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f8e:	e01a      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012f90:	2304      	movs	r3, #4
 8012f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f96:	e016      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012f98:	2308      	movs	r3, #8
 8012f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f9e:	e012      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012fa0:	2310      	movs	r3, #16
 8012fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fa6:	e00e      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012fa8:	2320      	movs	r3, #32
 8012faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fae:	e00a      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012fb0:	2340      	movs	r3, #64	@ 0x40
 8012fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fb6:	e006      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012fb8:	2380      	movs	r3, #128	@ 0x80
 8012fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fbe:	e002      	b.n	8012fc6 <UART_SetConfig+0x5a6>
 8012fc0:	2380      	movs	r3, #128	@ 0x80
 8012fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	4a3f      	ldr	r2, [pc, #252]	@ (80130c8 <UART_SetConfig+0x6a8>)
 8012fcc:	4293      	cmp	r3, r2
 8012fce:	f040 80f8 	bne.w	80131c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012fd2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012fd6:	2b20      	cmp	r3, #32
 8012fd8:	dc46      	bgt.n	8013068 <UART_SetConfig+0x648>
 8012fda:	2b02      	cmp	r3, #2
 8012fdc:	f2c0 8082 	blt.w	80130e4 <UART_SetConfig+0x6c4>
 8012fe0:	3b02      	subs	r3, #2
 8012fe2:	2b1e      	cmp	r3, #30
 8012fe4:	d87e      	bhi.n	80130e4 <UART_SetConfig+0x6c4>
 8012fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8012fec <UART_SetConfig+0x5cc>)
 8012fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fec:	0801306f 	.word	0x0801306f
 8012ff0:	080130e5 	.word	0x080130e5
 8012ff4:	08013077 	.word	0x08013077
 8012ff8:	080130e5 	.word	0x080130e5
 8012ffc:	080130e5 	.word	0x080130e5
 8013000:	080130e5 	.word	0x080130e5
 8013004:	08013087 	.word	0x08013087
 8013008:	080130e5 	.word	0x080130e5
 801300c:	080130e5 	.word	0x080130e5
 8013010:	080130e5 	.word	0x080130e5
 8013014:	080130e5 	.word	0x080130e5
 8013018:	080130e5 	.word	0x080130e5
 801301c:	080130e5 	.word	0x080130e5
 8013020:	080130e5 	.word	0x080130e5
 8013024:	08013097 	.word	0x08013097
 8013028:	080130e5 	.word	0x080130e5
 801302c:	080130e5 	.word	0x080130e5
 8013030:	080130e5 	.word	0x080130e5
 8013034:	080130e5 	.word	0x080130e5
 8013038:	080130e5 	.word	0x080130e5
 801303c:	080130e5 	.word	0x080130e5
 8013040:	080130e5 	.word	0x080130e5
 8013044:	080130e5 	.word	0x080130e5
 8013048:	080130e5 	.word	0x080130e5
 801304c:	080130e5 	.word	0x080130e5
 8013050:	080130e5 	.word	0x080130e5
 8013054:	080130e5 	.word	0x080130e5
 8013058:	080130e5 	.word	0x080130e5
 801305c:	080130e5 	.word	0x080130e5
 8013060:	080130e5 	.word	0x080130e5
 8013064:	080130d7 	.word	0x080130d7
 8013068:	2b40      	cmp	r3, #64	@ 0x40
 801306a:	d037      	beq.n	80130dc <UART_SetConfig+0x6bc>
 801306c:	e03a      	b.n	80130e4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801306e:	f7fc fa3f 	bl	800f4f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8013072:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013074:	e03c      	b.n	80130f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801307a:	4618      	mov	r0, r3
 801307c:	f7fc fa4e 	bl	800f51c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013084:	e034      	b.n	80130f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013086:	f107 0318 	add.w	r3, r7, #24
 801308a:	4618      	mov	r0, r3
 801308c:	f7fc fb9a 	bl	800f7c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013090:	69fb      	ldr	r3, [r7, #28]
 8013092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013094:	e02c      	b.n	80130f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013096:	4b09      	ldr	r3, [pc, #36]	@ (80130bc <UART_SetConfig+0x69c>)
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	f003 0320 	and.w	r3, r3, #32
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d016      	beq.n	80130d0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80130a2:	4b06      	ldr	r3, [pc, #24]	@ (80130bc <UART_SetConfig+0x69c>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	08db      	lsrs	r3, r3, #3
 80130a8:	f003 0303 	and.w	r3, r3, #3
 80130ac:	4a07      	ldr	r2, [pc, #28]	@ (80130cc <UART_SetConfig+0x6ac>)
 80130ae:	fa22 f303 	lsr.w	r3, r2, r3
 80130b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80130b4:	e01c      	b.n	80130f0 <UART_SetConfig+0x6d0>
 80130b6:	bf00      	nop
 80130b8:	40011400 	.word	0x40011400
 80130bc:	58024400 	.word	0x58024400
 80130c0:	40007800 	.word	0x40007800
 80130c4:	40007c00 	.word	0x40007c00
 80130c8:	58000c00 	.word	0x58000c00
 80130cc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80130d0:	4b9d      	ldr	r3, [pc, #628]	@ (8013348 <UART_SetConfig+0x928>)
 80130d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80130d4:	e00c      	b.n	80130f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80130d6:	4b9d      	ldr	r3, [pc, #628]	@ (801334c <UART_SetConfig+0x92c>)
 80130d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80130da:	e009      	b.n	80130f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80130dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80130e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80130e2:	e005      	b.n	80130f0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80130e4:	2300      	movs	r3, #0
 80130e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80130e8:	2301      	movs	r3, #1
 80130ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80130ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80130f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	f000 81de 	beq.w	80134b4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80130f8:	697b      	ldr	r3, [r7, #20]
 80130fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130fc:	4a94      	ldr	r2, [pc, #592]	@ (8013350 <UART_SetConfig+0x930>)
 80130fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013102:	461a      	mov	r2, r3
 8013104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013106:	fbb3 f3f2 	udiv	r3, r3, r2
 801310a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801310c:	697b      	ldr	r3, [r7, #20]
 801310e:	685a      	ldr	r2, [r3, #4]
 8013110:	4613      	mov	r3, r2
 8013112:	005b      	lsls	r3, r3, #1
 8013114:	4413      	add	r3, r2
 8013116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013118:	429a      	cmp	r2, r3
 801311a:	d305      	bcc.n	8013128 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013124:	429a      	cmp	r2, r3
 8013126:	d903      	bls.n	8013130 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8013128:	2301      	movs	r3, #1
 801312a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801312e:	e1c1      	b.n	80134b4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013132:	2200      	movs	r2, #0
 8013134:	60bb      	str	r3, [r7, #8]
 8013136:	60fa      	str	r2, [r7, #12]
 8013138:	697b      	ldr	r3, [r7, #20]
 801313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801313c:	4a84      	ldr	r2, [pc, #528]	@ (8013350 <UART_SetConfig+0x930>)
 801313e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013142:	b29b      	uxth	r3, r3
 8013144:	2200      	movs	r2, #0
 8013146:	603b      	str	r3, [r7, #0]
 8013148:	607a      	str	r2, [r7, #4]
 801314a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801314e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013152:	f7ed f91d 	bl	8000390 <__aeabi_uldivmod>
 8013156:	4602      	mov	r2, r0
 8013158:	460b      	mov	r3, r1
 801315a:	4610      	mov	r0, r2
 801315c:	4619      	mov	r1, r3
 801315e:	f04f 0200 	mov.w	r2, #0
 8013162:	f04f 0300 	mov.w	r3, #0
 8013166:	020b      	lsls	r3, r1, #8
 8013168:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801316c:	0202      	lsls	r2, r0, #8
 801316e:	6979      	ldr	r1, [r7, #20]
 8013170:	6849      	ldr	r1, [r1, #4]
 8013172:	0849      	lsrs	r1, r1, #1
 8013174:	2000      	movs	r0, #0
 8013176:	460c      	mov	r4, r1
 8013178:	4605      	mov	r5, r0
 801317a:	eb12 0804 	adds.w	r8, r2, r4
 801317e:	eb43 0905 	adc.w	r9, r3, r5
 8013182:	697b      	ldr	r3, [r7, #20]
 8013184:	685b      	ldr	r3, [r3, #4]
 8013186:	2200      	movs	r2, #0
 8013188:	469a      	mov	sl, r3
 801318a:	4693      	mov	fp, r2
 801318c:	4652      	mov	r2, sl
 801318e:	465b      	mov	r3, fp
 8013190:	4640      	mov	r0, r8
 8013192:	4649      	mov	r1, r9
 8013194:	f7ed f8fc 	bl	8000390 <__aeabi_uldivmod>
 8013198:	4602      	mov	r2, r0
 801319a:	460b      	mov	r3, r1
 801319c:	4613      	mov	r3, r2
 801319e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80131a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80131a6:	d308      	bcc.n	80131ba <UART_SetConfig+0x79a>
 80131a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80131ae:	d204      	bcs.n	80131ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80131b6:	60da      	str	r2, [r3, #12]
 80131b8:	e17c      	b.n	80134b4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80131ba:	2301      	movs	r3, #1
 80131bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80131c0:	e178      	b.n	80134b4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	69db      	ldr	r3, [r3, #28]
 80131c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80131ca:	f040 80c5 	bne.w	8013358 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80131ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80131d2:	2b20      	cmp	r3, #32
 80131d4:	dc48      	bgt.n	8013268 <UART_SetConfig+0x848>
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	db7b      	blt.n	80132d2 <UART_SetConfig+0x8b2>
 80131da:	2b20      	cmp	r3, #32
 80131dc:	d879      	bhi.n	80132d2 <UART_SetConfig+0x8b2>
 80131de:	a201      	add	r2, pc, #4	@ (adr r2, 80131e4 <UART_SetConfig+0x7c4>)
 80131e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131e4:	0801326f 	.word	0x0801326f
 80131e8:	08013277 	.word	0x08013277
 80131ec:	080132d3 	.word	0x080132d3
 80131f0:	080132d3 	.word	0x080132d3
 80131f4:	0801327f 	.word	0x0801327f
 80131f8:	080132d3 	.word	0x080132d3
 80131fc:	080132d3 	.word	0x080132d3
 8013200:	080132d3 	.word	0x080132d3
 8013204:	0801328f 	.word	0x0801328f
 8013208:	080132d3 	.word	0x080132d3
 801320c:	080132d3 	.word	0x080132d3
 8013210:	080132d3 	.word	0x080132d3
 8013214:	080132d3 	.word	0x080132d3
 8013218:	080132d3 	.word	0x080132d3
 801321c:	080132d3 	.word	0x080132d3
 8013220:	080132d3 	.word	0x080132d3
 8013224:	0801329f 	.word	0x0801329f
 8013228:	080132d3 	.word	0x080132d3
 801322c:	080132d3 	.word	0x080132d3
 8013230:	080132d3 	.word	0x080132d3
 8013234:	080132d3 	.word	0x080132d3
 8013238:	080132d3 	.word	0x080132d3
 801323c:	080132d3 	.word	0x080132d3
 8013240:	080132d3 	.word	0x080132d3
 8013244:	080132d3 	.word	0x080132d3
 8013248:	080132d3 	.word	0x080132d3
 801324c:	080132d3 	.word	0x080132d3
 8013250:	080132d3 	.word	0x080132d3
 8013254:	080132d3 	.word	0x080132d3
 8013258:	080132d3 	.word	0x080132d3
 801325c:	080132d3 	.word	0x080132d3
 8013260:	080132d3 	.word	0x080132d3
 8013264:	080132c5 	.word	0x080132c5
 8013268:	2b40      	cmp	r3, #64	@ 0x40
 801326a:	d02e      	beq.n	80132ca <UART_SetConfig+0x8aa>
 801326c:	e031      	b.n	80132d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801326e:	f7fa ff09 	bl	800e084 <HAL_RCC_GetPCLK1Freq>
 8013272:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013274:	e033      	b.n	80132de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013276:	f7fa ff1b 	bl	800e0b0 <HAL_RCC_GetPCLK2Freq>
 801327a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801327c:	e02f      	b.n	80132de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801327e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013282:	4618      	mov	r0, r3
 8013284:	f7fc f94a 	bl	800f51c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801328a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801328c:	e027      	b.n	80132de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801328e:	f107 0318 	add.w	r3, r7, #24
 8013292:	4618      	mov	r0, r3
 8013294:	f7fc fa96 	bl	800f7c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013298:	69fb      	ldr	r3, [r7, #28]
 801329a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801329c:	e01f      	b.n	80132de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801329e:	4b2d      	ldr	r3, [pc, #180]	@ (8013354 <UART_SetConfig+0x934>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	f003 0320 	and.w	r3, r3, #32
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d009      	beq.n	80132be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80132aa:	4b2a      	ldr	r3, [pc, #168]	@ (8013354 <UART_SetConfig+0x934>)
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	08db      	lsrs	r3, r3, #3
 80132b0:	f003 0303 	and.w	r3, r3, #3
 80132b4:	4a24      	ldr	r2, [pc, #144]	@ (8013348 <UART_SetConfig+0x928>)
 80132b6:	fa22 f303 	lsr.w	r3, r2, r3
 80132ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80132bc:	e00f      	b.n	80132de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80132be:	4b22      	ldr	r3, [pc, #136]	@ (8013348 <UART_SetConfig+0x928>)
 80132c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132c2:	e00c      	b.n	80132de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80132c4:	4b21      	ldr	r3, [pc, #132]	@ (801334c <UART_SetConfig+0x92c>)
 80132c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132c8:	e009      	b.n	80132de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80132ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80132ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132d0:	e005      	b.n	80132de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80132d2:	2300      	movs	r3, #0
 80132d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80132d6:	2301      	movs	r3, #1
 80132d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80132dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80132de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	f000 80e7 	beq.w	80134b4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132ea:	4a19      	ldr	r2, [pc, #100]	@ (8013350 <UART_SetConfig+0x930>)
 80132ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80132f0:	461a      	mov	r2, r3
 80132f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80132f8:	005a      	lsls	r2, r3, #1
 80132fa:	697b      	ldr	r3, [r7, #20]
 80132fc:	685b      	ldr	r3, [r3, #4]
 80132fe:	085b      	lsrs	r3, r3, #1
 8013300:	441a      	add	r2, r3
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	685b      	ldr	r3, [r3, #4]
 8013306:	fbb2 f3f3 	udiv	r3, r2, r3
 801330a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801330c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801330e:	2b0f      	cmp	r3, #15
 8013310:	d916      	bls.n	8013340 <UART_SetConfig+0x920>
 8013312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013318:	d212      	bcs.n	8013340 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801331a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801331c:	b29b      	uxth	r3, r3
 801331e:	f023 030f 	bic.w	r3, r3, #15
 8013322:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013326:	085b      	lsrs	r3, r3, #1
 8013328:	b29b      	uxth	r3, r3
 801332a:	f003 0307 	and.w	r3, r3, #7
 801332e:	b29a      	uxth	r2, r3
 8013330:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013332:	4313      	orrs	r3, r2
 8013334:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8013336:	697b      	ldr	r3, [r7, #20]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801333c:	60da      	str	r2, [r3, #12]
 801333e:	e0b9      	b.n	80134b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013340:	2301      	movs	r3, #1
 8013342:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013346:	e0b5      	b.n	80134b4 <UART_SetConfig+0xa94>
 8013348:	03d09000 	.word	0x03d09000
 801334c:	003d0900 	.word	0x003d0900
 8013350:	0801b594 	.word	0x0801b594
 8013354:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8013358:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801335c:	2b20      	cmp	r3, #32
 801335e:	dc49      	bgt.n	80133f4 <UART_SetConfig+0x9d4>
 8013360:	2b00      	cmp	r3, #0
 8013362:	db7c      	blt.n	801345e <UART_SetConfig+0xa3e>
 8013364:	2b20      	cmp	r3, #32
 8013366:	d87a      	bhi.n	801345e <UART_SetConfig+0xa3e>
 8013368:	a201      	add	r2, pc, #4	@ (adr r2, 8013370 <UART_SetConfig+0x950>)
 801336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801336e:	bf00      	nop
 8013370:	080133fb 	.word	0x080133fb
 8013374:	08013403 	.word	0x08013403
 8013378:	0801345f 	.word	0x0801345f
 801337c:	0801345f 	.word	0x0801345f
 8013380:	0801340b 	.word	0x0801340b
 8013384:	0801345f 	.word	0x0801345f
 8013388:	0801345f 	.word	0x0801345f
 801338c:	0801345f 	.word	0x0801345f
 8013390:	0801341b 	.word	0x0801341b
 8013394:	0801345f 	.word	0x0801345f
 8013398:	0801345f 	.word	0x0801345f
 801339c:	0801345f 	.word	0x0801345f
 80133a0:	0801345f 	.word	0x0801345f
 80133a4:	0801345f 	.word	0x0801345f
 80133a8:	0801345f 	.word	0x0801345f
 80133ac:	0801345f 	.word	0x0801345f
 80133b0:	0801342b 	.word	0x0801342b
 80133b4:	0801345f 	.word	0x0801345f
 80133b8:	0801345f 	.word	0x0801345f
 80133bc:	0801345f 	.word	0x0801345f
 80133c0:	0801345f 	.word	0x0801345f
 80133c4:	0801345f 	.word	0x0801345f
 80133c8:	0801345f 	.word	0x0801345f
 80133cc:	0801345f 	.word	0x0801345f
 80133d0:	0801345f 	.word	0x0801345f
 80133d4:	0801345f 	.word	0x0801345f
 80133d8:	0801345f 	.word	0x0801345f
 80133dc:	0801345f 	.word	0x0801345f
 80133e0:	0801345f 	.word	0x0801345f
 80133e4:	0801345f 	.word	0x0801345f
 80133e8:	0801345f 	.word	0x0801345f
 80133ec:	0801345f 	.word	0x0801345f
 80133f0:	08013451 	.word	0x08013451
 80133f4:	2b40      	cmp	r3, #64	@ 0x40
 80133f6:	d02e      	beq.n	8013456 <UART_SetConfig+0xa36>
 80133f8:	e031      	b.n	801345e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80133fa:	f7fa fe43 	bl	800e084 <HAL_RCC_GetPCLK1Freq>
 80133fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013400:	e033      	b.n	801346a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013402:	f7fa fe55 	bl	800e0b0 <HAL_RCC_GetPCLK2Freq>
 8013406:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013408:	e02f      	b.n	801346a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801340a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801340e:	4618      	mov	r0, r3
 8013410:	f7fc f884 	bl	800f51c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013418:	e027      	b.n	801346a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801341a:	f107 0318 	add.w	r3, r7, #24
 801341e:	4618      	mov	r0, r3
 8013420:	f7fc f9d0 	bl	800f7c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013424:	69fb      	ldr	r3, [r7, #28]
 8013426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013428:	e01f      	b.n	801346a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801342a:	4b2d      	ldr	r3, [pc, #180]	@ (80134e0 <UART_SetConfig+0xac0>)
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	f003 0320 	and.w	r3, r3, #32
 8013432:	2b00      	cmp	r3, #0
 8013434:	d009      	beq.n	801344a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013436:	4b2a      	ldr	r3, [pc, #168]	@ (80134e0 <UART_SetConfig+0xac0>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	08db      	lsrs	r3, r3, #3
 801343c:	f003 0303 	and.w	r3, r3, #3
 8013440:	4a28      	ldr	r2, [pc, #160]	@ (80134e4 <UART_SetConfig+0xac4>)
 8013442:	fa22 f303 	lsr.w	r3, r2, r3
 8013446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013448:	e00f      	b.n	801346a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801344a:	4b26      	ldr	r3, [pc, #152]	@ (80134e4 <UART_SetConfig+0xac4>)
 801344c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801344e:	e00c      	b.n	801346a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013450:	4b25      	ldr	r3, [pc, #148]	@ (80134e8 <UART_SetConfig+0xac8>)
 8013452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013454:	e009      	b.n	801346a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801345a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801345c:	e005      	b.n	801346a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801345e:	2300      	movs	r3, #0
 8013460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013462:	2301      	movs	r3, #1
 8013464:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013468:	bf00      	nop
    }

    if (pclk != 0U)
 801346a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801346c:	2b00      	cmp	r3, #0
 801346e:	d021      	beq.n	80134b4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013470:	697b      	ldr	r3, [r7, #20]
 8013472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013474:	4a1d      	ldr	r2, [pc, #116]	@ (80134ec <UART_SetConfig+0xacc>)
 8013476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801347a:	461a      	mov	r2, r3
 801347c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801347e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013482:	697b      	ldr	r3, [r7, #20]
 8013484:	685b      	ldr	r3, [r3, #4]
 8013486:	085b      	lsrs	r3, r3, #1
 8013488:	441a      	add	r2, r3
 801348a:	697b      	ldr	r3, [r7, #20]
 801348c:	685b      	ldr	r3, [r3, #4]
 801348e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013492:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013496:	2b0f      	cmp	r3, #15
 8013498:	d909      	bls.n	80134ae <UART_SetConfig+0xa8e>
 801349a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801349c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80134a0:	d205      	bcs.n	80134ae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80134a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134a4:	b29a      	uxth	r2, r3
 80134a6:	697b      	ldr	r3, [r7, #20]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	60da      	str	r2, [r3, #12]
 80134ac:	e002      	b.n	80134b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80134ae:	2301      	movs	r3, #1
 80134b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	2201      	movs	r2, #1
 80134b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80134bc:	697b      	ldr	r3, [r7, #20]
 80134be:	2201      	movs	r2, #1
 80134c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80134c4:	697b      	ldr	r3, [r7, #20]
 80134c6:	2200      	movs	r2, #0
 80134c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	2200      	movs	r2, #0
 80134ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80134d0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80134d4:	4618      	mov	r0, r3
 80134d6:	3748      	adds	r7, #72	@ 0x48
 80134d8:	46bd      	mov	sp, r7
 80134da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80134de:	bf00      	nop
 80134e0:	58024400 	.word	0x58024400
 80134e4:	03d09000 	.word	0x03d09000
 80134e8:	003d0900 	.word	0x003d0900
 80134ec:	0801b594 	.word	0x0801b594

080134f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80134f0:	b480      	push	{r7}
 80134f2:	b083      	sub	sp, #12
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134fc:	f003 0308 	and.w	r3, r3, #8
 8013500:	2b00      	cmp	r3, #0
 8013502:	d00a      	beq.n	801351a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	430a      	orrs	r2, r1
 8013518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801351e:	f003 0301 	and.w	r3, r3, #1
 8013522:	2b00      	cmp	r3, #0
 8013524:	d00a      	beq.n	801353c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	685b      	ldr	r3, [r3, #4]
 801352c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	430a      	orrs	r2, r1
 801353a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013540:	f003 0302 	and.w	r3, r3, #2
 8013544:	2b00      	cmp	r3, #0
 8013546:	d00a      	beq.n	801355e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	685b      	ldr	r3, [r3, #4]
 801354e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	430a      	orrs	r2, r1
 801355c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013562:	f003 0304 	and.w	r3, r3, #4
 8013566:	2b00      	cmp	r3, #0
 8013568:	d00a      	beq.n	8013580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	685b      	ldr	r3, [r3, #4]
 8013570:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	430a      	orrs	r2, r1
 801357e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013584:	f003 0310 	and.w	r3, r3, #16
 8013588:	2b00      	cmp	r3, #0
 801358a:	d00a      	beq.n	80135a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	689b      	ldr	r3, [r3, #8]
 8013592:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	430a      	orrs	r2, r1
 80135a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135a6:	f003 0320 	and.w	r3, r3, #32
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d00a      	beq.n	80135c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	689b      	ldr	r3, [r3, #8]
 80135b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	430a      	orrs	r2, r1
 80135c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d01a      	beq.n	8013606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	685b      	ldr	r3, [r3, #4]
 80135d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	430a      	orrs	r2, r1
 80135e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80135ee:	d10a      	bne.n	8013606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	685b      	ldr	r3, [r3, #4]
 80135f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	430a      	orrs	r2, r1
 8013604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801360a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801360e:	2b00      	cmp	r3, #0
 8013610:	d00a      	beq.n	8013628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	685b      	ldr	r3, [r3, #4]
 8013618:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	430a      	orrs	r2, r1
 8013626:	605a      	str	r2, [r3, #4]
  }
}
 8013628:	bf00      	nop
 801362a:	370c      	adds	r7, #12
 801362c:	46bd      	mov	sp, r7
 801362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013632:	4770      	bx	lr

08013634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b098      	sub	sp, #96	@ 0x60
 8013638:	af02      	add	r7, sp, #8
 801363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2200      	movs	r2, #0
 8013640:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013644:	f7ef fee6 	bl	8003414 <HAL_GetTick>
 8013648:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	f003 0308 	and.w	r3, r3, #8
 8013654:	2b08      	cmp	r3, #8
 8013656:	d12f      	bne.n	80136b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013658:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801365c:	9300      	str	r3, [sp, #0]
 801365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013660:	2200      	movs	r2, #0
 8013662:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8013666:	6878      	ldr	r0, [r7, #4]
 8013668:	f000 f88e 	bl	8013788 <UART_WaitOnFlagUntilTimeout>
 801366c:	4603      	mov	r3, r0
 801366e:	2b00      	cmp	r3, #0
 8013670:	d022      	beq.n	80136b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801367a:	e853 3f00 	ldrex	r3, [r3]
 801367e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013686:	653b      	str	r3, [r7, #80]	@ 0x50
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	461a      	mov	r2, r3
 801368e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013690:	647b      	str	r3, [r7, #68]	@ 0x44
 8013692:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013694:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013698:	e841 2300 	strex	r3, r2, [r1]
 801369c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801369e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d1e6      	bne.n	8013672 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2220      	movs	r2, #32
 80136a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2200      	movs	r2, #0
 80136b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80136b4:	2303      	movs	r3, #3
 80136b6:	e063      	b.n	8013780 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	f003 0304 	and.w	r3, r3, #4
 80136c2:	2b04      	cmp	r3, #4
 80136c4:	d149      	bne.n	801375a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80136c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80136ca:	9300      	str	r3, [sp, #0]
 80136cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136ce:	2200      	movs	r2, #0
 80136d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80136d4:	6878      	ldr	r0, [r7, #4]
 80136d6:	f000 f857 	bl	8013788 <UART_WaitOnFlagUntilTimeout>
 80136da:	4603      	mov	r3, r0
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d03c      	beq.n	801375a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136e8:	e853 3f00 	ldrex	r3, [r3]
 80136ec:	623b      	str	r3, [r7, #32]
   return(result);
 80136ee:	6a3b      	ldr	r3, [r7, #32]
 80136f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80136f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	461a      	mov	r2, r3
 80136fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80136fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8013700:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013706:	e841 2300 	strex	r3, r2, [r1]
 801370a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801370e:	2b00      	cmp	r3, #0
 8013710:	d1e6      	bne.n	80136e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	3308      	adds	r3, #8
 8013718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	e853 3f00 	ldrex	r3, [r3]
 8013720:	60fb      	str	r3, [r7, #12]
   return(result);
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	f023 0301 	bic.w	r3, r3, #1
 8013728:	64bb      	str	r3, [r7, #72]	@ 0x48
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	3308      	adds	r3, #8
 8013730:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013732:	61fa      	str	r2, [r7, #28]
 8013734:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013736:	69b9      	ldr	r1, [r7, #24]
 8013738:	69fa      	ldr	r2, [r7, #28]
 801373a:	e841 2300 	strex	r3, r2, [r1]
 801373e:	617b      	str	r3, [r7, #20]
   return(result);
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d1e5      	bne.n	8013712 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2220      	movs	r2, #32
 801374a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2200      	movs	r2, #0
 8013752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013756:	2303      	movs	r3, #3
 8013758:	e012      	b.n	8013780 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2220      	movs	r2, #32
 801375e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	2220      	movs	r2, #32
 8013766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2200      	movs	r2, #0
 801376e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	2200      	movs	r2, #0
 8013774:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	2200      	movs	r2, #0
 801377a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801377e:	2300      	movs	r3, #0
}
 8013780:	4618      	mov	r0, r3
 8013782:	3758      	adds	r7, #88	@ 0x58
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}

08013788 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b084      	sub	sp, #16
 801378c:	af00      	add	r7, sp, #0
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	60b9      	str	r1, [r7, #8]
 8013792:	603b      	str	r3, [r7, #0]
 8013794:	4613      	mov	r3, r2
 8013796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013798:	e04f      	b.n	801383a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801379a:	69bb      	ldr	r3, [r7, #24]
 801379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137a0:	d04b      	beq.n	801383a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80137a2:	f7ef fe37 	bl	8003414 <HAL_GetTick>
 80137a6:	4602      	mov	r2, r0
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	1ad3      	subs	r3, r2, r3
 80137ac:	69ba      	ldr	r2, [r7, #24]
 80137ae:	429a      	cmp	r2, r3
 80137b0:	d302      	bcc.n	80137b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80137b2:	69bb      	ldr	r3, [r7, #24]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d101      	bne.n	80137bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80137b8:	2303      	movs	r3, #3
 80137ba:	e04e      	b.n	801385a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	f003 0304 	and.w	r3, r3, #4
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d037      	beq.n	801383a <UART_WaitOnFlagUntilTimeout+0xb2>
 80137ca:	68bb      	ldr	r3, [r7, #8]
 80137cc:	2b80      	cmp	r3, #128	@ 0x80
 80137ce:	d034      	beq.n	801383a <UART_WaitOnFlagUntilTimeout+0xb2>
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	2b40      	cmp	r3, #64	@ 0x40
 80137d4:	d031      	beq.n	801383a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	69db      	ldr	r3, [r3, #28]
 80137dc:	f003 0308 	and.w	r3, r3, #8
 80137e0:	2b08      	cmp	r3, #8
 80137e2:	d110      	bne.n	8013806 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	2208      	movs	r2, #8
 80137ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80137ec:	68f8      	ldr	r0, [r7, #12]
 80137ee:	f000 f921 	bl	8013a34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	2208      	movs	r2, #8
 80137f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	2200      	movs	r2, #0
 80137fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8013802:	2301      	movs	r3, #1
 8013804:	e029      	b.n	801385a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	69db      	ldr	r3, [r3, #28]
 801380c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013814:	d111      	bne.n	801383a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801381e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013820:	68f8      	ldr	r0, [r7, #12]
 8013822:	f000 f907 	bl	8013a34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	2220      	movs	r2, #32
 801382a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	2200      	movs	r2, #0
 8013832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013836:	2303      	movs	r3, #3
 8013838:	e00f      	b.n	801385a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	69da      	ldr	r2, [r3, #28]
 8013840:	68bb      	ldr	r3, [r7, #8]
 8013842:	4013      	ands	r3, r2
 8013844:	68ba      	ldr	r2, [r7, #8]
 8013846:	429a      	cmp	r2, r3
 8013848:	bf0c      	ite	eq
 801384a:	2301      	moveq	r3, #1
 801384c:	2300      	movne	r3, #0
 801384e:	b2db      	uxtb	r3, r3
 8013850:	461a      	mov	r2, r3
 8013852:	79fb      	ldrb	r3, [r7, #7]
 8013854:	429a      	cmp	r2, r3
 8013856:	d0a0      	beq.n	801379a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013858:	2300      	movs	r3, #0
}
 801385a:	4618      	mov	r0, r3
 801385c:	3710      	adds	r7, #16
 801385e:	46bd      	mov	sp, r7
 8013860:	bd80      	pop	{r7, pc}
	...

08013864 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b096      	sub	sp, #88	@ 0x58
 8013868:	af00      	add	r7, sp, #0
 801386a:	60f8      	str	r0, [r7, #12]
 801386c:	60b9      	str	r1, [r7, #8]
 801386e:	4613      	mov	r3, r2
 8013870:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	68ba      	ldr	r2, [r7, #8]
 8013876:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	88fa      	ldrh	r2, [r7, #6]
 801387c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	2200      	movs	r2, #0
 8013884:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	2222      	movs	r2, #34	@ 0x22
 801388c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013896:	2b00      	cmp	r3, #0
 8013898:	d02d      	beq.n	80138f6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80138a0:	4a40      	ldr	r2, [pc, #256]	@ (80139a4 <UART_Start_Receive_DMA+0x140>)
 80138a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80138aa:	4a3f      	ldr	r2, [pc, #252]	@ (80139a8 <UART_Start_Receive_DMA+0x144>)
 80138ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80138b4:	4a3d      	ldr	r2, [pc, #244]	@ (80139ac <UART_Start_Receive_DMA+0x148>)
 80138b6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80138be:	2200      	movs	r2, #0
 80138c0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	3324      	adds	r3, #36	@ 0x24
 80138ce:	4619      	mov	r1, r3
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80138d4:	461a      	mov	r2, r3
 80138d6:	88fb      	ldrh	r3, [r7, #6]
 80138d8:	f7f0 fda8 	bl	800442c <HAL_DMA_Start_IT>
 80138dc:	4603      	mov	r3, r0
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d009      	beq.n	80138f6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2210      	movs	r2, #16
 80138e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	2220      	movs	r2, #32
 80138ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80138f2:	2301      	movs	r3, #1
 80138f4:	e051      	b.n	801399a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	691b      	ldr	r3, [r3, #16]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d018      	beq.n	8013930 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013906:	e853 3f00 	ldrex	r3, [r3]
 801390a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801390c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801390e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013912:	657b      	str	r3, [r7, #84]	@ 0x54
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	461a      	mov	r2, r3
 801391a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801391c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801391e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013920:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013922:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013924:	e841 2300 	strex	r3, r2, [r1]
 8013928:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801392a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801392c:	2b00      	cmp	r3, #0
 801392e:	d1e6      	bne.n	80138fe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	3308      	adds	r3, #8
 8013936:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801393a:	e853 3f00 	ldrex	r3, [r3]
 801393e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013942:	f043 0301 	orr.w	r3, r3, #1
 8013946:	653b      	str	r3, [r7, #80]	@ 0x50
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	3308      	adds	r3, #8
 801394e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013950:	637a      	str	r2, [r7, #52]	@ 0x34
 8013952:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013954:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013956:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013958:	e841 2300 	strex	r3, r2, [r1]
 801395c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801395e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013960:	2b00      	cmp	r3, #0
 8013962:	d1e5      	bne.n	8013930 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	3308      	adds	r3, #8
 801396a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	e853 3f00 	ldrex	r3, [r3]
 8013972:	613b      	str	r3, [r7, #16]
   return(result);
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801397a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	3308      	adds	r3, #8
 8013982:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013984:	623a      	str	r2, [r7, #32]
 8013986:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013988:	69f9      	ldr	r1, [r7, #28]
 801398a:	6a3a      	ldr	r2, [r7, #32]
 801398c:	e841 2300 	strex	r3, r2, [r1]
 8013990:	61bb      	str	r3, [r7, #24]
   return(result);
 8013992:	69bb      	ldr	r3, [r7, #24]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d1e5      	bne.n	8013964 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8013998:	2300      	movs	r3, #0
}
 801399a:	4618      	mov	r0, r3
 801399c:	3758      	adds	r7, #88	@ 0x58
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}
 80139a2:	bf00      	nop
 80139a4:	08013b01 	.word	0x08013b01
 80139a8:	08013c29 	.word	0x08013c29
 80139ac:	08013c67 	.word	0x08013c67

080139b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80139b0:	b480      	push	{r7}
 80139b2:	b08f      	sub	sp, #60	@ 0x3c
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139be:	6a3b      	ldr	r3, [r7, #32]
 80139c0:	e853 3f00 	ldrex	r3, [r3]
 80139c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80139c6:	69fb      	ldr	r3, [r7, #28]
 80139c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80139cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	461a      	mov	r2, r3
 80139d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80139d8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80139dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80139de:	e841 2300 	strex	r3, r2, [r1]
 80139e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80139e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d1e6      	bne.n	80139b8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	3308      	adds	r3, #8
 80139f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	e853 3f00 	ldrex	r3, [r3]
 80139f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80139fa:	68bb      	ldr	r3, [r7, #8]
 80139fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8013a00:	633b      	str	r3, [r7, #48]	@ 0x30
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	3308      	adds	r3, #8
 8013a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a0a:	61ba      	str	r2, [r7, #24]
 8013a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a0e:	6979      	ldr	r1, [r7, #20]
 8013a10:	69ba      	ldr	r2, [r7, #24]
 8013a12:	e841 2300 	strex	r3, r2, [r1]
 8013a16:	613b      	str	r3, [r7, #16]
   return(result);
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d1e5      	bne.n	80139ea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	2220      	movs	r2, #32
 8013a22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8013a26:	bf00      	nop
 8013a28:	373c      	adds	r7, #60	@ 0x3c
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a30:	4770      	bx	lr
	...

08013a34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013a34:	b480      	push	{r7}
 8013a36:	b095      	sub	sp, #84	@ 0x54
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a44:	e853 3f00 	ldrex	r3, [r3]
 8013a48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	461a      	mov	r2, r3
 8013a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8013a5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013a60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013a62:	e841 2300 	strex	r3, r2, [r1]
 8013a66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d1e6      	bne.n	8013a3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	3308      	adds	r3, #8
 8013a74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a76:	6a3b      	ldr	r3, [r7, #32]
 8013a78:	e853 3f00 	ldrex	r3, [r3]
 8013a7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8013a7e:	69fa      	ldr	r2, [r7, #28]
 8013a80:	4b1e      	ldr	r3, [pc, #120]	@ (8013afc <UART_EndRxTransfer+0xc8>)
 8013a82:	4013      	ands	r3, r2
 8013a84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	3308      	adds	r3, #8
 8013a8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013a8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013a90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013a94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a96:	e841 2300 	strex	r3, r2, [r1]
 8013a9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d1e5      	bne.n	8013a6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013aa6:	2b01      	cmp	r3, #1
 8013aa8:	d118      	bne.n	8013adc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	e853 3f00 	ldrex	r3, [r3]
 8013ab6:	60bb      	str	r3, [r7, #8]
   return(result);
 8013ab8:	68bb      	ldr	r3, [r7, #8]
 8013aba:	f023 0310 	bic.w	r3, r3, #16
 8013abe:	647b      	str	r3, [r7, #68]	@ 0x44
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	461a      	mov	r2, r3
 8013ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ac8:	61bb      	str	r3, [r7, #24]
 8013aca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013acc:	6979      	ldr	r1, [r7, #20]
 8013ace:	69ba      	ldr	r2, [r7, #24]
 8013ad0:	e841 2300 	strex	r3, r2, [r1]
 8013ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8013ad6:	693b      	ldr	r3, [r7, #16]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d1e6      	bne.n	8013aaa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	2220      	movs	r2, #32
 8013ae0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	2200      	movs	r2, #0
 8013aee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013af0:	bf00      	nop
 8013af2:	3754      	adds	r7, #84	@ 0x54
 8013af4:	46bd      	mov	sp, r7
 8013af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afa:	4770      	bx	lr
 8013afc:	effffffe 	.word	0xeffffffe

08013b00 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b09c      	sub	sp, #112	@ 0x70
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b0c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	69db      	ldr	r3, [r3, #28]
 8013b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013b16:	d071      	beq.n	8013bfc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8013b18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013b20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b28:	e853 3f00 	ldrex	r3, [r3]
 8013b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013b34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013b36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	461a      	mov	r2, r3
 8013b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013b3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013b40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013b44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013b46:	e841 2300 	strex	r3, r2, [r1]
 8013b4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013b4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d1e6      	bne.n	8013b20 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	3308      	adds	r3, #8
 8013b58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b5c:	e853 3f00 	ldrex	r3, [r3]
 8013b60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b64:	f023 0301 	bic.w	r3, r3, #1
 8013b68:	667b      	str	r3, [r7, #100]	@ 0x64
 8013b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	3308      	adds	r3, #8
 8013b70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013b72:	647a      	str	r2, [r7, #68]	@ 0x44
 8013b74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013b78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013b7a:	e841 2300 	strex	r3, r2, [r1]
 8013b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d1e5      	bne.n	8013b52 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013b86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	3308      	adds	r3, #8
 8013b8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b90:	e853 3f00 	ldrex	r3, [r3]
 8013b94:	623b      	str	r3, [r7, #32]
   return(result);
 8013b96:	6a3b      	ldr	r3, [r7, #32]
 8013b98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013b9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8013b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	3308      	adds	r3, #8
 8013ba4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013ba6:	633a      	str	r2, [r7, #48]	@ 0x30
 8013ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013baa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013bae:	e841 2300 	strex	r3, r2, [r1]
 8013bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d1e5      	bne.n	8013b86 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013bba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bbc:	2220      	movs	r2, #32
 8013bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013bc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bc6:	2b01      	cmp	r3, #1
 8013bc8:	d118      	bne.n	8013bfc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013bca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bd0:	693b      	ldr	r3, [r7, #16]
 8013bd2:	e853 3f00 	ldrex	r3, [r3]
 8013bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	f023 0310 	bic.w	r3, r3, #16
 8013bde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	461a      	mov	r2, r3
 8013be6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013be8:	61fb      	str	r3, [r7, #28]
 8013bea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bec:	69b9      	ldr	r1, [r7, #24]
 8013bee:	69fa      	ldr	r2, [r7, #28]
 8013bf0:	e841 2300 	strex	r3, r2, [r1]
 8013bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d1e6      	bne.n	8013bca <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bfe:	2200      	movs	r2, #0
 8013c00:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c06:	2b01      	cmp	r3, #1
 8013c08:	d107      	bne.n	8013c1a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013c10:	4619      	mov	r1, r3
 8013c12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013c14:	f7fe fef8 	bl	8012a08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013c18:	e002      	b.n	8013c20 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8013c1a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013c1c:	f7ee f804 	bl	8001c28 <HAL_UART_RxCpltCallback>
}
 8013c20:	bf00      	nop
 8013c22:	3770      	adds	r7, #112	@ 0x70
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}

08013c28 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b084      	sub	sp, #16
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c34:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	2201      	movs	r2, #1
 8013c3a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c40:	2b01      	cmp	r3, #1
 8013c42:	d109      	bne.n	8013c58 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013c4a:	085b      	lsrs	r3, r3, #1
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	4619      	mov	r1, r3
 8013c50:	68f8      	ldr	r0, [r7, #12]
 8013c52:	f7fe fed9 	bl	8012a08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013c56:	e002      	b.n	8013c5e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8013c58:	68f8      	ldr	r0, [r7, #12]
 8013c5a:	f7fe fec1 	bl	80129e0 <HAL_UART_RxHalfCpltCallback>
}
 8013c5e:	bf00      	nop
 8013c60:	3710      	adds	r7, #16
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}

08013c66 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013c66:	b580      	push	{r7, lr}
 8013c68:	b086      	sub	sp, #24
 8013c6a:	af00      	add	r7, sp, #0
 8013c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c72:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013c74:	697b      	ldr	r3, [r7, #20]
 8013c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013c7a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013c82:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	689b      	ldr	r3, [r3, #8]
 8013c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013c8e:	2b80      	cmp	r3, #128	@ 0x80
 8013c90:	d109      	bne.n	8013ca6 <UART_DMAError+0x40>
 8013c92:	693b      	ldr	r3, [r7, #16]
 8013c94:	2b21      	cmp	r3, #33	@ 0x21
 8013c96:	d106      	bne.n	8013ca6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013c98:	697b      	ldr	r3, [r7, #20]
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8013ca0:	6978      	ldr	r0, [r7, #20]
 8013ca2:	f7ff fe85 	bl	80139b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013ca6:	697b      	ldr	r3, [r7, #20]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	689b      	ldr	r3, [r3, #8]
 8013cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013cb0:	2b40      	cmp	r3, #64	@ 0x40
 8013cb2:	d109      	bne.n	8013cc8 <UART_DMAError+0x62>
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	2b22      	cmp	r3, #34	@ 0x22
 8013cb8:	d106      	bne.n	8013cc8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8013cba:	697b      	ldr	r3, [r7, #20]
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8013cc2:	6978      	ldr	r0, [r7, #20]
 8013cc4:	f7ff feb6 	bl	8013a34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013cc8:	697b      	ldr	r3, [r7, #20]
 8013cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013cce:	f043 0210 	orr.w	r2, r3, #16
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013cd8:	6978      	ldr	r0, [r7, #20]
 8013cda:	f7fe fe8b 	bl	80129f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013cde:	bf00      	nop
 8013ce0:	3718      	adds	r7, #24
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}

08013ce6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013ce6:	b580      	push	{r7, lr}
 8013ce8:	b084      	sub	sp, #16
 8013cea:	af00      	add	r7, sp, #0
 8013cec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013cfc:	68f8      	ldr	r0, [r7, #12]
 8013cfe:	f7fe fe79 	bl	80129f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013d02:	bf00      	nop
 8013d04:	3710      	adds	r7, #16
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}

08013d0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013d0a:	b580      	push	{r7, lr}
 8013d0c:	b088      	sub	sp, #32
 8013d0e:	af00      	add	r7, sp, #0
 8013d10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	e853 3f00 	ldrex	r3, [r3]
 8013d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013d26:	61fb      	str	r3, [r7, #28]
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	461a      	mov	r2, r3
 8013d2e:	69fb      	ldr	r3, [r7, #28]
 8013d30:	61bb      	str	r3, [r7, #24]
 8013d32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d34:	6979      	ldr	r1, [r7, #20]
 8013d36:	69ba      	ldr	r2, [r7, #24]
 8013d38:	e841 2300 	strex	r3, r2, [r1]
 8013d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8013d3e:	693b      	ldr	r3, [r7, #16]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d1e6      	bne.n	8013d12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2220      	movs	r2, #32
 8013d48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2200      	movs	r2, #0
 8013d50:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013d52:	6878      	ldr	r0, [r7, #4]
 8013d54:	f7fe fe3a 	bl	80129cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013d58:	bf00      	nop
 8013d5a:	3720      	adds	r7, #32
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}

08013d60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013d60:	b480      	push	{r7}
 8013d62:	b083      	sub	sp, #12
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013d68:	bf00      	nop
 8013d6a:	370c      	adds	r7, #12
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d72:	4770      	bx	lr

08013d74 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013d74:	b480      	push	{r7}
 8013d76:	b083      	sub	sp, #12
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013d7c:	bf00      	nop
 8013d7e:	370c      	adds	r7, #12
 8013d80:	46bd      	mov	sp, r7
 8013d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d86:	4770      	bx	lr

08013d88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013d88:	b480      	push	{r7}
 8013d8a:	b083      	sub	sp, #12
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013d90:	bf00      	nop
 8013d92:	370c      	adds	r7, #12
 8013d94:	46bd      	mov	sp, r7
 8013d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9a:	4770      	bx	lr

08013d9c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b084      	sub	sp, #16
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013daa:	2b01      	cmp	r3, #1
 8013dac:	d101      	bne.n	8013db2 <HAL_UARTEx_EnableFifoMode+0x16>
 8013dae:	2302      	movs	r3, #2
 8013db0:	e02b      	b.n	8013e0a <HAL_UARTEx_EnableFifoMode+0x6e>
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2201      	movs	r2, #1
 8013db6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	2224      	movs	r2, #36	@ 0x24
 8013dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	681a      	ldr	r2, [r3, #0]
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	f022 0201 	bic.w	r2, r2, #1
 8013dd8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013de0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8013de8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	68fa      	ldr	r2, [r7, #12]
 8013df0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013df2:	6878      	ldr	r0, [r7, #4]
 8013df4:	f000 f88a 	bl	8013f0c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	2220      	movs	r2, #32
 8013dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	2200      	movs	r2, #0
 8013e04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013e08:	2300      	movs	r3, #0
}
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	3710      	adds	r7, #16
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}

08013e12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013e12:	b580      	push	{r7, lr}
 8013e14:	b084      	sub	sp, #16
 8013e16:	af00      	add	r7, sp, #0
 8013e18:	6078      	str	r0, [r7, #4]
 8013e1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013e22:	2b01      	cmp	r3, #1
 8013e24:	d101      	bne.n	8013e2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013e26:	2302      	movs	r3, #2
 8013e28:	e02d      	b.n	8013e86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	2201      	movs	r2, #1
 8013e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	2224      	movs	r2, #36	@ 0x24
 8013e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	681a      	ldr	r2, [r3, #0]
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	f022 0201 	bic.w	r2, r2, #1
 8013e50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	689b      	ldr	r3, [r3, #8]
 8013e58:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	683a      	ldr	r2, [r7, #0]
 8013e62:	430a      	orrs	r2, r1
 8013e64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013e66:	6878      	ldr	r0, [r7, #4]
 8013e68:	f000 f850 	bl	8013f0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	68fa      	ldr	r2, [r7, #12]
 8013e72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2220      	movs	r2, #32
 8013e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2200      	movs	r2, #0
 8013e80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013e84:	2300      	movs	r3, #0
}
 8013e86:	4618      	mov	r0, r3
 8013e88:	3710      	adds	r7, #16
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}

08013e8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013e8e:	b580      	push	{r7, lr}
 8013e90:	b084      	sub	sp, #16
 8013e92:	af00      	add	r7, sp, #0
 8013e94:	6078      	str	r0, [r7, #4]
 8013e96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013e9e:	2b01      	cmp	r3, #1
 8013ea0:	d101      	bne.n	8013ea6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013ea2:	2302      	movs	r3, #2
 8013ea4:	e02d      	b.n	8013f02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2201      	movs	r2, #1
 8013eaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	2224      	movs	r2, #36	@ 0x24
 8013eb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	681a      	ldr	r2, [r3, #0]
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	f022 0201 	bic.w	r2, r2, #1
 8013ecc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	689b      	ldr	r3, [r3, #8]
 8013ed4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	683a      	ldr	r2, [r7, #0]
 8013ede:	430a      	orrs	r2, r1
 8013ee0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f000 f812 	bl	8013f0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	68fa      	ldr	r2, [r7, #12]
 8013eee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2220      	movs	r2, #32
 8013ef4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2200      	movs	r2, #0
 8013efc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013f00:	2300      	movs	r3, #0
}
 8013f02:	4618      	mov	r0, r3
 8013f04:	3710      	adds	r7, #16
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}
	...

08013f0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013f0c:	b480      	push	{r7}
 8013f0e:	b085      	sub	sp, #20
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d108      	bne.n	8013f2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2201      	movs	r2, #1
 8013f20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	2201      	movs	r2, #1
 8013f28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013f2c:	e031      	b.n	8013f92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013f2e:	2310      	movs	r3, #16
 8013f30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013f32:	2310      	movs	r3, #16
 8013f34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	689b      	ldr	r3, [r3, #8]
 8013f3c:	0e5b      	lsrs	r3, r3, #25
 8013f3e:	b2db      	uxtb	r3, r3
 8013f40:	f003 0307 	and.w	r3, r3, #7
 8013f44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	689b      	ldr	r3, [r3, #8]
 8013f4c:	0f5b      	lsrs	r3, r3, #29
 8013f4e:	b2db      	uxtb	r3, r3
 8013f50:	f003 0307 	and.w	r3, r3, #7
 8013f54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013f56:	7bbb      	ldrb	r3, [r7, #14]
 8013f58:	7b3a      	ldrb	r2, [r7, #12]
 8013f5a:	4911      	ldr	r1, [pc, #68]	@ (8013fa0 <UARTEx_SetNbDataToProcess+0x94>)
 8013f5c:	5c8a      	ldrb	r2, [r1, r2]
 8013f5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013f62:	7b3a      	ldrb	r2, [r7, #12]
 8013f64:	490f      	ldr	r1, [pc, #60]	@ (8013fa4 <UARTEx_SetNbDataToProcess+0x98>)
 8013f66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013f68:	fb93 f3f2 	sdiv	r3, r3, r2
 8013f6c:	b29a      	uxth	r2, r3
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013f74:	7bfb      	ldrb	r3, [r7, #15]
 8013f76:	7b7a      	ldrb	r2, [r7, #13]
 8013f78:	4909      	ldr	r1, [pc, #36]	@ (8013fa0 <UARTEx_SetNbDataToProcess+0x94>)
 8013f7a:	5c8a      	ldrb	r2, [r1, r2]
 8013f7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013f80:	7b7a      	ldrb	r2, [r7, #13]
 8013f82:	4908      	ldr	r1, [pc, #32]	@ (8013fa4 <UARTEx_SetNbDataToProcess+0x98>)
 8013f84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013f86:	fb93 f3f2 	sdiv	r3, r3, r2
 8013f8a:	b29a      	uxth	r2, r3
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8013f92:	bf00      	nop
 8013f94:	3714      	adds	r7, #20
 8013f96:	46bd      	mov	sp, r7
 8013f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9c:	4770      	bx	lr
 8013f9e:	bf00      	nop
 8013fa0:	0801b5ac 	.word	0x0801b5ac
 8013fa4:	0801b5b4 	.word	0x0801b5b4

08013fa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013fa8:	b084      	sub	sp, #16
 8013faa:	b580      	push	{r7, lr}
 8013fac:	b084      	sub	sp, #16
 8013fae:	af00      	add	r7, sp, #0
 8013fb0:	6078      	str	r0, [r7, #4]
 8013fb2:	f107 001c 	add.w	r0, r7, #28
 8013fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013fba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013fbe:	2b01      	cmp	r3, #1
 8013fc0:	d121      	bne.n	8014006 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fc6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	68da      	ldr	r2, [r3, #12]
 8013fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8014084 <USB_CoreInit+0xdc>)
 8013fd4:	4013      	ands	r3, r2
 8013fd6:	687a      	ldr	r2, [r7, #4]
 8013fd8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	68db      	ldr	r3, [r3, #12]
 8013fde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013fe6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013fea:	2b01      	cmp	r3, #1
 8013fec:	d105      	bne.n	8013ffa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	68db      	ldr	r3, [r3, #12]
 8013ff2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013ffa:	6878      	ldr	r0, [r7, #4]
 8013ffc:	f001 fafa 	bl	80155f4 <USB_CoreReset>
 8014000:	4603      	mov	r3, r0
 8014002:	73fb      	strb	r3, [r7, #15]
 8014004:	e01b      	b.n	801403e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	68db      	ldr	r3, [r3, #12]
 801400a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014012:	6878      	ldr	r0, [r7, #4]
 8014014:	f001 faee 	bl	80155f4 <USB_CoreReset>
 8014018:	4603      	mov	r3, r0
 801401a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801401c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8014020:	2b00      	cmp	r3, #0
 8014022:	d106      	bne.n	8014032 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014028:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	639a      	str	r2, [r3, #56]	@ 0x38
 8014030:	e005      	b.n	801403e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014036:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801403e:	7fbb      	ldrb	r3, [r7, #30]
 8014040:	2b01      	cmp	r3, #1
 8014042:	d116      	bne.n	8014072 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014048:	b29a      	uxth	r2, r3
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014052:	4b0d      	ldr	r3, [pc, #52]	@ (8014088 <USB_CoreInit+0xe0>)
 8014054:	4313      	orrs	r3, r2
 8014056:	687a      	ldr	r2, [r7, #4]
 8014058:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	689b      	ldr	r3, [r3, #8]
 801405e:	f043 0206 	orr.w	r2, r3, #6
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	689b      	ldr	r3, [r3, #8]
 801406a:	f043 0220 	orr.w	r2, r3, #32
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014072:	7bfb      	ldrb	r3, [r7, #15]
}
 8014074:	4618      	mov	r0, r3
 8014076:	3710      	adds	r7, #16
 8014078:	46bd      	mov	sp, r7
 801407a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801407e:	b004      	add	sp, #16
 8014080:	4770      	bx	lr
 8014082:	bf00      	nop
 8014084:	ffbdffbf 	.word	0xffbdffbf
 8014088:	03ee0000 	.word	0x03ee0000

0801408c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801408c:	b480      	push	{r7}
 801408e:	b087      	sub	sp, #28
 8014090:	af00      	add	r7, sp, #0
 8014092:	60f8      	str	r0, [r7, #12]
 8014094:	60b9      	str	r1, [r7, #8]
 8014096:	4613      	mov	r3, r2
 8014098:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801409a:	79fb      	ldrb	r3, [r7, #7]
 801409c:	2b02      	cmp	r3, #2
 801409e:	d165      	bne.n	801416c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80140a0:	68bb      	ldr	r3, [r7, #8]
 80140a2:	4a41      	ldr	r2, [pc, #260]	@ (80141a8 <USB_SetTurnaroundTime+0x11c>)
 80140a4:	4293      	cmp	r3, r2
 80140a6:	d906      	bls.n	80140b6 <USB_SetTurnaroundTime+0x2a>
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	4a40      	ldr	r2, [pc, #256]	@ (80141ac <USB_SetTurnaroundTime+0x120>)
 80140ac:	4293      	cmp	r3, r2
 80140ae:	d202      	bcs.n	80140b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80140b0:	230f      	movs	r3, #15
 80140b2:	617b      	str	r3, [r7, #20]
 80140b4:	e062      	b.n	801417c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	4a3c      	ldr	r2, [pc, #240]	@ (80141ac <USB_SetTurnaroundTime+0x120>)
 80140ba:	4293      	cmp	r3, r2
 80140bc:	d306      	bcc.n	80140cc <USB_SetTurnaroundTime+0x40>
 80140be:	68bb      	ldr	r3, [r7, #8]
 80140c0:	4a3b      	ldr	r2, [pc, #236]	@ (80141b0 <USB_SetTurnaroundTime+0x124>)
 80140c2:	4293      	cmp	r3, r2
 80140c4:	d202      	bcs.n	80140cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80140c6:	230e      	movs	r3, #14
 80140c8:	617b      	str	r3, [r7, #20]
 80140ca:	e057      	b.n	801417c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	4a38      	ldr	r2, [pc, #224]	@ (80141b0 <USB_SetTurnaroundTime+0x124>)
 80140d0:	4293      	cmp	r3, r2
 80140d2:	d306      	bcc.n	80140e2 <USB_SetTurnaroundTime+0x56>
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	4a37      	ldr	r2, [pc, #220]	@ (80141b4 <USB_SetTurnaroundTime+0x128>)
 80140d8:	4293      	cmp	r3, r2
 80140da:	d202      	bcs.n	80140e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80140dc:	230d      	movs	r3, #13
 80140de:	617b      	str	r3, [r7, #20]
 80140e0:	e04c      	b.n	801417c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80140e2:	68bb      	ldr	r3, [r7, #8]
 80140e4:	4a33      	ldr	r2, [pc, #204]	@ (80141b4 <USB_SetTurnaroundTime+0x128>)
 80140e6:	4293      	cmp	r3, r2
 80140e8:	d306      	bcc.n	80140f8 <USB_SetTurnaroundTime+0x6c>
 80140ea:	68bb      	ldr	r3, [r7, #8]
 80140ec:	4a32      	ldr	r2, [pc, #200]	@ (80141b8 <USB_SetTurnaroundTime+0x12c>)
 80140ee:	4293      	cmp	r3, r2
 80140f0:	d802      	bhi.n	80140f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80140f2:	230c      	movs	r3, #12
 80140f4:	617b      	str	r3, [r7, #20]
 80140f6:	e041      	b.n	801417c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	4a2f      	ldr	r2, [pc, #188]	@ (80141b8 <USB_SetTurnaroundTime+0x12c>)
 80140fc:	4293      	cmp	r3, r2
 80140fe:	d906      	bls.n	801410e <USB_SetTurnaroundTime+0x82>
 8014100:	68bb      	ldr	r3, [r7, #8]
 8014102:	4a2e      	ldr	r2, [pc, #184]	@ (80141bc <USB_SetTurnaroundTime+0x130>)
 8014104:	4293      	cmp	r3, r2
 8014106:	d802      	bhi.n	801410e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014108:	230b      	movs	r3, #11
 801410a:	617b      	str	r3, [r7, #20]
 801410c:	e036      	b.n	801417c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	4a2a      	ldr	r2, [pc, #168]	@ (80141bc <USB_SetTurnaroundTime+0x130>)
 8014112:	4293      	cmp	r3, r2
 8014114:	d906      	bls.n	8014124 <USB_SetTurnaroundTime+0x98>
 8014116:	68bb      	ldr	r3, [r7, #8]
 8014118:	4a29      	ldr	r2, [pc, #164]	@ (80141c0 <USB_SetTurnaroundTime+0x134>)
 801411a:	4293      	cmp	r3, r2
 801411c:	d802      	bhi.n	8014124 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801411e:	230a      	movs	r3, #10
 8014120:	617b      	str	r3, [r7, #20]
 8014122:	e02b      	b.n	801417c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	4a26      	ldr	r2, [pc, #152]	@ (80141c0 <USB_SetTurnaroundTime+0x134>)
 8014128:	4293      	cmp	r3, r2
 801412a:	d906      	bls.n	801413a <USB_SetTurnaroundTime+0xae>
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	4a25      	ldr	r2, [pc, #148]	@ (80141c4 <USB_SetTurnaroundTime+0x138>)
 8014130:	4293      	cmp	r3, r2
 8014132:	d202      	bcs.n	801413a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014134:	2309      	movs	r3, #9
 8014136:	617b      	str	r3, [r7, #20]
 8014138:	e020      	b.n	801417c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	4a21      	ldr	r2, [pc, #132]	@ (80141c4 <USB_SetTurnaroundTime+0x138>)
 801413e:	4293      	cmp	r3, r2
 8014140:	d306      	bcc.n	8014150 <USB_SetTurnaroundTime+0xc4>
 8014142:	68bb      	ldr	r3, [r7, #8]
 8014144:	4a20      	ldr	r2, [pc, #128]	@ (80141c8 <USB_SetTurnaroundTime+0x13c>)
 8014146:	4293      	cmp	r3, r2
 8014148:	d802      	bhi.n	8014150 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801414a:	2308      	movs	r3, #8
 801414c:	617b      	str	r3, [r7, #20]
 801414e:	e015      	b.n	801417c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	4a1d      	ldr	r2, [pc, #116]	@ (80141c8 <USB_SetTurnaroundTime+0x13c>)
 8014154:	4293      	cmp	r3, r2
 8014156:	d906      	bls.n	8014166 <USB_SetTurnaroundTime+0xda>
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	4a1c      	ldr	r2, [pc, #112]	@ (80141cc <USB_SetTurnaroundTime+0x140>)
 801415c:	4293      	cmp	r3, r2
 801415e:	d202      	bcs.n	8014166 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014160:	2307      	movs	r3, #7
 8014162:	617b      	str	r3, [r7, #20]
 8014164:	e00a      	b.n	801417c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014166:	2306      	movs	r3, #6
 8014168:	617b      	str	r3, [r7, #20]
 801416a:	e007      	b.n	801417c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801416c:	79fb      	ldrb	r3, [r7, #7]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d102      	bne.n	8014178 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014172:	2309      	movs	r3, #9
 8014174:	617b      	str	r3, [r7, #20]
 8014176:	e001      	b.n	801417c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014178:	2309      	movs	r3, #9
 801417a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	68db      	ldr	r3, [r3, #12]
 8014180:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	68da      	ldr	r2, [r3, #12]
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	029b      	lsls	r3, r3, #10
 8014190:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8014194:	431a      	orrs	r2, r3
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801419a:	2300      	movs	r3, #0
}
 801419c:	4618      	mov	r0, r3
 801419e:	371c      	adds	r7, #28
 80141a0:	46bd      	mov	sp, r7
 80141a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a6:	4770      	bx	lr
 80141a8:	00d8acbf 	.word	0x00d8acbf
 80141ac:	00e4e1c0 	.word	0x00e4e1c0
 80141b0:	00f42400 	.word	0x00f42400
 80141b4:	01067380 	.word	0x01067380
 80141b8:	011a499f 	.word	0x011a499f
 80141bc:	01312cff 	.word	0x01312cff
 80141c0:	014ca43f 	.word	0x014ca43f
 80141c4:	016e3600 	.word	0x016e3600
 80141c8:	01a6ab1f 	.word	0x01a6ab1f
 80141cc:	01e84800 	.word	0x01e84800

080141d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80141d0:	b480      	push	{r7}
 80141d2:	b083      	sub	sp, #12
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	689b      	ldr	r3, [r3, #8]
 80141dc:	f043 0201 	orr.w	r2, r3, #1
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80141e4:	2300      	movs	r3, #0
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	370c      	adds	r7, #12
 80141ea:	46bd      	mov	sp, r7
 80141ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f0:	4770      	bx	lr

080141f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80141f2:	b480      	push	{r7}
 80141f4:	b083      	sub	sp, #12
 80141f6:	af00      	add	r7, sp, #0
 80141f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	689b      	ldr	r3, [r3, #8]
 80141fe:	f023 0201 	bic.w	r2, r3, #1
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014206:	2300      	movs	r3, #0
}
 8014208:	4618      	mov	r0, r3
 801420a:	370c      	adds	r7, #12
 801420c:	46bd      	mov	sp, r7
 801420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014212:	4770      	bx	lr

08014214 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b084      	sub	sp, #16
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
 801421c:	460b      	mov	r3, r1
 801421e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014220:	2300      	movs	r3, #0
 8014222:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	68db      	ldr	r3, [r3, #12]
 8014228:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014230:	78fb      	ldrb	r3, [r7, #3]
 8014232:	2b01      	cmp	r3, #1
 8014234:	d115      	bne.n	8014262 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	68db      	ldr	r3, [r3, #12]
 801423a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014242:	200a      	movs	r0, #10
 8014244:	f7ef f8f2 	bl	800342c <HAL_Delay>
      ms += 10U;
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	330a      	adds	r3, #10
 801424c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801424e:	6878      	ldr	r0, [r7, #4]
 8014250:	f001 f93f 	bl	80154d2 <USB_GetMode>
 8014254:	4603      	mov	r3, r0
 8014256:	2b01      	cmp	r3, #1
 8014258:	d01e      	beq.n	8014298 <USB_SetCurrentMode+0x84>
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	2bc7      	cmp	r3, #199	@ 0xc7
 801425e:	d9f0      	bls.n	8014242 <USB_SetCurrentMode+0x2e>
 8014260:	e01a      	b.n	8014298 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014262:	78fb      	ldrb	r3, [r7, #3]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d115      	bne.n	8014294 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	68db      	ldr	r3, [r3, #12]
 801426c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014274:	200a      	movs	r0, #10
 8014276:	f7ef f8d9 	bl	800342c <HAL_Delay>
      ms += 10U;
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	330a      	adds	r3, #10
 801427e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f001 f926 	bl	80154d2 <USB_GetMode>
 8014286:	4603      	mov	r3, r0
 8014288:	2b00      	cmp	r3, #0
 801428a:	d005      	beq.n	8014298 <USB_SetCurrentMode+0x84>
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	2bc7      	cmp	r3, #199	@ 0xc7
 8014290:	d9f0      	bls.n	8014274 <USB_SetCurrentMode+0x60>
 8014292:	e001      	b.n	8014298 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014294:	2301      	movs	r3, #1
 8014296:	e005      	b.n	80142a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	2bc8      	cmp	r3, #200	@ 0xc8
 801429c:	d101      	bne.n	80142a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801429e:	2301      	movs	r3, #1
 80142a0:	e000      	b.n	80142a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80142a2:	2300      	movs	r3, #0
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	3710      	adds	r7, #16
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}

080142ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80142ac:	b084      	sub	sp, #16
 80142ae:	b580      	push	{r7, lr}
 80142b0:	b086      	sub	sp, #24
 80142b2:	af00      	add	r7, sp, #0
 80142b4:	6078      	str	r0, [r7, #4]
 80142b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80142ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80142be:	2300      	movs	r3, #0
 80142c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80142c6:	2300      	movs	r3, #0
 80142c8:	613b      	str	r3, [r7, #16]
 80142ca:	e009      	b.n	80142e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80142cc:	687a      	ldr	r2, [r7, #4]
 80142ce:	693b      	ldr	r3, [r7, #16]
 80142d0:	3340      	adds	r3, #64	@ 0x40
 80142d2:	009b      	lsls	r3, r3, #2
 80142d4:	4413      	add	r3, r2
 80142d6:	2200      	movs	r2, #0
 80142d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80142da:	693b      	ldr	r3, [r7, #16]
 80142dc:	3301      	adds	r3, #1
 80142de:	613b      	str	r3, [r7, #16]
 80142e0:	693b      	ldr	r3, [r7, #16]
 80142e2:	2b0e      	cmp	r3, #14
 80142e4:	d9f2      	bls.n	80142cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80142e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d11c      	bne.n	8014328 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80142f4:	685b      	ldr	r3, [r3, #4]
 80142f6:	68fa      	ldr	r2, [r7, #12]
 80142f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80142fc:	f043 0302 	orr.w	r3, r3, #2
 8014300:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014306:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	601a      	str	r2, [r3, #0]
 8014326:	e005      	b.n	8014334 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801432c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801433a:	461a      	mov	r2, r3
 801433c:	2300      	movs	r3, #0
 801433e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014340:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8014344:	2b01      	cmp	r3, #1
 8014346:	d10d      	bne.n	8014364 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801434c:	2b00      	cmp	r3, #0
 801434e:	d104      	bne.n	801435a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014350:	2100      	movs	r1, #0
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f000 f968 	bl	8014628 <USB_SetDevSpeed>
 8014358:	e008      	b.n	801436c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801435a:	2101      	movs	r1, #1
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f000 f963 	bl	8014628 <USB_SetDevSpeed>
 8014362:	e003      	b.n	801436c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014364:	2103      	movs	r1, #3
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	f000 f95e 	bl	8014628 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801436c:	2110      	movs	r1, #16
 801436e:	6878      	ldr	r0, [r7, #4]
 8014370:	f000 f8fa 	bl	8014568 <USB_FlushTxFifo>
 8014374:	4603      	mov	r3, r0
 8014376:	2b00      	cmp	r3, #0
 8014378:	d001      	beq.n	801437e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801437a:	2301      	movs	r3, #1
 801437c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801437e:	6878      	ldr	r0, [r7, #4]
 8014380:	f000 f924 	bl	80145cc <USB_FlushRxFifo>
 8014384:	4603      	mov	r3, r0
 8014386:	2b00      	cmp	r3, #0
 8014388:	d001      	beq.n	801438e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801438a:	2301      	movs	r3, #1
 801438c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014394:	461a      	mov	r2, r3
 8014396:	2300      	movs	r3, #0
 8014398:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80143a0:	461a      	mov	r2, r3
 80143a2:	2300      	movs	r3, #0
 80143a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80143ac:	461a      	mov	r2, r3
 80143ae:	2300      	movs	r3, #0
 80143b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80143b2:	2300      	movs	r3, #0
 80143b4:	613b      	str	r3, [r7, #16]
 80143b6:	e043      	b.n	8014440 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80143b8:	693b      	ldr	r3, [r7, #16]
 80143ba:	015a      	lsls	r2, r3, #5
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	4413      	add	r3, r2
 80143c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80143ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80143ce:	d118      	bne.n	8014402 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80143d0:	693b      	ldr	r3, [r7, #16]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d10a      	bne.n	80143ec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80143d6:	693b      	ldr	r3, [r7, #16]
 80143d8:	015a      	lsls	r2, r3, #5
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	4413      	add	r3, r2
 80143de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80143e2:	461a      	mov	r2, r3
 80143e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80143e8:	6013      	str	r3, [r2, #0]
 80143ea:	e013      	b.n	8014414 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80143ec:	693b      	ldr	r3, [r7, #16]
 80143ee:	015a      	lsls	r2, r3, #5
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	4413      	add	r3, r2
 80143f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80143f8:	461a      	mov	r2, r3
 80143fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80143fe:	6013      	str	r3, [r2, #0]
 8014400:	e008      	b.n	8014414 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014402:	693b      	ldr	r3, [r7, #16]
 8014404:	015a      	lsls	r2, r3, #5
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	4413      	add	r3, r2
 801440a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801440e:	461a      	mov	r2, r3
 8014410:	2300      	movs	r3, #0
 8014412:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014414:	693b      	ldr	r3, [r7, #16]
 8014416:	015a      	lsls	r2, r3, #5
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	4413      	add	r3, r2
 801441c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014420:	461a      	mov	r2, r3
 8014422:	2300      	movs	r3, #0
 8014424:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	015a      	lsls	r2, r3, #5
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	4413      	add	r3, r2
 801442e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014432:	461a      	mov	r2, r3
 8014434:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014438:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	3301      	adds	r3, #1
 801443e:	613b      	str	r3, [r7, #16]
 8014440:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014444:	461a      	mov	r2, r3
 8014446:	693b      	ldr	r3, [r7, #16]
 8014448:	4293      	cmp	r3, r2
 801444a:	d3b5      	bcc.n	80143b8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801444c:	2300      	movs	r3, #0
 801444e:	613b      	str	r3, [r7, #16]
 8014450:	e043      	b.n	80144da <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	015a      	lsls	r2, r3, #5
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	4413      	add	r3, r2
 801445a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014464:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014468:	d118      	bne.n	801449c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801446a:	693b      	ldr	r3, [r7, #16]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d10a      	bne.n	8014486 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014470:	693b      	ldr	r3, [r7, #16]
 8014472:	015a      	lsls	r2, r3, #5
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	4413      	add	r3, r2
 8014478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801447c:	461a      	mov	r2, r3
 801447e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014482:	6013      	str	r3, [r2, #0]
 8014484:	e013      	b.n	80144ae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014486:	693b      	ldr	r3, [r7, #16]
 8014488:	015a      	lsls	r2, r3, #5
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	4413      	add	r3, r2
 801448e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014492:	461a      	mov	r2, r3
 8014494:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014498:	6013      	str	r3, [r2, #0]
 801449a:	e008      	b.n	80144ae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801449c:	693b      	ldr	r3, [r7, #16]
 801449e:	015a      	lsls	r2, r3, #5
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	4413      	add	r3, r2
 80144a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80144a8:	461a      	mov	r2, r3
 80144aa:	2300      	movs	r3, #0
 80144ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	015a      	lsls	r2, r3, #5
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	4413      	add	r3, r2
 80144b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80144ba:	461a      	mov	r2, r3
 80144bc:	2300      	movs	r3, #0
 80144be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80144c0:	693b      	ldr	r3, [r7, #16]
 80144c2:	015a      	lsls	r2, r3, #5
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	4413      	add	r3, r2
 80144c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80144cc:	461a      	mov	r2, r3
 80144ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80144d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	3301      	adds	r3, #1
 80144d8:	613b      	str	r3, [r7, #16]
 80144da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80144de:	461a      	mov	r2, r3
 80144e0:	693b      	ldr	r3, [r7, #16]
 80144e2:	4293      	cmp	r3, r2
 80144e4:	d3b5      	bcc.n	8014452 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80144ec:	691b      	ldr	r3, [r3, #16]
 80144ee:	68fa      	ldr	r2, [r7, #12]
 80144f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80144f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80144f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	2200      	movs	r2, #0
 80144fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8014506:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014508:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801450c:	2b00      	cmp	r3, #0
 801450e:	d105      	bne.n	801451c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	699b      	ldr	r3, [r3, #24]
 8014514:	f043 0210 	orr.w	r2, r3, #16
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	699a      	ldr	r2, [r3, #24]
 8014520:	4b0f      	ldr	r3, [pc, #60]	@ (8014560 <USB_DevInit+0x2b4>)
 8014522:	4313      	orrs	r3, r2
 8014524:	687a      	ldr	r2, [r7, #4]
 8014526:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8014528:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801452c:	2b00      	cmp	r3, #0
 801452e:	d005      	beq.n	801453c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	699b      	ldr	r3, [r3, #24]
 8014534:	f043 0208 	orr.w	r2, r3, #8
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801453c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014540:	2b01      	cmp	r3, #1
 8014542:	d105      	bne.n	8014550 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	699a      	ldr	r2, [r3, #24]
 8014548:	4b06      	ldr	r3, [pc, #24]	@ (8014564 <USB_DevInit+0x2b8>)
 801454a:	4313      	orrs	r3, r2
 801454c:	687a      	ldr	r2, [r7, #4]
 801454e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014550:	7dfb      	ldrb	r3, [r7, #23]
}
 8014552:	4618      	mov	r0, r3
 8014554:	3718      	adds	r7, #24
 8014556:	46bd      	mov	sp, r7
 8014558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801455c:	b004      	add	sp, #16
 801455e:	4770      	bx	lr
 8014560:	803c3800 	.word	0x803c3800
 8014564:	40000004 	.word	0x40000004

08014568 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014568:	b480      	push	{r7}
 801456a:	b085      	sub	sp, #20
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
 8014570:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014572:	2300      	movs	r3, #0
 8014574:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	3301      	adds	r3, #1
 801457a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014582:	d901      	bls.n	8014588 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014584:	2303      	movs	r3, #3
 8014586:	e01b      	b.n	80145c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	691b      	ldr	r3, [r3, #16]
 801458c:	2b00      	cmp	r3, #0
 801458e:	daf2      	bge.n	8014576 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014590:	2300      	movs	r3, #0
 8014592:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014594:	683b      	ldr	r3, [r7, #0]
 8014596:	019b      	lsls	r3, r3, #6
 8014598:	f043 0220 	orr.w	r2, r3, #32
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	3301      	adds	r3, #1
 80145a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80145ac:	d901      	bls.n	80145b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80145ae:	2303      	movs	r3, #3
 80145b0:	e006      	b.n	80145c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	691b      	ldr	r3, [r3, #16]
 80145b6:	f003 0320 	and.w	r3, r3, #32
 80145ba:	2b20      	cmp	r3, #32
 80145bc:	d0f0      	beq.n	80145a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80145be:	2300      	movs	r3, #0
}
 80145c0:	4618      	mov	r0, r3
 80145c2:	3714      	adds	r7, #20
 80145c4:	46bd      	mov	sp, r7
 80145c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ca:	4770      	bx	lr

080145cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80145cc:	b480      	push	{r7}
 80145ce:	b085      	sub	sp, #20
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80145d4:	2300      	movs	r3, #0
 80145d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	3301      	adds	r3, #1
 80145dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80145e4:	d901      	bls.n	80145ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80145e6:	2303      	movs	r3, #3
 80145e8:	e018      	b.n	801461c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	691b      	ldr	r3, [r3, #16]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	daf2      	bge.n	80145d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80145f2:	2300      	movs	r3, #0
 80145f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2210      	movs	r2, #16
 80145fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	3301      	adds	r3, #1
 8014600:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014608:	d901      	bls.n	801460e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801460a:	2303      	movs	r3, #3
 801460c:	e006      	b.n	801461c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	691b      	ldr	r3, [r3, #16]
 8014612:	f003 0310 	and.w	r3, r3, #16
 8014616:	2b10      	cmp	r3, #16
 8014618:	d0f0      	beq.n	80145fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801461a:	2300      	movs	r3, #0
}
 801461c:	4618      	mov	r0, r3
 801461e:	3714      	adds	r7, #20
 8014620:	46bd      	mov	sp, r7
 8014622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014626:	4770      	bx	lr

08014628 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014628:	b480      	push	{r7}
 801462a:	b085      	sub	sp, #20
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
 8014630:	460b      	mov	r3, r1
 8014632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801463e:	681a      	ldr	r2, [r3, #0]
 8014640:	78fb      	ldrb	r3, [r7, #3]
 8014642:	68f9      	ldr	r1, [r7, #12]
 8014644:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014648:	4313      	orrs	r3, r2
 801464a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801464c:	2300      	movs	r3, #0
}
 801464e:	4618      	mov	r0, r3
 8014650:	3714      	adds	r7, #20
 8014652:	46bd      	mov	sp, r7
 8014654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014658:	4770      	bx	lr

0801465a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801465a:	b480      	push	{r7}
 801465c:	b087      	sub	sp, #28
 801465e:	af00      	add	r7, sp, #0
 8014660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014666:	693b      	ldr	r3, [r7, #16]
 8014668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801466c:	689b      	ldr	r3, [r3, #8]
 801466e:	f003 0306 	and.w	r3, r3, #6
 8014672:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d102      	bne.n	8014680 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801467a:	2300      	movs	r3, #0
 801467c:	75fb      	strb	r3, [r7, #23]
 801467e:	e00a      	b.n	8014696 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	2b02      	cmp	r3, #2
 8014684:	d002      	beq.n	801468c <USB_GetDevSpeed+0x32>
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	2b06      	cmp	r3, #6
 801468a:	d102      	bne.n	8014692 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801468c:	2302      	movs	r3, #2
 801468e:	75fb      	strb	r3, [r7, #23]
 8014690:	e001      	b.n	8014696 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014692:	230f      	movs	r3, #15
 8014694:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014696:	7dfb      	ldrb	r3, [r7, #23]
}
 8014698:	4618      	mov	r0, r3
 801469a:	371c      	adds	r7, #28
 801469c:	46bd      	mov	sp, r7
 801469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a2:	4770      	bx	lr

080146a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80146a4:	b480      	push	{r7}
 80146a6:	b085      	sub	sp, #20
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	781b      	ldrb	r3, [r3, #0]
 80146b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80146b8:	683b      	ldr	r3, [r7, #0]
 80146ba:	785b      	ldrb	r3, [r3, #1]
 80146bc:	2b01      	cmp	r3, #1
 80146be:	d139      	bne.n	8014734 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80146c6:	69da      	ldr	r2, [r3, #28]
 80146c8:	683b      	ldr	r3, [r7, #0]
 80146ca:	781b      	ldrb	r3, [r3, #0]
 80146cc:	f003 030f 	and.w	r3, r3, #15
 80146d0:	2101      	movs	r1, #1
 80146d2:	fa01 f303 	lsl.w	r3, r1, r3
 80146d6:	b29b      	uxth	r3, r3
 80146d8:	68f9      	ldr	r1, [r7, #12]
 80146da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80146de:	4313      	orrs	r3, r2
 80146e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80146e2:	68bb      	ldr	r3, [r7, #8]
 80146e4:	015a      	lsls	r2, r3, #5
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	4413      	add	r3, r2
 80146ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d153      	bne.n	80147a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	015a      	lsls	r2, r3, #5
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	4413      	add	r3, r2
 8014700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	683b      	ldr	r3, [r7, #0]
 8014708:	689b      	ldr	r3, [r3, #8]
 801470a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801470e:	683b      	ldr	r3, [r7, #0]
 8014710:	791b      	ldrb	r3, [r3, #4]
 8014712:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014714:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014716:	68bb      	ldr	r3, [r7, #8]
 8014718:	059b      	lsls	r3, r3, #22
 801471a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801471c:	431a      	orrs	r2, r3
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	0159      	lsls	r1, r3, #5
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	440b      	add	r3, r1
 8014726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801472a:	4619      	mov	r1, r3
 801472c:	4b20      	ldr	r3, [pc, #128]	@ (80147b0 <USB_ActivateEndpoint+0x10c>)
 801472e:	4313      	orrs	r3, r2
 8014730:	600b      	str	r3, [r1, #0]
 8014732:	e035      	b.n	80147a0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801473a:	69da      	ldr	r2, [r3, #28]
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	f003 030f 	and.w	r3, r3, #15
 8014744:	2101      	movs	r1, #1
 8014746:	fa01 f303 	lsl.w	r3, r1, r3
 801474a:	041b      	lsls	r3, r3, #16
 801474c:	68f9      	ldr	r1, [r7, #12]
 801474e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014752:	4313      	orrs	r3, r2
 8014754:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	015a      	lsls	r2, r3, #5
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	4413      	add	r3, r2
 801475e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014768:	2b00      	cmp	r3, #0
 801476a:	d119      	bne.n	80147a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801476c:	68bb      	ldr	r3, [r7, #8]
 801476e:	015a      	lsls	r2, r3, #5
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	4413      	add	r3, r2
 8014774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014778:	681a      	ldr	r2, [r3, #0]
 801477a:	683b      	ldr	r3, [r7, #0]
 801477c:	689b      	ldr	r3, [r3, #8]
 801477e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014782:	683b      	ldr	r3, [r7, #0]
 8014784:	791b      	ldrb	r3, [r3, #4]
 8014786:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014788:	430b      	orrs	r3, r1
 801478a:	431a      	orrs	r2, r3
 801478c:	68bb      	ldr	r3, [r7, #8]
 801478e:	0159      	lsls	r1, r3, #5
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	440b      	add	r3, r1
 8014794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014798:	4619      	mov	r1, r3
 801479a:	4b05      	ldr	r3, [pc, #20]	@ (80147b0 <USB_ActivateEndpoint+0x10c>)
 801479c:	4313      	orrs	r3, r2
 801479e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80147a0:	2300      	movs	r3, #0
}
 80147a2:	4618      	mov	r0, r3
 80147a4:	3714      	adds	r7, #20
 80147a6:	46bd      	mov	sp, r7
 80147a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ac:	4770      	bx	lr
 80147ae:	bf00      	nop
 80147b0:	10008000 	.word	0x10008000

080147b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80147b4:	b480      	push	{r7}
 80147b6:	b085      	sub	sp, #20
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
 80147bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	781b      	ldrb	r3, [r3, #0]
 80147c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	785b      	ldrb	r3, [r3, #1]
 80147cc:	2b01      	cmp	r3, #1
 80147ce:	d161      	bne.n	8014894 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	015a      	lsls	r2, r3, #5
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	4413      	add	r3, r2
 80147d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80147e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80147e6:	d11f      	bne.n	8014828 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	015a      	lsls	r2, r3, #5
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	4413      	add	r3, r2
 80147f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	68ba      	ldr	r2, [r7, #8]
 80147f8:	0151      	lsls	r1, r2, #5
 80147fa:	68fa      	ldr	r2, [r7, #12]
 80147fc:	440a      	add	r2, r1
 80147fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014802:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014806:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	015a      	lsls	r2, r3, #5
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	4413      	add	r3, r2
 8014810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	68ba      	ldr	r2, [r7, #8]
 8014818:	0151      	lsls	r1, r2, #5
 801481a:	68fa      	ldr	r2, [r7, #12]
 801481c:	440a      	add	r2, r1
 801481e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014822:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014826:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801482e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014830:	683b      	ldr	r3, [r7, #0]
 8014832:	781b      	ldrb	r3, [r3, #0]
 8014834:	f003 030f 	and.w	r3, r3, #15
 8014838:	2101      	movs	r1, #1
 801483a:	fa01 f303 	lsl.w	r3, r1, r3
 801483e:	b29b      	uxth	r3, r3
 8014840:	43db      	mvns	r3, r3
 8014842:	68f9      	ldr	r1, [r7, #12]
 8014844:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014848:	4013      	ands	r3, r2
 801484a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014852:	69da      	ldr	r2, [r3, #28]
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	781b      	ldrb	r3, [r3, #0]
 8014858:	f003 030f 	and.w	r3, r3, #15
 801485c:	2101      	movs	r1, #1
 801485e:	fa01 f303 	lsl.w	r3, r1, r3
 8014862:	b29b      	uxth	r3, r3
 8014864:	43db      	mvns	r3, r3
 8014866:	68f9      	ldr	r1, [r7, #12]
 8014868:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801486c:	4013      	ands	r3, r2
 801486e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014870:	68bb      	ldr	r3, [r7, #8]
 8014872:	015a      	lsls	r2, r3, #5
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	4413      	add	r3, r2
 8014878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801487c:	681a      	ldr	r2, [r3, #0]
 801487e:	68bb      	ldr	r3, [r7, #8]
 8014880:	0159      	lsls	r1, r3, #5
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	440b      	add	r3, r1
 8014886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801488a:	4619      	mov	r1, r3
 801488c:	4b35      	ldr	r3, [pc, #212]	@ (8014964 <USB_DeactivateEndpoint+0x1b0>)
 801488e:	4013      	ands	r3, r2
 8014890:	600b      	str	r3, [r1, #0]
 8014892:	e060      	b.n	8014956 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014894:	68bb      	ldr	r3, [r7, #8]
 8014896:	015a      	lsls	r2, r3, #5
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	4413      	add	r3, r2
 801489c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80148a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80148aa:	d11f      	bne.n	80148ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80148ac:	68bb      	ldr	r3, [r7, #8]
 80148ae:	015a      	lsls	r2, r3, #5
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	4413      	add	r3, r2
 80148b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	68ba      	ldr	r2, [r7, #8]
 80148bc:	0151      	lsls	r1, r2, #5
 80148be:	68fa      	ldr	r2, [r7, #12]
 80148c0:	440a      	add	r2, r1
 80148c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80148c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80148ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	015a      	lsls	r2, r3, #5
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	4413      	add	r3, r2
 80148d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	68ba      	ldr	r2, [r7, #8]
 80148dc:	0151      	lsls	r1, r2, #5
 80148de:	68fa      	ldr	r2, [r7, #12]
 80148e0:	440a      	add	r2, r1
 80148e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80148e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80148ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80148f4:	683b      	ldr	r3, [r7, #0]
 80148f6:	781b      	ldrb	r3, [r3, #0]
 80148f8:	f003 030f 	and.w	r3, r3, #15
 80148fc:	2101      	movs	r1, #1
 80148fe:	fa01 f303 	lsl.w	r3, r1, r3
 8014902:	041b      	lsls	r3, r3, #16
 8014904:	43db      	mvns	r3, r3
 8014906:	68f9      	ldr	r1, [r7, #12]
 8014908:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801490c:	4013      	ands	r3, r2
 801490e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014916:	69da      	ldr	r2, [r3, #28]
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	f003 030f 	and.w	r3, r3, #15
 8014920:	2101      	movs	r1, #1
 8014922:	fa01 f303 	lsl.w	r3, r1, r3
 8014926:	041b      	lsls	r3, r3, #16
 8014928:	43db      	mvns	r3, r3
 801492a:	68f9      	ldr	r1, [r7, #12]
 801492c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014930:	4013      	ands	r3, r2
 8014932:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014934:	68bb      	ldr	r3, [r7, #8]
 8014936:	015a      	lsls	r2, r3, #5
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	4413      	add	r3, r2
 801493c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014940:	681a      	ldr	r2, [r3, #0]
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	0159      	lsls	r1, r3, #5
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	440b      	add	r3, r1
 801494a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801494e:	4619      	mov	r1, r3
 8014950:	4b05      	ldr	r3, [pc, #20]	@ (8014968 <USB_DeactivateEndpoint+0x1b4>)
 8014952:	4013      	ands	r3, r2
 8014954:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8014956:	2300      	movs	r3, #0
}
 8014958:	4618      	mov	r0, r3
 801495a:	3714      	adds	r7, #20
 801495c:	46bd      	mov	sp, r7
 801495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014962:	4770      	bx	lr
 8014964:	ec337800 	.word	0xec337800
 8014968:	eff37800 	.word	0xeff37800

0801496c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b08a      	sub	sp, #40	@ 0x28
 8014970:	af02      	add	r7, sp, #8
 8014972:	60f8      	str	r0, [r7, #12]
 8014974:	60b9      	str	r1, [r7, #8]
 8014976:	4613      	mov	r3, r2
 8014978:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801497e:	68bb      	ldr	r3, [r7, #8]
 8014980:	781b      	ldrb	r3, [r3, #0]
 8014982:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014984:	68bb      	ldr	r3, [r7, #8]
 8014986:	785b      	ldrb	r3, [r3, #1]
 8014988:	2b01      	cmp	r3, #1
 801498a:	f040 8185 	bne.w	8014c98 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	691b      	ldr	r3, [r3, #16]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d132      	bne.n	80149fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014996:	69bb      	ldr	r3, [r7, #24]
 8014998:	015a      	lsls	r2, r3, #5
 801499a:	69fb      	ldr	r3, [r7, #28]
 801499c:	4413      	add	r3, r2
 801499e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149a2:	691a      	ldr	r2, [r3, #16]
 80149a4:	69bb      	ldr	r3, [r7, #24]
 80149a6:	0159      	lsls	r1, r3, #5
 80149a8:	69fb      	ldr	r3, [r7, #28]
 80149aa:	440b      	add	r3, r1
 80149ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149b0:	4619      	mov	r1, r3
 80149b2:	4ba7      	ldr	r3, [pc, #668]	@ (8014c50 <USB_EPStartXfer+0x2e4>)
 80149b4:	4013      	ands	r3, r2
 80149b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80149b8:	69bb      	ldr	r3, [r7, #24]
 80149ba:	015a      	lsls	r2, r3, #5
 80149bc:	69fb      	ldr	r3, [r7, #28]
 80149be:	4413      	add	r3, r2
 80149c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149c4:	691b      	ldr	r3, [r3, #16]
 80149c6:	69ba      	ldr	r2, [r7, #24]
 80149c8:	0151      	lsls	r1, r2, #5
 80149ca:	69fa      	ldr	r2, [r7, #28]
 80149cc:	440a      	add	r2, r1
 80149ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80149d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80149d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80149d8:	69bb      	ldr	r3, [r7, #24]
 80149da:	015a      	lsls	r2, r3, #5
 80149dc:	69fb      	ldr	r3, [r7, #28]
 80149de:	4413      	add	r3, r2
 80149e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149e4:	691a      	ldr	r2, [r3, #16]
 80149e6:	69bb      	ldr	r3, [r7, #24]
 80149e8:	0159      	lsls	r1, r3, #5
 80149ea:	69fb      	ldr	r3, [r7, #28]
 80149ec:	440b      	add	r3, r1
 80149ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149f2:	4619      	mov	r1, r3
 80149f4:	4b97      	ldr	r3, [pc, #604]	@ (8014c54 <USB_EPStartXfer+0x2e8>)
 80149f6:	4013      	ands	r3, r2
 80149f8:	610b      	str	r3, [r1, #16]
 80149fa:	e097      	b.n	8014b2c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80149fc:	69bb      	ldr	r3, [r7, #24]
 80149fe:	015a      	lsls	r2, r3, #5
 8014a00:	69fb      	ldr	r3, [r7, #28]
 8014a02:	4413      	add	r3, r2
 8014a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a08:	691a      	ldr	r2, [r3, #16]
 8014a0a:	69bb      	ldr	r3, [r7, #24]
 8014a0c:	0159      	lsls	r1, r3, #5
 8014a0e:	69fb      	ldr	r3, [r7, #28]
 8014a10:	440b      	add	r3, r1
 8014a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a16:	4619      	mov	r1, r3
 8014a18:	4b8e      	ldr	r3, [pc, #568]	@ (8014c54 <USB_EPStartXfer+0x2e8>)
 8014a1a:	4013      	ands	r3, r2
 8014a1c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014a1e:	69bb      	ldr	r3, [r7, #24]
 8014a20:	015a      	lsls	r2, r3, #5
 8014a22:	69fb      	ldr	r3, [r7, #28]
 8014a24:	4413      	add	r3, r2
 8014a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a2a:	691a      	ldr	r2, [r3, #16]
 8014a2c:	69bb      	ldr	r3, [r7, #24]
 8014a2e:	0159      	lsls	r1, r3, #5
 8014a30:	69fb      	ldr	r3, [r7, #28]
 8014a32:	440b      	add	r3, r1
 8014a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a38:	4619      	mov	r1, r3
 8014a3a:	4b85      	ldr	r3, [pc, #532]	@ (8014c50 <USB_EPStartXfer+0x2e4>)
 8014a3c:	4013      	ands	r3, r2
 8014a3e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014a40:	69bb      	ldr	r3, [r7, #24]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d11a      	bne.n	8014a7c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014a46:	68bb      	ldr	r3, [r7, #8]
 8014a48:	691a      	ldr	r2, [r3, #16]
 8014a4a:	68bb      	ldr	r3, [r7, #8]
 8014a4c:	689b      	ldr	r3, [r3, #8]
 8014a4e:	429a      	cmp	r2, r3
 8014a50:	d903      	bls.n	8014a5a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014a52:	68bb      	ldr	r3, [r7, #8]
 8014a54:	689a      	ldr	r2, [r3, #8]
 8014a56:	68bb      	ldr	r3, [r7, #8]
 8014a58:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014a5a:	69bb      	ldr	r3, [r7, #24]
 8014a5c:	015a      	lsls	r2, r3, #5
 8014a5e:	69fb      	ldr	r3, [r7, #28]
 8014a60:	4413      	add	r3, r2
 8014a62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a66:	691b      	ldr	r3, [r3, #16]
 8014a68:	69ba      	ldr	r2, [r7, #24]
 8014a6a:	0151      	lsls	r1, r2, #5
 8014a6c:	69fa      	ldr	r2, [r7, #28]
 8014a6e:	440a      	add	r2, r1
 8014a70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014a78:	6113      	str	r3, [r2, #16]
 8014a7a:	e044      	b.n	8014b06 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014a7c:	68bb      	ldr	r3, [r7, #8]
 8014a7e:	691a      	ldr	r2, [r3, #16]
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	689b      	ldr	r3, [r3, #8]
 8014a84:	4413      	add	r3, r2
 8014a86:	1e5a      	subs	r2, r3, #1
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	689b      	ldr	r3, [r3, #8]
 8014a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a90:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8014a92:	69bb      	ldr	r3, [r7, #24]
 8014a94:	015a      	lsls	r2, r3, #5
 8014a96:	69fb      	ldr	r3, [r7, #28]
 8014a98:	4413      	add	r3, r2
 8014a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a9e:	691a      	ldr	r2, [r3, #16]
 8014aa0:	8afb      	ldrh	r3, [r7, #22]
 8014aa2:	04d9      	lsls	r1, r3, #19
 8014aa4:	4b6c      	ldr	r3, [pc, #432]	@ (8014c58 <USB_EPStartXfer+0x2ec>)
 8014aa6:	400b      	ands	r3, r1
 8014aa8:	69b9      	ldr	r1, [r7, #24]
 8014aaa:	0148      	lsls	r0, r1, #5
 8014aac:	69f9      	ldr	r1, [r7, #28]
 8014aae:	4401      	add	r1, r0
 8014ab0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014ab4:	4313      	orrs	r3, r2
 8014ab6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8014ab8:	68bb      	ldr	r3, [r7, #8]
 8014aba:	791b      	ldrb	r3, [r3, #4]
 8014abc:	2b01      	cmp	r3, #1
 8014abe:	d122      	bne.n	8014b06 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014ac0:	69bb      	ldr	r3, [r7, #24]
 8014ac2:	015a      	lsls	r2, r3, #5
 8014ac4:	69fb      	ldr	r3, [r7, #28]
 8014ac6:	4413      	add	r3, r2
 8014ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014acc:	691b      	ldr	r3, [r3, #16]
 8014ace:	69ba      	ldr	r2, [r7, #24]
 8014ad0:	0151      	lsls	r1, r2, #5
 8014ad2:	69fa      	ldr	r2, [r7, #28]
 8014ad4:	440a      	add	r2, r1
 8014ad6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ada:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8014ade:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8014ae0:	69bb      	ldr	r3, [r7, #24]
 8014ae2:	015a      	lsls	r2, r3, #5
 8014ae4:	69fb      	ldr	r3, [r7, #28]
 8014ae6:	4413      	add	r3, r2
 8014ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014aec:	691a      	ldr	r2, [r3, #16]
 8014aee:	8afb      	ldrh	r3, [r7, #22]
 8014af0:	075b      	lsls	r3, r3, #29
 8014af2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8014af6:	69b9      	ldr	r1, [r7, #24]
 8014af8:	0148      	lsls	r0, r1, #5
 8014afa:	69f9      	ldr	r1, [r7, #28]
 8014afc:	4401      	add	r1, r0
 8014afe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014b02:	4313      	orrs	r3, r2
 8014b04:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014b06:	69bb      	ldr	r3, [r7, #24]
 8014b08:	015a      	lsls	r2, r3, #5
 8014b0a:	69fb      	ldr	r3, [r7, #28]
 8014b0c:	4413      	add	r3, r2
 8014b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b12:	691a      	ldr	r2, [r3, #16]
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	691b      	ldr	r3, [r3, #16]
 8014b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014b1c:	69b9      	ldr	r1, [r7, #24]
 8014b1e:	0148      	lsls	r0, r1, #5
 8014b20:	69f9      	ldr	r1, [r7, #28]
 8014b22:	4401      	add	r1, r0
 8014b24:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014b28:	4313      	orrs	r3, r2
 8014b2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014b2c:	79fb      	ldrb	r3, [r7, #7]
 8014b2e:	2b01      	cmp	r3, #1
 8014b30:	d14b      	bne.n	8014bca <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	69db      	ldr	r3, [r3, #28]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d009      	beq.n	8014b4e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014b3a:	69bb      	ldr	r3, [r7, #24]
 8014b3c:	015a      	lsls	r2, r3, #5
 8014b3e:	69fb      	ldr	r3, [r7, #28]
 8014b40:	4413      	add	r3, r2
 8014b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b46:	461a      	mov	r2, r3
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	69db      	ldr	r3, [r3, #28]
 8014b4c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014b4e:	68bb      	ldr	r3, [r7, #8]
 8014b50:	791b      	ldrb	r3, [r3, #4]
 8014b52:	2b01      	cmp	r3, #1
 8014b54:	d128      	bne.n	8014ba8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014b56:	69fb      	ldr	r3, [r7, #28]
 8014b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014b5c:	689b      	ldr	r3, [r3, #8]
 8014b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d110      	bne.n	8014b88 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014b66:	69bb      	ldr	r3, [r7, #24]
 8014b68:	015a      	lsls	r2, r3, #5
 8014b6a:	69fb      	ldr	r3, [r7, #28]
 8014b6c:	4413      	add	r3, r2
 8014b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	69ba      	ldr	r2, [r7, #24]
 8014b76:	0151      	lsls	r1, r2, #5
 8014b78:	69fa      	ldr	r2, [r7, #28]
 8014b7a:	440a      	add	r2, r1
 8014b7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014b84:	6013      	str	r3, [r2, #0]
 8014b86:	e00f      	b.n	8014ba8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014b88:	69bb      	ldr	r3, [r7, #24]
 8014b8a:	015a      	lsls	r2, r3, #5
 8014b8c:	69fb      	ldr	r3, [r7, #28]
 8014b8e:	4413      	add	r3, r2
 8014b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	69ba      	ldr	r2, [r7, #24]
 8014b98:	0151      	lsls	r1, r2, #5
 8014b9a:	69fa      	ldr	r2, [r7, #28]
 8014b9c:	440a      	add	r2, r1
 8014b9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014ba6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014ba8:	69bb      	ldr	r3, [r7, #24]
 8014baa:	015a      	lsls	r2, r3, #5
 8014bac:	69fb      	ldr	r3, [r7, #28]
 8014bae:	4413      	add	r3, r2
 8014bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	69ba      	ldr	r2, [r7, #24]
 8014bb8:	0151      	lsls	r1, r2, #5
 8014bba:	69fa      	ldr	r2, [r7, #28]
 8014bbc:	440a      	add	r2, r1
 8014bbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014bc2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014bc6:	6013      	str	r3, [r2, #0]
 8014bc8:	e169      	b.n	8014e9e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014bca:	69bb      	ldr	r3, [r7, #24]
 8014bcc:	015a      	lsls	r2, r3, #5
 8014bce:	69fb      	ldr	r3, [r7, #28]
 8014bd0:	4413      	add	r3, r2
 8014bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	69ba      	ldr	r2, [r7, #24]
 8014bda:	0151      	lsls	r1, r2, #5
 8014bdc:	69fa      	ldr	r2, [r7, #28]
 8014bde:	440a      	add	r2, r1
 8014be0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014be4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014be8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014bea:	68bb      	ldr	r3, [r7, #8]
 8014bec:	791b      	ldrb	r3, [r3, #4]
 8014bee:	2b01      	cmp	r3, #1
 8014bf0:	d015      	beq.n	8014c1e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014bf2:	68bb      	ldr	r3, [r7, #8]
 8014bf4:	691b      	ldr	r3, [r3, #16]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	f000 8151 	beq.w	8014e9e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014bfc:	69fb      	ldr	r3, [r7, #28]
 8014bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014c04:	68bb      	ldr	r3, [r7, #8]
 8014c06:	781b      	ldrb	r3, [r3, #0]
 8014c08:	f003 030f 	and.w	r3, r3, #15
 8014c0c:	2101      	movs	r1, #1
 8014c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8014c12:	69f9      	ldr	r1, [r7, #28]
 8014c14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014c18:	4313      	orrs	r3, r2
 8014c1a:	634b      	str	r3, [r1, #52]	@ 0x34
 8014c1c:	e13f      	b.n	8014e9e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014c1e:	69fb      	ldr	r3, [r7, #28]
 8014c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c24:	689b      	ldr	r3, [r3, #8]
 8014c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d116      	bne.n	8014c5c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014c2e:	69bb      	ldr	r3, [r7, #24]
 8014c30:	015a      	lsls	r2, r3, #5
 8014c32:	69fb      	ldr	r3, [r7, #28]
 8014c34:	4413      	add	r3, r2
 8014c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	69ba      	ldr	r2, [r7, #24]
 8014c3e:	0151      	lsls	r1, r2, #5
 8014c40:	69fa      	ldr	r2, [r7, #28]
 8014c42:	440a      	add	r2, r1
 8014c44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014c4c:	6013      	str	r3, [r2, #0]
 8014c4e:	e015      	b.n	8014c7c <USB_EPStartXfer+0x310>
 8014c50:	e007ffff 	.word	0xe007ffff
 8014c54:	fff80000 	.word	0xfff80000
 8014c58:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014c5c:	69bb      	ldr	r3, [r7, #24]
 8014c5e:	015a      	lsls	r2, r3, #5
 8014c60:	69fb      	ldr	r3, [r7, #28]
 8014c62:	4413      	add	r3, r2
 8014c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	69ba      	ldr	r2, [r7, #24]
 8014c6c:	0151      	lsls	r1, r2, #5
 8014c6e:	69fa      	ldr	r2, [r7, #28]
 8014c70:	440a      	add	r2, r1
 8014c72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014c7a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014c7c:	68bb      	ldr	r3, [r7, #8]
 8014c7e:	68d9      	ldr	r1, [r3, #12]
 8014c80:	68bb      	ldr	r3, [r7, #8]
 8014c82:	781a      	ldrb	r2, [r3, #0]
 8014c84:	68bb      	ldr	r3, [r7, #8]
 8014c86:	691b      	ldr	r3, [r3, #16]
 8014c88:	b298      	uxth	r0, r3
 8014c8a:	79fb      	ldrb	r3, [r7, #7]
 8014c8c:	9300      	str	r3, [sp, #0]
 8014c8e:	4603      	mov	r3, r0
 8014c90:	68f8      	ldr	r0, [r7, #12]
 8014c92:	f000 f9b9 	bl	8015008 <USB_WritePacket>
 8014c96:	e102      	b.n	8014e9e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014c98:	69bb      	ldr	r3, [r7, #24]
 8014c9a:	015a      	lsls	r2, r3, #5
 8014c9c:	69fb      	ldr	r3, [r7, #28]
 8014c9e:	4413      	add	r3, r2
 8014ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ca4:	691a      	ldr	r2, [r3, #16]
 8014ca6:	69bb      	ldr	r3, [r7, #24]
 8014ca8:	0159      	lsls	r1, r3, #5
 8014caa:	69fb      	ldr	r3, [r7, #28]
 8014cac:	440b      	add	r3, r1
 8014cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014cb2:	4619      	mov	r1, r3
 8014cb4:	4b7c      	ldr	r3, [pc, #496]	@ (8014ea8 <USB_EPStartXfer+0x53c>)
 8014cb6:	4013      	ands	r3, r2
 8014cb8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014cba:	69bb      	ldr	r3, [r7, #24]
 8014cbc:	015a      	lsls	r2, r3, #5
 8014cbe:	69fb      	ldr	r3, [r7, #28]
 8014cc0:	4413      	add	r3, r2
 8014cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014cc6:	691a      	ldr	r2, [r3, #16]
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	0159      	lsls	r1, r3, #5
 8014ccc:	69fb      	ldr	r3, [r7, #28]
 8014cce:	440b      	add	r3, r1
 8014cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014cd4:	4619      	mov	r1, r3
 8014cd6:	4b75      	ldr	r3, [pc, #468]	@ (8014eac <USB_EPStartXfer+0x540>)
 8014cd8:	4013      	ands	r3, r2
 8014cda:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014cdc:	69bb      	ldr	r3, [r7, #24]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d12f      	bne.n	8014d42 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8014ce2:	68bb      	ldr	r3, [r7, #8]
 8014ce4:	691b      	ldr	r3, [r3, #16]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d003      	beq.n	8014cf2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	689a      	ldr	r2, [r3, #8]
 8014cee:	68bb      	ldr	r3, [r7, #8]
 8014cf0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014cf2:	68bb      	ldr	r3, [r7, #8]
 8014cf4:	689a      	ldr	r2, [r3, #8]
 8014cf6:	68bb      	ldr	r3, [r7, #8]
 8014cf8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014cfa:	69bb      	ldr	r3, [r7, #24]
 8014cfc:	015a      	lsls	r2, r3, #5
 8014cfe:	69fb      	ldr	r3, [r7, #28]
 8014d00:	4413      	add	r3, r2
 8014d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d06:	691a      	ldr	r2, [r3, #16]
 8014d08:	68bb      	ldr	r3, [r7, #8]
 8014d0a:	6a1b      	ldr	r3, [r3, #32]
 8014d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014d10:	69b9      	ldr	r1, [r7, #24]
 8014d12:	0148      	lsls	r0, r1, #5
 8014d14:	69f9      	ldr	r1, [r7, #28]
 8014d16:	4401      	add	r1, r0
 8014d18:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014d1c:	4313      	orrs	r3, r2
 8014d1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014d20:	69bb      	ldr	r3, [r7, #24]
 8014d22:	015a      	lsls	r2, r3, #5
 8014d24:	69fb      	ldr	r3, [r7, #28]
 8014d26:	4413      	add	r3, r2
 8014d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d2c:	691b      	ldr	r3, [r3, #16]
 8014d2e:	69ba      	ldr	r2, [r7, #24]
 8014d30:	0151      	lsls	r1, r2, #5
 8014d32:	69fa      	ldr	r2, [r7, #28]
 8014d34:	440a      	add	r2, r1
 8014d36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014d3a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014d3e:	6113      	str	r3, [r2, #16]
 8014d40:	e05f      	b.n	8014e02 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014d42:	68bb      	ldr	r3, [r7, #8]
 8014d44:	691b      	ldr	r3, [r3, #16]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d123      	bne.n	8014d92 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014d4a:	69bb      	ldr	r3, [r7, #24]
 8014d4c:	015a      	lsls	r2, r3, #5
 8014d4e:	69fb      	ldr	r3, [r7, #28]
 8014d50:	4413      	add	r3, r2
 8014d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d56:	691a      	ldr	r2, [r3, #16]
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	689b      	ldr	r3, [r3, #8]
 8014d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014d60:	69b9      	ldr	r1, [r7, #24]
 8014d62:	0148      	lsls	r0, r1, #5
 8014d64:	69f9      	ldr	r1, [r7, #28]
 8014d66:	4401      	add	r1, r0
 8014d68:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014d6c:	4313      	orrs	r3, r2
 8014d6e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014d70:	69bb      	ldr	r3, [r7, #24]
 8014d72:	015a      	lsls	r2, r3, #5
 8014d74:	69fb      	ldr	r3, [r7, #28]
 8014d76:	4413      	add	r3, r2
 8014d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d7c:	691b      	ldr	r3, [r3, #16]
 8014d7e:	69ba      	ldr	r2, [r7, #24]
 8014d80:	0151      	lsls	r1, r2, #5
 8014d82:	69fa      	ldr	r2, [r7, #28]
 8014d84:	440a      	add	r2, r1
 8014d86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014d8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014d8e:	6113      	str	r3, [r2, #16]
 8014d90:	e037      	b.n	8014e02 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	691a      	ldr	r2, [r3, #16]
 8014d96:	68bb      	ldr	r3, [r7, #8]
 8014d98:	689b      	ldr	r3, [r3, #8]
 8014d9a:	4413      	add	r3, r2
 8014d9c:	1e5a      	subs	r2, r3, #1
 8014d9e:	68bb      	ldr	r3, [r7, #8]
 8014da0:	689b      	ldr	r3, [r3, #8]
 8014da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8014da6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014da8:	68bb      	ldr	r3, [r7, #8]
 8014daa:	689b      	ldr	r3, [r3, #8]
 8014dac:	8afa      	ldrh	r2, [r7, #22]
 8014dae:	fb03 f202 	mul.w	r2, r3, r2
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014db6:	69bb      	ldr	r3, [r7, #24]
 8014db8:	015a      	lsls	r2, r3, #5
 8014dba:	69fb      	ldr	r3, [r7, #28]
 8014dbc:	4413      	add	r3, r2
 8014dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dc2:	691a      	ldr	r2, [r3, #16]
 8014dc4:	8afb      	ldrh	r3, [r7, #22]
 8014dc6:	04d9      	lsls	r1, r3, #19
 8014dc8:	4b39      	ldr	r3, [pc, #228]	@ (8014eb0 <USB_EPStartXfer+0x544>)
 8014dca:	400b      	ands	r3, r1
 8014dcc:	69b9      	ldr	r1, [r7, #24]
 8014dce:	0148      	lsls	r0, r1, #5
 8014dd0:	69f9      	ldr	r1, [r7, #28]
 8014dd2:	4401      	add	r1, r0
 8014dd4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014dd8:	4313      	orrs	r3, r2
 8014dda:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014ddc:	69bb      	ldr	r3, [r7, #24]
 8014dde:	015a      	lsls	r2, r3, #5
 8014de0:	69fb      	ldr	r3, [r7, #28]
 8014de2:	4413      	add	r3, r2
 8014de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014de8:	691a      	ldr	r2, [r3, #16]
 8014dea:	68bb      	ldr	r3, [r7, #8]
 8014dec:	6a1b      	ldr	r3, [r3, #32]
 8014dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014df2:	69b9      	ldr	r1, [r7, #24]
 8014df4:	0148      	lsls	r0, r1, #5
 8014df6:	69f9      	ldr	r1, [r7, #28]
 8014df8:	4401      	add	r1, r0
 8014dfa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014dfe:	4313      	orrs	r3, r2
 8014e00:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014e02:	79fb      	ldrb	r3, [r7, #7]
 8014e04:	2b01      	cmp	r3, #1
 8014e06:	d10d      	bne.n	8014e24 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	68db      	ldr	r3, [r3, #12]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d009      	beq.n	8014e24 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014e10:	68bb      	ldr	r3, [r7, #8]
 8014e12:	68d9      	ldr	r1, [r3, #12]
 8014e14:	69bb      	ldr	r3, [r7, #24]
 8014e16:	015a      	lsls	r2, r3, #5
 8014e18:	69fb      	ldr	r3, [r7, #28]
 8014e1a:	4413      	add	r3, r2
 8014e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e20:	460a      	mov	r2, r1
 8014e22:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014e24:	68bb      	ldr	r3, [r7, #8]
 8014e26:	791b      	ldrb	r3, [r3, #4]
 8014e28:	2b01      	cmp	r3, #1
 8014e2a:	d128      	bne.n	8014e7e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014e2c:	69fb      	ldr	r3, [r7, #28]
 8014e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014e32:	689b      	ldr	r3, [r3, #8]
 8014e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d110      	bne.n	8014e5e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014e3c:	69bb      	ldr	r3, [r7, #24]
 8014e3e:	015a      	lsls	r2, r3, #5
 8014e40:	69fb      	ldr	r3, [r7, #28]
 8014e42:	4413      	add	r3, r2
 8014e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	69ba      	ldr	r2, [r7, #24]
 8014e4c:	0151      	lsls	r1, r2, #5
 8014e4e:	69fa      	ldr	r2, [r7, #28]
 8014e50:	440a      	add	r2, r1
 8014e52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e56:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014e5a:	6013      	str	r3, [r2, #0]
 8014e5c:	e00f      	b.n	8014e7e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014e5e:	69bb      	ldr	r3, [r7, #24]
 8014e60:	015a      	lsls	r2, r3, #5
 8014e62:	69fb      	ldr	r3, [r7, #28]
 8014e64:	4413      	add	r3, r2
 8014e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	69ba      	ldr	r2, [r7, #24]
 8014e6e:	0151      	lsls	r1, r2, #5
 8014e70:	69fa      	ldr	r2, [r7, #28]
 8014e72:	440a      	add	r2, r1
 8014e74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014e7c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014e7e:	69bb      	ldr	r3, [r7, #24]
 8014e80:	015a      	lsls	r2, r3, #5
 8014e82:	69fb      	ldr	r3, [r7, #28]
 8014e84:	4413      	add	r3, r2
 8014e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	69ba      	ldr	r2, [r7, #24]
 8014e8e:	0151      	lsls	r1, r2, #5
 8014e90:	69fa      	ldr	r2, [r7, #28]
 8014e92:	440a      	add	r2, r1
 8014e94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e98:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014e9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014e9e:	2300      	movs	r3, #0
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3720      	adds	r7, #32
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}
 8014ea8:	fff80000 	.word	0xfff80000
 8014eac:	e007ffff 	.word	0xe007ffff
 8014eb0:	1ff80000 	.word	0x1ff80000

08014eb4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014eb4:	b480      	push	{r7}
 8014eb6:	b087      	sub	sp, #28
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
 8014ebc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014eca:	683b      	ldr	r3, [r7, #0]
 8014ecc:	785b      	ldrb	r3, [r3, #1]
 8014ece:	2b01      	cmp	r3, #1
 8014ed0:	d14a      	bne.n	8014f68 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	781b      	ldrb	r3, [r3, #0]
 8014ed6:	015a      	lsls	r2, r3, #5
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	4413      	add	r3, r2
 8014edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014eea:	f040 8086 	bne.w	8014ffa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014eee:	683b      	ldr	r3, [r7, #0]
 8014ef0:	781b      	ldrb	r3, [r3, #0]
 8014ef2:	015a      	lsls	r2, r3, #5
 8014ef4:	693b      	ldr	r3, [r7, #16]
 8014ef6:	4413      	add	r3, r2
 8014ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	683a      	ldr	r2, [r7, #0]
 8014f00:	7812      	ldrb	r2, [r2, #0]
 8014f02:	0151      	lsls	r1, r2, #5
 8014f04:	693a      	ldr	r2, [r7, #16]
 8014f06:	440a      	add	r2, r1
 8014f08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014f0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014f10:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014f12:	683b      	ldr	r3, [r7, #0]
 8014f14:	781b      	ldrb	r3, [r3, #0]
 8014f16:	015a      	lsls	r2, r3, #5
 8014f18:	693b      	ldr	r3, [r7, #16]
 8014f1a:	4413      	add	r3, r2
 8014f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	683a      	ldr	r2, [r7, #0]
 8014f24:	7812      	ldrb	r2, [r2, #0]
 8014f26:	0151      	lsls	r1, r2, #5
 8014f28:	693a      	ldr	r2, [r7, #16]
 8014f2a:	440a      	add	r2, r1
 8014f2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014f30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014f34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	3301      	adds	r3, #1
 8014f3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014f42:	4293      	cmp	r3, r2
 8014f44:	d902      	bls.n	8014f4c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014f46:	2301      	movs	r3, #1
 8014f48:	75fb      	strb	r3, [r7, #23]
          break;
 8014f4a:	e056      	b.n	8014ffa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	781b      	ldrb	r3, [r3, #0]
 8014f50:	015a      	lsls	r2, r3, #5
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	4413      	add	r3, r2
 8014f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014f60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014f64:	d0e7      	beq.n	8014f36 <USB_EPStopXfer+0x82>
 8014f66:	e048      	b.n	8014ffa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	781b      	ldrb	r3, [r3, #0]
 8014f6c:	015a      	lsls	r2, r3, #5
 8014f6e:	693b      	ldr	r3, [r7, #16]
 8014f70:	4413      	add	r3, r2
 8014f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014f80:	d13b      	bne.n	8014ffa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014f82:	683b      	ldr	r3, [r7, #0]
 8014f84:	781b      	ldrb	r3, [r3, #0]
 8014f86:	015a      	lsls	r2, r3, #5
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	4413      	add	r3, r2
 8014f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	683a      	ldr	r2, [r7, #0]
 8014f94:	7812      	ldrb	r2, [r2, #0]
 8014f96:	0151      	lsls	r1, r2, #5
 8014f98:	693a      	ldr	r2, [r7, #16]
 8014f9a:	440a      	add	r2, r1
 8014f9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014fa0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014fa4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	781b      	ldrb	r3, [r3, #0]
 8014faa:	015a      	lsls	r2, r3, #5
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	4413      	add	r3, r2
 8014fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	683a      	ldr	r2, [r7, #0]
 8014fb8:	7812      	ldrb	r2, [r2, #0]
 8014fba:	0151      	lsls	r1, r2, #5
 8014fbc:	693a      	ldr	r2, [r7, #16]
 8014fbe:	440a      	add	r2, r1
 8014fc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014fc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014fc8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	3301      	adds	r3, #1
 8014fce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014fd6:	4293      	cmp	r3, r2
 8014fd8:	d902      	bls.n	8014fe0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014fda:	2301      	movs	r3, #1
 8014fdc:	75fb      	strb	r3, [r7, #23]
          break;
 8014fde:	e00c      	b.n	8014ffa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	781b      	ldrb	r3, [r3, #0]
 8014fe4:	015a      	lsls	r2, r3, #5
 8014fe6:	693b      	ldr	r3, [r7, #16]
 8014fe8:	4413      	add	r3, r2
 8014fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014ff8:	d0e7      	beq.n	8014fca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	371c      	adds	r7, #28
 8015000:	46bd      	mov	sp, r7
 8015002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015006:	4770      	bx	lr

08015008 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8015008:	b480      	push	{r7}
 801500a:	b089      	sub	sp, #36	@ 0x24
 801500c:	af00      	add	r7, sp, #0
 801500e:	60f8      	str	r0, [r7, #12]
 8015010:	60b9      	str	r1, [r7, #8]
 8015012:	4611      	mov	r1, r2
 8015014:	461a      	mov	r2, r3
 8015016:	460b      	mov	r3, r1
 8015018:	71fb      	strb	r3, [r7, #7]
 801501a:	4613      	mov	r3, r2
 801501c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8015026:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801502a:	2b00      	cmp	r3, #0
 801502c:	d123      	bne.n	8015076 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801502e:	88bb      	ldrh	r3, [r7, #4]
 8015030:	3303      	adds	r3, #3
 8015032:	089b      	lsrs	r3, r3, #2
 8015034:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8015036:	2300      	movs	r3, #0
 8015038:	61bb      	str	r3, [r7, #24]
 801503a:	e018      	b.n	801506e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801503c:	79fb      	ldrb	r3, [r7, #7]
 801503e:	031a      	lsls	r2, r3, #12
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	4413      	add	r3, r2
 8015044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015048:	461a      	mov	r2, r3
 801504a:	69fb      	ldr	r3, [r7, #28]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015050:	69fb      	ldr	r3, [r7, #28]
 8015052:	3301      	adds	r3, #1
 8015054:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015056:	69fb      	ldr	r3, [r7, #28]
 8015058:	3301      	adds	r3, #1
 801505a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801505c:	69fb      	ldr	r3, [r7, #28]
 801505e:	3301      	adds	r3, #1
 8015060:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015062:	69fb      	ldr	r3, [r7, #28]
 8015064:	3301      	adds	r3, #1
 8015066:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015068:	69bb      	ldr	r3, [r7, #24]
 801506a:	3301      	adds	r3, #1
 801506c:	61bb      	str	r3, [r7, #24]
 801506e:	69ba      	ldr	r2, [r7, #24]
 8015070:	693b      	ldr	r3, [r7, #16]
 8015072:	429a      	cmp	r2, r3
 8015074:	d3e2      	bcc.n	801503c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015076:	2300      	movs	r3, #0
}
 8015078:	4618      	mov	r0, r3
 801507a:	3724      	adds	r7, #36	@ 0x24
 801507c:	46bd      	mov	sp, r7
 801507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015082:	4770      	bx	lr

08015084 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015084:	b480      	push	{r7}
 8015086:	b08b      	sub	sp, #44	@ 0x2c
 8015088:	af00      	add	r7, sp, #0
 801508a:	60f8      	str	r0, [r7, #12]
 801508c:	60b9      	str	r1, [r7, #8]
 801508e:	4613      	mov	r3, r2
 8015090:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015096:	68bb      	ldr	r3, [r7, #8]
 8015098:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801509a:	88fb      	ldrh	r3, [r7, #6]
 801509c:	089b      	lsrs	r3, r3, #2
 801509e:	b29b      	uxth	r3, r3
 80150a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80150a2:	88fb      	ldrh	r3, [r7, #6]
 80150a4:	f003 0303 	and.w	r3, r3, #3
 80150a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80150aa:	2300      	movs	r3, #0
 80150ac:	623b      	str	r3, [r7, #32]
 80150ae:	e014      	b.n	80150da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80150b0:	69bb      	ldr	r3, [r7, #24]
 80150b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80150b6:	681a      	ldr	r2, [r3, #0]
 80150b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80150bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150be:	3301      	adds	r3, #1
 80150c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80150c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150c4:	3301      	adds	r3, #1
 80150c6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80150c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ca:	3301      	adds	r3, #1
 80150cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80150ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150d0:	3301      	adds	r3, #1
 80150d2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80150d4:	6a3b      	ldr	r3, [r7, #32]
 80150d6:	3301      	adds	r3, #1
 80150d8:	623b      	str	r3, [r7, #32]
 80150da:	6a3a      	ldr	r2, [r7, #32]
 80150dc:	697b      	ldr	r3, [r7, #20]
 80150de:	429a      	cmp	r2, r3
 80150e0:	d3e6      	bcc.n	80150b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80150e2:	8bfb      	ldrh	r3, [r7, #30]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d01e      	beq.n	8015126 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80150e8:	2300      	movs	r3, #0
 80150ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80150ec:	69bb      	ldr	r3, [r7, #24]
 80150ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80150f2:	461a      	mov	r2, r3
 80150f4:	f107 0310 	add.w	r3, r7, #16
 80150f8:	6812      	ldr	r2, [r2, #0]
 80150fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80150fc:	693a      	ldr	r2, [r7, #16]
 80150fe:	6a3b      	ldr	r3, [r7, #32]
 8015100:	b2db      	uxtb	r3, r3
 8015102:	00db      	lsls	r3, r3, #3
 8015104:	fa22 f303 	lsr.w	r3, r2, r3
 8015108:	b2da      	uxtb	r2, r3
 801510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801510c:	701a      	strb	r2, [r3, #0]
      i++;
 801510e:	6a3b      	ldr	r3, [r7, #32]
 8015110:	3301      	adds	r3, #1
 8015112:	623b      	str	r3, [r7, #32]
      pDest++;
 8015114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015116:	3301      	adds	r3, #1
 8015118:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801511a:	8bfb      	ldrh	r3, [r7, #30]
 801511c:	3b01      	subs	r3, #1
 801511e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015120:	8bfb      	ldrh	r3, [r7, #30]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d1ea      	bne.n	80150fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8015126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015128:	4618      	mov	r0, r3
 801512a:	372c      	adds	r7, #44	@ 0x2c
 801512c:	46bd      	mov	sp, r7
 801512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015132:	4770      	bx	lr

08015134 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015134:	b480      	push	{r7}
 8015136:	b085      	sub	sp, #20
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015142:	683b      	ldr	r3, [r7, #0]
 8015144:	781b      	ldrb	r3, [r3, #0]
 8015146:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	785b      	ldrb	r3, [r3, #1]
 801514c:	2b01      	cmp	r3, #1
 801514e:	d12c      	bne.n	80151aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015150:	68bb      	ldr	r3, [r7, #8]
 8015152:	015a      	lsls	r2, r3, #5
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	4413      	add	r3, r2
 8015158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	2b00      	cmp	r3, #0
 8015160:	db12      	blt.n	8015188 <USB_EPSetStall+0x54>
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d00f      	beq.n	8015188 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015168:	68bb      	ldr	r3, [r7, #8]
 801516a:	015a      	lsls	r2, r3, #5
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	4413      	add	r3, r2
 8015170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	68ba      	ldr	r2, [r7, #8]
 8015178:	0151      	lsls	r1, r2, #5
 801517a:	68fa      	ldr	r2, [r7, #12]
 801517c:	440a      	add	r2, r1
 801517e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015182:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015186:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015188:	68bb      	ldr	r3, [r7, #8]
 801518a:	015a      	lsls	r2, r3, #5
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	4413      	add	r3, r2
 8015190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	68ba      	ldr	r2, [r7, #8]
 8015198:	0151      	lsls	r1, r2, #5
 801519a:	68fa      	ldr	r2, [r7, #12]
 801519c:	440a      	add	r2, r1
 801519e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80151a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80151a6:	6013      	str	r3, [r2, #0]
 80151a8:	e02b      	b.n	8015202 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80151aa:	68bb      	ldr	r3, [r7, #8]
 80151ac:	015a      	lsls	r2, r3, #5
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	4413      	add	r3, r2
 80151b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	db12      	blt.n	80151e2 <USB_EPSetStall+0xae>
 80151bc:	68bb      	ldr	r3, [r7, #8]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d00f      	beq.n	80151e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80151c2:	68bb      	ldr	r3, [r7, #8]
 80151c4:	015a      	lsls	r2, r3, #5
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	4413      	add	r3, r2
 80151ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	68ba      	ldr	r2, [r7, #8]
 80151d2:	0151      	lsls	r1, r2, #5
 80151d4:	68fa      	ldr	r2, [r7, #12]
 80151d6:	440a      	add	r2, r1
 80151d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80151dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80151e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	015a      	lsls	r2, r3, #5
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	4413      	add	r3, r2
 80151ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	68ba      	ldr	r2, [r7, #8]
 80151f2:	0151      	lsls	r1, r2, #5
 80151f4:	68fa      	ldr	r2, [r7, #12]
 80151f6:	440a      	add	r2, r1
 80151f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80151fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015200:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015202:	2300      	movs	r3, #0
}
 8015204:	4618      	mov	r0, r3
 8015206:	3714      	adds	r7, #20
 8015208:	46bd      	mov	sp, r7
 801520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520e:	4770      	bx	lr

08015210 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015210:	b480      	push	{r7}
 8015212:	b085      	sub	sp, #20
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
 8015218:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	781b      	ldrb	r3, [r3, #0]
 8015222:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	785b      	ldrb	r3, [r3, #1]
 8015228:	2b01      	cmp	r3, #1
 801522a:	d128      	bne.n	801527e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801522c:	68bb      	ldr	r3, [r7, #8]
 801522e:	015a      	lsls	r2, r3, #5
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	4413      	add	r3, r2
 8015234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	68ba      	ldr	r2, [r7, #8]
 801523c:	0151      	lsls	r1, r2, #5
 801523e:	68fa      	ldr	r2, [r7, #12]
 8015240:	440a      	add	r2, r1
 8015242:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015246:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801524a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	791b      	ldrb	r3, [r3, #4]
 8015250:	2b03      	cmp	r3, #3
 8015252:	d003      	beq.n	801525c <USB_EPClearStall+0x4c>
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	791b      	ldrb	r3, [r3, #4]
 8015258:	2b02      	cmp	r3, #2
 801525a:	d138      	bne.n	80152ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801525c:	68bb      	ldr	r3, [r7, #8]
 801525e:	015a      	lsls	r2, r3, #5
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	4413      	add	r3, r2
 8015264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	68ba      	ldr	r2, [r7, #8]
 801526c:	0151      	lsls	r1, r2, #5
 801526e:	68fa      	ldr	r2, [r7, #12]
 8015270:	440a      	add	r2, r1
 8015272:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801527a:	6013      	str	r3, [r2, #0]
 801527c:	e027      	b.n	80152ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	015a      	lsls	r2, r3, #5
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	4413      	add	r3, r2
 8015286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	68ba      	ldr	r2, [r7, #8]
 801528e:	0151      	lsls	r1, r2, #5
 8015290:	68fa      	ldr	r2, [r7, #12]
 8015292:	440a      	add	r2, r1
 8015294:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015298:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801529c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	791b      	ldrb	r3, [r3, #4]
 80152a2:	2b03      	cmp	r3, #3
 80152a4:	d003      	beq.n	80152ae <USB_EPClearStall+0x9e>
 80152a6:	683b      	ldr	r3, [r7, #0]
 80152a8:	791b      	ldrb	r3, [r3, #4]
 80152aa:	2b02      	cmp	r3, #2
 80152ac:	d10f      	bne.n	80152ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80152ae:	68bb      	ldr	r3, [r7, #8]
 80152b0:	015a      	lsls	r2, r3, #5
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	4413      	add	r3, r2
 80152b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	68ba      	ldr	r2, [r7, #8]
 80152be:	0151      	lsls	r1, r2, #5
 80152c0:	68fa      	ldr	r2, [r7, #12]
 80152c2:	440a      	add	r2, r1
 80152c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80152c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80152cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80152ce:	2300      	movs	r3, #0
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	3714      	adds	r7, #20
 80152d4:	46bd      	mov	sp, r7
 80152d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152da:	4770      	bx	lr

080152dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80152dc:	b480      	push	{r7}
 80152de:	b085      	sub	sp, #20
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
 80152e4:	460b      	mov	r3, r1
 80152e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	68fa      	ldr	r2, [r7, #12]
 80152f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80152fa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80152fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015306:	681a      	ldr	r2, [r3, #0]
 8015308:	78fb      	ldrb	r3, [r7, #3]
 801530a:	011b      	lsls	r3, r3, #4
 801530c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8015310:	68f9      	ldr	r1, [r7, #12]
 8015312:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015316:	4313      	orrs	r3, r2
 8015318:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801531a:	2300      	movs	r3, #0
}
 801531c:	4618      	mov	r0, r3
 801531e:	3714      	adds	r7, #20
 8015320:	46bd      	mov	sp, r7
 8015322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015326:	4770      	bx	lr

08015328 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015328:	b480      	push	{r7}
 801532a:	b085      	sub	sp, #20
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	68fa      	ldr	r2, [r7, #12]
 801533e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015342:	f023 0303 	bic.w	r3, r3, #3
 8015346:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801534e:	685b      	ldr	r3, [r3, #4]
 8015350:	68fa      	ldr	r2, [r7, #12]
 8015352:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015356:	f023 0302 	bic.w	r3, r3, #2
 801535a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801535c:	2300      	movs	r3, #0
}
 801535e:	4618      	mov	r0, r3
 8015360:	3714      	adds	r7, #20
 8015362:	46bd      	mov	sp, r7
 8015364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015368:	4770      	bx	lr

0801536a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801536a:	b480      	push	{r7}
 801536c:	b085      	sub	sp, #20
 801536e:	af00      	add	r7, sp, #0
 8015370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	68fa      	ldr	r2, [r7, #12]
 8015380:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015384:	f023 0303 	bic.w	r3, r3, #3
 8015388:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015390:	685b      	ldr	r3, [r3, #4]
 8015392:	68fa      	ldr	r2, [r7, #12]
 8015394:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015398:	f043 0302 	orr.w	r3, r3, #2
 801539c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801539e:	2300      	movs	r3, #0
}
 80153a0:	4618      	mov	r0, r3
 80153a2:	3714      	adds	r7, #20
 80153a4:	46bd      	mov	sp, r7
 80153a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153aa:	4770      	bx	lr

080153ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80153ac:	b480      	push	{r7}
 80153ae:	b085      	sub	sp, #20
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	695b      	ldr	r3, [r3, #20]
 80153b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	699b      	ldr	r3, [r3, #24]
 80153be:	68fa      	ldr	r2, [r7, #12]
 80153c0:	4013      	ands	r3, r2
 80153c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80153c4:	68fb      	ldr	r3, [r7, #12]
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	3714      	adds	r7, #20
 80153ca:	46bd      	mov	sp, r7
 80153cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d0:	4770      	bx	lr

080153d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80153d2:	b480      	push	{r7}
 80153d4:	b085      	sub	sp, #20
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153e4:	699b      	ldr	r3, [r3, #24]
 80153e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153ee:	69db      	ldr	r3, [r3, #28]
 80153f0:	68ba      	ldr	r2, [r7, #8]
 80153f2:	4013      	ands	r3, r2
 80153f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80153f6:	68bb      	ldr	r3, [r7, #8]
 80153f8:	0c1b      	lsrs	r3, r3, #16
}
 80153fa:	4618      	mov	r0, r3
 80153fc:	3714      	adds	r7, #20
 80153fe:	46bd      	mov	sp, r7
 8015400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015404:	4770      	bx	lr

08015406 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015406:	b480      	push	{r7}
 8015408:	b085      	sub	sp, #20
 801540a:	af00      	add	r7, sp, #0
 801540c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015418:	699b      	ldr	r3, [r3, #24]
 801541a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015422:	69db      	ldr	r3, [r3, #28]
 8015424:	68ba      	ldr	r2, [r7, #8]
 8015426:	4013      	ands	r3, r2
 8015428:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801542a:	68bb      	ldr	r3, [r7, #8]
 801542c:	b29b      	uxth	r3, r3
}
 801542e:	4618      	mov	r0, r3
 8015430:	3714      	adds	r7, #20
 8015432:	46bd      	mov	sp, r7
 8015434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015438:	4770      	bx	lr

0801543a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801543a:	b480      	push	{r7}
 801543c:	b085      	sub	sp, #20
 801543e:	af00      	add	r7, sp, #0
 8015440:	6078      	str	r0, [r7, #4]
 8015442:	460b      	mov	r3, r1
 8015444:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801544a:	78fb      	ldrb	r3, [r7, #3]
 801544c:	015a      	lsls	r2, r3, #5
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	4413      	add	r3, r2
 8015452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015456:	689b      	ldr	r3, [r3, #8]
 8015458:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015460:	695b      	ldr	r3, [r3, #20]
 8015462:	68ba      	ldr	r2, [r7, #8]
 8015464:	4013      	ands	r3, r2
 8015466:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015468:	68bb      	ldr	r3, [r7, #8]
}
 801546a:	4618      	mov	r0, r3
 801546c:	3714      	adds	r7, #20
 801546e:	46bd      	mov	sp, r7
 8015470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015474:	4770      	bx	lr

08015476 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015476:	b480      	push	{r7}
 8015478:	b087      	sub	sp, #28
 801547a:	af00      	add	r7, sp, #0
 801547c:	6078      	str	r0, [r7, #4]
 801547e:	460b      	mov	r3, r1
 8015480:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801548c:	691b      	ldr	r3, [r3, #16]
 801548e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015490:	697b      	ldr	r3, [r7, #20]
 8015492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015498:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801549a:	78fb      	ldrb	r3, [r7, #3]
 801549c:	f003 030f 	and.w	r3, r3, #15
 80154a0:	68fa      	ldr	r2, [r7, #12]
 80154a2:	fa22 f303 	lsr.w	r3, r2, r3
 80154a6:	01db      	lsls	r3, r3, #7
 80154a8:	b2db      	uxtb	r3, r3
 80154aa:	693a      	ldr	r2, [r7, #16]
 80154ac:	4313      	orrs	r3, r2
 80154ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80154b0:	78fb      	ldrb	r3, [r7, #3]
 80154b2:	015a      	lsls	r2, r3, #5
 80154b4:	697b      	ldr	r3, [r7, #20]
 80154b6:	4413      	add	r3, r2
 80154b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80154bc:	689b      	ldr	r3, [r3, #8]
 80154be:	693a      	ldr	r2, [r7, #16]
 80154c0:	4013      	ands	r3, r2
 80154c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80154c4:	68bb      	ldr	r3, [r7, #8]
}
 80154c6:	4618      	mov	r0, r3
 80154c8:	371c      	adds	r7, #28
 80154ca:	46bd      	mov	sp, r7
 80154cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d0:	4770      	bx	lr

080154d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80154d2:	b480      	push	{r7}
 80154d4:	b083      	sub	sp, #12
 80154d6:	af00      	add	r7, sp, #0
 80154d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	695b      	ldr	r3, [r3, #20]
 80154de:	f003 0301 	and.w	r3, r3, #1
}
 80154e2:	4618      	mov	r0, r3
 80154e4:	370c      	adds	r7, #12
 80154e6:	46bd      	mov	sp, r7
 80154e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ec:	4770      	bx	lr
	...

080154f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80154f0:	b480      	push	{r7}
 80154f2:	b085      	sub	sp, #20
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015502:	681a      	ldr	r2, [r3, #0]
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801550a:	4619      	mov	r1, r3
 801550c:	4b09      	ldr	r3, [pc, #36]	@ (8015534 <USB_ActivateSetup+0x44>)
 801550e:	4013      	ands	r3, r2
 8015510:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015518:	685b      	ldr	r3, [r3, #4]
 801551a:	68fa      	ldr	r2, [r7, #12]
 801551c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015524:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015526:	2300      	movs	r3, #0
}
 8015528:	4618      	mov	r0, r3
 801552a:	3714      	adds	r7, #20
 801552c:	46bd      	mov	sp, r7
 801552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015532:	4770      	bx	lr
 8015534:	fffff800 	.word	0xfffff800

08015538 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8015538:	b480      	push	{r7}
 801553a:	b087      	sub	sp, #28
 801553c:	af00      	add	r7, sp, #0
 801553e:	60f8      	str	r0, [r7, #12]
 8015540:	460b      	mov	r3, r1
 8015542:	607a      	str	r2, [r7, #4]
 8015544:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	333c      	adds	r3, #60	@ 0x3c
 801554e:	3304      	adds	r3, #4
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015554:	693b      	ldr	r3, [r7, #16]
 8015556:	4a26      	ldr	r2, [pc, #152]	@ (80155f0 <USB_EP0_OutStart+0xb8>)
 8015558:	4293      	cmp	r3, r2
 801555a:	d90a      	bls.n	8015572 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015568:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801556c:	d101      	bne.n	8015572 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801556e:	2300      	movs	r3, #0
 8015570:	e037      	b.n	80155e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015572:	697b      	ldr	r3, [r7, #20]
 8015574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015578:	461a      	mov	r2, r3
 801557a:	2300      	movs	r3, #0
 801557c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801557e:	697b      	ldr	r3, [r7, #20]
 8015580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015584:	691b      	ldr	r3, [r3, #16]
 8015586:	697a      	ldr	r2, [r7, #20]
 8015588:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801558c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015590:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015592:	697b      	ldr	r3, [r7, #20]
 8015594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015598:	691b      	ldr	r3, [r3, #16]
 801559a:	697a      	ldr	r2, [r7, #20]
 801559c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80155a0:	f043 0318 	orr.w	r3, r3, #24
 80155a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155ac:	691b      	ldr	r3, [r3, #16]
 80155ae:	697a      	ldr	r2, [r7, #20]
 80155b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80155b4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80155b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80155ba:	7afb      	ldrb	r3, [r7, #11]
 80155bc:	2b01      	cmp	r3, #1
 80155be:	d10f      	bne.n	80155e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80155c0:	697b      	ldr	r3, [r7, #20]
 80155c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155c6:	461a      	mov	r2, r3
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80155cc:	697b      	ldr	r3, [r7, #20]
 80155ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	697a      	ldr	r2, [r7, #20]
 80155d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80155da:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80155de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80155e0:	2300      	movs	r3, #0
}
 80155e2:	4618      	mov	r0, r3
 80155e4:	371c      	adds	r7, #28
 80155e6:	46bd      	mov	sp, r7
 80155e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ec:	4770      	bx	lr
 80155ee:	bf00      	nop
 80155f0:	4f54300a 	.word	0x4f54300a

080155f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80155f4:	b480      	push	{r7}
 80155f6:	b085      	sub	sp, #20
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80155fc:	2300      	movs	r3, #0
 80155fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	3301      	adds	r3, #1
 8015604:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801560c:	d901      	bls.n	8015612 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801560e:	2303      	movs	r3, #3
 8015610:	e01b      	b.n	801564a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	691b      	ldr	r3, [r3, #16]
 8015616:	2b00      	cmp	r3, #0
 8015618:	daf2      	bge.n	8015600 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801561a:	2300      	movs	r3, #0
 801561c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	691b      	ldr	r3, [r3, #16]
 8015622:	f043 0201 	orr.w	r2, r3, #1
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	3301      	adds	r3, #1
 801562e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015636:	d901      	bls.n	801563c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015638:	2303      	movs	r3, #3
 801563a:	e006      	b.n	801564a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	691b      	ldr	r3, [r3, #16]
 8015640:	f003 0301 	and.w	r3, r3, #1
 8015644:	2b01      	cmp	r3, #1
 8015646:	d0f0      	beq.n	801562a <USB_CoreReset+0x36>

  return HAL_OK;
 8015648:	2300      	movs	r3, #0
}
 801564a:	4618      	mov	r0, r3
 801564c:	3714      	adds	r7, #20
 801564e:	46bd      	mov	sp, r7
 8015650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015654:	4770      	bx	lr

08015656 <XBEE_Init>:
#include "XBEE.h"

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t XBEE_Init(XBEE_HandleTypeDef *hxbee) {
 8015656:	b580      	push	{r7, lr}
 8015658:	b082      	sub	sp, #8
 801565a:	af00      	add	r7, sp, #0
 801565c:	6078      	str	r0, [r7, #4]
	// Set up the variables
	hxbee->pkt_DMAHead   = 0;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	2200      	movs	r2, #0
 8015662:	741a      	strb	r2, [r3, #16]
	hxbee->pktRx_state   = 0;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	2200      	movs	r2, #0
 8015668:	745a      	strb	r2, [r3, #17]
	hxbee->pktTx_state   = 0;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	2200      	movs	r2, #0
 801566e:	76da      	strb	r2, [r3, #27]
	hxbee->pktRx_idxPush = 0;
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	2200      	movs	r2, #0
 8015674:	765a      	strb	r2, [r3, #25]
	hxbee->pktRx_idxPop  = 0;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	2200      	movs	r2, #0
 801567a:	769a      	strb	r2, [r3, #26]
	hxbee->pktTx_idxPush = 0;
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	2200      	movs	r2, #0
 8015680:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hxbee->pktTx_idxPop  = 0;
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	2200      	movs	r2, #0
 8015688:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	// Allocate mem
	hxbee->pkt_bufDMA  = malloc(PKT_RAWSIZE);
 801568c:	2044      	movs	r0, #68	@ 0x44
 801568e:	f002 ff2f 	bl	80184f0 <malloc>
 8015692:	4603      	mov	r3, r0
 8015694:	461a      	mov	r2, r3
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	609a      	str	r2, [r3, #8]
	hxbee->pkt_bufPart = malloc(PKT_RAWSIZE);
 801569a:	2044      	movs	r0, #68	@ 0x44
 801569c:	f002 ff28 	bl	80184f0 <malloc>
 80156a0:	4603      	mov	r3, r0
 80156a2:	461a      	mov	r2, r3
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	60da      	str	r2, [r3, #12]
	hxbee->pktRx_mem   = malloc(hxbee->pktRx_max*PKT_RAWSIZE);
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	7e1b      	ldrb	r3, [r3, #24]
 80156ac:	461a      	mov	r2, r3
 80156ae:	4613      	mov	r3, r2
 80156b0:	011b      	lsls	r3, r3, #4
 80156b2:	4413      	add	r3, r2
 80156b4:	009b      	lsls	r3, r3, #2
 80156b6:	4618      	mov	r0, r3
 80156b8:	f002 ff1a 	bl	80184f0 <malloc>
 80156bc:	4603      	mov	r3, r0
 80156be:	461a      	mov	r2, r3
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	615a      	str	r2, [r3, #20]
	hxbee->pktTx_mem   = malloc(hxbee->pktTx_max*PKT_RAWSIZE);
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80156ca:	461a      	mov	r2, r3
 80156cc:	4613      	mov	r3, r2
 80156ce:	011b      	lsls	r3, r3, #4
 80156d0:	4413      	add	r3, r2
 80156d2:	009b      	lsls	r3, r3, #2
 80156d4:	4618      	mov	r0, r3
 80156d6:	f002 ff0b 	bl	80184f0 <malloc>
 80156da:	4603      	mov	r3, r0
 80156dc:	461a      	mov	r2, r3
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	61da      	str	r2, [r3, #28]

	// Begin the cyclic UART capture
	// Make sure the DMA is circular
	return HAL_UART_Receive_DMA(hxbee->uart_handle, hxbee->pkt_bufDMA, PKT_RAWSIZE);
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	6818      	ldr	r0, [r3, #0]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	689b      	ldr	r3, [r3, #8]
 80156ea:	2244      	movs	r2, #68	@ 0x44
 80156ec:	4619      	mov	r1, r3
 80156ee:	f7fc fd4b 	bl	8012188 <HAL_UART_Receive_DMA>
 80156f2:	4603      	mov	r3, r0
}
 80156f4:	4618      	mov	r0, r3
 80156f6:	3708      	adds	r7, #8
 80156f8:	46bd      	mov	sp, r7
 80156fa:	bd80      	pop	{r7, pc}

080156fc <XBEE_RXPacket>:

// Gets a packet if there's one buffered
// 0 - Success
// 1 - Nothing to Get
uint8_t XBEE_RXPacket(XBEE_HandleTypeDef *hxbee, uint8_t **pRxBuffer, uint16_t *pkt_num) {
 80156fc:	b480      	push	{r7}
 80156fe:	b087      	sub	sp, #28
 8015700:	af00      	add	r7, sp, #0
 8015702:	60f8      	str	r0, [r7, #12]
 8015704:	60b9      	str	r1, [r7, #8]
 8015706:	607a      	str	r2, [r7, #4]
	// Check if there's an available packet
	if (hxbee->pktRx_idxPop == hxbee->pktRx_idxPush) return 1;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	7e9a      	ldrb	r2, [r3, #26]
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	7e5b      	ldrb	r3, [r3, #25]
 8015710:	429a      	cmp	r2, r3
 8015712:	d101      	bne.n	8015718 <XBEE_RXPacket+0x1c>
 8015714:	2301      	movs	r3, #1
 8015716:	e05b      	b.n	80157d0 <XBEE_RXPacket+0xd4>

	// There's a packet up for grabs, get a pointer to the raw pkt incl. Header
	uint8_t *pRxInternal = hxbee->pktRx_mem + hxbee->pktRx_idxPop*PKT_RAWSIZE;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	695a      	ldr	r2, [r3, #20]
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	7e9b      	ldrb	r3, [r3, #26]
 8015720:	4619      	mov	r1, r3
 8015722:	460b      	mov	r3, r1
 8015724:	011b      	lsls	r3, r3, #4
 8015726:	440b      	add	r3, r1
 8015728:	009b      	lsls	r3, r3, #2
 801572a:	4413      	add	r3, r2
 801572c:	613b      	str	r3, [r7, #16]

	hxbee->pktRx_idxPop += 1;
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	7e9b      	ldrb	r3, [r3, #26]
 8015732:	3301      	adds	r3, #1
 8015734:	b2da      	uxtb	r2, r3
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	769a      	strb	r2, [r3, #26]
	hxbee->pktRx_idxPop %= hxbee->pktRx_max;
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	7e9b      	ldrb	r3, [r3, #26]
 801573e:	68fa      	ldr	r2, [r7, #12]
 8015740:	7e12      	ldrb	r2, [r2, #24]
 8015742:	fbb3 f1f2 	udiv	r1, r3, r2
 8015746:	fb01 f202 	mul.w	r2, r1, r2
 801574a:	1a9b      	subs	r3, r3, r2
 801574c:	b2da      	uxtb	r2, r3
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	769a      	strb	r2, [r3, #26]

	// Compute the checksum
	uint8_t checksum = 0x00;
 8015752:	2300      	movs	r3, #0
 8015754:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8015756:	2300      	movs	r3, #0
 8015758:	75bb      	strb	r3, [r7, #22]
 801575a:	e00e      	b.n	801577a <XBEE_RXPacket+0x7e>
		if (i == 3) continue;
 801575c:	7dbb      	ldrb	r3, [r7, #22]
 801575e:	2b03      	cmp	r3, #3
 8015760:	d007      	beq.n	8015772 <XBEE_RXPacket+0x76>
		checksum ^= pRxInternal[i];
 8015762:	7dbb      	ldrb	r3, [r7, #22]
 8015764:	693a      	ldr	r2, [r7, #16]
 8015766:	4413      	add	r3, r2
 8015768:	781a      	ldrb	r2, [r3, #0]
 801576a:	7dfb      	ldrb	r3, [r7, #23]
 801576c:	4053      	eors	r3, r2
 801576e:	75fb      	strb	r3, [r7, #23]
 8015770:	e000      	b.n	8015774 <XBEE_RXPacket+0x78>
		if (i == 3) continue;
 8015772:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8015774:	7dbb      	ldrb	r3, [r7, #22]
 8015776:	3301      	adds	r3, #1
 8015778:	75bb      	strb	r3, [r7, #22]
 801577a:	7dbb      	ldrb	r3, [r7, #22]
 801577c:	2b43      	cmp	r3, #67	@ 0x43
 801577e:	d9ed      	bls.n	801575c <XBEE_RXPacket+0x60>
	}

	// Packet corrupted, mismatch checksum
	if (pRxInternal[3] != checksum) return 1;
 8015780:	693b      	ldr	r3, [r7, #16]
 8015782:	3303      	adds	r3, #3
 8015784:	781b      	ldrb	r3, [r3, #0]
 8015786:	7dfa      	ldrb	r2, [r7, #23]
 8015788:	429a      	cmp	r2, r3
 801578a:	d001      	beq.n	8015790 <XBEE_RXPacket+0x94>
 801578c:	2301      	movs	r3, #1
 801578e:	e01f      	b.n	80157d0 <XBEE_RXPacket+0xd4>

	// Get the 16 bit packet number field
	*pkt_num = 0;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	2200      	movs	r2, #0
 8015794:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[1];
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	881b      	ldrh	r3, [r3, #0]
 801579a:	693a      	ldr	r2, [r7, #16]
 801579c:	3201      	adds	r2, #1
 801579e:	7812      	ldrb	r2, [r2, #0]
 80157a0:	4413      	add	r3, r2
 80157a2:	b29a      	uxth	r2, r3
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	801a      	strh	r2, [r3, #0]
	*pkt_num *= 256;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	881b      	ldrh	r3, [r3, #0]
 80157ac:	021b      	lsls	r3, r3, #8
 80157ae:	b29a      	uxth	r2, r3
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[2];
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	881b      	ldrh	r3, [r3, #0]
 80157b8:	693a      	ldr	r2, [r7, #16]
 80157ba:	3202      	adds	r2, #2
 80157bc:	7812      	ldrb	r2, [r2, #0]
 80157be:	4413      	add	r3, r2
 80157c0:	b29a      	uxth	r2, r3
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	801a      	strh	r2, [r3, #0]

	*pRxBuffer = pRxInternal + 4;
 80157c6:	693b      	ldr	r3, [r7, #16]
 80157c8:	1d1a      	adds	r2, r3, #4
 80157ca:	68bb      	ldr	r3, [r7, #8]
 80157cc:	601a      	str	r2, [r3, #0]

	return 0;
 80157ce:	2300      	movs	r3, #0
}
 80157d0:	4618      	mov	r0, r3
 80157d2:	371c      	adds	r7, #28
 80157d4:	46bd      	mov	sp, r7
 80157d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157da:	4770      	bx	lr

080157dc <XBEE_TXPacket>:

uint8_t XBEE_TXPacket(XBEE_HandleTypeDef *hxbee, uint8_t *pTxBuffer, uint16_t pkt_num) {
 80157dc:	b580      	push	{r7, lr}
 80157de:	b086      	sub	sp, #24
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	60f8      	str	r0, [r7, #12]
 80157e4:	60b9      	str	r1, [r7, #8]
 80157e6:	4613      	mov	r3, r2
 80157e8:	80fb      	strh	r3, [r7, #6]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktTx_idxPush + 1;
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80157f0:	3301      	adds	r3, #1
 80157f2:	75bb      	strb	r3, [r7, #22]
	pkt_idx %= hxbee->pktTx_max;
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80157fa:	7dbb      	ldrb	r3, [r7, #22]
 80157fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8015800:	fb01 f202 	mul.w	r2, r1, r2
 8015804:	1a9b      	subs	r3, r3, r2
 8015806:	75bb      	strb	r3, [r7, #22]

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktTx_idxPop) return 1;
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801580e:	7dba      	ldrb	r2, [r7, #22]
 8015810:	429a      	cmp	r2, r3
 8015812:	d101      	bne.n	8015818 <XBEE_TXPacket+0x3c>
 8015814:	2301      	movs	r3, #1
 8015816:	e047      	b.n	80158a8 <XBEE_TXPacket+0xcc>

	// Get a reference to this memory location
	uint8_t *newPkt = hxbee->pktTx_mem + hxbee->pktTx_idxPush*PKT_RAWSIZE;
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	69da      	ldr	r2, [r3, #28]
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8015822:	4619      	mov	r1, r3
 8015824:	460b      	mov	r3, r1
 8015826:	011b      	lsls	r3, r3, #4
 8015828:	440b      	add	r3, r1
 801582a:	009b      	lsls	r3, r3, #2
 801582c:	4413      	add	r3, r2
 801582e:	613b      	str	r3, [r7, #16]

	// Construct the packet
	newPkt[0] = PKT_DELIMETER;
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	22aa      	movs	r2, #170	@ 0xaa
 8015834:	701a      	strb	r2, [r3, #0]
	newPkt[1] = pkt_num >> 8;
 8015836:	88fb      	ldrh	r3, [r7, #6]
 8015838:	0a1b      	lsrs	r3, r3, #8
 801583a:	b29a      	uxth	r2, r3
 801583c:	693b      	ldr	r3, [r7, #16]
 801583e:	3301      	adds	r3, #1
 8015840:	b2d2      	uxtb	r2, r2
 8015842:	701a      	strb	r2, [r3, #0]
	newPkt[2] = pkt_num & 0x00FF;
 8015844:	693b      	ldr	r3, [r7, #16]
 8015846:	3302      	adds	r3, #2
 8015848:	88fa      	ldrh	r2, [r7, #6]
 801584a:	b2d2      	uxtb	r2, r2
 801584c:	701a      	strb	r2, [r3, #0]

	memcpy(newPkt + 4, pTxBuffer, PKT_DATASIZE);
 801584e:	693b      	ldr	r3, [r7, #16]
 8015850:	3304      	adds	r3, #4
 8015852:	2240      	movs	r2, #64	@ 0x40
 8015854:	68b9      	ldr	r1, [r7, #8]
 8015856:	4618      	mov	r0, r3
 8015858:	f003 fceb 	bl	8019232 <memcpy>

	// Compute the checksum
	newPkt[3] = 0x00;
 801585c:	693b      	ldr	r3, [r7, #16]
 801585e:	3303      	adds	r3, #3
 8015860:	2200      	movs	r2, #0
 8015862:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8015864:	2300      	movs	r3, #0
 8015866:	75fb      	strb	r3, [r7, #23]
 8015868:	e013      	b.n	8015892 <XBEE_TXPacket+0xb6>
		if (i == 3) continue;
 801586a:	7dfb      	ldrb	r3, [r7, #23]
 801586c:	2b03      	cmp	r3, #3
 801586e:	d00c      	beq.n	801588a <XBEE_TXPacket+0xae>
		newPkt[3] ^= newPkt[i];
 8015870:	693b      	ldr	r3, [r7, #16]
 8015872:	3303      	adds	r3, #3
 8015874:	7819      	ldrb	r1, [r3, #0]
 8015876:	7dfb      	ldrb	r3, [r7, #23]
 8015878:	693a      	ldr	r2, [r7, #16]
 801587a:	4413      	add	r3, r2
 801587c:	781a      	ldrb	r2, [r3, #0]
 801587e:	693b      	ldr	r3, [r7, #16]
 8015880:	3303      	adds	r3, #3
 8015882:	404a      	eors	r2, r1
 8015884:	b2d2      	uxtb	r2, r2
 8015886:	701a      	strb	r2, [r3, #0]
 8015888:	e000      	b.n	801588c <XBEE_TXPacket+0xb0>
		if (i == 3) continue;
 801588a:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 801588c:	7dfb      	ldrb	r3, [r7, #23]
 801588e:	3301      	adds	r3, #1
 8015890:	75fb      	strb	r3, [r7, #23]
 8015892:	7dfb      	ldrb	r3, [r7, #23]
 8015894:	2b43      	cmp	r3, #67	@ 0x43
 8015896:	d9e8      	bls.n	801586a <XBEE_TXPacket+0x8e>
	}

	// Try and immediately send the packet
	// TODO: Set the bust state, interrupts
	return HAL_UART_Transmit(hxbee->uart_handle, newPkt, PKT_RAWSIZE, 30);	// Transmit the buffer
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	6818      	ldr	r0, [r3, #0]
 801589c:	231e      	movs	r3, #30
 801589e:	2244      	movs	r2, #68	@ 0x44
 80158a0:	6939      	ldr	r1, [r7, #16]
 80158a2:	f7fc fbe3 	bl	801206c <HAL_UART_Transmit>
 80158a6:	4603      	mov	r3, r0
}
 80158a8:	4618      	mov	r0, r3
 80158aa:	3718      	adds	r7, #24
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}

080158b0 <XBEE_RX_DMACallback>:
// Process incoming packets on DMA callback
// 0 - Success
// 1 - Buffer full
// 2 - Packet malformed
// 3 - Checksum mismatch
uint8_t XBEE_RX_DMACallback(XBEE_HandleTypeDef *hxbee) {
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b096      	sub	sp, #88	@ 0x58
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktRx_idxPush + 1;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	7e5b      	ldrb	r3, [r3, #25]
 80158bc:	3301      	adds	r3, #1
 80158be:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	pkt_idx %= hxbee->pktRx_max;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	7e1a      	ldrb	r2, [r3, #24]
 80158c6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80158ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80158ce:	fb01 f202 	mul.w	r2, r1, r2
 80158d2:	1a9b      	subs	r3, r3, r2
 80158d4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktRx_idxPop) return 1;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	7e9b      	ldrb	r3, [r3, #26]
 80158dc:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80158e0:	429a      	cmp	r2, r3
 80158e2:	d101      	bne.n	80158e8 <XBEE_RX_DMACallback+0x38>
 80158e4:	2301      	movs	r3, #1
 80158e6:	e097      	b.n	8015a18 <XBEE_RX_DMACallback+0x168>

	// Create a temporary buffer for the complete packet
	uint8_t pkt_cplt[PKT_RAWSIZE];

	// Store the last readHead, we need this for packet reconstruction if bytes got lost
	uint8_t old_head = hxbee->pkt_DMAHead;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	7c1b      	ldrb	r3, [r3, #16]
 80158ec:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	// Find the delimeter
	uint8_t found_delim = 0;
 80158f0:	2300      	movs	r3, #0
 80158f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 80158f6:	2300      	movs	r3, #0
 80158f8:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80158fc:	e027      	b.n	801594e <XBEE_RX_DMACallback+0x9e>
		uint8_t packet_ptr = (circular_ptr + hxbee->pkt_DMAHead) % PKT_RAWSIZE;
 80158fe:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8015902:	687a      	ldr	r2, [r7, #4]
 8015904:	7c12      	ldrb	r2, [r2, #16]
 8015906:	441a      	add	r2, r3
 8015908:	4b45      	ldr	r3, [pc, #276]	@ (8015a20 <XBEE_RX_DMACallback+0x170>)
 801590a:	fb83 1302 	smull	r1, r3, r3, r2
 801590e:	1159      	asrs	r1, r3, #5
 8015910:	17d3      	asrs	r3, r2, #31
 8015912:	1ac9      	subs	r1, r1, r3
 8015914:	460b      	mov	r3, r1
 8015916:	011b      	lsls	r3, r3, #4
 8015918:	440b      	add	r3, r1
 801591a:	009b      	lsls	r3, r3, #2
 801591c:	1ad1      	subs	r1, r2, r3
 801591e:	460b      	mov	r3, r1
 8015920:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		if (hxbee->pkt_bufDMA[packet_ptr] == PKT_DELIMETER) {
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	689a      	ldr	r2, [r3, #8]
 8015928:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801592c:	4413      	add	r3, r2
 801592e:	781b      	ldrb	r3, [r3, #0]
 8015930:	2baa      	cmp	r3, #170	@ 0xaa
 8015932:	d107      	bne.n	8015944 <XBEE_RX_DMACallback+0x94>
			found_delim = 1;					// Update flag
 8015934:	2301      	movs	r3, #1
 8015936:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			hxbee->pkt_DMAHead = packet_ptr;	// Move the readHead
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8015940:	741a      	strb	r2, [r3, #16]
			break;
 8015942:	e008      	b.n	8015956 <XBEE_RX_DMACallback+0xa6>
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 8015944:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8015948:	3301      	adds	r3, #1
 801594a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 801594e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8015952:	2b43      	cmp	r3, #67	@ 0x43
 8015954:	d9d3      	bls.n	80158fe <XBEE_RX_DMACallback+0x4e>
		}
	}

	// Couldn't find the delimeter, this packet is FUBAR, discard the whole thing
	if (!found_delim) return 2;
 8015956:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801595a:	2b00      	cmp	r3, #0
 801595c:	d101      	bne.n	8015962 <XBEE_RX_DMACallback+0xb2>
 801595e:	2302      	movs	r3, #2
 8015960:	e05a      	b.n	8015a18 <XBEE_RX_DMACallback+0x168>

	// Copy the partial packet contents into the completed packet buffer
	memcpy(pkt_cplt, hxbee->pkt_bufPart, PKT_RAWSIZE);
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	68da      	ldr	r2, [r3, #12]
 8015966:	f107 030c 	add.w	r3, r7, #12
 801596a:	4611      	mov	r1, r2
 801596c:	2244      	movs	r2, #68	@ 0x44
 801596e:	4618      	mov	r0, r3
 8015970:	f003 fc5f 	bl	8019232 <memcpy>

	// Copy the new packet contents into the partial packet buffer
	memcpy(hxbee->pkt_bufPart, hxbee->pkt_bufDMA + hxbee->pkt_DMAHead, PKT_RAWSIZE - hxbee->pkt_DMAHead);
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	68d8      	ldr	r0, [r3, #12]
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	689b      	ldr	r3, [r3, #8]
 801597c:	687a      	ldr	r2, [r7, #4]
 801597e:	7c12      	ldrb	r2, [r2, #16]
 8015980:	1899      	adds	r1, r3, r2
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	7c1b      	ldrb	r3, [r3, #16]
 8015986:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 801598a:	461a      	mov	r2, r3
 801598c:	f003 fc51 	bl	8019232 <memcpy>

	// finish the old packet
	// Account for dropped byte underflow
	// TODO: We can actually correct this instead of just giving up
	if (old_head < hxbee->pkt_DMAHead) {
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	7c1b      	ldrb	r3, [r3, #16]
 8015994:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8015998:	429a      	cmp	r2, r3
 801599a:	d201      	bcs.n	80159a0 <XBEE_RX_DMACallback+0xf0>
		return 2;
 801599c:	2302      	movs	r3, #2
 801599e:	e03b      	b.n	8015a18 <XBEE_RX_DMACallback+0x168>
	}

	uint16_t head_slip = old_head - hxbee->pkt_DMAHead;	// How many bytes were dropped
 80159a0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80159a4:	b29b      	uxth	r3, r3
 80159a6:	687a      	ldr	r2, [r7, #4]
 80159a8:	7c12      	ldrb	r2, [r2, #16]
 80159aa:	1a9b      	subs	r3, r3, r2
 80159ac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	memset(pkt_cplt + (PKT_RAWSIZE - old_head), 0x00, head_slip); 									 // Zero dropped bytes
 80159b0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80159b4:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 80159b8:	461a      	mov	r2, r3
 80159ba:	f107 030c 	add.w	r3, r7, #12
 80159be:	4413      	add	r3, r2
 80159c0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80159c4:	2100      	movs	r1, #0
 80159c6:	4618      	mov	r0, r3
 80159c8:	f003 fba3 	bl	8019112 <memset>
	memcpy(pkt_cplt + (PKT_RAWSIZE - old_head) + head_slip, hxbee->pkt_bufDMA, hxbee->pkt_DMAHead); // Fill in missing bytes
 80159cc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80159d0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80159d4:	1ad3      	subs	r3, r2, r3
 80159d6:	3344      	adds	r3, #68	@ 0x44
 80159d8:	f107 020c 	add.w	r2, r7, #12
 80159dc:	18d0      	adds	r0, r2, r3
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	6899      	ldr	r1, [r3, #8]
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	7c1b      	ldrb	r3, [r3, #16]
 80159e6:	461a      	mov	r2, r3
 80159e8:	f003 fc23 	bl	8019232 <memcpy>
	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate

	// TODO: CHECKSUM

	// If everything went well, increment the index and move the data into the RX buffer
	hxbee->pktRx_idxPush = pkt_idx;
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80159f2:	765a      	strb	r2, [r3, #25]
	memcpy(hxbee->pktRx_mem + hxbee->pktRx_idxPush*PKT_RAWSIZE, pkt_cplt, PKT_RAWSIZE);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	695a      	ldr	r2, [r3, #20]
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	7e5b      	ldrb	r3, [r3, #25]
 80159fc:	4619      	mov	r1, r3
 80159fe:	460b      	mov	r3, r1
 8015a00:	011b      	lsls	r3, r3, #4
 8015a02:	440b      	add	r3, r1
 8015a04:	009b      	lsls	r3, r3, #2
 8015a06:	4413      	add	r3, r2
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f107 030c 	add.w	r3, r7, #12
 8015a0e:	2244      	movs	r2, #68	@ 0x44
 8015a10:	4619      	mov	r1, r3
 8015a12:	f003 fc0e 	bl	8019232 <memcpy>

	return 0;
 8015a16:	2300      	movs	r3, #0
}
 8015a18:	4618      	mov	r0, r3
 8015a1a:	3758      	adds	r7, #88	@ 0x58
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bd80      	pop	{r7, pc}
 8015a20:	78787879 	.word	0x78787879

08015a24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b084      	sub	sp, #16
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
 8015a2c:	460b      	mov	r3, r1
 8015a2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015a30:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8015a34:	f002 fd18 	bl	8018468 <USBD_static_malloc>
 8015a38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d109      	bne.n	8015a54 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	32b0      	adds	r2, #176	@ 0xb0
 8015a4a:	2100      	movs	r1, #0
 8015a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015a50:	2302      	movs	r3, #2
 8015a52:	e0d4      	b.n	8015bfe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015a54:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8015a58:	2100      	movs	r1, #0
 8015a5a:	68f8      	ldr	r0, [r7, #12]
 8015a5c:	f003 fb59 	bl	8019112 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	32b0      	adds	r2, #176	@ 0xb0
 8015a6a:	68f9      	ldr	r1, [r7, #12]
 8015a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	32b0      	adds	r2, #176	@ 0xb0
 8015a7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	7c1b      	ldrb	r3, [r3, #16]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d138      	bne.n	8015afe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015a8c:	4b5e      	ldr	r3, [pc, #376]	@ (8015c08 <USBD_CDC_Init+0x1e4>)
 8015a8e:	7819      	ldrb	r1, [r3, #0]
 8015a90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015a94:	2202      	movs	r2, #2
 8015a96:	6878      	ldr	r0, [r7, #4]
 8015a98:	f002 fbc3 	bl	8018222 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015a9c:	4b5a      	ldr	r3, [pc, #360]	@ (8015c08 <USBD_CDC_Init+0x1e4>)
 8015a9e:	781b      	ldrb	r3, [r3, #0]
 8015aa0:	f003 020f 	and.w	r2, r3, #15
 8015aa4:	6879      	ldr	r1, [r7, #4]
 8015aa6:	4613      	mov	r3, r2
 8015aa8:	009b      	lsls	r3, r3, #2
 8015aaa:	4413      	add	r3, r2
 8015aac:	009b      	lsls	r3, r3, #2
 8015aae:	440b      	add	r3, r1
 8015ab0:	3324      	adds	r3, #36	@ 0x24
 8015ab2:	2201      	movs	r2, #1
 8015ab4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015ab6:	4b55      	ldr	r3, [pc, #340]	@ (8015c0c <USBD_CDC_Init+0x1e8>)
 8015ab8:	7819      	ldrb	r1, [r3, #0]
 8015aba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015abe:	2202      	movs	r2, #2
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	f002 fbae 	bl	8018222 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015ac6:	4b51      	ldr	r3, [pc, #324]	@ (8015c0c <USBD_CDC_Init+0x1e8>)
 8015ac8:	781b      	ldrb	r3, [r3, #0]
 8015aca:	f003 020f 	and.w	r2, r3, #15
 8015ace:	6879      	ldr	r1, [r7, #4]
 8015ad0:	4613      	mov	r3, r2
 8015ad2:	009b      	lsls	r3, r3, #2
 8015ad4:	4413      	add	r3, r2
 8015ad6:	009b      	lsls	r3, r3, #2
 8015ad8:	440b      	add	r3, r1
 8015ada:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015ade:	2201      	movs	r2, #1
 8015ae0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8015c10 <USBD_CDC_Init+0x1ec>)
 8015ae4:	781b      	ldrb	r3, [r3, #0]
 8015ae6:	f003 020f 	and.w	r2, r3, #15
 8015aea:	6879      	ldr	r1, [r7, #4]
 8015aec:	4613      	mov	r3, r2
 8015aee:	009b      	lsls	r3, r3, #2
 8015af0:	4413      	add	r3, r2
 8015af2:	009b      	lsls	r3, r3, #2
 8015af4:	440b      	add	r3, r1
 8015af6:	3326      	adds	r3, #38	@ 0x26
 8015af8:	2210      	movs	r2, #16
 8015afa:	801a      	strh	r2, [r3, #0]
 8015afc:	e035      	b.n	8015b6a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015afe:	4b42      	ldr	r3, [pc, #264]	@ (8015c08 <USBD_CDC_Init+0x1e4>)
 8015b00:	7819      	ldrb	r1, [r3, #0]
 8015b02:	2340      	movs	r3, #64	@ 0x40
 8015b04:	2202      	movs	r2, #2
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f002 fb8b 	bl	8018222 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015b0c:	4b3e      	ldr	r3, [pc, #248]	@ (8015c08 <USBD_CDC_Init+0x1e4>)
 8015b0e:	781b      	ldrb	r3, [r3, #0]
 8015b10:	f003 020f 	and.w	r2, r3, #15
 8015b14:	6879      	ldr	r1, [r7, #4]
 8015b16:	4613      	mov	r3, r2
 8015b18:	009b      	lsls	r3, r3, #2
 8015b1a:	4413      	add	r3, r2
 8015b1c:	009b      	lsls	r3, r3, #2
 8015b1e:	440b      	add	r3, r1
 8015b20:	3324      	adds	r3, #36	@ 0x24
 8015b22:	2201      	movs	r2, #1
 8015b24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015b26:	4b39      	ldr	r3, [pc, #228]	@ (8015c0c <USBD_CDC_Init+0x1e8>)
 8015b28:	7819      	ldrb	r1, [r3, #0]
 8015b2a:	2340      	movs	r3, #64	@ 0x40
 8015b2c:	2202      	movs	r2, #2
 8015b2e:	6878      	ldr	r0, [r7, #4]
 8015b30:	f002 fb77 	bl	8018222 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015b34:	4b35      	ldr	r3, [pc, #212]	@ (8015c0c <USBD_CDC_Init+0x1e8>)
 8015b36:	781b      	ldrb	r3, [r3, #0]
 8015b38:	f003 020f 	and.w	r2, r3, #15
 8015b3c:	6879      	ldr	r1, [r7, #4]
 8015b3e:	4613      	mov	r3, r2
 8015b40:	009b      	lsls	r3, r3, #2
 8015b42:	4413      	add	r3, r2
 8015b44:	009b      	lsls	r3, r3, #2
 8015b46:	440b      	add	r3, r1
 8015b48:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015b4c:	2201      	movs	r2, #1
 8015b4e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015b50:	4b2f      	ldr	r3, [pc, #188]	@ (8015c10 <USBD_CDC_Init+0x1ec>)
 8015b52:	781b      	ldrb	r3, [r3, #0]
 8015b54:	f003 020f 	and.w	r2, r3, #15
 8015b58:	6879      	ldr	r1, [r7, #4]
 8015b5a:	4613      	mov	r3, r2
 8015b5c:	009b      	lsls	r3, r3, #2
 8015b5e:	4413      	add	r3, r2
 8015b60:	009b      	lsls	r3, r3, #2
 8015b62:	440b      	add	r3, r1
 8015b64:	3326      	adds	r3, #38	@ 0x26
 8015b66:	2210      	movs	r2, #16
 8015b68:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015b6a:	4b29      	ldr	r3, [pc, #164]	@ (8015c10 <USBD_CDC_Init+0x1ec>)
 8015b6c:	7819      	ldrb	r1, [r3, #0]
 8015b6e:	2308      	movs	r3, #8
 8015b70:	2203      	movs	r2, #3
 8015b72:	6878      	ldr	r0, [r7, #4]
 8015b74:	f002 fb55 	bl	8018222 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015b78:	4b25      	ldr	r3, [pc, #148]	@ (8015c10 <USBD_CDC_Init+0x1ec>)
 8015b7a:	781b      	ldrb	r3, [r3, #0]
 8015b7c:	f003 020f 	and.w	r2, r3, #15
 8015b80:	6879      	ldr	r1, [r7, #4]
 8015b82:	4613      	mov	r3, r2
 8015b84:	009b      	lsls	r3, r3, #2
 8015b86:	4413      	add	r3, r2
 8015b88:	009b      	lsls	r3, r3, #2
 8015b8a:	440b      	add	r3, r1
 8015b8c:	3324      	adds	r3, #36	@ 0x24
 8015b8e:	2201      	movs	r2, #1
 8015b90:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	2200      	movs	r2, #0
 8015b96:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015ba0:	687a      	ldr	r2, [r7, #4]
 8015ba2:	33b0      	adds	r3, #176	@ 0xb0
 8015ba4:	009b      	lsls	r3, r3, #2
 8015ba6:	4413      	add	r3, r2
 8015ba8:	685b      	ldr	r3, [r3, #4]
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	2200      	movs	r2, #0
 8015bba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d101      	bne.n	8015bcc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015bc8:	2302      	movs	r3, #2
 8015bca:	e018      	b.n	8015bfe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	7c1b      	ldrb	r3, [r3, #16]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d10a      	bne.n	8015bea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8015c0c <USBD_CDC_Init+0x1e8>)
 8015bd6:	7819      	ldrb	r1, [r3, #0]
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015bde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015be2:	6878      	ldr	r0, [r7, #4]
 8015be4:	f002 fc0c 	bl	8018400 <USBD_LL_PrepareReceive>
 8015be8:	e008      	b.n	8015bfc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015bea:	4b08      	ldr	r3, [pc, #32]	@ (8015c0c <USBD_CDC_Init+0x1e8>)
 8015bec:	7819      	ldrb	r1, [r3, #0]
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015bf4:	2340      	movs	r3, #64	@ 0x40
 8015bf6:	6878      	ldr	r0, [r7, #4]
 8015bf8:	f002 fc02 	bl	8018400 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015bfc:	2300      	movs	r3, #0
}
 8015bfe:	4618      	mov	r0, r3
 8015c00:	3710      	adds	r7, #16
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
 8015c06:	bf00      	nop
 8015c08:	240000af 	.word	0x240000af
 8015c0c:	240000b0 	.word	0x240000b0
 8015c10:	240000b1 	.word	0x240000b1

08015c14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b082      	sub	sp, #8
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
 8015c1c:	460b      	mov	r3, r1
 8015c1e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015c20:	4b3a      	ldr	r3, [pc, #232]	@ (8015d0c <USBD_CDC_DeInit+0xf8>)
 8015c22:	781b      	ldrb	r3, [r3, #0]
 8015c24:	4619      	mov	r1, r3
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f002 fb21 	bl	801826e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015c2c:	4b37      	ldr	r3, [pc, #220]	@ (8015d0c <USBD_CDC_DeInit+0xf8>)
 8015c2e:	781b      	ldrb	r3, [r3, #0]
 8015c30:	f003 020f 	and.w	r2, r3, #15
 8015c34:	6879      	ldr	r1, [r7, #4]
 8015c36:	4613      	mov	r3, r2
 8015c38:	009b      	lsls	r3, r3, #2
 8015c3a:	4413      	add	r3, r2
 8015c3c:	009b      	lsls	r3, r3, #2
 8015c3e:	440b      	add	r3, r1
 8015c40:	3324      	adds	r3, #36	@ 0x24
 8015c42:	2200      	movs	r2, #0
 8015c44:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015c46:	4b32      	ldr	r3, [pc, #200]	@ (8015d10 <USBD_CDC_DeInit+0xfc>)
 8015c48:	781b      	ldrb	r3, [r3, #0]
 8015c4a:	4619      	mov	r1, r3
 8015c4c:	6878      	ldr	r0, [r7, #4]
 8015c4e:	f002 fb0e 	bl	801826e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015c52:	4b2f      	ldr	r3, [pc, #188]	@ (8015d10 <USBD_CDC_DeInit+0xfc>)
 8015c54:	781b      	ldrb	r3, [r3, #0]
 8015c56:	f003 020f 	and.w	r2, r3, #15
 8015c5a:	6879      	ldr	r1, [r7, #4]
 8015c5c:	4613      	mov	r3, r2
 8015c5e:	009b      	lsls	r3, r3, #2
 8015c60:	4413      	add	r3, r2
 8015c62:	009b      	lsls	r3, r3, #2
 8015c64:	440b      	add	r3, r1
 8015c66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015c6e:	4b29      	ldr	r3, [pc, #164]	@ (8015d14 <USBD_CDC_DeInit+0x100>)
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	4619      	mov	r1, r3
 8015c74:	6878      	ldr	r0, [r7, #4]
 8015c76:	f002 fafa 	bl	801826e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015c7a:	4b26      	ldr	r3, [pc, #152]	@ (8015d14 <USBD_CDC_DeInit+0x100>)
 8015c7c:	781b      	ldrb	r3, [r3, #0]
 8015c7e:	f003 020f 	and.w	r2, r3, #15
 8015c82:	6879      	ldr	r1, [r7, #4]
 8015c84:	4613      	mov	r3, r2
 8015c86:	009b      	lsls	r3, r3, #2
 8015c88:	4413      	add	r3, r2
 8015c8a:	009b      	lsls	r3, r3, #2
 8015c8c:	440b      	add	r3, r1
 8015c8e:	3324      	adds	r3, #36	@ 0x24
 8015c90:	2200      	movs	r2, #0
 8015c92:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015c94:	4b1f      	ldr	r3, [pc, #124]	@ (8015d14 <USBD_CDC_DeInit+0x100>)
 8015c96:	781b      	ldrb	r3, [r3, #0]
 8015c98:	f003 020f 	and.w	r2, r3, #15
 8015c9c:	6879      	ldr	r1, [r7, #4]
 8015c9e:	4613      	mov	r3, r2
 8015ca0:	009b      	lsls	r3, r3, #2
 8015ca2:	4413      	add	r3, r2
 8015ca4:	009b      	lsls	r3, r3, #2
 8015ca6:	440b      	add	r3, r1
 8015ca8:	3326      	adds	r3, #38	@ 0x26
 8015caa:	2200      	movs	r2, #0
 8015cac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	32b0      	adds	r2, #176	@ 0xb0
 8015cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d01f      	beq.n	8015d00 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015cc6:	687a      	ldr	r2, [r7, #4]
 8015cc8:	33b0      	adds	r3, #176	@ 0xb0
 8015cca:	009b      	lsls	r3, r3, #2
 8015ccc:	4413      	add	r3, r2
 8015cce:	685b      	ldr	r3, [r3, #4]
 8015cd0:	685b      	ldr	r3, [r3, #4]
 8015cd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	32b0      	adds	r2, #176	@ 0xb0
 8015cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	f002 fbce 	bl	8018484 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	32b0      	adds	r2, #176	@ 0xb0
 8015cf2:	2100      	movs	r1, #0
 8015cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015d00:	2300      	movs	r3, #0
}
 8015d02:	4618      	mov	r0, r3
 8015d04:	3708      	adds	r7, #8
 8015d06:	46bd      	mov	sp, r7
 8015d08:	bd80      	pop	{r7, pc}
 8015d0a:	bf00      	nop
 8015d0c:	240000af 	.word	0x240000af
 8015d10:	240000b0 	.word	0x240000b0
 8015d14:	240000b1 	.word	0x240000b1

08015d18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b086      	sub	sp, #24
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
 8015d20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	32b0      	adds	r2, #176	@ 0xb0
 8015d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015d32:	2300      	movs	r3, #0
 8015d34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015d36:	2300      	movs	r3, #0
 8015d38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015d3e:	693b      	ldr	r3, [r7, #16]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d101      	bne.n	8015d48 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015d44:	2303      	movs	r3, #3
 8015d46:	e0bf      	b.n	8015ec8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	781b      	ldrb	r3, [r3, #0]
 8015d4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d050      	beq.n	8015df6 <USBD_CDC_Setup+0xde>
 8015d54:	2b20      	cmp	r3, #32
 8015d56:	f040 80af 	bne.w	8015eb8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015d5a:	683b      	ldr	r3, [r7, #0]
 8015d5c:	88db      	ldrh	r3, [r3, #6]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d03a      	beq.n	8015dd8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015d62:	683b      	ldr	r3, [r7, #0]
 8015d64:	781b      	ldrb	r3, [r3, #0]
 8015d66:	b25b      	sxtb	r3, r3
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	da1b      	bge.n	8015da4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d72:	687a      	ldr	r2, [r7, #4]
 8015d74:	33b0      	adds	r3, #176	@ 0xb0
 8015d76:	009b      	lsls	r3, r3, #2
 8015d78:	4413      	add	r3, r2
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	689b      	ldr	r3, [r3, #8]
 8015d7e:	683a      	ldr	r2, [r7, #0]
 8015d80:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015d82:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015d84:	683a      	ldr	r2, [r7, #0]
 8015d86:	88d2      	ldrh	r2, [r2, #6]
 8015d88:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015d8a:	683b      	ldr	r3, [r7, #0]
 8015d8c:	88db      	ldrh	r3, [r3, #6]
 8015d8e:	2b07      	cmp	r3, #7
 8015d90:	bf28      	it	cs
 8015d92:	2307      	movcs	r3, #7
 8015d94:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015d96:	693b      	ldr	r3, [r7, #16]
 8015d98:	89fa      	ldrh	r2, [r7, #14]
 8015d9a:	4619      	mov	r1, r3
 8015d9c:	6878      	ldr	r0, [r7, #4]
 8015d9e:	f001 fdbd 	bl	801791c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015da2:	e090      	b.n	8015ec6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015da4:	683b      	ldr	r3, [r7, #0]
 8015da6:	785a      	ldrb	r2, [r3, #1]
 8015da8:	693b      	ldr	r3, [r7, #16]
 8015daa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015dae:	683b      	ldr	r3, [r7, #0]
 8015db0:	88db      	ldrh	r3, [r3, #6]
 8015db2:	2b3f      	cmp	r3, #63	@ 0x3f
 8015db4:	d803      	bhi.n	8015dbe <USBD_CDC_Setup+0xa6>
 8015db6:	683b      	ldr	r3, [r7, #0]
 8015db8:	88db      	ldrh	r3, [r3, #6]
 8015dba:	b2da      	uxtb	r2, r3
 8015dbc:	e000      	b.n	8015dc0 <USBD_CDC_Setup+0xa8>
 8015dbe:	2240      	movs	r2, #64	@ 0x40
 8015dc0:	693b      	ldr	r3, [r7, #16]
 8015dc2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015dc6:	6939      	ldr	r1, [r7, #16]
 8015dc8:	693b      	ldr	r3, [r7, #16]
 8015dca:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8015dce:	461a      	mov	r2, r3
 8015dd0:	6878      	ldr	r0, [r7, #4]
 8015dd2:	f001 fdcf 	bl	8017974 <USBD_CtlPrepareRx>
      break;
 8015dd6:	e076      	b.n	8015ec6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015dde:	687a      	ldr	r2, [r7, #4]
 8015de0:	33b0      	adds	r3, #176	@ 0xb0
 8015de2:	009b      	lsls	r3, r3, #2
 8015de4:	4413      	add	r3, r2
 8015de6:	685b      	ldr	r3, [r3, #4]
 8015de8:	689b      	ldr	r3, [r3, #8]
 8015dea:	683a      	ldr	r2, [r7, #0]
 8015dec:	7850      	ldrb	r0, [r2, #1]
 8015dee:	2200      	movs	r2, #0
 8015df0:	6839      	ldr	r1, [r7, #0]
 8015df2:	4798      	blx	r3
      break;
 8015df4:	e067      	b.n	8015ec6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015df6:	683b      	ldr	r3, [r7, #0]
 8015df8:	785b      	ldrb	r3, [r3, #1]
 8015dfa:	2b0b      	cmp	r3, #11
 8015dfc:	d851      	bhi.n	8015ea2 <USBD_CDC_Setup+0x18a>
 8015dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8015e04 <USBD_CDC_Setup+0xec>)
 8015e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e04:	08015e35 	.word	0x08015e35
 8015e08:	08015eb1 	.word	0x08015eb1
 8015e0c:	08015ea3 	.word	0x08015ea3
 8015e10:	08015ea3 	.word	0x08015ea3
 8015e14:	08015ea3 	.word	0x08015ea3
 8015e18:	08015ea3 	.word	0x08015ea3
 8015e1c:	08015ea3 	.word	0x08015ea3
 8015e20:	08015ea3 	.word	0x08015ea3
 8015e24:	08015ea3 	.word	0x08015ea3
 8015e28:	08015ea3 	.word	0x08015ea3
 8015e2c:	08015e5f 	.word	0x08015e5f
 8015e30:	08015e89 	.word	0x08015e89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e3a:	b2db      	uxtb	r3, r3
 8015e3c:	2b03      	cmp	r3, #3
 8015e3e:	d107      	bne.n	8015e50 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015e40:	f107 030a 	add.w	r3, r7, #10
 8015e44:	2202      	movs	r2, #2
 8015e46:	4619      	mov	r1, r3
 8015e48:	6878      	ldr	r0, [r7, #4]
 8015e4a:	f001 fd67 	bl	801791c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e4e:	e032      	b.n	8015eb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015e50:	6839      	ldr	r1, [r7, #0]
 8015e52:	6878      	ldr	r0, [r7, #4]
 8015e54:	f001 fce5 	bl	8017822 <USBD_CtlError>
            ret = USBD_FAIL;
 8015e58:	2303      	movs	r3, #3
 8015e5a:	75fb      	strb	r3, [r7, #23]
          break;
 8015e5c:	e02b      	b.n	8015eb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e64:	b2db      	uxtb	r3, r3
 8015e66:	2b03      	cmp	r3, #3
 8015e68:	d107      	bne.n	8015e7a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015e6a:	f107 030d 	add.w	r3, r7, #13
 8015e6e:	2201      	movs	r2, #1
 8015e70:	4619      	mov	r1, r3
 8015e72:	6878      	ldr	r0, [r7, #4]
 8015e74:	f001 fd52 	bl	801791c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e78:	e01d      	b.n	8015eb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015e7a:	6839      	ldr	r1, [r7, #0]
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f001 fcd0 	bl	8017822 <USBD_CtlError>
            ret = USBD_FAIL;
 8015e82:	2303      	movs	r3, #3
 8015e84:	75fb      	strb	r3, [r7, #23]
          break;
 8015e86:	e016      	b.n	8015eb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e8e:	b2db      	uxtb	r3, r3
 8015e90:	2b03      	cmp	r3, #3
 8015e92:	d00f      	beq.n	8015eb4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015e94:	6839      	ldr	r1, [r7, #0]
 8015e96:	6878      	ldr	r0, [r7, #4]
 8015e98:	f001 fcc3 	bl	8017822 <USBD_CtlError>
            ret = USBD_FAIL;
 8015e9c:	2303      	movs	r3, #3
 8015e9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015ea0:	e008      	b.n	8015eb4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015ea2:	6839      	ldr	r1, [r7, #0]
 8015ea4:	6878      	ldr	r0, [r7, #4]
 8015ea6:	f001 fcbc 	bl	8017822 <USBD_CtlError>
          ret = USBD_FAIL;
 8015eaa:	2303      	movs	r3, #3
 8015eac:	75fb      	strb	r3, [r7, #23]
          break;
 8015eae:	e002      	b.n	8015eb6 <USBD_CDC_Setup+0x19e>
          break;
 8015eb0:	bf00      	nop
 8015eb2:	e008      	b.n	8015ec6 <USBD_CDC_Setup+0x1ae>
          break;
 8015eb4:	bf00      	nop
      }
      break;
 8015eb6:	e006      	b.n	8015ec6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015eb8:	6839      	ldr	r1, [r7, #0]
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	f001 fcb1 	bl	8017822 <USBD_CtlError>
      ret = USBD_FAIL;
 8015ec0:	2303      	movs	r3, #3
 8015ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8015ec4:	bf00      	nop
  }

  return (uint8_t)ret;
 8015ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ec8:	4618      	mov	r0, r3
 8015eca:	3718      	adds	r7, #24
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd80      	pop	{r7, pc}

08015ed0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b084      	sub	sp, #16
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
 8015ed8:	460b      	mov	r3, r1
 8015eda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015ee2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	32b0      	adds	r2, #176	@ 0xb0
 8015eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d101      	bne.n	8015efa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015ef6:	2303      	movs	r3, #3
 8015ef8:	e065      	b.n	8015fc6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	32b0      	adds	r2, #176	@ 0xb0
 8015f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015f0a:	78fb      	ldrb	r3, [r7, #3]
 8015f0c:	f003 020f 	and.w	r2, r3, #15
 8015f10:	6879      	ldr	r1, [r7, #4]
 8015f12:	4613      	mov	r3, r2
 8015f14:	009b      	lsls	r3, r3, #2
 8015f16:	4413      	add	r3, r2
 8015f18:	009b      	lsls	r3, r3, #2
 8015f1a:	440b      	add	r3, r1
 8015f1c:	3318      	adds	r3, #24
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d02f      	beq.n	8015f84 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015f24:	78fb      	ldrb	r3, [r7, #3]
 8015f26:	f003 020f 	and.w	r2, r3, #15
 8015f2a:	6879      	ldr	r1, [r7, #4]
 8015f2c:	4613      	mov	r3, r2
 8015f2e:	009b      	lsls	r3, r3, #2
 8015f30:	4413      	add	r3, r2
 8015f32:	009b      	lsls	r3, r3, #2
 8015f34:	440b      	add	r3, r1
 8015f36:	3318      	adds	r3, #24
 8015f38:	681a      	ldr	r2, [r3, #0]
 8015f3a:	78fb      	ldrb	r3, [r7, #3]
 8015f3c:	f003 010f 	and.w	r1, r3, #15
 8015f40:	68f8      	ldr	r0, [r7, #12]
 8015f42:	460b      	mov	r3, r1
 8015f44:	00db      	lsls	r3, r3, #3
 8015f46:	440b      	add	r3, r1
 8015f48:	009b      	lsls	r3, r3, #2
 8015f4a:	4403      	add	r3, r0
 8015f4c:	331c      	adds	r3, #28
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	fbb2 f1f3 	udiv	r1, r2, r3
 8015f54:	fb01 f303 	mul.w	r3, r1, r3
 8015f58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d112      	bne.n	8015f84 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015f5e:	78fb      	ldrb	r3, [r7, #3]
 8015f60:	f003 020f 	and.w	r2, r3, #15
 8015f64:	6879      	ldr	r1, [r7, #4]
 8015f66:	4613      	mov	r3, r2
 8015f68:	009b      	lsls	r3, r3, #2
 8015f6a:	4413      	add	r3, r2
 8015f6c:	009b      	lsls	r3, r3, #2
 8015f6e:	440b      	add	r3, r1
 8015f70:	3318      	adds	r3, #24
 8015f72:	2200      	movs	r2, #0
 8015f74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015f76:	78f9      	ldrb	r1, [r7, #3]
 8015f78:	2300      	movs	r3, #0
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	6878      	ldr	r0, [r7, #4]
 8015f7e:	f002 fa1e 	bl	80183be <USBD_LL_Transmit>
 8015f82:	e01f      	b.n	8015fc4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015f84:	68bb      	ldr	r3, [r7, #8]
 8015f86:	2200      	movs	r2, #0
 8015f88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015f92:	687a      	ldr	r2, [r7, #4]
 8015f94:	33b0      	adds	r3, #176	@ 0xb0
 8015f96:	009b      	lsls	r3, r3, #2
 8015f98:	4413      	add	r3, r2
 8015f9a:	685b      	ldr	r3, [r3, #4]
 8015f9c:	691b      	ldr	r3, [r3, #16]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d010      	beq.n	8015fc4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	33b0      	adds	r3, #176	@ 0xb0
 8015fac:	009b      	lsls	r3, r3, #2
 8015fae:	4413      	add	r3, r2
 8015fb0:	685b      	ldr	r3, [r3, #4]
 8015fb2:	691b      	ldr	r3, [r3, #16]
 8015fb4:	68ba      	ldr	r2, [r7, #8]
 8015fb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8015fba:	68ba      	ldr	r2, [r7, #8]
 8015fbc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8015fc0:	78fa      	ldrb	r2, [r7, #3]
 8015fc2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015fc4:	2300      	movs	r3, #0
}
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	3710      	adds	r7, #16
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	bd80      	pop	{r7, pc}

08015fce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015fce:	b580      	push	{r7, lr}
 8015fd0:	b084      	sub	sp, #16
 8015fd2:	af00      	add	r7, sp, #0
 8015fd4:	6078      	str	r0, [r7, #4]
 8015fd6:	460b      	mov	r3, r1
 8015fd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	32b0      	adds	r2, #176	@ 0xb0
 8015fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fe8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	32b0      	adds	r2, #176	@ 0xb0
 8015ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d101      	bne.n	8016000 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015ffc:	2303      	movs	r3, #3
 8015ffe:	e01a      	b.n	8016036 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016000:	78fb      	ldrb	r3, [r7, #3]
 8016002:	4619      	mov	r1, r3
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	f002 fa1c 	bl	8018442 <USBD_LL_GetRxDataSize>
 801600a:	4602      	mov	r2, r0
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016018:	687a      	ldr	r2, [r7, #4]
 801601a:	33b0      	adds	r3, #176	@ 0xb0
 801601c:	009b      	lsls	r3, r3, #2
 801601e:	4413      	add	r3, r2
 8016020:	685b      	ldr	r3, [r3, #4]
 8016022:	68db      	ldr	r3, [r3, #12]
 8016024:	68fa      	ldr	r2, [r7, #12]
 8016026:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801602a:	68fa      	ldr	r2, [r7, #12]
 801602c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8016030:	4611      	mov	r1, r2
 8016032:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8016034:	2300      	movs	r3, #0
}
 8016036:	4618      	mov	r0, r3
 8016038:	3710      	adds	r7, #16
 801603a:	46bd      	mov	sp, r7
 801603c:	bd80      	pop	{r7, pc}

0801603e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801603e:	b580      	push	{r7, lr}
 8016040:	b084      	sub	sp, #16
 8016042:	af00      	add	r7, sp, #0
 8016044:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	32b0      	adds	r2, #176	@ 0xb0
 8016050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016054:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d101      	bne.n	8016060 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801605c:	2303      	movs	r3, #3
 801605e:	e024      	b.n	80160aa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016066:	687a      	ldr	r2, [r7, #4]
 8016068:	33b0      	adds	r3, #176	@ 0xb0
 801606a:	009b      	lsls	r3, r3, #2
 801606c:	4413      	add	r3, r2
 801606e:	685b      	ldr	r3, [r3, #4]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d019      	beq.n	80160a8 <USBD_CDC_EP0_RxReady+0x6a>
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801607a:	2bff      	cmp	r3, #255	@ 0xff
 801607c:	d014      	beq.n	80160a8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016084:	687a      	ldr	r2, [r7, #4]
 8016086:	33b0      	adds	r3, #176	@ 0xb0
 8016088:	009b      	lsls	r3, r3, #2
 801608a:	4413      	add	r3, r2
 801608c:	685b      	ldr	r3, [r3, #4]
 801608e:	689b      	ldr	r3, [r3, #8]
 8016090:	68fa      	ldr	r2, [r7, #12]
 8016092:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8016096:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8016098:	68fa      	ldr	r2, [r7, #12]
 801609a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801609e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	22ff      	movs	r2, #255	@ 0xff
 80160a4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80160a8:	2300      	movs	r3, #0
}
 80160aa:	4618      	mov	r0, r3
 80160ac:	3710      	adds	r7, #16
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bd80      	pop	{r7, pc}
	...

080160b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b086      	sub	sp, #24
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80160bc:	2182      	movs	r1, #130	@ 0x82
 80160be:	4818      	ldr	r0, [pc, #96]	@ (8016120 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80160c0:	f000 fd4f 	bl	8016b62 <USBD_GetEpDesc>
 80160c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80160c6:	2101      	movs	r1, #1
 80160c8:	4815      	ldr	r0, [pc, #84]	@ (8016120 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80160ca:	f000 fd4a 	bl	8016b62 <USBD_GetEpDesc>
 80160ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80160d0:	2181      	movs	r1, #129	@ 0x81
 80160d2:	4813      	ldr	r0, [pc, #76]	@ (8016120 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80160d4:	f000 fd45 	bl	8016b62 <USBD_GetEpDesc>
 80160d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80160da:	697b      	ldr	r3, [r7, #20]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d002      	beq.n	80160e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80160e0:	697b      	ldr	r3, [r7, #20]
 80160e2:	2210      	movs	r2, #16
 80160e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80160e6:	693b      	ldr	r3, [r7, #16]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d006      	beq.n	80160fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80160ec:	693b      	ldr	r3, [r7, #16]
 80160ee:	2200      	movs	r2, #0
 80160f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80160f4:	711a      	strb	r2, [r3, #4]
 80160f6:	2200      	movs	r2, #0
 80160f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d006      	beq.n	801610e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	2200      	movs	r2, #0
 8016104:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016108:	711a      	strb	r2, [r3, #4]
 801610a:	2200      	movs	r2, #0
 801610c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	2243      	movs	r2, #67	@ 0x43
 8016112:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016114:	4b02      	ldr	r3, [pc, #8]	@ (8016120 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8016116:	4618      	mov	r0, r3
 8016118:	3718      	adds	r7, #24
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}
 801611e:	bf00      	nop
 8016120:	2400006c 	.word	0x2400006c

08016124 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b086      	sub	sp, #24
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801612c:	2182      	movs	r1, #130	@ 0x82
 801612e:	4818      	ldr	r0, [pc, #96]	@ (8016190 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016130:	f000 fd17 	bl	8016b62 <USBD_GetEpDesc>
 8016134:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016136:	2101      	movs	r1, #1
 8016138:	4815      	ldr	r0, [pc, #84]	@ (8016190 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801613a:	f000 fd12 	bl	8016b62 <USBD_GetEpDesc>
 801613e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016140:	2181      	movs	r1, #129	@ 0x81
 8016142:	4813      	ldr	r0, [pc, #76]	@ (8016190 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016144:	f000 fd0d 	bl	8016b62 <USBD_GetEpDesc>
 8016148:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801614a:	697b      	ldr	r3, [r7, #20]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d002      	beq.n	8016156 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8016150:	697b      	ldr	r3, [r7, #20]
 8016152:	2210      	movs	r2, #16
 8016154:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016156:	693b      	ldr	r3, [r7, #16]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d006      	beq.n	801616a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801615c:	693b      	ldr	r3, [r7, #16]
 801615e:	2200      	movs	r2, #0
 8016160:	711a      	strb	r2, [r3, #4]
 8016162:	2200      	movs	r2, #0
 8016164:	f042 0202 	orr.w	r2, r2, #2
 8016168:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d006      	beq.n	801617e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	2200      	movs	r2, #0
 8016174:	711a      	strb	r2, [r3, #4]
 8016176:	2200      	movs	r2, #0
 8016178:	f042 0202 	orr.w	r2, r2, #2
 801617c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	2243      	movs	r2, #67	@ 0x43
 8016182:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016184:	4b02      	ldr	r3, [pc, #8]	@ (8016190 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8016186:	4618      	mov	r0, r3
 8016188:	3718      	adds	r7, #24
 801618a:	46bd      	mov	sp, r7
 801618c:	bd80      	pop	{r7, pc}
 801618e:	bf00      	nop
 8016190:	2400006c 	.word	0x2400006c

08016194 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b086      	sub	sp, #24
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801619c:	2182      	movs	r1, #130	@ 0x82
 801619e:	4818      	ldr	r0, [pc, #96]	@ (8016200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80161a0:	f000 fcdf 	bl	8016b62 <USBD_GetEpDesc>
 80161a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80161a6:	2101      	movs	r1, #1
 80161a8:	4815      	ldr	r0, [pc, #84]	@ (8016200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80161aa:	f000 fcda 	bl	8016b62 <USBD_GetEpDesc>
 80161ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80161b0:	2181      	movs	r1, #129	@ 0x81
 80161b2:	4813      	ldr	r0, [pc, #76]	@ (8016200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80161b4:	f000 fcd5 	bl	8016b62 <USBD_GetEpDesc>
 80161b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80161ba:	697b      	ldr	r3, [r7, #20]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d002      	beq.n	80161c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80161c0:	697b      	ldr	r3, [r7, #20]
 80161c2:	2210      	movs	r2, #16
 80161c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80161c6:	693b      	ldr	r3, [r7, #16]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d006      	beq.n	80161da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80161cc:	693b      	ldr	r3, [r7, #16]
 80161ce:	2200      	movs	r2, #0
 80161d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80161d4:	711a      	strb	r2, [r3, #4]
 80161d6:	2200      	movs	r2, #0
 80161d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d006      	beq.n	80161ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	2200      	movs	r2, #0
 80161e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80161e8:	711a      	strb	r2, [r3, #4]
 80161ea:	2200      	movs	r2, #0
 80161ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	2243      	movs	r2, #67	@ 0x43
 80161f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80161f4:	4b02      	ldr	r3, [pc, #8]	@ (8016200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80161f6:	4618      	mov	r0, r3
 80161f8:	3718      	adds	r7, #24
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd80      	pop	{r7, pc}
 80161fe:	bf00      	nop
 8016200:	2400006c 	.word	0x2400006c

08016204 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016204:	b480      	push	{r7}
 8016206:	b083      	sub	sp, #12
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	220a      	movs	r2, #10
 8016210:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016212:	4b03      	ldr	r3, [pc, #12]	@ (8016220 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016214:	4618      	mov	r0, r3
 8016216:	370c      	adds	r7, #12
 8016218:	46bd      	mov	sp, r7
 801621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621e:	4770      	bx	lr
 8016220:	24000028 	.word	0x24000028

08016224 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016224:	b480      	push	{r7}
 8016226:	b083      	sub	sp, #12
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
 801622c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801622e:	683b      	ldr	r3, [r7, #0]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d101      	bne.n	8016238 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016234:	2303      	movs	r3, #3
 8016236:	e009      	b.n	801624c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801623e:	687a      	ldr	r2, [r7, #4]
 8016240:	33b0      	adds	r3, #176	@ 0xb0
 8016242:	009b      	lsls	r3, r3, #2
 8016244:	4413      	add	r3, r2
 8016246:	683a      	ldr	r2, [r7, #0]
 8016248:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801624a:	2300      	movs	r3, #0
}
 801624c:	4618      	mov	r0, r3
 801624e:	370c      	adds	r7, #12
 8016250:	46bd      	mov	sp, r7
 8016252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016256:	4770      	bx	lr

08016258 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8016258:	b480      	push	{r7}
 801625a:	b087      	sub	sp, #28
 801625c:	af00      	add	r7, sp, #0
 801625e:	60f8      	str	r0, [r7, #12]
 8016260:	60b9      	str	r1, [r7, #8]
 8016262:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	32b0      	adds	r2, #176	@ 0xb0
 801626e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016272:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016274:	697b      	ldr	r3, [r7, #20]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d101      	bne.n	801627e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801627a:	2303      	movs	r3, #3
 801627c:	e008      	b.n	8016290 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801627e:	697b      	ldr	r3, [r7, #20]
 8016280:	68ba      	ldr	r2, [r7, #8]
 8016282:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8016286:	697b      	ldr	r3, [r7, #20]
 8016288:	687a      	ldr	r2, [r7, #4]
 801628a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801628e:	2300      	movs	r3, #0
}
 8016290:	4618      	mov	r0, r3
 8016292:	371c      	adds	r7, #28
 8016294:	46bd      	mov	sp, r7
 8016296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629a:	4770      	bx	lr

0801629c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801629c:	b480      	push	{r7}
 801629e:	b085      	sub	sp, #20
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
 80162a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	32b0      	adds	r2, #176	@ 0xb0
 80162b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d101      	bne.n	80162c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80162bc:	2303      	movs	r3, #3
 80162be:	e004      	b.n	80162ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	683a      	ldr	r2, [r7, #0]
 80162c4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80162c8:	2300      	movs	r3, #0
}
 80162ca:	4618      	mov	r0, r3
 80162cc:	3714      	adds	r7, #20
 80162ce:	46bd      	mov	sp, r7
 80162d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d4:	4770      	bx	lr
	...

080162d8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b084      	sub	sp, #16
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	32b0      	adds	r2, #176	@ 0xb0
 80162ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162ee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80162f0:	2301      	movs	r3, #1
 80162f2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80162f4:	68bb      	ldr	r3, [r7, #8]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d101      	bne.n	80162fe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80162fa:	2303      	movs	r3, #3
 80162fc:	e025      	b.n	801634a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80162fe:	68bb      	ldr	r3, [r7, #8]
 8016300:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016304:	2b00      	cmp	r3, #0
 8016306:	d11f      	bne.n	8016348 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8016308:	68bb      	ldr	r3, [r7, #8]
 801630a:	2201      	movs	r2, #1
 801630c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8016310:	4b10      	ldr	r3, [pc, #64]	@ (8016354 <USBD_CDC_TransmitPacket+0x7c>)
 8016312:	781b      	ldrb	r3, [r3, #0]
 8016314:	f003 020f 	and.w	r2, r3, #15
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801631e:	6878      	ldr	r0, [r7, #4]
 8016320:	4613      	mov	r3, r2
 8016322:	009b      	lsls	r3, r3, #2
 8016324:	4413      	add	r3, r2
 8016326:	009b      	lsls	r3, r3, #2
 8016328:	4403      	add	r3, r0
 801632a:	3318      	adds	r3, #24
 801632c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801632e:	4b09      	ldr	r3, [pc, #36]	@ (8016354 <USBD_CDC_TransmitPacket+0x7c>)
 8016330:	7819      	ldrb	r1, [r3, #0]
 8016332:	68bb      	ldr	r3, [r7, #8]
 8016334:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8016338:	68bb      	ldr	r3, [r7, #8]
 801633a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801633e:	6878      	ldr	r0, [r7, #4]
 8016340:	f002 f83d 	bl	80183be <USBD_LL_Transmit>

    ret = USBD_OK;
 8016344:	2300      	movs	r3, #0
 8016346:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8016348:	7bfb      	ldrb	r3, [r7, #15]
}
 801634a:	4618      	mov	r0, r3
 801634c:	3710      	adds	r7, #16
 801634e:	46bd      	mov	sp, r7
 8016350:	bd80      	pop	{r7, pc}
 8016352:	bf00      	nop
 8016354:	240000af 	.word	0x240000af

08016358 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b084      	sub	sp, #16
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	32b0      	adds	r2, #176	@ 0xb0
 801636a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801636e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	32b0      	adds	r2, #176	@ 0xb0
 801637a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d101      	bne.n	8016386 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8016382:	2303      	movs	r3, #3
 8016384:	e018      	b.n	80163b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	7c1b      	ldrb	r3, [r3, #16]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d10a      	bne.n	80163a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801638e:	4b0c      	ldr	r3, [pc, #48]	@ (80163c0 <USBD_CDC_ReceivePacket+0x68>)
 8016390:	7819      	ldrb	r1, [r3, #0]
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016398:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	f002 f82f 	bl	8018400 <USBD_LL_PrepareReceive>
 80163a2:	e008      	b.n	80163b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80163a4:	4b06      	ldr	r3, [pc, #24]	@ (80163c0 <USBD_CDC_ReceivePacket+0x68>)
 80163a6:	7819      	ldrb	r1, [r3, #0]
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80163ae:	2340      	movs	r3, #64	@ 0x40
 80163b0:	6878      	ldr	r0, [r7, #4]
 80163b2:	f002 f825 	bl	8018400 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80163b6:	2300      	movs	r3, #0
}
 80163b8:	4618      	mov	r0, r3
 80163ba:	3710      	adds	r7, #16
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd80      	pop	{r7, pc}
 80163c0:	240000b0 	.word	0x240000b0

080163c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b086      	sub	sp, #24
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	60f8      	str	r0, [r7, #12]
 80163cc:	60b9      	str	r1, [r7, #8]
 80163ce:	4613      	mov	r3, r2
 80163d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d101      	bne.n	80163dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80163d8:	2303      	movs	r3, #3
 80163da:	e01f      	b.n	801641c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	2200      	movs	r2, #0
 80163e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	2200      	movs	r2, #0
 80163e8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	2200      	movs	r2, #0
 80163f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80163f4:	68bb      	ldr	r3, [r7, #8]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d003      	beq.n	8016402 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	68ba      	ldr	r2, [r7, #8]
 80163fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	2201      	movs	r2, #1
 8016406:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	79fa      	ldrb	r2, [r7, #7]
 801640e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016410:	68f8      	ldr	r0, [r7, #12]
 8016412:	f001 fe9b 	bl	801814c <USBD_LL_Init>
 8016416:	4603      	mov	r3, r0
 8016418:	75fb      	strb	r3, [r7, #23]

  return ret;
 801641a:	7dfb      	ldrb	r3, [r7, #23]
}
 801641c:	4618      	mov	r0, r3
 801641e:	3718      	adds	r7, #24
 8016420:	46bd      	mov	sp, r7
 8016422:	bd80      	pop	{r7, pc}

08016424 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016424:	b580      	push	{r7, lr}
 8016426:	b084      	sub	sp, #16
 8016428:	af00      	add	r7, sp, #0
 801642a:	6078      	str	r0, [r7, #4]
 801642c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801642e:	2300      	movs	r3, #0
 8016430:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016432:	683b      	ldr	r3, [r7, #0]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d101      	bne.n	801643c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016438:	2303      	movs	r3, #3
 801643a:	e025      	b.n	8016488 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	683a      	ldr	r2, [r7, #0]
 8016440:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	32ae      	adds	r2, #174	@ 0xae
 801644e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016454:	2b00      	cmp	r3, #0
 8016456:	d00f      	beq.n	8016478 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	32ae      	adds	r2, #174	@ 0xae
 8016462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016468:	f107 020e 	add.w	r2, r7, #14
 801646c:	4610      	mov	r0, r2
 801646e:	4798      	blx	r3
 8016470:	4602      	mov	r2, r0
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801647e:	1c5a      	adds	r2, r3, #1
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8016486:	2300      	movs	r3, #0
}
 8016488:	4618      	mov	r0, r3
 801648a:	3710      	adds	r7, #16
 801648c:	46bd      	mov	sp, r7
 801648e:	bd80      	pop	{r7, pc}

08016490 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016490:	b580      	push	{r7, lr}
 8016492:	b082      	sub	sp, #8
 8016494:	af00      	add	r7, sp, #0
 8016496:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016498:	6878      	ldr	r0, [r7, #4]
 801649a:	f001 fea7 	bl	80181ec <USBD_LL_Start>
 801649e:	4603      	mov	r3, r0
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	3708      	adds	r7, #8
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bd80      	pop	{r7, pc}

080164a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80164a8:	b480      	push	{r7}
 80164aa:	b083      	sub	sp, #12
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80164b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80164b2:	4618      	mov	r0, r3
 80164b4:	370c      	adds	r7, #12
 80164b6:	46bd      	mov	sp, r7
 80164b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164bc:	4770      	bx	lr

080164be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80164be:	b580      	push	{r7, lr}
 80164c0:	b084      	sub	sp, #16
 80164c2:	af00      	add	r7, sp, #0
 80164c4:	6078      	str	r0, [r7, #4]
 80164c6:	460b      	mov	r3, r1
 80164c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80164ca:	2300      	movs	r3, #0
 80164cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d009      	beq.n	80164ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	78fa      	ldrb	r2, [r7, #3]
 80164e2:	4611      	mov	r1, r2
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	4798      	blx	r3
 80164e8:	4603      	mov	r3, r0
 80164ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80164ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80164ee:	4618      	mov	r0, r3
 80164f0:	3710      	adds	r7, #16
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd80      	pop	{r7, pc}

080164f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80164f6:	b580      	push	{r7, lr}
 80164f8:	b084      	sub	sp, #16
 80164fa:	af00      	add	r7, sp, #0
 80164fc:	6078      	str	r0, [r7, #4]
 80164fe:	460b      	mov	r3, r1
 8016500:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016502:	2300      	movs	r3, #0
 8016504:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801650c:	685b      	ldr	r3, [r3, #4]
 801650e:	78fa      	ldrb	r2, [r7, #3]
 8016510:	4611      	mov	r1, r2
 8016512:	6878      	ldr	r0, [r7, #4]
 8016514:	4798      	blx	r3
 8016516:	4603      	mov	r3, r0
 8016518:	2b00      	cmp	r3, #0
 801651a:	d001      	beq.n	8016520 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801651c:	2303      	movs	r3, #3
 801651e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016520:	7bfb      	ldrb	r3, [r7, #15]
}
 8016522:	4618      	mov	r0, r3
 8016524:	3710      	adds	r7, #16
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}

0801652a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801652a:	b580      	push	{r7, lr}
 801652c:	b084      	sub	sp, #16
 801652e:	af00      	add	r7, sp, #0
 8016530:	6078      	str	r0, [r7, #4]
 8016532:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801653a:	6839      	ldr	r1, [r7, #0]
 801653c:	4618      	mov	r0, r3
 801653e:	f001 f936 	bl	80177ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	2201      	movs	r2, #1
 8016546:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8016550:	461a      	mov	r2, r3
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801655e:	f003 031f 	and.w	r3, r3, #31
 8016562:	2b02      	cmp	r3, #2
 8016564:	d01a      	beq.n	801659c <USBD_LL_SetupStage+0x72>
 8016566:	2b02      	cmp	r3, #2
 8016568:	d822      	bhi.n	80165b0 <USBD_LL_SetupStage+0x86>
 801656a:	2b00      	cmp	r3, #0
 801656c:	d002      	beq.n	8016574 <USBD_LL_SetupStage+0x4a>
 801656e:	2b01      	cmp	r3, #1
 8016570:	d00a      	beq.n	8016588 <USBD_LL_SetupStage+0x5e>
 8016572:	e01d      	b.n	80165b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801657a:	4619      	mov	r1, r3
 801657c:	6878      	ldr	r0, [r7, #4]
 801657e:	f000 fb63 	bl	8016c48 <USBD_StdDevReq>
 8016582:	4603      	mov	r3, r0
 8016584:	73fb      	strb	r3, [r7, #15]
      break;
 8016586:	e020      	b.n	80165ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801658e:	4619      	mov	r1, r3
 8016590:	6878      	ldr	r0, [r7, #4]
 8016592:	f000 fbcb 	bl	8016d2c <USBD_StdItfReq>
 8016596:	4603      	mov	r3, r0
 8016598:	73fb      	strb	r3, [r7, #15]
      break;
 801659a:	e016      	b.n	80165ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80165a2:	4619      	mov	r1, r3
 80165a4:	6878      	ldr	r0, [r7, #4]
 80165a6:	f000 fc2d 	bl	8016e04 <USBD_StdEPReq>
 80165aa:	4603      	mov	r3, r0
 80165ac:	73fb      	strb	r3, [r7, #15]
      break;
 80165ae:	e00c      	b.n	80165ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80165b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80165ba:	b2db      	uxtb	r3, r3
 80165bc:	4619      	mov	r1, r3
 80165be:	6878      	ldr	r0, [r7, #4]
 80165c0:	f001 fe74 	bl	80182ac <USBD_LL_StallEP>
 80165c4:	4603      	mov	r3, r0
 80165c6:	73fb      	strb	r3, [r7, #15]
      break;
 80165c8:	bf00      	nop
  }

  return ret;
 80165ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80165cc:	4618      	mov	r0, r3
 80165ce:	3710      	adds	r7, #16
 80165d0:	46bd      	mov	sp, r7
 80165d2:	bd80      	pop	{r7, pc}

080165d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b086      	sub	sp, #24
 80165d8:	af00      	add	r7, sp, #0
 80165da:	60f8      	str	r0, [r7, #12]
 80165dc:	460b      	mov	r3, r1
 80165de:	607a      	str	r2, [r7, #4]
 80165e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80165e2:	2300      	movs	r3, #0
 80165e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80165e6:	7afb      	ldrb	r3, [r7, #11]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d16e      	bne.n	80166ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80165f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80165fa:	2b03      	cmp	r3, #3
 80165fc:	f040 8098 	bne.w	8016730 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016600:	693b      	ldr	r3, [r7, #16]
 8016602:	689a      	ldr	r2, [r3, #8]
 8016604:	693b      	ldr	r3, [r7, #16]
 8016606:	68db      	ldr	r3, [r3, #12]
 8016608:	429a      	cmp	r2, r3
 801660a:	d913      	bls.n	8016634 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801660c:	693b      	ldr	r3, [r7, #16]
 801660e:	689a      	ldr	r2, [r3, #8]
 8016610:	693b      	ldr	r3, [r7, #16]
 8016612:	68db      	ldr	r3, [r3, #12]
 8016614:	1ad2      	subs	r2, r2, r3
 8016616:	693b      	ldr	r3, [r7, #16]
 8016618:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801661a:	693b      	ldr	r3, [r7, #16]
 801661c:	68da      	ldr	r2, [r3, #12]
 801661e:	693b      	ldr	r3, [r7, #16]
 8016620:	689b      	ldr	r3, [r3, #8]
 8016622:	4293      	cmp	r3, r2
 8016624:	bf28      	it	cs
 8016626:	4613      	movcs	r3, r2
 8016628:	461a      	mov	r2, r3
 801662a:	6879      	ldr	r1, [r7, #4]
 801662c:	68f8      	ldr	r0, [r7, #12]
 801662e:	f001 f9be 	bl	80179ae <USBD_CtlContinueRx>
 8016632:	e07d      	b.n	8016730 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801663a:	f003 031f 	and.w	r3, r3, #31
 801663e:	2b02      	cmp	r3, #2
 8016640:	d014      	beq.n	801666c <USBD_LL_DataOutStage+0x98>
 8016642:	2b02      	cmp	r3, #2
 8016644:	d81d      	bhi.n	8016682 <USBD_LL_DataOutStage+0xae>
 8016646:	2b00      	cmp	r3, #0
 8016648:	d002      	beq.n	8016650 <USBD_LL_DataOutStage+0x7c>
 801664a:	2b01      	cmp	r3, #1
 801664c:	d003      	beq.n	8016656 <USBD_LL_DataOutStage+0x82>
 801664e:	e018      	b.n	8016682 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016650:	2300      	movs	r3, #0
 8016652:	75bb      	strb	r3, [r7, #22]
            break;
 8016654:	e018      	b.n	8016688 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801665c:	b2db      	uxtb	r3, r3
 801665e:	4619      	mov	r1, r3
 8016660:	68f8      	ldr	r0, [r7, #12]
 8016662:	f000 fa64 	bl	8016b2e <USBD_CoreFindIF>
 8016666:	4603      	mov	r3, r0
 8016668:	75bb      	strb	r3, [r7, #22]
            break;
 801666a:	e00d      	b.n	8016688 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016672:	b2db      	uxtb	r3, r3
 8016674:	4619      	mov	r1, r3
 8016676:	68f8      	ldr	r0, [r7, #12]
 8016678:	f000 fa66 	bl	8016b48 <USBD_CoreFindEP>
 801667c:	4603      	mov	r3, r0
 801667e:	75bb      	strb	r3, [r7, #22]
            break;
 8016680:	e002      	b.n	8016688 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016682:	2300      	movs	r3, #0
 8016684:	75bb      	strb	r3, [r7, #22]
            break;
 8016686:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016688:	7dbb      	ldrb	r3, [r7, #22]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d119      	bne.n	80166c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016694:	b2db      	uxtb	r3, r3
 8016696:	2b03      	cmp	r3, #3
 8016698:	d113      	bne.n	80166c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801669a:	7dba      	ldrb	r2, [r7, #22]
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	32ae      	adds	r2, #174	@ 0xae
 80166a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166a4:	691b      	ldr	r3, [r3, #16]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d00b      	beq.n	80166c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80166aa:	7dba      	ldrb	r2, [r7, #22]
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80166b2:	7dba      	ldrb	r2, [r7, #22]
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	32ae      	adds	r2, #174	@ 0xae
 80166b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166bc:	691b      	ldr	r3, [r3, #16]
 80166be:	68f8      	ldr	r0, [r7, #12]
 80166c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80166c2:	68f8      	ldr	r0, [r7, #12]
 80166c4:	f001 f984 	bl	80179d0 <USBD_CtlSendStatus>
 80166c8:	e032      	b.n	8016730 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80166ca:	7afb      	ldrb	r3, [r7, #11]
 80166cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80166d0:	b2db      	uxtb	r3, r3
 80166d2:	4619      	mov	r1, r3
 80166d4:	68f8      	ldr	r0, [r7, #12]
 80166d6:	f000 fa37 	bl	8016b48 <USBD_CoreFindEP>
 80166da:	4603      	mov	r3, r0
 80166dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80166de:	7dbb      	ldrb	r3, [r7, #22]
 80166e0:	2bff      	cmp	r3, #255	@ 0xff
 80166e2:	d025      	beq.n	8016730 <USBD_LL_DataOutStage+0x15c>
 80166e4:	7dbb      	ldrb	r3, [r7, #22]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d122      	bne.n	8016730 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80166f0:	b2db      	uxtb	r3, r3
 80166f2:	2b03      	cmp	r3, #3
 80166f4:	d117      	bne.n	8016726 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80166f6:	7dba      	ldrb	r2, [r7, #22]
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	32ae      	adds	r2, #174	@ 0xae
 80166fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016700:	699b      	ldr	r3, [r3, #24]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d00f      	beq.n	8016726 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016706:	7dba      	ldrb	r2, [r7, #22]
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801670e:	7dba      	ldrb	r2, [r7, #22]
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	32ae      	adds	r2, #174	@ 0xae
 8016714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016718:	699b      	ldr	r3, [r3, #24]
 801671a:	7afa      	ldrb	r2, [r7, #11]
 801671c:	4611      	mov	r1, r2
 801671e:	68f8      	ldr	r0, [r7, #12]
 8016720:	4798      	blx	r3
 8016722:	4603      	mov	r3, r0
 8016724:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8016726:	7dfb      	ldrb	r3, [r7, #23]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d001      	beq.n	8016730 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801672c:	7dfb      	ldrb	r3, [r7, #23]
 801672e:	e000      	b.n	8016732 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016730:	2300      	movs	r3, #0
}
 8016732:	4618      	mov	r0, r3
 8016734:	3718      	adds	r7, #24
 8016736:	46bd      	mov	sp, r7
 8016738:	bd80      	pop	{r7, pc}

0801673a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801673a:	b580      	push	{r7, lr}
 801673c:	b086      	sub	sp, #24
 801673e:	af00      	add	r7, sp, #0
 8016740:	60f8      	str	r0, [r7, #12]
 8016742:	460b      	mov	r3, r1
 8016744:	607a      	str	r2, [r7, #4]
 8016746:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016748:	7afb      	ldrb	r3, [r7, #11]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d16f      	bne.n	801682e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	3314      	adds	r3, #20
 8016752:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801675a:	2b02      	cmp	r3, #2
 801675c:	d15a      	bne.n	8016814 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801675e:	693b      	ldr	r3, [r7, #16]
 8016760:	689a      	ldr	r2, [r3, #8]
 8016762:	693b      	ldr	r3, [r7, #16]
 8016764:	68db      	ldr	r3, [r3, #12]
 8016766:	429a      	cmp	r2, r3
 8016768:	d914      	bls.n	8016794 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801676a:	693b      	ldr	r3, [r7, #16]
 801676c:	689a      	ldr	r2, [r3, #8]
 801676e:	693b      	ldr	r3, [r7, #16]
 8016770:	68db      	ldr	r3, [r3, #12]
 8016772:	1ad2      	subs	r2, r2, r3
 8016774:	693b      	ldr	r3, [r7, #16]
 8016776:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016778:	693b      	ldr	r3, [r7, #16]
 801677a:	689b      	ldr	r3, [r3, #8]
 801677c:	461a      	mov	r2, r3
 801677e:	6879      	ldr	r1, [r7, #4]
 8016780:	68f8      	ldr	r0, [r7, #12]
 8016782:	f001 f8e6 	bl	8017952 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016786:	2300      	movs	r3, #0
 8016788:	2200      	movs	r2, #0
 801678a:	2100      	movs	r1, #0
 801678c:	68f8      	ldr	r0, [r7, #12]
 801678e:	f001 fe37 	bl	8018400 <USBD_LL_PrepareReceive>
 8016792:	e03f      	b.n	8016814 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016794:	693b      	ldr	r3, [r7, #16]
 8016796:	68da      	ldr	r2, [r3, #12]
 8016798:	693b      	ldr	r3, [r7, #16]
 801679a:	689b      	ldr	r3, [r3, #8]
 801679c:	429a      	cmp	r2, r3
 801679e:	d11c      	bne.n	80167da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80167a0:	693b      	ldr	r3, [r7, #16]
 80167a2:	685a      	ldr	r2, [r3, #4]
 80167a4:	693b      	ldr	r3, [r7, #16]
 80167a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80167a8:	429a      	cmp	r2, r3
 80167aa:	d316      	bcc.n	80167da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80167ac:	693b      	ldr	r3, [r7, #16]
 80167ae:	685a      	ldr	r2, [r3, #4]
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80167b6:	429a      	cmp	r2, r3
 80167b8:	d20f      	bcs.n	80167da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80167ba:	2200      	movs	r2, #0
 80167bc:	2100      	movs	r1, #0
 80167be:	68f8      	ldr	r0, [r7, #12]
 80167c0:	f001 f8c7 	bl	8017952 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	2200      	movs	r2, #0
 80167c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80167cc:	2300      	movs	r3, #0
 80167ce:	2200      	movs	r2, #0
 80167d0:	2100      	movs	r1, #0
 80167d2:	68f8      	ldr	r0, [r7, #12]
 80167d4:	f001 fe14 	bl	8018400 <USBD_LL_PrepareReceive>
 80167d8:	e01c      	b.n	8016814 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80167e0:	b2db      	uxtb	r3, r3
 80167e2:	2b03      	cmp	r3, #3
 80167e4:	d10f      	bne.n	8016806 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167ec:	68db      	ldr	r3, [r3, #12]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d009      	beq.n	8016806 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	2200      	movs	r2, #0
 80167f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016800:	68db      	ldr	r3, [r3, #12]
 8016802:	68f8      	ldr	r0, [r7, #12]
 8016804:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016806:	2180      	movs	r1, #128	@ 0x80
 8016808:	68f8      	ldr	r0, [r7, #12]
 801680a:	f001 fd4f 	bl	80182ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801680e:	68f8      	ldr	r0, [r7, #12]
 8016810:	f001 f8f1 	bl	80179f6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801681a:	2b00      	cmp	r3, #0
 801681c:	d03a      	beq.n	8016894 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801681e:	68f8      	ldr	r0, [r7, #12]
 8016820:	f7ff fe42 	bl	80164a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	2200      	movs	r2, #0
 8016828:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801682c:	e032      	b.n	8016894 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801682e:	7afb      	ldrb	r3, [r7, #11]
 8016830:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016834:	b2db      	uxtb	r3, r3
 8016836:	4619      	mov	r1, r3
 8016838:	68f8      	ldr	r0, [r7, #12]
 801683a:	f000 f985 	bl	8016b48 <USBD_CoreFindEP>
 801683e:	4603      	mov	r3, r0
 8016840:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016842:	7dfb      	ldrb	r3, [r7, #23]
 8016844:	2bff      	cmp	r3, #255	@ 0xff
 8016846:	d025      	beq.n	8016894 <USBD_LL_DataInStage+0x15a>
 8016848:	7dfb      	ldrb	r3, [r7, #23]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d122      	bne.n	8016894 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016854:	b2db      	uxtb	r3, r3
 8016856:	2b03      	cmp	r3, #3
 8016858:	d11c      	bne.n	8016894 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801685a:	7dfa      	ldrb	r2, [r7, #23]
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	32ae      	adds	r2, #174	@ 0xae
 8016860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016864:	695b      	ldr	r3, [r3, #20]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d014      	beq.n	8016894 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801686a:	7dfa      	ldrb	r2, [r7, #23]
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016872:	7dfa      	ldrb	r2, [r7, #23]
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	32ae      	adds	r2, #174	@ 0xae
 8016878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801687c:	695b      	ldr	r3, [r3, #20]
 801687e:	7afa      	ldrb	r2, [r7, #11]
 8016880:	4611      	mov	r1, r2
 8016882:	68f8      	ldr	r0, [r7, #12]
 8016884:	4798      	blx	r3
 8016886:	4603      	mov	r3, r0
 8016888:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801688a:	7dbb      	ldrb	r3, [r7, #22]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d001      	beq.n	8016894 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016890:	7dbb      	ldrb	r3, [r7, #22]
 8016892:	e000      	b.n	8016896 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016894:	2300      	movs	r3, #0
}
 8016896:	4618      	mov	r0, r3
 8016898:	3718      	adds	r7, #24
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}

0801689e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801689e:	b580      	push	{r7, lr}
 80168a0:	b084      	sub	sp, #16
 80168a2:	af00      	add	r7, sp, #0
 80168a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80168a6:	2300      	movs	r3, #0
 80168a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	2201      	movs	r2, #1
 80168ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	2200      	movs	r2, #0
 80168b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	2200      	movs	r2, #0
 80168be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	2200      	movs	r2, #0
 80168c4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	2200      	movs	r2, #0
 80168cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d014      	beq.n	8016904 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168e0:	685b      	ldr	r3, [r3, #4]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d00e      	beq.n	8016904 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168ec:	685b      	ldr	r3, [r3, #4]
 80168ee:	687a      	ldr	r2, [r7, #4]
 80168f0:	6852      	ldr	r2, [r2, #4]
 80168f2:	b2d2      	uxtb	r2, r2
 80168f4:	4611      	mov	r1, r2
 80168f6:	6878      	ldr	r0, [r7, #4]
 80168f8:	4798      	blx	r3
 80168fa:	4603      	mov	r3, r0
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d001      	beq.n	8016904 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016900:	2303      	movs	r3, #3
 8016902:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016904:	2340      	movs	r3, #64	@ 0x40
 8016906:	2200      	movs	r2, #0
 8016908:	2100      	movs	r1, #0
 801690a:	6878      	ldr	r0, [r7, #4]
 801690c:	f001 fc89 	bl	8018222 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	2201      	movs	r2, #1
 8016914:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2240      	movs	r2, #64	@ 0x40
 801691c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016920:	2340      	movs	r3, #64	@ 0x40
 8016922:	2200      	movs	r2, #0
 8016924:	2180      	movs	r1, #128	@ 0x80
 8016926:	6878      	ldr	r0, [r7, #4]
 8016928:	f001 fc7b 	bl	8018222 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	2201      	movs	r2, #1
 8016930:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	2240      	movs	r2, #64	@ 0x40
 8016936:	621a      	str	r2, [r3, #32]

  return ret;
 8016938:	7bfb      	ldrb	r3, [r7, #15]
}
 801693a:	4618      	mov	r0, r3
 801693c:	3710      	adds	r7, #16
 801693e:	46bd      	mov	sp, r7
 8016940:	bd80      	pop	{r7, pc}

08016942 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016942:	b480      	push	{r7}
 8016944:	b083      	sub	sp, #12
 8016946:	af00      	add	r7, sp, #0
 8016948:	6078      	str	r0, [r7, #4]
 801694a:	460b      	mov	r3, r1
 801694c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	78fa      	ldrb	r2, [r7, #3]
 8016952:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016954:	2300      	movs	r3, #0
}
 8016956:	4618      	mov	r0, r3
 8016958:	370c      	adds	r7, #12
 801695a:	46bd      	mov	sp, r7
 801695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016960:	4770      	bx	lr

08016962 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016962:	b480      	push	{r7}
 8016964:	b083      	sub	sp, #12
 8016966:	af00      	add	r7, sp, #0
 8016968:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016970:	b2db      	uxtb	r3, r3
 8016972:	2b04      	cmp	r3, #4
 8016974:	d006      	beq.n	8016984 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801697c:	b2da      	uxtb	r2, r3
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2204      	movs	r2, #4
 8016988:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801698c:	2300      	movs	r3, #0
}
 801698e:	4618      	mov	r0, r3
 8016990:	370c      	adds	r7, #12
 8016992:	46bd      	mov	sp, r7
 8016994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016998:	4770      	bx	lr

0801699a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801699a:	b480      	push	{r7}
 801699c:	b083      	sub	sp, #12
 801699e:	af00      	add	r7, sp, #0
 80169a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80169a8:	b2db      	uxtb	r3, r3
 80169aa:	2b04      	cmp	r3, #4
 80169ac:	d106      	bne.n	80169bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80169b4:	b2da      	uxtb	r2, r3
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80169bc:	2300      	movs	r3, #0
}
 80169be:	4618      	mov	r0, r3
 80169c0:	370c      	adds	r7, #12
 80169c2:	46bd      	mov	sp, r7
 80169c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c8:	4770      	bx	lr

080169ca <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80169ca:	b580      	push	{r7, lr}
 80169cc:	b082      	sub	sp, #8
 80169ce:	af00      	add	r7, sp, #0
 80169d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80169d8:	b2db      	uxtb	r3, r3
 80169da:	2b03      	cmp	r3, #3
 80169dc:	d110      	bne.n	8016a00 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d00b      	beq.n	8016a00 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80169ee:	69db      	ldr	r3, [r3, #28]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d005      	beq.n	8016a00 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80169fa:	69db      	ldr	r3, [r3, #28]
 80169fc:	6878      	ldr	r0, [r7, #4]
 80169fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016a00:	2300      	movs	r3, #0
}
 8016a02:	4618      	mov	r0, r3
 8016a04:	3708      	adds	r7, #8
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd80      	pop	{r7, pc}

08016a0a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016a0a:	b580      	push	{r7, lr}
 8016a0c:	b082      	sub	sp, #8
 8016a0e:	af00      	add	r7, sp, #0
 8016a10:	6078      	str	r0, [r7, #4]
 8016a12:	460b      	mov	r3, r1
 8016a14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	32ae      	adds	r2, #174	@ 0xae
 8016a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d101      	bne.n	8016a2c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016a28:	2303      	movs	r3, #3
 8016a2a:	e01c      	b.n	8016a66 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a32:	b2db      	uxtb	r3, r3
 8016a34:	2b03      	cmp	r3, #3
 8016a36:	d115      	bne.n	8016a64 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	32ae      	adds	r2, #174	@ 0xae
 8016a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a46:	6a1b      	ldr	r3, [r3, #32]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d00b      	beq.n	8016a64 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	32ae      	adds	r2, #174	@ 0xae
 8016a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a5a:	6a1b      	ldr	r3, [r3, #32]
 8016a5c:	78fa      	ldrb	r2, [r7, #3]
 8016a5e:	4611      	mov	r1, r2
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016a64:	2300      	movs	r3, #0
}
 8016a66:	4618      	mov	r0, r3
 8016a68:	3708      	adds	r7, #8
 8016a6a:	46bd      	mov	sp, r7
 8016a6c:	bd80      	pop	{r7, pc}

08016a6e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016a6e:	b580      	push	{r7, lr}
 8016a70:	b082      	sub	sp, #8
 8016a72:	af00      	add	r7, sp, #0
 8016a74:	6078      	str	r0, [r7, #4]
 8016a76:	460b      	mov	r3, r1
 8016a78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	32ae      	adds	r2, #174	@ 0xae
 8016a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d101      	bne.n	8016a90 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016a8c:	2303      	movs	r3, #3
 8016a8e:	e01c      	b.n	8016aca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a96:	b2db      	uxtb	r3, r3
 8016a98:	2b03      	cmp	r3, #3
 8016a9a:	d115      	bne.n	8016ac8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	32ae      	adds	r2, #174	@ 0xae
 8016aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d00b      	beq.n	8016ac8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	32ae      	adds	r2, #174	@ 0xae
 8016aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ac0:	78fa      	ldrb	r2, [r7, #3]
 8016ac2:	4611      	mov	r1, r2
 8016ac4:	6878      	ldr	r0, [r7, #4]
 8016ac6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016ac8:	2300      	movs	r3, #0
}
 8016aca:	4618      	mov	r0, r3
 8016acc:	3708      	adds	r7, #8
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bd80      	pop	{r7, pc}

08016ad2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016ad2:	b480      	push	{r7}
 8016ad4:	b083      	sub	sp, #12
 8016ad6:	af00      	add	r7, sp, #0
 8016ad8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016ada:	2300      	movs	r3, #0
}
 8016adc:	4618      	mov	r0, r3
 8016ade:	370c      	adds	r7, #12
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae6:	4770      	bx	lr

08016ae8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b084      	sub	sp, #16
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016af0:	2300      	movs	r3, #0
 8016af2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	2201      	movs	r2, #1
 8016af8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d00e      	beq.n	8016b24 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016b0c:	685b      	ldr	r3, [r3, #4]
 8016b0e:	687a      	ldr	r2, [r7, #4]
 8016b10:	6852      	ldr	r2, [r2, #4]
 8016b12:	b2d2      	uxtb	r2, r2
 8016b14:	4611      	mov	r1, r2
 8016b16:	6878      	ldr	r0, [r7, #4]
 8016b18:	4798      	blx	r3
 8016b1a:	4603      	mov	r3, r0
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d001      	beq.n	8016b24 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016b20:	2303      	movs	r3, #3
 8016b22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b26:	4618      	mov	r0, r3
 8016b28:	3710      	adds	r7, #16
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	bd80      	pop	{r7, pc}

08016b2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016b2e:	b480      	push	{r7}
 8016b30:	b083      	sub	sp, #12
 8016b32:	af00      	add	r7, sp, #0
 8016b34:	6078      	str	r0, [r7, #4]
 8016b36:	460b      	mov	r3, r1
 8016b38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016b3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	370c      	adds	r7, #12
 8016b40:	46bd      	mov	sp, r7
 8016b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b46:	4770      	bx	lr

08016b48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016b48:	b480      	push	{r7}
 8016b4a:	b083      	sub	sp, #12
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
 8016b50:	460b      	mov	r3, r1
 8016b52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016b54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016b56:	4618      	mov	r0, r3
 8016b58:	370c      	adds	r7, #12
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b60:	4770      	bx	lr

08016b62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016b62:	b580      	push	{r7, lr}
 8016b64:	b086      	sub	sp, #24
 8016b66:	af00      	add	r7, sp, #0
 8016b68:	6078      	str	r0, [r7, #4]
 8016b6a:	460b      	mov	r3, r1
 8016b6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016b76:	2300      	movs	r3, #0
 8016b78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	885b      	ldrh	r3, [r3, #2]
 8016b7e:	b29b      	uxth	r3, r3
 8016b80:	68fa      	ldr	r2, [r7, #12]
 8016b82:	7812      	ldrb	r2, [r2, #0]
 8016b84:	4293      	cmp	r3, r2
 8016b86:	d91f      	bls.n	8016bc8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	781b      	ldrb	r3, [r3, #0]
 8016b8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016b8e:	e013      	b.n	8016bb8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016b90:	f107 030a 	add.w	r3, r7, #10
 8016b94:	4619      	mov	r1, r3
 8016b96:	6978      	ldr	r0, [r7, #20]
 8016b98:	f000 f81b 	bl	8016bd2 <USBD_GetNextDesc>
 8016b9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016b9e:	697b      	ldr	r3, [r7, #20]
 8016ba0:	785b      	ldrb	r3, [r3, #1]
 8016ba2:	2b05      	cmp	r3, #5
 8016ba4:	d108      	bne.n	8016bb8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016ba6:	697b      	ldr	r3, [r7, #20]
 8016ba8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016baa:	693b      	ldr	r3, [r7, #16]
 8016bac:	789b      	ldrb	r3, [r3, #2]
 8016bae:	78fa      	ldrb	r2, [r7, #3]
 8016bb0:	429a      	cmp	r2, r3
 8016bb2:	d008      	beq.n	8016bc6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	885b      	ldrh	r3, [r3, #2]
 8016bbc:	b29a      	uxth	r2, r3
 8016bbe:	897b      	ldrh	r3, [r7, #10]
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	d8e5      	bhi.n	8016b90 <USBD_GetEpDesc+0x2e>
 8016bc4:	e000      	b.n	8016bc8 <USBD_GetEpDesc+0x66>
          break;
 8016bc6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016bc8:	693b      	ldr	r3, [r7, #16]
}
 8016bca:	4618      	mov	r0, r3
 8016bcc:	3718      	adds	r7, #24
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	bd80      	pop	{r7, pc}

08016bd2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016bd2:	b480      	push	{r7}
 8016bd4:	b085      	sub	sp, #20
 8016bd6:	af00      	add	r7, sp, #0
 8016bd8:	6078      	str	r0, [r7, #4]
 8016bda:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016be0:	683b      	ldr	r3, [r7, #0]
 8016be2:	881b      	ldrh	r3, [r3, #0]
 8016be4:	68fa      	ldr	r2, [r7, #12]
 8016be6:	7812      	ldrb	r2, [r2, #0]
 8016be8:	4413      	add	r3, r2
 8016bea:	b29a      	uxth	r2, r3
 8016bec:	683b      	ldr	r3, [r7, #0]
 8016bee:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	781b      	ldrb	r3, [r3, #0]
 8016bf4:	461a      	mov	r2, r3
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	4413      	add	r3, r2
 8016bfa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016bfc:	68fb      	ldr	r3, [r7, #12]
}
 8016bfe:	4618      	mov	r0, r3
 8016c00:	3714      	adds	r7, #20
 8016c02:	46bd      	mov	sp, r7
 8016c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c08:	4770      	bx	lr

08016c0a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016c0a:	b480      	push	{r7}
 8016c0c:	b087      	sub	sp, #28
 8016c0e:	af00      	add	r7, sp, #0
 8016c10:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016c16:	697b      	ldr	r3, [r7, #20]
 8016c18:	781b      	ldrb	r3, [r3, #0]
 8016c1a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016c1c:	697b      	ldr	r3, [r7, #20]
 8016c1e:	3301      	adds	r3, #1
 8016c20:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016c22:	697b      	ldr	r3, [r7, #20]
 8016c24:	781b      	ldrb	r3, [r3, #0]
 8016c26:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016c28:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016c2c:	021b      	lsls	r3, r3, #8
 8016c2e:	b21a      	sxth	r2, r3
 8016c30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016c34:	4313      	orrs	r3, r2
 8016c36:	b21b      	sxth	r3, r3
 8016c38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016c3a:	89fb      	ldrh	r3, [r7, #14]
}
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	371c      	adds	r7, #28
 8016c40:	46bd      	mov	sp, r7
 8016c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c46:	4770      	bx	lr

08016c48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b084      	sub	sp, #16
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	6078      	str	r0, [r7, #4]
 8016c50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016c52:	2300      	movs	r3, #0
 8016c54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016c56:	683b      	ldr	r3, [r7, #0]
 8016c58:	781b      	ldrb	r3, [r3, #0]
 8016c5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016c5e:	2b40      	cmp	r3, #64	@ 0x40
 8016c60:	d005      	beq.n	8016c6e <USBD_StdDevReq+0x26>
 8016c62:	2b40      	cmp	r3, #64	@ 0x40
 8016c64:	d857      	bhi.n	8016d16 <USBD_StdDevReq+0xce>
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d00f      	beq.n	8016c8a <USBD_StdDevReq+0x42>
 8016c6a:	2b20      	cmp	r3, #32
 8016c6c:	d153      	bne.n	8016d16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	32ae      	adds	r2, #174	@ 0xae
 8016c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c7c:	689b      	ldr	r3, [r3, #8]
 8016c7e:	6839      	ldr	r1, [r7, #0]
 8016c80:	6878      	ldr	r0, [r7, #4]
 8016c82:	4798      	blx	r3
 8016c84:	4603      	mov	r3, r0
 8016c86:	73fb      	strb	r3, [r7, #15]
      break;
 8016c88:	e04a      	b.n	8016d20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016c8a:	683b      	ldr	r3, [r7, #0]
 8016c8c:	785b      	ldrb	r3, [r3, #1]
 8016c8e:	2b09      	cmp	r3, #9
 8016c90:	d83b      	bhi.n	8016d0a <USBD_StdDevReq+0xc2>
 8016c92:	a201      	add	r2, pc, #4	@ (adr r2, 8016c98 <USBD_StdDevReq+0x50>)
 8016c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c98:	08016ced 	.word	0x08016ced
 8016c9c:	08016d01 	.word	0x08016d01
 8016ca0:	08016d0b 	.word	0x08016d0b
 8016ca4:	08016cf7 	.word	0x08016cf7
 8016ca8:	08016d0b 	.word	0x08016d0b
 8016cac:	08016ccb 	.word	0x08016ccb
 8016cb0:	08016cc1 	.word	0x08016cc1
 8016cb4:	08016d0b 	.word	0x08016d0b
 8016cb8:	08016ce3 	.word	0x08016ce3
 8016cbc:	08016cd5 	.word	0x08016cd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016cc0:	6839      	ldr	r1, [r7, #0]
 8016cc2:	6878      	ldr	r0, [r7, #4]
 8016cc4:	f000 fa3c 	bl	8017140 <USBD_GetDescriptor>
          break;
 8016cc8:	e024      	b.n	8016d14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016cca:	6839      	ldr	r1, [r7, #0]
 8016ccc:	6878      	ldr	r0, [r7, #4]
 8016cce:	f000 fbcb 	bl	8017468 <USBD_SetAddress>
          break;
 8016cd2:	e01f      	b.n	8016d14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016cd4:	6839      	ldr	r1, [r7, #0]
 8016cd6:	6878      	ldr	r0, [r7, #4]
 8016cd8:	f000 fc0a 	bl	80174f0 <USBD_SetConfig>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	73fb      	strb	r3, [r7, #15]
          break;
 8016ce0:	e018      	b.n	8016d14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016ce2:	6839      	ldr	r1, [r7, #0]
 8016ce4:	6878      	ldr	r0, [r7, #4]
 8016ce6:	f000 fcad 	bl	8017644 <USBD_GetConfig>
          break;
 8016cea:	e013      	b.n	8016d14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016cec:	6839      	ldr	r1, [r7, #0]
 8016cee:	6878      	ldr	r0, [r7, #4]
 8016cf0:	f000 fcde 	bl	80176b0 <USBD_GetStatus>
          break;
 8016cf4:	e00e      	b.n	8016d14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016cf6:	6839      	ldr	r1, [r7, #0]
 8016cf8:	6878      	ldr	r0, [r7, #4]
 8016cfa:	f000 fd0d 	bl	8017718 <USBD_SetFeature>
          break;
 8016cfe:	e009      	b.n	8016d14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016d00:	6839      	ldr	r1, [r7, #0]
 8016d02:	6878      	ldr	r0, [r7, #4]
 8016d04:	f000 fd31 	bl	801776a <USBD_ClrFeature>
          break;
 8016d08:	e004      	b.n	8016d14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016d0a:	6839      	ldr	r1, [r7, #0]
 8016d0c:	6878      	ldr	r0, [r7, #4]
 8016d0e:	f000 fd88 	bl	8017822 <USBD_CtlError>
          break;
 8016d12:	bf00      	nop
      }
      break;
 8016d14:	e004      	b.n	8016d20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016d16:	6839      	ldr	r1, [r7, #0]
 8016d18:	6878      	ldr	r0, [r7, #4]
 8016d1a:	f000 fd82 	bl	8017822 <USBD_CtlError>
      break;
 8016d1e:	bf00      	nop
  }

  return ret;
 8016d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d22:	4618      	mov	r0, r3
 8016d24:	3710      	adds	r7, #16
 8016d26:	46bd      	mov	sp, r7
 8016d28:	bd80      	pop	{r7, pc}
 8016d2a:	bf00      	nop

08016d2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b084      	sub	sp, #16
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
 8016d34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016d36:	2300      	movs	r3, #0
 8016d38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016d3a:	683b      	ldr	r3, [r7, #0]
 8016d3c:	781b      	ldrb	r3, [r3, #0]
 8016d3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016d42:	2b40      	cmp	r3, #64	@ 0x40
 8016d44:	d005      	beq.n	8016d52 <USBD_StdItfReq+0x26>
 8016d46:	2b40      	cmp	r3, #64	@ 0x40
 8016d48:	d852      	bhi.n	8016df0 <USBD_StdItfReq+0xc4>
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d001      	beq.n	8016d52 <USBD_StdItfReq+0x26>
 8016d4e:	2b20      	cmp	r3, #32
 8016d50:	d14e      	bne.n	8016df0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d58:	b2db      	uxtb	r3, r3
 8016d5a:	3b01      	subs	r3, #1
 8016d5c:	2b02      	cmp	r3, #2
 8016d5e:	d840      	bhi.n	8016de2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016d60:	683b      	ldr	r3, [r7, #0]
 8016d62:	889b      	ldrh	r3, [r3, #4]
 8016d64:	b2db      	uxtb	r3, r3
 8016d66:	2b01      	cmp	r3, #1
 8016d68:	d836      	bhi.n	8016dd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016d6a:	683b      	ldr	r3, [r7, #0]
 8016d6c:	889b      	ldrh	r3, [r3, #4]
 8016d6e:	b2db      	uxtb	r3, r3
 8016d70:	4619      	mov	r1, r3
 8016d72:	6878      	ldr	r0, [r7, #4]
 8016d74:	f7ff fedb 	bl	8016b2e <USBD_CoreFindIF>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016d7c:	7bbb      	ldrb	r3, [r7, #14]
 8016d7e:	2bff      	cmp	r3, #255	@ 0xff
 8016d80:	d01d      	beq.n	8016dbe <USBD_StdItfReq+0x92>
 8016d82:	7bbb      	ldrb	r3, [r7, #14]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d11a      	bne.n	8016dbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016d88:	7bba      	ldrb	r2, [r7, #14]
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	32ae      	adds	r2, #174	@ 0xae
 8016d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d92:	689b      	ldr	r3, [r3, #8]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d00f      	beq.n	8016db8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016d98:	7bba      	ldrb	r2, [r7, #14]
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016da0:	7bba      	ldrb	r2, [r7, #14]
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	32ae      	adds	r2, #174	@ 0xae
 8016da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016daa:	689b      	ldr	r3, [r3, #8]
 8016dac:	6839      	ldr	r1, [r7, #0]
 8016dae:	6878      	ldr	r0, [r7, #4]
 8016db0:	4798      	blx	r3
 8016db2:	4603      	mov	r3, r0
 8016db4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016db6:	e004      	b.n	8016dc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016db8:	2303      	movs	r3, #3
 8016dba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016dbc:	e001      	b.n	8016dc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016dbe:	2303      	movs	r3, #3
 8016dc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016dc2:	683b      	ldr	r3, [r7, #0]
 8016dc4:	88db      	ldrh	r3, [r3, #6]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d110      	bne.n	8016dec <USBD_StdItfReq+0xc0>
 8016dca:	7bfb      	ldrb	r3, [r7, #15]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d10d      	bne.n	8016dec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016dd0:	6878      	ldr	r0, [r7, #4]
 8016dd2:	f000 fdfd 	bl	80179d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016dd6:	e009      	b.n	8016dec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016dd8:	6839      	ldr	r1, [r7, #0]
 8016dda:	6878      	ldr	r0, [r7, #4]
 8016ddc:	f000 fd21 	bl	8017822 <USBD_CtlError>
          break;
 8016de0:	e004      	b.n	8016dec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016de2:	6839      	ldr	r1, [r7, #0]
 8016de4:	6878      	ldr	r0, [r7, #4]
 8016de6:	f000 fd1c 	bl	8017822 <USBD_CtlError>
          break;
 8016dea:	e000      	b.n	8016dee <USBD_StdItfReq+0xc2>
          break;
 8016dec:	bf00      	nop
      }
      break;
 8016dee:	e004      	b.n	8016dfa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016df0:	6839      	ldr	r1, [r7, #0]
 8016df2:	6878      	ldr	r0, [r7, #4]
 8016df4:	f000 fd15 	bl	8017822 <USBD_CtlError>
      break;
 8016df8:	bf00      	nop
  }

  return ret;
 8016dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	3710      	adds	r7, #16
 8016e00:	46bd      	mov	sp, r7
 8016e02:	bd80      	pop	{r7, pc}

08016e04 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b084      	sub	sp, #16
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	6078      	str	r0, [r7, #4]
 8016e0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016e0e:	2300      	movs	r3, #0
 8016e10:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016e12:	683b      	ldr	r3, [r7, #0]
 8016e14:	889b      	ldrh	r3, [r3, #4]
 8016e16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016e18:	683b      	ldr	r3, [r7, #0]
 8016e1a:	781b      	ldrb	r3, [r3, #0]
 8016e1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016e20:	2b40      	cmp	r3, #64	@ 0x40
 8016e22:	d007      	beq.n	8016e34 <USBD_StdEPReq+0x30>
 8016e24:	2b40      	cmp	r3, #64	@ 0x40
 8016e26:	f200 817f 	bhi.w	8017128 <USBD_StdEPReq+0x324>
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d02a      	beq.n	8016e84 <USBD_StdEPReq+0x80>
 8016e2e:	2b20      	cmp	r3, #32
 8016e30:	f040 817a 	bne.w	8017128 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016e34:	7bbb      	ldrb	r3, [r7, #14]
 8016e36:	4619      	mov	r1, r3
 8016e38:	6878      	ldr	r0, [r7, #4]
 8016e3a:	f7ff fe85 	bl	8016b48 <USBD_CoreFindEP>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016e42:	7b7b      	ldrb	r3, [r7, #13]
 8016e44:	2bff      	cmp	r3, #255	@ 0xff
 8016e46:	f000 8174 	beq.w	8017132 <USBD_StdEPReq+0x32e>
 8016e4a:	7b7b      	ldrb	r3, [r7, #13]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	f040 8170 	bne.w	8017132 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016e52:	7b7a      	ldrb	r2, [r7, #13]
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016e5a:	7b7a      	ldrb	r2, [r7, #13]
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	32ae      	adds	r2, #174	@ 0xae
 8016e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e64:	689b      	ldr	r3, [r3, #8]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	f000 8163 	beq.w	8017132 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016e6c:	7b7a      	ldrb	r2, [r7, #13]
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	32ae      	adds	r2, #174	@ 0xae
 8016e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e76:	689b      	ldr	r3, [r3, #8]
 8016e78:	6839      	ldr	r1, [r7, #0]
 8016e7a:	6878      	ldr	r0, [r7, #4]
 8016e7c:	4798      	blx	r3
 8016e7e:	4603      	mov	r3, r0
 8016e80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016e82:	e156      	b.n	8017132 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016e84:	683b      	ldr	r3, [r7, #0]
 8016e86:	785b      	ldrb	r3, [r3, #1]
 8016e88:	2b03      	cmp	r3, #3
 8016e8a:	d008      	beq.n	8016e9e <USBD_StdEPReq+0x9a>
 8016e8c:	2b03      	cmp	r3, #3
 8016e8e:	f300 8145 	bgt.w	801711c <USBD_StdEPReq+0x318>
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	f000 809b 	beq.w	8016fce <USBD_StdEPReq+0x1ca>
 8016e98:	2b01      	cmp	r3, #1
 8016e9a:	d03c      	beq.n	8016f16 <USBD_StdEPReq+0x112>
 8016e9c:	e13e      	b.n	801711c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016ea4:	b2db      	uxtb	r3, r3
 8016ea6:	2b02      	cmp	r3, #2
 8016ea8:	d002      	beq.n	8016eb0 <USBD_StdEPReq+0xac>
 8016eaa:	2b03      	cmp	r3, #3
 8016eac:	d016      	beq.n	8016edc <USBD_StdEPReq+0xd8>
 8016eae:	e02c      	b.n	8016f0a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016eb0:	7bbb      	ldrb	r3, [r7, #14]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d00d      	beq.n	8016ed2 <USBD_StdEPReq+0xce>
 8016eb6:	7bbb      	ldrb	r3, [r7, #14]
 8016eb8:	2b80      	cmp	r3, #128	@ 0x80
 8016eba:	d00a      	beq.n	8016ed2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016ebc:	7bbb      	ldrb	r3, [r7, #14]
 8016ebe:	4619      	mov	r1, r3
 8016ec0:	6878      	ldr	r0, [r7, #4]
 8016ec2:	f001 f9f3 	bl	80182ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016ec6:	2180      	movs	r1, #128	@ 0x80
 8016ec8:	6878      	ldr	r0, [r7, #4]
 8016eca:	f001 f9ef 	bl	80182ac <USBD_LL_StallEP>
 8016ece:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016ed0:	e020      	b.n	8016f14 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016ed2:	6839      	ldr	r1, [r7, #0]
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	f000 fca4 	bl	8017822 <USBD_CtlError>
              break;
 8016eda:	e01b      	b.n	8016f14 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016edc:	683b      	ldr	r3, [r7, #0]
 8016ede:	885b      	ldrh	r3, [r3, #2]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d10e      	bne.n	8016f02 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016ee4:	7bbb      	ldrb	r3, [r7, #14]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d00b      	beq.n	8016f02 <USBD_StdEPReq+0xfe>
 8016eea:	7bbb      	ldrb	r3, [r7, #14]
 8016eec:	2b80      	cmp	r3, #128	@ 0x80
 8016eee:	d008      	beq.n	8016f02 <USBD_StdEPReq+0xfe>
 8016ef0:	683b      	ldr	r3, [r7, #0]
 8016ef2:	88db      	ldrh	r3, [r3, #6]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d104      	bne.n	8016f02 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016ef8:	7bbb      	ldrb	r3, [r7, #14]
 8016efa:	4619      	mov	r1, r3
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f001 f9d5 	bl	80182ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016f02:	6878      	ldr	r0, [r7, #4]
 8016f04:	f000 fd64 	bl	80179d0 <USBD_CtlSendStatus>

              break;
 8016f08:	e004      	b.n	8016f14 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016f0a:	6839      	ldr	r1, [r7, #0]
 8016f0c:	6878      	ldr	r0, [r7, #4]
 8016f0e:	f000 fc88 	bl	8017822 <USBD_CtlError>
              break;
 8016f12:	bf00      	nop
          }
          break;
 8016f14:	e107      	b.n	8017126 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016f1c:	b2db      	uxtb	r3, r3
 8016f1e:	2b02      	cmp	r3, #2
 8016f20:	d002      	beq.n	8016f28 <USBD_StdEPReq+0x124>
 8016f22:	2b03      	cmp	r3, #3
 8016f24:	d016      	beq.n	8016f54 <USBD_StdEPReq+0x150>
 8016f26:	e04b      	b.n	8016fc0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016f28:	7bbb      	ldrb	r3, [r7, #14]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d00d      	beq.n	8016f4a <USBD_StdEPReq+0x146>
 8016f2e:	7bbb      	ldrb	r3, [r7, #14]
 8016f30:	2b80      	cmp	r3, #128	@ 0x80
 8016f32:	d00a      	beq.n	8016f4a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016f34:	7bbb      	ldrb	r3, [r7, #14]
 8016f36:	4619      	mov	r1, r3
 8016f38:	6878      	ldr	r0, [r7, #4]
 8016f3a:	f001 f9b7 	bl	80182ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016f3e:	2180      	movs	r1, #128	@ 0x80
 8016f40:	6878      	ldr	r0, [r7, #4]
 8016f42:	f001 f9b3 	bl	80182ac <USBD_LL_StallEP>
 8016f46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016f48:	e040      	b.n	8016fcc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016f4a:	6839      	ldr	r1, [r7, #0]
 8016f4c:	6878      	ldr	r0, [r7, #4]
 8016f4e:	f000 fc68 	bl	8017822 <USBD_CtlError>
              break;
 8016f52:	e03b      	b.n	8016fcc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016f54:	683b      	ldr	r3, [r7, #0]
 8016f56:	885b      	ldrh	r3, [r3, #2]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d136      	bne.n	8016fca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016f5c:	7bbb      	ldrb	r3, [r7, #14]
 8016f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d004      	beq.n	8016f70 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016f66:	7bbb      	ldrb	r3, [r7, #14]
 8016f68:	4619      	mov	r1, r3
 8016f6a:	6878      	ldr	r0, [r7, #4]
 8016f6c:	f001 f9bd 	bl	80182ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016f70:	6878      	ldr	r0, [r7, #4]
 8016f72:	f000 fd2d 	bl	80179d0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016f76:	7bbb      	ldrb	r3, [r7, #14]
 8016f78:	4619      	mov	r1, r3
 8016f7a:	6878      	ldr	r0, [r7, #4]
 8016f7c:	f7ff fde4 	bl	8016b48 <USBD_CoreFindEP>
 8016f80:	4603      	mov	r3, r0
 8016f82:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016f84:	7b7b      	ldrb	r3, [r7, #13]
 8016f86:	2bff      	cmp	r3, #255	@ 0xff
 8016f88:	d01f      	beq.n	8016fca <USBD_StdEPReq+0x1c6>
 8016f8a:	7b7b      	ldrb	r3, [r7, #13]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d11c      	bne.n	8016fca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016f90:	7b7a      	ldrb	r2, [r7, #13]
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016f98:	7b7a      	ldrb	r2, [r7, #13]
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	32ae      	adds	r2, #174	@ 0xae
 8016f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fa2:	689b      	ldr	r3, [r3, #8]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d010      	beq.n	8016fca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016fa8:	7b7a      	ldrb	r2, [r7, #13]
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	32ae      	adds	r2, #174	@ 0xae
 8016fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fb2:	689b      	ldr	r3, [r3, #8]
 8016fb4:	6839      	ldr	r1, [r7, #0]
 8016fb6:	6878      	ldr	r0, [r7, #4]
 8016fb8:	4798      	blx	r3
 8016fba:	4603      	mov	r3, r0
 8016fbc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016fbe:	e004      	b.n	8016fca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016fc0:	6839      	ldr	r1, [r7, #0]
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	f000 fc2d 	bl	8017822 <USBD_CtlError>
              break;
 8016fc8:	e000      	b.n	8016fcc <USBD_StdEPReq+0x1c8>
              break;
 8016fca:	bf00      	nop
          }
          break;
 8016fcc:	e0ab      	b.n	8017126 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016fd4:	b2db      	uxtb	r3, r3
 8016fd6:	2b02      	cmp	r3, #2
 8016fd8:	d002      	beq.n	8016fe0 <USBD_StdEPReq+0x1dc>
 8016fda:	2b03      	cmp	r3, #3
 8016fdc:	d032      	beq.n	8017044 <USBD_StdEPReq+0x240>
 8016fde:	e097      	b.n	8017110 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016fe0:	7bbb      	ldrb	r3, [r7, #14]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d007      	beq.n	8016ff6 <USBD_StdEPReq+0x1f2>
 8016fe6:	7bbb      	ldrb	r3, [r7, #14]
 8016fe8:	2b80      	cmp	r3, #128	@ 0x80
 8016fea:	d004      	beq.n	8016ff6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016fec:	6839      	ldr	r1, [r7, #0]
 8016fee:	6878      	ldr	r0, [r7, #4]
 8016ff0:	f000 fc17 	bl	8017822 <USBD_CtlError>
                break;
 8016ff4:	e091      	b.n	801711a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016ff6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	da0b      	bge.n	8017016 <USBD_StdEPReq+0x212>
 8016ffe:	7bbb      	ldrb	r3, [r7, #14]
 8017000:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017004:	4613      	mov	r3, r2
 8017006:	009b      	lsls	r3, r3, #2
 8017008:	4413      	add	r3, r2
 801700a:	009b      	lsls	r3, r3, #2
 801700c:	3310      	adds	r3, #16
 801700e:	687a      	ldr	r2, [r7, #4]
 8017010:	4413      	add	r3, r2
 8017012:	3304      	adds	r3, #4
 8017014:	e00b      	b.n	801702e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017016:	7bbb      	ldrb	r3, [r7, #14]
 8017018:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801701c:	4613      	mov	r3, r2
 801701e:	009b      	lsls	r3, r3, #2
 8017020:	4413      	add	r3, r2
 8017022:	009b      	lsls	r3, r3, #2
 8017024:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017028:	687a      	ldr	r2, [r7, #4]
 801702a:	4413      	add	r3, r2
 801702c:	3304      	adds	r3, #4
 801702e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017030:	68bb      	ldr	r3, [r7, #8]
 8017032:	2200      	movs	r2, #0
 8017034:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017036:	68bb      	ldr	r3, [r7, #8]
 8017038:	2202      	movs	r2, #2
 801703a:	4619      	mov	r1, r3
 801703c:	6878      	ldr	r0, [r7, #4]
 801703e:	f000 fc6d 	bl	801791c <USBD_CtlSendData>
              break;
 8017042:	e06a      	b.n	801711a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017048:	2b00      	cmp	r3, #0
 801704a:	da11      	bge.n	8017070 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801704c:	7bbb      	ldrb	r3, [r7, #14]
 801704e:	f003 020f 	and.w	r2, r3, #15
 8017052:	6879      	ldr	r1, [r7, #4]
 8017054:	4613      	mov	r3, r2
 8017056:	009b      	lsls	r3, r3, #2
 8017058:	4413      	add	r3, r2
 801705a:	009b      	lsls	r3, r3, #2
 801705c:	440b      	add	r3, r1
 801705e:	3324      	adds	r3, #36	@ 0x24
 8017060:	881b      	ldrh	r3, [r3, #0]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d117      	bne.n	8017096 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8017066:	6839      	ldr	r1, [r7, #0]
 8017068:	6878      	ldr	r0, [r7, #4]
 801706a:	f000 fbda 	bl	8017822 <USBD_CtlError>
                  break;
 801706e:	e054      	b.n	801711a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017070:	7bbb      	ldrb	r3, [r7, #14]
 8017072:	f003 020f 	and.w	r2, r3, #15
 8017076:	6879      	ldr	r1, [r7, #4]
 8017078:	4613      	mov	r3, r2
 801707a:	009b      	lsls	r3, r3, #2
 801707c:	4413      	add	r3, r2
 801707e:	009b      	lsls	r3, r3, #2
 8017080:	440b      	add	r3, r1
 8017082:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017086:	881b      	ldrh	r3, [r3, #0]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d104      	bne.n	8017096 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801708c:	6839      	ldr	r1, [r7, #0]
 801708e:	6878      	ldr	r0, [r7, #4]
 8017090:	f000 fbc7 	bl	8017822 <USBD_CtlError>
                  break;
 8017094:	e041      	b.n	801711a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801709a:	2b00      	cmp	r3, #0
 801709c:	da0b      	bge.n	80170b6 <USBD_StdEPReq+0x2b2>
 801709e:	7bbb      	ldrb	r3, [r7, #14]
 80170a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80170a4:	4613      	mov	r3, r2
 80170a6:	009b      	lsls	r3, r3, #2
 80170a8:	4413      	add	r3, r2
 80170aa:	009b      	lsls	r3, r3, #2
 80170ac:	3310      	adds	r3, #16
 80170ae:	687a      	ldr	r2, [r7, #4]
 80170b0:	4413      	add	r3, r2
 80170b2:	3304      	adds	r3, #4
 80170b4:	e00b      	b.n	80170ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80170b6:	7bbb      	ldrb	r3, [r7, #14]
 80170b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80170bc:	4613      	mov	r3, r2
 80170be:	009b      	lsls	r3, r3, #2
 80170c0:	4413      	add	r3, r2
 80170c2:	009b      	lsls	r3, r3, #2
 80170c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80170c8:	687a      	ldr	r2, [r7, #4]
 80170ca:	4413      	add	r3, r2
 80170cc:	3304      	adds	r3, #4
 80170ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80170d0:	7bbb      	ldrb	r3, [r7, #14]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d002      	beq.n	80170dc <USBD_StdEPReq+0x2d8>
 80170d6:	7bbb      	ldrb	r3, [r7, #14]
 80170d8:	2b80      	cmp	r3, #128	@ 0x80
 80170da:	d103      	bne.n	80170e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80170dc:	68bb      	ldr	r3, [r7, #8]
 80170de:	2200      	movs	r2, #0
 80170e0:	601a      	str	r2, [r3, #0]
 80170e2:	e00e      	b.n	8017102 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80170e4:	7bbb      	ldrb	r3, [r7, #14]
 80170e6:	4619      	mov	r1, r3
 80170e8:	6878      	ldr	r0, [r7, #4]
 80170ea:	f001 f91d 	bl	8018328 <USBD_LL_IsStallEP>
 80170ee:	4603      	mov	r3, r0
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d003      	beq.n	80170fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80170f4:	68bb      	ldr	r3, [r7, #8]
 80170f6:	2201      	movs	r2, #1
 80170f8:	601a      	str	r2, [r3, #0]
 80170fa:	e002      	b.n	8017102 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80170fc:	68bb      	ldr	r3, [r7, #8]
 80170fe:	2200      	movs	r2, #0
 8017100:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017102:	68bb      	ldr	r3, [r7, #8]
 8017104:	2202      	movs	r2, #2
 8017106:	4619      	mov	r1, r3
 8017108:	6878      	ldr	r0, [r7, #4]
 801710a:	f000 fc07 	bl	801791c <USBD_CtlSendData>
              break;
 801710e:	e004      	b.n	801711a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8017110:	6839      	ldr	r1, [r7, #0]
 8017112:	6878      	ldr	r0, [r7, #4]
 8017114:	f000 fb85 	bl	8017822 <USBD_CtlError>
              break;
 8017118:	bf00      	nop
          }
          break;
 801711a:	e004      	b.n	8017126 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801711c:	6839      	ldr	r1, [r7, #0]
 801711e:	6878      	ldr	r0, [r7, #4]
 8017120:	f000 fb7f 	bl	8017822 <USBD_CtlError>
          break;
 8017124:	bf00      	nop
      }
      break;
 8017126:	e005      	b.n	8017134 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8017128:	6839      	ldr	r1, [r7, #0]
 801712a:	6878      	ldr	r0, [r7, #4]
 801712c:	f000 fb79 	bl	8017822 <USBD_CtlError>
      break;
 8017130:	e000      	b.n	8017134 <USBD_StdEPReq+0x330>
      break;
 8017132:	bf00      	nop
  }

  return ret;
 8017134:	7bfb      	ldrb	r3, [r7, #15]
}
 8017136:	4618      	mov	r0, r3
 8017138:	3710      	adds	r7, #16
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}
	...

08017140 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017140:	b580      	push	{r7, lr}
 8017142:	b084      	sub	sp, #16
 8017144:	af00      	add	r7, sp, #0
 8017146:	6078      	str	r0, [r7, #4]
 8017148:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801714a:	2300      	movs	r3, #0
 801714c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801714e:	2300      	movs	r3, #0
 8017150:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017152:	2300      	movs	r3, #0
 8017154:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017156:	683b      	ldr	r3, [r7, #0]
 8017158:	885b      	ldrh	r3, [r3, #2]
 801715a:	0a1b      	lsrs	r3, r3, #8
 801715c:	b29b      	uxth	r3, r3
 801715e:	3b01      	subs	r3, #1
 8017160:	2b0e      	cmp	r3, #14
 8017162:	f200 8152 	bhi.w	801740a <USBD_GetDescriptor+0x2ca>
 8017166:	a201      	add	r2, pc, #4	@ (adr r2, 801716c <USBD_GetDescriptor+0x2c>)
 8017168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801716c:	080171dd 	.word	0x080171dd
 8017170:	080171f5 	.word	0x080171f5
 8017174:	08017235 	.word	0x08017235
 8017178:	0801740b 	.word	0x0801740b
 801717c:	0801740b 	.word	0x0801740b
 8017180:	080173ab 	.word	0x080173ab
 8017184:	080173d7 	.word	0x080173d7
 8017188:	0801740b 	.word	0x0801740b
 801718c:	0801740b 	.word	0x0801740b
 8017190:	0801740b 	.word	0x0801740b
 8017194:	0801740b 	.word	0x0801740b
 8017198:	0801740b 	.word	0x0801740b
 801719c:	0801740b 	.word	0x0801740b
 80171a0:	0801740b 	.word	0x0801740b
 80171a4:	080171a9 	.word	0x080171a9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80171ae:	69db      	ldr	r3, [r3, #28]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d00b      	beq.n	80171cc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80171ba:	69db      	ldr	r3, [r3, #28]
 80171bc:	687a      	ldr	r2, [r7, #4]
 80171be:	7c12      	ldrb	r2, [r2, #16]
 80171c0:	f107 0108 	add.w	r1, r7, #8
 80171c4:	4610      	mov	r0, r2
 80171c6:	4798      	blx	r3
 80171c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80171ca:	e126      	b.n	801741a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80171cc:	6839      	ldr	r1, [r7, #0]
 80171ce:	6878      	ldr	r0, [r7, #4]
 80171d0:	f000 fb27 	bl	8017822 <USBD_CtlError>
        err++;
 80171d4:	7afb      	ldrb	r3, [r7, #11]
 80171d6:	3301      	adds	r3, #1
 80171d8:	72fb      	strb	r3, [r7, #11]
      break;
 80171da:	e11e      	b.n	801741a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	687a      	ldr	r2, [r7, #4]
 80171e6:	7c12      	ldrb	r2, [r2, #16]
 80171e8:	f107 0108 	add.w	r1, r7, #8
 80171ec:	4610      	mov	r0, r2
 80171ee:	4798      	blx	r3
 80171f0:	60f8      	str	r0, [r7, #12]
      break;
 80171f2:	e112      	b.n	801741a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	7c1b      	ldrb	r3, [r3, #16]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d10d      	bne.n	8017218 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017204:	f107 0208 	add.w	r2, r7, #8
 8017208:	4610      	mov	r0, r2
 801720a:	4798      	blx	r3
 801720c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	3301      	adds	r3, #1
 8017212:	2202      	movs	r2, #2
 8017214:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017216:	e100      	b.n	801741a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801721e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017220:	f107 0208 	add.w	r2, r7, #8
 8017224:	4610      	mov	r0, r2
 8017226:	4798      	blx	r3
 8017228:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	3301      	adds	r3, #1
 801722e:	2202      	movs	r2, #2
 8017230:	701a      	strb	r2, [r3, #0]
      break;
 8017232:	e0f2      	b.n	801741a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017234:	683b      	ldr	r3, [r7, #0]
 8017236:	885b      	ldrh	r3, [r3, #2]
 8017238:	b2db      	uxtb	r3, r3
 801723a:	2b05      	cmp	r3, #5
 801723c:	f200 80ac 	bhi.w	8017398 <USBD_GetDescriptor+0x258>
 8017240:	a201      	add	r2, pc, #4	@ (adr r2, 8017248 <USBD_GetDescriptor+0x108>)
 8017242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017246:	bf00      	nop
 8017248:	08017261 	.word	0x08017261
 801724c:	08017295 	.word	0x08017295
 8017250:	080172c9 	.word	0x080172c9
 8017254:	080172fd 	.word	0x080172fd
 8017258:	08017331 	.word	0x08017331
 801725c:	08017365 	.word	0x08017365
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017266:	685b      	ldr	r3, [r3, #4]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d00b      	beq.n	8017284 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017272:	685b      	ldr	r3, [r3, #4]
 8017274:	687a      	ldr	r2, [r7, #4]
 8017276:	7c12      	ldrb	r2, [r2, #16]
 8017278:	f107 0108 	add.w	r1, r7, #8
 801727c:	4610      	mov	r0, r2
 801727e:	4798      	blx	r3
 8017280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017282:	e091      	b.n	80173a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017284:	6839      	ldr	r1, [r7, #0]
 8017286:	6878      	ldr	r0, [r7, #4]
 8017288:	f000 facb 	bl	8017822 <USBD_CtlError>
            err++;
 801728c:	7afb      	ldrb	r3, [r7, #11]
 801728e:	3301      	adds	r3, #1
 8017290:	72fb      	strb	r3, [r7, #11]
          break;
 8017292:	e089      	b.n	80173a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801729a:	689b      	ldr	r3, [r3, #8]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d00b      	beq.n	80172b8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80172a6:	689b      	ldr	r3, [r3, #8]
 80172a8:	687a      	ldr	r2, [r7, #4]
 80172aa:	7c12      	ldrb	r2, [r2, #16]
 80172ac:	f107 0108 	add.w	r1, r7, #8
 80172b0:	4610      	mov	r0, r2
 80172b2:	4798      	blx	r3
 80172b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80172b6:	e077      	b.n	80173a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80172b8:	6839      	ldr	r1, [r7, #0]
 80172ba:	6878      	ldr	r0, [r7, #4]
 80172bc:	f000 fab1 	bl	8017822 <USBD_CtlError>
            err++;
 80172c0:	7afb      	ldrb	r3, [r7, #11]
 80172c2:	3301      	adds	r3, #1
 80172c4:	72fb      	strb	r3, [r7, #11]
          break;
 80172c6:	e06f      	b.n	80173a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80172ce:	68db      	ldr	r3, [r3, #12]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d00b      	beq.n	80172ec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80172da:	68db      	ldr	r3, [r3, #12]
 80172dc:	687a      	ldr	r2, [r7, #4]
 80172de:	7c12      	ldrb	r2, [r2, #16]
 80172e0:	f107 0108 	add.w	r1, r7, #8
 80172e4:	4610      	mov	r0, r2
 80172e6:	4798      	blx	r3
 80172e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80172ea:	e05d      	b.n	80173a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80172ec:	6839      	ldr	r1, [r7, #0]
 80172ee:	6878      	ldr	r0, [r7, #4]
 80172f0:	f000 fa97 	bl	8017822 <USBD_CtlError>
            err++;
 80172f4:	7afb      	ldrb	r3, [r7, #11]
 80172f6:	3301      	adds	r3, #1
 80172f8:	72fb      	strb	r3, [r7, #11]
          break;
 80172fa:	e055      	b.n	80173a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017302:	691b      	ldr	r3, [r3, #16]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d00b      	beq.n	8017320 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801730e:	691b      	ldr	r3, [r3, #16]
 8017310:	687a      	ldr	r2, [r7, #4]
 8017312:	7c12      	ldrb	r2, [r2, #16]
 8017314:	f107 0108 	add.w	r1, r7, #8
 8017318:	4610      	mov	r0, r2
 801731a:	4798      	blx	r3
 801731c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801731e:	e043      	b.n	80173a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017320:	6839      	ldr	r1, [r7, #0]
 8017322:	6878      	ldr	r0, [r7, #4]
 8017324:	f000 fa7d 	bl	8017822 <USBD_CtlError>
            err++;
 8017328:	7afb      	ldrb	r3, [r7, #11]
 801732a:	3301      	adds	r3, #1
 801732c:	72fb      	strb	r3, [r7, #11]
          break;
 801732e:	e03b      	b.n	80173a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017336:	695b      	ldr	r3, [r3, #20]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d00b      	beq.n	8017354 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017342:	695b      	ldr	r3, [r3, #20]
 8017344:	687a      	ldr	r2, [r7, #4]
 8017346:	7c12      	ldrb	r2, [r2, #16]
 8017348:	f107 0108 	add.w	r1, r7, #8
 801734c:	4610      	mov	r0, r2
 801734e:	4798      	blx	r3
 8017350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017352:	e029      	b.n	80173a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017354:	6839      	ldr	r1, [r7, #0]
 8017356:	6878      	ldr	r0, [r7, #4]
 8017358:	f000 fa63 	bl	8017822 <USBD_CtlError>
            err++;
 801735c:	7afb      	ldrb	r3, [r7, #11]
 801735e:	3301      	adds	r3, #1
 8017360:	72fb      	strb	r3, [r7, #11]
          break;
 8017362:	e021      	b.n	80173a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801736a:	699b      	ldr	r3, [r3, #24]
 801736c:	2b00      	cmp	r3, #0
 801736e:	d00b      	beq.n	8017388 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017376:	699b      	ldr	r3, [r3, #24]
 8017378:	687a      	ldr	r2, [r7, #4]
 801737a:	7c12      	ldrb	r2, [r2, #16]
 801737c:	f107 0108 	add.w	r1, r7, #8
 8017380:	4610      	mov	r0, r2
 8017382:	4798      	blx	r3
 8017384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017386:	e00f      	b.n	80173a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017388:	6839      	ldr	r1, [r7, #0]
 801738a:	6878      	ldr	r0, [r7, #4]
 801738c:	f000 fa49 	bl	8017822 <USBD_CtlError>
            err++;
 8017390:	7afb      	ldrb	r3, [r7, #11]
 8017392:	3301      	adds	r3, #1
 8017394:	72fb      	strb	r3, [r7, #11]
          break;
 8017396:	e007      	b.n	80173a8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017398:	6839      	ldr	r1, [r7, #0]
 801739a:	6878      	ldr	r0, [r7, #4]
 801739c:	f000 fa41 	bl	8017822 <USBD_CtlError>
          err++;
 80173a0:	7afb      	ldrb	r3, [r7, #11]
 80173a2:	3301      	adds	r3, #1
 80173a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80173a6:	bf00      	nop
      }
      break;
 80173a8:	e037      	b.n	801741a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	7c1b      	ldrb	r3, [r3, #16]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d109      	bne.n	80173c6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80173b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80173ba:	f107 0208 	add.w	r2, r7, #8
 80173be:	4610      	mov	r0, r2
 80173c0:	4798      	blx	r3
 80173c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80173c4:	e029      	b.n	801741a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80173c6:	6839      	ldr	r1, [r7, #0]
 80173c8:	6878      	ldr	r0, [r7, #4]
 80173ca:	f000 fa2a 	bl	8017822 <USBD_CtlError>
        err++;
 80173ce:	7afb      	ldrb	r3, [r7, #11]
 80173d0:	3301      	adds	r3, #1
 80173d2:	72fb      	strb	r3, [r7, #11]
      break;
 80173d4:	e021      	b.n	801741a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	7c1b      	ldrb	r3, [r3, #16]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d10d      	bne.n	80173fa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80173e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80173e6:	f107 0208 	add.w	r2, r7, #8
 80173ea:	4610      	mov	r0, r2
 80173ec:	4798      	blx	r3
 80173ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	3301      	adds	r3, #1
 80173f4:	2207      	movs	r2, #7
 80173f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80173f8:	e00f      	b.n	801741a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80173fa:	6839      	ldr	r1, [r7, #0]
 80173fc:	6878      	ldr	r0, [r7, #4]
 80173fe:	f000 fa10 	bl	8017822 <USBD_CtlError>
        err++;
 8017402:	7afb      	ldrb	r3, [r7, #11]
 8017404:	3301      	adds	r3, #1
 8017406:	72fb      	strb	r3, [r7, #11]
      break;
 8017408:	e007      	b.n	801741a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801740a:	6839      	ldr	r1, [r7, #0]
 801740c:	6878      	ldr	r0, [r7, #4]
 801740e:	f000 fa08 	bl	8017822 <USBD_CtlError>
      err++;
 8017412:	7afb      	ldrb	r3, [r7, #11]
 8017414:	3301      	adds	r3, #1
 8017416:	72fb      	strb	r3, [r7, #11]
      break;
 8017418:	bf00      	nop
  }

  if (err != 0U)
 801741a:	7afb      	ldrb	r3, [r7, #11]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d11e      	bne.n	801745e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8017420:	683b      	ldr	r3, [r7, #0]
 8017422:	88db      	ldrh	r3, [r3, #6]
 8017424:	2b00      	cmp	r3, #0
 8017426:	d016      	beq.n	8017456 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8017428:	893b      	ldrh	r3, [r7, #8]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d00e      	beq.n	801744c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801742e:	683b      	ldr	r3, [r7, #0]
 8017430:	88da      	ldrh	r2, [r3, #6]
 8017432:	893b      	ldrh	r3, [r7, #8]
 8017434:	4293      	cmp	r3, r2
 8017436:	bf28      	it	cs
 8017438:	4613      	movcs	r3, r2
 801743a:	b29b      	uxth	r3, r3
 801743c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801743e:	893b      	ldrh	r3, [r7, #8]
 8017440:	461a      	mov	r2, r3
 8017442:	68f9      	ldr	r1, [r7, #12]
 8017444:	6878      	ldr	r0, [r7, #4]
 8017446:	f000 fa69 	bl	801791c <USBD_CtlSendData>
 801744a:	e009      	b.n	8017460 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801744c:	6839      	ldr	r1, [r7, #0]
 801744e:	6878      	ldr	r0, [r7, #4]
 8017450:	f000 f9e7 	bl	8017822 <USBD_CtlError>
 8017454:	e004      	b.n	8017460 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017456:	6878      	ldr	r0, [r7, #4]
 8017458:	f000 faba 	bl	80179d0 <USBD_CtlSendStatus>
 801745c:	e000      	b.n	8017460 <USBD_GetDescriptor+0x320>
    return;
 801745e:	bf00      	nop
  }
}
 8017460:	3710      	adds	r7, #16
 8017462:	46bd      	mov	sp, r7
 8017464:	bd80      	pop	{r7, pc}
 8017466:	bf00      	nop

08017468 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b084      	sub	sp, #16
 801746c:	af00      	add	r7, sp, #0
 801746e:	6078      	str	r0, [r7, #4]
 8017470:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017472:	683b      	ldr	r3, [r7, #0]
 8017474:	889b      	ldrh	r3, [r3, #4]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d131      	bne.n	80174de <USBD_SetAddress+0x76>
 801747a:	683b      	ldr	r3, [r7, #0]
 801747c:	88db      	ldrh	r3, [r3, #6]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d12d      	bne.n	80174de <USBD_SetAddress+0x76>
 8017482:	683b      	ldr	r3, [r7, #0]
 8017484:	885b      	ldrh	r3, [r3, #2]
 8017486:	2b7f      	cmp	r3, #127	@ 0x7f
 8017488:	d829      	bhi.n	80174de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801748a:	683b      	ldr	r3, [r7, #0]
 801748c:	885b      	ldrh	r3, [r3, #2]
 801748e:	b2db      	uxtb	r3, r3
 8017490:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017494:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801749c:	b2db      	uxtb	r3, r3
 801749e:	2b03      	cmp	r3, #3
 80174a0:	d104      	bne.n	80174ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80174a2:	6839      	ldr	r1, [r7, #0]
 80174a4:	6878      	ldr	r0, [r7, #4]
 80174a6:	f000 f9bc 	bl	8017822 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80174aa:	e01d      	b.n	80174e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	7bfa      	ldrb	r2, [r7, #15]
 80174b0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80174b4:	7bfb      	ldrb	r3, [r7, #15]
 80174b6:	4619      	mov	r1, r3
 80174b8:	6878      	ldr	r0, [r7, #4]
 80174ba:	f000 ff61 	bl	8018380 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80174be:	6878      	ldr	r0, [r7, #4]
 80174c0:	f000 fa86 	bl	80179d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80174c4:	7bfb      	ldrb	r3, [r7, #15]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d004      	beq.n	80174d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	2202      	movs	r2, #2
 80174ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80174d2:	e009      	b.n	80174e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	2201      	movs	r2, #1
 80174d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80174dc:	e004      	b.n	80174e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80174de:	6839      	ldr	r1, [r7, #0]
 80174e0:	6878      	ldr	r0, [r7, #4]
 80174e2:	f000 f99e 	bl	8017822 <USBD_CtlError>
  }
}
 80174e6:	bf00      	nop
 80174e8:	bf00      	nop
 80174ea:	3710      	adds	r7, #16
 80174ec:	46bd      	mov	sp, r7
 80174ee:	bd80      	pop	{r7, pc}

080174f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b084      	sub	sp, #16
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
 80174f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80174fa:	2300      	movs	r3, #0
 80174fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80174fe:	683b      	ldr	r3, [r7, #0]
 8017500:	885b      	ldrh	r3, [r3, #2]
 8017502:	b2da      	uxtb	r2, r3
 8017504:	4b4e      	ldr	r3, [pc, #312]	@ (8017640 <USBD_SetConfig+0x150>)
 8017506:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017508:	4b4d      	ldr	r3, [pc, #308]	@ (8017640 <USBD_SetConfig+0x150>)
 801750a:	781b      	ldrb	r3, [r3, #0]
 801750c:	2b01      	cmp	r3, #1
 801750e:	d905      	bls.n	801751c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017510:	6839      	ldr	r1, [r7, #0]
 8017512:	6878      	ldr	r0, [r7, #4]
 8017514:	f000 f985 	bl	8017822 <USBD_CtlError>
    return USBD_FAIL;
 8017518:	2303      	movs	r3, #3
 801751a:	e08c      	b.n	8017636 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017522:	b2db      	uxtb	r3, r3
 8017524:	2b02      	cmp	r3, #2
 8017526:	d002      	beq.n	801752e <USBD_SetConfig+0x3e>
 8017528:	2b03      	cmp	r3, #3
 801752a:	d029      	beq.n	8017580 <USBD_SetConfig+0x90>
 801752c:	e075      	b.n	801761a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801752e:	4b44      	ldr	r3, [pc, #272]	@ (8017640 <USBD_SetConfig+0x150>)
 8017530:	781b      	ldrb	r3, [r3, #0]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d020      	beq.n	8017578 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8017536:	4b42      	ldr	r3, [pc, #264]	@ (8017640 <USBD_SetConfig+0x150>)
 8017538:	781b      	ldrb	r3, [r3, #0]
 801753a:	461a      	mov	r2, r3
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017540:	4b3f      	ldr	r3, [pc, #252]	@ (8017640 <USBD_SetConfig+0x150>)
 8017542:	781b      	ldrb	r3, [r3, #0]
 8017544:	4619      	mov	r1, r3
 8017546:	6878      	ldr	r0, [r7, #4]
 8017548:	f7fe ffb9 	bl	80164be <USBD_SetClassConfig>
 801754c:	4603      	mov	r3, r0
 801754e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017550:	7bfb      	ldrb	r3, [r7, #15]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d008      	beq.n	8017568 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8017556:	6839      	ldr	r1, [r7, #0]
 8017558:	6878      	ldr	r0, [r7, #4]
 801755a:	f000 f962 	bl	8017822 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	2202      	movs	r2, #2
 8017562:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017566:	e065      	b.n	8017634 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017568:	6878      	ldr	r0, [r7, #4]
 801756a:	f000 fa31 	bl	80179d0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	2203      	movs	r2, #3
 8017572:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017576:	e05d      	b.n	8017634 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017578:	6878      	ldr	r0, [r7, #4]
 801757a:	f000 fa29 	bl	80179d0 <USBD_CtlSendStatus>
      break;
 801757e:	e059      	b.n	8017634 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017580:	4b2f      	ldr	r3, [pc, #188]	@ (8017640 <USBD_SetConfig+0x150>)
 8017582:	781b      	ldrb	r3, [r3, #0]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d112      	bne.n	80175ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	2202      	movs	r2, #2
 801758c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017590:	4b2b      	ldr	r3, [pc, #172]	@ (8017640 <USBD_SetConfig+0x150>)
 8017592:	781b      	ldrb	r3, [r3, #0]
 8017594:	461a      	mov	r2, r3
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801759a:	4b29      	ldr	r3, [pc, #164]	@ (8017640 <USBD_SetConfig+0x150>)
 801759c:	781b      	ldrb	r3, [r3, #0]
 801759e:	4619      	mov	r1, r3
 80175a0:	6878      	ldr	r0, [r7, #4]
 80175a2:	f7fe ffa8 	bl	80164f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80175a6:	6878      	ldr	r0, [r7, #4]
 80175a8:	f000 fa12 	bl	80179d0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80175ac:	e042      	b.n	8017634 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80175ae:	4b24      	ldr	r3, [pc, #144]	@ (8017640 <USBD_SetConfig+0x150>)
 80175b0:	781b      	ldrb	r3, [r3, #0]
 80175b2:	461a      	mov	r2, r3
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	685b      	ldr	r3, [r3, #4]
 80175b8:	429a      	cmp	r2, r3
 80175ba:	d02a      	beq.n	8017612 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	685b      	ldr	r3, [r3, #4]
 80175c0:	b2db      	uxtb	r3, r3
 80175c2:	4619      	mov	r1, r3
 80175c4:	6878      	ldr	r0, [r7, #4]
 80175c6:	f7fe ff96 	bl	80164f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80175ca:	4b1d      	ldr	r3, [pc, #116]	@ (8017640 <USBD_SetConfig+0x150>)
 80175cc:	781b      	ldrb	r3, [r3, #0]
 80175ce:	461a      	mov	r2, r3
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80175d4:	4b1a      	ldr	r3, [pc, #104]	@ (8017640 <USBD_SetConfig+0x150>)
 80175d6:	781b      	ldrb	r3, [r3, #0]
 80175d8:	4619      	mov	r1, r3
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	f7fe ff6f 	bl	80164be <USBD_SetClassConfig>
 80175e0:	4603      	mov	r3, r0
 80175e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80175e4:	7bfb      	ldrb	r3, [r7, #15]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d00f      	beq.n	801760a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80175ea:	6839      	ldr	r1, [r7, #0]
 80175ec:	6878      	ldr	r0, [r7, #4]
 80175ee:	f000 f918 	bl	8017822 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	685b      	ldr	r3, [r3, #4]
 80175f6:	b2db      	uxtb	r3, r3
 80175f8:	4619      	mov	r1, r3
 80175fa:	6878      	ldr	r0, [r7, #4]
 80175fc:	f7fe ff7b 	bl	80164f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	2202      	movs	r2, #2
 8017604:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017608:	e014      	b.n	8017634 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801760a:	6878      	ldr	r0, [r7, #4]
 801760c:	f000 f9e0 	bl	80179d0 <USBD_CtlSendStatus>
      break;
 8017610:	e010      	b.n	8017634 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017612:	6878      	ldr	r0, [r7, #4]
 8017614:	f000 f9dc 	bl	80179d0 <USBD_CtlSendStatus>
      break;
 8017618:	e00c      	b.n	8017634 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801761a:	6839      	ldr	r1, [r7, #0]
 801761c:	6878      	ldr	r0, [r7, #4]
 801761e:	f000 f900 	bl	8017822 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017622:	4b07      	ldr	r3, [pc, #28]	@ (8017640 <USBD_SetConfig+0x150>)
 8017624:	781b      	ldrb	r3, [r3, #0]
 8017626:	4619      	mov	r1, r3
 8017628:	6878      	ldr	r0, [r7, #4]
 801762a:	f7fe ff64 	bl	80164f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801762e:	2303      	movs	r3, #3
 8017630:	73fb      	strb	r3, [r7, #15]
      break;
 8017632:	bf00      	nop
  }

  return ret;
 8017634:	7bfb      	ldrb	r3, [r7, #15]
}
 8017636:	4618      	mov	r0, r3
 8017638:	3710      	adds	r7, #16
 801763a:	46bd      	mov	sp, r7
 801763c:	bd80      	pop	{r7, pc}
 801763e:	bf00      	nop
 8017640:	24025d60 	.word	0x24025d60

08017644 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b082      	sub	sp, #8
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
 801764c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801764e:	683b      	ldr	r3, [r7, #0]
 8017650:	88db      	ldrh	r3, [r3, #6]
 8017652:	2b01      	cmp	r3, #1
 8017654:	d004      	beq.n	8017660 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017656:	6839      	ldr	r1, [r7, #0]
 8017658:	6878      	ldr	r0, [r7, #4]
 801765a:	f000 f8e2 	bl	8017822 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801765e:	e023      	b.n	80176a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017666:	b2db      	uxtb	r3, r3
 8017668:	2b02      	cmp	r3, #2
 801766a:	dc02      	bgt.n	8017672 <USBD_GetConfig+0x2e>
 801766c:	2b00      	cmp	r3, #0
 801766e:	dc03      	bgt.n	8017678 <USBD_GetConfig+0x34>
 8017670:	e015      	b.n	801769e <USBD_GetConfig+0x5a>
 8017672:	2b03      	cmp	r3, #3
 8017674:	d00b      	beq.n	801768e <USBD_GetConfig+0x4a>
 8017676:	e012      	b.n	801769e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	2200      	movs	r2, #0
 801767c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	3308      	adds	r3, #8
 8017682:	2201      	movs	r2, #1
 8017684:	4619      	mov	r1, r3
 8017686:	6878      	ldr	r0, [r7, #4]
 8017688:	f000 f948 	bl	801791c <USBD_CtlSendData>
        break;
 801768c:	e00c      	b.n	80176a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	3304      	adds	r3, #4
 8017692:	2201      	movs	r2, #1
 8017694:	4619      	mov	r1, r3
 8017696:	6878      	ldr	r0, [r7, #4]
 8017698:	f000 f940 	bl	801791c <USBD_CtlSendData>
        break;
 801769c:	e004      	b.n	80176a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801769e:	6839      	ldr	r1, [r7, #0]
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f000 f8be 	bl	8017822 <USBD_CtlError>
        break;
 80176a6:	bf00      	nop
}
 80176a8:	bf00      	nop
 80176aa:	3708      	adds	r7, #8
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}

080176b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b082      	sub	sp, #8
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
 80176b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80176c0:	b2db      	uxtb	r3, r3
 80176c2:	3b01      	subs	r3, #1
 80176c4:	2b02      	cmp	r3, #2
 80176c6:	d81e      	bhi.n	8017706 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80176c8:	683b      	ldr	r3, [r7, #0]
 80176ca:	88db      	ldrh	r3, [r3, #6]
 80176cc:	2b02      	cmp	r3, #2
 80176ce:	d004      	beq.n	80176da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80176d0:	6839      	ldr	r1, [r7, #0]
 80176d2:	6878      	ldr	r0, [r7, #4]
 80176d4:	f000 f8a5 	bl	8017822 <USBD_CtlError>
        break;
 80176d8:	e01a      	b.n	8017710 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	2201      	movs	r2, #1
 80176de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d005      	beq.n	80176f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	68db      	ldr	r3, [r3, #12]
 80176ee:	f043 0202 	orr.w	r2, r3, #2
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	330c      	adds	r3, #12
 80176fa:	2202      	movs	r2, #2
 80176fc:	4619      	mov	r1, r3
 80176fe:	6878      	ldr	r0, [r7, #4]
 8017700:	f000 f90c 	bl	801791c <USBD_CtlSendData>
      break;
 8017704:	e004      	b.n	8017710 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017706:	6839      	ldr	r1, [r7, #0]
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f000 f88a 	bl	8017822 <USBD_CtlError>
      break;
 801770e:	bf00      	nop
  }
}
 8017710:	bf00      	nop
 8017712:	3708      	adds	r7, #8
 8017714:	46bd      	mov	sp, r7
 8017716:	bd80      	pop	{r7, pc}

08017718 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017718:	b580      	push	{r7, lr}
 801771a:	b082      	sub	sp, #8
 801771c:	af00      	add	r7, sp, #0
 801771e:	6078      	str	r0, [r7, #4]
 8017720:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017722:	683b      	ldr	r3, [r7, #0]
 8017724:	885b      	ldrh	r3, [r3, #2]
 8017726:	2b01      	cmp	r3, #1
 8017728:	d107      	bne.n	801773a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	2201      	movs	r2, #1
 801772e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017732:	6878      	ldr	r0, [r7, #4]
 8017734:	f000 f94c 	bl	80179d0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017738:	e013      	b.n	8017762 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801773a:	683b      	ldr	r3, [r7, #0]
 801773c:	885b      	ldrh	r3, [r3, #2]
 801773e:	2b02      	cmp	r3, #2
 8017740:	d10b      	bne.n	801775a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8017742:	683b      	ldr	r3, [r7, #0]
 8017744:	889b      	ldrh	r3, [r3, #4]
 8017746:	0a1b      	lsrs	r3, r3, #8
 8017748:	b29b      	uxth	r3, r3
 801774a:	b2da      	uxtb	r2, r3
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8017752:	6878      	ldr	r0, [r7, #4]
 8017754:	f000 f93c 	bl	80179d0 <USBD_CtlSendStatus>
}
 8017758:	e003      	b.n	8017762 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801775a:	6839      	ldr	r1, [r7, #0]
 801775c:	6878      	ldr	r0, [r7, #4]
 801775e:	f000 f860 	bl	8017822 <USBD_CtlError>
}
 8017762:	bf00      	nop
 8017764:	3708      	adds	r7, #8
 8017766:	46bd      	mov	sp, r7
 8017768:	bd80      	pop	{r7, pc}

0801776a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801776a:	b580      	push	{r7, lr}
 801776c:	b082      	sub	sp, #8
 801776e:	af00      	add	r7, sp, #0
 8017770:	6078      	str	r0, [r7, #4]
 8017772:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801777a:	b2db      	uxtb	r3, r3
 801777c:	3b01      	subs	r3, #1
 801777e:	2b02      	cmp	r3, #2
 8017780:	d80b      	bhi.n	801779a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017782:	683b      	ldr	r3, [r7, #0]
 8017784:	885b      	ldrh	r3, [r3, #2]
 8017786:	2b01      	cmp	r3, #1
 8017788:	d10c      	bne.n	80177a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	2200      	movs	r2, #0
 801778e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017792:	6878      	ldr	r0, [r7, #4]
 8017794:	f000 f91c 	bl	80179d0 <USBD_CtlSendStatus>
      }
      break;
 8017798:	e004      	b.n	80177a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801779a:	6839      	ldr	r1, [r7, #0]
 801779c:	6878      	ldr	r0, [r7, #4]
 801779e:	f000 f840 	bl	8017822 <USBD_CtlError>
      break;
 80177a2:	e000      	b.n	80177a6 <USBD_ClrFeature+0x3c>
      break;
 80177a4:	bf00      	nop
  }
}
 80177a6:	bf00      	nop
 80177a8:	3708      	adds	r7, #8
 80177aa:	46bd      	mov	sp, r7
 80177ac:	bd80      	pop	{r7, pc}

080177ae <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80177ae:	b580      	push	{r7, lr}
 80177b0:	b084      	sub	sp, #16
 80177b2:	af00      	add	r7, sp, #0
 80177b4:	6078      	str	r0, [r7, #4]
 80177b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80177b8:	683b      	ldr	r3, [r7, #0]
 80177ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	781a      	ldrb	r2, [r3, #0]
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	3301      	adds	r3, #1
 80177c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	781a      	ldrb	r2, [r3, #0]
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	3301      	adds	r3, #1
 80177d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80177d8:	68f8      	ldr	r0, [r7, #12]
 80177da:	f7ff fa16 	bl	8016c0a <SWAPBYTE>
 80177de:	4603      	mov	r3, r0
 80177e0:	461a      	mov	r2, r3
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	3301      	adds	r3, #1
 80177ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	3301      	adds	r3, #1
 80177f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80177f2:	68f8      	ldr	r0, [r7, #12]
 80177f4:	f7ff fa09 	bl	8016c0a <SWAPBYTE>
 80177f8:	4603      	mov	r3, r0
 80177fa:	461a      	mov	r2, r3
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	3301      	adds	r3, #1
 8017804:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	3301      	adds	r3, #1
 801780a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801780c:	68f8      	ldr	r0, [r7, #12]
 801780e:	f7ff f9fc 	bl	8016c0a <SWAPBYTE>
 8017812:	4603      	mov	r3, r0
 8017814:	461a      	mov	r2, r3
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	80da      	strh	r2, [r3, #6]
}
 801781a:	bf00      	nop
 801781c:	3710      	adds	r7, #16
 801781e:	46bd      	mov	sp, r7
 8017820:	bd80      	pop	{r7, pc}

08017822 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017822:	b580      	push	{r7, lr}
 8017824:	b082      	sub	sp, #8
 8017826:	af00      	add	r7, sp, #0
 8017828:	6078      	str	r0, [r7, #4]
 801782a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801782c:	2180      	movs	r1, #128	@ 0x80
 801782e:	6878      	ldr	r0, [r7, #4]
 8017830:	f000 fd3c 	bl	80182ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017834:	2100      	movs	r1, #0
 8017836:	6878      	ldr	r0, [r7, #4]
 8017838:	f000 fd38 	bl	80182ac <USBD_LL_StallEP>
}
 801783c:	bf00      	nop
 801783e:	3708      	adds	r7, #8
 8017840:	46bd      	mov	sp, r7
 8017842:	bd80      	pop	{r7, pc}

08017844 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b086      	sub	sp, #24
 8017848:	af00      	add	r7, sp, #0
 801784a:	60f8      	str	r0, [r7, #12]
 801784c:	60b9      	str	r1, [r7, #8]
 801784e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017850:	2300      	movs	r3, #0
 8017852:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d042      	beq.n	80178e0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801785e:	6938      	ldr	r0, [r7, #16]
 8017860:	f000 f842 	bl	80178e8 <USBD_GetLen>
 8017864:	4603      	mov	r3, r0
 8017866:	3301      	adds	r3, #1
 8017868:	005b      	lsls	r3, r3, #1
 801786a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801786e:	d808      	bhi.n	8017882 <USBD_GetString+0x3e>
 8017870:	6938      	ldr	r0, [r7, #16]
 8017872:	f000 f839 	bl	80178e8 <USBD_GetLen>
 8017876:	4603      	mov	r3, r0
 8017878:	3301      	adds	r3, #1
 801787a:	b29b      	uxth	r3, r3
 801787c:	005b      	lsls	r3, r3, #1
 801787e:	b29a      	uxth	r2, r3
 8017880:	e001      	b.n	8017886 <USBD_GetString+0x42>
 8017882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801788a:	7dfb      	ldrb	r3, [r7, #23]
 801788c:	68ba      	ldr	r2, [r7, #8]
 801788e:	4413      	add	r3, r2
 8017890:	687a      	ldr	r2, [r7, #4]
 8017892:	7812      	ldrb	r2, [r2, #0]
 8017894:	701a      	strb	r2, [r3, #0]
  idx++;
 8017896:	7dfb      	ldrb	r3, [r7, #23]
 8017898:	3301      	adds	r3, #1
 801789a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801789c:	7dfb      	ldrb	r3, [r7, #23]
 801789e:	68ba      	ldr	r2, [r7, #8]
 80178a0:	4413      	add	r3, r2
 80178a2:	2203      	movs	r2, #3
 80178a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80178a6:	7dfb      	ldrb	r3, [r7, #23]
 80178a8:	3301      	adds	r3, #1
 80178aa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80178ac:	e013      	b.n	80178d6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80178ae:	7dfb      	ldrb	r3, [r7, #23]
 80178b0:	68ba      	ldr	r2, [r7, #8]
 80178b2:	4413      	add	r3, r2
 80178b4:	693a      	ldr	r2, [r7, #16]
 80178b6:	7812      	ldrb	r2, [r2, #0]
 80178b8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80178ba:	693b      	ldr	r3, [r7, #16]
 80178bc:	3301      	adds	r3, #1
 80178be:	613b      	str	r3, [r7, #16]
    idx++;
 80178c0:	7dfb      	ldrb	r3, [r7, #23]
 80178c2:	3301      	adds	r3, #1
 80178c4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80178c6:	7dfb      	ldrb	r3, [r7, #23]
 80178c8:	68ba      	ldr	r2, [r7, #8]
 80178ca:	4413      	add	r3, r2
 80178cc:	2200      	movs	r2, #0
 80178ce:	701a      	strb	r2, [r3, #0]
    idx++;
 80178d0:	7dfb      	ldrb	r3, [r7, #23]
 80178d2:	3301      	adds	r3, #1
 80178d4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80178d6:	693b      	ldr	r3, [r7, #16]
 80178d8:	781b      	ldrb	r3, [r3, #0]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d1e7      	bne.n	80178ae <USBD_GetString+0x6a>
 80178de:	e000      	b.n	80178e2 <USBD_GetString+0x9e>
    return;
 80178e0:	bf00      	nop
  }
}
 80178e2:	3718      	adds	r7, #24
 80178e4:	46bd      	mov	sp, r7
 80178e6:	bd80      	pop	{r7, pc}

080178e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80178e8:	b480      	push	{r7}
 80178ea:	b085      	sub	sp, #20
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80178f0:	2300      	movs	r3, #0
 80178f2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80178f8:	e005      	b.n	8017906 <USBD_GetLen+0x1e>
  {
    len++;
 80178fa:	7bfb      	ldrb	r3, [r7, #15]
 80178fc:	3301      	adds	r3, #1
 80178fe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017900:	68bb      	ldr	r3, [r7, #8]
 8017902:	3301      	adds	r3, #1
 8017904:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017906:	68bb      	ldr	r3, [r7, #8]
 8017908:	781b      	ldrb	r3, [r3, #0]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d1f5      	bne.n	80178fa <USBD_GetLen+0x12>
  }

  return len;
 801790e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017910:	4618      	mov	r0, r3
 8017912:	3714      	adds	r7, #20
 8017914:	46bd      	mov	sp, r7
 8017916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801791a:	4770      	bx	lr

0801791c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b084      	sub	sp, #16
 8017920:	af00      	add	r7, sp, #0
 8017922:	60f8      	str	r0, [r7, #12]
 8017924:	60b9      	str	r1, [r7, #8]
 8017926:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	2202      	movs	r2, #2
 801792c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	687a      	ldr	r2, [r7, #4]
 8017934:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	687a      	ldr	r2, [r7, #4]
 801793a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	68ba      	ldr	r2, [r7, #8]
 8017940:	2100      	movs	r1, #0
 8017942:	68f8      	ldr	r0, [r7, #12]
 8017944:	f000 fd3b 	bl	80183be <USBD_LL_Transmit>

  return USBD_OK;
 8017948:	2300      	movs	r3, #0
}
 801794a:	4618      	mov	r0, r3
 801794c:	3710      	adds	r7, #16
 801794e:	46bd      	mov	sp, r7
 8017950:	bd80      	pop	{r7, pc}

08017952 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017952:	b580      	push	{r7, lr}
 8017954:	b084      	sub	sp, #16
 8017956:	af00      	add	r7, sp, #0
 8017958:	60f8      	str	r0, [r7, #12]
 801795a:	60b9      	str	r1, [r7, #8]
 801795c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	68ba      	ldr	r2, [r7, #8]
 8017962:	2100      	movs	r1, #0
 8017964:	68f8      	ldr	r0, [r7, #12]
 8017966:	f000 fd2a 	bl	80183be <USBD_LL_Transmit>

  return USBD_OK;
 801796a:	2300      	movs	r3, #0
}
 801796c:	4618      	mov	r0, r3
 801796e:	3710      	adds	r7, #16
 8017970:	46bd      	mov	sp, r7
 8017972:	bd80      	pop	{r7, pc}

08017974 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b084      	sub	sp, #16
 8017978:	af00      	add	r7, sp, #0
 801797a:	60f8      	str	r0, [r7, #12]
 801797c:	60b9      	str	r1, [r7, #8]
 801797e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	2203      	movs	r2, #3
 8017984:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	687a      	ldr	r2, [r7, #4]
 801798c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	687a      	ldr	r2, [r7, #4]
 8017994:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	68ba      	ldr	r2, [r7, #8]
 801799c:	2100      	movs	r1, #0
 801799e:	68f8      	ldr	r0, [r7, #12]
 80179a0:	f000 fd2e 	bl	8018400 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80179a4:	2300      	movs	r3, #0
}
 80179a6:	4618      	mov	r0, r3
 80179a8:	3710      	adds	r7, #16
 80179aa:	46bd      	mov	sp, r7
 80179ac:	bd80      	pop	{r7, pc}

080179ae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80179ae:	b580      	push	{r7, lr}
 80179b0:	b084      	sub	sp, #16
 80179b2:	af00      	add	r7, sp, #0
 80179b4:	60f8      	str	r0, [r7, #12]
 80179b6:	60b9      	str	r1, [r7, #8]
 80179b8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	68ba      	ldr	r2, [r7, #8]
 80179be:	2100      	movs	r1, #0
 80179c0:	68f8      	ldr	r0, [r7, #12]
 80179c2:	f000 fd1d 	bl	8018400 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80179c6:	2300      	movs	r3, #0
}
 80179c8:	4618      	mov	r0, r3
 80179ca:	3710      	adds	r7, #16
 80179cc:	46bd      	mov	sp, r7
 80179ce:	bd80      	pop	{r7, pc}

080179d0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b082      	sub	sp, #8
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	2204      	movs	r2, #4
 80179dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80179e0:	2300      	movs	r3, #0
 80179e2:	2200      	movs	r2, #0
 80179e4:	2100      	movs	r1, #0
 80179e6:	6878      	ldr	r0, [r7, #4]
 80179e8:	f000 fce9 	bl	80183be <USBD_LL_Transmit>

  return USBD_OK;
 80179ec:	2300      	movs	r3, #0
}
 80179ee:	4618      	mov	r0, r3
 80179f0:	3708      	adds	r7, #8
 80179f2:	46bd      	mov	sp, r7
 80179f4:	bd80      	pop	{r7, pc}

080179f6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80179f6:	b580      	push	{r7, lr}
 80179f8:	b082      	sub	sp, #8
 80179fa:	af00      	add	r7, sp, #0
 80179fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	2205      	movs	r2, #5
 8017a02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017a06:	2300      	movs	r3, #0
 8017a08:	2200      	movs	r2, #0
 8017a0a:	2100      	movs	r1, #0
 8017a0c:	6878      	ldr	r0, [r7, #4]
 8017a0e:	f000 fcf7 	bl	8018400 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017a12:	2300      	movs	r3, #0
}
 8017a14:	4618      	mov	r0, r3
 8017a16:	3708      	adds	r7, #8
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	bd80      	pop	{r7, pc}

08017a1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017a20:	2200      	movs	r2, #0
 8017a22:	4918      	ldr	r1, [pc, #96]	@ (8017a84 <MX_USB_DEVICE_Init+0x68>)
 8017a24:	4818      	ldr	r0, [pc, #96]	@ (8017a88 <MX_USB_DEVICE_Init+0x6c>)
 8017a26:	f7fe fccd 	bl	80163c4 <USBD_Init>
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d001      	beq.n	8017a34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017a30:	f7ea fbf2 	bl	8002218 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017a34:	4915      	ldr	r1, [pc, #84]	@ (8017a8c <MX_USB_DEVICE_Init+0x70>)
 8017a36:	4814      	ldr	r0, [pc, #80]	@ (8017a88 <MX_USB_DEVICE_Init+0x6c>)
 8017a38:	f7fe fcf4 	bl	8016424 <USBD_RegisterClass>
 8017a3c:	4603      	mov	r3, r0
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d001      	beq.n	8017a46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017a42:	f7ea fbe9 	bl	8002218 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017a46:	4912      	ldr	r1, [pc, #72]	@ (8017a90 <MX_USB_DEVICE_Init+0x74>)
 8017a48:	480f      	ldr	r0, [pc, #60]	@ (8017a88 <MX_USB_DEVICE_Init+0x6c>)
 8017a4a:	f7fe fbeb 	bl	8016224 <USBD_CDC_RegisterInterface>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d001      	beq.n	8017a58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017a54:	f7ea fbe0 	bl	8002218 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017a58:	480b      	ldr	r0, [pc, #44]	@ (8017a88 <MX_USB_DEVICE_Init+0x6c>)
 8017a5a:	f7fe fd19 	bl	8016490 <USBD_Start>
 8017a5e:	4603      	mov	r3, r0
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d001      	beq.n	8017a68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017a64:	f7ea fbd8 	bl	8002218 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017a68:	f7f5 fb42 	bl	800d0f0 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8017a6c:	4b06      	ldr	r3, [pc, #24]	@ (8017a88 <MX_USB_DEVICE_Init+0x6c>)
 8017a6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017a72:	4a05      	ldr	r2, [pc, #20]	@ (8017a88 <MX_USB_DEVICE_Init+0x6c>)
 8017a74:	33b0      	adds	r3, #176	@ 0xb0
 8017a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017a7a:	4a06      	ldr	r2, [pc, #24]	@ (8017a94 <MX_USB_DEVICE_Init+0x78>)
 8017a7c:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017a7e:	bf00      	nop
 8017a80:	bd80      	pop	{r7, pc}
 8017a82:	bf00      	nop
 8017a84:	240000c8 	.word	0x240000c8
 8017a88:	24025d64 	.word	0x24025d64
 8017a8c:	24000034 	.word	0x24000034
 8017a90:	240000b4 	.word	0x240000b4
 8017a94:	24026040 	.word	0x24026040

08017a98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017a9c:	2200      	movs	r2, #0
 8017a9e:	4905      	ldr	r1, [pc, #20]	@ (8017ab4 <CDC_Init_FS+0x1c>)
 8017aa0:	4805      	ldr	r0, [pc, #20]	@ (8017ab8 <CDC_Init_FS+0x20>)
 8017aa2:	f7fe fbd9 	bl	8016258 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017aa6:	4905      	ldr	r1, [pc, #20]	@ (8017abc <CDC_Init_FS+0x24>)
 8017aa8:	4803      	ldr	r0, [pc, #12]	@ (8017ab8 <CDC_Init_FS+0x20>)
 8017aaa:	f7fe fbf7 	bl	801629c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017aae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	bd80      	pop	{r7, pc}
 8017ab4:	24026844 	.word	0x24026844
 8017ab8:	24025d64 	.word	0x24025d64
 8017abc:	24026044 	.word	0x24026044

08017ac0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017ac0:	b480      	push	{r7}
 8017ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017ac4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	46bd      	mov	sp, r7
 8017aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ace:	4770      	bx	lr

08017ad0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017ad0:	b480      	push	{r7}
 8017ad2:	b083      	sub	sp, #12
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	4603      	mov	r3, r0
 8017ad8:	6039      	str	r1, [r7, #0]
 8017ada:	71fb      	strb	r3, [r7, #7]
 8017adc:	4613      	mov	r3, r2
 8017ade:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017ae0:	79fb      	ldrb	r3, [r7, #7]
 8017ae2:	2b23      	cmp	r3, #35	@ 0x23
 8017ae4:	d84a      	bhi.n	8017b7c <CDC_Control_FS+0xac>
 8017ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8017aec <CDC_Control_FS+0x1c>)
 8017ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017aec:	08017b7d 	.word	0x08017b7d
 8017af0:	08017b7d 	.word	0x08017b7d
 8017af4:	08017b7d 	.word	0x08017b7d
 8017af8:	08017b7d 	.word	0x08017b7d
 8017afc:	08017b7d 	.word	0x08017b7d
 8017b00:	08017b7d 	.word	0x08017b7d
 8017b04:	08017b7d 	.word	0x08017b7d
 8017b08:	08017b7d 	.word	0x08017b7d
 8017b0c:	08017b7d 	.word	0x08017b7d
 8017b10:	08017b7d 	.word	0x08017b7d
 8017b14:	08017b7d 	.word	0x08017b7d
 8017b18:	08017b7d 	.word	0x08017b7d
 8017b1c:	08017b7d 	.word	0x08017b7d
 8017b20:	08017b7d 	.word	0x08017b7d
 8017b24:	08017b7d 	.word	0x08017b7d
 8017b28:	08017b7d 	.word	0x08017b7d
 8017b2c:	08017b7d 	.word	0x08017b7d
 8017b30:	08017b7d 	.word	0x08017b7d
 8017b34:	08017b7d 	.word	0x08017b7d
 8017b38:	08017b7d 	.word	0x08017b7d
 8017b3c:	08017b7d 	.word	0x08017b7d
 8017b40:	08017b7d 	.word	0x08017b7d
 8017b44:	08017b7d 	.word	0x08017b7d
 8017b48:	08017b7d 	.word	0x08017b7d
 8017b4c:	08017b7d 	.word	0x08017b7d
 8017b50:	08017b7d 	.word	0x08017b7d
 8017b54:	08017b7d 	.word	0x08017b7d
 8017b58:	08017b7d 	.word	0x08017b7d
 8017b5c:	08017b7d 	.word	0x08017b7d
 8017b60:	08017b7d 	.word	0x08017b7d
 8017b64:	08017b7d 	.word	0x08017b7d
 8017b68:	08017b7d 	.word	0x08017b7d
 8017b6c:	08017b7d 	.word	0x08017b7d
 8017b70:	08017b7d 	.word	0x08017b7d
 8017b74:	08017b7d 	.word	0x08017b7d
 8017b78:	08017b7d 	.word	0x08017b7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017b7c:	bf00      	nop
  }

  return (USBD_OK);
 8017b7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017b80:	4618      	mov	r0, r3
 8017b82:	370c      	adds	r7, #12
 8017b84:	46bd      	mov	sp, r7
 8017b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8a:	4770      	bx	lr

08017b8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b084      	sub	sp, #16
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	6078      	str	r0, [r7, #4]
 8017b94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017b96:	6879      	ldr	r1, [r7, #4]
 8017b98:	4811      	ldr	r0, [pc, #68]	@ (8017be0 <CDC_Receive_FS+0x54>)
 8017b9a:	f7fe fb7f 	bl	801629c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017b9e:	4810      	ldr	r0, [pc, #64]	@ (8017be0 <CDC_Receive_FS+0x54>)
 8017ba0:	f7fe fbda 	bl	8016358 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 8017ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8017be4 <CDC_Receive_FS+0x58>)
 8017ba6:	2201      	movs	r2, #1
 8017ba8:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit(&huart1, Buf, *Len, 100)) {
 8017baa:	683b      	ldr	r3, [r7, #0]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	b29a      	uxth	r2, r3
 8017bb0:	2364      	movs	r3, #100	@ 0x64
 8017bb2:	6879      	ldr	r1, [r7, #4]
 8017bb4:	480c      	ldr	r0, [pc, #48]	@ (8017be8 <CDC_Receive_FS+0x5c>)
 8017bb6:	f7fa fa59 	bl	801206c <HAL_UART_Transmit>
 8017bba:	4603      	mov	r3, r0
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d00a      	beq.n	8017bd6 <CDC_Receive_FS+0x4a>
		uint8_t* usb_msg = "Failed to TX\n";
 8017bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8017bec <CDC_Receive_FS+0x60>)
 8017bc2:	60fb      	str	r3, [r7, #12]
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8017bc4:	68f8      	ldr	r0, [r7, #12]
 8017bc6:	f7e8 fbdb 	bl	8000380 <strlen>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	b29b      	uxth	r3, r3
 8017bce:	4619      	mov	r1, r3
 8017bd0:	68f8      	ldr	r0, [r7, #12]
 8017bd2:	f000 f80d 	bl	8017bf0 <CDC_Transmit_FS>
	}

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8017bd6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017bd8:	4618      	mov	r0, r3
 8017bda:	3710      	adds	r7, #16
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bd80      	pop	{r7, pc}
 8017be0:	24025d64 	.word	0x24025d64
 8017be4:	24000938 	.word	0x24000938
 8017be8:	2400079c 	.word	0x2400079c
 8017bec:	0801b2c4 	.word	0x0801b2c4

08017bf0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b084      	sub	sp, #16
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	6078      	str	r0, [r7, #4]
 8017bf8:	460b      	mov	r3, r1
 8017bfa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017c00:	4b0d      	ldr	r3, [pc, #52]	@ (8017c38 <CDC_Transmit_FS+0x48>)
 8017c02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8017c06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017c08:	68bb      	ldr	r3, [r7, #8]
 8017c0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d001      	beq.n	8017c16 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8017c12:	2301      	movs	r3, #1
 8017c14:	e00b      	b.n	8017c2e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8017c16:	887b      	ldrh	r3, [r7, #2]
 8017c18:	461a      	mov	r2, r3
 8017c1a:	6879      	ldr	r1, [r7, #4]
 8017c1c:	4806      	ldr	r0, [pc, #24]	@ (8017c38 <CDC_Transmit_FS+0x48>)
 8017c1e:	f7fe fb1b 	bl	8016258 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017c22:	4805      	ldr	r0, [pc, #20]	@ (8017c38 <CDC_Transmit_FS+0x48>)
 8017c24:	f7fe fb58 	bl	80162d8 <USBD_CDC_TransmitPacket>
 8017c28:	4603      	mov	r3, r0
 8017c2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8017c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c2e:	4618      	mov	r0, r3
 8017c30:	3710      	adds	r7, #16
 8017c32:	46bd      	mov	sp, r7
 8017c34:	bd80      	pop	{r7, pc}
 8017c36:	bf00      	nop
 8017c38:	24025d64 	.word	0x24025d64

08017c3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017c3c:	b480      	push	{r7}
 8017c3e:	b087      	sub	sp, #28
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	60f8      	str	r0, [r7, #12]
 8017c44:	60b9      	str	r1, [r7, #8]
 8017c46:	4613      	mov	r3, r2
 8017c48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017c52:	4618      	mov	r0, r3
 8017c54:	371c      	adds	r7, #28
 8017c56:	46bd      	mov	sp, r7
 8017c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c5c:	4770      	bx	lr
	...

08017c60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c60:	b480      	push	{r7}
 8017c62:	b083      	sub	sp, #12
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	4603      	mov	r3, r0
 8017c68:	6039      	str	r1, [r7, #0]
 8017c6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017c6c:	683b      	ldr	r3, [r7, #0]
 8017c6e:	2212      	movs	r2, #18
 8017c70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017c72:	4b03      	ldr	r3, [pc, #12]	@ (8017c80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017c74:	4618      	mov	r0, r3
 8017c76:	370c      	adds	r7, #12
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c7e:	4770      	bx	lr
 8017c80:	240000e8 	.word	0x240000e8

08017c84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c84:	b480      	push	{r7}
 8017c86:	b083      	sub	sp, #12
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	6039      	str	r1, [r7, #0]
 8017c8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017c90:	683b      	ldr	r3, [r7, #0]
 8017c92:	2204      	movs	r2, #4
 8017c94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017c96:	4b03      	ldr	r3, [pc, #12]	@ (8017ca4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017c98:	4618      	mov	r0, r3
 8017c9a:	370c      	adds	r7, #12
 8017c9c:	46bd      	mov	sp, r7
 8017c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca2:	4770      	bx	lr
 8017ca4:	240000fc 	.word	0x240000fc

08017ca8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b082      	sub	sp, #8
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	4603      	mov	r3, r0
 8017cb0:	6039      	str	r1, [r7, #0]
 8017cb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017cb4:	79fb      	ldrb	r3, [r7, #7]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d105      	bne.n	8017cc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017cba:	683a      	ldr	r2, [r7, #0]
 8017cbc:	4907      	ldr	r1, [pc, #28]	@ (8017cdc <USBD_FS_ProductStrDescriptor+0x34>)
 8017cbe:	4808      	ldr	r0, [pc, #32]	@ (8017ce0 <USBD_FS_ProductStrDescriptor+0x38>)
 8017cc0:	f7ff fdc0 	bl	8017844 <USBD_GetString>
 8017cc4:	e004      	b.n	8017cd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017cc6:	683a      	ldr	r2, [r7, #0]
 8017cc8:	4904      	ldr	r1, [pc, #16]	@ (8017cdc <USBD_FS_ProductStrDescriptor+0x34>)
 8017cca:	4805      	ldr	r0, [pc, #20]	@ (8017ce0 <USBD_FS_ProductStrDescriptor+0x38>)
 8017ccc:	f7ff fdba 	bl	8017844 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017cd0:	4b02      	ldr	r3, [pc, #8]	@ (8017cdc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	3708      	adds	r7, #8
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	bd80      	pop	{r7, pc}
 8017cda:	bf00      	nop
 8017cdc:	24027044 	.word	0x24027044
 8017ce0:	0801b2d4 	.word	0x0801b2d4

08017ce4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b082      	sub	sp, #8
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	4603      	mov	r3, r0
 8017cec:	6039      	str	r1, [r7, #0]
 8017cee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017cf0:	683a      	ldr	r2, [r7, #0]
 8017cf2:	4904      	ldr	r1, [pc, #16]	@ (8017d04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017cf4:	4804      	ldr	r0, [pc, #16]	@ (8017d08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017cf6:	f7ff fda5 	bl	8017844 <USBD_GetString>
  return USBD_StrDesc;
 8017cfa:	4b02      	ldr	r3, [pc, #8]	@ (8017d04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	3708      	adds	r7, #8
 8017d00:	46bd      	mov	sp, r7
 8017d02:	bd80      	pop	{r7, pc}
 8017d04:	24027044 	.word	0x24027044
 8017d08:	0801b2ec 	.word	0x0801b2ec

08017d0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b082      	sub	sp, #8
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	4603      	mov	r3, r0
 8017d14:	6039      	str	r1, [r7, #0]
 8017d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017d18:	683b      	ldr	r3, [r7, #0]
 8017d1a:	221a      	movs	r2, #26
 8017d1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017d1e:	f000 f843 	bl	8017da8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017d22:	4b02      	ldr	r3, [pc, #8]	@ (8017d2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017d24:	4618      	mov	r0, r3
 8017d26:	3708      	adds	r7, #8
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	bd80      	pop	{r7, pc}
 8017d2c:	24000100 	.word	0x24000100

08017d30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b082      	sub	sp, #8
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	4603      	mov	r3, r0
 8017d38:	6039      	str	r1, [r7, #0]
 8017d3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017d3c:	79fb      	ldrb	r3, [r7, #7]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d105      	bne.n	8017d4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017d42:	683a      	ldr	r2, [r7, #0]
 8017d44:	4907      	ldr	r1, [pc, #28]	@ (8017d64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017d46:	4808      	ldr	r0, [pc, #32]	@ (8017d68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017d48:	f7ff fd7c 	bl	8017844 <USBD_GetString>
 8017d4c:	e004      	b.n	8017d58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017d4e:	683a      	ldr	r2, [r7, #0]
 8017d50:	4904      	ldr	r1, [pc, #16]	@ (8017d64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017d52:	4805      	ldr	r0, [pc, #20]	@ (8017d68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017d54:	f7ff fd76 	bl	8017844 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017d58:	4b02      	ldr	r3, [pc, #8]	@ (8017d64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	3708      	adds	r7, #8
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	bd80      	pop	{r7, pc}
 8017d62:	bf00      	nop
 8017d64:	24027044 	.word	0x24027044
 8017d68:	0801b300 	.word	0x0801b300

08017d6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	b082      	sub	sp, #8
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	4603      	mov	r3, r0
 8017d74:	6039      	str	r1, [r7, #0]
 8017d76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017d78:	79fb      	ldrb	r3, [r7, #7]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d105      	bne.n	8017d8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017d7e:	683a      	ldr	r2, [r7, #0]
 8017d80:	4907      	ldr	r1, [pc, #28]	@ (8017da0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017d82:	4808      	ldr	r0, [pc, #32]	@ (8017da4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017d84:	f7ff fd5e 	bl	8017844 <USBD_GetString>
 8017d88:	e004      	b.n	8017d94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017d8a:	683a      	ldr	r2, [r7, #0]
 8017d8c:	4904      	ldr	r1, [pc, #16]	@ (8017da0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017d8e:	4805      	ldr	r0, [pc, #20]	@ (8017da4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017d90:	f7ff fd58 	bl	8017844 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017d94:	4b02      	ldr	r3, [pc, #8]	@ (8017da0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017d96:	4618      	mov	r0, r3
 8017d98:	3708      	adds	r7, #8
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	bd80      	pop	{r7, pc}
 8017d9e:	bf00      	nop
 8017da0:	24027044 	.word	0x24027044
 8017da4:	0801b30c 	.word	0x0801b30c

08017da8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017da8:	b580      	push	{r7, lr}
 8017daa:	b084      	sub	sp, #16
 8017dac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017dae:	4b0f      	ldr	r3, [pc, #60]	@ (8017dec <Get_SerialNum+0x44>)
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017db4:	4b0e      	ldr	r3, [pc, #56]	@ (8017df0 <Get_SerialNum+0x48>)
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017dba:	4b0e      	ldr	r3, [pc, #56]	@ (8017df4 <Get_SerialNum+0x4c>)
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017dc0:	68fa      	ldr	r2, [r7, #12]
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	4413      	add	r3, r2
 8017dc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d009      	beq.n	8017de2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017dce:	2208      	movs	r2, #8
 8017dd0:	4909      	ldr	r1, [pc, #36]	@ (8017df8 <Get_SerialNum+0x50>)
 8017dd2:	68f8      	ldr	r0, [r7, #12]
 8017dd4:	f000 f814 	bl	8017e00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017dd8:	2204      	movs	r2, #4
 8017dda:	4908      	ldr	r1, [pc, #32]	@ (8017dfc <Get_SerialNum+0x54>)
 8017ddc:	68b8      	ldr	r0, [r7, #8]
 8017dde:	f000 f80f 	bl	8017e00 <IntToUnicode>
  }
}
 8017de2:	bf00      	nop
 8017de4:	3710      	adds	r7, #16
 8017de6:	46bd      	mov	sp, r7
 8017de8:	bd80      	pop	{r7, pc}
 8017dea:	bf00      	nop
 8017dec:	1ff1e800 	.word	0x1ff1e800
 8017df0:	1ff1e804 	.word	0x1ff1e804
 8017df4:	1ff1e808 	.word	0x1ff1e808
 8017df8:	24000102 	.word	0x24000102
 8017dfc:	24000112 	.word	0x24000112

08017e00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017e00:	b480      	push	{r7}
 8017e02:	b087      	sub	sp, #28
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	60f8      	str	r0, [r7, #12]
 8017e08:	60b9      	str	r1, [r7, #8]
 8017e0a:	4613      	mov	r3, r2
 8017e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017e12:	2300      	movs	r3, #0
 8017e14:	75fb      	strb	r3, [r7, #23]
 8017e16:	e027      	b.n	8017e68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	0f1b      	lsrs	r3, r3, #28
 8017e1c:	2b09      	cmp	r3, #9
 8017e1e:	d80b      	bhi.n	8017e38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	0f1b      	lsrs	r3, r3, #28
 8017e24:	b2da      	uxtb	r2, r3
 8017e26:	7dfb      	ldrb	r3, [r7, #23]
 8017e28:	005b      	lsls	r3, r3, #1
 8017e2a:	4619      	mov	r1, r3
 8017e2c:	68bb      	ldr	r3, [r7, #8]
 8017e2e:	440b      	add	r3, r1
 8017e30:	3230      	adds	r2, #48	@ 0x30
 8017e32:	b2d2      	uxtb	r2, r2
 8017e34:	701a      	strb	r2, [r3, #0]
 8017e36:	e00a      	b.n	8017e4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	0f1b      	lsrs	r3, r3, #28
 8017e3c:	b2da      	uxtb	r2, r3
 8017e3e:	7dfb      	ldrb	r3, [r7, #23]
 8017e40:	005b      	lsls	r3, r3, #1
 8017e42:	4619      	mov	r1, r3
 8017e44:	68bb      	ldr	r3, [r7, #8]
 8017e46:	440b      	add	r3, r1
 8017e48:	3237      	adds	r2, #55	@ 0x37
 8017e4a:	b2d2      	uxtb	r2, r2
 8017e4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	011b      	lsls	r3, r3, #4
 8017e52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017e54:	7dfb      	ldrb	r3, [r7, #23]
 8017e56:	005b      	lsls	r3, r3, #1
 8017e58:	3301      	adds	r3, #1
 8017e5a:	68ba      	ldr	r2, [r7, #8]
 8017e5c:	4413      	add	r3, r2
 8017e5e:	2200      	movs	r2, #0
 8017e60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017e62:	7dfb      	ldrb	r3, [r7, #23]
 8017e64:	3301      	adds	r3, #1
 8017e66:	75fb      	strb	r3, [r7, #23]
 8017e68:	7dfa      	ldrb	r2, [r7, #23]
 8017e6a:	79fb      	ldrb	r3, [r7, #7]
 8017e6c:	429a      	cmp	r2, r3
 8017e6e:	d3d3      	bcc.n	8017e18 <IntToUnicode+0x18>
  }
}
 8017e70:	bf00      	nop
 8017e72:	bf00      	nop
 8017e74:	371c      	adds	r7, #28
 8017e76:	46bd      	mov	sp, r7
 8017e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7c:	4770      	bx	lr
	...

08017e80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b0ba      	sub	sp, #232	@ 0xe8
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017e88:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	601a      	str	r2, [r3, #0]
 8017e90:	605a      	str	r2, [r3, #4]
 8017e92:	609a      	str	r2, [r3, #8]
 8017e94:	60da      	str	r2, [r3, #12]
 8017e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017e98:	f107 0310 	add.w	r3, r7, #16
 8017e9c:	22c0      	movs	r2, #192	@ 0xc0
 8017e9e:	2100      	movs	r1, #0
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f001 f936 	bl	8019112 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8017f5c <HAL_PCD_MspInit+0xdc>)
 8017eac:	4293      	cmp	r3, r2
 8017eae:	d151      	bne.n	8017f54 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017eb0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017eb4:	f04f 0300 	mov.w	r3, #0
 8017eb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8017ebc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8017ec0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017ec4:	f107 0310 	add.w	r3, r7, #16
 8017ec8:	4618      	mov	r0, r3
 8017eca:	f7f6 f907 	bl	800e0dc <HAL_RCCEx_PeriphCLKConfig>
 8017ece:	4603      	mov	r3, r0
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d001      	beq.n	8017ed8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8017ed4:	f7ea f9a0 	bl	8002218 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017ed8:	f7f5 f90a 	bl	800d0f0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017edc:	4b20      	ldr	r3, [pc, #128]	@ (8017f60 <HAL_PCD_MspInit+0xe0>)
 8017ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8017f60 <HAL_PCD_MspInit+0xe0>)
 8017ee4:	f043 0301 	orr.w	r3, r3, #1
 8017ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8017eec:	4b1c      	ldr	r3, [pc, #112]	@ (8017f60 <HAL_PCD_MspInit+0xe0>)
 8017eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017ef2:	f003 0301 	and.w	r3, r3, #1
 8017ef6:	60fb      	str	r3, [r7, #12]
 8017ef8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017efa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8017efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f02:	2302      	movs	r3, #2
 8017f04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f08:	2300      	movs	r3, #0
 8017f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017f0e:	2300      	movs	r3, #0
 8017f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8017f14:	230a      	movs	r3, #10
 8017f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017f1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017f1e:	4619      	mov	r1, r3
 8017f20:	4810      	ldr	r0, [pc, #64]	@ (8017f64 <HAL_PCD_MspInit+0xe4>)
 8017f22:	f7ef fa21 	bl	8007368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017f26:	4b0e      	ldr	r3, [pc, #56]	@ (8017f60 <HAL_PCD_MspInit+0xe0>)
 8017f28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8017f60 <HAL_PCD_MspInit+0xe0>)
 8017f2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8017f32:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8017f36:	4b0a      	ldr	r3, [pc, #40]	@ (8017f60 <HAL_PCD_MspInit+0xe0>)
 8017f38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017f40:	60bb      	str	r3, [r7, #8]
 8017f42:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017f44:	2200      	movs	r2, #0
 8017f46:	2100      	movs	r1, #0
 8017f48:	2065      	movs	r0, #101	@ 0x65
 8017f4a:	f7eb fb7a 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017f4e:	2065      	movs	r0, #101	@ 0x65
 8017f50:	f7eb fb91 	bl	8003676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017f54:	bf00      	nop
 8017f56:	37e8      	adds	r7, #232	@ 0xe8
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	bd80      	pop	{r7, pc}
 8017f5c:	40080000 	.word	0x40080000
 8017f60:	58024400 	.word	0x58024400
 8017f64:	58020000 	.word	0x58020000

08017f68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b082      	sub	sp, #8
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017f7c:	4619      	mov	r1, r3
 8017f7e:	4610      	mov	r0, r2
 8017f80:	f7fe fad3 	bl	801652a <USBD_LL_SetupStage>
}
 8017f84:	bf00      	nop
 8017f86:	3708      	adds	r7, #8
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	bd80      	pop	{r7, pc}

08017f8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b082      	sub	sp, #8
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
 8017f94:	460b      	mov	r3, r1
 8017f96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017f9e:	78fa      	ldrb	r2, [r7, #3]
 8017fa0:	6879      	ldr	r1, [r7, #4]
 8017fa2:	4613      	mov	r3, r2
 8017fa4:	00db      	lsls	r3, r3, #3
 8017fa6:	4413      	add	r3, r2
 8017fa8:	009b      	lsls	r3, r3, #2
 8017faa:	440b      	add	r3, r1
 8017fac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017fb0:	681a      	ldr	r2, [r3, #0]
 8017fb2:	78fb      	ldrb	r3, [r7, #3]
 8017fb4:	4619      	mov	r1, r3
 8017fb6:	f7fe fb0d 	bl	80165d4 <USBD_LL_DataOutStage>
}
 8017fba:	bf00      	nop
 8017fbc:	3708      	adds	r7, #8
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}

08017fc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fc2:	b580      	push	{r7, lr}
 8017fc4:	b082      	sub	sp, #8
 8017fc6:	af00      	add	r7, sp, #0
 8017fc8:	6078      	str	r0, [r7, #4]
 8017fca:	460b      	mov	r3, r1
 8017fcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017fd4:	78fa      	ldrb	r2, [r7, #3]
 8017fd6:	6879      	ldr	r1, [r7, #4]
 8017fd8:	4613      	mov	r3, r2
 8017fda:	00db      	lsls	r3, r3, #3
 8017fdc:	4413      	add	r3, r2
 8017fde:	009b      	lsls	r3, r3, #2
 8017fe0:	440b      	add	r3, r1
 8017fe2:	3320      	adds	r3, #32
 8017fe4:	681a      	ldr	r2, [r3, #0]
 8017fe6:	78fb      	ldrb	r3, [r7, #3]
 8017fe8:	4619      	mov	r1, r3
 8017fea:	f7fe fba6 	bl	801673a <USBD_LL_DataInStage>
}
 8017fee:	bf00      	nop
 8017ff0:	3708      	adds	r7, #8
 8017ff2:	46bd      	mov	sp, r7
 8017ff4:	bd80      	pop	{r7, pc}

08017ff6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ff6:	b580      	push	{r7, lr}
 8017ff8:	b082      	sub	sp, #8
 8017ffa:	af00      	add	r7, sp, #0
 8017ffc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018004:	4618      	mov	r0, r3
 8018006:	f7fe fce0 	bl	80169ca <USBD_LL_SOF>
}
 801800a:	bf00      	nop
 801800c:	3708      	adds	r7, #8
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}

08018012 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018012:	b580      	push	{r7, lr}
 8018014:	b084      	sub	sp, #16
 8018016:	af00      	add	r7, sp, #0
 8018018:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801801a:	2301      	movs	r3, #1
 801801c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	79db      	ldrb	r3, [r3, #7]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d102      	bne.n	801802c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018026:	2300      	movs	r3, #0
 8018028:	73fb      	strb	r3, [r7, #15]
 801802a:	e008      	b.n	801803e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	79db      	ldrb	r3, [r3, #7]
 8018030:	2b02      	cmp	r3, #2
 8018032:	d102      	bne.n	801803a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018034:	2301      	movs	r3, #1
 8018036:	73fb      	strb	r3, [r7, #15]
 8018038:	e001      	b.n	801803e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801803a:	f7ea f8ed 	bl	8002218 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018044:	7bfa      	ldrb	r2, [r7, #15]
 8018046:	4611      	mov	r1, r2
 8018048:	4618      	mov	r0, r3
 801804a:	f7fe fc7a 	bl	8016942 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018054:	4618      	mov	r0, r3
 8018056:	f7fe fc22 	bl	801689e <USBD_LL_Reset>
}
 801805a:	bf00      	nop
 801805c:	3710      	adds	r7, #16
 801805e:	46bd      	mov	sp, r7
 8018060:	bd80      	pop	{r7, pc}
	...

08018064 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b082      	sub	sp, #8
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018072:	4618      	mov	r0, r3
 8018074:	f7fe fc75 	bl	8016962 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	687a      	ldr	r2, [r7, #4]
 8018084:	6812      	ldr	r2, [r2, #0]
 8018086:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801808a:	f043 0301 	orr.w	r3, r3, #1
 801808e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	7adb      	ldrb	r3, [r3, #11]
 8018094:	2b00      	cmp	r3, #0
 8018096:	d005      	beq.n	80180a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018098:	4b04      	ldr	r3, [pc, #16]	@ (80180ac <HAL_PCD_SuspendCallback+0x48>)
 801809a:	691b      	ldr	r3, [r3, #16]
 801809c:	4a03      	ldr	r2, [pc, #12]	@ (80180ac <HAL_PCD_SuspendCallback+0x48>)
 801809e:	f043 0306 	orr.w	r3, r3, #6
 80180a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80180a4:	bf00      	nop
 80180a6:	3708      	adds	r7, #8
 80180a8:	46bd      	mov	sp, r7
 80180aa:	bd80      	pop	{r7, pc}
 80180ac:	e000ed00 	.word	0xe000ed00

080180b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b082      	sub	sp, #8
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80180be:	4618      	mov	r0, r3
 80180c0:	f7fe fc6b 	bl	801699a <USBD_LL_Resume>
}
 80180c4:	bf00      	nop
 80180c6:	3708      	adds	r7, #8
 80180c8:	46bd      	mov	sp, r7
 80180ca:	bd80      	pop	{r7, pc}

080180cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b082      	sub	sp, #8
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
 80180d4:	460b      	mov	r3, r1
 80180d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80180de:	78fa      	ldrb	r2, [r7, #3]
 80180e0:	4611      	mov	r1, r2
 80180e2:	4618      	mov	r0, r3
 80180e4:	f7fe fcc3 	bl	8016a6e <USBD_LL_IsoOUTIncomplete>
}
 80180e8:	bf00      	nop
 80180ea:	3708      	adds	r7, #8
 80180ec:	46bd      	mov	sp, r7
 80180ee:	bd80      	pop	{r7, pc}

080180f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b082      	sub	sp, #8
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
 80180f8:	460b      	mov	r3, r1
 80180fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018102:	78fa      	ldrb	r2, [r7, #3]
 8018104:	4611      	mov	r1, r2
 8018106:	4618      	mov	r0, r3
 8018108:	f7fe fc7f 	bl	8016a0a <USBD_LL_IsoINIncomplete>
}
 801810c:	bf00      	nop
 801810e:	3708      	adds	r7, #8
 8018110:	46bd      	mov	sp, r7
 8018112:	bd80      	pop	{r7, pc}

08018114 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b082      	sub	sp, #8
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018122:	4618      	mov	r0, r3
 8018124:	f7fe fcd5 	bl	8016ad2 <USBD_LL_DevConnected>
}
 8018128:	bf00      	nop
 801812a:	3708      	adds	r7, #8
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}

08018130 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b082      	sub	sp, #8
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801813e:	4618      	mov	r0, r3
 8018140:	f7fe fcd2 	bl	8016ae8 <USBD_LL_DevDisconnected>
}
 8018144:	bf00      	nop
 8018146:	3708      	adds	r7, #8
 8018148:	46bd      	mov	sp, r7
 801814a:	bd80      	pop	{r7, pc}

0801814c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b082      	sub	sp, #8
 8018150:	af00      	add	r7, sp, #0
 8018152:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	781b      	ldrb	r3, [r3, #0]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d13e      	bne.n	80181da <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801815c:	4a21      	ldr	r2, [pc, #132]	@ (80181e4 <USBD_LL_Init+0x98>)
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	4a1f      	ldr	r2, [pc, #124]	@ (80181e4 <USBD_LL_Init+0x98>)
 8018168:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801816c:	4b1d      	ldr	r3, [pc, #116]	@ (80181e4 <USBD_LL_Init+0x98>)
 801816e:	4a1e      	ldr	r2, [pc, #120]	@ (80181e8 <USBD_LL_Init+0x9c>)
 8018170:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8018172:	4b1c      	ldr	r3, [pc, #112]	@ (80181e4 <USBD_LL_Init+0x98>)
 8018174:	2209      	movs	r2, #9
 8018176:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018178:	4b1a      	ldr	r3, [pc, #104]	@ (80181e4 <USBD_LL_Init+0x98>)
 801817a:	2202      	movs	r2, #2
 801817c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801817e:	4b19      	ldr	r3, [pc, #100]	@ (80181e4 <USBD_LL_Init+0x98>)
 8018180:	2200      	movs	r2, #0
 8018182:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018184:	4b17      	ldr	r3, [pc, #92]	@ (80181e4 <USBD_LL_Init+0x98>)
 8018186:	2202      	movs	r2, #2
 8018188:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801818a:	4b16      	ldr	r3, [pc, #88]	@ (80181e4 <USBD_LL_Init+0x98>)
 801818c:	2200      	movs	r2, #0
 801818e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018190:	4b14      	ldr	r3, [pc, #80]	@ (80181e4 <USBD_LL_Init+0x98>)
 8018192:	2200      	movs	r2, #0
 8018194:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018196:	4b13      	ldr	r3, [pc, #76]	@ (80181e4 <USBD_LL_Init+0x98>)
 8018198:	2200      	movs	r2, #0
 801819a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801819c:	4b11      	ldr	r3, [pc, #68]	@ (80181e4 <USBD_LL_Init+0x98>)
 801819e:	2200      	movs	r2, #0
 80181a0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80181a2:	4b10      	ldr	r3, [pc, #64]	@ (80181e4 <USBD_LL_Init+0x98>)
 80181a4:	2200      	movs	r2, #0
 80181a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80181a8:	4b0e      	ldr	r3, [pc, #56]	@ (80181e4 <USBD_LL_Init+0x98>)
 80181aa:	2200      	movs	r2, #0
 80181ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80181ae:	480d      	ldr	r0, [pc, #52]	@ (80181e4 <USBD_LL_Init+0x98>)
 80181b0:	f7f3 fcc4 	bl	800bb3c <HAL_PCD_Init>
 80181b4:	4603      	mov	r3, r0
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d001      	beq.n	80181be <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80181ba:	f7ea f82d 	bl	8002218 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80181be:	2180      	movs	r1, #128	@ 0x80
 80181c0:	4808      	ldr	r0, [pc, #32]	@ (80181e4 <USBD_LL_Init+0x98>)
 80181c2:	f7f4 ff1a 	bl	800cffa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80181c6:	2240      	movs	r2, #64	@ 0x40
 80181c8:	2100      	movs	r1, #0
 80181ca:	4806      	ldr	r0, [pc, #24]	@ (80181e4 <USBD_LL_Init+0x98>)
 80181cc:	f7f4 fece 	bl	800cf6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80181d0:	2280      	movs	r2, #128	@ 0x80
 80181d2:	2101      	movs	r1, #1
 80181d4:	4803      	ldr	r0, [pc, #12]	@ (80181e4 <USBD_LL_Init+0x98>)
 80181d6:	f7f4 fec9 	bl	800cf6c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80181da:	2300      	movs	r3, #0
}
 80181dc:	4618      	mov	r0, r3
 80181de:	3708      	adds	r7, #8
 80181e0:	46bd      	mov	sp, r7
 80181e2:	bd80      	pop	{r7, pc}
 80181e4:	24027244 	.word	0x24027244
 80181e8:	40080000 	.word	0x40080000

080181ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80181ec:	b580      	push	{r7, lr}
 80181ee:	b084      	sub	sp, #16
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181f4:	2300      	movs	r3, #0
 80181f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80181f8:	2300      	movs	r3, #0
 80181fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018202:	4618      	mov	r0, r3
 8018204:	f7f3 fda6 	bl	800bd54 <HAL_PCD_Start>
 8018208:	4603      	mov	r3, r0
 801820a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801820c:	7bfb      	ldrb	r3, [r7, #15]
 801820e:	4618      	mov	r0, r3
 8018210:	f000 f942 	bl	8018498 <USBD_Get_USB_Status>
 8018214:	4603      	mov	r3, r0
 8018216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018218:	7bbb      	ldrb	r3, [r7, #14]
}
 801821a:	4618      	mov	r0, r3
 801821c:	3710      	adds	r7, #16
 801821e:	46bd      	mov	sp, r7
 8018220:	bd80      	pop	{r7, pc}

08018222 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018222:	b580      	push	{r7, lr}
 8018224:	b084      	sub	sp, #16
 8018226:	af00      	add	r7, sp, #0
 8018228:	6078      	str	r0, [r7, #4]
 801822a:	4608      	mov	r0, r1
 801822c:	4611      	mov	r1, r2
 801822e:	461a      	mov	r2, r3
 8018230:	4603      	mov	r3, r0
 8018232:	70fb      	strb	r3, [r7, #3]
 8018234:	460b      	mov	r3, r1
 8018236:	70bb      	strb	r3, [r7, #2]
 8018238:	4613      	mov	r3, r2
 801823a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801823c:	2300      	movs	r3, #0
 801823e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018240:	2300      	movs	r3, #0
 8018242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801824a:	78bb      	ldrb	r3, [r7, #2]
 801824c:	883a      	ldrh	r2, [r7, #0]
 801824e:	78f9      	ldrb	r1, [r7, #3]
 8018250:	f7f4 faa7 	bl	800c7a2 <HAL_PCD_EP_Open>
 8018254:	4603      	mov	r3, r0
 8018256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018258:	7bfb      	ldrb	r3, [r7, #15]
 801825a:	4618      	mov	r0, r3
 801825c:	f000 f91c 	bl	8018498 <USBD_Get_USB_Status>
 8018260:	4603      	mov	r3, r0
 8018262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018264:	7bbb      	ldrb	r3, [r7, #14]
}
 8018266:	4618      	mov	r0, r3
 8018268:	3710      	adds	r7, #16
 801826a:	46bd      	mov	sp, r7
 801826c:	bd80      	pop	{r7, pc}

0801826e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801826e:	b580      	push	{r7, lr}
 8018270:	b084      	sub	sp, #16
 8018272:	af00      	add	r7, sp, #0
 8018274:	6078      	str	r0, [r7, #4]
 8018276:	460b      	mov	r3, r1
 8018278:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801827a:	2300      	movs	r3, #0
 801827c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801827e:	2300      	movs	r3, #0
 8018280:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018288:	78fa      	ldrb	r2, [r7, #3]
 801828a:	4611      	mov	r1, r2
 801828c:	4618      	mov	r0, r3
 801828e:	f7f4 faf2 	bl	800c876 <HAL_PCD_EP_Close>
 8018292:	4603      	mov	r3, r0
 8018294:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018296:	7bfb      	ldrb	r3, [r7, #15]
 8018298:	4618      	mov	r0, r3
 801829a:	f000 f8fd 	bl	8018498 <USBD_Get_USB_Status>
 801829e:	4603      	mov	r3, r0
 80182a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80182a4:	4618      	mov	r0, r3
 80182a6:	3710      	adds	r7, #16
 80182a8:	46bd      	mov	sp, r7
 80182aa:	bd80      	pop	{r7, pc}

080182ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80182ac:	b580      	push	{r7, lr}
 80182ae:	b084      	sub	sp, #16
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	6078      	str	r0, [r7, #4]
 80182b4:	460b      	mov	r3, r1
 80182b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182b8:	2300      	movs	r3, #0
 80182ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182bc:	2300      	movs	r3, #0
 80182be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80182c6:	78fa      	ldrb	r2, [r7, #3]
 80182c8:	4611      	mov	r1, r2
 80182ca:	4618      	mov	r0, r3
 80182cc:	f7f4 fbaa 	bl	800ca24 <HAL_PCD_EP_SetStall>
 80182d0:	4603      	mov	r3, r0
 80182d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182d4:	7bfb      	ldrb	r3, [r7, #15]
 80182d6:	4618      	mov	r0, r3
 80182d8:	f000 f8de 	bl	8018498 <USBD_Get_USB_Status>
 80182dc:	4603      	mov	r3, r0
 80182de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80182e2:	4618      	mov	r0, r3
 80182e4:	3710      	adds	r7, #16
 80182e6:	46bd      	mov	sp, r7
 80182e8:	bd80      	pop	{r7, pc}

080182ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80182ea:	b580      	push	{r7, lr}
 80182ec:	b084      	sub	sp, #16
 80182ee:	af00      	add	r7, sp, #0
 80182f0:	6078      	str	r0, [r7, #4]
 80182f2:	460b      	mov	r3, r1
 80182f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182f6:	2300      	movs	r3, #0
 80182f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182fa:	2300      	movs	r3, #0
 80182fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018304:	78fa      	ldrb	r2, [r7, #3]
 8018306:	4611      	mov	r1, r2
 8018308:	4618      	mov	r0, r3
 801830a:	f7f4 fbee 	bl	800caea <HAL_PCD_EP_ClrStall>
 801830e:	4603      	mov	r3, r0
 8018310:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018312:	7bfb      	ldrb	r3, [r7, #15]
 8018314:	4618      	mov	r0, r3
 8018316:	f000 f8bf 	bl	8018498 <USBD_Get_USB_Status>
 801831a:	4603      	mov	r3, r0
 801831c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801831e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018320:	4618      	mov	r0, r3
 8018322:	3710      	adds	r7, #16
 8018324:	46bd      	mov	sp, r7
 8018326:	bd80      	pop	{r7, pc}

08018328 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018328:	b480      	push	{r7}
 801832a:	b085      	sub	sp, #20
 801832c:	af00      	add	r7, sp, #0
 801832e:	6078      	str	r0, [r7, #4]
 8018330:	460b      	mov	r3, r1
 8018332:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801833a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801833c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018340:	2b00      	cmp	r3, #0
 8018342:	da0b      	bge.n	801835c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018344:	78fb      	ldrb	r3, [r7, #3]
 8018346:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801834a:	68f9      	ldr	r1, [r7, #12]
 801834c:	4613      	mov	r3, r2
 801834e:	00db      	lsls	r3, r3, #3
 8018350:	4413      	add	r3, r2
 8018352:	009b      	lsls	r3, r3, #2
 8018354:	440b      	add	r3, r1
 8018356:	3316      	adds	r3, #22
 8018358:	781b      	ldrb	r3, [r3, #0]
 801835a:	e00b      	b.n	8018374 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801835c:	78fb      	ldrb	r3, [r7, #3]
 801835e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018362:	68f9      	ldr	r1, [r7, #12]
 8018364:	4613      	mov	r3, r2
 8018366:	00db      	lsls	r3, r3, #3
 8018368:	4413      	add	r3, r2
 801836a:	009b      	lsls	r3, r3, #2
 801836c:	440b      	add	r3, r1
 801836e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8018372:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018374:	4618      	mov	r0, r3
 8018376:	3714      	adds	r7, #20
 8018378:	46bd      	mov	sp, r7
 801837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801837e:	4770      	bx	lr

08018380 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018380:	b580      	push	{r7, lr}
 8018382:	b084      	sub	sp, #16
 8018384:	af00      	add	r7, sp, #0
 8018386:	6078      	str	r0, [r7, #4]
 8018388:	460b      	mov	r3, r1
 801838a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801838c:	2300      	movs	r3, #0
 801838e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018390:	2300      	movs	r3, #0
 8018392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801839a:	78fa      	ldrb	r2, [r7, #3]
 801839c:	4611      	mov	r1, r2
 801839e:	4618      	mov	r0, r3
 80183a0:	f7f4 f9db 	bl	800c75a <HAL_PCD_SetAddress>
 80183a4:	4603      	mov	r3, r0
 80183a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80183a8:	7bfb      	ldrb	r3, [r7, #15]
 80183aa:	4618      	mov	r0, r3
 80183ac:	f000 f874 	bl	8018498 <USBD_Get_USB_Status>
 80183b0:	4603      	mov	r3, r0
 80183b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80183b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80183b6:	4618      	mov	r0, r3
 80183b8:	3710      	adds	r7, #16
 80183ba:	46bd      	mov	sp, r7
 80183bc:	bd80      	pop	{r7, pc}

080183be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80183be:	b580      	push	{r7, lr}
 80183c0:	b086      	sub	sp, #24
 80183c2:	af00      	add	r7, sp, #0
 80183c4:	60f8      	str	r0, [r7, #12]
 80183c6:	607a      	str	r2, [r7, #4]
 80183c8:	603b      	str	r3, [r7, #0]
 80183ca:	460b      	mov	r3, r1
 80183cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80183ce:	2300      	movs	r3, #0
 80183d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80183d2:	2300      	movs	r3, #0
 80183d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80183dc:	7af9      	ldrb	r1, [r7, #11]
 80183de:	683b      	ldr	r3, [r7, #0]
 80183e0:	687a      	ldr	r2, [r7, #4]
 80183e2:	f7f4 fae5 	bl	800c9b0 <HAL_PCD_EP_Transmit>
 80183e6:	4603      	mov	r3, r0
 80183e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80183ea:	7dfb      	ldrb	r3, [r7, #23]
 80183ec:	4618      	mov	r0, r3
 80183ee:	f000 f853 	bl	8018498 <USBD_Get_USB_Status>
 80183f2:	4603      	mov	r3, r0
 80183f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80183f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80183f8:	4618      	mov	r0, r3
 80183fa:	3718      	adds	r7, #24
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bd80      	pop	{r7, pc}

08018400 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b086      	sub	sp, #24
 8018404:	af00      	add	r7, sp, #0
 8018406:	60f8      	str	r0, [r7, #12]
 8018408:	607a      	str	r2, [r7, #4]
 801840a:	603b      	str	r3, [r7, #0]
 801840c:	460b      	mov	r3, r1
 801840e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018410:	2300      	movs	r3, #0
 8018412:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018414:	2300      	movs	r3, #0
 8018416:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801841e:	7af9      	ldrb	r1, [r7, #11]
 8018420:	683b      	ldr	r3, [r7, #0]
 8018422:	687a      	ldr	r2, [r7, #4]
 8018424:	f7f4 fa71 	bl	800c90a <HAL_PCD_EP_Receive>
 8018428:	4603      	mov	r3, r0
 801842a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801842c:	7dfb      	ldrb	r3, [r7, #23]
 801842e:	4618      	mov	r0, r3
 8018430:	f000 f832 	bl	8018498 <USBD_Get_USB_Status>
 8018434:	4603      	mov	r3, r0
 8018436:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018438:	7dbb      	ldrb	r3, [r7, #22]
}
 801843a:	4618      	mov	r0, r3
 801843c:	3718      	adds	r7, #24
 801843e:	46bd      	mov	sp, r7
 8018440:	bd80      	pop	{r7, pc}

08018442 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018442:	b580      	push	{r7, lr}
 8018444:	b082      	sub	sp, #8
 8018446:	af00      	add	r7, sp, #0
 8018448:	6078      	str	r0, [r7, #4]
 801844a:	460b      	mov	r3, r1
 801844c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018454:	78fa      	ldrb	r2, [r7, #3]
 8018456:	4611      	mov	r1, r2
 8018458:	4618      	mov	r0, r3
 801845a:	f7f4 fa91 	bl	800c980 <HAL_PCD_EP_GetRxCount>
 801845e:	4603      	mov	r3, r0
}
 8018460:	4618      	mov	r0, r3
 8018462:	3708      	adds	r7, #8
 8018464:	46bd      	mov	sp, r7
 8018466:	bd80      	pop	{r7, pc}

08018468 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018468:	b480      	push	{r7}
 801846a:	b083      	sub	sp, #12
 801846c:	af00      	add	r7, sp, #0
 801846e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018470:	4b03      	ldr	r3, [pc, #12]	@ (8018480 <USBD_static_malloc+0x18>)
}
 8018472:	4618      	mov	r0, r3
 8018474:	370c      	adds	r7, #12
 8018476:	46bd      	mov	sp, r7
 8018478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847c:	4770      	bx	lr
 801847e:	bf00      	nop
 8018480:	24027728 	.word	0x24027728

08018484 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018484:	b480      	push	{r7}
 8018486:	b083      	sub	sp, #12
 8018488:	af00      	add	r7, sp, #0
 801848a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801848c:	bf00      	nop
 801848e:	370c      	adds	r7, #12
 8018490:	46bd      	mov	sp, r7
 8018492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018496:	4770      	bx	lr

08018498 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018498:	b480      	push	{r7}
 801849a:	b085      	sub	sp, #20
 801849c:	af00      	add	r7, sp, #0
 801849e:	4603      	mov	r3, r0
 80184a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80184a2:	2300      	movs	r3, #0
 80184a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80184a6:	79fb      	ldrb	r3, [r7, #7]
 80184a8:	2b03      	cmp	r3, #3
 80184aa:	d817      	bhi.n	80184dc <USBD_Get_USB_Status+0x44>
 80184ac:	a201      	add	r2, pc, #4	@ (adr r2, 80184b4 <USBD_Get_USB_Status+0x1c>)
 80184ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184b2:	bf00      	nop
 80184b4:	080184c5 	.word	0x080184c5
 80184b8:	080184cb 	.word	0x080184cb
 80184bc:	080184d1 	.word	0x080184d1
 80184c0:	080184d7 	.word	0x080184d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80184c4:	2300      	movs	r3, #0
 80184c6:	73fb      	strb	r3, [r7, #15]
    break;
 80184c8:	e00b      	b.n	80184e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80184ca:	2303      	movs	r3, #3
 80184cc:	73fb      	strb	r3, [r7, #15]
    break;
 80184ce:	e008      	b.n	80184e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80184d0:	2301      	movs	r3, #1
 80184d2:	73fb      	strb	r3, [r7, #15]
    break;
 80184d4:	e005      	b.n	80184e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80184d6:	2303      	movs	r3, #3
 80184d8:	73fb      	strb	r3, [r7, #15]
    break;
 80184da:	e002      	b.n	80184e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80184dc:	2303      	movs	r3, #3
 80184de:	73fb      	strb	r3, [r7, #15]
    break;
 80184e0:	bf00      	nop
  }
  return usb_status;
 80184e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80184e4:	4618      	mov	r0, r3
 80184e6:	3714      	adds	r7, #20
 80184e8:	46bd      	mov	sp, r7
 80184ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ee:	4770      	bx	lr

080184f0 <malloc>:
 80184f0:	4b02      	ldr	r3, [pc, #8]	@ (80184fc <malloc+0xc>)
 80184f2:	4601      	mov	r1, r0
 80184f4:	6818      	ldr	r0, [r3, #0]
 80184f6:	f000 b825 	b.w	8018544 <_malloc_r>
 80184fa:	bf00      	nop
 80184fc:	24000128 	.word	0x24000128

08018500 <sbrk_aligned>:
 8018500:	b570      	push	{r4, r5, r6, lr}
 8018502:	4e0f      	ldr	r6, [pc, #60]	@ (8018540 <sbrk_aligned+0x40>)
 8018504:	460c      	mov	r4, r1
 8018506:	6831      	ldr	r1, [r6, #0]
 8018508:	4605      	mov	r5, r0
 801850a:	b911      	cbnz	r1, 8018512 <sbrk_aligned+0x12>
 801850c:	f000 fe42 	bl	8019194 <_sbrk_r>
 8018510:	6030      	str	r0, [r6, #0]
 8018512:	4621      	mov	r1, r4
 8018514:	4628      	mov	r0, r5
 8018516:	f000 fe3d 	bl	8019194 <_sbrk_r>
 801851a:	1c43      	adds	r3, r0, #1
 801851c:	d103      	bne.n	8018526 <sbrk_aligned+0x26>
 801851e:	f04f 34ff 	mov.w	r4, #4294967295
 8018522:	4620      	mov	r0, r4
 8018524:	bd70      	pop	{r4, r5, r6, pc}
 8018526:	1cc4      	adds	r4, r0, #3
 8018528:	f024 0403 	bic.w	r4, r4, #3
 801852c:	42a0      	cmp	r0, r4
 801852e:	d0f8      	beq.n	8018522 <sbrk_aligned+0x22>
 8018530:	1a21      	subs	r1, r4, r0
 8018532:	4628      	mov	r0, r5
 8018534:	f000 fe2e 	bl	8019194 <_sbrk_r>
 8018538:	3001      	adds	r0, #1
 801853a:	d1f2      	bne.n	8018522 <sbrk_aligned+0x22>
 801853c:	e7ef      	b.n	801851e <sbrk_aligned+0x1e>
 801853e:	bf00      	nop
 8018540:	24027948 	.word	0x24027948

08018544 <_malloc_r>:
 8018544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018548:	1ccd      	adds	r5, r1, #3
 801854a:	f025 0503 	bic.w	r5, r5, #3
 801854e:	3508      	adds	r5, #8
 8018550:	2d0c      	cmp	r5, #12
 8018552:	bf38      	it	cc
 8018554:	250c      	movcc	r5, #12
 8018556:	2d00      	cmp	r5, #0
 8018558:	4606      	mov	r6, r0
 801855a:	db01      	blt.n	8018560 <_malloc_r+0x1c>
 801855c:	42a9      	cmp	r1, r5
 801855e:	d904      	bls.n	801856a <_malloc_r+0x26>
 8018560:	230c      	movs	r3, #12
 8018562:	6033      	str	r3, [r6, #0]
 8018564:	2000      	movs	r0, #0
 8018566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801856a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018640 <_malloc_r+0xfc>
 801856e:	f000 f869 	bl	8018644 <__malloc_lock>
 8018572:	f8d8 3000 	ldr.w	r3, [r8]
 8018576:	461c      	mov	r4, r3
 8018578:	bb44      	cbnz	r4, 80185cc <_malloc_r+0x88>
 801857a:	4629      	mov	r1, r5
 801857c:	4630      	mov	r0, r6
 801857e:	f7ff ffbf 	bl	8018500 <sbrk_aligned>
 8018582:	1c43      	adds	r3, r0, #1
 8018584:	4604      	mov	r4, r0
 8018586:	d158      	bne.n	801863a <_malloc_r+0xf6>
 8018588:	f8d8 4000 	ldr.w	r4, [r8]
 801858c:	4627      	mov	r7, r4
 801858e:	2f00      	cmp	r7, #0
 8018590:	d143      	bne.n	801861a <_malloc_r+0xd6>
 8018592:	2c00      	cmp	r4, #0
 8018594:	d04b      	beq.n	801862e <_malloc_r+0xea>
 8018596:	6823      	ldr	r3, [r4, #0]
 8018598:	4639      	mov	r1, r7
 801859a:	4630      	mov	r0, r6
 801859c:	eb04 0903 	add.w	r9, r4, r3
 80185a0:	f000 fdf8 	bl	8019194 <_sbrk_r>
 80185a4:	4581      	cmp	r9, r0
 80185a6:	d142      	bne.n	801862e <_malloc_r+0xea>
 80185a8:	6821      	ldr	r1, [r4, #0]
 80185aa:	1a6d      	subs	r5, r5, r1
 80185ac:	4629      	mov	r1, r5
 80185ae:	4630      	mov	r0, r6
 80185b0:	f7ff ffa6 	bl	8018500 <sbrk_aligned>
 80185b4:	3001      	adds	r0, #1
 80185b6:	d03a      	beq.n	801862e <_malloc_r+0xea>
 80185b8:	6823      	ldr	r3, [r4, #0]
 80185ba:	442b      	add	r3, r5
 80185bc:	6023      	str	r3, [r4, #0]
 80185be:	f8d8 3000 	ldr.w	r3, [r8]
 80185c2:	685a      	ldr	r2, [r3, #4]
 80185c4:	bb62      	cbnz	r2, 8018620 <_malloc_r+0xdc>
 80185c6:	f8c8 7000 	str.w	r7, [r8]
 80185ca:	e00f      	b.n	80185ec <_malloc_r+0xa8>
 80185cc:	6822      	ldr	r2, [r4, #0]
 80185ce:	1b52      	subs	r2, r2, r5
 80185d0:	d420      	bmi.n	8018614 <_malloc_r+0xd0>
 80185d2:	2a0b      	cmp	r2, #11
 80185d4:	d917      	bls.n	8018606 <_malloc_r+0xc2>
 80185d6:	1961      	adds	r1, r4, r5
 80185d8:	42a3      	cmp	r3, r4
 80185da:	6025      	str	r5, [r4, #0]
 80185dc:	bf18      	it	ne
 80185de:	6059      	strne	r1, [r3, #4]
 80185e0:	6863      	ldr	r3, [r4, #4]
 80185e2:	bf08      	it	eq
 80185e4:	f8c8 1000 	streq.w	r1, [r8]
 80185e8:	5162      	str	r2, [r4, r5]
 80185ea:	604b      	str	r3, [r1, #4]
 80185ec:	4630      	mov	r0, r6
 80185ee:	f000 f82f 	bl	8018650 <__malloc_unlock>
 80185f2:	f104 000b 	add.w	r0, r4, #11
 80185f6:	1d23      	adds	r3, r4, #4
 80185f8:	f020 0007 	bic.w	r0, r0, #7
 80185fc:	1ac2      	subs	r2, r0, r3
 80185fe:	bf1c      	itt	ne
 8018600:	1a1b      	subne	r3, r3, r0
 8018602:	50a3      	strne	r3, [r4, r2]
 8018604:	e7af      	b.n	8018566 <_malloc_r+0x22>
 8018606:	6862      	ldr	r2, [r4, #4]
 8018608:	42a3      	cmp	r3, r4
 801860a:	bf0c      	ite	eq
 801860c:	f8c8 2000 	streq.w	r2, [r8]
 8018610:	605a      	strne	r2, [r3, #4]
 8018612:	e7eb      	b.n	80185ec <_malloc_r+0xa8>
 8018614:	4623      	mov	r3, r4
 8018616:	6864      	ldr	r4, [r4, #4]
 8018618:	e7ae      	b.n	8018578 <_malloc_r+0x34>
 801861a:	463c      	mov	r4, r7
 801861c:	687f      	ldr	r7, [r7, #4]
 801861e:	e7b6      	b.n	801858e <_malloc_r+0x4a>
 8018620:	461a      	mov	r2, r3
 8018622:	685b      	ldr	r3, [r3, #4]
 8018624:	42a3      	cmp	r3, r4
 8018626:	d1fb      	bne.n	8018620 <_malloc_r+0xdc>
 8018628:	2300      	movs	r3, #0
 801862a:	6053      	str	r3, [r2, #4]
 801862c:	e7de      	b.n	80185ec <_malloc_r+0xa8>
 801862e:	230c      	movs	r3, #12
 8018630:	6033      	str	r3, [r6, #0]
 8018632:	4630      	mov	r0, r6
 8018634:	f000 f80c 	bl	8018650 <__malloc_unlock>
 8018638:	e794      	b.n	8018564 <_malloc_r+0x20>
 801863a:	6005      	str	r5, [r0, #0]
 801863c:	e7d6      	b.n	80185ec <_malloc_r+0xa8>
 801863e:	bf00      	nop
 8018640:	2402794c 	.word	0x2402794c

08018644 <__malloc_lock>:
 8018644:	4801      	ldr	r0, [pc, #4]	@ (801864c <__malloc_lock+0x8>)
 8018646:	f000 bdf2 	b.w	801922e <__retarget_lock_acquire_recursive>
 801864a:	bf00      	nop
 801864c:	24027a90 	.word	0x24027a90

08018650 <__malloc_unlock>:
 8018650:	4801      	ldr	r0, [pc, #4]	@ (8018658 <__malloc_unlock+0x8>)
 8018652:	f000 bded 	b.w	8019230 <__retarget_lock_release_recursive>
 8018656:	bf00      	nop
 8018658:	24027a90 	.word	0x24027a90

0801865c <__cvt>:
 801865c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801865e:	ed2d 8b02 	vpush	{d8}
 8018662:	eeb0 8b40 	vmov.f64	d8, d0
 8018666:	b085      	sub	sp, #20
 8018668:	4617      	mov	r7, r2
 801866a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801866c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801866e:	ee18 2a90 	vmov	r2, s17
 8018672:	f025 0520 	bic.w	r5, r5, #32
 8018676:	2a00      	cmp	r2, #0
 8018678:	bfb6      	itet	lt
 801867a:	222d      	movlt	r2, #45	@ 0x2d
 801867c:	2200      	movge	r2, #0
 801867e:	eeb1 8b40 	vneglt.f64	d8, d0
 8018682:	2d46      	cmp	r5, #70	@ 0x46
 8018684:	460c      	mov	r4, r1
 8018686:	701a      	strb	r2, [r3, #0]
 8018688:	d004      	beq.n	8018694 <__cvt+0x38>
 801868a:	2d45      	cmp	r5, #69	@ 0x45
 801868c:	d100      	bne.n	8018690 <__cvt+0x34>
 801868e:	3401      	adds	r4, #1
 8018690:	2102      	movs	r1, #2
 8018692:	e000      	b.n	8018696 <__cvt+0x3a>
 8018694:	2103      	movs	r1, #3
 8018696:	ab03      	add	r3, sp, #12
 8018698:	9301      	str	r3, [sp, #4]
 801869a:	ab02      	add	r3, sp, #8
 801869c:	9300      	str	r3, [sp, #0]
 801869e:	4622      	mov	r2, r4
 80186a0:	4633      	mov	r3, r6
 80186a2:	eeb0 0b48 	vmov.f64	d0, d8
 80186a6:	f000 fe5b 	bl	8019360 <_dtoa_r>
 80186aa:	2d47      	cmp	r5, #71	@ 0x47
 80186ac:	d114      	bne.n	80186d8 <__cvt+0x7c>
 80186ae:	07fb      	lsls	r3, r7, #31
 80186b0:	d50a      	bpl.n	80186c8 <__cvt+0x6c>
 80186b2:	1902      	adds	r2, r0, r4
 80186b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80186b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186bc:	bf08      	it	eq
 80186be:	9203      	streq	r2, [sp, #12]
 80186c0:	2130      	movs	r1, #48	@ 0x30
 80186c2:	9b03      	ldr	r3, [sp, #12]
 80186c4:	4293      	cmp	r3, r2
 80186c6:	d319      	bcc.n	80186fc <__cvt+0xa0>
 80186c8:	9b03      	ldr	r3, [sp, #12]
 80186ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80186cc:	1a1b      	subs	r3, r3, r0
 80186ce:	6013      	str	r3, [r2, #0]
 80186d0:	b005      	add	sp, #20
 80186d2:	ecbd 8b02 	vpop	{d8}
 80186d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80186d8:	2d46      	cmp	r5, #70	@ 0x46
 80186da:	eb00 0204 	add.w	r2, r0, r4
 80186de:	d1e9      	bne.n	80186b4 <__cvt+0x58>
 80186e0:	7803      	ldrb	r3, [r0, #0]
 80186e2:	2b30      	cmp	r3, #48	@ 0x30
 80186e4:	d107      	bne.n	80186f6 <__cvt+0x9a>
 80186e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80186ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186ee:	bf1c      	itt	ne
 80186f0:	f1c4 0401 	rsbne	r4, r4, #1
 80186f4:	6034      	strne	r4, [r6, #0]
 80186f6:	6833      	ldr	r3, [r6, #0]
 80186f8:	441a      	add	r2, r3
 80186fa:	e7db      	b.n	80186b4 <__cvt+0x58>
 80186fc:	1c5c      	adds	r4, r3, #1
 80186fe:	9403      	str	r4, [sp, #12]
 8018700:	7019      	strb	r1, [r3, #0]
 8018702:	e7de      	b.n	80186c2 <__cvt+0x66>

08018704 <__exponent>:
 8018704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018706:	2900      	cmp	r1, #0
 8018708:	bfba      	itte	lt
 801870a:	4249      	neglt	r1, r1
 801870c:	232d      	movlt	r3, #45	@ 0x2d
 801870e:	232b      	movge	r3, #43	@ 0x2b
 8018710:	2909      	cmp	r1, #9
 8018712:	7002      	strb	r2, [r0, #0]
 8018714:	7043      	strb	r3, [r0, #1]
 8018716:	dd29      	ble.n	801876c <__exponent+0x68>
 8018718:	f10d 0307 	add.w	r3, sp, #7
 801871c:	461d      	mov	r5, r3
 801871e:	270a      	movs	r7, #10
 8018720:	461a      	mov	r2, r3
 8018722:	fbb1 f6f7 	udiv	r6, r1, r7
 8018726:	fb07 1416 	mls	r4, r7, r6, r1
 801872a:	3430      	adds	r4, #48	@ 0x30
 801872c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8018730:	460c      	mov	r4, r1
 8018732:	2c63      	cmp	r4, #99	@ 0x63
 8018734:	f103 33ff 	add.w	r3, r3, #4294967295
 8018738:	4631      	mov	r1, r6
 801873a:	dcf1      	bgt.n	8018720 <__exponent+0x1c>
 801873c:	3130      	adds	r1, #48	@ 0x30
 801873e:	1e94      	subs	r4, r2, #2
 8018740:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018744:	1c41      	adds	r1, r0, #1
 8018746:	4623      	mov	r3, r4
 8018748:	42ab      	cmp	r3, r5
 801874a:	d30a      	bcc.n	8018762 <__exponent+0x5e>
 801874c:	f10d 0309 	add.w	r3, sp, #9
 8018750:	1a9b      	subs	r3, r3, r2
 8018752:	42ac      	cmp	r4, r5
 8018754:	bf88      	it	hi
 8018756:	2300      	movhi	r3, #0
 8018758:	3302      	adds	r3, #2
 801875a:	4403      	add	r3, r0
 801875c:	1a18      	subs	r0, r3, r0
 801875e:	b003      	add	sp, #12
 8018760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018762:	f813 6b01 	ldrb.w	r6, [r3], #1
 8018766:	f801 6f01 	strb.w	r6, [r1, #1]!
 801876a:	e7ed      	b.n	8018748 <__exponent+0x44>
 801876c:	2330      	movs	r3, #48	@ 0x30
 801876e:	3130      	adds	r1, #48	@ 0x30
 8018770:	7083      	strb	r3, [r0, #2]
 8018772:	70c1      	strb	r1, [r0, #3]
 8018774:	1d03      	adds	r3, r0, #4
 8018776:	e7f1      	b.n	801875c <__exponent+0x58>

08018778 <_printf_float>:
 8018778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801877c:	b08d      	sub	sp, #52	@ 0x34
 801877e:	460c      	mov	r4, r1
 8018780:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8018784:	4616      	mov	r6, r2
 8018786:	461f      	mov	r7, r3
 8018788:	4605      	mov	r5, r0
 801878a:	f000 fccb 	bl	8019124 <_localeconv_r>
 801878e:	f8d0 b000 	ldr.w	fp, [r0]
 8018792:	4658      	mov	r0, fp
 8018794:	f7e7 fdf4 	bl	8000380 <strlen>
 8018798:	2300      	movs	r3, #0
 801879a:	930a      	str	r3, [sp, #40]	@ 0x28
 801879c:	f8d8 3000 	ldr.w	r3, [r8]
 80187a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80187a4:	6822      	ldr	r2, [r4, #0]
 80187a6:	9005      	str	r0, [sp, #20]
 80187a8:	3307      	adds	r3, #7
 80187aa:	f023 0307 	bic.w	r3, r3, #7
 80187ae:	f103 0108 	add.w	r1, r3, #8
 80187b2:	f8c8 1000 	str.w	r1, [r8]
 80187b6:	ed93 0b00 	vldr	d0, [r3]
 80187ba:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8018a18 <_printf_float+0x2a0>
 80187be:	eeb0 7bc0 	vabs.f64	d7, d0
 80187c2:	eeb4 7b46 	vcmp.f64	d7, d6
 80187c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187ca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80187ce:	dd24      	ble.n	801881a <_printf_float+0xa2>
 80187d0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80187d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187d8:	d502      	bpl.n	80187e0 <_printf_float+0x68>
 80187da:	232d      	movs	r3, #45	@ 0x2d
 80187dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80187e0:	498f      	ldr	r1, [pc, #572]	@ (8018a20 <_printf_float+0x2a8>)
 80187e2:	4b90      	ldr	r3, [pc, #576]	@ (8018a24 <_printf_float+0x2ac>)
 80187e4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80187e8:	bf8c      	ite	hi
 80187ea:	4688      	movhi	r8, r1
 80187ec:	4698      	movls	r8, r3
 80187ee:	f022 0204 	bic.w	r2, r2, #4
 80187f2:	2303      	movs	r3, #3
 80187f4:	6123      	str	r3, [r4, #16]
 80187f6:	6022      	str	r2, [r4, #0]
 80187f8:	f04f 0a00 	mov.w	sl, #0
 80187fc:	9700      	str	r7, [sp, #0]
 80187fe:	4633      	mov	r3, r6
 8018800:	aa0b      	add	r2, sp, #44	@ 0x2c
 8018802:	4621      	mov	r1, r4
 8018804:	4628      	mov	r0, r5
 8018806:	f000 f9d1 	bl	8018bac <_printf_common>
 801880a:	3001      	adds	r0, #1
 801880c:	f040 8089 	bne.w	8018922 <_printf_float+0x1aa>
 8018810:	f04f 30ff 	mov.w	r0, #4294967295
 8018814:	b00d      	add	sp, #52	@ 0x34
 8018816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801881a:	eeb4 0b40 	vcmp.f64	d0, d0
 801881e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018822:	d709      	bvc.n	8018838 <_printf_float+0xc0>
 8018824:	ee10 3a90 	vmov	r3, s1
 8018828:	2b00      	cmp	r3, #0
 801882a:	bfbc      	itt	lt
 801882c:	232d      	movlt	r3, #45	@ 0x2d
 801882e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8018832:	497d      	ldr	r1, [pc, #500]	@ (8018a28 <_printf_float+0x2b0>)
 8018834:	4b7d      	ldr	r3, [pc, #500]	@ (8018a2c <_printf_float+0x2b4>)
 8018836:	e7d5      	b.n	80187e4 <_printf_float+0x6c>
 8018838:	6863      	ldr	r3, [r4, #4]
 801883a:	1c59      	adds	r1, r3, #1
 801883c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8018840:	d139      	bne.n	80188b6 <_printf_float+0x13e>
 8018842:	2306      	movs	r3, #6
 8018844:	6063      	str	r3, [r4, #4]
 8018846:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801884a:	2300      	movs	r3, #0
 801884c:	6022      	str	r2, [r4, #0]
 801884e:	9303      	str	r3, [sp, #12]
 8018850:	ab0a      	add	r3, sp, #40	@ 0x28
 8018852:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8018856:	ab09      	add	r3, sp, #36	@ 0x24
 8018858:	9300      	str	r3, [sp, #0]
 801885a:	6861      	ldr	r1, [r4, #4]
 801885c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8018860:	4628      	mov	r0, r5
 8018862:	f7ff fefb 	bl	801865c <__cvt>
 8018866:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801886a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801886c:	4680      	mov	r8, r0
 801886e:	d129      	bne.n	80188c4 <_printf_float+0x14c>
 8018870:	1cc8      	adds	r0, r1, #3
 8018872:	db02      	blt.n	801887a <_printf_float+0x102>
 8018874:	6863      	ldr	r3, [r4, #4]
 8018876:	4299      	cmp	r1, r3
 8018878:	dd41      	ble.n	80188fe <_printf_float+0x186>
 801887a:	f1a9 0902 	sub.w	r9, r9, #2
 801887e:	fa5f f989 	uxtb.w	r9, r9
 8018882:	3901      	subs	r1, #1
 8018884:	464a      	mov	r2, r9
 8018886:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801888a:	9109      	str	r1, [sp, #36]	@ 0x24
 801888c:	f7ff ff3a 	bl	8018704 <__exponent>
 8018890:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018892:	1813      	adds	r3, r2, r0
 8018894:	2a01      	cmp	r2, #1
 8018896:	4682      	mov	sl, r0
 8018898:	6123      	str	r3, [r4, #16]
 801889a:	dc02      	bgt.n	80188a2 <_printf_float+0x12a>
 801889c:	6822      	ldr	r2, [r4, #0]
 801889e:	07d2      	lsls	r2, r2, #31
 80188a0:	d501      	bpl.n	80188a6 <_printf_float+0x12e>
 80188a2:	3301      	adds	r3, #1
 80188a4:	6123      	str	r3, [r4, #16]
 80188a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d0a6      	beq.n	80187fc <_printf_float+0x84>
 80188ae:	232d      	movs	r3, #45	@ 0x2d
 80188b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80188b4:	e7a2      	b.n	80187fc <_printf_float+0x84>
 80188b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80188ba:	d1c4      	bne.n	8018846 <_printf_float+0xce>
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d1c2      	bne.n	8018846 <_printf_float+0xce>
 80188c0:	2301      	movs	r3, #1
 80188c2:	e7bf      	b.n	8018844 <_printf_float+0xcc>
 80188c4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80188c8:	d9db      	bls.n	8018882 <_printf_float+0x10a>
 80188ca:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80188ce:	d118      	bne.n	8018902 <_printf_float+0x18a>
 80188d0:	2900      	cmp	r1, #0
 80188d2:	6863      	ldr	r3, [r4, #4]
 80188d4:	dd0b      	ble.n	80188ee <_printf_float+0x176>
 80188d6:	6121      	str	r1, [r4, #16]
 80188d8:	b913      	cbnz	r3, 80188e0 <_printf_float+0x168>
 80188da:	6822      	ldr	r2, [r4, #0]
 80188dc:	07d0      	lsls	r0, r2, #31
 80188de:	d502      	bpl.n	80188e6 <_printf_float+0x16e>
 80188e0:	3301      	adds	r3, #1
 80188e2:	440b      	add	r3, r1
 80188e4:	6123      	str	r3, [r4, #16]
 80188e6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80188e8:	f04f 0a00 	mov.w	sl, #0
 80188ec:	e7db      	b.n	80188a6 <_printf_float+0x12e>
 80188ee:	b913      	cbnz	r3, 80188f6 <_printf_float+0x17e>
 80188f0:	6822      	ldr	r2, [r4, #0]
 80188f2:	07d2      	lsls	r2, r2, #31
 80188f4:	d501      	bpl.n	80188fa <_printf_float+0x182>
 80188f6:	3302      	adds	r3, #2
 80188f8:	e7f4      	b.n	80188e4 <_printf_float+0x16c>
 80188fa:	2301      	movs	r3, #1
 80188fc:	e7f2      	b.n	80188e4 <_printf_float+0x16c>
 80188fe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8018902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018904:	4299      	cmp	r1, r3
 8018906:	db05      	blt.n	8018914 <_printf_float+0x19c>
 8018908:	6823      	ldr	r3, [r4, #0]
 801890a:	6121      	str	r1, [r4, #16]
 801890c:	07d8      	lsls	r0, r3, #31
 801890e:	d5ea      	bpl.n	80188e6 <_printf_float+0x16e>
 8018910:	1c4b      	adds	r3, r1, #1
 8018912:	e7e7      	b.n	80188e4 <_printf_float+0x16c>
 8018914:	2900      	cmp	r1, #0
 8018916:	bfd4      	ite	le
 8018918:	f1c1 0202 	rsble	r2, r1, #2
 801891c:	2201      	movgt	r2, #1
 801891e:	4413      	add	r3, r2
 8018920:	e7e0      	b.n	80188e4 <_printf_float+0x16c>
 8018922:	6823      	ldr	r3, [r4, #0]
 8018924:	055a      	lsls	r2, r3, #21
 8018926:	d407      	bmi.n	8018938 <_printf_float+0x1c0>
 8018928:	6923      	ldr	r3, [r4, #16]
 801892a:	4642      	mov	r2, r8
 801892c:	4631      	mov	r1, r6
 801892e:	4628      	mov	r0, r5
 8018930:	47b8      	blx	r7
 8018932:	3001      	adds	r0, #1
 8018934:	d12a      	bne.n	801898c <_printf_float+0x214>
 8018936:	e76b      	b.n	8018810 <_printf_float+0x98>
 8018938:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801893c:	f240 80e0 	bls.w	8018b00 <_printf_float+0x388>
 8018940:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8018944:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801894c:	d133      	bne.n	80189b6 <_printf_float+0x23e>
 801894e:	4a38      	ldr	r2, [pc, #224]	@ (8018a30 <_printf_float+0x2b8>)
 8018950:	2301      	movs	r3, #1
 8018952:	4631      	mov	r1, r6
 8018954:	4628      	mov	r0, r5
 8018956:	47b8      	blx	r7
 8018958:	3001      	adds	r0, #1
 801895a:	f43f af59 	beq.w	8018810 <_printf_float+0x98>
 801895e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8018962:	4543      	cmp	r3, r8
 8018964:	db02      	blt.n	801896c <_printf_float+0x1f4>
 8018966:	6823      	ldr	r3, [r4, #0]
 8018968:	07d8      	lsls	r0, r3, #31
 801896a:	d50f      	bpl.n	801898c <_printf_float+0x214>
 801896c:	9b05      	ldr	r3, [sp, #20]
 801896e:	465a      	mov	r2, fp
 8018970:	4631      	mov	r1, r6
 8018972:	4628      	mov	r0, r5
 8018974:	47b8      	blx	r7
 8018976:	3001      	adds	r0, #1
 8018978:	f43f af4a 	beq.w	8018810 <_printf_float+0x98>
 801897c:	f04f 0900 	mov.w	r9, #0
 8018980:	f108 38ff 	add.w	r8, r8, #4294967295
 8018984:	f104 0a1a 	add.w	sl, r4, #26
 8018988:	45c8      	cmp	r8, r9
 801898a:	dc09      	bgt.n	80189a0 <_printf_float+0x228>
 801898c:	6823      	ldr	r3, [r4, #0]
 801898e:	079b      	lsls	r3, r3, #30
 8018990:	f100 8107 	bmi.w	8018ba2 <_printf_float+0x42a>
 8018994:	68e0      	ldr	r0, [r4, #12]
 8018996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018998:	4298      	cmp	r0, r3
 801899a:	bfb8      	it	lt
 801899c:	4618      	movlt	r0, r3
 801899e:	e739      	b.n	8018814 <_printf_float+0x9c>
 80189a0:	2301      	movs	r3, #1
 80189a2:	4652      	mov	r2, sl
 80189a4:	4631      	mov	r1, r6
 80189a6:	4628      	mov	r0, r5
 80189a8:	47b8      	blx	r7
 80189aa:	3001      	adds	r0, #1
 80189ac:	f43f af30 	beq.w	8018810 <_printf_float+0x98>
 80189b0:	f109 0901 	add.w	r9, r9, #1
 80189b4:	e7e8      	b.n	8018988 <_printf_float+0x210>
 80189b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	dc3b      	bgt.n	8018a34 <_printf_float+0x2bc>
 80189bc:	4a1c      	ldr	r2, [pc, #112]	@ (8018a30 <_printf_float+0x2b8>)
 80189be:	2301      	movs	r3, #1
 80189c0:	4631      	mov	r1, r6
 80189c2:	4628      	mov	r0, r5
 80189c4:	47b8      	blx	r7
 80189c6:	3001      	adds	r0, #1
 80189c8:	f43f af22 	beq.w	8018810 <_printf_float+0x98>
 80189cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80189d0:	ea59 0303 	orrs.w	r3, r9, r3
 80189d4:	d102      	bne.n	80189dc <_printf_float+0x264>
 80189d6:	6823      	ldr	r3, [r4, #0]
 80189d8:	07d9      	lsls	r1, r3, #31
 80189da:	d5d7      	bpl.n	801898c <_printf_float+0x214>
 80189dc:	9b05      	ldr	r3, [sp, #20]
 80189de:	465a      	mov	r2, fp
 80189e0:	4631      	mov	r1, r6
 80189e2:	4628      	mov	r0, r5
 80189e4:	47b8      	blx	r7
 80189e6:	3001      	adds	r0, #1
 80189e8:	f43f af12 	beq.w	8018810 <_printf_float+0x98>
 80189ec:	f04f 0a00 	mov.w	sl, #0
 80189f0:	f104 0b1a 	add.w	fp, r4, #26
 80189f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189f6:	425b      	negs	r3, r3
 80189f8:	4553      	cmp	r3, sl
 80189fa:	dc01      	bgt.n	8018a00 <_printf_float+0x288>
 80189fc:	464b      	mov	r3, r9
 80189fe:	e794      	b.n	801892a <_printf_float+0x1b2>
 8018a00:	2301      	movs	r3, #1
 8018a02:	465a      	mov	r2, fp
 8018a04:	4631      	mov	r1, r6
 8018a06:	4628      	mov	r0, r5
 8018a08:	47b8      	blx	r7
 8018a0a:	3001      	adds	r0, #1
 8018a0c:	f43f af00 	beq.w	8018810 <_printf_float+0x98>
 8018a10:	f10a 0a01 	add.w	sl, sl, #1
 8018a14:	e7ee      	b.n	80189f4 <_printf_float+0x27c>
 8018a16:	bf00      	nop
 8018a18:	ffffffff 	.word	0xffffffff
 8018a1c:	7fefffff 	.word	0x7fefffff
 8018a20:	0801b5c0 	.word	0x0801b5c0
 8018a24:	0801b5bc 	.word	0x0801b5bc
 8018a28:	0801b5c8 	.word	0x0801b5c8
 8018a2c:	0801b5c4 	.word	0x0801b5c4
 8018a30:	0801b5cc 	.word	0x0801b5cc
 8018a34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018a36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8018a3a:	4553      	cmp	r3, sl
 8018a3c:	bfa8      	it	ge
 8018a3e:	4653      	movge	r3, sl
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	4699      	mov	r9, r3
 8018a44:	dc37      	bgt.n	8018ab6 <_printf_float+0x33e>
 8018a46:	2300      	movs	r3, #0
 8018a48:	9307      	str	r3, [sp, #28]
 8018a4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018a4e:	f104 021a 	add.w	r2, r4, #26
 8018a52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018a54:	9907      	ldr	r1, [sp, #28]
 8018a56:	9306      	str	r3, [sp, #24]
 8018a58:	eba3 0309 	sub.w	r3, r3, r9
 8018a5c:	428b      	cmp	r3, r1
 8018a5e:	dc31      	bgt.n	8018ac4 <_printf_float+0x34c>
 8018a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a62:	459a      	cmp	sl, r3
 8018a64:	dc3b      	bgt.n	8018ade <_printf_float+0x366>
 8018a66:	6823      	ldr	r3, [r4, #0]
 8018a68:	07da      	lsls	r2, r3, #31
 8018a6a:	d438      	bmi.n	8018ade <_printf_float+0x366>
 8018a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a6e:	ebaa 0903 	sub.w	r9, sl, r3
 8018a72:	9b06      	ldr	r3, [sp, #24]
 8018a74:	ebaa 0303 	sub.w	r3, sl, r3
 8018a78:	4599      	cmp	r9, r3
 8018a7a:	bfa8      	it	ge
 8018a7c:	4699      	movge	r9, r3
 8018a7e:	f1b9 0f00 	cmp.w	r9, #0
 8018a82:	dc34      	bgt.n	8018aee <_printf_float+0x376>
 8018a84:	f04f 0800 	mov.w	r8, #0
 8018a88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018a8c:	f104 0b1a 	add.w	fp, r4, #26
 8018a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a92:	ebaa 0303 	sub.w	r3, sl, r3
 8018a96:	eba3 0309 	sub.w	r3, r3, r9
 8018a9a:	4543      	cmp	r3, r8
 8018a9c:	f77f af76 	ble.w	801898c <_printf_float+0x214>
 8018aa0:	2301      	movs	r3, #1
 8018aa2:	465a      	mov	r2, fp
 8018aa4:	4631      	mov	r1, r6
 8018aa6:	4628      	mov	r0, r5
 8018aa8:	47b8      	blx	r7
 8018aaa:	3001      	adds	r0, #1
 8018aac:	f43f aeb0 	beq.w	8018810 <_printf_float+0x98>
 8018ab0:	f108 0801 	add.w	r8, r8, #1
 8018ab4:	e7ec      	b.n	8018a90 <_printf_float+0x318>
 8018ab6:	4642      	mov	r2, r8
 8018ab8:	4631      	mov	r1, r6
 8018aba:	4628      	mov	r0, r5
 8018abc:	47b8      	blx	r7
 8018abe:	3001      	adds	r0, #1
 8018ac0:	d1c1      	bne.n	8018a46 <_printf_float+0x2ce>
 8018ac2:	e6a5      	b.n	8018810 <_printf_float+0x98>
 8018ac4:	2301      	movs	r3, #1
 8018ac6:	4631      	mov	r1, r6
 8018ac8:	4628      	mov	r0, r5
 8018aca:	9206      	str	r2, [sp, #24]
 8018acc:	47b8      	blx	r7
 8018ace:	3001      	adds	r0, #1
 8018ad0:	f43f ae9e 	beq.w	8018810 <_printf_float+0x98>
 8018ad4:	9b07      	ldr	r3, [sp, #28]
 8018ad6:	9a06      	ldr	r2, [sp, #24]
 8018ad8:	3301      	adds	r3, #1
 8018ada:	9307      	str	r3, [sp, #28]
 8018adc:	e7b9      	b.n	8018a52 <_printf_float+0x2da>
 8018ade:	9b05      	ldr	r3, [sp, #20]
 8018ae0:	465a      	mov	r2, fp
 8018ae2:	4631      	mov	r1, r6
 8018ae4:	4628      	mov	r0, r5
 8018ae6:	47b8      	blx	r7
 8018ae8:	3001      	adds	r0, #1
 8018aea:	d1bf      	bne.n	8018a6c <_printf_float+0x2f4>
 8018aec:	e690      	b.n	8018810 <_printf_float+0x98>
 8018aee:	9a06      	ldr	r2, [sp, #24]
 8018af0:	464b      	mov	r3, r9
 8018af2:	4442      	add	r2, r8
 8018af4:	4631      	mov	r1, r6
 8018af6:	4628      	mov	r0, r5
 8018af8:	47b8      	blx	r7
 8018afa:	3001      	adds	r0, #1
 8018afc:	d1c2      	bne.n	8018a84 <_printf_float+0x30c>
 8018afe:	e687      	b.n	8018810 <_printf_float+0x98>
 8018b00:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8018b04:	f1b9 0f01 	cmp.w	r9, #1
 8018b08:	dc01      	bgt.n	8018b0e <_printf_float+0x396>
 8018b0a:	07db      	lsls	r3, r3, #31
 8018b0c:	d536      	bpl.n	8018b7c <_printf_float+0x404>
 8018b0e:	2301      	movs	r3, #1
 8018b10:	4642      	mov	r2, r8
 8018b12:	4631      	mov	r1, r6
 8018b14:	4628      	mov	r0, r5
 8018b16:	47b8      	blx	r7
 8018b18:	3001      	adds	r0, #1
 8018b1a:	f43f ae79 	beq.w	8018810 <_printf_float+0x98>
 8018b1e:	9b05      	ldr	r3, [sp, #20]
 8018b20:	465a      	mov	r2, fp
 8018b22:	4631      	mov	r1, r6
 8018b24:	4628      	mov	r0, r5
 8018b26:	47b8      	blx	r7
 8018b28:	3001      	adds	r0, #1
 8018b2a:	f43f ae71 	beq.w	8018810 <_printf_float+0x98>
 8018b2e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8018b32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b3a:	f109 39ff 	add.w	r9, r9, #4294967295
 8018b3e:	d018      	beq.n	8018b72 <_printf_float+0x3fa>
 8018b40:	464b      	mov	r3, r9
 8018b42:	f108 0201 	add.w	r2, r8, #1
 8018b46:	4631      	mov	r1, r6
 8018b48:	4628      	mov	r0, r5
 8018b4a:	47b8      	blx	r7
 8018b4c:	3001      	adds	r0, #1
 8018b4e:	d10c      	bne.n	8018b6a <_printf_float+0x3f2>
 8018b50:	e65e      	b.n	8018810 <_printf_float+0x98>
 8018b52:	2301      	movs	r3, #1
 8018b54:	465a      	mov	r2, fp
 8018b56:	4631      	mov	r1, r6
 8018b58:	4628      	mov	r0, r5
 8018b5a:	47b8      	blx	r7
 8018b5c:	3001      	adds	r0, #1
 8018b5e:	f43f ae57 	beq.w	8018810 <_printf_float+0x98>
 8018b62:	f108 0801 	add.w	r8, r8, #1
 8018b66:	45c8      	cmp	r8, r9
 8018b68:	dbf3      	blt.n	8018b52 <_printf_float+0x3da>
 8018b6a:	4653      	mov	r3, sl
 8018b6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8018b70:	e6dc      	b.n	801892c <_printf_float+0x1b4>
 8018b72:	f04f 0800 	mov.w	r8, #0
 8018b76:	f104 0b1a 	add.w	fp, r4, #26
 8018b7a:	e7f4      	b.n	8018b66 <_printf_float+0x3ee>
 8018b7c:	2301      	movs	r3, #1
 8018b7e:	4642      	mov	r2, r8
 8018b80:	e7e1      	b.n	8018b46 <_printf_float+0x3ce>
 8018b82:	2301      	movs	r3, #1
 8018b84:	464a      	mov	r2, r9
 8018b86:	4631      	mov	r1, r6
 8018b88:	4628      	mov	r0, r5
 8018b8a:	47b8      	blx	r7
 8018b8c:	3001      	adds	r0, #1
 8018b8e:	f43f ae3f 	beq.w	8018810 <_printf_float+0x98>
 8018b92:	f108 0801 	add.w	r8, r8, #1
 8018b96:	68e3      	ldr	r3, [r4, #12]
 8018b98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018b9a:	1a5b      	subs	r3, r3, r1
 8018b9c:	4543      	cmp	r3, r8
 8018b9e:	dcf0      	bgt.n	8018b82 <_printf_float+0x40a>
 8018ba0:	e6f8      	b.n	8018994 <_printf_float+0x21c>
 8018ba2:	f04f 0800 	mov.w	r8, #0
 8018ba6:	f104 0919 	add.w	r9, r4, #25
 8018baa:	e7f4      	b.n	8018b96 <_printf_float+0x41e>

08018bac <_printf_common>:
 8018bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bb0:	4616      	mov	r6, r2
 8018bb2:	4698      	mov	r8, r3
 8018bb4:	688a      	ldr	r2, [r1, #8]
 8018bb6:	690b      	ldr	r3, [r1, #16]
 8018bb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018bbc:	4293      	cmp	r3, r2
 8018bbe:	bfb8      	it	lt
 8018bc0:	4613      	movlt	r3, r2
 8018bc2:	6033      	str	r3, [r6, #0]
 8018bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018bc8:	4607      	mov	r7, r0
 8018bca:	460c      	mov	r4, r1
 8018bcc:	b10a      	cbz	r2, 8018bd2 <_printf_common+0x26>
 8018bce:	3301      	adds	r3, #1
 8018bd0:	6033      	str	r3, [r6, #0]
 8018bd2:	6823      	ldr	r3, [r4, #0]
 8018bd4:	0699      	lsls	r1, r3, #26
 8018bd6:	bf42      	ittt	mi
 8018bd8:	6833      	ldrmi	r3, [r6, #0]
 8018bda:	3302      	addmi	r3, #2
 8018bdc:	6033      	strmi	r3, [r6, #0]
 8018bde:	6825      	ldr	r5, [r4, #0]
 8018be0:	f015 0506 	ands.w	r5, r5, #6
 8018be4:	d106      	bne.n	8018bf4 <_printf_common+0x48>
 8018be6:	f104 0a19 	add.w	sl, r4, #25
 8018bea:	68e3      	ldr	r3, [r4, #12]
 8018bec:	6832      	ldr	r2, [r6, #0]
 8018bee:	1a9b      	subs	r3, r3, r2
 8018bf0:	42ab      	cmp	r3, r5
 8018bf2:	dc26      	bgt.n	8018c42 <_printf_common+0x96>
 8018bf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018bf8:	6822      	ldr	r2, [r4, #0]
 8018bfa:	3b00      	subs	r3, #0
 8018bfc:	bf18      	it	ne
 8018bfe:	2301      	movne	r3, #1
 8018c00:	0692      	lsls	r2, r2, #26
 8018c02:	d42b      	bmi.n	8018c5c <_printf_common+0xb0>
 8018c04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018c08:	4641      	mov	r1, r8
 8018c0a:	4638      	mov	r0, r7
 8018c0c:	47c8      	blx	r9
 8018c0e:	3001      	adds	r0, #1
 8018c10:	d01e      	beq.n	8018c50 <_printf_common+0xa4>
 8018c12:	6823      	ldr	r3, [r4, #0]
 8018c14:	6922      	ldr	r2, [r4, #16]
 8018c16:	f003 0306 	and.w	r3, r3, #6
 8018c1a:	2b04      	cmp	r3, #4
 8018c1c:	bf02      	ittt	eq
 8018c1e:	68e5      	ldreq	r5, [r4, #12]
 8018c20:	6833      	ldreq	r3, [r6, #0]
 8018c22:	1aed      	subeq	r5, r5, r3
 8018c24:	68a3      	ldr	r3, [r4, #8]
 8018c26:	bf0c      	ite	eq
 8018c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018c2c:	2500      	movne	r5, #0
 8018c2e:	4293      	cmp	r3, r2
 8018c30:	bfc4      	itt	gt
 8018c32:	1a9b      	subgt	r3, r3, r2
 8018c34:	18ed      	addgt	r5, r5, r3
 8018c36:	2600      	movs	r6, #0
 8018c38:	341a      	adds	r4, #26
 8018c3a:	42b5      	cmp	r5, r6
 8018c3c:	d11a      	bne.n	8018c74 <_printf_common+0xc8>
 8018c3e:	2000      	movs	r0, #0
 8018c40:	e008      	b.n	8018c54 <_printf_common+0xa8>
 8018c42:	2301      	movs	r3, #1
 8018c44:	4652      	mov	r2, sl
 8018c46:	4641      	mov	r1, r8
 8018c48:	4638      	mov	r0, r7
 8018c4a:	47c8      	blx	r9
 8018c4c:	3001      	adds	r0, #1
 8018c4e:	d103      	bne.n	8018c58 <_printf_common+0xac>
 8018c50:	f04f 30ff 	mov.w	r0, #4294967295
 8018c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c58:	3501      	adds	r5, #1
 8018c5a:	e7c6      	b.n	8018bea <_printf_common+0x3e>
 8018c5c:	18e1      	adds	r1, r4, r3
 8018c5e:	1c5a      	adds	r2, r3, #1
 8018c60:	2030      	movs	r0, #48	@ 0x30
 8018c62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018c66:	4422      	add	r2, r4
 8018c68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018c6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018c70:	3302      	adds	r3, #2
 8018c72:	e7c7      	b.n	8018c04 <_printf_common+0x58>
 8018c74:	2301      	movs	r3, #1
 8018c76:	4622      	mov	r2, r4
 8018c78:	4641      	mov	r1, r8
 8018c7a:	4638      	mov	r0, r7
 8018c7c:	47c8      	blx	r9
 8018c7e:	3001      	adds	r0, #1
 8018c80:	d0e6      	beq.n	8018c50 <_printf_common+0xa4>
 8018c82:	3601      	adds	r6, #1
 8018c84:	e7d9      	b.n	8018c3a <_printf_common+0x8e>
	...

08018c88 <_printf_i>:
 8018c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018c8c:	7e0f      	ldrb	r7, [r1, #24]
 8018c8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018c90:	2f78      	cmp	r7, #120	@ 0x78
 8018c92:	4691      	mov	r9, r2
 8018c94:	4680      	mov	r8, r0
 8018c96:	460c      	mov	r4, r1
 8018c98:	469a      	mov	sl, r3
 8018c9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018c9e:	d807      	bhi.n	8018cb0 <_printf_i+0x28>
 8018ca0:	2f62      	cmp	r7, #98	@ 0x62
 8018ca2:	d80a      	bhi.n	8018cba <_printf_i+0x32>
 8018ca4:	2f00      	cmp	r7, #0
 8018ca6:	f000 80d1 	beq.w	8018e4c <_printf_i+0x1c4>
 8018caa:	2f58      	cmp	r7, #88	@ 0x58
 8018cac:	f000 80b8 	beq.w	8018e20 <_printf_i+0x198>
 8018cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018cb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018cb8:	e03a      	b.n	8018d30 <_printf_i+0xa8>
 8018cba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018cbe:	2b15      	cmp	r3, #21
 8018cc0:	d8f6      	bhi.n	8018cb0 <_printf_i+0x28>
 8018cc2:	a101      	add	r1, pc, #4	@ (adr r1, 8018cc8 <_printf_i+0x40>)
 8018cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018cc8:	08018d21 	.word	0x08018d21
 8018ccc:	08018d35 	.word	0x08018d35
 8018cd0:	08018cb1 	.word	0x08018cb1
 8018cd4:	08018cb1 	.word	0x08018cb1
 8018cd8:	08018cb1 	.word	0x08018cb1
 8018cdc:	08018cb1 	.word	0x08018cb1
 8018ce0:	08018d35 	.word	0x08018d35
 8018ce4:	08018cb1 	.word	0x08018cb1
 8018ce8:	08018cb1 	.word	0x08018cb1
 8018cec:	08018cb1 	.word	0x08018cb1
 8018cf0:	08018cb1 	.word	0x08018cb1
 8018cf4:	08018e33 	.word	0x08018e33
 8018cf8:	08018d5f 	.word	0x08018d5f
 8018cfc:	08018ded 	.word	0x08018ded
 8018d00:	08018cb1 	.word	0x08018cb1
 8018d04:	08018cb1 	.word	0x08018cb1
 8018d08:	08018e55 	.word	0x08018e55
 8018d0c:	08018cb1 	.word	0x08018cb1
 8018d10:	08018d5f 	.word	0x08018d5f
 8018d14:	08018cb1 	.word	0x08018cb1
 8018d18:	08018cb1 	.word	0x08018cb1
 8018d1c:	08018df5 	.word	0x08018df5
 8018d20:	6833      	ldr	r3, [r6, #0]
 8018d22:	1d1a      	adds	r2, r3, #4
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	6032      	str	r2, [r6, #0]
 8018d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018d2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018d30:	2301      	movs	r3, #1
 8018d32:	e09c      	b.n	8018e6e <_printf_i+0x1e6>
 8018d34:	6833      	ldr	r3, [r6, #0]
 8018d36:	6820      	ldr	r0, [r4, #0]
 8018d38:	1d19      	adds	r1, r3, #4
 8018d3a:	6031      	str	r1, [r6, #0]
 8018d3c:	0606      	lsls	r6, r0, #24
 8018d3e:	d501      	bpl.n	8018d44 <_printf_i+0xbc>
 8018d40:	681d      	ldr	r5, [r3, #0]
 8018d42:	e003      	b.n	8018d4c <_printf_i+0xc4>
 8018d44:	0645      	lsls	r5, r0, #25
 8018d46:	d5fb      	bpl.n	8018d40 <_printf_i+0xb8>
 8018d48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018d4c:	2d00      	cmp	r5, #0
 8018d4e:	da03      	bge.n	8018d58 <_printf_i+0xd0>
 8018d50:	232d      	movs	r3, #45	@ 0x2d
 8018d52:	426d      	negs	r5, r5
 8018d54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018d58:	4858      	ldr	r0, [pc, #352]	@ (8018ebc <_printf_i+0x234>)
 8018d5a:	230a      	movs	r3, #10
 8018d5c:	e011      	b.n	8018d82 <_printf_i+0xfa>
 8018d5e:	6821      	ldr	r1, [r4, #0]
 8018d60:	6833      	ldr	r3, [r6, #0]
 8018d62:	0608      	lsls	r0, r1, #24
 8018d64:	f853 5b04 	ldr.w	r5, [r3], #4
 8018d68:	d402      	bmi.n	8018d70 <_printf_i+0xe8>
 8018d6a:	0649      	lsls	r1, r1, #25
 8018d6c:	bf48      	it	mi
 8018d6e:	b2ad      	uxthmi	r5, r5
 8018d70:	2f6f      	cmp	r7, #111	@ 0x6f
 8018d72:	4852      	ldr	r0, [pc, #328]	@ (8018ebc <_printf_i+0x234>)
 8018d74:	6033      	str	r3, [r6, #0]
 8018d76:	bf14      	ite	ne
 8018d78:	230a      	movne	r3, #10
 8018d7a:	2308      	moveq	r3, #8
 8018d7c:	2100      	movs	r1, #0
 8018d7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018d82:	6866      	ldr	r6, [r4, #4]
 8018d84:	60a6      	str	r6, [r4, #8]
 8018d86:	2e00      	cmp	r6, #0
 8018d88:	db05      	blt.n	8018d96 <_printf_i+0x10e>
 8018d8a:	6821      	ldr	r1, [r4, #0]
 8018d8c:	432e      	orrs	r6, r5
 8018d8e:	f021 0104 	bic.w	r1, r1, #4
 8018d92:	6021      	str	r1, [r4, #0]
 8018d94:	d04b      	beq.n	8018e2e <_printf_i+0x1a6>
 8018d96:	4616      	mov	r6, r2
 8018d98:	fbb5 f1f3 	udiv	r1, r5, r3
 8018d9c:	fb03 5711 	mls	r7, r3, r1, r5
 8018da0:	5dc7      	ldrb	r7, [r0, r7]
 8018da2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018da6:	462f      	mov	r7, r5
 8018da8:	42bb      	cmp	r3, r7
 8018daa:	460d      	mov	r5, r1
 8018dac:	d9f4      	bls.n	8018d98 <_printf_i+0x110>
 8018dae:	2b08      	cmp	r3, #8
 8018db0:	d10b      	bne.n	8018dca <_printf_i+0x142>
 8018db2:	6823      	ldr	r3, [r4, #0]
 8018db4:	07df      	lsls	r7, r3, #31
 8018db6:	d508      	bpl.n	8018dca <_printf_i+0x142>
 8018db8:	6923      	ldr	r3, [r4, #16]
 8018dba:	6861      	ldr	r1, [r4, #4]
 8018dbc:	4299      	cmp	r1, r3
 8018dbe:	bfde      	ittt	le
 8018dc0:	2330      	movle	r3, #48	@ 0x30
 8018dc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018dc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018dca:	1b92      	subs	r2, r2, r6
 8018dcc:	6122      	str	r2, [r4, #16]
 8018dce:	f8cd a000 	str.w	sl, [sp]
 8018dd2:	464b      	mov	r3, r9
 8018dd4:	aa03      	add	r2, sp, #12
 8018dd6:	4621      	mov	r1, r4
 8018dd8:	4640      	mov	r0, r8
 8018dda:	f7ff fee7 	bl	8018bac <_printf_common>
 8018dde:	3001      	adds	r0, #1
 8018de0:	d14a      	bne.n	8018e78 <_printf_i+0x1f0>
 8018de2:	f04f 30ff 	mov.w	r0, #4294967295
 8018de6:	b004      	add	sp, #16
 8018de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018dec:	6823      	ldr	r3, [r4, #0]
 8018dee:	f043 0320 	orr.w	r3, r3, #32
 8018df2:	6023      	str	r3, [r4, #0]
 8018df4:	4832      	ldr	r0, [pc, #200]	@ (8018ec0 <_printf_i+0x238>)
 8018df6:	2778      	movs	r7, #120	@ 0x78
 8018df8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018dfc:	6823      	ldr	r3, [r4, #0]
 8018dfe:	6831      	ldr	r1, [r6, #0]
 8018e00:	061f      	lsls	r7, r3, #24
 8018e02:	f851 5b04 	ldr.w	r5, [r1], #4
 8018e06:	d402      	bmi.n	8018e0e <_printf_i+0x186>
 8018e08:	065f      	lsls	r7, r3, #25
 8018e0a:	bf48      	it	mi
 8018e0c:	b2ad      	uxthmi	r5, r5
 8018e0e:	6031      	str	r1, [r6, #0]
 8018e10:	07d9      	lsls	r1, r3, #31
 8018e12:	bf44      	itt	mi
 8018e14:	f043 0320 	orrmi.w	r3, r3, #32
 8018e18:	6023      	strmi	r3, [r4, #0]
 8018e1a:	b11d      	cbz	r5, 8018e24 <_printf_i+0x19c>
 8018e1c:	2310      	movs	r3, #16
 8018e1e:	e7ad      	b.n	8018d7c <_printf_i+0xf4>
 8018e20:	4826      	ldr	r0, [pc, #152]	@ (8018ebc <_printf_i+0x234>)
 8018e22:	e7e9      	b.n	8018df8 <_printf_i+0x170>
 8018e24:	6823      	ldr	r3, [r4, #0]
 8018e26:	f023 0320 	bic.w	r3, r3, #32
 8018e2a:	6023      	str	r3, [r4, #0]
 8018e2c:	e7f6      	b.n	8018e1c <_printf_i+0x194>
 8018e2e:	4616      	mov	r6, r2
 8018e30:	e7bd      	b.n	8018dae <_printf_i+0x126>
 8018e32:	6833      	ldr	r3, [r6, #0]
 8018e34:	6825      	ldr	r5, [r4, #0]
 8018e36:	6961      	ldr	r1, [r4, #20]
 8018e38:	1d18      	adds	r0, r3, #4
 8018e3a:	6030      	str	r0, [r6, #0]
 8018e3c:	062e      	lsls	r6, r5, #24
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	d501      	bpl.n	8018e46 <_printf_i+0x1be>
 8018e42:	6019      	str	r1, [r3, #0]
 8018e44:	e002      	b.n	8018e4c <_printf_i+0x1c4>
 8018e46:	0668      	lsls	r0, r5, #25
 8018e48:	d5fb      	bpl.n	8018e42 <_printf_i+0x1ba>
 8018e4a:	8019      	strh	r1, [r3, #0]
 8018e4c:	2300      	movs	r3, #0
 8018e4e:	6123      	str	r3, [r4, #16]
 8018e50:	4616      	mov	r6, r2
 8018e52:	e7bc      	b.n	8018dce <_printf_i+0x146>
 8018e54:	6833      	ldr	r3, [r6, #0]
 8018e56:	1d1a      	adds	r2, r3, #4
 8018e58:	6032      	str	r2, [r6, #0]
 8018e5a:	681e      	ldr	r6, [r3, #0]
 8018e5c:	6862      	ldr	r2, [r4, #4]
 8018e5e:	2100      	movs	r1, #0
 8018e60:	4630      	mov	r0, r6
 8018e62:	f7e7 fa3d 	bl	80002e0 <memchr>
 8018e66:	b108      	cbz	r0, 8018e6c <_printf_i+0x1e4>
 8018e68:	1b80      	subs	r0, r0, r6
 8018e6a:	6060      	str	r0, [r4, #4]
 8018e6c:	6863      	ldr	r3, [r4, #4]
 8018e6e:	6123      	str	r3, [r4, #16]
 8018e70:	2300      	movs	r3, #0
 8018e72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018e76:	e7aa      	b.n	8018dce <_printf_i+0x146>
 8018e78:	6923      	ldr	r3, [r4, #16]
 8018e7a:	4632      	mov	r2, r6
 8018e7c:	4649      	mov	r1, r9
 8018e7e:	4640      	mov	r0, r8
 8018e80:	47d0      	blx	sl
 8018e82:	3001      	adds	r0, #1
 8018e84:	d0ad      	beq.n	8018de2 <_printf_i+0x15a>
 8018e86:	6823      	ldr	r3, [r4, #0]
 8018e88:	079b      	lsls	r3, r3, #30
 8018e8a:	d413      	bmi.n	8018eb4 <_printf_i+0x22c>
 8018e8c:	68e0      	ldr	r0, [r4, #12]
 8018e8e:	9b03      	ldr	r3, [sp, #12]
 8018e90:	4298      	cmp	r0, r3
 8018e92:	bfb8      	it	lt
 8018e94:	4618      	movlt	r0, r3
 8018e96:	e7a6      	b.n	8018de6 <_printf_i+0x15e>
 8018e98:	2301      	movs	r3, #1
 8018e9a:	4632      	mov	r2, r6
 8018e9c:	4649      	mov	r1, r9
 8018e9e:	4640      	mov	r0, r8
 8018ea0:	47d0      	blx	sl
 8018ea2:	3001      	adds	r0, #1
 8018ea4:	d09d      	beq.n	8018de2 <_printf_i+0x15a>
 8018ea6:	3501      	adds	r5, #1
 8018ea8:	68e3      	ldr	r3, [r4, #12]
 8018eaa:	9903      	ldr	r1, [sp, #12]
 8018eac:	1a5b      	subs	r3, r3, r1
 8018eae:	42ab      	cmp	r3, r5
 8018eb0:	dcf2      	bgt.n	8018e98 <_printf_i+0x210>
 8018eb2:	e7eb      	b.n	8018e8c <_printf_i+0x204>
 8018eb4:	2500      	movs	r5, #0
 8018eb6:	f104 0619 	add.w	r6, r4, #25
 8018eba:	e7f5      	b.n	8018ea8 <_printf_i+0x220>
 8018ebc:	0801b5ce 	.word	0x0801b5ce
 8018ec0:	0801b5df 	.word	0x0801b5df

08018ec4 <std>:
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	b510      	push	{r4, lr}
 8018ec8:	4604      	mov	r4, r0
 8018eca:	e9c0 3300 	strd	r3, r3, [r0]
 8018ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018ed2:	6083      	str	r3, [r0, #8]
 8018ed4:	8181      	strh	r1, [r0, #12]
 8018ed6:	6643      	str	r3, [r0, #100]	@ 0x64
 8018ed8:	81c2      	strh	r2, [r0, #14]
 8018eda:	6183      	str	r3, [r0, #24]
 8018edc:	4619      	mov	r1, r3
 8018ede:	2208      	movs	r2, #8
 8018ee0:	305c      	adds	r0, #92	@ 0x5c
 8018ee2:	f000 f916 	bl	8019112 <memset>
 8018ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8018f1c <std+0x58>)
 8018ee8:	6263      	str	r3, [r4, #36]	@ 0x24
 8018eea:	4b0d      	ldr	r3, [pc, #52]	@ (8018f20 <std+0x5c>)
 8018eec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018eee:	4b0d      	ldr	r3, [pc, #52]	@ (8018f24 <std+0x60>)
 8018ef0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8018f28 <std+0x64>)
 8018ef4:	6323      	str	r3, [r4, #48]	@ 0x30
 8018ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8018f2c <std+0x68>)
 8018ef8:	6224      	str	r4, [r4, #32]
 8018efa:	429c      	cmp	r4, r3
 8018efc:	d006      	beq.n	8018f0c <std+0x48>
 8018efe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018f02:	4294      	cmp	r4, r2
 8018f04:	d002      	beq.n	8018f0c <std+0x48>
 8018f06:	33d0      	adds	r3, #208	@ 0xd0
 8018f08:	429c      	cmp	r4, r3
 8018f0a:	d105      	bne.n	8018f18 <std+0x54>
 8018f0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f14:	f000 b98a 	b.w	801922c <__retarget_lock_init_recursive>
 8018f18:	bd10      	pop	{r4, pc}
 8018f1a:	bf00      	nop
 8018f1c:	0801908d 	.word	0x0801908d
 8018f20:	080190af 	.word	0x080190af
 8018f24:	080190e7 	.word	0x080190e7
 8018f28:	0801910b 	.word	0x0801910b
 8018f2c:	24027950 	.word	0x24027950

08018f30 <stdio_exit_handler>:
 8018f30:	4a02      	ldr	r2, [pc, #8]	@ (8018f3c <stdio_exit_handler+0xc>)
 8018f32:	4903      	ldr	r1, [pc, #12]	@ (8018f40 <stdio_exit_handler+0x10>)
 8018f34:	4803      	ldr	r0, [pc, #12]	@ (8018f44 <stdio_exit_handler+0x14>)
 8018f36:	f000 b869 	b.w	801900c <_fwalk_sglue>
 8018f3a:	bf00      	nop
 8018f3c:	2400011c 	.word	0x2400011c
 8018f40:	0801a95d 	.word	0x0801a95d
 8018f44:	2400012c 	.word	0x2400012c

08018f48 <cleanup_stdio>:
 8018f48:	6841      	ldr	r1, [r0, #4]
 8018f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8018f7c <cleanup_stdio+0x34>)
 8018f4c:	4299      	cmp	r1, r3
 8018f4e:	b510      	push	{r4, lr}
 8018f50:	4604      	mov	r4, r0
 8018f52:	d001      	beq.n	8018f58 <cleanup_stdio+0x10>
 8018f54:	f001 fd02 	bl	801a95c <_fflush_r>
 8018f58:	68a1      	ldr	r1, [r4, #8]
 8018f5a:	4b09      	ldr	r3, [pc, #36]	@ (8018f80 <cleanup_stdio+0x38>)
 8018f5c:	4299      	cmp	r1, r3
 8018f5e:	d002      	beq.n	8018f66 <cleanup_stdio+0x1e>
 8018f60:	4620      	mov	r0, r4
 8018f62:	f001 fcfb 	bl	801a95c <_fflush_r>
 8018f66:	68e1      	ldr	r1, [r4, #12]
 8018f68:	4b06      	ldr	r3, [pc, #24]	@ (8018f84 <cleanup_stdio+0x3c>)
 8018f6a:	4299      	cmp	r1, r3
 8018f6c:	d004      	beq.n	8018f78 <cleanup_stdio+0x30>
 8018f6e:	4620      	mov	r0, r4
 8018f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f74:	f001 bcf2 	b.w	801a95c <_fflush_r>
 8018f78:	bd10      	pop	{r4, pc}
 8018f7a:	bf00      	nop
 8018f7c:	24027950 	.word	0x24027950
 8018f80:	240279b8 	.word	0x240279b8
 8018f84:	24027a20 	.word	0x24027a20

08018f88 <global_stdio_init.part.0>:
 8018f88:	b510      	push	{r4, lr}
 8018f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8018fb8 <global_stdio_init.part.0+0x30>)
 8018f8c:	4c0b      	ldr	r4, [pc, #44]	@ (8018fbc <global_stdio_init.part.0+0x34>)
 8018f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8018fc0 <global_stdio_init.part.0+0x38>)
 8018f90:	601a      	str	r2, [r3, #0]
 8018f92:	4620      	mov	r0, r4
 8018f94:	2200      	movs	r2, #0
 8018f96:	2104      	movs	r1, #4
 8018f98:	f7ff ff94 	bl	8018ec4 <std>
 8018f9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018fa0:	2201      	movs	r2, #1
 8018fa2:	2109      	movs	r1, #9
 8018fa4:	f7ff ff8e 	bl	8018ec4 <std>
 8018fa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018fac:	2202      	movs	r2, #2
 8018fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018fb2:	2112      	movs	r1, #18
 8018fb4:	f7ff bf86 	b.w	8018ec4 <std>
 8018fb8:	24027a88 	.word	0x24027a88
 8018fbc:	24027950 	.word	0x24027950
 8018fc0:	08018f31 	.word	0x08018f31

08018fc4 <__sfp_lock_acquire>:
 8018fc4:	4801      	ldr	r0, [pc, #4]	@ (8018fcc <__sfp_lock_acquire+0x8>)
 8018fc6:	f000 b932 	b.w	801922e <__retarget_lock_acquire_recursive>
 8018fca:	bf00      	nop
 8018fcc:	24027a91 	.word	0x24027a91

08018fd0 <__sfp_lock_release>:
 8018fd0:	4801      	ldr	r0, [pc, #4]	@ (8018fd8 <__sfp_lock_release+0x8>)
 8018fd2:	f000 b92d 	b.w	8019230 <__retarget_lock_release_recursive>
 8018fd6:	bf00      	nop
 8018fd8:	24027a91 	.word	0x24027a91

08018fdc <__sinit>:
 8018fdc:	b510      	push	{r4, lr}
 8018fde:	4604      	mov	r4, r0
 8018fe0:	f7ff fff0 	bl	8018fc4 <__sfp_lock_acquire>
 8018fe4:	6a23      	ldr	r3, [r4, #32]
 8018fe6:	b11b      	cbz	r3, 8018ff0 <__sinit+0x14>
 8018fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018fec:	f7ff bff0 	b.w	8018fd0 <__sfp_lock_release>
 8018ff0:	4b04      	ldr	r3, [pc, #16]	@ (8019004 <__sinit+0x28>)
 8018ff2:	6223      	str	r3, [r4, #32]
 8018ff4:	4b04      	ldr	r3, [pc, #16]	@ (8019008 <__sinit+0x2c>)
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d1f5      	bne.n	8018fe8 <__sinit+0xc>
 8018ffc:	f7ff ffc4 	bl	8018f88 <global_stdio_init.part.0>
 8019000:	e7f2      	b.n	8018fe8 <__sinit+0xc>
 8019002:	bf00      	nop
 8019004:	08018f49 	.word	0x08018f49
 8019008:	24027a88 	.word	0x24027a88

0801900c <_fwalk_sglue>:
 801900c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019010:	4607      	mov	r7, r0
 8019012:	4688      	mov	r8, r1
 8019014:	4614      	mov	r4, r2
 8019016:	2600      	movs	r6, #0
 8019018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801901c:	f1b9 0901 	subs.w	r9, r9, #1
 8019020:	d505      	bpl.n	801902e <_fwalk_sglue+0x22>
 8019022:	6824      	ldr	r4, [r4, #0]
 8019024:	2c00      	cmp	r4, #0
 8019026:	d1f7      	bne.n	8019018 <_fwalk_sglue+0xc>
 8019028:	4630      	mov	r0, r6
 801902a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801902e:	89ab      	ldrh	r3, [r5, #12]
 8019030:	2b01      	cmp	r3, #1
 8019032:	d907      	bls.n	8019044 <_fwalk_sglue+0x38>
 8019034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019038:	3301      	adds	r3, #1
 801903a:	d003      	beq.n	8019044 <_fwalk_sglue+0x38>
 801903c:	4629      	mov	r1, r5
 801903e:	4638      	mov	r0, r7
 8019040:	47c0      	blx	r8
 8019042:	4306      	orrs	r6, r0
 8019044:	3568      	adds	r5, #104	@ 0x68
 8019046:	e7e9      	b.n	801901c <_fwalk_sglue+0x10>

08019048 <siprintf>:
 8019048:	b40e      	push	{r1, r2, r3}
 801904a:	b510      	push	{r4, lr}
 801904c:	b09d      	sub	sp, #116	@ 0x74
 801904e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8019050:	9002      	str	r0, [sp, #8]
 8019052:	9006      	str	r0, [sp, #24]
 8019054:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019058:	480a      	ldr	r0, [pc, #40]	@ (8019084 <siprintf+0x3c>)
 801905a:	9107      	str	r1, [sp, #28]
 801905c:	9104      	str	r1, [sp, #16]
 801905e:	490a      	ldr	r1, [pc, #40]	@ (8019088 <siprintf+0x40>)
 8019060:	f853 2b04 	ldr.w	r2, [r3], #4
 8019064:	9105      	str	r1, [sp, #20]
 8019066:	2400      	movs	r4, #0
 8019068:	a902      	add	r1, sp, #8
 801906a:	6800      	ldr	r0, [r0, #0]
 801906c:	9301      	str	r3, [sp, #4]
 801906e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8019070:	f001 faf4 	bl	801a65c <_svfiprintf_r>
 8019074:	9b02      	ldr	r3, [sp, #8]
 8019076:	701c      	strb	r4, [r3, #0]
 8019078:	b01d      	add	sp, #116	@ 0x74
 801907a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801907e:	b003      	add	sp, #12
 8019080:	4770      	bx	lr
 8019082:	bf00      	nop
 8019084:	24000128 	.word	0x24000128
 8019088:	ffff0208 	.word	0xffff0208

0801908c <__sread>:
 801908c:	b510      	push	{r4, lr}
 801908e:	460c      	mov	r4, r1
 8019090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019094:	f000 f86c 	bl	8019170 <_read_r>
 8019098:	2800      	cmp	r0, #0
 801909a:	bfab      	itete	ge
 801909c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801909e:	89a3      	ldrhlt	r3, [r4, #12]
 80190a0:	181b      	addge	r3, r3, r0
 80190a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80190a6:	bfac      	ite	ge
 80190a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80190aa:	81a3      	strhlt	r3, [r4, #12]
 80190ac:	bd10      	pop	{r4, pc}

080190ae <__swrite>:
 80190ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190b2:	461f      	mov	r7, r3
 80190b4:	898b      	ldrh	r3, [r1, #12]
 80190b6:	05db      	lsls	r3, r3, #23
 80190b8:	4605      	mov	r5, r0
 80190ba:	460c      	mov	r4, r1
 80190bc:	4616      	mov	r6, r2
 80190be:	d505      	bpl.n	80190cc <__swrite+0x1e>
 80190c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190c4:	2302      	movs	r3, #2
 80190c6:	2200      	movs	r2, #0
 80190c8:	f000 f840 	bl	801914c <_lseek_r>
 80190cc:	89a3      	ldrh	r3, [r4, #12]
 80190ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80190d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80190d6:	81a3      	strh	r3, [r4, #12]
 80190d8:	4632      	mov	r2, r6
 80190da:	463b      	mov	r3, r7
 80190dc:	4628      	mov	r0, r5
 80190de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80190e2:	f000 b867 	b.w	80191b4 <_write_r>

080190e6 <__sseek>:
 80190e6:	b510      	push	{r4, lr}
 80190e8:	460c      	mov	r4, r1
 80190ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190ee:	f000 f82d 	bl	801914c <_lseek_r>
 80190f2:	1c43      	adds	r3, r0, #1
 80190f4:	89a3      	ldrh	r3, [r4, #12]
 80190f6:	bf15      	itete	ne
 80190f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80190fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80190fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019102:	81a3      	strheq	r3, [r4, #12]
 8019104:	bf18      	it	ne
 8019106:	81a3      	strhne	r3, [r4, #12]
 8019108:	bd10      	pop	{r4, pc}

0801910a <__sclose>:
 801910a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801910e:	f000 b80d 	b.w	801912c <_close_r>

08019112 <memset>:
 8019112:	4402      	add	r2, r0
 8019114:	4603      	mov	r3, r0
 8019116:	4293      	cmp	r3, r2
 8019118:	d100      	bne.n	801911c <memset+0xa>
 801911a:	4770      	bx	lr
 801911c:	f803 1b01 	strb.w	r1, [r3], #1
 8019120:	e7f9      	b.n	8019116 <memset+0x4>
	...

08019124 <_localeconv_r>:
 8019124:	4800      	ldr	r0, [pc, #0]	@ (8019128 <_localeconv_r+0x4>)
 8019126:	4770      	bx	lr
 8019128:	24000268 	.word	0x24000268

0801912c <_close_r>:
 801912c:	b538      	push	{r3, r4, r5, lr}
 801912e:	4d06      	ldr	r5, [pc, #24]	@ (8019148 <_close_r+0x1c>)
 8019130:	2300      	movs	r3, #0
 8019132:	4604      	mov	r4, r0
 8019134:	4608      	mov	r0, r1
 8019136:	602b      	str	r3, [r5, #0]
 8019138:	f7e9 feb0 	bl	8002e9c <_close>
 801913c:	1c43      	adds	r3, r0, #1
 801913e:	d102      	bne.n	8019146 <_close_r+0x1a>
 8019140:	682b      	ldr	r3, [r5, #0]
 8019142:	b103      	cbz	r3, 8019146 <_close_r+0x1a>
 8019144:	6023      	str	r3, [r4, #0]
 8019146:	bd38      	pop	{r3, r4, r5, pc}
 8019148:	24027a8c 	.word	0x24027a8c

0801914c <_lseek_r>:
 801914c:	b538      	push	{r3, r4, r5, lr}
 801914e:	4d07      	ldr	r5, [pc, #28]	@ (801916c <_lseek_r+0x20>)
 8019150:	4604      	mov	r4, r0
 8019152:	4608      	mov	r0, r1
 8019154:	4611      	mov	r1, r2
 8019156:	2200      	movs	r2, #0
 8019158:	602a      	str	r2, [r5, #0]
 801915a:	461a      	mov	r2, r3
 801915c:	f7e9 fec5 	bl	8002eea <_lseek>
 8019160:	1c43      	adds	r3, r0, #1
 8019162:	d102      	bne.n	801916a <_lseek_r+0x1e>
 8019164:	682b      	ldr	r3, [r5, #0]
 8019166:	b103      	cbz	r3, 801916a <_lseek_r+0x1e>
 8019168:	6023      	str	r3, [r4, #0]
 801916a:	bd38      	pop	{r3, r4, r5, pc}
 801916c:	24027a8c 	.word	0x24027a8c

08019170 <_read_r>:
 8019170:	b538      	push	{r3, r4, r5, lr}
 8019172:	4d07      	ldr	r5, [pc, #28]	@ (8019190 <_read_r+0x20>)
 8019174:	4604      	mov	r4, r0
 8019176:	4608      	mov	r0, r1
 8019178:	4611      	mov	r1, r2
 801917a:	2200      	movs	r2, #0
 801917c:	602a      	str	r2, [r5, #0]
 801917e:	461a      	mov	r2, r3
 8019180:	f7e9 fe53 	bl	8002e2a <_read>
 8019184:	1c43      	adds	r3, r0, #1
 8019186:	d102      	bne.n	801918e <_read_r+0x1e>
 8019188:	682b      	ldr	r3, [r5, #0]
 801918a:	b103      	cbz	r3, 801918e <_read_r+0x1e>
 801918c:	6023      	str	r3, [r4, #0]
 801918e:	bd38      	pop	{r3, r4, r5, pc}
 8019190:	24027a8c 	.word	0x24027a8c

08019194 <_sbrk_r>:
 8019194:	b538      	push	{r3, r4, r5, lr}
 8019196:	4d06      	ldr	r5, [pc, #24]	@ (80191b0 <_sbrk_r+0x1c>)
 8019198:	2300      	movs	r3, #0
 801919a:	4604      	mov	r4, r0
 801919c:	4608      	mov	r0, r1
 801919e:	602b      	str	r3, [r5, #0]
 80191a0:	f7e9 feb0 	bl	8002f04 <_sbrk>
 80191a4:	1c43      	adds	r3, r0, #1
 80191a6:	d102      	bne.n	80191ae <_sbrk_r+0x1a>
 80191a8:	682b      	ldr	r3, [r5, #0]
 80191aa:	b103      	cbz	r3, 80191ae <_sbrk_r+0x1a>
 80191ac:	6023      	str	r3, [r4, #0]
 80191ae:	bd38      	pop	{r3, r4, r5, pc}
 80191b0:	24027a8c 	.word	0x24027a8c

080191b4 <_write_r>:
 80191b4:	b538      	push	{r3, r4, r5, lr}
 80191b6:	4d07      	ldr	r5, [pc, #28]	@ (80191d4 <_write_r+0x20>)
 80191b8:	4604      	mov	r4, r0
 80191ba:	4608      	mov	r0, r1
 80191bc:	4611      	mov	r1, r2
 80191be:	2200      	movs	r2, #0
 80191c0:	602a      	str	r2, [r5, #0]
 80191c2:	461a      	mov	r2, r3
 80191c4:	f7e9 fe4e 	bl	8002e64 <_write>
 80191c8:	1c43      	adds	r3, r0, #1
 80191ca:	d102      	bne.n	80191d2 <_write_r+0x1e>
 80191cc:	682b      	ldr	r3, [r5, #0]
 80191ce:	b103      	cbz	r3, 80191d2 <_write_r+0x1e>
 80191d0:	6023      	str	r3, [r4, #0]
 80191d2:	bd38      	pop	{r3, r4, r5, pc}
 80191d4:	24027a8c 	.word	0x24027a8c

080191d8 <__errno>:
 80191d8:	4b01      	ldr	r3, [pc, #4]	@ (80191e0 <__errno+0x8>)
 80191da:	6818      	ldr	r0, [r3, #0]
 80191dc:	4770      	bx	lr
 80191de:	bf00      	nop
 80191e0:	24000128 	.word	0x24000128

080191e4 <__libc_init_array>:
 80191e4:	b570      	push	{r4, r5, r6, lr}
 80191e6:	4d0d      	ldr	r5, [pc, #52]	@ (801921c <__libc_init_array+0x38>)
 80191e8:	4c0d      	ldr	r4, [pc, #52]	@ (8019220 <__libc_init_array+0x3c>)
 80191ea:	1b64      	subs	r4, r4, r5
 80191ec:	10a4      	asrs	r4, r4, #2
 80191ee:	2600      	movs	r6, #0
 80191f0:	42a6      	cmp	r6, r4
 80191f2:	d109      	bne.n	8019208 <__libc_init_array+0x24>
 80191f4:	4d0b      	ldr	r5, [pc, #44]	@ (8019224 <__libc_init_array+0x40>)
 80191f6:	4c0c      	ldr	r4, [pc, #48]	@ (8019228 <__libc_init_array+0x44>)
 80191f8:	f001 ff30 	bl	801b05c <_init>
 80191fc:	1b64      	subs	r4, r4, r5
 80191fe:	10a4      	asrs	r4, r4, #2
 8019200:	2600      	movs	r6, #0
 8019202:	42a6      	cmp	r6, r4
 8019204:	d105      	bne.n	8019212 <__libc_init_array+0x2e>
 8019206:	bd70      	pop	{r4, r5, r6, pc}
 8019208:	f855 3b04 	ldr.w	r3, [r5], #4
 801920c:	4798      	blx	r3
 801920e:	3601      	adds	r6, #1
 8019210:	e7ee      	b.n	80191f0 <__libc_init_array+0xc>
 8019212:	f855 3b04 	ldr.w	r3, [r5], #4
 8019216:	4798      	blx	r3
 8019218:	3601      	adds	r6, #1
 801921a:	e7f2      	b.n	8019202 <__libc_init_array+0x1e>
 801921c:	0801b93c 	.word	0x0801b93c
 8019220:	0801b93c 	.word	0x0801b93c
 8019224:	0801b93c 	.word	0x0801b93c
 8019228:	0801b940 	.word	0x0801b940

0801922c <__retarget_lock_init_recursive>:
 801922c:	4770      	bx	lr

0801922e <__retarget_lock_acquire_recursive>:
 801922e:	4770      	bx	lr

08019230 <__retarget_lock_release_recursive>:
 8019230:	4770      	bx	lr

08019232 <memcpy>:
 8019232:	440a      	add	r2, r1
 8019234:	4291      	cmp	r1, r2
 8019236:	f100 33ff 	add.w	r3, r0, #4294967295
 801923a:	d100      	bne.n	801923e <memcpy+0xc>
 801923c:	4770      	bx	lr
 801923e:	b510      	push	{r4, lr}
 8019240:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019244:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019248:	4291      	cmp	r1, r2
 801924a:	d1f9      	bne.n	8019240 <memcpy+0xe>
 801924c:	bd10      	pop	{r4, pc}

0801924e <quorem>:
 801924e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019252:	6903      	ldr	r3, [r0, #16]
 8019254:	690c      	ldr	r4, [r1, #16]
 8019256:	42a3      	cmp	r3, r4
 8019258:	4607      	mov	r7, r0
 801925a:	db7e      	blt.n	801935a <quorem+0x10c>
 801925c:	3c01      	subs	r4, #1
 801925e:	f101 0814 	add.w	r8, r1, #20
 8019262:	00a3      	lsls	r3, r4, #2
 8019264:	f100 0514 	add.w	r5, r0, #20
 8019268:	9300      	str	r3, [sp, #0]
 801926a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801926e:	9301      	str	r3, [sp, #4]
 8019270:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019274:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019278:	3301      	adds	r3, #1
 801927a:	429a      	cmp	r2, r3
 801927c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019280:	fbb2 f6f3 	udiv	r6, r2, r3
 8019284:	d32e      	bcc.n	80192e4 <quorem+0x96>
 8019286:	f04f 0a00 	mov.w	sl, #0
 801928a:	46c4      	mov	ip, r8
 801928c:	46ae      	mov	lr, r5
 801928e:	46d3      	mov	fp, sl
 8019290:	f85c 3b04 	ldr.w	r3, [ip], #4
 8019294:	b298      	uxth	r0, r3
 8019296:	fb06 a000 	mla	r0, r6, r0, sl
 801929a:	0c02      	lsrs	r2, r0, #16
 801929c:	0c1b      	lsrs	r3, r3, #16
 801929e:	fb06 2303 	mla	r3, r6, r3, r2
 80192a2:	f8de 2000 	ldr.w	r2, [lr]
 80192a6:	b280      	uxth	r0, r0
 80192a8:	b292      	uxth	r2, r2
 80192aa:	1a12      	subs	r2, r2, r0
 80192ac:	445a      	add	r2, fp
 80192ae:	f8de 0000 	ldr.w	r0, [lr]
 80192b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80192b6:	b29b      	uxth	r3, r3
 80192b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80192bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80192c0:	b292      	uxth	r2, r2
 80192c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80192c6:	45e1      	cmp	r9, ip
 80192c8:	f84e 2b04 	str.w	r2, [lr], #4
 80192cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80192d0:	d2de      	bcs.n	8019290 <quorem+0x42>
 80192d2:	9b00      	ldr	r3, [sp, #0]
 80192d4:	58eb      	ldr	r3, [r5, r3]
 80192d6:	b92b      	cbnz	r3, 80192e4 <quorem+0x96>
 80192d8:	9b01      	ldr	r3, [sp, #4]
 80192da:	3b04      	subs	r3, #4
 80192dc:	429d      	cmp	r5, r3
 80192de:	461a      	mov	r2, r3
 80192e0:	d32f      	bcc.n	8019342 <quorem+0xf4>
 80192e2:	613c      	str	r4, [r7, #16]
 80192e4:	4638      	mov	r0, r7
 80192e6:	f001 f855 	bl	801a394 <__mcmp>
 80192ea:	2800      	cmp	r0, #0
 80192ec:	db25      	blt.n	801933a <quorem+0xec>
 80192ee:	4629      	mov	r1, r5
 80192f0:	2000      	movs	r0, #0
 80192f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80192f6:	f8d1 c000 	ldr.w	ip, [r1]
 80192fa:	fa1f fe82 	uxth.w	lr, r2
 80192fe:	fa1f f38c 	uxth.w	r3, ip
 8019302:	eba3 030e 	sub.w	r3, r3, lr
 8019306:	4403      	add	r3, r0
 8019308:	0c12      	lsrs	r2, r2, #16
 801930a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801930e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8019312:	b29b      	uxth	r3, r3
 8019314:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019318:	45c1      	cmp	r9, r8
 801931a:	f841 3b04 	str.w	r3, [r1], #4
 801931e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019322:	d2e6      	bcs.n	80192f2 <quorem+0xa4>
 8019324:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019328:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801932c:	b922      	cbnz	r2, 8019338 <quorem+0xea>
 801932e:	3b04      	subs	r3, #4
 8019330:	429d      	cmp	r5, r3
 8019332:	461a      	mov	r2, r3
 8019334:	d30b      	bcc.n	801934e <quorem+0x100>
 8019336:	613c      	str	r4, [r7, #16]
 8019338:	3601      	adds	r6, #1
 801933a:	4630      	mov	r0, r6
 801933c:	b003      	add	sp, #12
 801933e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019342:	6812      	ldr	r2, [r2, #0]
 8019344:	3b04      	subs	r3, #4
 8019346:	2a00      	cmp	r2, #0
 8019348:	d1cb      	bne.n	80192e2 <quorem+0x94>
 801934a:	3c01      	subs	r4, #1
 801934c:	e7c6      	b.n	80192dc <quorem+0x8e>
 801934e:	6812      	ldr	r2, [r2, #0]
 8019350:	3b04      	subs	r3, #4
 8019352:	2a00      	cmp	r2, #0
 8019354:	d1ef      	bne.n	8019336 <quorem+0xe8>
 8019356:	3c01      	subs	r4, #1
 8019358:	e7ea      	b.n	8019330 <quorem+0xe2>
 801935a:	2000      	movs	r0, #0
 801935c:	e7ee      	b.n	801933c <quorem+0xee>
	...

08019360 <_dtoa_r>:
 8019360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019364:	ed2d 8b02 	vpush	{d8}
 8019368:	69c7      	ldr	r7, [r0, #28]
 801936a:	b091      	sub	sp, #68	@ 0x44
 801936c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019370:	ec55 4b10 	vmov	r4, r5, d0
 8019374:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8019376:	9107      	str	r1, [sp, #28]
 8019378:	4681      	mov	r9, r0
 801937a:	9209      	str	r2, [sp, #36]	@ 0x24
 801937c:	930d      	str	r3, [sp, #52]	@ 0x34
 801937e:	b97f      	cbnz	r7, 80193a0 <_dtoa_r+0x40>
 8019380:	2010      	movs	r0, #16
 8019382:	f7ff f8b5 	bl	80184f0 <malloc>
 8019386:	4602      	mov	r2, r0
 8019388:	f8c9 001c 	str.w	r0, [r9, #28]
 801938c:	b920      	cbnz	r0, 8019398 <_dtoa_r+0x38>
 801938e:	4ba0      	ldr	r3, [pc, #640]	@ (8019610 <_dtoa_r+0x2b0>)
 8019390:	21ef      	movs	r1, #239	@ 0xef
 8019392:	48a0      	ldr	r0, [pc, #640]	@ (8019614 <_dtoa_r+0x2b4>)
 8019394:	f001 fb24 	bl	801a9e0 <__assert_func>
 8019398:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801939c:	6007      	str	r7, [r0, #0]
 801939e:	60c7      	str	r7, [r0, #12]
 80193a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80193a4:	6819      	ldr	r1, [r3, #0]
 80193a6:	b159      	cbz	r1, 80193c0 <_dtoa_r+0x60>
 80193a8:	685a      	ldr	r2, [r3, #4]
 80193aa:	604a      	str	r2, [r1, #4]
 80193ac:	2301      	movs	r3, #1
 80193ae:	4093      	lsls	r3, r2
 80193b0:	608b      	str	r3, [r1, #8]
 80193b2:	4648      	mov	r0, r9
 80193b4:	f000 fdbc 	bl	8019f30 <_Bfree>
 80193b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80193bc:	2200      	movs	r2, #0
 80193be:	601a      	str	r2, [r3, #0]
 80193c0:	1e2b      	subs	r3, r5, #0
 80193c2:	bfbb      	ittet	lt
 80193c4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80193c8:	9303      	strlt	r3, [sp, #12]
 80193ca:	2300      	movge	r3, #0
 80193cc:	2201      	movlt	r2, #1
 80193ce:	bfac      	ite	ge
 80193d0:	6033      	strge	r3, [r6, #0]
 80193d2:	6032      	strlt	r2, [r6, #0]
 80193d4:	4b90      	ldr	r3, [pc, #576]	@ (8019618 <_dtoa_r+0x2b8>)
 80193d6:	9e03      	ldr	r6, [sp, #12]
 80193d8:	43b3      	bics	r3, r6
 80193da:	d110      	bne.n	80193fe <_dtoa_r+0x9e>
 80193dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80193de:	f242 730f 	movw	r3, #9999	@ 0x270f
 80193e2:	6013      	str	r3, [r2, #0]
 80193e4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80193e8:	4323      	orrs	r3, r4
 80193ea:	f000 84e6 	beq.w	8019dba <_dtoa_r+0xa5a>
 80193ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80193f0:	4f8a      	ldr	r7, [pc, #552]	@ (801961c <_dtoa_r+0x2bc>)
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	f000 84e8 	beq.w	8019dc8 <_dtoa_r+0xa68>
 80193f8:	1cfb      	adds	r3, r7, #3
 80193fa:	f000 bce3 	b.w	8019dc4 <_dtoa_r+0xa64>
 80193fe:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019402:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801940a:	d10a      	bne.n	8019422 <_dtoa_r+0xc2>
 801940c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801940e:	2301      	movs	r3, #1
 8019410:	6013      	str	r3, [r2, #0]
 8019412:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019414:	b113      	cbz	r3, 801941c <_dtoa_r+0xbc>
 8019416:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019418:	4b81      	ldr	r3, [pc, #516]	@ (8019620 <_dtoa_r+0x2c0>)
 801941a:	6013      	str	r3, [r2, #0]
 801941c:	4f81      	ldr	r7, [pc, #516]	@ (8019624 <_dtoa_r+0x2c4>)
 801941e:	f000 bcd3 	b.w	8019dc8 <_dtoa_r+0xa68>
 8019422:	aa0e      	add	r2, sp, #56	@ 0x38
 8019424:	a90f      	add	r1, sp, #60	@ 0x3c
 8019426:	4648      	mov	r0, r9
 8019428:	eeb0 0b48 	vmov.f64	d0, d8
 801942c:	f001 f862 	bl	801a4f4 <__d2b>
 8019430:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8019434:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019436:	9001      	str	r0, [sp, #4]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d045      	beq.n	80194c8 <_dtoa_r+0x168>
 801943c:	eeb0 7b48 	vmov.f64	d7, d8
 8019440:	ee18 1a90 	vmov	r1, s17
 8019444:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019448:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801944c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8019450:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8019454:	2500      	movs	r5, #0
 8019456:	ee07 1a90 	vmov	s15, r1
 801945a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801945e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80195f8 <_dtoa_r+0x298>
 8019462:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019466:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8019600 <_dtoa_r+0x2a0>
 801946a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801946e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019608 <_dtoa_r+0x2a8>
 8019472:	ee07 3a90 	vmov	s15, r3
 8019476:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801947a:	eeb0 7b46 	vmov.f64	d7, d6
 801947e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019482:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019486:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801948a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801948e:	ee16 8a90 	vmov	r8, s13
 8019492:	d508      	bpl.n	80194a6 <_dtoa_r+0x146>
 8019494:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019498:	eeb4 6b47 	vcmp.f64	d6, d7
 801949c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194a0:	bf18      	it	ne
 80194a2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80194a6:	f1b8 0f16 	cmp.w	r8, #22
 80194aa:	d82b      	bhi.n	8019504 <_dtoa_r+0x1a4>
 80194ac:	495e      	ldr	r1, [pc, #376]	@ (8019628 <_dtoa_r+0x2c8>)
 80194ae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80194b2:	ed91 7b00 	vldr	d7, [r1]
 80194b6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80194ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194be:	d501      	bpl.n	80194c4 <_dtoa_r+0x164>
 80194c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80194c4:	2100      	movs	r1, #0
 80194c6:	e01e      	b.n	8019506 <_dtoa_r+0x1a6>
 80194c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80194ca:	4413      	add	r3, r2
 80194cc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80194d0:	2920      	cmp	r1, #32
 80194d2:	bfc1      	itttt	gt
 80194d4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80194d8:	408e      	lslgt	r6, r1
 80194da:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80194de:	fa24 f101 	lsrgt.w	r1, r4, r1
 80194e2:	bfd6      	itet	le
 80194e4:	f1c1 0120 	rsble	r1, r1, #32
 80194e8:	4331      	orrgt	r1, r6
 80194ea:	fa04 f101 	lslle.w	r1, r4, r1
 80194ee:	ee07 1a90 	vmov	s15, r1
 80194f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80194f6:	3b01      	subs	r3, #1
 80194f8:	ee17 1a90 	vmov	r1, s15
 80194fc:	2501      	movs	r5, #1
 80194fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8019502:	e7a8      	b.n	8019456 <_dtoa_r+0xf6>
 8019504:	2101      	movs	r1, #1
 8019506:	1ad2      	subs	r2, r2, r3
 8019508:	1e53      	subs	r3, r2, #1
 801950a:	9306      	str	r3, [sp, #24]
 801950c:	bf45      	ittet	mi
 801950e:	f1c2 0301 	rsbmi	r3, r2, #1
 8019512:	9304      	strmi	r3, [sp, #16]
 8019514:	2300      	movpl	r3, #0
 8019516:	2300      	movmi	r3, #0
 8019518:	bf4c      	ite	mi
 801951a:	9306      	strmi	r3, [sp, #24]
 801951c:	9304      	strpl	r3, [sp, #16]
 801951e:	f1b8 0f00 	cmp.w	r8, #0
 8019522:	910c      	str	r1, [sp, #48]	@ 0x30
 8019524:	db18      	blt.n	8019558 <_dtoa_r+0x1f8>
 8019526:	9b06      	ldr	r3, [sp, #24]
 8019528:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801952c:	4443      	add	r3, r8
 801952e:	9306      	str	r3, [sp, #24]
 8019530:	2300      	movs	r3, #0
 8019532:	9a07      	ldr	r2, [sp, #28]
 8019534:	2a09      	cmp	r2, #9
 8019536:	d845      	bhi.n	80195c4 <_dtoa_r+0x264>
 8019538:	2a05      	cmp	r2, #5
 801953a:	bfc4      	itt	gt
 801953c:	3a04      	subgt	r2, #4
 801953e:	9207      	strgt	r2, [sp, #28]
 8019540:	9a07      	ldr	r2, [sp, #28]
 8019542:	f1a2 0202 	sub.w	r2, r2, #2
 8019546:	bfcc      	ite	gt
 8019548:	2400      	movgt	r4, #0
 801954a:	2401      	movle	r4, #1
 801954c:	2a03      	cmp	r2, #3
 801954e:	d844      	bhi.n	80195da <_dtoa_r+0x27a>
 8019550:	e8df f002 	tbb	[pc, r2]
 8019554:	0b173634 	.word	0x0b173634
 8019558:	9b04      	ldr	r3, [sp, #16]
 801955a:	2200      	movs	r2, #0
 801955c:	eba3 0308 	sub.w	r3, r3, r8
 8019560:	9304      	str	r3, [sp, #16]
 8019562:	920a      	str	r2, [sp, #40]	@ 0x28
 8019564:	f1c8 0300 	rsb	r3, r8, #0
 8019568:	e7e3      	b.n	8019532 <_dtoa_r+0x1d2>
 801956a:	2201      	movs	r2, #1
 801956c:	9208      	str	r2, [sp, #32]
 801956e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019570:	eb08 0b02 	add.w	fp, r8, r2
 8019574:	f10b 0a01 	add.w	sl, fp, #1
 8019578:	4652      	mov	r2, sl
 801957a:	2a01      	cmp	r2, #1
 801957c:	bfb8      	it	lt
 801957e:	2201      	movlt	r2, #1
 8019580:	e006      	b.n	8019590 <_dtoa_r+0x230>
 8019582:	2201      	movs	r2, #1
 8019584:	9208      	str	r2, [sp, #32]
 8019586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019588:	2a00      	cmp	r2, #0
 801958a:	dd29      	ble.n	80195e0 <_dtoa_r+0x280>
 801958c:	4693      	mov	fp, r2
 801958e:	4692      	mov	sl, r2
 8019590:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8019594:	2100      	movs	r1, #0
 8019596:	2004      	movs	r0, #4
 8019598:	f100 0614 	add.w	r6, r0, #20
 801959c:	4296      	cmp	r6, r2
 801959e:	d926      	bls.n	80195ee <_dtoa_r+0x28e>
 80195a0:	6079      	str	r1, [r7, #4]
 80195a2:	4648      	mov	r0, r9
 80195a4:	9305      	str	r3, [sp, #20]
 80195a6:	f000 fc83 	bl	8019eb0 <_Balloc>
 80195aa:	9b05      	ldr	r3, [sp, #20]
 80195ac:	4607      	mov	r7, r0
 80195ae:	2800      	cmp	r0, #0
 80195b0:	d13e      	bne.n	8019630 <_dtoa_r+0x2d0>
 80195b2:	4b1e      	ldr	r3, [pc, #120]	@ (801962c <_dtoa_r+0x2cc>)
 80195b4:	4602      	mov	r2, r0
 80195b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80195ba:	e6ea      	b.n	8019392 <_dtoa_r+0x32>
 80195bc:	2200      	movs	r2, #0
 80195be:	e7e1      	b.n	8019584 <_dtoa_r+0x224>
 80195c0:	2200      	movs	r2, #0
 80195c2:	e7d3      	b.n	801956c <_dtoa_r+0x20c>
 80195c4:	2401      	movs	r4, #1
 80195c6:	2200      	movs	r2, #0
 80195c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80195cc:	f04f 3bff 	mov.w	fp, #4294967295
 80195d0:	2100      	movs	r1, #0
 80195d2:	46da      	mov	sl, fp
 80195d4:	2212      	movs	r2, #18
 80195d6:	9109      	str	r1, [sp, #36]	@ 0x24
 80195d8:	e7da      	b.n	8019590 <_dtoa_r+0x230>
 80195da:	2201      	movs	r2, #1
 80195dc:	9208      	str	r2, [sp, #32]
 80195de:	e7f5      	b.n	80195cc <_dtoa_r+0x26c>
 80195e0:	f04f 0b01 	mov.w	fp, #1
 80195e4:	46da      	mov	sl, fp
 80195e6:	465a      	mov	r2, fp
 80195e8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80195ec:	e7d0      	b.n	8019590 <_dtoa_r+0x230>
 80195ee:	3101      	adds	r1, #1
 80195f0:	0040      	lsls	r0, r0, #1
 80195f2:	e7d1      	b.n	8019598 <_dtoa_r+0x238>
 80195f4:	f3af 8000 	nop.w
 80195f8:	636f4361 	.word	0x636f4361
 80195fc:	3fd287a7 	.word	0x3fd287a7
 8019600:	8b60c8b3 	.word	0x8b60c8b3
 8019604:	3fc68a28 	.word	0x3fc68a28
 8019608:	509f79fb 	.word	0x509f79fb
 801960c:	3fd34413 	.word	0x3fd34413
 8019610:	0801b5fd 	.word	0x0801b5fd
 8019614:	0801b614 	.word	0x0801b614
 8019618:	7ff00000 	.word	0x7ff00000
 801961c:	0801b5f9 	.word	0x0801b5f9
 8019620:	0801b5cd 	.word	0x0801b5cd
 8019624:	0801b5cc 	.word	0x0801b5cc
 8019628:	0801b768 	.word	0x0801b768
 801962c:	0801b66c 	.word	0x0801b66c
 8019630:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8019634:	f1ba 0f0e 	cmp.w	sl, #14
 8019638:	6010      	str	r0, [r2, #0]
 801963a:	d86e      	bhi.n	801971a <_dtoa_r+0x3ba>
 801963c:	2c00      	cmp	r4, #0
 801963e:	d06c      	beq.n	801971a <_dtoa_r+0x3ba>
 8019640:	f1b8 0f00 	cmp.w	r8, #0
 8019644:	f340 80b4 	ble.w	80197b0 <_dtoa_r+0x450>
 8019648:	4ac8      	ldr	r2, [pc, #800]	@ (801996c <_dtoa_r+0x60c>)
 801964a:	f008 010f 	and.w	r1, r8, #15
 801964e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019652:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8019656:	ed92 7b00 	vldr	d7, [r2]
 801965a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801965e:	f000 809b 	beq.w	8019798 <_dtoa_r+0x438>
 8019662:	4ac3      	ldr	r2, [pc, #780]	@ (8019970 <_dtoa_r+0x610>)
 8019664:	ed92 6b08 	vldr	d6, [r2, #32]
 8019668:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801966c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019670:	f001 010f 	and.w	r1, r1, #15
 8019674:	2203      	movs	r2, #3
 8019676:	48be      	ldr	r0, [pc, #760]	@ (8019970 <_dtoa_r+0x610>)
 8019678:	2900      	cmp	r1, #0
 801967a:	f040 808f 	bne.w	801979c <_dtoa_r+0x43c>
 801967e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019682:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019686:	ed8d 7b02 	vstr	d7, [sp, #8]
 801968a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801968c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019690:	2900      	cmp	r1, #0
 8019692:	f000 80b3 	beq.w	80197fc <_dtoa_r+0x49c>
 8019696:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801969a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801969e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196a2:	f140 80ab 	bpl.w	80197fc <_dtoa_r+0x49c>
 80196a6:	f1ba 0f00 	cmp.w	sl, #0
 80196aa:	f000 80a7 	beq.w	80197fc <_dtoa_r+0x49c>
 80196ae:	f1bb 0f00 	cmp.w	fp, #0
 80196b2:	dd30      	ble.n	8019716 <_dtoa_r+0x3b6>
 80196b4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80196b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80196bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80196c0:	f108 31ff 	add.w	r1, r8, #4294967295
 80196c4:	9105      	str	r1, [sp, #20]
 80196c6:	3201      	adds	r2, #1
 80196c8:	465c      	mov	r4, fp
 80196ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80196ce:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80196d2:	ee07 2a90 	vmov	s15, r2
 80196d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80196da:	eea7 5b06 	vfma.f64	d5, d7, d6
 80196de:	ee15 2a90 	vmov	r2, s11
 80196e2:	ec51 0b15 	vmov	r0, r1, d5
 80196e6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80196ea:	2c00      	cmp	r4, #0
 80196ec:	f040 808a 	bne.w	8019804 <_dtoa_r+0x4a4>
 80196f0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80196f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80196f8:	ec41 0b17 	vmov	d7, r0, r1
 80196fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019704:	f300 826a 	bgt.w	8019bdc <_dtoa_r+0x87c>
 8019708:	eeb1 7b47 	vneg.f64	d7, d7
 801970c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019714:	d423      	bmi.n	801975e <_dtoa_r+0x3fe>
 8019716:	ed8d 8b02 	vstr	d8, [sp, #8]
 801971a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801971c:	2a00      	cmp	r2, #0
 801971e:	f2c0 8129 	blt.w	8019974 <_dtoa_r+0x614>
 8019722:	f1b8 0f0e 	cmp.w	r8, #14
 8019726:	f300 8125 	bgt.w	8019974 <_dtoa_r+0x614>
 801972a:	4b90      	ldr	r3, [pc, #576]	@ (801996c <_dtoa_r+0x60c>)
 801972c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019730:	ed93 6b00 	vldr	d6, [r3]
 8019734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019736:	2b00      	cmp	r3, #0
 8019738:	f280 80c8 	bge.w	80198cc <_dtoa_r+0x56c>
 801973c:	f1ba 0f00 	cmp.w	sl, #0
 8019740:	f300 80c4 	bgt.w	80198cc <_dtoa_r+0x56c>
 8019744:	d10b      	bne.n	801975e <_dtoa_r+0x3fe>
 8019746:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801974a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801974e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019752:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801975a:	f2c0 823c 	blt.w	8019bd6 <_dtoa_r+0x876>
 801975e:	2400      	movs	r4, #0
 8019760:	4625      	mov	r5, r4
 8019762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019764:	43db      	mvns	r3, r3
 8019766:	9305      	str	r3, [sp, #20]
 8019768:	463e      	mov	r6, r7
 801976a:	f04f 0800 	mov.w	r8, #0
 801976e:	4621      	mov	r1, r4
 8019770:	4648      	mov	r0, r9
 8019772:	f000 fbdd 	bl	8019f30 <_Bfree>
 8019776:	2d00      	cmp	r5, #0
 8019778:	f000 80a2 	beq.w	80198c0 <_dtoa_r+0x560>
 801977c:	f1b8 0f00 	cmp.w	r8, #0
 8019780:	d005      	beq.n	801978e <_dtoa_r+0x42e>
 8019782:	45a8      	cmp	r8, r5
 8019784:	d003      	beq.n	801978e <_dtoa_r+0x42e>
 8019786:	4641      	mov	r1, r8
 8019788:	4648      	mov	r0, r9
 801978a:	f000 fbd1 	bl	8019f30 <_Bfree>
 801978e:	4629      	mov	r1, r5
 8019790:	4648      	mov	r0, r9
 8019792:	f000 fbcd 	bl	8019f30 <_Bfree>
 8019796:	e093      	b.n	80198c0 <_dtoa_r+0x560>
 8019798:	2202      	movs	r2, #2
 801979a:	e76c      	b.n	8019676 <_dtoa_r+0x316>
 801979c:	07cc      	lsls	r4, r1, #31
 801979e:	d504      	bpl.n	80197aa <_dtoa_r+0x44a>
 80197a0:	ed90 6b00 	vldr	d6, [r0]
 80197a4:	3201      	adds	r2, #1
 80197a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80197aa:	1049      	asrs	r1, r1, #1
 80197ac:	3008      	adds	r0, #8
 80197ae:	e763      	b.n	8019678 <_dtoa_r+0x318>
 80197b0:	d022      	beq.n	80197f8 <_dtoa_r+0x498>
 80197b2:	f1c8 0100 	rsb	r1, r8, #0
 80197b6:	4a6d      	ldr	r2, [pc, #436]	@ (801996c <_dtoa_r+0x60c>)
 80197b8:	f001 000f 	and.w	r0, r1, #15
 80197bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80197c0:	ed92 7b00 	vldr	d7, [r2]
 80197c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80197c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80197cc:	4868      	ldr	r0, [pc, #416]	@ (8019970 <_dtoa_r+0x610>)
 80197ce:	1109      	asrs	r1, r1, #4
 80197d0:	2400      	movs	r4, #0
 80197d2:	2202      	movs	r2, #2
 80197d4:	b929      	cbnz	r1, 80197e2 <_dtoa_r+0x482>
 80197d6:	2c00      	cmp	r4, #0
 80197d8:	f43f af57 	beq.w	801968a <_dtoa_r+0x32a>
 80197dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80197e0:	e753      	b.n	801968a <_dtoa_r+0x32a>
 80197e2:	07ce      	lsls	r6, r1, #31
 80197e4:	d505      	bpl.n	80197f2 <_dtoa_r+0x492>
 80197e6:	ed90 6b00 	vldr	d6, [r0]
 80197ea:	3201      	adds	r2, #1
 80197ec:	2401      	movs	r4, #1
 80197ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80197f2:	1049      	asrs	r1, r1, #1
 80197f4:	3008      	adds	r0, #8
 80197f6:	e7ed      	b.n	80197d4 <_dtoa_r+0x474>
 80197f8:	2202      	movs	r2, #2
 80197fa:	e746      	b.n	801968a <_dtoa_r+0x32a>
 80197fc:	f8cd 8014 	str.w	r8, [sp, #20]
 8019800:	4654      	mov	r4, sl
 8019802:	e762      	b.n	80196ca <_dtoa_r+0x36a>
 8019804:	4a59      	ldr	r2, [pc, #356]	@ (801996c <_dtoa_r+0x60c>)
 8019806:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801980a:	ed12 4b02 	vldr	d4, [r2, #-8]
 801980e:	9a08      	ldr	r2, [sp, #32]
 8019810:	ec41 0b17 	vmov	d7, r0, r1
 8019814:	443c      	add	r4, r7
 8019816:	b34a      	cbz	r2, 801986c <_dtoa_r+0x50c>
 8019818:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801981c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8019820:	463e      	mov	r6, r7
 8019822:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8019826:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801982a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801982e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019832:	ee14 2a90 	vmov	r2, s9
 8019836:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801983a:	3230      	adds	r2, #48	@ 0x30
 801983c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019840:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019848:	f806 2b01 	strb.w	r2, [r6], #1
 801984c:	d438      	bmi.n	80198c0 <_dtoa_r+0x560>
 801984e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8019852:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8019856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801985a:	d46e      	bmi.n	801993a <_dtoa_r+0x5da>
 801985c:	42a6      	cmp	r6, r4
 801985e:	f43f af5a 	beq.w	8019716 <_dtoa_r+0x3b6>
 8019862:	ee27 7b03 	vmul.f64	d7, d7, d3
 8019866:	ee26 6b03 	vmul.f64	d6, d6, d3
 801986a:	e7e0      	b.n	801982e <_dtoa_r+0x4ce>
 801986c:	4621      	mov	r1, r4
 801986e:	463e      	mov	r6, r7
 8019870:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019874:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8019878:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801987c:	ee14 2a90 	vmov	r2, s9
 8019880:	3230      	adds	r2, #48	@ 0x30
 8019882:	f806 2b01 	strb.w	r2, [r6], #1
 8019886:	42a6      	cmp	r6, r4
 8019888:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801988c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019890:	d119      	bne.n	80198c6 <_dtoa_r+0x566>
 8019892:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8019896:	ee37 4b05 	vadd.f64	d4, d7, d5
 801989a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801989e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198a2:	dc4a      	bgt.n	801993a <_dtoa_r+0x5da>
 80198a4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80198a8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80198ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198b0:	f57f af31 	bpl.w	8019716 <_dtoa_r+0x3b6>
 80198b4:	460e      	mov	r6, r1
 80198b6:	3901      	subs	r1, #1
 80198b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80198bc:	2b30      	cmp	r3, #48	@ 0x30
 80198be:	d0f9      	beq.n	80198b4 <_dtoa_r+0x554>
 80198c0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80198c4:	e027      	b.n	8019916 <_dtoa_r+0x5b6>
 80198c6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80198ca:	e7d5      	b.n	8019878 <_dtoa_r+0x518>
 80198cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80198d0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80198d4:	463e      	mov	r6, r7
 80198d6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80198da:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80198de:	ee15 3a10 	vmov	r3, s10
 80198e2:	3330      	adds	r3, #48	@ 0x30
 80198e4:	f806 3b01 	strb.w	r3, [r6], #1
 80198e8:	1bf3      	subs	r3, r6, r7
 80198ea:	459a      	cmp	sl, r3
 80198ec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80198f0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80198f4:	d132      	bne.n	801995c <_dtoa_r+0x5fc>
 80198f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80198fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80198fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019902:	dc18      	bgt.n	8019936 <_dtoa_r+0x5d6>
 8019904:	eeb4 7b46 	vcmp.f64	d7, d6
 8019908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801990c:	d103      	bne.n	8019916 <_dtoa_r+0x5b6>
 801990e:	ee15 3a10 	vmov	r3, s10
 8019912:	07db      	lsls	r3, r3, #31
 8019914:	d40f      	bmi.n	8019936 <_dtoa_r+0x5d6>
 8019916:	9901      	ldr	r1, [sp, #4]
 8019918:	4648      	mov	r0, r9
 801991a:	f000 fb09 	bl	8019f30 <_Bfree>
 801991e:	2300      	movs	r3, #0
 8019920:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019922:	7033      	strb	r3, [r6, #0]
 8019924:	f108 0301 	add.w	r3, r8, #1
 8019928:	6013      	str	r3, [r2, #0]
 801992a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801992c:	2b00      	cmp	r3, #0
 801992e:	f000 824b 	beq.w	8019dc8 <_dtoa_r+0xa68>
 8019932:	601e      	str	r6, [r3, #0]
 8019934:	e248      	b.n	8019dc8 <_dtoa_r+0xa68>
 8019936:	f8cd 8014 	str.w	r8, [sp, #20]
 801993a:	4633      	mov	r3, r6
 801993c:	461e      	mov	r6, r3
 801993e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019942:	2a39      	cmp	r2, #57	@ 0x39
 8019944:	d106      	bne.n	8019954 <_dtoa_r+0x5f4>
 8019946:	429f      	cmp	r7, r3
 8019948:	d1f8      	bne.n	801993c <_dtoa_r+0x5dc>
 801994a:	9a05      	ldr	r2, [sp, #20]
 801994c:	3201      	adds	r2, #1
 801994e:	9205      	str	r2, [sp, #20]
 8019950:	2230      	movs	r2, #48	@ 0x30
 8019952:	703a      	strb	r2, [r7, #0]
 8019954:	781a      	ldrb	r2, [r3, #0]
 8019956:	3201      	adds	r2, #1
 8019958:	701a      	strb	r2, [r3, #0]
 801995a:	e7b1      	b.n	80198c0 <_dtoa_r+0x560>
 801995c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019960:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019968:	d1b5      	bne.n	80198d6 <_dtoa_r+0x576>
 801996a:	e7d4      	b.n	8019916 <_dtoa_r+0x5b6>
 801996c:	0801b768 	.word	0x0801b768
 8019970:	0801b740 	.word	0x0801b740
 8019974:	9908      	ldr	r1, [sp, #32]
 8019976:	2900      	cmp	r1, #0
 8019978:	f000 80e9 	beq.w	8019b4e <_dtoa_r+0x7ee>
 801997c:	9907      	ldr	r1, [sp, #28]
 801997e:	2901      	cmp	r1, #1
 8019980:	f300 80cb 	bgt.w	8019b1a <_dtoa_r+0x7ba>
 8019984:	2d00      	cmp	r5, #0
 8019986:	f000 80c4 	beq.w	8019b12 <_dtoa_r+0x7b2>
 801998a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801998e:	9e04      	ldr	r6, [sp, #16]
 8019990:	461c      	mov	r4, r3
 8019992:	9305      	str	r3, [sp, #20]
 8019994:	9b04      	ldr	r3, [sp, #16]
 8019996:	4413      	add	r3, r2
 8019998:	9304      	str	r3, [sp, #16]
 801999a:	9b06      	ldr	r3, [sp, #24]
 801999c:	2101      	movs	r1, #1
 801999e:	4413      	add	r3, r2
 80199a0:	4648      	mov	r0, r9
 80199a2:	9306      	str	r3, [sp, #24]
 80199a4:	f000 fb78 	bl	801a098 <__i2b>
 80199a8:	9b05      	ldr	r3, [sp, #20]
 80199aa:	4605      	mov	r5, r0
 80199ac:	b166      	cbz	r6, 80199c8 <_dtoa_r+0x668>
 80199ae:	9a06      	ldr	r2, [sp, #24]
 80199b0:	2a00      	cmp	r2, #0
 80199b2:	dd09      	ble.n	80199c8 <_dtoa_r+0x668>
 80199b4:	42b2      	cmp	r2, r6
 80199b6:	9904      	ldr	r1, [sp, #16]
 80199b8:	bfa8      	it	ge
 80199ba:	4632      	movge	r2, r6
 80199bc:	1a89      	subs	r1, r1, r2
 80199be:	9104      	str	r1, [sp, #16]
 80199c0:	9906      	ldr	r1, [sp, #24]
 80199c2:	1ab6      	subs	r6, r6, r2
 80199c4:	1a8a      	subs	r2, r1, r2
 80199c6:	9206      	str	r2, [sp, #24]
 80199c8:	b30b      	cbz	r3, 8019a0e <_dtoa_r+0x6ae>
 80199ca:	9a08      	ldr	r2, [sp, #32]
 80199cc:	2a00      	cmp	r2, #0
 80199ce:	f000 80c5 	beq.w	8019b5c <_dtoa_r+0x7fc>
 80199d2:	2c00      	cmp	r4, #0
 80199d4:	f000 80bf 	beq.w	8019b56 <_dtoa_r+0x7f6>
 80199d8:	4629      	mov	r1, r5
 80199da:	4622      	mov	r2, r4
 80199dc:	4648      	mov	r0, r9
 80199de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80199e0:	f000 fc12 	bl	801a208 <__pow5mult>
 80199e4:	9a01      	ldr	r2, [sp, #4]
 80199e6:	4601      	mov	r1, r0
 80199e8:	4605      	mov	r5, r0
 80199ea:	4648      	mov	r0, r9
 80199ec:	f000 fb6a 	bl	801a0c4 <__multiply>
 80199f0:	9901      	ldr	r1, [sp, #4]
 80199f2:	9005      	str	r0, [sp, #20]
 80199f4:	4648      	mov	r0, r9
 80199f6:	f000 fa9b 	bl	8019f30 <_Bfree>
 80199fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80199fc:	1b1b      	subs	r3, r3, r4
 80199fe:	f000 80b0 	beq.w	8019b62 <_dtoa_r+0x802>
 8019a02:	9905      	ldr	r1, [sp, #20]
 8019a04:	461a      	mov	r2, r3
 8019a06:	4648      	mov	r0, r9
 8019a08:	f000 fbfe 	bl	801a208 <__pow5mult>
 8019a0c:	9001      	str	r0, [sp, #4]
 8019a0e:	2101      	movs	r1, #1
 8019a10:	4648      	mov	r0, r9
 8019a12:	f000 fb41 	bl	801a098 <__i2b>
 8019a16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019a18:	4604      	mov	r4, r0
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	f000 81da 	beq.w	8019dd4 <_dtoa_r+0xa74>
 8019a20:	461a      	mov	r2, r3
 8019a22:	4601      	mov	r1, r0
 8019a24:	4648      	mov	r0, r9
 8019a26:	f000 fbef 	bl	801a208 <__pow5mult>
 8019a2a:	9b07      	ldr	r3, [sp, #28]
 8019a2c:	2b01      	cmp	r3, #1
 8019a2e:	4604      	mov	r4, r0
 8019a30:	f300 80a0 	bgt.w	8019b74 <_dtoa_r+0x814>
 8019a34:	9b02      	ldr	r3, [sp, #8]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	f040 8096 	bne.w	8019b68 <_dtoa_r+0x808>
 8019a3c:	9b03      	ldr	r3, [sp, #12]
 8019a3e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8019a42:	2a00      	cmp	r2, #0
 8019a44:	f040 8092 	bne.w	8019b6c <_dtoa_r+0x80c>
 8019a48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019a4c:	0d12      	lsrs	r2, r2, #20
 8019a4e:	0512      	lsls	r2, r2, #20
 8019a50:	2a00      	cmp	r2, #0
 8019a52:	f000 808d 	beq.w	8019b70 <_dtoa_r+0x810>
 8019a56:	9b04      	ldr	r3, [sp, #16]
 8019a58:	3301      	adds	r3, #1
 8019a5a:	9304      	str	r3, [sp, #16]
 8019a5c:	9b06      	ldr	r3, [sp, #24]
 8019a5e:	3301      	adds	r3, #1
 8019a60:	9306      	str	r3, [sp, #24]
 8019a62:	2301      	movs	r3, #1
 8019a64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019a66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	f000 81b9 	beq.w	8019de0 <_dtoa_r+0xa80>
 8019a6e:	6922      	ldr	r2, [r4, #16]
 8019a70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019a74:	6910      	ldr	r0, [r2, #16]
 8019a76:	f000 fac3 	bl	801a000 <__hi0bits>
 8019a7a:	f1c0 0020 	rsb	r0, r0, #32
 8019a7e:	9b06      	ldr	r3, [sp, #24]
 8019a80:	4418      	add	r0, r3
 8019a82:	f010 001f 	ands.w	r0, r0, #31
 8019a86:	f000 8081 	beq.w	8019b8c <_dtoa_r+0x82c>
 8019a8a:	f1c0 0220 	rsb	r2, r0, #32
 8019a8e:	2a04      	cmp	r2, #4
 8019a90:	dd73      	ble.n	8019b7a <_dtoa_r+0x81a>
 8019a92:	9b04      	ldr	r3, [sp, #16]
 8019a94:	f1c0 001c 	rsb	r0, r0, #28
 8019a98:	4403      	add	r3, r0
 8019a9a:	9304      	str	r3, [sp, #16]
 8019a9c:	9b06      	ldr	r3, [sp, #24]
 8019a9e:	4406      	add	r6, r0
 8019aa0:	4403      	add	r3, r0
 8019aa2:	9306      	str	r3, [sp, #24]
 8019aa4:	9b04      	ldr	r3, [sp, #16]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	dd05      	ble.n	8019ab6 <_dtoa_r+0x756>
 8019aaa:	9901      	ldr	r1, [sp, #4]
 8019aac:	461a      	mov	r2, r3
 8019aae:	4648      	mov	r0, r9
 8019ab0:	f000 fc04 	bl	801a2bc <__lshift>
 8019ab4:	9001      	str	r0, [sp, #4]
 8019ab6:	9b06      	ldr	r3, [sp, #24]
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	dd05      	ble.n	8019ac8 <_dtoa_r+0x768>
 8019abc:	4621      	mov	r1, r4
 8019abe:	461a      	mov	r2, r3
 8019ac0:	4648      	mov	r0, r9
 8019ac2:	f000 fbfb 	bl	801a2bc <__lshift>
 8019ac6:	4604      	mov	r4, r0
 8019ac8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d060      	beq.n	8019b90 <_dtoa_r+0x830>
 8019ace:	9801      	ldr	r0, [sp, #4]
 8019ad0:	4621      	mov	r1, r4
 8019ad2:	f000 fc5f 	bl	801a394 <__mcmp>
 8019ad6:	2800      	cmp	r0, #0
 8019ad8:	da5a      	bge.n	8019b90 <_dtoa_r+0x830>
 8019ada:	f108 33ff 	add.w	r3, r8, #4294967295
 8019ade:	9305      	str	r3, [sp, #20]
 8019ae0:	9901      	ldr	r1, [sp, #4]
 8019ae2:	2300      	movs	r3, #0
 8019ae4:	220a      	movs	r2, #10
 8019ae6:	4648      	mov	r0, r9
 8019ae8:	f000 fa44 	bl	8019f74 <__multadd>
 8019aec:	9b08      	ldr	r3, [sp, #32]
 8019aee:	9001      	str	r0, [sp, #4]
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	f000 8177 	beq.w	8019de4 <_dtoa_r+0xa84>
 8019af6:	4629      	mov	r1, r5
 8019af8:	2300      	movs	r3, #0
 8019afa:	220a      	movs	r2, #10
 8019afc:	4648      	mov	r0, r9
 8019afe:	f000 fa39 	bl	8019f74 <__multadd>
 8019b02:	f1bb 0f00 	cmp.w	fp, #0
 8019b06:	4605      	mov	r5, r0
 8019b08:	dc6e      	bgt.n	8019be8 <_dtoa_r+0x888>
 8019b0a:	9b07      	ldr	r3, [sp, #28]
 8019b0c:	2b02      	cmp	r3, #2
 8019b0e:	dc48      	bgt.n	8019ba2 <_dtoa_r+0x842>
 8019b10:	e06a      	b.n	8019be8 <_dtoa_r+0x888>
 8019b12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019b14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8019b18:	e739      	b.n	801998e <_dtoa_r+0x62e>
 8019b1a:	f10a 34ff 	add.w	r4, sl, #4294967295
 8019b1e:	42a3      	cmp	r3, r4
 8019b20:	db07      	blt.n	8019b32 <_dtoa_r+0x7d2>
 8019b22:	f1ba 0f00 	cmp.w	sl, #0
 8019b26:	eba3 0404 	sub.w	r4, r3, r4
 8019b2a:	db0b      	blt.n	8019b44 <_dtoa_r+0x7e4>
 8019b2c:	9e04      	ldr	r6, [sp, #16]
 8019b2e:	4652      	mov	r2, sl
 8019b30:	e72f      	b.n	8019992 <_dtoa_r+0x632>
 8019b32:	1ae2      	subs	r2, r4, r3
 8019b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019b36:	9e04      	ldr	r6, [sp, #16]
 8019b38:	4413      	add	r3, r2
 8019b3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8019b3c:	4652      	mov	r2, sl
 8019b3e:	4623      	mov	r3, r4
 8019b40:	2400      	movs	r4, #0
 8019b42:	e726      	b.n	8019992 <_dtoa_r+0x632>
 8019b44:	9a04      	ldr	r2, [sp, #16]
 8019b46:	eba2 060a 	sub.w	r6, r2, sl
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	e721      	b.n	8019992 <_dtoa_r+0x632>
 8019b4e:	9e04      	ldr	r6, [sp, #16]
 8019b50:	9d08      	ldr	r5, [sp, #32]
 8019b52:	461c      	mov	r4, r3
 8019b54:	e72a      	b.n	80199ac <_dtoa_r+0x64c>
 8019b56:	9a01      	ldr	r2, [sp, #4]
 8019b58:	9205      	str	r2, [sp, #20]
 8019b5a:	e752      	b.n	8019a02 <_dtoa_r+0x6a2>
 8019b5c:	9901      	ldr	r1, [sp, #4]
 8019b5e:	461a      	mov	r2, r3
 8019b60:	e751      	b.n	8019a06 <_dtoa_r+0x6a6>
 8019b62:	9b05      	ldr	r3, [sp, #20]
 8019b64:	9301      	str	r3, [sp, #4]
 8019b66:	e752      	b.n	8019a0e <_dtoa_r+0x6ae>
 8019b68:	2300      	movs	r3, #0
 8019b6a:	e77b      	b.n	8019a64 <_dtoa_r+0x704>
 8019b6c:	9b02      	ldr	r3, [sp, #8]
 8019b6e:	e779      	b.n	8019a64 <_dtoa_r+0x704>
 8019b70:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019b72:	e778      	b.n	8019a66 <_dtoa_r+0x706>
 8019b74:	2300      	movs	r3, #0
 8019b76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019b78:	e779      	b.n	8019a6e <_dtoa_r+0x70e>
 8019b7a:	d093      	beq.n	8019aa4 <_dtoa_r+0x744>
 8019b7c:	9b04      	ldr	r3, [sp, #16]
 8019b7e:	321c      	adds	r2, #28
 8019b80:	4413      	add	r3, r2
 8019b82:	9304      	str	r3, [sp, #16]
 8019b84:	9b06      	ldr	r3, [sp, #24]
 8019b86:	4416      	add	r6, r2
 8019b88:	4413      	add	r3, r2
 8019b8a:	e78a      	b.n	8019aa2 <_dtoa_r+0x742>
 8019b8c:	4602      	mov	r2, r0
 8019b8e:	e7f5      	b.n	8019b7c <_dtoa_r+0x81c>
 8019b90:	f1ba 0f00 	cmp.w	sl, #0
 8019b94:	f8cd 8014 	str.w	r8, [sp, #20]
 8019b98:	46d3      	mov	fp, sl
 8019b9a:	dc21      	bgt.n	8019be0 <_dtoa_r+0x880>
 8019b9c:	9b07      	ldr	r3, [sp, #28]
 8019b9e:	2b02      	cmp	r3, #2
 8019ba0:	dd1e      	ble.n	8019be0 <_dtoa_r+0x880>
 8019ba2:	f1bb 0f00 	cmp.w	fp, #0
 8019ba6:	f47f addc 	bne.w	8019762 <_dtoa_r+0x402>
 8019baa:	4621      	mov	r1, r4
 8019bac:	465b      	mov	r3, fp
 8019bae:	2205      	movs	r2, #5
 8019bb0:	4648      	mov	r0, r9
 8019bb2:	f000 f9df 	bl	8019f74 <__multadd>
 8019bb6:	4601      	mov	r1, r0
 8019bb8:	4604      	mov	r4, r0
 8019bba:	9801      	ldr	r0, [sp, #4]
 8019bbc:	f000 fbea 	bl	801a394 <__mcmp>
 8019bc0:	2800      	cmp	r0, #0
 8019bc2:	f77f adce 	ble.w	8019762 <_dtoa_r+0x402>
 8019bc6:	463e      	mov	r6, r7
 8019bc8:	2331      	movs	r3, #49	@ 0x31
 8019bca:	f806 3b01 	strb.w	r3, [r6], #1
 8019bce:	9b05      	ldr	r3, [sp, #20]
 8019bd0:	3301      	adds	r3, #1
 8019bd2:	9305      	str	r3, [sp, #20]
 8019bd4:	e5c9      	b.n	801976a <_dtoa_r+0x40a>
 8019bd6:	f8cd 8014 	str.w	r8, [sp, #20]
 8019bda:	4654      	mov	r4, sl
 8019bdc:	4625      	mov	r5, r4
 8019bde:	e7f2      	b.n	8019bc6 <_dtoa_r+0x866>
 8019be0:	9b08      	ldr	r3, [sp, #32]
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	f000 8102 	beq.w	8019dec <_dtoa_r+0xa8c>
 8019be8:	2e00      	cmp	r6, #0
 8019bea:	dd05      	ble.n	8019bf8 <_dtoa_r+0x898>
 8019bec:	4629      	mov	r1, r5
 8019bee:	4632      	mov	r2, r6
 8019bf0:	4648      	mov	r0, r9
 8019bf2:	f000 fb63 	bl	801a2bc <__lshift>
 8019bf6:	4605      	mov	r5, r0
 8019bf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d058      	beq.n	8019cb0 <_dtoa_r+0x950>
 8019bfe:	6869      	ldr	r1, [r5, #4]
 8019c00:	4648      	mov	r0, r9
 8019c02:	f000 f955 	bl	8019eb0 <_Balloc>
 8019c06:	4606      	mov	r6, r0
 8019c08:	b928      	cbnz	r0, 8019c16 <_dtoa_r+0x8b6>
 8019c0a:	4b82      	ldr	r3, [pc, #520]	@ (8019e14 <_dtoa_r+0xab4>)
 8019c0c:	4602      	mov	r2, r0
 8019c0e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8019c12:	f7ff bbbe 	b.w	8019392 <_dtoa_r+0x32>
 8019c16:	692a      	ldr	r2, [r5, #16]
 8019c18:	3202      	adds	r2, #2
 8019c1a:	0092      	lsls	r2, r2, #2
 8019c1c:	f105 010c 	add.w	r1, r5, #12
 8019c20:	300c      	adds	r0, #12
 8019c22:	f7ff fb06 	bl	8019232 <memcpy>
 8019c26:	2201      	movs	r2, #1
 8019c28:	4631      	mov	r1, r6
 8019c2a:	4648      	mov	r0, r9
 8019c2c:	f000 fb46 	bl	801a2bc <__lshift>
 8019c30:	1c7b      	adds	r3, r7, #1
 8019c32:	9304      	str	r3, [sp, #16]
 8019c34:	eb07 030b 	add.w	r3, r7, fp
 8019c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c3a:	9b02      	ldr	r3, [sp, #8]
 8019c3c:	f003 0301 	and.w	r3, r3, #1
 8019c40:	46a8      	mov	r8, r5
 8019c42:	9308      	str	r3, [sp, #32]
 8019c44:	4605      	mov	r5, r0
 8019c46:	9b04      	ldr	r3, [sp, #16]
 8019c48:	9801      	ldr	r0, [sp, #4]
 8019c4a:	4621      	mov	r1, r4
 8019c4c:	f103 3bff 	add.w	fp, r3, #4294967295
 8019c50:	f7ff fafd 	bl	801924e <quorem>
 8019c54:	4641      	mov	r1, r8
 8019c56:	9002      	str	r0, [sp, #8]
 8019c58:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019c5c:	9801      	ldr	r0, [sp, #4]
 8019c5e:	f000 fb99 	bl	801a394 <__mcmp>
 8019c62:	462a      	mov	r2, r5
 8019c64:	9006      	str	r0, [sp, #24]
 8019c66:	4621      	mov	r1, r4
 8019c68:	4648      	mov	r0, r9
 8019c6a:	f000 fbaf 	bl	801a3cc <__mdiff>
 8019c6e:	68c2      	ldr	r2, [r0, #12]
 8019c70:	4606      	mov	r6, r0
 8019c72:	b9fa      	cbnz	r2, 8019cb4 <_dtoa_r+0x954>
 8019c74:	4601      	mov	r1, r0
 8019c76:	9801      	ldr	r0, [sp, #4]
 8019c78:	f000 fb8c 	bl	801a394 <__mcmp>
 8019c7c:	4602      	mov	r2, r0
 8019c7e:	4631      	mov	r1, r6
 8019c80:	4648      	mov	r0, r9
 8019c82:	920a      	str	r2, [sp, #40]	@ 0x28
 8019c84:	f000 f954 	bl	8019f30 <_Bfree>
 8019c88:	9b07      	ldr	r3, [sp, #28]
 8019c8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019c8c:	9e04      	ldr	r6, [sp, #16]
 8019c8e:	ea42 0103 	orr.w	r1, r2, r3
 8019c92:	9b08      	ldr	r3, [sp, #32]
 8019c94:	4319      	orrs	r1, r3
 8019c96:	d10f      	bne.n	8019cb8 <_dtoa_r+0x958>
 8019c98:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019c9c:	d028      	beq.n	8019cf0 <_dtoa_r+0x990>
 8019c9e:	9b06      	ldr	r3, [sp, #24]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	dd02      	ble.n	8019caa <_dtoa_r+0x94a>
 8019ca4:	9b02      	ldr	r3, [sp, #8]
 8019ca6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8019caa:	f88b a000 	strb.w	sl, [fp]
 8019cae:	e55e      	b.n	801976e <_dtoa_r+0x40e>
 8019cb0:	4628      	mov	r0, r5
 8019cb2:	e7bd      	b.n	8019c30 <_dtoa_r+0x8d0>
 8019cb4:	2201      	movs	r2, #1
 8019cb6:	e7e2      	b.n	8019c7e <_dtoa_r+0x91e>
 8019cb8:	9b06      	ldr	r3, [sp, #24]
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	db04      	blt.n	8019cc8 <_dtoa_r+0x968>
 8019cbe:	9907      	ldr	r1, [sp, #28]
 8019cc0:	430b      	orrs	r3, r1
 8019cc2:	9908      	ldr	r1, [sp, #32]
 8019cc4:	430b      	orrs	r3, r1
 8019cc6:	d120      	bne.n	8019d0a <_dtoa_r+0x9aa>
 8019cc8:	2a00      	cmp	r2, #0
 8019cca:	ddee      	ble.n	8019caa <_dtoa_r+0x94a>
 8019ccc:	9901      	ldr	r1, [sp, #4]
 8019cce:	2201      	movs	r2, #1
 8019cd0:	4648      	mov	r0, r9
 8019cd2:	f000 faf3 	bl	801a2bc <__lshift>
 8019cd6:	4621      	mov	r1, r4
 8019cd8:	9001      	str	r0, [sp, #4]
 8019cda:	f000 fb5b 	bl	801a394 <__mcmp>
 8019cde:	2800      	cmp	r0, #0
 8019ce0:	dc03      	bgt.n	8019cea <_dtoa_r+0x98a>
 8019ce2:	d1e2      	bne.n	8019caa <_dtoa_r+0x94a>
 8019ce4:	f01a 0f01 	tst.w	sl, #1
 8019ce8:	d0df      	beq.n	8019caa <_dtoa_r+0x94a>
 8019cea:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019cee:	d1d9      	bne.n	8019ca4 <_dtoa_r+0x944>
 8019cf0:	2339      	movs	r3, #57	@ 0x39
 8019cf2:	f88b 3000 	strb.w	r3, [fp]
 8019cf6:	4633      	mov	r3, r6
 8019cf8:	461e      	mov	r6, r3
 8019cfa:	3b01      	subs	r3, #1
 8019cfc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8019d00:	2a39      	cmp	r2, #57	@ 0x39
 8019d02:	d052      	beq.n	8019daa <_dtoa_r+0xa4a>
 8019d04:	3201      	adds	r2, #1
 8019d06:	701a      	strb	r2, [r3, #0]
 8019d08:	e531      	b.n	801976e <_dtoa_r+0x40e>
 8019d0a:	2a00      	cmp	r2, #0
 8019d0c:	dd07      	ble.n	8019d1e <_dtoa_r+0x9be>
 8019d0e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019d12:	d0ed      	beq.n	8019cf0 <_dtoa_r+0x990>
 8019d14:	f10a 0301 	add.w	r3, sl, #1
 8019d18:	f88b 3000 	strb.w	r3, [fp]
 8019d1c:	e527      	b.n	801976e <_dtoa_r+0x40e>
 8019d1e:	9b04      	ldr	r3, [sp, #16]
 8019d20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019d22:	f803 ac01 	strb.w	sl, [r3, #-1]
 8019d26:	4293      	cmp	r3, r2
 8019d28:	d029      	beq.n	8019d7e <_dtoa_r+0xa1e>
 8019d2a:	9901      	ldr	r1, [sp, #4]
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	220a      	movs	r2, #10
 8019d30:	4648      	mov	r0, r9
 8019d32:	f000 f91f 	bl	8019f74 <__multadd>
 8019d36:	45a8      	cmp	r8, r5
 8019d38:	9001      	str	r0, [sp, #4]
 8019d3a:	f04f 0300 	mov.w	r3, #0
 8019d3e:	f04f 020a 	mov.w	r2, #10
 8019d42:	4641      	mov	r1, r8
 8019d44:	4648      	mov	r0, r9
 8019d46:	d107      	bne.n	8019d58 <_dtoa_r+0x9f8>
 8019d48:	f000 f914 	bl	8019f74 <__multadd>
 8019d4c:	4680      	mov	r8, r0
 8019d4e:	4605      	mov	r5, r0
 8019d50:	9b04      	ldr	r3, [sp, #16]
 8019d52:	3301      	adds	r3, #1
 8019d54:	9304      	str	r3, [sp, #16]
 8019d56:	e776      	b.n	8019c46 <_dtoa_r+0x8e6>
 8019d58:	f000 f90c 	bl	8019f74 <__multadd>
 8019d5c:	4629      	mov	r1, r5
 8019d5e:	4680      	mov	r8, r0
 8019d60:	2300      	movs	r3, #0
 8019d62:	220a      	movs	r2, #10
 8019d64:	4648      	mov	r0, r9
 8019d66:	f000 f905 	bl	8019f74 <__multadd>
 8019d6a:	4605      	mov	r5, r0
 8019d6c:	e7f0      	b.n	8019d50 <_dtoa_r+0x9f0>
 8019d6e:	f1bb 0f00 	cmp.w	fp, #0
 8019d72:	bfcc      	ite	gt
 8019d74:	465e      	movgt	r6, fp
 8019d76:	2601      	movle	r6, #1
 8019d78:	443e      	add	r6, r7
 8019d7a:	f04f 0800 	mov.w	r8, #0
 8019d7e:	9901      	ldr	r1, [sp, #4]
 8019d80:	2201      	movs	r2, #1
 8019d82:	4648      	mov	r0, r9
 8019d84:	f000 fa9a 	bl	801a2bc <__lshift>
 8019d88:	4621      	mov	r1, r4
 8019d8a:	9001      	str	r0, [sp, #4]
 8019d8c:	f000 fb02 	bl	801a394 <__mcmp>
 8019d90:	2800      	cmp	r0, #0
 8019d92:	dcb0      	bgt.n	8019cf6 <_dtoa_r+0x996>
 8019d94:	d102      	bne.n	8019d9c <_dtoa_r+0xa3c>
 8019d96:	f01a 0f01 	tst.w	sl, #1
 8019d9a:	d1ac      	bne.n	8019cf6 <_dtoa_r+0x996>
 8019d9c:	4633      	mov	r3, r6
 8019d9e:	461e      	mov	r6, r3
 8019da0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019da4:	2a30      	cmp	r2, #48	@ 0x30
 8019da6:	d0fa      	beq.n	8019d9e <_dtoa_r+0xa3e>
 8019da8:	e4e1      	b.n	801976e <_dtoa_r+0x40e>
 8019daa:	429f      	cmp	r7, r3
 8019dac:	d1a4      	bne.n	8019cf8 <_dtoa_r+0x998>
 8019dae:	9b05      	ldr	r3, [sp, #20]
 8019db0:	3301      	adds	r3, #1
 8019db2:	9305      	str	r3, [sp, #20]
 8019db4:	2331      	movs	r3, #49	@ 0x31
 8019db6:	703b      	strb	r3, [r7, #0]
 8019db8:	e4d9      	b.n	801976e <_dtoa_r+0x40e>
 8019dba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019dbc:	4f16      	ldr	r7, [pc, #88]	@ (8019e18 <_dtoa_r+0xab8>)
 8019dbe:	b11b      	cbz	r3, 8019dc8 <_dtoa_r+0xa68>
 8019dc0:	f107 0308 	add.w	r3, r7, #8
 8019dc4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019dc6:	6013      	str	r3, [r2, #0]
 8019dc8:	4638      	mov	r0, r7
 8019dca:	b011      	add	sp, #68	@ 0x44
 8019dcc:	ecbd 8b02 	vpop	{d8}
 8019dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dd4:	9b07      	ldr	r3, [sp, #28]
 8019dd6:	2b01      	cmp	r3, #1
 8019dd8:	f77f ae2c 	ble.w	8019a34 <_dtoa_r+0x6d4>
 8019ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019dde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019de0:	2001      	movs	r0, #1
 8019de2:	e64c      	b.n	8019a7e <_dtoa_r+0x71e>
 8019de4:	f1bb 0f00 	cmp.w	fp, #0
 8019de8:	f77f aed8 	ble.w	8019b9c <_dtoa_r+0x83c>
 8019dec:	463e      	mov	r6, r7
 8019dee:	9801      	ldr	r0, [sp, #4]
 8019df0:	4621      	mov	r1, r4
 8019df2:	f7ff fa2c 	bl	801924e <quorem>
 8019df6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019dfa:	f806 ab01 	strb.w	sl, [r6], #1
 8019dfe:	1bf2      	subs	r2, r6, r7
 8019e00:	4593      	cmp	fp, r2
 8019e02:	ddb4      	ble.n	8019d6e <_dtoa_r+0xa0e>
 8019e04:	9901      	ldr	r1, [sp, #4]
 8019e06:	2300      	movs	r3, #0
 8019e08:	220a      	movs	r2, #10
 8019e0a:	4648      	mov	r0, r9
 8019e0c:	f000 f8b2 	bl	8019f74 <__multadd>
 8019e10:	9001      	str	r0, [sp, #4]
 8019e12:	e7ec      	b.n	8019dee <_dtoa_r+0xa8e>
 8019e14:	0801b66c 	.word	0x0801b66c
 8019e18:	0801b5f0 	.word	0x0801b5f0

08019e1c <_free_r>:
 8019e1c:	b538      	push	{r3, r4, r5, lr}
 8019e1e:	4605      	mov	r5, r0
 8019e20:	2900      	cmp	r1, #0
 8019e22:	d041      	beq.n	8019ea8 <_free_r+0x8c>
 8019e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e28:	1f0c      	subs	r4, r1, #4
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	bfb8      	it	lt
 8019e2e:	18e4      	addlt	r4, r4, r3
 8019e30:	f7fe fc08 	bl	8018644 <__malloc_lock>
 8019e34:	4a1d      	ldr	r2, [pc, #116]	@ (8019eac <_free_r+0x90>)
 8019e36:	6813      	ldr	r3, [r2, #0]
 8019e38:	b933      	cbnz	r3, 8019e48 <_free_r+0x2c>
 8019e3a:	6063      	str	r3, [r4, #4]
 8019e3c:	6014      	str	r4, [r2, #0]
 8019e3e:	4628      	mov	r0, r5
 8019e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019e44:	f7fe bc04 	b.w	8018650 <__malloc_unlock>
 8019e48:	42a3      	cmp	r3, r4
 8019e4a:	d908      	bls.n	8019e5e <_free_r+0x42>
 8019e4c:	6820      	ldr	r0, [r4, #0]
 8019e4e:	1821      	adds	r1, r4, r0
 8019e50:	428b      	cmp	r3, r1
 8019e52:	bf01      	itttt	eq
 8019e54:	6819      	ldreq	r1, [r3, #0]
 8019e56:	685b      	ldreq	r3, [r3, #4]
 8019e58:	1809      	addeq	r1, r1, r0
 8019e5a:	6021      	streq	r1, [r4, #0]
 8019e5c:	e7ed      	b.n	8019e3a <_free_r+0x1e>
 8019e5e:	461a      	mov	r2, r3
 8019e60:	685b      	ldr	r3, [r3, #4]
 8019e62:	b10b      	cbz	r3, 8019e68 <_free_r+0x4c>
 8019e64:	42a3      	cmp	r3, r4
 8019e66:	d9fa      	bls.n	8019e5e <_free_r+0x42>
 8019e68:	6811      	ldr	r1, [r2, #0]
 8019e6a:	1850      	adds	r0, r2, r1
 8019e6c:	42a0      	cmp	r0, r4
 8019e6e:	d10b      	bne.n	8019e88 <_free_r+0x6c>
 8019e70:	6820      	ldr	r0, [r4, #0]
 8019e72:	4401      	add	r1, r0
 8019e74:	1850      	adds	r0, r2, r1
 8019e76:	4283      	cmp	r3, r0
 8019e78:	6011      	str	r1, [r2, #0]
 8019e7a:	d1e0      	bne.n	8019e3e <_free_r+0x22>
 8019e7c:	6818      	ldr	r0, [r3, #0]
 8019e7e:	685b      	ldr	r3, [r3, #4]
 8019e80:	6053      	str	r3, [r2, #4]
 8019e82:	4408      	add	r0, r1
 8019e84:	6010      	str	r0, [r2, #0]
 8019e86:	e7da      	b.n	8019e3e <_free_r+0x22>
 8019e88:	d902      	bls.n	8019e90 <_free_r+0x74>
 8019e8a:	230c      	movs	r3, #12
 8019e8c:	602b      	str	r3, [r5, #0]
 8019e8e:	e7d6      	b.n	8019e3e <_free_r+0x22>
 8019e90:	6820      	ldr	r0, [r4, #0]
 8019e92:	1821      	adds	r1, r4, r0
 8019e94:	428b      	cmp	r3, r1
 8019e96:	bf04      	itt	eq
 8019e98:	6819      	ldreq	r1, [r3, #0]
 8019e9a:	685b      	ldreq	r3, [r3, #4]
 8019e9c:	6063      	str	r3, [r4, #4]
 8019e9e:	bf04      	itt	eq
 8019ea0:	1809      	addeq	r1, r1, r0
 8019ea2:	6021      	streq	r1, [r4, #0]
 8019ea4:	6054      	str	r4, [r2, #4]
 8019ea6:	e7ca      	b.n	8019e3e <_free_r+0x22>
 8019ea8:	bd38      	pop	{r3, r4, r5, pc}
 8019eaa:	bf00      	nop
 8019eac:	2402794c 	.word	0x2402794c

08019eb0 <_Balloc>:
 8019eb0:	b570      	push	{r4, r5, r6, lr}
 8019eb2:	69c6      	ldr	r6, [r0, #28]
 8019eb4:	4604      	mov	r4, r0
 8019eb6:	460d      	mov	r5, r1
 8019eb8:	b976      	cbnz	r6, 8019ed8 <_Balloc+0x28>
 8019eba:	2010      	movs	r0, #16
 8019ebc:	f7fe fb18 	bl	80184f0 <malloc>
 8019ec0:	4602      	mov	r2, r0
 8019ec2:	61e0      	str	r0, [r4, #28]
 8019ec4:	b920      	cbnz	r0, 8019ed0 <_Balloc+0x20>
 8019ec6:	4b18      	ldr	r3, [pc, #96]	@ (8019f28 <_Balloc+0x78>)
 8019ec8:	4818      	ldr	r0, [pc, #96]	@ (8019f2c <_Balloc+0x7c>)
 8019eca:	216b      	movs	r1, #107	@ 0x6b
 8019ecc:	f000 fd88 	bl	801a9e0 <__assert_func>
 8019ed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019ed4:	6006      	str	r6, [r0, #0]
 8019ed6:	60c6      	str	r6, [r0, #12]
 8019ed8:	69e6      	ldr	r6, [r4, #28]
 8019eda:	68f3      	ldr	r3, [r6, #12]
 8019edc:	b183      	cbz	r3, 8019f00 <_Balloc+0x50>
 8019ede:	69e3      	ldr	r3, [r4, #28]
 8019ee0:	68db      	ldr	r3, [r3, #12]
 8019ee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019ee6:	b9b8      	cbnz	r0, 8019f18 <_Balloc+0x68>
 8019ee8:	2101      	movs	r1, #1
 8019eea:	fa01 f605 	lsl.w	r6, r1, r5
 8019eee:	1d72      	adds	r2, r6, #5
 8019ef0:	0092      	lsls	r2, r2, #2
 8019ef2:	4620      	mov	r0, r4
 8019ef4:	f000 fd92 	bl	801aa1c <_calloc_r>
 8019ef8:	b160      	cbz	r0, 8019f14 <_Balloc+0x64>
 8019efa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019efe:	e00e      	b.n	8019f1e <_Balloc+0x6e>
 8019f00:	2221      	movs	r2, #33	@ 0x21
 8019f02:	2104      	movs	r1, #4
 8019f04:	4620      	mov	r0, r4
 8019f06:	f000 fd89 	bl	801aa1c <_calloc_r>
 8019f0a:	69e3      	ldr	r3, [r4, #28]
 8019f0c:	60f0      	str	r0, [r6, #12]
 8019f0e:	68db      	ldr	r3, [r3, #12]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d1e4      	bne.n	8019ede <_Balloc+0x2e>
 8019f14:	2000      	movs	r0, #0
 8019f16:	bd70      	pop	{r4, r5, r6, pc}
 8019f18:	6802      	ldr	r2, [r0, #0]
 8019f1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019f1e:	2300      	movs	r3, #0
 8019f20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019f24:	e7f7      	b.n	8019f16 <_Balloc+0x66>
 8019f26:	bf00      	nop
 8019f28:	0801b5fd 	.word	0x0801b5fd
 8019f2c:	0801b67d 	.word	0x0801b67d

08019f30 <_Bfree>:
 8019f30:	b570      	push	{r4, r5, r6, lr}
 8019f32:	69c6      	ldr	r6, [r0, #28]
 8019f34:	4605      	mov	r5, r0
 8019f36:	460c      	mov	r4, r1
 8019f38:	b976      	cbnz	r6, 8019f58 <_Bfree+0x28>
 8019f3a:	2010      	movs	r0, #16
 8019f3c:	f7fe fad8 	bl	80184f0 <malloc>
 8019f40:	4602      	mov	r2, r0
 8019f42:	61e8      	str	r0, [r5, #28]
 8019f44:	b920      	cbnz	r0, 8019f50 <_Bfree+0x20>
 8019f46:	4b09      	ldr	r3, [pc, #36]	@ (8019f6c <_Bfree+0x3c>)
 8019f48:	4809      	ldr	r0, [pc, #36]	@ (8019f70 <_Bfree+0x40>)
 8019f4a:	218f      	movs	r1, #143	@ 0x8f
 8019f4c:	f000 fd48 	bl	801a9e0 <__assert_func>
 8019f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019f54:	6006      	str	r6, [r0, #0]
 8019f56:	60c6      	str	r6, [r0, #12]
 8019f58:	b13c      	cbz	r4, 8019f6a <_Bfree+0x3a>
 8019f5a:	69eb      	ldr	r3, [r5, #28]
 8019f5c:	6862      	ldr	r2, [r4, #4]
 8019f5e:	68db      	ldr	r3, [r3, #12]
 8019f60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019f64:	6021      	str	r1, [r4, #0]
 8019f66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019f6a:	bd70      	pop	{r4, r5, r6, pc}
 8019f6c:	0801b5fd 	.word	0x0801b5fd
 8019f70:	0801b67d 	.word	0x0801b67d

08019f74 <__multadd>:
 8019f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f78:	690d      	ldr	r5, [r1, #16]
 8019f7a:	4607      	mov	r7, r0
 8019f7c:	460c      	mov	r4, r1
 8019f7e:	461e      	mov	r6, r3
 8019f80:	f101 0c14 	add.w	ip, r1, #20
 8019f84:	2000      	movs	r0, #0
 8019f86:	f8dc 3000 	ldr.w	r3, [ip]
 8019f8a:	b299      	uxth	r1, r3
 8019f8c:	fb02 6101 	mla	r1, r2, r1, r6
 8019f90:	0c1e      	lsrs	r6, r3, #16
 8019f92:	0c0b      	lsrs	r3, r1, #16
 8019f94:	fb02 3306 	mla	r3, r2, r6, r3
 8019f98:	b289      	uxth	r1, r1
 8019f9a:	3001      	adds	r0, #1
 8019f9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019fa0:	4285      	cmp	r5, r0
 8019fa2:	f84c 1b04 	str.w	r1, [ip], #4
 8019fa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019faa:	dcec      	bgt.n	8019f86 <__multadd+0x12>
 8019fac:	b30e      	cbz	r6, 8019ff2 <__multadd+0x7e>
 8019fae:	68a3      	ldr	r3, [r4, #8]
 8019fb0:	42ab      	cmp	r3, r5
 8019fb2:	dc19      	bgt.n	8019fe8 <__multadd+0x74>
 8019fb4:	6861      	ldr	r1, [r4, #4]
 8019fb6:	4638      	mov	r0, r7
 8019fb8:	3101      	adds	r1, #1
 8019fba:	f7ff ff79 	bl	8019eb0 <_Balloc>
 8019fbe:	4680      	mov	r8, r0
 8019fc0:	b928      	cbnz	r0, 8019fce <__multadd+0x5a>
 8019fc2:	4602      	mov	r2, r0
 8019fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8019ff8 <__multadd+0x84>)
 8019fc6:	480d      	ldr	r0, [pc, #52]	@ (8019ffc <__multadd+0x88>)
 8019fc8:	21ba      	movs	r1, #186	@ 0xba
 8019fca:	f000 fd09 	bl	801a9e0 <__assert_func>
 8019fce:	6922      	ldr	r2, [r4, #16]
 8019fd0:	3202      	adds	r2, #2
 8019fd2:	f104 010c 	add.w	r1, r4, #12
 8019fd6:	0092      	lsls	r2, r2, #2
 8019fd8:	300c      	adds	r0, #12
 8019fda:	f7ff f92a 	bl	8019232 <memcpy>
 8019fde:	4621      	mov	r1, r4
 8019fe0:	4638      	mov	r0, r7
 8019fe2:	f7ff ffa5 	bl	8019f30 <_Bfree>
 8019fe6:	4644      	mov	r4, r8
 8019fe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019fec:	3501      	adds	r5, #1
 8019fee:	615e      	str	r6, [r3, #20]
 8019ff0:	6125      	str	r5, [r4, #16]
 8019ff2:	4620      	mov	r0, r4
 8019ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ff8:	0801b66c 	.word	0x0801b66c
 8019ffc:	0801b67d 	.word	0x0801b67d

0801a000 <__hi0bits>:
 801a000:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801a004:	4603      	mov	r3, r0
 801a006:	bf36      	itet	cc
 801a008:	0403      	lslcc	r3, r0, #16
 801a00a:	2000      	movcs	r0, #0
 801a00c:	2010      	movcc	r0, #16
 801a00e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a012:	bf3c      	itt	cc
 801a014:	021b      	lslcc	r3, r3, #8
 801a016:	3008      	addcc	r0, #8
 801a018:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a01c:	bf3c      	itt	cc
 801a01e:	011b      	lslcc	r3, r3, #4
 801a020:	3004      	addcc	r0, #4
 801a022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a026:	bf3c      	itt	cc
 801a028:	009b      	lslcc	r3, r3, #2
 801a02a:	3002      	addcc	r0, #2
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	db05      	blt.n	801a03c <__hi0bits+0x3c>
 801a030:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801a034:	f100 0001 	add.w	r0, r0, #1
 801a038:	bf08      	it	eq
 801a03a:	2020      	moveq	r0, #32
 801a03c:	4770      	bx	lr

0801a03e <__lo0bits>:
 801a03e:	6803      	ldr	r3, [r0, #0]
 801a040:	4602      	mov	r2, r0
 801a042:	f013 0007 	ands.w	r0, r3, #7
 801a046:	d00b      	beq.n	801a060 <__lo0bits+0x22>
 801a048:	07d9      	lsls	r1, r3, #31
 801a04a:	d421      	bmi.n	801a090 <__lo0bits+0x52>
 801a04c:	0798      	lsls	r0, r3, #30
 801a04e:	bf49      	itett	mi
 801a050:	085b      	lsrmi	r3, r3, #1
 801a052:	089b      	lsrpl	r3, r3, #2
 801a054:	2001      	movmi	r0, #1
 801a056:	6013      	strmi	r3, [r2, #0]
 801a058:	bf5c      	itt	pl
 801a05a:	6013      	strpl	r3, [r2, #0]
 801a05c:	2002      	movpl	r0, #2
 801a05e:	4770      	bx	lr
 801a060:	b299      	uxth	r1, r3
 801a062:	b909      	cbnz	r1, 801a068 <__lo0bits+0x2a>
 801a064:	0c1b      	lsrs	r3, r3, #16
 801a066:	2010      	movs	r0, #16
 801a068:	b2d9      	uxtb	r1, r3
 801a06a:	b909      	cbnz	r1, 801a070 <__lo0bits+0x32>
 801a06c:	3008      	adds	r0, #8
 801a06e:	0a1b      	lsrs	r3, r3, #8
 801a070:	0719      	lsls	r1, r3, #28
 801a072:	bf04      	itt	eq
 801a074:	091b      	lsreq	r3, r3, #4
 801a076:	3004      	addeq	r0, #4
 801a078:	0799      	lsls	r1, r3, #30
 801a07a:	bf04      	itt	eq
 801a07c:	089b      	lsreq	r3, r3, #2
 801a07e:	3002      	addeq	r0, #2
 801a080:	07d9      	lsls	r1, r3, #31
 801a082:	d403      	bmi.n	801a08c <__lo0bits+0x4e>
 801a084:	085b      	lsrs	r3, r3, #1
 801a086:	f100 0001 	add.w	r0, r0, #1
 801a08a:	d003      	beq.n	801a094 <__lo0bits+0x56>
 801a08c:	6013      	str	r3, [r2, #0]
 801a08e:	4770      	bx	lr
 801a090:	2000      	movs	r0, #0
 801a092:	4770      	bx	lr
 801a094:	2020      	movs	r0, #32
 801a096:	4770      	bx	lr

0801a098 <__i2b>:
 801a098:	b510      	push	{r4, lr}
 801a09a:	460c      	mov	r4, r1
 801a09c:	2101      	movs	r1, #1
 801a09e:	f7ff ff07 	bl	8019eb0 <_Balloc>
 801a0a2:	4602      	mov	r2, r0
 801a0a4:	b928      	cbnz	r0, 801a0b2 <__i2b+0x1a>
 801a0a6:	4b05      	ldr	r3, [pc, #20]	@ (801a0bc <__i2b+0x24>)
 801a0a8:	4805      	ldr	r0, [pc, #20]	@ (801a0c0 <__i2b+0x28>)
 801a0aa:	f240 1145 	movw	r1, #325	@ 0x145
 801a0ae:	f000 fc97 	bl	801a9e0 <__assert_func>
 801a0b2:	2301      	movs	r3, #1
 801a0b4:	6144      	str	r4, [r0, #20]
 801a0b6:	6103      	str	r3, [r0, #16]
 801a0b8:	bd10      	pop	{r4, pc}
 801a0ba:	bf00      	nop
 801a0bc:	0801b66c 	.word	0x0801b66c
 801a0c0:	0801b67d 	.word	0x0801b67d

0801a0c4 <__multiply>:
 801a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0c8:	4617      	mov	r7, r2
 801a0ca:	690a      	ldr	r2, [r1, #16]
 801a0cc:	693b      	ldr	r3, [r7, #16]
 801a0ce:	429a      	cmp	r2, r3
 801a0d0:	bfa8      	it	ge
 801a0d2:	463b      	movge	r3, r7
 801a0d4:	4689      	mov	r9, r1
 801a0d6:	bfa4      	itt	ge
 801a0d8:	460f      	movge	r7, r1
 801a0da:	4699      	movge	r9, r3
 801a0dc:	693d      	ldr	r5, [r7, #16]
 801a0de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a0e2:	68bb      	ldr	r3, [r7, #8]
 801a0e4:	6879      	ldr	r1, [r7, #4]
 801a0e6:	eb05 060a 	add.w	r6, r5, sl
 801a0ea:	42b3      	cmp	r3, r6
 801a0ec:	b085      	sub	sp, #20
 801a0ee:	bfb8      	it	lt
 801a0f0:	3101      	addlt	r1, #1
 801a0f2:	f7ff fedd 	bl	8019eb0 <_Balloc>
 801a0f6:	b930      	cbnz	r0, 801a106 <__multiply+0x42>
 801a0f8:	4602      	mov	r2, r0
 801a0fa:	4b41      	ldr	r3, [pc, #260]	@ (801a200 <__multiply+0x13c>)
 801a0fc:	4841      	ldr	r0, [pc, #260]	@ (801a204 <__multiply+0x140>)
 801a0fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801a102:	f000 fc6d 	bl	801a9e0 <__assert_func>
 801a106:	f100 0414 	add.w	r4, r0, #20
 801a10a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801a10e:	4623      	mov	r3, r4
 801a110:	2200      	movs	r2, #0
 801a112:	4573      	cmp	r3, lr
 801a114:	d320      	bcc.n	801a158 <__multiply+0x94>
 801a116:	f107 0814 	add.w	r8, r7, #20
 801a11a:	f109 0114 	add.w	r1, r9, #20
 801a11e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801a122:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801a126:	9302      	str	r3, [sp, #8]
 801a128:	1beb      	subs	r3, r5, r7
 801a12a:	3b15      	subs	r3, #21
 801a12c:	f023 0303 	bic.w	r3, r3, #3
 801a130:	3304      	adds	r3, #4
 801a132:	3715      	adds	r7, #21
 801a134:	42bd      	cmp	r5, r7
 801a136:	bf38      	it	cc
 801a138:	2304      	movcc	r3, #4
 801a13a:	9301      	str	r3, [sp, #4]
 801a13c:	9b02      	ldr	r3, [sp, #8]
 801a13e:	9103      	str	r1, [sp, #12]
 801a140:	428b      	cmp	r3, r1
 801a142:	d80c      	bhi.n	801a15e <__multiply+0x9a>
 801a144:	2e00      	cmp	r6, #0
 801a146:	dd03      	ble.n	801a150 <__multiply+0x8c>
 801a148:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d055      	beq.n	801a1fc <__multiply+0x138>
 801a150:	6106      	str	r6, [r0, #16]
 801a152:	b005      	add	sp, #20
 801a154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a158:	f843 2b04 	str.w	r2, [r3], #4
 801a15c:	e7d9      	b.n	801a112 <__multiply+0x4e>
 801a15e:	f8b1 a000 	ldrh.w	sl, [r1]
 801a162:	f1ba 0f00 	cmp.w	sl, #0
 801a166:	d01f      	beq.n	801a1a8 <__multiply+0xe4>
 801a168:	46c4      	mov	ip, r8
 801a16a:	46a1      	mov	r9, r4
 801a16c:	2700      	movs	r7, #0
 801a16e:	f85c 2b04 	ldr.w	r2, [ip], #4
 801a172:	f8d9 3000 	ldr.w	r3, [r9]
 801a176:	fa1f fb82 	uxth.w	fp, r2
 801a17a:	b29b      	uxth	r3, r3
 801a17c:	fb0a 330b 	mla	r3, sl, fp, r3
 801a180:	443b      	add	r3, r7
 801a182:	f8d9 7000 	ldr.w	r7, [r9]
 801a186:	0c12      	lsrs	r2, r2, #16
 801a188:	0c3f      	lsrs	r7, r7, #16
 801a18a:	fb0a 7202 	mla	r2, sl, r2, r7
 801a18e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801a192:	b29b      	uxth	r3, r3
 801a194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a198:	4565      	cmp	r5, ip
 801a19a:	f849 3b04 	str.w	r3, [r9], #4
 801a19e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801a1a2:	d8e4      	bhi.n	801a16e <__multiply+0xaa>
 801a1a4:	9b01      	ldr	r3, [sp, #4]
 801a1a6:	50e7      	str	r7, [r4, r3]
 801a1a8:	9b03      	ldr	r3, [sp, #12]
 801a1aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801a1ae:	3104      	adds	r1, #4
 801a1b0:	f1b9 0f00 	cmp.w	r9, #0
 801a1b4:	d020      	beq.n	801a1f8 <__multiply+0x134>
 801a1b6:	6823      	ldr	r3, [r4, #0]
 801a1b8:	4647      	mov	r7, r8
 801a1ba:	46a4      	mov	ip, r4
 801a1bc:	f04f 0a00 	mov.w	sl, #0
 801a1c0:	f8b7 b000 	ldrh.w	fp, [r7]
 801a1c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801a1c8:	fb09 220b 	mla	r2, r9, fp, r2
 801a1cc:	4452      	add	r2, sl
 801a1ce:	b29b      	uxth	r3, r3
 801a1d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a1d4:	f84c 3b04 	str.w	r3, [ip], #4
 801a1d8:	f857 3b04 	ldr.w	r3, [r7], #4
 801a1dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a1e0:	f8bc 3000 	ldrh.w	r3, [ip]
 801a1e4:	fb09 330a 	mla	r3, r9, sl, r3
 801a1e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801a1ec:	42bd      	cmp	r5, r7
 801a1ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a1f2:	d8e5      	bhi.n	801a1c0 <__multiply+0xfc>
 801a1f4:	9a01      	ldr	r2, [sp, #4]
 801a1f6:	50a3      	str	r3, [r4, r2]
 801a1f8:	3404      	adds	r4, #4
 801a1fa:	e79f      	b.n	801a13c <__multiply+0x78>
 801a1fc:	3e01      	subs	r6, #1
 801a1fe:	e7a1      	b.n	801a144 <__multiply+0x80>
 801a200:	0801b66c 	.word	0x0801b66c
 801a204:	0801b67d 	.word	0x0801b67d

0801a208 <__pow5mult>:
 801a208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a20c:	4615      	mov	r5, r2
 801a20e:	f012 0203 	ands.w	r2, r2, #3
 801a212:	4607      	mov	r7, r0
 801a214:	460e      	mov	r6, r1
 801a216:	d007      	beq.n	801a228 <__pow5mult+0x20>
 801a218:	4c25      	ldr	r4, [pc, #148]	@ (801a2b0 <__pow5mult+0xa8>)
 801a21a:	3a01      	subs	r2, #1
 801a21c:	2300      	movs	r3, #0
 801a21e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a222:	f7ff fea7 	bl	8019f74 <__multadd>
 801a226:	4606      	mov	r6, r0
 801a228:	10ad      	asrs	r5, r5, #2
 801a22a:	d03d      	beq.n	801a2a8 <__pow5mult+0xa0>
 801a22c:	69fc      	ldr	r4, [r7, #28]
 801a22e:	b97c      	cbnz	r4, 801a250 <__pow5mult+0x48>
 801a230:	2010      	movs	r0, #16
 801a232:	f7fe f95d 	bl	80184f0 <malloc>
 801a236:	4602      	mov	r2, r0
 801a238:	61f8      	str	r0, [r7, #28]
 801a23a:	b928      	cbnz	r0, 801a248 <__pow5mult+0x40>
 801a23c:	4b1d      	ldr	r3, [pc, #116]	@ (801a2b4 <__pow5mult+0xac>)
 801a23e:	481e      	ldr	r0, [pc, #120]	@ (801a2b8 <__pow5mult+0xb0>)
 801a240:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801a244:	f000 fbcc 	bl	801a9e0 <__assert_func>
 801a248:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a24c:	6004      	str	r4, [r0, #0]
 801a24e:	60c4      	str	r4, [r0, #12]
 801a250:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801a254:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a258:	b94c      	cbnz	r4, 801a26e <__pow5mult+0x66>
 801a25a:	f240 2171 	movw	r1, #625	@ 0x271
 801a25e:	4638      	mov	r0, r7
 801a260:	f7ff ff1a 	bl	801a098 <__i2b>
 801a264:	2300      	movs	r3, #0
 801a266:	f8c8 0008 	str.w	r0, [r8, #8]
 801a26a:	4604      	mov	r4, r0
 801a26c:	6003      	str	r3, [r0, #0]
 801a26e:	f04f 0900 	mov.w	r9, #0
 801a272:	07eb      	lsls	r3, r5, #31
 801a274:	d50a      	bpl.n	801a28c <__pow5mult+0x84>
 801a276:	4631      	mov	r1, r6
 801a278:	4622      	mov	r2, r4
 801a27a:	4638      	mov	r0, r7
 801a27c:	f7ff ff22 	bl	801a0c4 <__multiply>
 801a280:	4631      	mov	r1, r6
 801a282:	4680      	mov	r8, r0
 801a284:	4638      	mov	r0, r7
 801a286:	f7ff fe53 	bl	8019f30 <_Bfree>
 801a28a:	4646      	mov	r6, r8
 801a28c:	106d      	asrs	r5, r5, #1
 801a28e:	d00b      	beq.n	801a2a8 <__pow5mult+0xa0>
 801a290:	6820      	ldr	r0, [r4, #0]
 801a292:	b938      	cbnz	r0, 801a2a4 <__pow5mult+0x9c>
 801a294:	4622      	mov	r2, r4
 801a296:	4621      	mov	r1, r4
 801a298:	4638      	mov	r0, r7
 801a29a:	f7ff ff13 	bl	801a0c4 <__multiply>
 801a29e:	6020      	str	r0, [r4, #0]
 801a2a0:	f8c0 9000 	str.w	r9, [r0]
 801a2a4:	4604      	mov	r4, r0
 801a2a6:	e7e4      	b.n	801a272 <__pow5mult+0x6a>
 801a2a8:	4630      	mov	r0, r6
 801a2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2ae:	bf00      	nop
 801a2b0:	0801b730 	.word	0x0801b730
 801a2b4:	0801b5fd 	.word	0x0801b5fd
 801a2b8:	0801b67d 	.word	0x0801b67d

0801a2bc <__lshift>:
 801a2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2c0:	460c      	mov	r4, r1
 801a2c2:	6849      	ldr	r1, [r1, #4]
 801a2c4:	6923      	ldr	r3, [r4, #16]
 801a2c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a2ca:	68a3      	ldr	r3, [r4, #8]
 801a2cc:	4607      	mov	r7, r0
 801a2ce:	4691      	mov	r9, r2
 801a2d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a2d4:	f108 0601 	add.w	r6, r8, #1
 801a2d8:	42b3      	cmp	r3, r6
 801a2da:	db0b      	blt.n	801a2f4 <__lshift+0x38>
 801a2dc:	4638      	mov	r0, r7
 801a2de:	f7ff fde7 	bl	8019eb0 <_Balloc>
 801a2e2:	4605      	mov	r5, r0
 801a2e4:	b948      	cbnz	r0, 801a2fa <__lshift+0x3e>
 801a2e6:	4602      	mov	r2, r0
 801a2e8:	4b28      	ldr	r3, [pc, #160]	@ (801a38c <__lshift+0xd0>)
 801a2ea:	4829      	ldr	r0, [pc, #164]	@ (801a390 <__lshift+0xd4>)
 801a2ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801a2f0:	f000 fb76 	bl	801a9e0 <__assert_func>
 801a2f4:	3101      	adds	r1, #1
 801a2f6:	005b      	lsls	r3, r3, #1
 801a2f8:	e7ee      	b.n	801a2d8 <__lshift+0x1c>
 801a2fa:	2300      	movs	r3, #0
 801a2fc:	f100 0114 	add.w	r1, r0, #20
 801a300:	f100 0210 	add.w	r2, r0, #16
 801a304:	4618      	mov	r0, r3
 801a306:	4553      	cmp	r3, sl
 801a308:	db33      	blt.n	801a372 <__lshift+0xb6>
 801a30a:	6920      	ldr	r0, [r4, #16]
 801a30c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a310:	f104 0314 	add.w	r3, r4, #20
 801a314:	f019 091f 	ands.w	r9, r9, #31
 801a318:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a31c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a320:	d02b      	beq.n	801a37a <__lshift+0xbe>
 801a322:	f1c9 0e20 	rsb	lr, r9, #32
 801a326:	468a      	mov	sl, r1
 801a328:	2200      	movs	r2, #0
 801a32a:	6818      	ldr	r0, [r3, #0]
 801a32c:	fa00 f009 	lsl.w	r0, r0, r9
 801a330:	4310      	orrs	r0, r2
 801a332:	f84a 0b04 	str.w	r0, [sl], #4
 801a336:	f853 2b04 	ldr.w	r2, [r3], #4
 801a33a:	459c      	cmp	ip, r3
 801a33c:	fa22 f20e 	lsr.w	r2, r2, lr
 801a340:	d8f3      	bhi.n	801a32a <__lshift+0x6e>
 801a342:	ebac 0304 	sub.w	r3, ip, r4
 801a346:	3b15      	subs	r3, #21
 801a348:	f023 0303 	bic.w	r3, r3, #3
 801a34c:	3304      	adds	r3, #4
 801a34e:	f104 0015 	add.w	r0, r4, #21
 801a352:	4560      	cmp	r0, ip
 801a354:	bf88      	it	hi
 801a356:	2304      	movhi	r3, #4
 801a358:	50ca      	str	r2, [r1, r3]
 801a35a:	b10a      	cbz	r2, 801a360 <__lshift+0xa4>
 801a35c:	f108 0602 	add.w	r6, r8, #2
 801a360:	3e01      	subs	r6, #1
 801a362:	4638      	mov	r0, r7
 801a364:	612e      	str	r6, [r5, #16]
 801a366:	4621      	mov	r1, r4
 801a368:	f7ff fde2 	bl	8019f30 <_Bfree>
 801a36c:	4628      	mov	r0, r5
 801a36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a372:	f842 0f04 	str.w	r0, [r2, #4]!
 801a376:	3301      	adds	r3, #1
 801a378:	e7c5      	b.n	801a306 <__lshift+0x4a>
 801a37a:	3904      	subs	r1, #4
 801a37c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a380:	f841 2f04 	str.w	r2, [r1, #4]!
 801a384:	459c      	cmp	ip, r3
 801a386:	d8f9      	bhi.n	801a37c <__lshift+0xc0>
 801a388:	e7ea      	b.n	801a360 <__lshift+0xa4>
 801a38a:	bf00      	nop
 801a38c:	0801b66c 	.word	0x0801b66c
 801a390:	0801b67d 	.word	0x0801b67d

0801a394 <__mcmp>:
 801a394:	690a      	ldr	r2, [r1, #16]
 801a396:	4603      	mov	r3, r0
 801a398:	6900      	ldr	r0, [r0, #16]
 801a39a:	1a80      	subs	r0, r0, r2
 801a39c:	b530      	push	{r4, r5, lr}
 801a39e:	d10e      	bne.n	801a3be <__mcmp+0x2a>
 801a3a0:	3314      	adds	r3, #20
 801a3a2:	3114      	adds	r1, #20
 801a3a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801a3a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801a3ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a3b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a3b4:	4295      	cmp	r5, r2
 801a3b6:	d003      	beq.n	801a3c0 <__mcmp+0x2c>
 801a3b8:	d205      	bcs.n	801a3c6 <__mcmp+0x32>
 801a3ba:	f04f 30ff 	mov.w	r0, #4294967295
 801a3be:	bd30      	pop	{r4, r5, pc}
 801a3c0:	42a3      	cmp	r3, r4
 801a3c2:	d3f3      	bcc.n	801a3ac <__mcmp+0x18>
 801a3c4:	e7fb      	b.n	801a3be <__mcmp+0x2a>
 801a3c6:	2001      	movs	r0, #1
 801a3c8:	e7f9      	b.n	801a3be <__mcmp+0x2a>
	...

0801a3cc <__mdiff>:
 801a3cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3d0:	4689      	mov	r9, r1
 801a3d2:	4606      	mov	r6, r0
 801a3d4:	4611      	mov	r1, r2
 801a3d6:	4648      	mov	r0, r9
 801a3d8:	4614      	mov	r4, r2
 801a3da:	f7ff ffdb 	bl	801a394 <__mcmp>
 801a3de:	1e05      	subs	r5, r0, #0
 801a3e0:	d112      	bne.n	801a408 <__mdiff+0x3c>
 801a3e2:	4629      	mov	r1, r5
 801a3e4:	4630      	mov	r0, r6
 801a3e6:	f7ff fd63 	bl	8019eb0 <_Balloc>
 801a3ea:	4602      	mov	r2, r0
 801a3ec:	b928      	cbnz	r0, 801a3fa <__mdiff+0x2e>
 801a3ee:	4b3f      	ldr	r3, [pc, #252]	@ (801a4ec <__mdiff+0x120>)
 801a3f0:	f240 2137 	movw	r1, #567	@ 0x237
 801a3f4:	483e      	ldr	r0, [pc, #248]	@ (801a4f0 <__mdiff+0x124>)
 801a3f6:	f000 faf3 	bl	801a9e0 <__assert_func>
 801a3fa:	2301      	movs	r3, #1
 801a3fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a400:	4610      	mov	r0, r2
 801a402:	b003      	add	sp, #12
 801a404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a408:	bfbc      	itt	lt
 801a40a:	464b      	movlt	r3, r9
 801a40c:	46a1      	movlt	r9, r4
 801a40e:	4630      	mov	r0, r6
 801a410:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801a414:	bfba      	itte	lt
 801a416:	461c      	movlt	r4, r3
 801a418:	2501      	movlt	r5, #1
 801a41a:	2500      	movge	r5, #0
 801a41c:	f7ff fd48 	bl	8019eb0 <_Balloc>
 801a420:	4602      	mov	r2, r0
 801a422:	b918      	cbnz	r0, 801a42c <__mdiff+0x60>
 801a424:	4b31      	ldr	r3, [pc, #196]	@ (801a4ec <__mdiff+0x120>)
 801a426:	f240 2145 	movw	r1, #581	@ 0x245
 801a42a:	e7e3      	b.n	801a3f4 <__mdiff+0x28>
 801a42c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801a430:	6926      	ldr	r6, [r4, #16]
 801a432:	60c5      	str	r5, [r0, #12]
 801a434:	f109 0310 	add.w	r3, r9, #16
 801a438:	f109 0514 	add.w	r5, r9, #20
 801a43c:	f104 0e14 	add.w	lr, r4, #20
 801a440:	f100 0b14 	add.w	fp, r0, #20
 801a444:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801a448:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801a44c:	9301      	str	r3, [sp, #4]
 801a44e:	46d9      	mov	r9, fp
 801a450:	f04f 0c00 	mov.w	ip, #0
 801a454:	9b01      	ldr	r3, [sp, #4]
 801a456:	f85e 0b04 	ldr.w	r0, [lr], #4
 801a45a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801a45e:	9301      	str	r3, [sp, #4]
 801a460:	fa1f f38a 	uxth.w	r3, sl
 801a464:	4619      	mov	r1, r3
 801a466:	b283      	uxth	r3, r0
 801a468:	1acb      	subs	r3, r1, r3
 801a46a:	0c00      	lsrs	r0, r0, #16
 801a46c:	4463      	add	r3, ip
 801a46e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801a472:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801a476:	b29b      	uxth	r3, r3
 801a478:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801a47c:	4576      	cmp	r6, lr
 801a47e:	f849 3b04 	str.w	r3, [r9], #4
 801a482:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a486:	d8e5      	bhi.n	801a454 <__mdiff+0x88>
 801a488:	1b33      	subs	r3, r6, r4
 801a48a:	3b15      	subs	r3, #21
 801a48c:	f023 0303 	bic.w	r3, r3, #3
 801a490:	3415      	adds	r4, #21
 801a492:	3304      	adds	r3, #4
 801a494:	42a6      	cmp	r6, r4
 801a496:	bf38      	it	cc
 801a498:	2304      	movcc	r3, #4
 801a49a:	441d      	add	r5, r3
 801a49c:	445b      	add	r3, fp
 801a49e:	461e      	mov	r6, r3
 801a4a0:	462c      	mov	r4, r5
 801a4a2:	4544      	cmp	r4, r8
 801a4a4:	d30e      	bcc.n	801a4c4 <__mdiff+0xf8>
 801a4a6:	f108 0103 	add.w	r1, r8, #3
 801a4aa:	1b49      	subs	r1, r1, r5
 801a4ac:	f021 0103 	bic.w	r1, r1, #3
 801a4b0:	3d03      	subs	r5, #3
 801a4b2:	45a8      	cmp	r8, r5
 801a4b4:	bf38      	it	cc
 801a4b6:	2100      	movcc	r1, #0
 801a4b8:	440b      	add	r3, r1
 801a4ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a4be:	b191      	cbz	r1, 801a4e6 <__mdiff+0x11a>
 801a4c0:	6117      	str	r7, [r2, #16]
 801a4c2:	e79d      	b.n	801a400 <__mdiff+0x34>
 801a4c4:	f854 1b04 	ldr.w	r1, [r4], #4
 801a4c8:	46e6      	mov	lr, ip
 801a4ca:	0c08      	lsrs	r0, r1, #16
 801a4cc:	fa1c fc81 	uxtah	ip, ip, r1
 801a4d0:	4471      	add	r1, lr
 801a4d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801a4d6:	b289      	uxth	r1, r1
 801a4d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801a4dc:	f846 1b04 	str.w	r1, [r6], #4
 801a4e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a4e4:	e7dd      	b.n	801a4a2 <__mdiff+0xd6>
 801a4e6:	3f01      	subs	r7, #1
 801a4e8:	e7e7      	b.n	801a4ba <__mdiff+0xee>
 801a4ea:	bf00      	nop
 801a4ec:	0801b66c 	.word	0x0801b66c
 801a4f0:	0801b67d 	.word	0x0801b67d

0801a4f4 <__d2b>:
 801a4f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a4f8:	460f      	mov	r7, r1
 801a4fa:	2101      	movs	r1, #1
 801a4fc:	ec59 8b10 	vmov	r8, r9, d0
 801a500:	4616      	mov	r6, r2
 801a502:	f7ff fcd5 	bl	8019eb0 <_Balloc>
 801a506:	4604      	mov	r4, r0
 801a508:	b930      	cbnz	r0, 801a518 <__d2b+0x24>
 801a50a:	4602      	mov	r2, r0
 801a50c:	4b23      	ldr	r3, [pc, #140]	@ (801a59c <__d2b+0xa8>)
 801a50e:	4824      	ldr	r0, [pc, #144]	@ (801a5a0 <__d2b+0xac>)
 801a510:	f240 310f 	movw	r1, #783	@ 0x30f
 801a514:	f000 fa64 	bl	801a9e0 <__assert_func>
 801a518:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a51c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a520:	b10d      	cbz	r5, 801a526 <__d2b+0x32>
 801a522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a526:	9301      	str	r3, [sp, #4]
 801a528:	f1b8 0300 	subs.w	r3, r8, #0
 801a52c:	d023      	beq.n	801a576 <__d2b+0x82>
 801a52e:	4668      	mov	r0, sp
 801a530:	9300      	str	r3, [sp, #0]
 801a532:	f7ff fd84 	bl	801a03e <__lo0bits>
 801a536:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a53a:	b1d0      	cbz	r0, 801a572 <__d2b+0x7e>
 801a53c:	f1c0 0320 	rsb	r3, r0, #32
 801a540:	fa02 f303 	lsl.w	r3, r2, r3
 801a544:	430b      	orrs	r3, r1
 801a546:	40c2      	lsrs	r2, r0
 801a548:	6163      	str	r3, [r4, #20]
 801a54a:	9201      	str	r2, [sp, #4]
 801a54c:	9b01      	ldr	r3, [sp, #4]
 801a54e:	61a3      	str	r3, [r4, #24]
 801a550:	2b00      	cmp	r3, #0
 801a552:	bf0c      	ite	eq
 801a554:	2201      	moveq	r2, #1
 801a556:	2202      	movne	r2, #2
 801a558:	6122      	str	r2, [r4, #16]
 801a55a:	b1a5      	cbz	r5, 801a586 <__d2b+0x92>
 801a55c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801a560:	4405      	add	r5, r0
 801a562:	603d      	str	r5, [r7, #0]
 801a564:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801a568:	6030      	str	r0, [r6, #0]
 801a56a:	4620      	mov	r0, r4
 801a56c:	b003      	add	sp, #12
 801a56e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a572:	6161      	str	r1, [r4, #20]
 801a574:	e7ea      	b.n	801a54c <__d2b+0x58>
 801a576:	a801      	add	r0, sp, #4
 801a578:	f7ff fd61 	bl	801a03e <__lo0bits>
 801a57c:	9b01      	ldr	r3, [sp, #4]
 801a57e:	6163      	str	r3, [r4, #20]
 801a580:	3020      	adds	r0, #32
 801a582:	2201      	movs	r2, #1
 801a584:	e7e8      	b.n	801a558 <__d2b+0x64>
 801a586:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a58a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801a58e:	6038      	str	r0, [r7, #0]
 801a590:	6918      	ldr	r0, [r3, #16]
 801a592:	f7ff fd35 	bl	801a000 <__hi0bits>
 801a596:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a59a:	e7e5      	b.n	801a568 <__d2b+0x74>
 801a59c:	0801b66c 	.word	0x0801b66c
 801a5a0:	0801b67d 	.word	0x0801b67d

0801a5a4 <__ssputs_r>:
 801a5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a5a8:	688e      	ldr	r6, [r1, #8]
 801a5aa:	461f      	mov	r7, r3
 801a5ac:	42be      	cmp	r6, r7
 801a5ae:	680b      	ldr	r3, [r1, #0]
 801a5b0:	4682      	mov	sl, r0
 801a5b2:	460c      	mov	r4, r1
 801a5b4:	4690      	mov	r8, r2
 801a5b6:	d82d      	bhi.n	801a614 <__ssputs_r+0x70>
 801a5b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a5bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a5c0:	d026      	beq.n	801a610 <__ssputs_r+0x6c>
 801a5c2:	6965      	ldr	r5, [r4, #20]
 801a5c4:	6909      	ldr	r1, [r1, #16]
 801a5c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a5ca:	eba3 0901 	sub.w	r9, r3, r1
 801a5ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a5d2:	1c7b      	adds	r3, r7, #1
 801a5d4:	444b      	add	r3, r9
 801a5d6:	106d      	asrs	r5, r5, #1
 801a5d8:	429d      	cmp	r5, r3
 801a5da:	bf38      	it	cc
 801a5dc:	461d      	movcc	r5, r3
 801a5de:	0553      	lsls	r3, r2, #21
 801a5e0:	d527      	bpl.n	801a632 <__ssputs_r+0x8e>
 801a5e2:	4629      	mov	r1, r5
 801a5e4:	f7fd ffae 	bl	8018544 <_malloc_r>
 801a5e8:	4606      	mov	r6, r0
 801a5ea:	b360      	cbz	r0, 801a646 <__ssputs_r+0xa2>
 801a5ec:	6921      	ldr	r1, [r4, #16]
 801a5ee:	464a      	mov	r2, r9
 801a5f0:	f7fe fe1f 	bl	8019232 <memcpy>
 801a5f4:	89a3      	ldrh	r3, [r4, #12]
 801a5f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a5fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a5fe:	81a3      	strh	r3, [r4, #12]
 801a600:	6126      	str	r6, [r4, #16]
 801a602:	6165      	str	r5, [r4, #20]
 801a604:	444e      	add	r6, r9
 801a606:	eba5 0509 	sub.w	r5, r5, r9
 801a60a:	6026      	str	r6, [r4, #0]
 801a60c:	60a5      	str	r5, [r4, #8]
 801a60e:	463e      	mov	r6, r7
 801a610:	42be      	cmp	r6, r7
 801a612:	d900      	bls.n	801a616 <__ssputs_r+0x72>
 801a614:	463e      	mov	r6, r7
 801a616:	6820      	ldr	r0, [r4, #0]
 801a618:	4632      	mov	r2, r6
 801a61a:	4641      	mov	r1, r8
 801a61c:	f000 f9c6 	bl	801a9ac <memmove>
 801a620:	68a3      	ldr	r3, [r4, #8]
 801a622:	1b9b      	subs	r3, r3, r6
 801a624:	60a3      	str	r3, [r4, #8]
 801a626:	6823      	ldr	r3, [r4, #0]
 801a628:	4433      	add	r3, r6
 801a62a:	6023      	str	r3, [r4, #0]
 801a62c:	2000      	movs	r0, #0
 801a62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a632:	462a      	mov	r2, r5
 801a634:	f000 fa18 	bl	801aa68 <_realloc_r>
 801a638:	4606      	mov	r6, r0
 801a63a:	2800      	cmp	r0, #0
 801a63c:	d1e0      	bne.n	801a600 <__ssputs_r+0x5c>
 801a63e:	6921      	ldr	r1, [r4, #16]
 801a640:	4650      	mov	r0, sl
 801a642:	f7ff fbeb 	bl	8019e1c <_free_r>
 801a646:	230c      	movs	r3, #12
 801a648:	f8ca 3000 	str.w	r3, [sl]
 801a64c:	89a3      	ldrh	r3, [r4, #12]
 801a64e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a652:	81a3      	strh	r3, [r4, #12]
 801a654:	f04f 30ff 	mov.w	r0, #4294967295
 801a658:	e7e9      	b.n	801a62e <__ssputs_r+0x8a>
	...

0801a65c <_svfiprintf_r>:
 801a65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a660:	4698      	mov	r8, r3
 801a662:	898b      	ldrh	r3, [r1, #12]
 801a664:	061b      	lsls	r3, r3, #24
 801a666:	b09d      	sub	sp, #116	@ 0x74
 801a668:	4607      	mov	r7, r0
 801a66a:	460d      	mov	r5, r1
 801a66c:	4614      	mov	r4, r2
 801a66e:	d510      	bpl.n	801a692 <_svfiprintf_r+0x36>
 801a670:	690b      	ldr	r3, [r1, #16]
 801a672:	b973      	cbnz	r3, 801a692 <_svfiprintf_r+0x36>
 801a674:	2140      	movs	r1, #64	@ 0x40
 801a676:	f7fd ff65 	bl	8018544 <_malloc_r>
 801a67a:	6028      	str	r0, [r5, #0]
 801a67c:	6128      	str	r0, [r5, #16]
 801a67e:	b930      	cbnz	r0, 801a68e <_svfiprintf_r+0x32>
 801a680:	230c      	movs	r3, #12
 801a682:	603b      	str	r3, [r7, #0]
 801a684:	f04f 30ff 	mov.w	r0, #4294967295
 801a688:	b01d      	add	sp, #116	@ 0x74
 801a68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a68e:	2340      	movs	r3, #64	@ 0x40
 801a690:	616b      	str	r3, [r5, #20]
 801a692:	2300      	movs	r3, #0
 801a694:	9309      	str	r3, [sp, #36]	@ 0x24
 801a696:	2320      	movs	r3, #32
 801a698:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a69c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a6a0:	2330      	movs	r3, #48	@ 0x30
 801a6a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a840 <_svfiprintf_r+0x1e4>
 801a6a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a6aa:	f04f 0901 	mov.w	r9, #1
 801a6ae:	4623      	mov	r3, r4
 801a6b0:	469a      	mov	sl, r3
 801a6b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a6b6:	b10a      	cbz	r2, 801a6bc <_svfiprintf_r+0x60>
 801a6b8:	2a25      	cmp	r2, #37	@ 0x25
 801a6ba:	d1f9      	bne.n	801a6b0 <_svfiprintf_r+0x54>
 801a6bc:	ebba 0b04 	subs.w	fp, sl, r4
 801a6c0:	d00b      	beq.n	801a6da <_svfiprintf_r+0x7e>
 801a6c2:	465b      	mov	r3, fp
 801a6c4:	4622      	mov	r2, r4
 801a6c6:	4629      	mov	r1, r5
 801a6c8:	4638      	mov	r0, r7
 801a6ca:	f7ff ff6b 	bl	801a5a4 <__ssputs_r>
 801a6ce:	3001      	adds	r0, #1
 801a6d0:	f000 80a7 	beq.w	801a822 <_svfiprintf_r+0x1c6>
 801a6d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a6d6:	445a      	add	r2, fp
 801a6d8:	9209      	str	r2, [sp, #36]	@ 0x24
 801a6da:	f89a 3000 	ldrb.w	r3, [sl]
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	f000 809f 	beq.w	801a822 <_svfiprintf_r+0x1c6>
 801a6e4:	2300      	movs	r3, #0
 801a6e6:	f04f 32ff 	mov.w	r2, #4294967295
 801a6ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a6ee:	f10a 0a01 	add.w	sl, sl, #1
 801a6f2:	9304      	str	r3, [sp, #16]
 801a6f4:	9307      	str	r3, [sp, #28]
 801a6f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a6fa:	931a      	str	r3, [sp, #104]	@ 0x68
 801a6fc:	4654      	mov	r4, sl
 801a6fe:	2205      	movs	r2, #5
 801a700:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a704:	484e      	ldr	r0, [pc, #312]	@ (801a840 <_svfiprintf_r+0x1e4>)
 801a706:	f7e5 fdeb 	bl	80002e0 <memchr>
 801a70a:	9a04      	ldr	r2, [sp, #16]
 801a70c:	b9d8      	cbnz	r0, 801a746 <_svfiprintf_r+0xea>
 801a70e:	06d0      	lsls	r0, r2, #27
 801a710:	bf44      	itt	mi
 801a712:	2320      	movmi	r3, #32
 801a714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a718:	0711      	lsls	r1, r2, #28
 801a71a:	bf44      	itt	mi
 801a71c:	232b      	movmi	r3, #43	@ 0x2b
 801a71e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a722:	f89a 3000 	ldrb.w	r3, [sl]
 801a726:	2b2a      	cmp	r3, #42	@ 0x2a
 801a728:	d015      	beq.n	801a756 <_svfiprintf_r+0xfa>
 801a72a:	9a07      	ldr	r2, [sp, #28]
 801a72c:	4654      	mov	r4, sl
 801a72e:	2000      	movs	r0, #0
 801a730:	f04f 0c0a 	mov.w	ip, #10
 801a734:	4621      	mov	r1, r4
 801a736:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a73a:	3b30      	subs	r3, #48	@ 0x30
 801a73c:	2b09      	cmp	r3, #9
 801a73e:	d94b      	bls.n	801a7d8 <_svfiprintf_r+0x17c>
 801a740:	b1b0      	cbz	r0, 801a770 <_svfiprintf_r+0x114>
 801a742:	9207      	str	r2, [sp, #28]
 801a744:	e014      	b.n	801a770 <_svfiprintf_r+0x114>
 801a746:	eba0 0308 	sub.w	r3, r0, r8
 801a74a:	fa09 f303 	lsl.w	r3, r9, r3
 801a74e:	4313      	orrs	r3, r2
 801a750:	9304      	str	r3, [sp, #16]
 801a752:	46a2      	mov	sl, r4
 801a754:	e7d2      	b.n	801a6fc <_svfiprintf_r+0xa0>
 801a756:	9b03      	ldr	r3, [sp, #12]
 801a758:	1d19      	adds	r1, r3, #4
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	9103      	str	r1, [sp, #12]
 801a75e:	2b00      	cmp	r3, #0
 801a760:	bfbb      	ittet	lt
 801a762:	425b      	neglt	r3, r3
 801a764:	f042 0202 	orrlt.w	r2, r2, #2
 801a768:	9307      	strge	r3, [sp, #28]
 801a76a:	9307      	strlt	r3, [sp, #28]
 801a76c:	bfb8      	it	lt
 801a76e:	9204      	strlt	r2, [sp, #16]
 801a770:	7823      	ldrb	r3, [r4, #0]
 801a772:	2b2e      	cmp	r3, #46	@ 0x2e
 801a774:	d10a      	bne.n	801a78c <_svfiprintf_r+0x130>
 801a776:	7863      	ldrb	r3, [r4, #1]
 801a778:	2b2a      	cmp	r3, #42	@ 0x2a
 801a77a:	d132      	bne.n	801a7e2 <_svfiprintf_r+0x186>
 801a77c:	9b03      	ldr	r3, [sp, #12]
 801a77e:	1d1a      	adds	r2, r3, #4
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	9203      	str	r2, [sp, #12]
 801a784:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a788:	3402      	adds	r4, #2
 801a78a:	9305      	str	r3, [sp, #20]
 801a78c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a850 <_svfiprintf_r+0x1f4>
 801a790:	7821      	ldrb	r1, [r4, #0]
 801a792:	2203      	movs	r2, #3
 801a794:	4650      	mov	r0, sl
 801a796:	f7e5 fda3 	bl	80002e0 <memchr>
 801a79a:	b138      	cbz	r0, 801a7ac <_svfiprintf_r+0x150>
 801a79c:	9b04      	ldr	r3, [sp, #16]
 801a79e:	eba0 000a 	sub.w	r0, r0, sl
 801a7a2:	2240      	movs	r2, #64	@ 0x40
 801a7a4:	4082      	lsls	r2, r0
 801a7a6:	4313      	orrs	r3, r2
 801a7a8:	3401      	adds	r4, #1
 801a7aa:	9304      	str	r3, [sp, #16]
 801a7ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a7b0:	4824      	ldr	r0, [pc, #144]	@ (801a844 <_svfiprintf_r+0x1e8>)
 801a7b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a7b6:	2206      	movs	r2, #6
 801a7b8:	f7e5 fd92 	bl	80002e0 <memchr>
 801a7bc:	2800      	cmp	r0, #0
 801a7be:	d036      	beq.n	801a82e <_svfiprintf_r+0x1d2>
 801a7c0:	4b21      	ldr	r3, [pc, #132]	@ (801a848 <_svfiprintf_r+0x1ec>)
 801a7c2:	bb1b      	cbnz	r3, 801a80c <_svfiprintf_r+0x1b0>
 801a7c4:	9b03      	ldr	r3, [sp, #12]
 801a7c6:	3307      	adds	r3, #7
 801a7c8:	f023 0307 	bic.w	r3, r3, #7
 801a7cc:	3308      	adds	r3, #8
 801a7ce:	9303      	str	r3, [sp, #12]
 801a7d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7d2:	4433      	add	r3, r6
 801a7d4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a7d6:	e76a      	b.n	801a6ae <_svfiprintf_r+0x52>
 801a7d8:	fb0c 3202 	mla	r2, ip, r2, r3
 801a7dc:	460c      	mov	r4, r1
 801a7de:	2001      	movs	r0, #1
 801a7e0:	e7a8      	b.n	801a734 <_svfiprintf_r+0xd8>
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	3401      	adds	r4, #1
 801a7e6:	9305      	str	r3, [sp, #20]
 801a7e8:	4619      	mov	r1, r3
 801a7ea:	f04f 0c0a 	mov.w	ip, #10
 801a7ee:	4620      	mov	r0, r4
 801a7f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a7f4:	3a30      	subs	r2, #48	@ 0x30
 801a7f6:	2a09      	cmp	r2, #9
 801a7f8:	d903      	bls.n	801a802 <_svfiprintf_r+0x1a6>
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d0c6      	beq.n	801a78c <_svfiprintf_r+0x130>
 801a7fe:	9105      	str	r1, [sp, #20]
 801a800:	e7c4      	b.n	801a78c <_svfiprintf_r+0x130>
 801a802:	fb0c 2101 	mla	r1, ip, r1, r2
 801a806:	4604      	mov	r4, r0
 801a808:	2301      	movs	r3, #1
 801a80a:	e7f0      	b.n	801a7ee <_svfiprintf_r+0x192>
 801a80c:	ab03      	add	r3, sp, #12
 801a80e:	9300      	str	r3, [sp, #0]
 801a810:	462a      	mov	r2, r5
 801a812:	4b0e      	ldr	r3, [pc, #56]	@ (801a84c <_svfiprintf_r+0x1f0>)
 801a814:	a904      	add	r1, sp, #16
 801a816:	4638      	mov	r0, r7
 801a818:	f7fd ffae 	bl	8018778 <_printf_float>
 801a81c:	1c42      	adds	r2, r0, #1
 801a81e:	4606      	mov	r6, r0
 801a820:	d1d6      	bne.n	801a7d0 <_svfiprintf_r+0x174>
 801a822:	89ab      	ldrh	r3, [r5, #12]
 801a824:	065b      	lsls	r3, r3, #25
 801a826:	f53f af2d 	bmi.w	801a684 <_svfiprintf_r+0x28>
 801a82a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a82c:	e72c      	b.n	801a688 <_svfiprintf_r+0x2c>
 801a82e:	ab03      	add	r3, sp, #12
 801a830:	9300      	str	r3, [sp, #0]
 801a832:	462a      	mov	r2, r5
 801a834:	4b05      	ldr	r3, [pc, #20]	@ (801a84c <_svfiprintf_r+0x1f0>)
 801a836:	a904      	add	r1, sp, #16
 801a838:	4638      	mov	r0, r7
 801a83a:	f7fe fa25 	bl	8018c88 <_printf_i>
 801a83e:	e7ed      	b.n	801a81c <_svfiprintf_r+0x1c0>
 801a840:	0801b6d6 	.word	0x0801b6d6
 801a844:	0801b6e0 	.word	0x0801b6e0
 801a848:	08018779 	.word	0x08018779
 801a84c:	0801a5a5 	.word	0x0801a5a5
 801a850:	0801b6dc 	.word	0x0801b6dc

0801a854 <__sflush_r>:
 801a854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a85c:	0716      	lsls	r6, r2, #28
 801a85e:	4605      	mov	r5, r0
 801a860:	460c      	mov	r4, r1
 801a862:	d454      	bmi.n	801a90e <__sflush_r+0xba>
 801a864:	684b      	ldr	r3, [r1, #4]
 801a866:	2b00      	cmp	r3, #0
 801a868:	dc02      	bgt.n	801a870 <__sflush_r+0x1c>
 801a86a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	dd48      	ble.n	801a902 <__sflush_r+0xae>
 801a870:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a872:	2e00      	cmp	r6, #0
 801a874:	d045      	beq.n	801a902 <__sflush_r+0xae>
 801a876:	2300      	movs	r3, #0
 801a878:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a87c:	682f      	ldr	r7, [r5, #0]
 801a87e:	6a21      	ldr	r1, [r4, #32]
 801a880:	602b      	str	r3, [r5, #0]
 801a882:	d030      	beq.n	801a8e6 <__sflush_r+0x92>
 801a884:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a886:	89a3      	ldrh	r3, [r4, #12]
 801a888:	0759      	lsls	r1, r3, #29
 801a88a:	d505      	bpl.n	801a898 <__sflush_r+0x44>
 801a88c:	6863      	ldr	r3, [r4, #4]
 801a88e:	1ad2      	subs	r2, r2, r3
 801a890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a892:	b10b      	cbz	r3, 801a898 <__sflush_r+0x44>
 801a894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a896:	1ad2      	subs	r2, r2, r3
 801a898:	2300      	movs	r3, #0
 801a89a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a89c:	6a21      	ldr	r1, [r4, #32]
 801a89e:	4628      	mov	r0, r5
 801a8a0:	47b0      	blx	r6
 801a8a2:	1c43      	adds	r3, r0, #1
 801a8a4:	89a3      	ldrh	r3, [r4, #12]
 801a8a6:	d106      	bne.n	801a8b6 <__sflush_r+0x62>
 801a8a8:	6829      	ldr	r1, [r5, #0]
 801a8aa:	291d      	cmp	r1, #29
 801a8ac:	d82b      	bhi.n	801a906 <__sflush_r+0xb2>
 801a8ae:	4a2a      	ldr	r2, [pc, #168]	@ (801a958 <__sflush_r+0x104>)
 801a8b0:	40ca      	lsrs	r2, r1
 801a8b2:	07d6      	lsls	r6, r2, #31
 801a8b4:	d527      	bpl.n	801a906 <__sflush_r+0xb2>
 801a8b6:	2200      	movs	r2, #0
 801a8b8:	6062      	str	r2, [r4, #4]
 801a8ba:	04d9      	lsls	r1, r3, #19
 801a8bc:	6922      	ldr	r2, [r4, #16]
 801a8be:	6022      	str	r2, [r4, #0]
 801a8c0:	d504      	bpl.n	801a8cc <__sflush_r+0x78>
 801a8c2:	1c42      	adds	r2, r0, #1
 801a8c4:	d101      	bne.n	801a8ca <__sflush_r+0x76>
 801a8c6:	682b      	ldr	r3, [r5, #0]
 801a8c8:	b903      	cbnz	r3, 801a8cc <__sflush_r+0x78>
 801a8ca:	6560      	str	r0, [r4, #84]	@ 0x54
 801a8cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a8ce:	602f      	str	r7, [r5, #0]
 801a8d0:	b1b9      	cbz	r1, 801a902 <__sflush_r+0xae>
 801a8d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a8d6:	4299      	cmp	r1, r3
 801a8d8:	d002      	beq.n	801a8e0 <__sflush_r+0x8c>
 801a8da:	4628      	mov	r0, r5
 801a8dc:	f7ff fa9e 	bl	8019e1c <_free_r>
 801a8e0:	2300      	movs	r3, #0
 801a8e2:	6363      	str	r3, [r4, #52]	@ 0x34
 801a8e4:	e00d      	b.n	801a902 <__sflush_r+0xae>
 801a8e6:	2301      	movs	r3, #1
 801a8e8:	4628      	mov	r0, r5
 801a8ea:	47b0      	blx	r6
 801a8ec:	4602      	mov	r2, r0
 801a8ee:	1c50      	adds	r0, r2, #1
 801a8f0:	d1c9      	bne.n	801a886 <__sflush_r+0x32>
 801a8f2:	682b      	ldr	r3, [r5, #0]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d0c6      	beq.n	801a886 <__sflush_r+0x32>
 801a8f8:	2b1d      	cmp	r3, #29
 801a8fa:	d001      	beq.n	801a900 <__sflush_r+0xac>
 801a8fc:	2b16      	cmp	r3, #22
 801a8fe:	d11e      	bne.n	801a93e <__sflush_r+0xea>
 801a900:	602f      	str	r7, [r5, #0]
 801a902:	2000      	movs	r0, #0
 801a904:	e022      	b.n	801a94c <__sflush_r+0xf8>
 801a906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a90a:	b21b      	sxth	r3, r3
 801a90c:	e01b      	b.n	801a946 <__sflush_r+0xf2>
 801a90e:	690f      	ldr	r7, [r1, #16]
 801a910:	2f00      	cmp	r7, #0
 801a912:	d0f6      	beq.n	801a902 <__sflush_r+0xae>
 801a914:	0793      	lsls	r3, r2, #30
 801a916:	680e      	ldr	r6, [r1, #0]
 801a918:	bf08      	it	eq
 801a91a:	694b      	ldreq	r3, [r1, #20]
 801a91c:	600f      	str	r7, [r1, #0]
 801a91e:	bf18      	it	ne
 801a920:	2300      	movne	r3, #0
 801a922:	eba6 0807 	sub.w	r8, r6, r7
 801a926:	608b      	str	r3, [r1, #8]
 801a928:	f1b8 0f00 	cmp.w	r8, #0
 801a92c:	dde9      	ble.n	801a902 <__sflush_r+0xae>
 801a92e:	6a21      	ldr	r1, [r4, #32]
 801a930:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a932:	4643      	mov	r3, r8
 801a934:	463a      	mov	r2, r7
 801a936:	4628      	mov	r0, r5
 801a938:	47b0      	blx	r6
 801a93a:	2800      	cmp	r0, #0
 801a93c:	dc08      	bgt.n	801a950 <__sflush_r+0xfc>
 801a93e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a946:	81a3      	strh	r3, [r4, #12]
 801a948:	f04f 30ff 	mov.w	r0, #4294967295
 801a94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a950:	4407      	add	r7, r0
 801a952:	eba8 0800 	sub.w	r8, r8, r0
 801a956:	e7e7      	b.n	801a928 <__sflush_r+0xd4>
 801a958:	20400001 	.word	0x20400001

0801a95c <_fflush_r>:
 801a95c:	b538      	push	{r3, r4, r5, lr}
 801a95e:	690b      	ldr	r3, [r1, #16]
 801a960:	4605      	mov	r5, r0
 801a962:	460c      	mov	r4, r1
 801a964:	b913      	cbnz	r3, 801a96c <_fflush_r+0x10>
 801a966:	2500      	movs	r5, #0
 801a968:	4628      	mov	r0, r5
 801a96a:	bd38      	pop	{r3, r4, r5, pc}
 801a96c:	b118      	cbz	r0, 801a976 <_fflush_r+0x1a>
 801a96e:	6a03      	ldr	r3, [r0, #32]
 801a970:	b90b      	cbnz	r3, 801a976 <_fflush_r+0x1a>
 801a972:	f7fe fb33 	bl	8018fdc <__sinit>
 801a976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d0f3      	beq.n	801a966 <_fflush_r+0xa>
 801a97e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a980:	07d0      	lsls	r0, r2, #31
 801a982:	d404      	bmi.n	801a98e <_fflush_r+0x32>
 801a984:	0599      	lsls	r1, r3, #22
 801a986:	d402      	bmi.n	801a98e <_fflush_r+0x32>
 801a988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a98a:	f7fe fc50 	bl	801922e <__retarget_lock_acquire_recursive>
 801a98e:	4628      	mov	r0, r5
 801a990:	4621      	mov	r1, r4
 801a992:	f7ff ff5f 	bl	801a854 <__sflush_r>
 801a996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a998:	07da      	lsls	r2, r3, #31
 801a99a:	4605      	mov	r5, r0
 801a99c:	d4e4      	bmi.n	801a968 <_fflush_r+0xc>
 801a99e:	89a3      	ldrh	r3, [r4, #12]
 801a9a0:	059b      	lsls	r3, r3, #22
 801a9a2:	d4e1      	bmi.n	801a968 <_fflush_r+0xc>
 801a9a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a9a6:	f7fe fc43 	bl	8019230 <__retarget_lock_release_recursive>
 801a9aa:	e7dd      	b.n	801a968 <_fflush_r+0xc>

0801a9ac <memmove>:
 801a9ac:	4288      	cmp	r0, r1
 801a9ae:	b510      	push	{r4, lr}
 801a9b0:	eb01 0402 	add.w	r4, r1, r2
 801a9b4:	d902      	bls.n	801a9bc <memmove+0x10>
 801a9b6:	4284      	cmp	r4, r0
 801a9b8:	4623      	mov	r3, r4
 801a9ba:	d807      	bhi.n	801a9cc <memmove+0x20>
 801a9bc:	1e43      	subs	r3, r0, #1
 801a9be:	42a1      	cmp	r1, r4
 801a9c0:	d008      	beq.n	801a9d4 <memmove+0x28>
 801a9c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a9c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a9ca:	e7f8      	b.n	801a9be <memmove+0x12>
 801a9cc:	4402      	add	r2, r0
 801a9ce:	4601      	mov	r1, r0
 801a9d0:	428a      	cmp	r2, r1
 801a9d2:	d100      	bne.n	801a9d6 <memmove+0x2a>
 801a9d4:	bd10      	pop	{r4, pc}
 801a9d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a9da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a9de:	e7f7      	b.n	801a9d0 <memmove+0x24>

0801a9e0 <__assert_func>:
 801a9e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a9e2:	4614      	mov	r4, r2
 801a9e4:	461a      	mov	r2, r3
 801a9e6:	4b09      	ldr	r3, [pc, #36]	@ (801aa0c <__assert_func+0x2c>)
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	4605      	mov	r5, r0
 801a9ec:	68d8      	ldr	r0, [r3, #12]
 801a9ee:	b14c      	cbz	r4, 801aa04 <__assert_func+0x24>
 801a9f0:	4b07      	ldr	r3, [pc, #28]	@ (801aa10 <__assert_func+0x30>)
 801a9f2:	9100      	str	r1, [sp, #0]
 801a9f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a9f8:	4906      	ldr	r1, [pc, #24]	@ (801aa14 <__assert_func+0x34>)
 801a9fa:	462b      	mov	r3, r5
 801a9fc:	f000 f870 	bl	801aae0 <fiprintf>
 801aa00:	f000 f880 	bl	801ab04 <abort>
 801aa04:	4b04      	ldr	r3, [pc, #16]	@ (801aa18 <__assert_func+0x38>)
 801aa06:	461c      	mov	r4, r3
 801aa08:	e7f3      	b.n	801a9f2 <__assert_func+0x12>
 801aa0a:	bf00      	nop
 801aa0c:	24000128 	.word	0x24000128
 801aa10:	0801b6f1 	.word	0x0801b6f1
 801aa14:	0801b6fe 	.word	0x0801b6fe
 801aa18:	0801b72c 	.word	0x0801b72c

0801aa1c <_calloc_r>:
 801aa1c:	b570      	push	{r4, r5, r6, lr}
 801aa1e:	fba1 5402 	umull	r5, r4, r1, r2
 801aa22:	b934      	cbnz	r4, 801aa32 <_calloc_r+0x16>
 801aa24:	4629      	mov	r1, r5
 801aa26:	f7fd fd8d 	bl	8018544 <_malloc_r>
 801aa2a:	4606      	mov	r6, r0
 801aa2c:	b928      	cbnz	r0, 801aa3a <_calloc_r+0x1e>
 801aa2e:	4630      	mov	r0, r6
 801aa30:	bd70      	pop	{r4, r5, r6, pc}
 801aa32:	220c      	movs	r2, #12
 801aa34:	6002      	str	r2, [r0, #0]
 801aa36:	2600      	movs	r6, #0
 801aa38:	e7f9      	b.n	801aa2e <_calloc_r+0x12>
 801aa3a:	462a      	mov	r2, r5
 801aa3c:	4621      	mov	r1, r4
 801aa3e:	f7fe fb68 	bl	8019112 <memset>
 801aa42:	e7f4      	b.n	801aa2e <_calloc_r+0x12>

0801aa44 <__ascii_mbtowc>:
 801aa44:	b082      	sub	sp, #8
 801aa46:	b901      	cbnz	r1, 801aa4a <__ascii_mbtowc+0x6>
 801aa48:	a901      	add	r1, sp, #4
 801aa4a:	b142      	cbz	r2, 801aa5e <__ascii_mbtowc+0x1a>
 801aa4c:	b14b      	cbz	r3, 801aa62 <__ascii_mbtowc+0x1e>
 801aa4e:	7813      	ldrb	r3, [r2, #0]
 801aa50:	600b      	str	r3, [r1, #0]
 801aa52:	7812      	ldrb	r2, [r2, #0]
 801aa54:	1e10      	subs	r0, r2, #0
 801aa56:	bf18      	it	ne
 801aa58:	2001      	movne	r0, #1
 801aa5a:	b002      	add	sp, #8
 801aa5c:	4770      	bx	lr
 801aa5e:	4610      	mov	r0, r2
 801aa60:	e7fb      	b.n	801aa5a <__ascii_mbtowc+0x16>
 801aa62:	f06f 0001 	mvn.w	r0, #1
 801aa66:	e7f8      	b.n	801aa5a <__ascii_mbtowc+0x16>

0801aa68 <_realloc_r>:
 801aa68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa6c:	4607      	mov	r7, r0
 801aa6e:	4614      	mov	r4, r2
 801aa70:	460d      	mov	r5, r1
 801aa72:	b921      	cbnz	r1, 801aa7e <_realloc_r+0x16>
 801aa74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa78:	4611      	mov	r1, r2
 801aa7a:	f7fd bd63 	b.w	8018544 <_malloc_r>
 801aa7e:	b92a      	cbnz	r2, 801aa8c <_realloc_r+0x24>
 801aa80:	f7ff f9cc 	bl	8019e1c <_free_r>
 801aa84:	4625      	mov	r5, r4
 801aa86:	4628      	mov	r0, r5
 801aa88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa8c:	f000 f841 	bl	801ab12 <_malloc_usable_size_r>
 801aa90:	4284      	cmp	r4, r0
 801aa92:	4606      	mov	r6, r0
 801aa94:	d802      	bhi.n	801aa9c <_realloc_r+0x34>
 801aa96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801aa9a:	d8f4      	bhi.n	801aa86 <_realloc_r+0x1e>
 801aa9c:	4621      	mov	r1, r4
 801aa9e:	4638      	mov	r0, r7
 801aaa0:	f7fd fd50 	bl	8018544 <_malloc_r>
 801aaa4:	4680      	mov	r8, r0
 801aaa6:	b908      	cbnz	r0, 801aaac <_realloc_r+0x44>
 801aaa8:	4645      	mov	r5, r8
 801aaaa:	e7ec      	b.n	801aa86 <_realloc_r+0x1e>
 801aaac:	42b4      	cmp	r4, r6
 801aaae:	4622      	mov	r2, r4
 801aab0:	4629      	mov	r1, r5
 801aab2:	bf28      	it	cs
 801aab4:	4632      	movcs	r2, r6
 801aab6:	f7fe fbbc 	bl	8019232 <memcpy>
 801aaba:	4629      	mov	r1, r5
 801aabc:	4638      	mov	r0, r7
 801aabe:	f7ff f9ad 	bl	8019e1c <_free_r>
 801aac2:	e7f1      	b.n	801aaa8 <_realloc_r+0x40>

0801aac4 <__ascii_wctomb>:
 801aac4:	4603      	mov	r3, r0
 801aac6:	4608      	mov	r0, r1
 801aac8:	b141      	cbz	r1, 801aadc <__ascii_wctomb+0x18>
 801aaca:	2aff      	cmp	r2, #255	@ 0xff
 801aacc:	d904      	bls.n	801aad8 <__ascii_wctomb+0x14>
 801aace:	228a      	movs	r2, #138	@ 0x8a
 801aad0:	601a      	str	r2, [r3, #0]
 801aad2:	f04f 30ff 	mov.w	r0, #4294967295
 801aad6:	4770      	bx	lr
 801aad8:	700a      	strb	r2, [r1, #0]
 801aada:	2001      	movs	r0, #1
 801aadc:	4770      	bx	lr
	...

0801aae0 <fiprintf>:
 801aae0:	b40e      	push	{r1, r2, r3}
 801aae2:	b503      	push	{r0, r1, lr}
 801aae4:	4601      	mov	r1, r0
 801aae6:	ab03      	add	r3, sp, #12
 801aae8:	4805      	ldr	r0, [pc, #20]	@ (801ab00 <fiprintf+0x20>)
 801aaea:	f853 2b04 	ldr.w	r2, [r3], #4
 801aaee:	6800      	ldr	r0, [r0, #0]
 801aaf0:	9301      	str	r3, [sp, #4]
 801aaf2:	f000 f83f 	bl	801ab74 <_vfiprintf_r>
 801aaf6:	b002      	add	sp, #8
 801aaf8:	f85d eb04 	ldr.w	lr, [sp], #4
 801aafc:	b003      	add	sp, #12
 801aafe:	4770      	bx	lr
 801ab00:	24000128 	.word	0x24000128

0801ab04 <abort>:
 801ab04:	b508      	push	{r3, lr}
 801ab06:	2006      	movs	r0, #6
 801ab08:	f000 fa08 	bl	801af1c <raise>
 801ab0c:	2001      	movs	r0, #1
 801ab0e:	f7e8 f981 	bl	8002e14 <_exit>

0801ab12 <_malloc_usable_size_r>:
 801ab12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ab16:	1f18      	subs	r0, r3, #4
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	bfbc      	itt	lt
 801ab1c:	580b      	ldrlt	r3, [r1, r0]
 801ab1e:	18c0      	addlt	r0, r0, r3
 801ab20:	4770      	bx	lr

0801ab22 <__sfputc_r>:
 801ab22:	6893      	ldr	r3, [r2, #8]
 801ab24:	3b01      	subs	r3, #1
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	b410      	push	{r4}
 801ab2a:	6093      	str	r3, [r2, #8]
 801ab2c:	da08      	bge.n	801ab40 <__sfputc_r+0x1e>
 801ab2e:	6994      	ldr	r4, [r2, #24]
 801ab30:	42a3      	cmp	r3, r4
 801ab32:	db01      	blt.n	801ab38 <__sfputc_r+0x16>
 801ab34:	290a      	cmp	r1, #10
 801ab36:	d103      	bne.n	801ab40 <__sfputc_r+0x1e>
 801ab38:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab3c:	f000 b932 	b.w	801ada4 <__swbuf_r>
 801ab40:	6813      	ldr	r3, [r2, #0]
 801ab42:	1c58      	adds	r0, r3, #1
 801ab44:	6010      	str	r0, [r2, #0]
 801ab46:	7019      	strb	r1, [r3, #0]
 801ab48:	4608      	mov	r0, r1
 801ab4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab4e:	4770      	bx	lr

0801ab50 <__sfputs_r>:
 801ab50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab52:	4606      	mov	r6, r0
 801ab54:	460f      	mov	r7, r1
 801ab56:	4614      	mov	r4, r2
 801ab58:	18d5      	adds	r5, r2, r3
 801ab5a:	42ac      	cmp	r4, r5
 801ab5c:	d101      	bne.n	801ab62 <__sfputs_r+0x12>
 801ab5e:	2000      	movs	r0, #0
 801ab60:	e007      	b.n	801ab72 <__sfputs_r+0x22>
 801ab62:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab66:	463a      	mov	r2, r7
 801ab68:	4630      	mov	r0, r6
 801ab6a:	f7ff ffda 	bl	801ab22 <__sfputc_r>
 801ab6e:	1c43      	adds	r3, r0, #1
 801ab70:	d1f3      	bne.n	801ab5a <__sfputs_r+0xa>
 801ab72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ab74 <_vfiprintf_r>:
 801ab74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab78:	460d      	mov	r5, r1
 801ab7a:	b09d      	sub	sp, #116	@ 0x74
 801ab7c:	4614      	mov	r4, r2
 801ab7e:	4698      	mov	r8, r3
 801ab80:	4606      	mov	r6, r0
 801ab82:	b118      	cbz	r0, 801ab8c <_vfiprintf_r+0x18>
 801ab84:	6a03      	ldr	r3, [r0, #32]
 801ab86:	b90b      	cbnz	r3, 801ab8c <_vfiprintf_r+0x18>
 801ab88:	f7fe fa28 	bl	8018fdc <__sinit>
 801ab8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ab8e:	07d9      	lsls	r1, r3, #31
 801ab90:	d405      	bmi.n	801ab9e <_vfiprintf_r+0x2a>
 801ab92:	89ab      	ldrh	r3, [r5, #12]
 801ab94:	059a      	lsls	r2, r3, #22
 801ab96:	d402      	bmi.n	801ab9e <_vfiprintf_r+0x2a>
 801ab98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ab9a:	f7fe fb48 	bl	801922e <__retarget_lock_acquire_recursive>
 801ab9e:	89ab      	ldrh	r3, [r5, #12]
 801aba0:	071b      	lsls	r3, r3, #28
 801aba2:	d501      	bpl.n	801aba8 <_vfiprintf_r+0x34>
 801aba4:	692b      	ldr	r3, [r5, #16]
 801aba6:	b99b      	cbnz	r3, 801abd0 <_vfiprintf_r+0x5c>
 801aba8:	4629      	mov	r1, r5
 801abaa:	4630      	mov	r0, r6
 801abac:	f000 f938 	bl	801ae20 <__swsetup_r>
 801abb0:	b170      	cbz	r0, 801abd0 <_vfiprintf_r+0x5c>
 801abb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801abb4:	07dc      	lsls	r4, r3, #31
 801abb6:	d504      	bpl.n	801abc2 <_vfiprintf_r+0x4e>
 801abb8:	f04f 30ff 	mov.w	r0, #4294967295
 801abbc:	b01d      	add	sp, #116	@ 0x74
 801abbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abc2:	89ab      	ldrh	r3, [r5, #12]
 801abc4:	0598      	lsls	r0, r3, #22
 801abc6:	d4f7      	bmi.n	801abb8 <_vfiprintf_r+0x44>
 801abc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801abca:	f7fe fb31 	bl	8019230 <__retarget_lock_release_recursive>
 801abce:	e7f3      	b.n	801abb8 <_vfiprintf_r+0x44>
 801abd0:	2300      	movs	r3, #0
 801abd2:	9309      	str	r3, [sp, #36]	@ 0x24
 801abd4:	2320      	movs	r3, #32
 801abd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801abda:	f8cd 800c 	str.w	r8, [sp, #12]
 801abde:	2330      	movs	r3, #48	@ 0x30
 801abe0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ad90 <_vfiprintf_r+0x21c>
 801abe4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801abe8:	f04f 0901 	mov.w	r9, #1
 801abec:	4623      	mov	r3, r4
 801abee:	469a      	mov	sl, r3
 801abf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801abf4:	b10a      	cbz	r2, 801abfa <_vfiprintf_r+0x86>
 801abf6:	2a25      	cmp	r2, #37	@ 0x25
 801abf8:	d1f9      	bne.n	801abee <_vfiprintf_r+0x7a>
 801abfa:	ebba 0b04 	subs.w	fp, sl, r4
 801abfe:	d00b      	beq.n	801ac18 <_vfiprintf_r+0xa4>
 801ac00:	465b      	mov	r3, fp
 801ac02:	4622      	mov	r2, r4
 801ac04:	4629      	mov	r1, r5
 801ac06:	4630      	mov	r0, r6
 801ac08:	f7ff ffa2 	bl	801ab50 <__sfputs_r>
 801ac0c:	3001      	adds	r0, #1
 801ac0e:	f000 80a7 	beq.w	801ad60 <_vfiprintf_r+0x1ec>
 801ac12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ac14:	445a      	add	r2, fp
 801ac16:	9209      	str	r2, [sp, #36]	@ 0x24
 801ac18:	f89a 3000 	ldrb.w	r3, [sl]
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	f000 809f 	beq.w	801ad60 <_vfiprintf_r+0x1ec>
 801ac22:	2300      	movs	r3, #0
 801ac24:	f04f 32ff 	mov.w	r2, #4294967295
 801ac28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac2c:	f10a 0a01 	add.w	sl, sl, #1
 801ac30:	9304      	str	r3, [sp, #16]
 801ac32:	9307      	str	r3, [sp, #28]
 801ac34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ac38:	931a      	str	r3, [sp, #104]	@ 0x68
 801ac3a:	4654      	mov	r4, sl
 801ac3c:	2205      	movs	r2, #5
 801ac3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac42:	4853      	ldr	r0, [pc, #332]	@ (801ad90 <_vfiprintf_r+0x21c>)
 801ac44:	f7e5 fb4c 	bl	80002e0 <memchr>
 801ac48:	9a04      	ldr	r2, [sp, #16]
 801ac4a:	b9d8      	cbnz	r0, 801ac84 <_vfiprintf_r+0x110>
 801ac4c:	06d1      	lsls	r1, r2, #27
 801ac4e:	bf44      	itt	mi
 801ac50:	2320      	movmi	r3, #32
 801ac52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac56:	0713      	lsls	r3, r2, #28
 801ac58:	bf44      	itt	mi
 801ac5a:	232b      	movmi	r3, #43	@ 0x2b
 801ac5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac60:	f89a 3000 	ldrb.w	r3, [sl]
 801ac64:	2b2a      	cmp	r3, #42	@ 0x2a
 801ac66:	d015      	beq.n	801ac94 <_vfiprintf_r+0x120>
 801ac68:	9a07      	ldr	r2, [sp, #28]
 801ac6a:	4654      	mov	r4, sl
 801ac6c:	2000      	movs	r0, #0
 801ac6e:	f04f 0c0a 	mov.w	ip, #10
 801ac72:	4621      	mov	r1, r4
 801ac74:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac78:	3b30      	subs	r3, #48	@ 0x30
 801ac7a:	2b09      	cmp	r3, #9
 801ac7c:	d94b      	bls.n	801ad16 <_vfiprintf_r+0x1a2>
 801ac7e:	b1b0      	cbz	r0, 801acae <_vfiprintf_r+0x13a>
 801ac80:	9207      	str	r2, [sp, #28]
 801ac82:	e014      	b.n	801acae <_vfiprintf_r+0x13a>
 801ac84:	eba0 0308 	sub.w	r3, r0, r8
 801ac88:	fa09 f303 	lsl.w	r3, r9, r3
 801ac8c:	4313      	orrs	r3, r2
 801ac8e:	9304      	str	r3, [sp, #16]
 801ac90:	46a2      	mov	sl, r4
 801ac92:	e7d2      	b.n	801ac3a <_vfiprintf_r+0xc6>
 801ac94:	9b03      	ldr	r3, [sp, #12]
 801ac96:	1d19      	adds	r1, r3, #4
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	9103      	str	r1, [sp, #12]
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	bfbb      	ittet	lt
 801aca0:	425b      	neglt	r3, r3
 801aca2:	f042 0202 	orrlt.w	r2, r2, #2
 801aca6:	9307      	strge	r3, [sp, #28]
 801aca8:	9307      	strlt	r3, [sp, #28]
 801acaa:	bfb8      	it	lt
 801acac:	9204      	strlt	r2, [sp, #16]
 801acae:	7823      	ldrb	r3, [r4, #0]
 801acb0:	2b2e      	cmp	r3, #46	@ 0x2e
 801acb2:	d10a      	bne.n	801acca <_vfiprintf_r+0x156>
 801acb4:	7863      	ldrb	r3, [r4, #1]
 801acb6:	2b2a      	cmp	r3, #42	@ 0x2a
 801acb8:	d132      	bne.n	801ad20 <_vfiprintf_r+0x1ac>
 801acba:	9b03      	ldr	r3, [sp, #12]
 801acbc:	1d1a      	adds	r2, r3, #4
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	9203      	str	r2, [sp, #12]
 801acc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801acc6:	3402      	adds	r4, #2
 801acc8:	9305      	str	r3, [sp, #20]
 801acca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ada0 <_vfiprintf_r+0x22c>
 801acce:	7821      	ldrb	r1, [r4, #0]
 801acd0:	2203      	movs	r2, #3
 801acd2:	4650      	mov	r0, sl
 801acd4:	f7e5 fb04 	bl	80002e0 <memchr>
 801acd8:	b138      	cbz	r0, 801acea <_vfiprintf_r+0x176>
 801acda:	9b04      	ldr	r3, [sp, #16]
 801acdc:	eba0 000a 	sub.w	r0, r0, sl
 801ace0:	2240      	movs	r2, #64	@ 0x40
 801ace2:	4082      	lsls	r2, r0
 801ace4:	4313      	orrs	r3, r2
 801ace6:	3401      	adds	r4, #1
 801ace8:	9304      	str	r3, [sp, #16]
 801acea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acee:	4829      	ldr	r0, [pc, #164]	@ (801ad94 <_vfiprintf_r+0x220>)
 801acf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801acf4:	2206      	movs	r2, #6
 801acf6:	f7e5 faf3 	bl	80002e0 <memchr>
 801acfa:	2800      	cmp	r0, #0
 801acfc:	d03f      	beq.n	801ad7e <_vfiprintf_r+0x20a>
 801acfe:	4b26      	ldr	r3, [pc, #152]	@ (801ad98 <_vfiprintf_r+0x224>)
 801ad00:	bb1b      	cbnz	r3, 801ad4a <_vfiprintf_r+0x1d6>
 801ad02:	9b03      	ldr	r3, [sp, #12]
 801ad04:	3307      	adds	r3, #7
 801ad06:	f023 0307 	bic.w	r3, r3, #7
 801ad0a:	3308      	adds	r3, #8
 801ad0c:	9303      	str	r3, [sp, #12]
 801ad0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad10:	443b      	add	r3, r7
 801ad12:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad14:	e76a      	b.n	801abec <_vfiprintf_r+0x78>
 801ad16:	fb0c 3202 	mla	r2, ip, r2, r3
 801ad1a:	460c      	mov	r4, r1
 801ad1c:	2001      	movs	r0, #1
 801ad1e:	e7a8      	b.n	801ac72 <_vfiprintf_r+0xfe>
 801ad20:	2300      	movs	r3, #0
 801ad22:	3401      	adds	r4, #1
 801ad24:	9305      	str	r3, [sp, #20]
 801ad26:	4619      	mov	r1, r3
 801ad28:	f04f 0c0a 	mov.w	ip, #10
 801ad2c:	4620      	mov	r0, r4
 801ad2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad32:	3a30      	subs	r2, #48	@ 0x30
 801ad34:	2a09      	cmp	r2, #9
 801ad36:	d903      	bls.n	801ad40 <_vfiprintf_r+0x1cc>
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d0c6      	beq.n	801acca <_vfiprintf_r+0x156>
 801ad3c:	9105      	str	r1, [sp, #20]
 801ad3e:	e7c4      	b.n	801acca <_vfiprintf_r+0x156>
 801ad40:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad44:	4604      	mov	r4, r0
 801ad46:	2301      	movs	r3, #1
 801ad48:	e7f0      	b.n	801ad2c <_vfiprintf_r+0x1b8>
 801ad4a:	ab03      	add	r3, sp, #12
 801ad4c:	9300      	str	r3, [sp, #0]
 801ad4e:	462a      	mov	r2, r5
 801ad50:	4b12      	ldr	r3, [pc, #72]	@ (801ad9c <_vfiprintf_r+0x228>)
 801ad52:	a904      	add	r1, sp, #16
 801ad54:	4630      	mov	r0, r6
 801ad56:	f7fd fd0f 	bl	8018778 <_printf_float>
 801ad5a:	4607      	mov	r7, r0
 801ad5c:	1c78      	adds	r0, r7, #1
 801ad5e:	d1d6      	bne.n	801ad0e <_vfiprintf_r+0x19a>
 801ad60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ad62:	07d9      	lsls	r1, r3, #31
 801ad64:	d405      	bmi.n	801ad72 <_vfiprintf_r+0x1fe>
 801ad66:	89ab      	ldrh	r3, [r5, #12]
 801ad68:	059a      	lsls	r2, r3, #22
 801ad6a:	d402      	bmi.n	801ad72 <_vfiprintf_r+0x1fe>
 801ad6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ad6e:	f7fe fa5f 	bl	8019230 <__retarget_lock_release_recursive>
 801ad72:	89ab      	ldrh	r3, [r5, #12]
 801ad74:	065b      	lsls	r3, r3, #25
 801ad76:	f53f af1f 	bmi.w	801abb8 <_vfiprintf_r+0x44>
 801ad7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ad7c:	e71e      	b.n	801abbc <_vfiprintf_r+0x48>
 801ad7e:	ab03      	add	r3, sp, #12
 801ad80:	9300      	str	r3, [sp, #0]
 801ad82:	462a      	mov	r2, r5
 801ad84:	4b05      	ldr	r3, [pc, #20]	@ (801ad9c <_vfiprintf_r+0x228>)
 801ad86:	a904      	add	r1, sp, #16
 801ad88:	4630      	mov	r0, r6
 801ad8a:	f7fd ff7d 	bl	8018c88 <_printf_i>
 801ad8e:	e7e4      	b.n	801ad5a <_vfiprintf_r+0x1e6>
 801ad90:	0801b6d6 	.word	0x0801b6d6
 801ad94:	0801b6e0 	.word	0x0801b6e0
 801ad98:	08018779 	.word	0x08018779
 801ad9c:	0801ab51 	.word	0x0801ab51
 801ada0:	0801b6dc 	.word	0x0801b6dc

0801ada4 <__swbuf_r>:
 801ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ada6:	460e      	mov	r6, r1
 801ada8:	4614      	mov	r4, r2
 801adaa:	4605      	mov	r5, r0
 801adac:	b118      	cbz	r0, 801adb6 <__swbuf_r+0x12>
 801adae:	6a03      	ldr	r3, [r0, #32]
 801adb0:	b90b      	cbnz	r3, 801adb6 <__swbuf_r+0x12>
 801adb2:	f7fe f913 	bl	8018fdc <__sinit>
 801adb6:	69a3      	ldr	r3, [r4, #24]
 801adb8:	60a3      	str	r3, [r4, #8]
 801adba:	89a3      	ldrh	r3, [r4, #12]
 801adbc:	071a      	lsls	r2, r3, #28
 801adbe:	d501      	bpl.n	801adc4 <__swbuf_r+0x20>
 801adc0:	6923      	ldr	r3, [r4, #16]
 801adc2:	b943      	cbnz	r3, 801add6 <__swbuf_r+0x32>
 801adc4:	4621      	mov	r1, r4
 801adc6:	4628      	mov	r0, r5
 801adc8:	f000 f82a 	bl	801ae20 <__swsetup_r>
 801adcc:	b118      	cbz	r0, 801add6 <__swbuf_r+0x32>
 801adce:	f04f 37ff 	mov.w	r7, #4294967295
 801add2:	4638      	mov	r0, r7
 801add4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801add6:	6823      	ldr	r3, [r4, #0]
 801add8:	6922      	ldr	r2, [r4, #16]
 801adda:	1a98      	subs	r0, r3, r2
 801addc:	6963      	ldr	r3, [r4, #20]
 801adde:	b2f6      	uxtb	r6, r6
 801ade0:	4283      	cmp	r3, r0
 801ade2:	4637      	mov	r7, r6
 801ade4:	dc05      	bgt.n	801adf2 <__swbuf_r+0x4e>
 801ade6:	4621      	mov	r1, r4
 801ade8:	4628      	mov	r0, r5
 801adea:	f7ff fdb7 	bl	801a95c <_fflush_r>
 801adee:	2800      	cmp	r0, #0
 801adf0:	d1ed      	bne.n	801adce <__swbuf_r+0x2a>
 801adf2:	68a3      	ldr	r3, [r4, #8]
 801adf4:	3b01      	subs	r3, #1
 801adf6:	60a3      	str	r3, [r4, #8]
 801adf8:	6823      	ldr	r3, [r4, #0]
 801adfa:	1c5a      	adds	r2, r3, #1
 801adfc:	6022      	str	r2, [r4, #0]
 801adfe:	701e      	strb	r6, [r3, #0]
 801ae00:	6962      	ldr	r2, [r4, #20]
 801ae02:	1c43      	adds	r3, r0, #1
 801ae04:	429a      	cmp	r2, r3
 801ae06:	d004      	beq.n	801ae12 <__swbuf_r+0x6e>
 801ae08:	89a3      	ldrh	r3, [r4, #12]
 801ae0a:	07db      	lsls	r3, r3, #31
 801ae0c:	d5e1      	bpl.n	801add2 <__swbuf_r+0x2e>
 801ae0e:	2e0a      	cmp	r6, #10
 801ae10:	d1df      	bne.n	801add2 <__swbuf_r+0x2e>
 801ae12:	4621      	mov	r1, r4
 801ae14:	4628      	mov	r0, r5
 801ae16:	f7ff fda1 	bl	801a95c <_fflush_r>
 801ae1a:	2800      	cmp	r0, #0
 801ae1c:	d0d9      	beq.n	801add2 <__swbuf_r+0x2e>
 801ae1e:	e7d6      	b.n	801adce <__swbuf_r+0x2a>

0801ae20 <__swsetup_r>:
 801ae20:	b538      	push	{r3, r4, r5, lr}
 801ae22:	4b29      	ldr	r3, [pc, #164]	@ (801aec8 <__swsetup_r+0xa8>)
 801ae24:	4605      	mov	r5, r0
 801ae26:	6818      	ldr	r0, [r3, #0]
 801ae28:	460c      	mov	r4, r1
 801ae2a:	b118      	cbz	r0, 801ae34 <__swsetup_r+0x14>
 801ae2c:	6a03      	ldr	r3, [r0, #32]
 801ae2e:	b90b      	cbnz	r3, 801ae34 <__swsetup_r+0x14>
 801ae30:	f7fe f8d4 	bl	8018fdc <__sinit>
 801ae34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae38:	0719      	lsls	r1, r3, #28
 801ae3a:	d422      	bmi.n	801ae82 <__swsetup_r+0x62>
 801ae3c:	06da      	lsls	r2, r3, #27
 801ae3e:	d407      	bmi.n	801ae50 <__swsetup_r+0x30>
 801ae40:	2209      	movs	r2, #9
 801ae42:	602a      	str	r2, [r5, #0]
 801ae44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ae48:	81a3      	strh	r3, [r4, #12]
 801ae4a:	f04f 30ff 	mov.w	r0, #4294967295
 801ae4e:	e033      	b.n	801aeb8 <__swsetup_r+0x98>
 801ae50:	0758      	lsls	r0, r3, #29
 801ae52:	d512      	bpl.n	801ae7a <__swsetup_r+0x5a>
 801ae54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ae56:	b141      	cbz	r1, 801ae6a <__swsetup_r+0x4a>
 801ae58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ae5c:	4299      	cmp	r1, r3
 801ae5e:	d002      	beq.n	801ae66 <__swsetup_r+0x46>
 801ae60:	4628      	mov	r0, r5
 801ae62:	f7fe ffdb 	bl	8019e1c <_free_r>
 801ae66:	2300      	movs	r3, #0
 801ae68:	6363      	str	r3, [r4, #52]	@ 0x34
 801ae6a:	89a3      	ldrh	r3, [r4, #12]
 801ae6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ae70:	81a3      	strh	r3, [r4, #12]
 801ae72:	2300      	movs	r3, #0
 801ae74:	6063      	str	r3, [r4, #4]
 801ae76:	6923      	ldr	r3, [r4, #16]
 801ae78:	6023      	str	r3, [r4, #0]
 801ae7a:	89a3      	ldrh	r3, [r4, #12]
 801ae7c:	f043 0308 	orr.w	r3, r3, #8
 801ae80:	81a3      	strh	r3, [r4, #12]
 801ae82:	6923      	ldr	r3, [r4, #16]
 801ae84:	b94b      	cbnz	r3, 801ae9a <__swsetup_r+0x7a>
 801ae86:	89a3      	ldrh	r3, [r4, #12]
 801ae88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ae8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ae90:	d003      	beq.n	801ae9a <__swsetup_r+0x7a>
 801ae92:	4621      	mov	r1, r4
 801ae94:	4628      	mov	r0, r5
 801ae96:	f000 f883 	bl	801afa0 <__smakebuf_r>
 801ae9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae9e:	f013 0201 	ands.w	r2, r3, #1
 801aea2:	d00a      	beq.n	801aeba <__swsetup_r+0x9a>
 801aea4:	2200      	movs	r2, #0
 801aea6:	60a2      	str	r2, [r4, #8]
 801aea8:	6962      	ldr	r2, [r4, #20]
 801aeaa:	4252      	negs	r2, r2
 801aeac:	61a2      	str	r2, [r4, #24]
 801aeae:	6922      	ldr	r2, [r4, #16]
 801aeb0:	b942      	cbnz	r2, 801aec4 <__swsetup_r+0xa4>
 801aeb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801aeb6:	d1c5      	bne.n	801ae44 <__swsetup_r+0x24>
 801aeb8:	bd38      	pop	{r3, r4, r5, pc}
 801aeba:	0799      	lsls	r1, r3, #30
 801aebc:	bf58      	it	pl
 801aebe:	6962      	ldrpl	r2, [r4, #20]
 801aec0:	60a2      	str	r2, [r4, #8]
 801aec2:	e7f4      	b.n	801aeae <__swsetup_r+0x8e>
 801aec4:	2000      	movs	r0, #0
 801aec6:	e7f7      	b.n	801aeb8 <__swsetup_r+0x98>
 801aec8:	24000128 	.word	0x24000128

0801aecc <_raise_r>:
 801aecc:	291f      	cmp	r1, #31
 801aece:	b538      	push	{r3, r4, r5, lr}
 801aed0:	4605      	mov	r5, r0
 801aed2:	460c      	mov	r4, r1
 801aed4:	d904      	bls.n	801aee0 <_raise_r+0x14>
 801aed6:	2316      	movs	r3, #22
 801aed8:	6003      	str	r3, [r0, #0]
 801aeda:	f04f 30ff 	mov.w	r0, #4294967295
 801aede:	bd38      	pop	{r3, r4, r5, pc}
 801aee0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801aee2:	b112      	cbz	r2, 801aeea <_raise_r+0x1e>
 801aee4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801aee8:	b94b      	cbnz	r3, 801aefe <_raise_r+0x32>
 801aeea:	4628      	mov	r0, r5
 801aeec:	f000 f830 	bl	801af50 <_getpid_r>
 801aef0:	4622      	mov	r2, r4
 801aef2:	4601      	mov	r1, r0
 801aef4:	4628      	mov	r0, r5
 801aef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aefa:	f000 b817 	b.w	801af2c <_kill_r>
 801aefe:	2b01      	cmp	r3, #1
 801af00:	d00a      	beq.n	801af18 <_raise_r+0x4c>
 801af02:	1c59      	adds	r1, r3, #1
 801af04:	d103      	bne.n	801af0e <_raise_r+0x42>
 801af06:	2316      	movs	r3, #22
 801af08:	6003      	str	r3, [r0, #0]
 801af0a:	2001      	movs	r0, #1
 801af0c:	e7e7      	b.n	801aede <_raise_r+0x12>
 801af0e:	2100      	movs	r1, #0
 801af10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801af14:	4620      	mov	r0, r4
 801af16:	4798      	blx	r3
 801af18:	2000      	movs	r0, #0
 801af1a:	e7e0      	b.n	801aede <_raise_r+0x12>

0801af1c <raise>:
 801af1c:	4b02      	ldr	r3, [pc, #8]	@ (801af28 <raise+0xc>)
 801af1e:	4601      	mov	r1, r0
 801af20:	6818      	ldr	r0, [r3, #0]
 801af22:	f7ff bfd3 	b.w	801aecc <_raise_r>
 801af26:	bf00      	nop
 801af28:	24000128 	.word	0x24000128

0801af2c <_kill_r>:
 801af2c:	b538      	push	{r3, r4, r5, lr}
 801af2e:	4d07      	ldr	r5, [pc, #28]	@ (801af4c <_kill_r+0x20>)
 801af30:	2300      	movs	r3, #0
 801af32:	4604      	mov	r4, r0
 801af34:	4608      	mov	r0, r1
 801af36:	4611      	mov	r1, r2
 801af38:	602b      	str	r3, [r5, #0]
 801af3a:	f7e7 ff5b 	bl	8002df4 <_kill>
 801af3e:	1c43      	adds	r3, r0, #1
 801af40:	d102      	bne.n	801af48 <_kill_r+0x1c>
 801af42:	682b      	ldr	r3, [r5, #0]
 801af44:	b103      	cbz	r3, 801af48 <_kill_r+0x1c>
 801af46:	6023      	str	r3, [r4, #0]
 801af48:	bd38      	pop	{r3, r4, r5, pc}
 801af4a:	bf00      	nop
 801af4c:	24027a8c 	.word	0x24027a8c

0801af50 <_getpid_r>:
 801af50:	f7e7 bf48 	b.w	8002de4 <_getpid>

0801af54 <__swhatbuf_r>:
 801af54:	b570      	push	{r4, r5, r6, lr}
 801af56:	460c      	mov	r4, r1
 801af58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af5c:	2900      	cmp	r1, #0
 801af5e:	b096      	sub	sp, #88	@ 0x58
 801af60:	4615      	mov	r5, r2
 801af62:	461e      	mov	r6, r3
 801af64:	da0d      	bge.n	801af82 <__swhatbuf_r+0x2e>
 801af66:	89a3      	ldrh	r3, [r4, #12]
 801af68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801af6c:	f04f 0100 	mov.w	r1, #0
 801af70:	bf14      	ite	ne
 801af72:	2340      	movne	r3, #64	@ 0x40
 801af74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801af78:	2000      	movs	r0, #0
 801af7a:	6031      	str	r1, [r6, #0]
 801af7c:	602b      	str	r3, [r5, #0]
 801af7e:	b016      	add	sp, #88	@ 0x58
 801af80:	bd70      	pop	{r4, r5, r6, pc}
 801af82:	466a      	mov	r2, sp
 801af84:	f000 f848 	bl	801b018 <_fstat_r>
 801af88:	2800      	cmp	r0, #0
 801af8a:	dbec      	blt.n	801af66 <__swhatbuf_r+0x12>
 801af8c:	9901      	ldr	r1, [sp, #4]
 801af8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801af92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801af96:	4259      	negs	r1, r3
 801af98:	4159      	adcs	r1, r3
 801af9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801af9e:	e7eb      	b.n	801af78 <__swhatbuf_r+0x24>

0801afa0 <__smakebuf_r>:
 801afa0:	898b      	ldrh	r3, [r1, #12]
 801afa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801afa4:	079d      	lsls	r5, r3, #30
 801afa6:	4606      	mov	r6, r0
 801afa8:	460c      	mov	r4, r1
 801afaa:	d507      	bpl.n	801afbc <__smakebuf_r+0x1c>
 801afac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801afb0:	6023      	str	r3, [r4, #0]
 801afb2:	6123      	str	r3, [r4, #16]
 801afb4:	2301      	movs	r3, #1
 801afb6:	6163      	str	r3, [r4, #20]
 801afb8:	b003      	add	sp, #12
 801afba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801afbc:	ab01      	add	r3, sp, #4
 801afbe:	466a      	mov	r2, sp
 801afc0:	f7ff ffc8 	bl	801af54 <__swhatbuf_r>
 801afc4:	9f00      	ldr	r7, [sp, #0]
 801afc6:	4605      	mov	r5, r0
 801afc8:	4639      	mov	r1, r7
 801afca:	4630      	mov	r0, r6
 801afcc:	f7fd faba 	bl	8018544 <_malloc_r>
 801afd0:	b948      	cbnz	r0, 801afe6 <__smakebuf_r+0x46>
 801afd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801afd6:	059a      	lsls	r2, r3, #22
 801afd8:	d4ee      	bmi.n	801afb8 <__smakebuf_r+0x18>
 801afda:	f023 0303 	bic.w	r3, r3, #3
 801afde:	f043 0302 	orr.w	r3, r3, #2
 801afe2:	81a3      	strh	r3, [r4, #12]
 801afe4:	e7e2      	b.n	801afac <__smakebuf_r+0xc>
 801afe6:	89a3      	ldrh	r3, [r4, #12]
 801afe8:	6020      	str	r0, [r4, #0]
 801afea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801afee:	81a3      	strh	r3, [r4, #12]
 801aff0:	9b01      	ldr	r3, [sp, #4]
 801aff2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801aff6:	b15b      	cbz	r3, 801b010 <__smakebuf_r+0x70>
 801aff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801affc:	4630      	mov	r0, r6
 801affe:	f000 f81d 	bl	801b03c <_isatty_r>
 801b002:	b128      	cbz	r0, 801b010 <__smakebuf_r+0x70>
 801b004:	89a3      	ldrh	r3, [r4, #12]
 801b006:	f023 0303 	bic.w	r3, r3, #3
 801b00a:	f043 0301 	orr.w	r3, r3, #1
 801b00e:	81a3      	strh	r3, [r4, #12]
 801b010:	89a3      	ldrh	r3, [r4, #12]
 801b012:	431d      	orrs	r5, r3
 801b014:	81a5      	strh	r5, [r4, #12]
 801b016:	e7cf      	b.n	801afb8 <__smakebuf_r+0x18>

0801b018 <_fstat_r>:
 801b018:	b538      	push	{r3, r4, r5, lr}
 801b01a:	4d07      	ldr	r5, [pc, #28]	@ (801b038 <_fstat_r+0x20>)
 801b01c:	2300      	movs	r3, #0
 801b01e:	4604      	mov	r4, r0
 801b020:	4608      	mov	r0, r1
 801b022:	4611      	mov	r1, r2
 801b024:	602b      	str	r3, [r5, #0]
 801b026:	f7e7 ff45 	bl	8002eb4 <_fstat>
 801b02a:	1c43      	adds	r3, r0, #1
 801b02c:	d102      	bne.n	801b034 <_fstat_r+0x1c>
 801b02e:	682b      	ldr	r3, [r5, #0]
 801b030:	b103      	cbz	r3, 801b034 <_fstat_r+0x1c>
 801b032:	6023      	str	r3, [r4, #0]
 801b034:	bd38      	pop	{r3, r4, r5, pc}
 801b036:	bf00      	nop
 801b038:	24027a8c 	.word	0x24027a8c

0801b03c <_isatty_r>:
 801b03c:	b538      	push	{r3, r4, r5, lr}
 801b03e:	4d06      	ldr	r5, [pc, #24]	@ (801b058 <_isatty_r+0x1c>)
 801b040:	2300      	movs	r3, #0
 801b042:	4604      	mov	r4, r0
 801b044:	4608      	mov	r0, r1
 801b046:	602b      	str	r3, [r5, #0]
 801b048:	f7e7 ff44 	bl	8002ed4 <_isatty>
 801b04c:	1c43      	adds	r3, r0, #1
 801b04e:	d102      	bne.n	801b056 <_isatty_r+0x1a>
 801b050:	682b      	ldr	r3, [r5, #0]
 801b052:	b103      	cbz	r3, 801b056 <_isatty_r+0x1a>
 801b054:	6023      	str	r3, [r4, #0]
 801b056:	bd38      	pop	{r3, r4, r5, pc}
 801b058:	24027a8c 	.word	0x24027a8c

0801b05c <_init>:
 801b05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b05e:	bf00      	nop
 801b060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b062:	bc08      	pop	{r3}
 801b064:	469e      	mov	lr, r3
 801b066:	4770      	bx	lr

0801b068 <_fini>:
 801b068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b06a:	bf00      	nop
 801b06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b06e:	bc08      	pop	{r3}
 801b070:	469e      	mov	lr, r3
 801b072:	4770      	bx	lr
