
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015854  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08015af4  08015af4  00016af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015d10  08015d10  00016d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015d18  08015d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015d1c  08015d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000154  24000000  08015d20  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002180  24000154  08015e74  00017154  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240022d4  08015e74  000172d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00017154  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b8fb  00000000  00000000  00017182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000051cf  00000000  00000000  00042a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002188  00000000  00000000  00047c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a18  00000000  00000000  00049dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dbda  00000000  00000000  0004b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002fcc3  00000000  00000000  000893ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001752af  00000000  00000000  000b908d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022e33c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009574  00000000  00000000  0022e380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  002378f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000154 	.word	0x24000154
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015adc 	.word	0x08015adc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000158 	.word	0x24000158
 80002dc:	08015adc 	.word	0x08015adc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	f5ad 3d16 	sub.w	sp, sp, #153600	@ 0x25800
 80006c2:	b09e      	sub	sp, #120	@ 0x78
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c6:	f000 ff89 	bl	80015dc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f001 fde7 	bl	800229c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f9c1 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fdab 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 80006d6:	f000 fd89 	bl	80011ec <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006da:	f000 fd3b 	bl	8001154 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006de:	f014 f817 	bl	8014710 <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 80006e2:	f000 fa33 	bl	8000b4c <MX_DCMI_Init>
  MX_I2C2_Init();
 80006e6:	f000 fa65 	bl	8000bb4 <MX_I2C2_Init>
  MX_TIM14_Init();
 80006ea:	f000 fce7 	bl	80010bc <MX_TIM14_Init>
  MX_TIM2_Init();
 80006ee:	f000 fba9 	bl	8000e44 <MX_TIM2_Init>
  MX_TIM4_Init();
 80006f2:	f000 fc7d 	bl	8000ff0 <MX_TIM4_Init>
  MX_TIM1_Init();
 80006f6:	f000 fb17 	bl	8000d28 <MX_TIM1_Init>
  MX_TIM3_Init();
 80006fa:	f000 fc13 	bl	8000f24 <MX_TIM3_Init>
  MX_SDMMC1_SD_Init();
 80006fe:	f000 fa99 	bl	8000c34 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000702:	f000 fabb 	bl	8000c7c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  // SETUP CAMERA STREAM
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000706:	2100      	movs	r1, #0
 8000708:	48bf      	ldr	r0, [pc, #764]	@ (8000a08 <main+0x34c>)
 800070a:	f00d fec1 	bl	800e490 <HAL_TIM_PWM_Start>
  uint8_t camera_mem[CAM_WIDTH * CAM_HEIGHT * CAM_BYTES_PER_PIXEL];
  uint8_t usb_msg[100] = {0};
 800070e:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000712:	f5a3 6307 	sub.w	r3, r3, #2160	@ 0x870
 8000716:	4618      	mov	r0, r3
 8000718:	2364      	movs	r3, #100	@ 0x64
 800071a:	461a      	mov	r2, r3
 800071c:	2100      	movs	r1, #0
 800071e:	f014 fd5f 	bl	80151e0 <memset>
  //        COM7  [2] = 1 (RGB Selection 2)
  //        COM7  [4] = 1 (QVGA Resolution)
  // (0x15) COM10 [6] = 1 (Switch HREF to HSYNC)
  uint8_t cam_regCache;

  cam_regCache = 0x00;
 8000722:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000726:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
  CAM_GetRegister(0x0C, &cam_regCache, 1);
 800072e:	4bb7      	ldr	r3, [pc, #732]	@ (8000a0c <main+0x350>)
 8000730:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8000734:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8000738:	443b      	add	r3, r7
 800073a:	2201      	movs	r2, #1
 800073c:	4619      	mov	r1, r3
 800073e:	200c      	movs	r0, #12
 8000740:	f000 fe2c 	bl	800139c <CAM_GetRegister>
  cam_regCache |= 0b00001000;
 8000744:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000748:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	f043 0308 	orr.w	r3, r3, #8
 8000752:	b2da      	uxtb	r2, r3
 8000754:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000758:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 800075c:	701a      	strb	r2, [r3, #0]
  CAM_SetRegister(0x0C, cam_regCache, 1);
 800075e:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000762:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2201      	movs	r2, #1
 800076a:	4619      	mov	r1, r3
 800076c:	200c      	movs	r0, #12
 800076e:	f000 fe8f 	bl	8001490 <CAM_SetRegister>

  cam_regCache = 0x00;
 8000772:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000776:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
  CAM_GetRegister(0x12, &cam_regCache, 1);
 800077e:	4ba3      	ldr	r3, [pc, #652]	@ (8000a0c <main+0x350>)
 8000780:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8000784:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8000788:	443b      	add	r3, r7
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	2012      	movs	r0, #18
 8000790:	f000 fe04 	bl	800139c <CAM_GetRegister>
  cam_regCache &= 0b11000000;
 8000794:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000798:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007a8:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 80007ac:	701a      	strb	r2, [r3, #0]
  cam_regCache |= 0b00010100;
 80007ae:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007b2:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0314 	orr.w	r3, r3, #20
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007c2:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 80007c6:	701a      	strb	r2, [r3, #0]
  CAM_SetRegister(0x12, cam_regCache, 1);
 80007c8:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007cc:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2201      	movs	r2, #1
 80007d4:	4619      	mov	r1, r3
 80007d6:	2012      	movs	r0, #18
 80007d8:	f000 fe5a 	bl	8001490 <CAM_SetRegister>

  cam_regCache = 0x00;
 80007dc:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007e0:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
  CAM_GetRegister(0x15, &cam_regCache, 1);
 80007e8:	4b88      	ldr	r3, [pc, #544]	@ (8000a0c <main+0x350>)
 80007ea:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80007ee:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80007f2:	443b      	add	r3, r7
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	2015      	movs	r0, #21
 80007fa:	f000 fdcf 	bl	800139c <CAM_GetRegister>
  cam_regCache |= 0b01000000;
 80007fe:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000802:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800080c:	b2da      	uxtb	r2, r3
 800080e:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000812:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000816:	701a      	strb	r2, [r3, #0]
  CAM_SetRegister(0x15, cam_regCache, 1);
 8000818:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800081c:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2201      	movs	r2, #1
 8000824:	4619      	mov	r1, r3
 8000826:	2015      	movs	r0, #21
 8000828:	f000 fe32 	bl	8001490 <CAM_SetRegister>

  // Setup Motor
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); //Motor_en
 800082c:	2201      	movs	r2, #1
 800082e:	2108      	movs	r1, #8
 8000830:	4877      	ldr	r0, [pc, #476]	@ (8000a10 <main+0x354>)
 8000832:	f005 ff1d 	bl	8006670 <HAL_GPIO_WritePin>
  TIM2->CCR1 = 400;
 8000836:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800083a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800083e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2->CCR2 = 400;
 8000840:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000844:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000848:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM4->CCR3 = 400;
 800084a:	4b72      	ldr	r3, [pc, #456]	@ (8000a14 <main+0x358>)
 800084c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000850:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM4->CCR4 = 400;
 8000852:	4b70      	ldr	r3, [pc, #448]	@ (8000a14 <main+0x358>)
 8000854:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000858:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // LEFT_PWM_1
 800085a:	2100      	movs	r1, #0
 800085c:	486e      	ldr	r0, [pc, #440]	@ (8000a18 <main+0x35c>)
 800085e:	f00d fe17 	bl	800e490 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // RIGHT_PWM_1
 8000862:	2104      	movs	r1, #4
 8000864:	486c      	ldr	r0, [pc, #432]	@ (8000a18 <main+0x35c>)
 8000866:	f00d fe13 	bl	800e490 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RIGHT_PWM_2
 800086a:	2108      	movs	r1, #8
 800086c:	486b      	ldr	r0, [pc, #428]	@ (8000a1c <main+0x360>)
 800086e:	f00d fe0f 	bl	800e490 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // LEFT_PWM_2
 8000872:	210c      	movs	r1, #12
 8000874:	4869      	ldr	r0, [pc, #420]	@ (8000a1c <main+0x360>)
 8000876:	f00d fe0b 	bl	800e490 <HAL_TIM_PWM_Start>

  // Setup lights
  TIM1->CCR4 = 1000;
 800087a:	4b69      	ldr	r3, [pc, #420]	@ (8000a20 <main+0x364>)
 800087c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000880:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3->CCR4 = 1000;
 8000882:	4b68      	ldr	r3, [pc, #416]	@ (8000a24 <main+0x368>)
 8000884:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000888:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3->CCR3 = 1000;
 800088a:	4b66      	ldr	r3, [pc, #408]	@ (8000a24 <main+0x368>)
 800088c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000890:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2->CCR4 = 1000;
 8000892:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000896:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800089a:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // LIGHTS_PWM_1
 800089c:	210c      	movs	r1, #12
 800089e:	4862      	ldr	r0, [pc, #392]	@ (8000a28 <main+0x36c>)
 80008a0:	f00d fdf6 	bl	800e490 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // LIGHTS_PWM_2
 80008a4:	210c      	movs	r1, #12
 80008a6:	4861      	ldr	r0, [pc, #388]	@ (8000a2c <main+0x370>)
 80008a8:	f00d fdf2 	bl	800e490 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // LIGHTS_PWM_3
 80008ac:	2108      	movs	r1, #8
 80008ae:	485f      	ldr	r0, [pc, #380]	@ (8000a2c <main+0x370>)
 80008b0:	f00d fdee 	bl	800e490 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // LIGHTS_PWM_4
 80008b4:	2108      	movs	r1, #8
 80008b6:	4858      	ldr	r0, [pc, #352]	@ (8000a18 <main+0x35c>)
 80008b8:	f00d fdea 	bl	800e490 <HAL_TIM_PWM_Start>
	  // I2C CMD example
	  // HAL_StatusTypeDef tx_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &ov7670_CMD_PID, 1, 100);
	  // HAL_StatusTypeDef rx_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, i2c_readback, 1, 100);

	  // TESTING
	  HAL_StatusTypeDef ovStat = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, camera_mem, (CAM_WIDTH * CAM_HEIGHT * CAM_BYTES_PER_PIXEL) / 4);
 80008bc:	4a5c      	ldr	r2, [pc, #368]	@ (8000a30 <main+0x374>)
 80008be:	4b5d      	ldr	r3, [pc, #372]	@ (8000a34 <main+0x378>)
 80008c0:	4413      	add	r3, r2
 80008c2:	19da      	adds	r2, r3, r7
 80008c4:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 80008c8:	2102      	movs	r1, #2
 80008ca:	485b      	ldr	r0, [pc, #364]	@ (8000a38 <main+0x37c>)
 80008cc:	f001 ffaa 	bl	8002824 <HAL_DCMI_Start_DMA>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a5a      	ldr	r2, [pc, #360]	@ (8000a3c <main+0x380>)
 80008d4:	443a      	add	r2, r7
 80008d6:	7013      	strb	r3, [r2, #0]
	  if (ovStat) {
 80008d8:	4b58      	ldr	r3, [pc, #352]	@ (8000a3c <main+0x380>)
 80008da:	443b      	add	r3, r7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d020      	beq.n	8000924 <main+0x268>
		  // ERROR
		  sprintf(usb_msg, "DCMI/DMA ERROR - Code 0x%X\r\n", ovStat);
 80008e2:	4b56      	ldr	r3, [pc, #344]	@ (8000a3c <main+0x380>)
 80008e4:	443b      	add	r3, r7
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	4b55      	ldr	r3, [pc, #340]	@ (8000a40 <main+0x384>)
 80008ea:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80008ee:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80008f2:	443b      	add	r3, r7
 80008f4:	4953      	ldr	r1, [pc, #332]	@ (8000a44 <main+0x388>)
 80008f6:	4618      	mov	r0, r3
 80008f8:	f014 fc50 	bl	801519c <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80008fc:	4b50      	ldr	r3, [pc, #320]	@ (8000a40 <main+0x384>)
 80008fe:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8000902:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8000906:	443b      	add	r3, r7
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fce9 	bl	80002e0 <strlen>
 800090e:	4602      	mov	r2, r0
 8000910:	4b4b      	ldr	r3, [pc, #300]	@ (8000a40 <main+0x384>)
 8000912:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8000916:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800091a:	443b      	add	r3, r7
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f013 ffbc 	bl	801489c <CDC_Transmit_FS>
	  }
	  HAL_Delay(2000);
 8000924:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000928:	f001 fd4a 	bl	80023c0 <HAL_Delay>

	  // Get the first byte of the DMA field
	  for (int i = 0; i < 32; i++) {
 800092c:	2300      	movs	r3, #0
 800092e:	4a46      	ldr	r2, [pc, #280]	@ (8000a48 <main+0x38c>)
 8000930:	443a      	add	r2, r7
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	e05a      	b.n	80009ec <main+0x330>
		  uint32_t pixbuf_0 = (camera_mem[i*4]<<24) | (camera_mem[i*4+1]<<16) | (camera_mem[i*4+2]<<8) | (camera_mem[i*4+3]);
 8000936:	4b44      	ldr	r3, [pc, #272]	@ (8000a48 <main+0x38c>)
 8000938:	443b      	add	r3, r7
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8000942:	f6a2 020c 	subw	r2, r2, #2060	@ 0x80c
 8000946:	5cd3      	ldrb	r3, [r2, r3]
 8000948:	061a      	lsls	r2, r3, #24
 800094a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a48 <main+0x38c>)
 800094c:	443b      	add	r3, r7
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	3301      	adds	r3, #1
 8000954:	f607 0178 	addw	r1, r7, #2168	@ 0x878
 8000958:	f6a1 010c 	subw	r1, r1, #2060	@ 0x80c
 800095c:	5ccb      	ldrb	r3, [r1, r3]
 800095e:	041b      	lsls	r3, r3, #16
 8000960:	431a      	orrs	r2, r3
 8000962:	4b39      	ldr	r3, [pc, #228]	@ (8000a48 <main+0x38c>)
 8000964:	443b      	add	r3, r7
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	3302      	adds	r3, #2
 800096c:	f607 0178 	addw	r1, r7, #2168	@ 0x878
 8000970:	f6a1 010c 	subw	r1, r1, #2060	@ 0x80c
 8000974:	5ccb      	ldrb	r3, [r1, r3]
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	4313      	orrs	r3, r2
 800097a:	4a33      	ldr	r2, [pc, #204]	@ (8000a48 <main+0x38c>)
 800097c:	443a      	add	r2, r7
 800097e:	6812      	ldr	r2, [r2, #0]
 8000980:	0092      	lsls	r2, r2, #2
 8000982:	3203      	adds	r2, #3
 8000984:	f607 0178 	addw	r1, r7, #2168	@ 0x878
 8000988:	f6a1 010c 	subw	r1, r1, #2060	@ 0x80c
 800098c:	5c8a      	ldrb	r2, [r1, r2]
 800098e:	4313      	orrs	r3, r2
 8000990:	4a2e      	ldr	r2, [pc, #184]	@ (8000a4c <main+0x390>)
 8000992:	443a      	add	r2, r7
 8000994:	6013      	str	r3, [r2, #0]
		  sprintf(usb_msg, "%d - 0x%X\r\n", i, pixbuf_0);
 8000996:	482a      	ldr	r0, [pc, #168]	@ (8000a40 <main+0x384>)
 8000998:	4b26      	ldr	r3, [pc, #152]	@ (8000a34 <main+0x378>)
 800099a:	4403      	add	r3, r0
 800099c:	19d8      	adds	r0, r3, r7
 800099e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a4c <main+0x390>)
 80009a0:	443b      	add	r3, r7
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a28      	ldr	r2, [pc, #160]	@ (8000a48 <main+0x38c>)
 80009a6:	443a      	add	r2, r7
 80009a8:	6812      	ldr	r2, [r2, #0]
 80009aa:	4929      	ldr	r1, [pc, #164]	@ (8000a50 <main+0x394>)
 80009ac:	f014 fbf6 	bl	801519c <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80009b0:	4b23      	ldr	r3, [pc, #140]	@ (8000a40 <main+0x384>)
 80009b2:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80009b6:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80009ba:	443b      	add	r3, r7
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fc8f 	bl	80002e0 <strlen>
 80009c2:	4602      	mov	r2, r0
 80009c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <main+0x384>)
 80009c6:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80009ca:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80009ce:	443b      	add	r3, r7
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f013 ff62 	bl	801489c <CDC_Transmit_FS>
		  HAL_Delay(5);
 80009d8:	2005      	movs	r0, #5
 80009da:	f001 fcf1 	bl	80023c0 <HAL_Delay>
	  for (int i = 0; i < 32; i++) {
 80009de:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <main+0x38c>)
 80009e0:	443b      	add	r3, r7
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	3301      	adds	r3, #1
 80009e6:	4a18      	ldr	r2, [pc, #96]	@ (8000a48 <main+0x38c>)
 80009e8:	443a      	add	r2, r7
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <main+0x38c>)
 80009ee:	443b      	add	r3, r7
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b1f      	cmp	r3, #31
 80009f4:	dd9f      	ble.n	8000936 <main+0x27a>
	  }
	  HAL_Delay(500);
 80009f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009fa:	f001 fce1 	bl	80023c0 <HAL_Delay>

	  HAL_DCMI_Stop(&hdcmi);
 80009fe:	480e      	ldr	r0, [pc, #56]	@ (8000a38 <main+0x37c>)
 8000a00:	f001 ffd2 	bl	80029a8 <HAL_DCMI_Stop>
  {
 8000a04:	e75a      	b.n	80008bc <main+0x200>
 8000a06:	bf00      	nop
 8000a08:	240004c0 	.word	0x240004c0
 8000a0c:	fffda78f 	.word	0xfffda78f
 8000a10:	58020000 	.word	0x58020000
 8000a14:	40000800 	.word	0x40000800
 8000a18:	240003dc 	.word	0x240003dc
 8000a1c:	24000474 	.word	0x24000474
 8000a20:	40010000 	.word	0x40010000
 8000a24:	40000400 	.word	0x40000400
 8000a28:	24000390 	.word	0x24000390
 8000a2c:	24000428 	.word	0x24000428
 8000a30:	fffda7f4 	.word	0xfffda7f4
 8000a34:	00025878 	.word	0x00025878
 8000a38:	24000170 	.word	0x24000170
 8000a3c:	00025873 	.word	0x00025873
 8000a40:	fffda790 	.word	0xfffda790
 8000a44:	08015af4 	.word	0x08015af4
 8000a48:	00025874 	.word	0x00025874
 8000a4c:	0002586c 	.word	0x0002586c
 8000a50:	08015b14 	.word	0x08015b14

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09c      	sub	sp, #112	@ 0x70
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5e:	224c      	movs	r2, #76	@ 0x4c
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f014 fbbc 	bl	80151e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2220      	movs	r2, #32
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f014 fbb6 	bl	80151e0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a74:	2002      	movs	r0, #2
 8000a76:	f008 fd81 	bl	800957c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b31      	ldr	r3, [pc, #196]	@ (8000b44 <SystemClock_Config+0xf0>)
 8000a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a82:	4a30      	ldr	r2, [pc, #192]	@ (8000b44 <SystemClock_Config+0xf0>)
 8000a84:	f023 0301 	bic.w	r3, r3, #1
 8000a88:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b44 <SystemClock_Config+0xf0>)
 8000a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <SystemClock_Config+0xf4>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a9c:	4a2a      	ldr	r2, [pc, #168]	@ (8000b48 <SystemClock_Config+0xf4>)
 8000a9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <SystemClock_Config+0xf4>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ab0:	bf00      	nop
 8000ab2:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <SystemClock_Config+0xf4>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000abe:	d1f8      	bne.n	8000ab2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aca:	2302      	movs	r3, #2
 8000acc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ae6:	230c      	movs	r3, #12
 8000ae8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000aea:	2302      	movs	r3, #2
 8000aec:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af6:	4618      	mov	r0, r3
 8000af8:	f008 fd8a 	bl	8009610 <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b02:	f000 fd97 	bl	8001634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	233f      	movs	r3, #63	@ 0x3f
 8000b08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000b1e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000b22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f009 f9c9 	bl	8009ec4 <HAL_RCC_ClockConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000b38:	f000 fd7c 	bl	8001634 <Error_Handler>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3770      	adds	r7, #112	@ 0x70
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58000400 	.word	0x58000400
 8000b48:	58024800 	.word	0x58024800

08000b4c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <MX_DCMI_Init+0x60>)
 8000b52:	4a17      	ldr	r2, [pc, #92]	@ (8000bb0 <MX_DCMI_Init+0x64>)
 8000b54:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <MX_DCMI_Init+0x60>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <MX_DCMI_Init+0x60>)
 8000b5e:	2220      	movs	r2, #32
 8000b60:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000b62:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <MX_DCMI_Init+0x60>)
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000b68:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <MX_DCMI_Init+0x60>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <MX_DCMI_Init+0x60>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000b74:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <MX_DCMI_Init+0x60>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <MX_DCMI_Init+0x60>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <MX_DCMI_Init+0x60>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000b86:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <MX_DCMI_Init+0x60>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <MX_DCMI_Init+0x60>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000b92:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <MX_DCMI_Init+0x60>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	@ (8000bac <MX_DCMI_Init+0x60>)
 8000b9a:	f001 fdc9 	bl	8002730 <HAL_DCMI_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000ba4:	f000 fd46 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	24000170 	.word	0x24000170
 8000bb0:	48020000 	.word	0x48020000

08000bb4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <MX_I2C2_Init+0x74>)
 8000bba:	4a1c      	ldr	r2, [pc, #112]	@ (8000c2c <MX_I2C2_Init+0x78>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <MX_I2C2_Init+0x74>)
 8000bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c30 <MX_I2C2_Init+0x7c>)
 8000bc2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <MX_I2C2_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bca:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <MX_I2C2_Init+0x74>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <MX_I2C2_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <MX_I2C2_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <MX_I2C2_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <MX_I2C2_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <MX_I2C2_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bee:	480e      	ldr	r0, [pc, #56]	@ (8000c28 <MX_I2C2_Init+0x74>)
 8000bf0:	f005 fd58 	bl	80066a4 <HAL_I2C_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bfa:	f000 fd1b 	bl	8001634 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4809      	ldr	r0, [pc, #36]	@ (8000c28 <MX_I2C2_Init+0x74>)
 8000c02:	f007 f983 	bl	8007f0c <HAL_I2CEx_ConfigAnalogFilter>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c0c:	f000 fd12 	bl	8001634 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c10:	2100      	movs	r1, #0
 8000c12:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_I2C2_Init+0x74>)
 8000c14:	f007 f9c5 	bl	8007fa2 <HAL_I2CEx_ConfigDigitalFilter>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c1e:	f000 fd09 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	24000238 	.word	0x24000238
 8000c2c:	40005800 	.word	0x40005800
 8000c30:	00c0eaff 	.word	0x00c0eaff

08000c34 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <MX_SDMMC1_SD_Init+0x40>)
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c78 <MX_SDMMC1_SD_Init+0x44>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <MX_SDMMC1_SD_Init+0x40>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c44:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <MX_SDMMC1_SD_Init+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <MX_SDMMC1_SD_Init+0x40>)
 8000c4c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c50:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <MX_SDMMC1_SD_Init+0x40>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <MX_SDMMC1_SD_Init+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <MX_SDMMC1_SD_Init+0x40>)
 8000c60:	f00c f9ba 	bl	800cfd8 <HAL_SD_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000c6a:	f000 fce3 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2400028c 	.word	0x2400028c
 8000c78:	52007000 	.word	0x52007000

08000c7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c80:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000c82:	4a28      	ldr	r2, [pc, #160]	@ (8000d24 <MX_SPI2_Init+0xa8>)
 8000c84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c86:	4b26      	ldr	r3, [pc, #152]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000c88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8e:	4b24      	ldr	r3, [pc, #144]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c94:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000c96:	2203      	movs	r2, #3
 8000c98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000ca8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000cac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000cce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cd2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_SPI2_Init+0xa4>)
 8000d0c:	f00d f9d2 	bl	800e0b4 <HAL_SPI_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000d16:	f000 fc8d 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	24000308 	.word	0x24000308
 8000d24:	40003800 	.word	0x40003800

08000d28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b096      	sub	sp, #88	@ 0x58
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]
 8000d4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	222c      	movs	r2, #44	@ 0x2c
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f014 fa43 	bl	80151e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d5a:	4b38      	ldr	r3, [pc, #224]	@ (8000e3c <MX_TIM1_Init+0x114>)
 8000d5c:	4a38      	ldr	r2, [pc, #224]	@ (8000e40 <MX_TIM1_Init+0x118>)
 8000d5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d60:	4b36      	ldr	r3, [pc, #216]	@ (8000e3c <MX_TIM1_Init+0x114>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b35      	ldr	r3, [pc, #212]	@ (8000e3c <MX_TIM1_Init+0x114>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000d6c:	4b33      	ldr	r3, [pc, #204]	@ (8000e3c <MX_TIM1_Init+0x114>)
 8000d6e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d74:	4b31      	ldr	r3, [pc, #196]	@ (8000e3c <MX_TIM1_Init+0x114>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d7a:	4b30      	ldr	r3, [pc, #192]	@ (8000e3c <MX_TIM1_Init+0x114>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d80:	4b2e      	ldr	r3, [pc, #184]	@ (8000e3c <MX_TIM1_Init+0x114>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d86:	482d      	ldr	r0, [pc, #180]	@ (8000e3c <MX_TIM1_Init+0x114>)
 8000d88:	f00d fb2a 	bl	800e3e0 <HAL_TIM_PWM_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d92:	f000 fc4f 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000da6:	4619      	mov	r1, r3
 8000da8:	4824      	ldr	r0, [pc, #144]	@ (8000e3c <MX_TIM1_Init+0x114>)
 8000daa:	f00e fa69 	bl	800f280 <HAL_TIMEx_MasterConfigSynchronization>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000db4:	f000 fc3e 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db8:	2360      	movs	r3, #96	@ 0x60
 8000dba:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dd0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dd4:	220c      	movs	r2, #12
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4818      	ldr	r0, [pc, #96]	@ (8000e3c <MX_TIM1_Init+0x114>)
 8000dda:	f00d fd6f 	bl	800e8bc <HAL_TIM_PWM_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000de4:	f000 fc26 	bl	8001634 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4807      	ldr	r0, [pc, #28]	@ (8000e3c <MX_TIM1_Init+0x114>)
 8000e1e:	f00e fabd 	bl	800f39c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000e28:	f000 fc04 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e2c:	4803      	ldr	r0, [pc, #12]	@ (8000e3c <MX_TIM1_Init+0x114>)
 8000e2e:	f000 ff6b 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 8000e32:	bf00      	nop
 8000e34:	3758      	adds	r7, #88	@ 0x58
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	24000390 	.word	0x24000390
 8000e40:	40010000 	.word	0x40010000

08000e44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	@ 0x28
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	615a      	str	r2, [r3, #20]
 8000e66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e68:	4b2d      	ldr	r3, [pc, #180]	@ (8000f20 <MX_TIM2_Init+0xdc>)
 8000e6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e70:	4b2b      	ldr	r3, [pc, #172]	@ (8000f20 <MX_TIM2_Init+0xdc>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e76:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <MX_TIM2_Init+0xdc>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000e7c:	4b28      	ldr	r3, [pc, #160]	@ (8000f20 <MX_TIM2_Init+0xdc>)
 8000e7e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e84:	4b26      	ldr	r3, [pc, #152]	@ (8000f20 <MX_TIM2_Init+0xdc>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8a:	4b25      	ldr	r3, [pc, #148]	@ (8000f20 <MX_TIM2_Init+0xdc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e90:	4823      	ldr	r0, [pc, #140]	@ (8000f20 <MX_TIM2_Init+0xdc>)
 8000e92:	f00d faa5 	bl	800e3e0 <HAL_TIM_PWM_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e9c:	f000 fbca 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	481c      	ldr	r0, [pc, #112]	@ (8000f20 <MX_TIM2_Init+0xdc>)
 8000eb0:	f00e f9e6 	bl	800f280 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000eba:	f000 fbbb 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ebe:	2360      	movs	r3, #96	@ 0x60
 8000ec0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4812      	ldr	r0, [pc, #72]	@ (8000f20 <MX_TIM2_Init+0xdc>)
 8000ed6:	f00d fcf1 	bl	800e8bc <HAL_TIM_PWM_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ee0:	f000 fba8 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480d      	ldr	r0, [pc, #52]	@ (8000f20 <MX_TIM2_Init+0xdc>)
 8000eec:	f00d fce6 	bl	800e8bc <HAL_TIM_PWM_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000ef6:	f000 fb9d 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	2208      	movs	r2, #8
 8000efe:	4619      	mov	r1, r3
 8000f00:	4807      	ldr	r0, [pc, #28]	@ (8000f20 <MX_TIM2_Init+0xdc>)
 8000f02:	f00d fcdb 	bl	800e8bc <HAL_TIM_PWM_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000f0c:	f000 fb92 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f10:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <MX_TIM2_Init+0xdc>)
 8000f12:	f000 fef9 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 8000f16:	bf00      	nop
 8000f18:	3728      	adds	r7, #40	@ 0x28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	240003dc 	.word	0x240003dc

08000f24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f36:	463b      	mov	r3, r7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
 8000f44:	615a      	str	r2, [r3, #20]
 8000f46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f48:	4b27      	ldr	r3, [pc, #156]	@ (8000fe8 <MX_TIM3_Init+0xc4>)
 8000f4a:	4a28      	ldr	r2, [pc, #160]	@ (8000fec <MX_TIM3_Init+0xc8>)
 8000f4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f4e:	4b26      	ldr	r3, [pc, #152]	@ (8000fe8 <MX_TIM3_Init+0xc4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b24      	ldr	r3, [pc, #144]	@ (8000fe8 <MX_TIM3_Init+0xc4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000f5a:	4b23      	ldr	r3, [pc, #140]	@ (8000fe8 <MX_TIM3_Init+0xc4>)
 8000f5c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <MX_TIM3_Init+0xc4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe8 <MX_TIM3_Init+0xc4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f6e:	481e      	ldr	r0, [pc, #120]	@ (8000fe8 <MX_TIM3_Init+0xc4>)
 8000f70:	f00d fa36 	bl	800e3e0 <HAL_TIM_PWM_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000f7a:	f000 fb5b 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4816      	ldr	r0, [pc, #88]	@ (8000fe8 <MX_TIM3_Init+0xc4>)
 8000f8e:	f00e f977 	bl	800f280 <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f98:	f000 fb4c 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9c:	2360      	movs	r3, #96	@ 0x60
 8000f9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	2208      	movs	r2, #8
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480d      	ldr	r0, [pc, #52]	@ (8000fe8 <MX_TIM3_Init+0xc4>)
 8000fb4:	f00d fc82 	bl	800e8bc <HAL_TIM_PWM_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000fbe:	f000 fb39 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	220c      	movs	r2, #12
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4807      	ldr	r0, [pc, #28]	@ (8000fe8 <MX_TIM3_Init+0xc4>)
 8000fca:	f00d fc77 	bl	800e8bc <HAL_TIM_PWM_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000fd4:	f000 fb2e 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fd8:	4803      	ldr	r0, [pc, #12]	@ (8000fe8 <MX_TIM3_Init+0xc4>)
 8000fda:	f000 fe95 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	@ 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	24000428 	.word	0x24000428
 8000fec:	40000400 	.word	0x40000400

08000ff0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	615a      	str	r2, [r3, #20]
 8001012:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001014:	4b27      	ldr	r3, [pc, #156]	@ (80010b4 <MX_TIM4_Init+0xc4>)
 8001016:	4a28      	ldr	r2, [pc, #160]	@ (80010b8 <MX_TIM4_Init+0xc8>)
 8001018:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800101a:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <MX_TIM4_Init+0xc4>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b24      	ldr	r3, [pc, #144]	@ (80010b4 <MX_TIM4_Init+0xc4>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8001026:	4b23      	ldr	r3, [pc, #140]	@ (80010b4 <MX_TIM4_Init+0xc4>)
 8001028:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800102c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <MX_TIM4_Init+0xc4>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b1f      	ldr	r3, [pc, #124]	@ (80010b4 <MX_TIM4_Init+0xc4>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800103a:	481e      	ldr	r0, [pc, #120]	@ (80010b4 <MX_TIM4_Init+0xc4>)
 800103c:	f00d f9d0 	bl	800e3e0 <HAL_TIM_PWM_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001046:	f000 faf5 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4619      	mov	r1, r3
 8001058:	4816      	ldr	r0, [pc, #88]	@ (80010b4 <MX_TIM4_Init+0xc4>)
 800105a:	f00e f911 	bl	800f280 <HAL_TIMEx_MasterConfigSynchronization>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001064:	f000 fae6 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001068:	2360      	movs	r3, #96	@ 0x60
 800106a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001078:	463b      	mov	r3, r7
 800107a:	2208      	movs	r2, #8
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <MX_TIM4_Init+0xc4>)
 8001080:	f00d fc1c 	bl	800e8bc <HAL_TIM_PWM_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800108a:	f000 fad3 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	220c      	movs	r2, #12
 8001092:	4619      	mov	r1, r3
 8001094:	4807      	ldr	r0, [pc, #28]	@ (80010b4 <MX_TIM4_Init+0xc4>)
 8001096:	f00d fc11 	bl	800e8bc <HAL_TIM_PWM_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80010a0:	f000 fac8 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010a4:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <MX_TIM4_Init+0xc4>)
 80010a6:	f000 fe2f 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	@ 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	24000474 	.word	0x24000474
 80010b8:	40000800 	.word	0x40000800

080010bc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <MX_TIM14_Init+0x90>)
 80010d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001150 <MX_TIM14_Init+0x94>)
 80010d8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80010da:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <MX_TIM14_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <MX_TIM14_Init+0x90>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 80010e6:	4b19      	ldr	r3, [pc, #100]	@ (800114c <MX_TIM14_Init+0x90>)
 80010e8:	2205      	movs	r2, #5
 80010ea:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <MX_TIM14_Init+0x90>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010f2:	4b16      	ldr	r3, [pc, #88]	@ (800114c <MX_TIM14_Init+0x90>)
 80010f4:	2280      	movs	r2, #128	@ 0x80
 80010f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80010f8:	4814      	ldr	r0, [pc, #80]	@ (800114c <MX_TIM14_Init+0x90>)
 80010fa:	f00d f91a 	bl	800e332 <HAL_TIM_Base_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8001104:	f000 fa96 	bl	8001634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001108:	4810      	ldr	r0, [pc, #64]	@ (800114c <MX_TIM14_Init+0x90>)
 800110a:	f00d f969 	bl	800e3e0 <HAL_TIM_PWM_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8001114:	f000 fa8e 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001118:	2360      	movs	r3, #96	@ 0x60
 800111a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 800111c:	2303      	movs	r3, #3
 800111e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	4807      	ldr	r0, [pc, #28]	@ (800114c <MX_TIM14_Init+0x90>)
 8001130:	f00d fbc4 	bl	800e8bc <HAL_TIM_PWM_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 800113a:	f000 fa7b 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800113e:	4803      	ldr	r0, [pc, #12]	@ (800114c <MX_TIM14_Init+0x90>)
 8001140:	f000 fde2 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 8001144:	bf00      	nop
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	240004c0 	.word	0x240004c0
 8001150:	40002000 	.word	0x40002000

08001154 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001158:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <MX_USART1_UART_Init+0x90>)
 800115a:	4a23      	ldr	r2, [pc, #140]	@ (80011e8 <MX_USART1_UART_Init+0x94>)
 800115c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800115e:	4b21      	ldr	r3, [pc, #132]	@ (80011e4 <MX_USART1_UART_Init+0x90>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b1f      	ldr	r3, [pc, #124]	@ (80011e4 <MX_USART1_UART_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <MX_USART1_UART_Init+0x90>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001172:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <MX_USART1_UART_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <MX_USART1_UART_Init+0x90>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <MX_USART1_UART_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <MX_USART1_UART_Init+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_USART1_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_USART1_UART_Init+0x90>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <MX_USART1_UART_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800119c:	4811      	ldr	r0, [pc, #68]	@ (80011e4 <MX_USART1_UART_Init+0x90>)
 800119e:	f00e f999 	bl	800f4d4 <HAL_UART_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011a8:	f000 fa44 	bl	8001634 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	480d      	ldr	r0, [pc, #52]	@ (80011e4 <MX_USART1_UART_Init+0x90>)
 80011b0:	f00f f9a1 	bl	80104f6 <HAL_UARTEx_SetTxFifoThreshold>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011ba:	f000 fa3b 	bl	8001634 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011be:	2100      	movs	r1, #0
 80011c0:	4808      	ldr	r0, [pc, #32]	@ (80011e4 <MX_USART1_UART_Init+0x90>)
 80011c2:	f00f f9d6 	bl	8010572 <HAL_UARTEx_SetRxFifoThreshold>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011cc:	f000 fa32 	bl	8001634 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <MX_USART1_UART_Init+0x90>)
 80011d2:	f00f f957 	bl	8010484 <HAL_UARTEx_DisableFifoMode>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011dc:	f000 fa2a 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2400050c 	.word	0x2400050c
 80011e8:	40011000 	.word	0x40011000

080011ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <MX_DMA_Init+0x3c>)
 80011f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001228 <MX_DMA_Init+0x3c>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <MX_DMA_Init+0x3c>)
 8001204:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	200b      	movs	r0, #11
 8001216:	f001 f9de 	bl	80025d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800121a:	200b      	movs	r0, #11
 800121c:	f001 f9f5 	bl	800260a <HAL_NVIC_EnableIRQ>

}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	58024400 	.word	0x58024400

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	@ 0x30
 8001230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001242:	4b52      	ldr	r3, [pc, #328]	@ (800138c <MX_GPIO_Init+0x160>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001248:	4a50      	ldr	r2, [pc, #320]	@ (800138c <MX_GPIO_Init+0x160>)
 800124a:	f043 0310 	orr.w	r3, r3, #16
 800124e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001252:	4b4e      	ldr	r3, [pc, #312]	@ (800138c <MX_GPIO_Init+0x160>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001260:	4b4a      	ldr	r3, [pc, #296]	@ (800138c <MX_GPIO_Init+0x160>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001266:	4a49      	ldr	r2, [pc, #292]	@ (800138c <MX_GPIO_Init+0x160>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001270:	4b46      	ldr	r3, [pc, #280]	@ (800138c <MX_GPIO_Init+0x160>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	4b43      	ldr	r3, [pc, #268]	@ (800138c <MX_GPIO_Init+0x160>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001284:	4a41      	ldr	r2, [pc, #260]	@ (800138c <MX_GPIO_Init+0x160>)
 8001286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800128a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128e:	4b3f      	ldr	r3, [pc, #252]	@ (800138c <MX_GPIO_Init+0x160>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	4b3b      	ldr	r3, [pc, #236]	@ (800138c <MX_GPIO_Init+0x160>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a2:	4a3a      	ldr	r2, [pc, #232]	@ (800138c <MX_GPIO_Init+0x160>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ac:	4b37      	ldr	r3, [pc, #220]	@ (800138c <MX_GPIO_Init+0x160>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b34      	ldr	r3, [pc, #208]	@ (800138c <MX_GPIO_Init+0x160>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c0:	4a32      	ldr	r2, [pc, #200]	@ (800138c <MX_GPIO_Init+0x160>)
 80012c2:	f043 0302 	orr.w	r3, r3, #2
 80012c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ca:	4b30      	ldr	r3, [pc, #192]	@ (800138c <MX_GPIO_Init+0x160>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	4b2c      	ldr	r3, [pc, #176]	@ (800138c <MX_GPIO_Init+0x160>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012de:	4a2b      	ldr	r2, [pc, #172]	@ (800138c <MX_GPIO_Init+0x160>)
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e8:	4b28      	ldr	r3, [pc, #160]	@ (800138c <MX_GPIO_Init+0x160>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80012fc:	4824      	ldr	r0, [pc, #144]	@ (8001390 <MX_GPIO_Init+0x164>)
 80012fe:	f005 f9b7 	bl	8006670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	2108      	movs	r1, #8
 8001306:	4823      	ldr	r0, [pc, #140]	@ (8001394 <MX_GPIO_Init+0x168>)
 8001308:	f005 f9b2 	bl	8006670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	2101      	movs	r1, #1
 8001310:	4821      	ldr	r0, [pc, #132]	@ (8001398 <MX_GPIO_Init+0x16c>)
 8001312:	f005 f9ad 	bl	8006670 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001316:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	4818      	ldr	r0, [pc, #96]	@ (8001390 <MX_GPIO_Init+0x164>)
 8001330:	f004 ffee 	bl	8006310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001334:	2301      	movs	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	4812      	ldr	r0, [pc, #72]	@ (8001390 <MX_GPIO_Init+0x164>)
 8001348:	f004 ffe2 	bl	8006310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800134c:	2308      	movs	r3, #8
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	480c      	ldr	r0, [pc, #48]	@ (8001394 <MX_GPIO_Init+0x168>)
 8001364:	f004 ffd4 	bl	8006310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001368:	2301      	movs	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	4806      	ldr	r0, [pc, #24]	@ (8001398 <MX_GPIO_Init+0x16c>)
 8001380:	f004 ffc6 	bl	8006310 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001384:	bf00      	nop
 8001386:	3730      	adds	r7, #48	@ 0x30
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58024400 	.word	0x58024400
 8001390:	58020800 	.word	0x58020800
 8001394:	58020000 	.word	0x58020000
 8001398:	58020c00 	.word	0x58020c00

0800139c <CAM_GetRegister>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef CAM_GetRegister(uint8_t addr, uint8_t* pData, uint8_t haltOnError) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b09e      	sub	sp, #120	@ 0x78
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
 80013a8:	4613      	mov	r3, r2
 80013aa:	71bb      	strb	r3, [r7, #6]
	  HAL_StatusTypeDef ov_result;
	  uint8_t usb_msg[100] = {0};
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	2264      	movs	r2, #100	@ 0x64
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f013 ff13 	bl	80151e0 <memset>

	  ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &addr, 1, 100);
 80013ba:	1dfa      	adds	r2, r7, #7
 80013bc:	2364      	movs	r3, #100	@ 0x64
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	2143      	movs	r1, #67	@ 0x43
 80013c4:	482f      	ldr	r0, [pc, #188]	@ (8001484 <CAM_GetRegister+0xe8>)
 80013c6:	f005 fa09 	bl	80067dc <HAL_I2C_Master_Transmit>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	  if (ov_result) {
 80013d0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d020      	beq.n	800141a <CAM_GetRegister+0x7e>
		  if (haltOnError) {
 80013d8:	79bb      	ldrb	r3, [r7, #6]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d01a      	beq.n	8001414 <CAM_GetRegister+0x78>
			  sprintf(usb_msg, "TX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	461a      	mov	r2, r3
 80013e2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80013e6:	f107 0008 	add.w	r0, r7, #8
 80013ea:	4927      	ldr	r1, [pc, #156]	@ (8001488 <CAM_GetRegister+0xec>)
 80013ec:	f013 fed6 	bl	801519c <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7fe ff73 	bl	80002e0 <strlen>
 80013fa:	4602      	mov	r2, r0
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f013 fa4a 	bl	801489c <CDC_Transmit_FS>
				  HAL_Delay(1000);
 8001408:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800140c:	f000 ffd8 	bl	80023c0 <HAL_Delay>
			  while (1) {
 8001410:	bf00      	nop
 8001412:	e7ed      	b.n	80013f0 <CAM_GetRegister+0x54>
			  }
		  }
		  return ov_result;
 8001414:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001418:	e030      	b.n	800147c <CAM_GetRegister+0xe0>
	  }


	  ov_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, pData, 1, 100);
 800141a:	2364      	movs	r3, #100	@ 0x64
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2301      	movs	r3, #1
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	2143      	movs	r1, #67	@ 0x43
 8001424:	4817      	ldr	r0, [pc, #92]	@ (8001484 <CAM_GetRegister+0xe8>)
 8001426:	f005 faf1 	bl	8006a0c <HAL_I2C_Master_Receive>
 800142a:	4603      	mov	r3, r0
 800142c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	  if (ov_result) {
 8001430:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001434:	2b00      	cmp	r3, #0
 8001436:	d020      	beq.n	800147a <CAM_GetRegister+0xde>
		  if (haltOnError) {
 8001438:	79bb      	ldrb	r3, [r7, #6]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d01a      	beq.n	8001474 <CAM_GetRegister+0xd8>
			  sprintf(usb_msg, "RX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	461a      	mov	r2, r3
 8001442:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001446:	f107 0008 	add.w	r0, r7, #8
 800144a:	4910      	ldr	r1, [pc, #64]	@ (800148c <CAM_GetRegister+0xf0>)
 800144c:	f013 fea6 	bl	801519c <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe ff43 	bl	80002e0 <strlen>
 800145a:	4602      	mov	r2, r0
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f013 fa1a 	bl	801489c <CDC_Transmit_FS>
				  HAL_Delay(1000);
 8001468:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800146c:	f000 ffa8 	bl	80023c0 <HAL_Delay>
			  while (1) {
 8001470:	bf00      	nop
 8001472:	e7ed      	b.n	8001450 <CAM_GetRegister+0xb4>
			  }
		  }
		  return ov_result;
 8001474:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001478:	e000      	b.n	800147c <CAM_GetRegister+0xe0>
	  }


	  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3770      	adds	r7, #112	@ 0x70
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	24000238 	.word	0x24000238
 8001488:	08015b20 	.word	0x08015b20
 800148c:	08015b5c 	.word	0x08015b5c

08001490 <CAM_SetRegister>:

HAL_StatusTypeDef CAM_SetRegister(uint8_t addr, uint8_t data, uint8_t haltOnError) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b0a0      	sub	sp, #128	@ 0x80
 8001494:	af02      	add	r7, sp, #8
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
 800149a:	460b      	mov	r3, r1
 800149c:	71bb      	strb	r3, [r7, #6]
 800149e:	4613      	mov	r3, r2
 80014a0:	717b      	strb	r3, [r7, #5]
	  HAL_StatusTypeDef ov_result;
	  uint8_t usb_msg[100] = {0};
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	2264      	movs	r2, #100	@ 0x64
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f013 fe98 	bl	80151e0 <memset>

	  uint8_t reg_set[2] = {addr, data};
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	733b      	strb	r3, [r7, #12]
 80014b4:	79bb      	ldrb	r3, [r7, #6]
 80014b6:	737b      	strb	r3, [r7, #13]

	  ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_WRITE, reg_set, 2, 100);
 80014b8:	f107 020c 	add.w	r2, r7, #12
 80014bc:	2364      	movs	r3, #100	@ 0x64
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2302      	movs	r3, #2
 80014c2:	2142      	movs	r1, #66	@ 0x42
 80014c4:	4841      	ldr	r0, [pc, #260]	@ (80015cc <CAM_SetRegister+0x13c>)
 80014c6:	f005 f989 	bl	80067dc <HAL_I2C_Master_Transmit>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  if (ov_result) {
 80014d0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d01f      	beq.n	8001518 <CAM_SetRegister+0x88>
		  if (haltOnError) {
 80014d8:	797b      	ldrb	r3, [r7, #5]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d019      	beq.n	8001512 <CAM_SetRegister+0x82>
			  sprintf(usb_msg, "TX ERROR: Cannot write camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 80014de:	79fa      	ldrb	r2, [r7, #7]
 80014e0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80014e4:	f107 0010 	add.w	r0, r7, #16
 80014e8:	4939      	ldr	r1, [pc, #228]	@ (80015d0 <CAM_SetRegister+0x140>)
 80014ea:	f013 fe57 	bl	801519c <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7fe fef4 	bl	80002e0 <strlen>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f013 f9cb 	bl	801489c <CDC_Transmit_FS>
				  HAL_Delay(1000);
 8001506:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800150a:	f000 ff59 	bl	80023c0 <HAL_Delay>
			  while (1) {
 800150e:	bf00      	nop
 8001510:	e7ed      	b.n	80014ee <CAM_SetRegister+0x5e>
			  }
		  }
		  return ov_result;
 8001512:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001516:	e054      	b.n	80015c2 <CAM_SetRegister+0x132>
	  }

	  // Confirm write
	  uint8_t reg_get = 0x00;
 8001518:	2300      	movs	r3, #0
 800151a:	72fb      	strb	r3, [r7, #11]
	  ov_result = CAM_GetRegister(addr, &reg_get, 1);
 800151c:	f107 010b 	add.w	r1, r7, #11
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	2201      	movs	r2, #1
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff39 	bl	800139c <CAM_GetRegister>
 800152a:	4603      	mov	r3, r0
 800152c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  if (ov_result) {
 8001530:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001534:	2b00      	cmp	r3, #0
 8001536:	d01f      	beq.n	8001578 <CAM_SetRegister+0xe8>
		  if (haltOnError) {
 8001538:	797b      	ldrb	r3, [r7, #5]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d019      	beq.n	8001572 <CAM_SetRegister+0xe2>
			  sprintf(usb_msg, "CF ERROR: Cannot confirm camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 800153e:	79fa      	ldrb	r2, [r7, #7]
 8001540:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001544:	f107 0010 	add.w	r0, r7, #16
 8001548:	4922      	ldr	r1, [pc, #136]	@ (80015d4 <CAM_SetRegister+0x144>)
 800154a:	f013 fe27 	bl	801519c <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe fec4 	bl	80002e0 <strlen>
 8001558:	4602      	mov	r2, r0
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f013 f99b 	bl	801489c <CDC_Transmit_FS>
				  HAL_Delay(1000);
 8001566:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800156a:	f000 ff29 	bl	80023c0 <HAL_Delay>
			  while (1) {
 800156e:	bf00      	nop
 8001570:	e7ed      	b.n	800154e <CAM_SetRegister+0xbe>
			  }
		  }
		  else {
			  return ov_result;
 8001572:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001576:	e024      	b.n	80015c2 <CAM_SetRegister+0x132>
		  }
	  }

	  if (reg_get != data) {
 8001578:	7afb      	ldrb	r3, [r7, #11]
 800157a:	79ba      	ldrb	r2, [r7, #6]
 800157c:	429a      	cmp	r2, r3
 800157e:	d01f      	beq.n	80015c0 <CAM_SetRegister+0x130>
		  // Error, bad write
		  if (haltOnError) {
 8001580:	797b      	ldrb	r3, [r7, #5]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d01a      	beq.n	80015bc <CAM_SetRegister+0x12c>
			  sprintf(usb_msg, "CF ERROR: Bad write to register 0x%X - EXPECTED 0x%X, GOT 0x%X\r\n", addr, data, reg_get);
 8001586:	79fa      	ldrb	r2, [r7, #7]
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	7af9      	ldrb	r1, [r7, #11]
 800158c:	f107 0010 	add.w	r0, r7, #16
 8001590:	9100      	str	r1, [sp, #0]
 8001592:	4911      	ldr	r1, [pc, #68]	@ (80015d8 <CAM_SetRegister+0x148>)
 8001594:	f013 fe02 	bl	801519c <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fe9f 	bl	80002e0 <strlen>
 80015a2:	4602      	mov	r2, r0
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f013 f976 	bl	801489c <CDC_Transmit_FS>
				  HAL_Delay(1000);
 80015b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015b4:	f000 ff04 	bl	80023c0 <HAL_Delay>
			  while (1) {
 80015b8:	bf00      	nop
 80015ba:	e7ed      	b.n	8001598 <CAM_SetRegister+0x108>
			  }
		  }
		  return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <CAM_SetRegister+0x132>
	  }

	  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3778      	adds	r7, #120	@ 0x78
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	24000238 	.word	0x24000238
 80015d0:	08015b98 	.word	0x08015b98
 80015d4:	08015bd4 	.word	0x08015bd4
 80015d8:	08015c10 	.word	0x08015c10

080015dc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80015e2:	463b      	mov	r3, r7
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80015ee:	f001 f827 	bl	8002640 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80015f2:	2301      	movs	r3, #1
 80015f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80015fe:	231f      	movs	r3, #31
 8001600:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001602:	2387      	movs	r3, #135	@ 0x87
 8001604:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001606:	2300      	movs	r3, #0
 8001608:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800160a:	2300      	movs	r3, #0
 800160c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800160e:	2301      	movs	r3, #1
 8001610:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001612:	2301      	movs	r3, #1
 8001614:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800161e:	463b      	mov	r3, r7
 8001620:	4618      	mov	r0, r3
 8001622:	f001 f845 	bl	80026b0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001626:	2004      	movs	r0, #4
 8001628:	f001 f822 	bl	8002670 <HAL_MPU_Enable>

}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001638:	b672      	cpsid	i
}
 800163a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <Error_Handler+0x8>

08001640 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_MspInit+0x30>)
 8001648:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800164c:	4a08      	ldr	r2, [pc, #32]	@ (8001670 <HAL_MspInit+0x30>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_MspInit+0x30>)
 8001658:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	58024400 	.word	0x58024400

08001674 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08e      	sub	sp, #56	@ 0x38
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a79      	ldr	r2, [pc, #484]	@ (8001878 <HAL_DCMI_MspInit+0x204>)
 8001692:	4293      	cmp	r3, r2
 8001694:	f040 80ec 	bne.w	8001870 <HAL_DCMI_MspInit+0x1fc>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001698:	4b78      	ldr	r3, [pc, #480]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 800169a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800169e:	4a77      	ldr	r2, [pc, #476]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80016a8:	4b74      	ldr	r3, [pc, #464]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 80016aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	623b      	str	r3, [r7, #32]
 80016b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b6:	4b71      	ldr	r3, [pc, #452]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 80016b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016bc:	4a6f      	ldr	r2, [pc, #444]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c6:	4b6d      	ldr	r3, [pc, #436]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 80016c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016cc:	f003 0310 	and.w	r3, r3, #16
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b69      	ldr	r3, [pc, #420]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 80016d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016da:	4a68      	ldr	r2, [pc, #416]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e4:	4b65      	ldr	r3, [pc, #404]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 80016e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f2:	4b62      	ldr	r3, [pc, #392]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 80016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f8:	4a60      	ldr	r2, [pc, #384]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001702:	4b5e      	ldr	r3, [pc, #376]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 8001704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001710:	4b5a      	ldr	r3, [pc, #360]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 8001712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001716:	4a59      	ldr	r2, [pc, #356]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001720:	4b56      	ldr	r3, [pc, #344]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 8001722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	4b53      	ldr	r3, [pc, #332]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001734:	4a51      	ldr	r2, [pc, #324]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 8001736:	f043 0302 	orr.w	r3, r3, #2
 800173a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800173e:	4b4f      	ldr	r3, [pc, #316]	@ (800187c <HAL_DCMI_MspInit+0x208>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 800174c:	2373      	movs	r3, #115	@ 0x73
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800175c:	230d      	movs	r3, #13
 800175e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001764:	4619      	mov	r1, r3
 8001766:	4846      	ldr	r0, [pc, #280]	@ (8001880 <HAL_DCMI_MspInit+0x20c>)
 8001768:	f004 fdd2 	bl	8006310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800176c:	2350      	movs	r3, #80	@ 0x50
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800177c:	230d      	movs	r3, #13
 800177e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001784:	4619      	mov	r1, r3
 8001786:	483f      	ldr	r0, [pc, #252]	@ (8001884 <HAL_DCMI_MspInit+0x210>)
 8001788:	f004 fdc2 	bl	8006310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800178c:	23c0      	movs	r3, #192	@ 0xc0
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800179c:	230d      	movs	r3, #13
 800179e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	4838      	ldr	r0, [pc, #224]	@ (8001888 <HAL_DCMI_MspInit+0x214>)
 80017a8:	f004 fdb2 	bl	8006310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ac:	2308      	movs	r3, #8
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017bc:	230d      	movs	r3, #13
 80017be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c4:	4619      	mov	r1, r3
 80017c6:	4831      	ldr	r0, [pc, #196]	@ (800188c <HAL_DCMI_MspInit+0x218>)
 80017c8:	f004 fda2 	bl	8006310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017cc:	2380      	movs	r3, #128	@ 0x80
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017dc:	230d      	movs	r3, #13
 80017de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e4:	4619      	mov	r1, r3
 80017e6:	482a      	ldr	r0, [pc, #168]	@ (8001890 <HAL_DCMI_MspInit+0x21c>)
 80017e8:	f004 fd92 	bl	8006310 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80017ec:	4b29      	ldr	r3, [pc, #164]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 80017ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001898 <HAL_DCMI_MspInit+0x224>)
 80017f0:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80017f2:	4b28      	ldr	r3, [pc, #160]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 80017f4:	224b      	movs	r2, #75	@ 0x4b
 80017f6:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017f8:	4b26      	ldr	r3, [pc, #152]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80017fe:	4b25      	ldr	r3, [pc, #148]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001804:	4b23      	ldr	r3, [pc, #140]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 8001806:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800180a:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800180c:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 800180e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001812:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001814:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 8001816:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800181a:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800181c:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 800181e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001822:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001824:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 8001826:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800182a:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800182c:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 800182e:	2204      	movs	r2, #4
 8001830:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001832:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 8001834:	2203      	movs	r2, #3
 8001836:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001838:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 800183a:	2200      	movs	r2, #0
 800183c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800183e:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 8001840:	2200      	movs	r2, #0
 8001842:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001844:	4813      	ldr	r0, [pc, #76]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 8001846:	f001 fa69 	bl	8002d1c <HAL_DMA_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 8001850:	f7ff fef0 	bl	8001634 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a0f      	ldr	r2, [pc, #60]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 8001858:	649a      	str	r2, [r3, #72]	@ 0x48
 800185a:	4a0e      	ldr	r2, [pc, #56]	@ (8001894 <HAL_DCMI_MspInit+0x220>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	204e      	movs	r0, #78	@ 0x4e
 8001866:	f000 feb6 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800186a:	204e      	movs	r0, #78	@ 0x4e
 800186c:	f000 fecd 	bl	800260a <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001870:	bf00      	nop
 8001872:	3738      	adds	r7, #56	@ 0x38
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	48020000 	.word	0x48020000
 800187c:	58024400 	.word	0x58024400
 8001880:	58021000 	.word	0x58021000
 8001884:	58020000 	.word	0x58020000
 8001888:	58020800 	.word	0x58020800
 800188c:	58020c00 	.word	0x58020c00
 8001890:	58020400 	.word	0x58020400
 8001894:	240001c0 	.word	0x240001c0
 8001898:	40020010 	.word	0x40020010

0800189c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b0ba      	sub	sp, #232	@ 0xe8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	22c0      	movs	r2, #192	@ 0xc0
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f013 fc8f 	bl	80151e0 <memset>
  if(hi2c->Instance==I2C2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a38      	ldr	r2, [pc, #224]	@ (80019a8 <HAL_I2C_MspInit+0x10c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d169      	bne.n	80019a0 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018cc:	f04f 0208 	mov.w	r2, #8
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 80018d8:	2302      	movs	r3, #2
 80018da:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 80018dc:	230c      	movs	r3, #12
 80018de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80018e0:	2302      	movs	r3, #2
 80018e2:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80018e4:	2302      	movs	r3, #2
 80018e6:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 80018e8:	2303      	movs	r3, #3
 80018ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80018ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80018f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018f6:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80018fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001900:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	4618      	mov	r0, r3
 800190a:	f008 fe67 	bl	800a5dc <HAL_RCCEx_PeriphCLKConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 8001914:	f7ff fe8e 	bl	8001634 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001918:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <HAL_I2C_MspInit+0x110>)
 800191a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800191e:	4a23      	ldr	r2, [pc, #140]	@ (80019ac <HAL_I2C_MspInit+0x110>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001928:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <HAL_I2C_MspInit+0x110>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001936:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800193a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800193e:	2312      	movs	r3, #18
 8001940:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001944:	2301      	movs	r3, #1
 8001946:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001950:	2304      	movs	r3, #4
 8001952:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001956:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800195a:	4619      	mov	r1, r3
 800195c:	4814      	ldr	r0, [pc, #80]	@ (80019b0 <HAL_I2C_MspInit+0x114>)
 800195e:	f004 fcd7 	bl	8006310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001962:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_I2C_MspInit+0x110>)
 8001964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001968:	4a10      	ldr	r2, [pc, #64]	@ (80019ac <HAL_I2C_MspInit+0x110>)
 800196a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800196e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <HAL_I2C_MspInit+0x110>)
 8001974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001978:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	2021      	movs	r0, #33	@ 0x21
 8001986:	f000 fe26 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800198a:	2021      	movs	r0, #33	@ 0x21
 800198c:	f000 fe3d 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	2022      	movs	r0, #34	@ 0x22
 8001996:	f000 fe1e 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800199a:	2022      	movs	r0, #34	@ 0x22
 800199c:	f000 fe35 	bl	800260a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80019a0:	bf00      	nop
 80019a2:	37e8      	adds	r7, #232	@ 0xe8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40005800 	.word	0x40005800
 80019ac:	58024400 	.word	0x58024400
 80019b0:	58020400 	.word	0x58020400

080019b4 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b0bc      	sub	sp, #240	@ 0xf0
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019cc:	f107 0318 	add.w	r3, r7, #24
 80019d0:	22c0      	movs	r2, #192	@ 0xc0
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f013 fc03 	bl	80151e0 <memset>
  if(hsd->Instance==SDMMC1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a38      	ldr	r2, [pc, #224]	@ (8001ac0 <HAL_SD_MspInit+0x10c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d169      	bne.n	8001ab8 <HAL_SD_MspInit+0x104>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80019e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	4618      	mov	r0, r3
 80019fa:	f008 fdef 	bl	800a5dc <HAL_RCCEx_PeriphCLKConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001a04:	f7ff fe16 	bl	8001634 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001a08:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac4 <HAL_SD_MspInit+0x110>)
 8001a0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac4 <HAL_SD_MspInit+0x110>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a14:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001a18:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <HAL_SD_MspInit+0x110>)
 8001a1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a26:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <HAL_SD_MspInit+0x110>)
 8001a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a2c:	4a25      	ldr	r2, [pc, #148]	@ (8001ac4 <HAL_SD_MspInit+0x110>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a36:	4b23      	ldr	r3, [pc, #140]	@ (8001ac4 <HAL_SD_MspInit+0x110>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a44:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac4 <HAL_SD_MspInit+0x110>)
 8001a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac4 <HAL_SD_MspInit+0x110>)
 8001a4c:	f043 0308 	orr.w	r3, r3, #8
 8001a50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <HAL_SD_MspInit+0x110>)
 8001a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a62:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001a66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a76:	2303      	movs	r3, #3
 8001a78:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001a7c:	230c      	movs	r3, #12
 8001a7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a82:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a86:	4619      	mov	r1, r3
 8001a88:	480f      	ldr	r0, [pc, #60]	@ (8001ac8 <HAL_SD_MspInit+0x114>)
 8001a8a:	f004 fc41 	bl	8006310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001aa6:	230c      	movs	r3, #12
 8001aa8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4806      	ldr	r0, [pc, #24]	@ (8001acc <HAL_SD_MspInit+0x118>)
 8001ab4:	f004 fc2c 	bl	8006310 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001ab8:	bf00      	nop
 8001aba:	37f0      	adds	r7, #240	@ 0xf0
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	52007000 	.word	0x52007000
 8001ac4:	58024400 	.word	0x58024400
 8001ac8:	58020800 	.word	0x58020800
 8001acc:	58020c00 	.word	0x58020c00

08001ad0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0bc      	sub	sp, #240	@ 0xf0
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	22c0      	movs	r2, #192	@ 0xc0
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f013 fb75 	bl	80151e0 <memset>
  if(hspi->Instance==SPI2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a38      	ldr	r2, [pc, #224]	@ (8001bdc <HAL_SPI_MspInit+0x10c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d169      	bne.n	8001bd4 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001b00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b10:	f107 0318 	add.w	r3, r7, #24
 8001b14:	4618      	mov	r0, r3
 8001b16:	f008 fd61 	bl	800a5dc <HAL_RCCEx_PeriphCLKConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001b20:	f7ff fd88 	bl	8001634 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b24:	4b2e      	ldr	r3, [pc, #184]	@ (8001be0 <HAL_SPI_MspInit+0x110>)
 8001b26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001be0 <HAL_SPI_MspInit+0x110>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b34:	4b2a      	ldr	r3, [pc, #168]	@ (8001be0 <HAL_SPI_MspInit+0x110>)
 8001b36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	4b27      	ldr	r3, [pc, #156]	@ (8001be0 <HAL_SPI_MspInit+0x110>)
 8001b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b48:	4a25      	ldr	r2, [pc, #148]	@ (8001be0 <HAL_SPI_MspInit+0x110>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b52:	4b23      	ldr	r3, [pc, #140]	@ (8001be0 <HAL_SPI_MspInit+0x110>)
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b60:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <HAL_SPI_MspInit+0x110>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b66:	4a1e      	ldr	r2, [pc, #120]	@ (8001be0 <HAL_SPI_MspInit+0x110>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b70:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_SPI_MspInit+0x110>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001b7e:	2306      	movs	r3, #6
 8001b80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b96:	2305      	movs	r3, #5
 8001b98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4810      	ldr	r0, [pc, #64]	@ (8001be4 <HAL_SPI_MspInit+0x114>)
 8001ba4:	f004 fbb4 	bl	8006310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bc2:	2305      	movs	r3, #5
 8001bc4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4806      	ldr	r0, [pc, #24]	@ (8001be8 <HAL_SPI_MspInit+0x118>)
 8001bd0:	f004 fb9e 	bl	8006310 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001bd4:	bf00      	nop
 8001bd6:	37f0      	adds	r7, #240	@ 0xf0
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40003800 	.word	0x40003800
 8001be0:	58024400 	.word	0x58024400
 8001be4:	58020800 	.word	0x58020800
 8001be8:	58020400 	.word	0x58020400

08001bec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca8 <HAL_TIM_PWM_MspInit+0xbc>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10f      	bne.n	8001c1e <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8001cac <HAL_TIM_PWM_MspInit+0xc0>)
 8001c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c04:	4a29      	ldr	r2, [pc, #164]	@ (8001cac <HAL_TIM_PWM_MspInit+0xc0>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c0e:	4b27      	ldr	r3, [pc, #156]	@ (8001cac <HAL_TIM_PWM_MspInit+0xc0>)
 8001c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c1c:	e03d      	b.n	8001c9a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c26:	d10f      	bne.n	8001c48 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c28:	4b20      	ldr	r3, [pc, #128]	@ (8001cac <HAL_TIM_PWM_MspInit+0xc0>)
 8001c2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cac <HAL_TIM_PWM_MspInit+0xc0>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c38:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <HAL_TIM_PWM_MspInit+0xc0>)
 8001c3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
}
 8001c46:	e028      	b.n	8001c9a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a18      	ldr	r2, [pc, #96]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0xc4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10f      	bne.n	8001c72 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c52:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <HAL_TIM_PWM_MspInit+0xc0>)
 8001c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c58:	4a14      	ldr	r2, [pc, #80]	@ (8001cac <HAL_TIM_PWM_MspInit+0xc0>)
 8001c5a:	f043 0302 	orr.w	r3, r3, #2
 8001c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c62:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <HAL_TIM_PWM_MspInit+0xc0>)
 8001c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	e013      	b.n	8001c9a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb4 <HAL_TIM_PWM_MspInit+0xc8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d10e      	bne.n	8001c9a <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <HAL_TIM_PWM_MspInit+0xc0>)
 8001c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c82:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <HAL_TIM_PWM_MspInit+0xc0>)
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c8c:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <HAL_TIM_PWM_MspInit+0xc0>)
 8001c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
}
 8001c9a:	bf00      	nop
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	58024400 	.word	0x58024400
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40000800 	.word	0x40000800

08001cb8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0e      	ldr	r2, [pc, #56]	@ (8001d00 <HAL_TIM_Base_MspInit+0x48>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d116      	bne.n	8001cf8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001cca:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <HAL_TIM_Base_MspInit+0x4c>)
 8001ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8001d04 <HAL_TIM_Base_MspInit+0x4c>)
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cda:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <HAL_TIM_Base_MspInit+0x4c>)
 8001cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	202d      	movs	r0, #45	@ 0x2d
 8001cee:	f000 fc72 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001cf2:	202d      	movs	r0, #45	@ 0x2d
 8001cf4:	f000 fc89 	bl	800260a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40002000 	.word	0x40002000
 8001d04:	58024400 	.word	0x58024400

08001d08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	@ 0x30
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a5d      	ldr	r2, [pc, #372]	@ (8001e9c <HAL_TIM_MspPostInit+0x194>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d120      	bne.n	8001d6c <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ea0 <HAL_TIM_MspPostInit+0x198>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d30:	4a5b      	ldr	r2, [pc, #364]	@ (8001ea0 <HAL_TIM_MspPostInit+0x198>)
 8001d32:	f043 0310 	orr.w	r3, r3, #16
 8001d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d3a:	4b59      	ldr	r3, [pc, #356]	@ (8001ea0 <HAL_TIM_MspPostInit+0x198>)
 8001d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d5e:	f107 031c 	add.w	r3, r7, #28
 8001d62:	4619      	mov	r1, r3
 8001d64:	484f      	ldr	r0, [pc, #316]	@ (8001ea4 <HAL_TIM_MspPostInit+0x19c>)
 8001d66:	f004 fad3 	bl	8006310 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001d6a:	e093      	b.n	8001e94 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d74:	d11f      	bne.n	8001db6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea0 <HAL_TIM_MspPostInit+0x198>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d7c:	4a48      	ldr	r2, [pc, #288]	@ (8001ea0 <HAL_TIM_MspPostInit+0x198>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d86:	4b46      	ldr	r3, [pc, #280]	@ (8001ea0 <HAL_TIM_MspPostInit+0x198>)
 8001d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001d94:	2307      	movs	r3, #7
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001da4:	2301      	movs	r3, #1
 8001da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4619      	mov	r1, r3
 8001dae:	483e      	ldr	r0, [pc, #248]	@ (8001ea8 <HAL_TIM_MspPostInit+0x1a0>)
 8001db0:	f004 faae 	bl	8006310 <HAL_GPIO_Init>
}
 8001db4:	e06e      	b.n	8001e94 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a3c      	ldr	r2, [pc, #240]	@ (8001eac <HAL_TIM_MspPostInit+0x1a4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d11f      	bne.n	8001e00 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc0:	4b37      	ldr	r3, [pc, #220]	@ (8001ea0 <HAL_TIM_MspPostInit+0x198>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc6:	4a36      	ldr	r2, [pc, #216]	@ (8001ea0 <HAL_TIM_MspPostInit+0x198>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd0:	4b33      	ldr	r3, [pc, #204]	@ (8001ea0 <HAL_TIM_MspPostInit+0x198>)
 8001dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dde:	2303      	movs	r3, #3
 8001de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dee:	2302      	movs	r3, #2
 8001df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	482d      	ldr	r0, [pc, #180]	@ (8001eb0 <HAL_TIM_MspPostInit+0x1a8>)
 8001dfa:	f004 fa89 	bl	8006310 <HAL_GPIO_Init>
}
 8001dfe:	e049      	b.n	8001e94 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb4 <HAL_TIM_MspPostInit+0x1ac>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d120      	bne.n	8001e4c <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0a:	4b25      	ldr	r3, [pc, #148]	@ (8001ea0 <HAL_TIM_MspPostInit+0x198>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e10:	4a23      	ldr	r2, [pc, #140]	@ (8001ea0 <HAL_TIM_MspPostInit+0x198>)
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e1a:	4b21      	ldr	r3, [pc, #132]	@ (8001ea0 <HAL_TIM_MspPostInit+0x198>)
 8001e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e28:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	4619      	mov	r1, r3
 8001e44:	481a      	ldr	r0, [pc, #104]	@ (8001eb0 <HAL_TIM_MspPostInit+0x1a8>)
 8001e46:	f004 fa63 	bl	8006310 <HAL_GPIO_Init>
}
 8001e4a:	e023      	b.n	8001e94 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a19      	ldr	r2, [pc, #100]	@ (8001eb8 <HAL_TIM_MspPostInit+0x1b0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d11e      	bne.n	8001e94 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <HAL_TIM_MspPostInit+0x198>)
 8001e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e5c:	4a10      	ldr	r2, [pc, #64]	@ (8001ea0 <HAL_TIM_MspPostInit+0x198>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <HAL_TIM_MspPostInit+0x198>)
 8001e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e74:	2380      	movs	r3, #128	@ 0x80
 8001e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001e84:	2309      	movs	r3, #9
 8001e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4806      	ldr	r0, [pc, #24]	@ (8001ea8 <HAL_TIM_MspPostInit+0x1a0>)
 8001e90:	f004 fa3e 	bl	8006310 <HAL_GPIO_Init>
}
 8001e94:	bf00      	nop
 8001e96:	3730      	adds	r7, #48	@ 0x30
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	58024400 	.word	0x58024400
 8001ea4:	58021000 	.word	0x58021000
 8001ea8:	58020000 	.word	0x58020000
 8001eac:	40000400 	.word	0x40000400
 8001eb0:	58020400 	.word	0x58020400
 8001eb4:	40000800 	.word	0x40000800
 8001eb8:	40002000 	.word	0x40002000

08001ebc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b0ba      	sub	sp, #232	@ 0xe8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	22c0      	movs	r2, #192	@ 0xc0
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f013 f97f 	bl	80151e0 <memset>
  if(huart->Instance==USART1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a27      	ldr	r2, [pc, #156]	@ (8001f84 <HAL_UART_MspInit+0xc8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d146      	bne.n	8001f7a <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001eec:	f04f 0201 	mov.w	r2, #1
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001efe:	f107 0310 	add.w	r3, r7, #16
 8001f02:	4618      	mov	r0, r3
 8001f04:	f008 fb6a 	bl	800a5dc <HAL_RCCEx_PeriphCLKConfig>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001f0e:	f7ff fb91 	bl	8001634 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f12:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <HAL_UART_MspInit+0xcc>)
 8001f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f18:	4a1b      	ldr	r2, [pc, #108]	@ (8001f88 <HAL_UART_MspInit+0xcc>)
 8001f1a:	f043 0310 	orr.w	r3, r3, #16
 8001f1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f22:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <HAL_UART_MspInit+0xcc>)
 8001f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f30:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <HAL_UART_MspInit+0xcc>)
 8001f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f36:	4a14      	ldr	r2, [pc, #80]	@ (8001f88 <HAL_UART_MspInit+0xcc>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f40:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <HAL_UART_MspInit+0xcc>)
 8001f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001f4e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001f52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f72:	4619      	mov	r1, r3
 8001f74:	4805      	ldr	r0, [pc, #20]	@ (8001f8c <HAL_UART_MspInit+0xd0>)
 8001f76:	f004 f9cb 	bl	8006310 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f7a:	bf00      	nop
 8001f7c:	37e8      	adds	r7, #232	@ 0xe8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40011000 	.word	0x40011000
 8001f88:	58024400 	.word	0x58024400
 8001f8c:	58020400 	.word	0x58020400

08001f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <NMI_Handler+0x4>

08001f98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <BusFault_Handler+0x4>

08001fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <UsageFault_Handler+0x4>

08001fb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe6:	f000 f9cb 	bl	8002380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <DMA1_Stream0_IRQHandler+0x10>)
 8001ff6:	f002 f9bb 	bl	8004370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	240001c0 	.word	0x240001c0

08002004 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <I2C2_EV_IRQHandler+0x10>)
 800200a:	f004 fdf5 	bl	8006bf8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	24000238 	.word	0x24000238

08002018 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800201c:	4802      	ldr	r0, [pc, #8]	@ (8002028 <I2C2_ER_IRQHandler+0x10>)
 800201e:	f004 fe05 	bl	8006c2c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	24000238 	.word	0x24000238

0800202c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002030:	4802      	ldr	r0, [pc, #8]	@ (800203c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002032:	f00c fb3b 	bl	800e6ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	240004c0 	.word	0x240004c0

08002040 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002044:	4802      	ldr	r0, [pc, #8]	@ (8002050 <DCMI_IRQHandler+0x10>)
 8002046:	f000 fd0f 	bl	8002a68 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	24000170 	.word	0x24000170

08002054 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002058:	4802      	ldr	r0, [pc, #8]	@ (8002064 <OTG_FS_IRQHandler+0x10>)
 800205a:	f006 f92f 	bl	80082bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	24001a88 	.word	0x24001a88

08002068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002070:	4a14      	ldr	r2, [pc, #80]	@ (80020c4 <_sbrk+0x5c>)
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <_sbrk+0x60>)
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800207c:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <_sbrk+0x64>)
 8002086:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <_sbrk+0x68>)
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208a:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <_sbrk+0x64>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	429a      	cmp	r2, r3
 8002096:	d207      	bcs.n	80020a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002098:	f013 f8aa 	bl	80151f0 <__errno>
 800209c:	4603      	mov	r3, r0
 800209e:	220c      	movs	r2, #12
 80020a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	e009      	b.n	80020bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a8:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ae:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	4a05      	ldr	r2, [pc, #20]	@ (80020cc <_sbrk+0x64>)
 80020b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	24080000 	.word	0x24080000
 80020c8:	00000400 	.word	0x00000400
 80020cc:	240005a0 	.word	0x240005a0
 80020d0:	240022d8 	.word	0x240022d8

080020d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020d8:	4b43      	ldr	r3, [pc, #268]	@ (80021e8 <SystemInit+0x114>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020de:	4a42      	ldr	r2, [pc, #264]	@ (80021e8 <SystemInit+0x114>)
 80020e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020e8:	4b40      	ldr	r3, [pc, #256]	@ (80021ec <SystemInit+0x118>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	2b06      	cmp	r3, #6
 80020f2:	d807      	bhi.n	8002104 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020f4:	4b3d      	ldr	r3, [pc, #244]	@ (80021ec <SystemInit+0x118>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 030f 	bic.w	r3, r3, #15
 80020fc:	4a3b      	ldr	r2, [pc, #236]	@ (80021ec <SystemInit+0x118>)
 80020fe:	f043 0307 	orr.w	r3, r3, #7
 8002102:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002104:	4b3a      	ldr	r3, [pc, #232]	@ (80021f0 <SystemInit+0x11c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a39      	ldr	r2, [pc, #228]	@ (80021f0 <SystemInit+0x11c>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002110:	4b37      	ldr	r3, [pc, #220]	@ (80021f0 <SystemInit+0x11c>)
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002116:	4b36      	ldr	r3, [pc, #216]	@ (80021f0 <SystemInit+0x11c>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4935      	ldr	r1, [pc, #212]	@ (80021f0 <SystemInit+0x11c>)
 800211c:	4b35      	ldr	r3, [pc, #212]	@ (80021f4 <SystemInit+0x120>)
 800211e:	4013      	ands	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002122:	4b32      	ldr	r3, [pc, #200]	@ (80021ec <SystemInit+0x118>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800212e:	4b2f      	ldr	r3, [pc, #188]	@ (80021ec <SystemInit+0x118>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 030f 	bic.w	r3, r3, #15
 8002136:	4a2d      	ldr	r2, [pc, #180]	@ (80021ec <SystemInit+0x118>)
 8002138:	f043 0307 	orr.w	r3, r3, #7
 800213c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800213e:	4b2c      	ldr	r3, [pc, #176]	@ (80021f0 <SystemInit+0x11c>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002144:	4b2a      	ldr	r3, [pc, #168]	@ (80021f0 <SystemInit+0x11c>)
 8002146:	2200      	movs	r2, #0
 8002148:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800214a:	4b29      	ldr	r3, [pc, #164]	@ (80021f0 <SystemInit+0x11c>)
 800214c:	2200      	movs	r2, #0
 800214e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002150:	4b27      	ldr	r3, [pc, #156]	@ (80021f0 <SystemInit+0x11c>)
 8002152:	4a29      	ldr	r2, [pc, #164]	@ (80021f8 <SystemInit+0x124>)
 8002154:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002156:	4b26      	ldr	r3, [pc, #152]	@ (80021f0 <SystemInit+0x11c>)
 8002158:	4a28      	ldr	r2, [pc, #160]	@ (80021fc <SystemInit+0x128>)
 800215a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800215c:	4b24      	ldr	r3, [pc, #144]	@ (80021f0 <SystemInit+0x11c>)
 800215e:	4a28      	ldr	r2, [pc, #160]	@ (8002200 <SystemInit+0x12c>)
 8002160:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002162:	4b23      	ldr	r3, [pc, #140]	@ (80021f0 <SystemInit+0x11c>)
 8002164:	2200      	movs	r2, #0
 8002166:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002168:	4b21      	ldr	r3, [pc, #132]	@ (80021f0 <SystemInit+0x11c>)
 800216a:	4a25      	ldr	r2, [pc, #148]	@ (8002200 <SystemInit+0x12c>)
 800216c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800216e:	4b20      	ldr	r3, [pc, #128]	@ (80021f0 <SystemInit+0x11c>)
 8002170:	2200      	movs	r2, #0
 8002172:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002174:	4b1e      	ldr	r3, [pc, #120]	@ (80021f0 <SystemInit+0x11c>)
 8002176:	4a22      	ldr	r2, [pc, #136]	@ (8002200 <SystemInit+0x12c>)
 8002178:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800217a:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <SystemInit+0x11c>)
 800217c:	2200      	movs	r2, #0
 800217e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002180:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <SystemInit+0x11c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1a      	ldr	r2, [pc, #104]	@ (80021f0 <SystemInit+0x11c>)
 8002186:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800218a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800218c:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <SystemInit+0x11c>)
 800218e:	2200      	movs	r2, #0
 8002190:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002192:	4b1c      	ldr	r3, [pc, #112]	@ (8002204 <SystemInit+0x130>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b1c      	ldr	r3, [pc, #112]	@ (8002208 <SystemInit+0x134>)
 8002198:	4013      	ands	r3, r2
 800219a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800219e:	d202      	bcs.n	80021a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80021a0:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <SystemInit+0x138>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80021a6:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <SystemInit+0x11c>)
 80021a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d113      	bne.n	80021dc <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80021b4:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <SystemInit+0x11c>)
 80021b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021ba:	4a0d      	ldr	r2, [pc, #52]	@ (80021f0 <SystemInit+0x11c>)
 80021bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021c4:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <SystemInit+0x13c>)
 80021c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80021ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80021cc:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <SystemInit+0x11c>)
 80021ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021d2:	4a07      	ldr	r2, [pc, #28]	@ (80021f0 <SystemInit+0x11c>)
 80021d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00
 80021ec:	52002000 	.word	0x52002000
 80021f0:	58024400 	.word	0x58024400
 80021f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80021f8:	02020200 	.word	0x02020200
 80021fc:	01ff0000 	.word	0x01ff0000
 8002200:	01010280 	.word	0x01010280
 8002204:	5c001000 	.word	0x5c001000
 8002208:	ffff0000 	.word	0xffff0000
 800220c:	51008108 	.word	0x51008108
 8002210:	52004000 	.word	0x52004000

08002214 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002218:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <ExitRun0Mode+0x2c>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a08      	ldr	r2, [pc, #32]	@ (8002240 <ExitRun0Mode+0x2c>)
 800221e:	f043 0302 	orr.w	r3, r3, #2
 8002222:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002224:	bf00      	nop
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <ExitRun0Mode+0x2c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f9      	beq.n	8002226 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002232:	bf00      	nop
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	58024800 	.word	0x58024800

08002244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002244:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002280 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002248:	f7ff ffe4 	bl	8002214 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800224c:	f7ff ff42 	bl	80020d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002250:	480c      	ldr	r0, [pc, #48]	@ (8002284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002252:	490d      	ldr	r1, [pc, #52]	@ (8002288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002254:	4a0d      	ldr	r2, [pc, #52]	@ (800228c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002258:	e002      	b.n	8002260 <LoopCopyDataInit>

0800225a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800225c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225e:	3304      	adds	r3, #4

08002260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002264:	d3f9      	bcc.n	800225a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002266:	4a0a      	ldr	r2, [pc, #40]	@ (8002290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002268:	4c0a      	ldr	r4, [pc, #40]	@ (8002294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800226c:	e001      	b.n	8002272 <LoopFillZerobss>

0800226e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002270:	3204      	adds	r2, #4

08002272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002274:	d3fb      	bcc.n	800226e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002276:	f012 ffc1 	bl	80151fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800227a:	f7fe fa1f 	bl	80006bc <main>
  bx  lr
 800227e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002280:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002284:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002288:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 800228c:	08015d20 	.word	0x08015d20
  ldr r2, =_sbss
 8002290:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8002294:	240022d4 	.word	0x240022d4

08002298 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002298:	e7fe      	b.n	8002298 <ADC3_IRQHandler>
	...

0800229c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a2:	2003      	movs	r0, #3
 80022a4:	f000 f98c 	bl	80025c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022a8:	f007 ffc2 	bl	800a230 <HAL_RCC_GetSysClockFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <HAL_Init+0x68>)
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	4913      	ldr	r1, [pc, #76]	@ (8002308 <HAL_Init+0x6c>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002304 <HAL_Init+0x68>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002308 <HAL_Init+0x6c>)
 80022d0:	5cd3      	ldrb	r3, [r2, r3]
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
 80022dc:	4a0b      	ldr	r2, [pc, #44]	@ (800230c <HAL_Init+0x70>)
 80022de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002310 <HAL_Init+0x74>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022e6:	200f      	movs	r0, #15
 80022e8:	f000 f814 	bl	8002314 <HAL_InitTick>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e002      	b.n	80022fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022f6:	f7ff f9a3 	bl	8001640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	58024400 	.word	0x58024400
 8002308:	08015c9c 	.word	0x08015c9c
 800230c:	24000004 	.word	0x24000004
 8002310:	24000000 	.word	0x24000000

08002314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800231c:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <HAL_InitTick+0x60>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e021      	b.n	800236c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002328:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <HAL_InitTick+0x64>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <HAL_InitTick+0x60>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002336:	fbb3 f3f1 	udiv	r3, r3, r1
 800233a:	fbb2 f3f3 	udiv	r3, r2, r3
 800233e:	4618      	mov	r0, r3
 8002340:	f000 f971 	bl	8002626 <HAL_SYSTICK_Config>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e00e      	b.n	800236c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b0f      	cmp	r3, #15
 8002352:	d80a      	bhi.n	800236a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002354:	2200      	movs	r2, #0
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	f000 f93b 	bl	80025d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002360:	4a06      	ldr	r2, [pc, #24]	@ (800237c <HAL_InitTick+0x68>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	e000      	b.n	800236c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	2400000c 	.word	0x2400000c
 8002378:	24000000 	.word	0x24000000
 800237c:	24000008 	.word	0x24000008

08002380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002384:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_IncTick+0x20>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_IncTick+0x24>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4413      	add	r3, r2
 8002390:	4a04      	ldr	r2, [pc, #16]	@ (80023a4 <HAL_IncTick+0x24>)
 8002392:	6013      	str	r3, [r2, #0]
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	2400000c 	.word	0x2400000c
 80023a4:	240005a4 	.word	0x240005a4

080023a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return uwTick;
 80023ac:	4b03      	ldr	r3, [pc, #12]	@ (80023bc <HAL_GetTick+0x14>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	240005a4 	.word	0x240005a4

080023c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff ffee 	bl	80023a8 <HAL_GetTick>
 80023cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d005      	beq.n	80023e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023da:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <HAL_Delay+0x44>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e6:	bf00      	nop
 80023e8:	f7ff ffde 	bl	80023a8 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d8f7      	bhi.n	80023e8 <HAL_Delay+0x28>
  {
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	2400000c 	.word	0x2400000c

08002408 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800240c:	4b03      	ldr	r3, [pc, #12]	@ (800241c <HAL_GetREVID+0x14>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	0c1b      	lsrs	r3, r3, #16
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	5c001000 	.word	0x5c001000

08002420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002430:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <__NVIC_SetPriorityGrouping+0x40>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800243c:	4013      	ands	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002448:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	4313      	orrs	r3, r2
 800244c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244e:	4a04      	ldr	r2, [pc, #16]	@ (8002460 <__NVIC_SetPriorityGrouping+0x40>)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	60d3      	str	r3, [r2, #12]
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00
 8002464:	05fa0000 	.word	0x05fa0000

08002468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800246c:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <__NVIC_GetPriorityGrouping+0x18>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	f003 0307 	and.w	r3, r3, #7
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800248e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002492:	2b00      	cmp	r3, #0
 8002494:	db0b      	blt.n	80024ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	4907      	ldr	r1, [pc, #28]	@ (80024bc <__NVIC_EnableIRQ+0x38>)
 800249e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2001      	movs	r0, #1
 80024a6:	fa00 f202 	lsl.w	r2, r0, r2
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	6039      	str	r1, [r7, #0]
 80024ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db0a      	blt.n	80024ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	490c      	ldr	r1, [pc, #48]	@ (800250c <__NVIC_SetPriority+0x4c>)
 80024da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024de:	0112      	lsls	r2, r2, #4
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	440b      	add	r3, r1
 80024e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e8:	e00a      	b.n	8002500 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4908      	ldr	r1, [pc, #32]	@ (8002510 <__NVIC_SetPriority+0x50>)
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	3b04      	subs	r3, #4
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	440b      	add	r3, r1
 80024fe:	761a      	strb	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000e100 	.word	0xe000e100
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	@ 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f1c3 0307 	rsb	r3, r3, #7
 800252e:	2b04      	cmp	r3, #4
 8002530:	bf28      	it	cs
 8002532:	2304      	movcs	r3, #4
 8002534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3304      	adds	r3, #4
 800253a:	2b06      	cmp	r3, #6
 800253c:	d902      	bls.n	8002544 <NVIC_EncodePriority+0x30>
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3b03      	subs	r3, #3
 8002542:	e000      	b.n	8002546 <NVIC_EncodePriority+0x32>
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	401a      	ands	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800255c:	f04f 31ff 	mov.w	r1, #4294967295
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43d9      	mvns	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	4313      	orrs	r3, r2
         );
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	@ 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800258c:	d301      	bcc.n	8002592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258e:	2301      	movs	r3, #1
 8002590:	e00f      	b.n	80025b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002592:	4a0a      	ldr	r2, [pc, #40]	@ (80025bc <SysTick_Config+0x40>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259a:	210f      	movs	r1, #15
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	f7ff ff8e 	bl	80024c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a4:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <SysTick_Config+0x40>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025aa:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <SysTick_Config+0x40>)
 80025ac:	2207      	movs	r2, #7
 80025ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	e000e010 	.word	0xe000e010

080025c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff29 	bl	8002420 <__NVIC_SetPriorityGrouping>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025e4:	f7ff ff40 	bl	8002468 <__NVIC_GetPriorityGrouping>
 80025e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f7ff ff90 	bl	8002514 <NVIC_EncodePriority>
 80025f4:	4602      	mov	r2, r0
 80025f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff5f 	bl	80024c0 <__NVIC_SetPriority>
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff33 	bl	8002484 <__NVIC_EnableIRQ>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ffa4 	bl	800257c <SysTick_Config>
 8002634:	4603      	mov	r3, r0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002644:	f3bf 8f5f 	dmb	sy
}
 8002648:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800264a:	4b07      	ldr	r3, [pc, #28]	@ (8002668 <HAL_MPU_Disable+0x28>)
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	4a06      	ldr	r2, [pc, #24]	@ (8002668 <HAL_MPU_Disable+0x28>)
 8002650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002654:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_MPU_Disable+0x2c>)
 8002658:	2200      	movs	r2, #0
 800265a:	605a      	str	r2, [r3, #4]
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000ed00 	.word	0xe000ed00
 800266c:	e000ed90 	.word	0xe000ed90

08002670 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002678:	4a0b      	ldr	r2, [pc, #44]	@ (80026a8 <HAL_MPU_Enable+0x38>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002682:	4b0a      	ldr	r3, [pc, #40]	@ (80026ac <HAL_MPU_Enable+0x3c>)
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	4a09      	ldr	r2, [pc, #36]	@ (80026ac <HAL_MPU_Enable+0x3c>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800268e:	f3bf 8f4f 	dsb	sy
}
 8002692:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002694:	f3bf 8f6f 	isb	sy
}
 8002698:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000ed90 	.word	0xe000ed90
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	785a      	ldrb	r2, [r3, #1]
 80026bc:	4b1b      	ldr	r3, [pc, #108]	@ (800272c <HAL_MPU_ConfigRegion+0x7c>)
 80026be:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80026c0:	4b1a      	ldr	r3, [pc, #104]	@ (800272c <HAL_MPU_ConfigRegion+0x7c>)
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	4a19      	ldr	r2, [pc, #100]	@ (800272c <HAL_MPU_ConfigRegion+0x7c>)
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80026cc:	4a17      	ldr	r2, [pc, #92]	@ (800272c <HAL_MPU_ConfigRegion+0x7c>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	7b1b      	ldrb	r3, [r3, #12]
 80026d8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	7adb      	ldrb	r3, [r3, #11]
 80026de:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	7a9b      	ldrb	r3, [r3, #10]
 80026e6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80026e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7b5b      	ldrb	r3, [r3, #13]
 80026ee:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80026f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7b9b      	ldrb	r3, [r3, #14]
 80026f6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80026f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7bdb      	ldrb	r3, [r3, #15]
 80026fe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002700:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	7a5b      	ldrb	r3, [r3, #9]
 8002706:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002708:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7a1b      	ldrb	r3, [r3, #8]
 800270e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002710:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002718:	4a04      	ldr	r2, [pc, #16]	@ (800272c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800271a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800271c:	6113      	str	r3, [r2, #16]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000ed90 	.word	0xe000ed90

08002730 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e069      	b.n	8002816 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d102      	bne.n	8002754 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fe ff90 	bl	8001674 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6819      	ldr	r1, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b2a      	ldr	r3, [pc, #168]	@ (8002820 <HAL_DCMI_Init+0xf0>)
 8002776:	400b      	ands	r3, r1
 8002778:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6819      	ldr	r1, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800278e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800279a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80027a6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80027b2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80027be:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d112      	bne.n	80027f6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7f1b      	ldrb	r3, [r3, #28]
 80027d4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	7f5b      	ldrb	r3, [r3, #29]
 80027da:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80027dc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7f9b      	ldrb	r3, [r3, #30]
 80027e2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80027e4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	7fdb      	ldrb	r3, [r3, #31]
 80027ec:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80027f2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80027f4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 021e 	orr.w	r2, r2, #30
 8002804:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	ffe0f007 	.word	0xffe0f007

08002824 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_DCMI_Start_DMA+0x1c>
 800283c:	2302      	movs	r3, #2
 800283e:	e0ab      	b.n	8002998 <HAL_DCMI_Start_DMA+0x174>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800285e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0202 	bic.w	r2, r2, #2
 800286e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6819      	ldr	r1, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	430a      	orrs	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002884:	4a46      	ldr	r2, [pc, #280]	@ (80029a0 <HAL_DCMI_Start_DMA+0x17c>)
 8002886:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288c:	4a45      	ldr	r2, [pc, #276]	@ (80029a4 <HAL_DCMI_Start_DMA+0x180>)
 800288e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002894:	2200      	movs	r2, #0
 8002896:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028b6:	d219      	bcs.n	80028ec <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3328      	adds	r3, #40	@ 0x28
 80028c2:	4619      	mov	r1, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	f000 fd84 	bl	80033d4 <HAL_DMA_Start_IT>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d055      	beq.n	800297e <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2240      	movs	r2, #64	@ 0x40
 80028d6:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e055      	b.n	8002998 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f0:	4a2b      	ldr	r2, [pc, #172]	@ (80029a0 <HAL_DCMI_Start_DMA+0x17c>)
 80028f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8002906:	e009      	b.n	800291c <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290c:	085a      	lsrs	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002916:	005a      	lsls	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002924:	d2f0      	bcs.n	8002908 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292a:	1e9a      	subs	r2, r3, #2
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3328      	adds	r3, #40	@ 0x28
 800294e:	4619      	mov	r1, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	f003 f829 	bl	80059b0 <HAL_DMAEx_MultiBufferStart_IT>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00c      	beq.n	800297e <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2240      	movs	r2, #64	@ 0x40
 8002968:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e00c      	b.n	8002998 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0201 	orr.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	08002bbd 	.word	0x08002bbd
 80029a4:	08002ce3 	.word	0x08002ce3

080029a8 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80029b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a60 <HAL_DCMI_Stop+0xb8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a64 <HAL_DCMI_Stop+0xbc>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0a5b      	lsrs	r3, r3, #9
 80029bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_DCMI_Stop+0x30>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e03f      	b.n	8002a58 <HAL_DCMI_Stop+0xb0>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d108      	bne.n	8002a16 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	72fb      	strb	r3, [r7, #11]
      break;
 8002a14:	e006      	b.n	8002a24 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e9      	bne.n	80029f8 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a32:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 ff35 	bl	80038a8 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8002a56:	7afb      	ldrb	r3, [r7, #11]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	24000000 	.word	0x24000000
 8002a64:	10624dd3 	.word	0x10624dd3

08002a68 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d016      	beq.n	8002ab0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2204      	movs	r2, #4
 8002a88:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8e:	f043 0202 	orr.w	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa2:	4a31      	ldr	r2, [pc, #196]	@ (8002b68 <HAL_DCMI_IRQHandler+0x100>)
 8002aa4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 fa1a 	bl	8003ee4 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d016      	beq.n	8002ae8 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac6:	f043 0201 	orr.w	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ada:	4a23      	ldr	r2, [pc, #140]	@ (8002b68 <HAL_DCMI_IRQHandler+0x100>)
 8002adc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f001 f9fe 	bl	8003ee4 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2210      	movs	r2, #16
 8002af8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f840 	bl	8002b80 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d006      	beq.n	8002b18 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2208      	movs	r2, #8
 8002b10:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f83e 	bl	8002b94 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01d      	beq.n	8002b5e <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d107      	bne.n	8002b40 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 021e 	bic.w	r2, r2, #30
 8002b3e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2201      	movs	r2, #1
 8002b56:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f825 	bl	8002ba8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	08002ce3 	.word	0x08002ce3

08002b6c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d043      	beq.n	8002c5a <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bde:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d118      	bne.n	8002c1e <DCMI_DMAXferCplt+0x62>
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d015      	beq.n	8002c1e <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c04:	00da      	lsls	r2, r3, #3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	4413      	add	r3, r2
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f003 fa2d 	bl	800606c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c16:	1e5a      	subs	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c1c:	e044      	b.n	8002ca8 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d13c      	bne.n	8002ca8 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c40:	00da      	lsls	r2, r3, #3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4413      	add	r3, r2
 8002c46:	2201      	movs	r2, #1
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f003 fa0f 	bl	800606c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c52:	1e5a      	subs	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c58:	e026      	b.n	8002ca8 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	e017      	b.n	8002ca8 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10f      	bne.n	8002ca8 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c92:	0099      	lsls	r1, r3, #2
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	440a      	add	r2, r1
 8002c9e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d112      	bne.n	8002cda <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d103      	bne.n	8002cda <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cee:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d009      	beq.n	8002d0e <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7ff ff2c 	bl	8002b6c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff fb40 	bl	80023a8 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e316      	b.n	8003362 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a66      	ldr	r2, [pc, #408]	@ (8002ed4 <HAL_DMA_Init+0x1b8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d04a      	beq.n	8002dd4 <HAL_DMA_Init+0xb8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a65      	ldr	r2, [pc, #404]	@ (8002ed8 <HAL_DMA_Init+0x1bc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d045      	beq.n	8002dd4 <HAL_DMA_Init+0xb8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a63      	ldr	r2, [pc, #396]	@ (8002edc <HAL_DMA_Init+0x1c0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d040      	beq.n	8002dd4 <HAL_DMA_Init+0xb8>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a62      	ldr	r2, [pc, #392]	@ (8002ee0 <HAL_DMA_Init+0x1c4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d03b      	beq.n	8002dd4 <HAL_DMA_Init+0xb8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a60      	ldr	r2, [pc, #384]	@ (8002ee4 <HAL_DMA_Init+0x1c8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d036      	beq.n	8002dd4 <HAL_DMA_Init+0xb8>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ee8 <HAL_DMA_Init+0x1cc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d031      	beq.n	8002dd4 <HAL_DMA_Init+0xb8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a5d      	ldr	r2, [pc, #372]	@ (8002eec <HAL_DMA_Init+0x1d0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d02c      	beq.n	8002dd4 <HAL_DMA_Init+0xb8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ef0 <HAL_DMA_Init+0x1d4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d027      	beq.n	8002dd4 <HAL_DMA_Init+0xb8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a5a      	ldr	r2, [pc, #360]	@ (8002ef4 <HAL_DMA_Init+0x1d8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d022      	beq.n	8002dd4 <HAL_DMA_Init+0xb8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a59      	ldr	r2, [pc, #356]	@ (8002ef8 <HAL_DMA_Init+0x1dc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d01d      	beq.n	8002dd4 <HAL_DMA_Init+0xb8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a57      	ldr	r2, [pc, #348]	@ (8002efc <HAL_DMA_Init+0x1e0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d018      	beq.n	8002dd4 <HAL_DMA_Init+0xb8>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a56      	ldr	r2, [pc, #344]	@ (8002f00 <HAL_DMA_Init+0x1e4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d013      	beq.n	8002dd4 <HAL_DMA_Init+0xb8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a54      	ldr	r2, [pc, #336]	@ (8002f04 <HAL_DMA_Init+0x1e8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00e      	beq.n	8002dd4 <HAL_DMA_Init+0xb8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a53      	ldr	r2, [pc, #332]	@ (8002f08 <HAL_DMA_Init+0x1ec>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d009      	beq.n	8002dd4 <HAL_DMA_Init+0xb8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a51      	ldr	r2, [pc, #324]	@ (8002f0c <HAL_DMA_Init+0x1f0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <HAL_DMA_Init+0xb8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a50      	ldr	r2, [pc, #320]	@ (8002f10 <HAL_DMA_Init+0x1f4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d101      	bne.n	8002dd8 <HAL_DMA_Init+0xbc>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <HAL_DMA_Init+0xbe>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 813b 	beq.w	8003056 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a37      	ldr	r2, [pc, #220]	@ (8002ed4 <HAL_DMA_Init+0x1b8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d04a      	beq.n	8002e90 <HAL_DMA_Init+0x174>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a36      	ldr	r2, [pc, #216]	@ (8002ed8 <HAL_DMA_Init+0x1bc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d045      	beq.n	8002e90 <HAL_DMA_Init+0x174>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a34      	ldr	r2, [pc, #208]	@ (8002edc <HAL_DMA_Init+0x1c0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d040      	beq.n	8002e90 <HAL_DMA_Init+0x174>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a33      	ldr	r2, [pc, #204]	@ (8002ee0 <HAL_DMA_Init+0x1c4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d03b      	beq.n	8002e90 <HAL_DMA_Init+0x174>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a31      	ldr	r2, [pc, #196]	@ (8002ee4 <HAL_DMA_Init+0x1c8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d036      	beq.n	8002e90 <HAL_DMA_Init+0x174>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a30      	ldr	r2, [pc, #192]	@ (8002ee8 <HAL_DMA_Init+0x1cc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d031      	beq.n	8002e90 <HAL_DMA_Init+0x174>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a2e      	ldr	r2, [pc, #184]	@ (8002eec <HAL_DMA_Init+0x1d0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d02c      	beq.n	8002e90 <HAL_DMA_Init+0x174>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef0 <HAL_DMA_Init+0x1d4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d027      	beq.n	8002e90 <HAL_DMA_Init+0x174>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a2b      	ldr	r2, [pc, #172]	@ (8002ef4 <HAL_DMA_Init+0x1d8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d022      	beq.n	8002e90 <HAL_DMA_Init+0x174>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef8 <HAL_DMA_Init+0x1dc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d01d      	beq.n	8002e90 <HAL_DMA_Init+0x174>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a28      	ldr	r2, [pc, #160]	@ (8002efc <HAL_DMA_Init+0x1e0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d018      	beq.n	8002e90 <HAL_DMA_Init+0x174>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a27      	ldr	r2, [pc, #156]	@ (8002f00 <HAL_DMA_Init+0x1e4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d013      	beq.n	8002e90 <HAL_DMA_Init+0x174>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a25      	ldr	r2, [pc, #148]	@ (8002f04 <HAL_DMA_Init+0x1e8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00e      	beq.n	8002e90 <HAL_DMA_Init+0x174>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a24      	ldr	r2, [pc, #144]	@ (8002f08 <HAL_DMA_Init+0x1ec>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d009      	beq.n	8002e90 <HAL_DMA_Init+0x174>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a22      	ldr	r2, [pc, #136]	@ (8002f0c <HAL_DMA_Init+0x1f0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d004      	beq.n	8002e90 <HAL_DMA_Init+0x174>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a21      	ldr	r2, [pc, #132]	@ (8002f10 <HAL_DMA_Init+0x1f4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d108      	bne.n	8002ea2 <HAL_DMA_Init+0x186>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e007      	b.n	8002eb2 <HAL_DMA_Init+0x196>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0201 	bic.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002eb2:	e02f      	b.n	8002f14 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eb4:	f7ff fa78 	bl	80023a8 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b05      	cmp	r3, #5
 8002ec0:	d928      	bls.n	8002f14 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2203      	movs	r2, #3
 8002ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e246      	b.n	8003362 <HAL_DMA_Init+0x646>
 8002ed4:	40020010 	.word	0x40020010
 8002ed8:	40020028 	.word	0x40020028
 8002edc:	40020040 	.word	0x40020040
 8002ee0:	40020058 	.word	0x40020058
 8002ee4:	40020070 	.word	0x40020070
 8002ee8:	40020088 	.word	0x40020088
 8002eec:	400200a0 	.word	0x400200a0
 8002ef0:	400200b8 	.word	0x400200b8
 8002ef4:	40020410 	.word	0x40020410
 8002ef8:	40020428 	.word	0x40020428
 8002efc:	40020440 	.word	0x40020440
 8002f00:	40020458 	.word	0x40020458
 8002f04:	40020470 	.word	0x40020470
 8002f08:	40020488 	.word	0x40020488
 8002f0c:	400204a0 	.word	0x400204a0
 8002f10:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1c8      	bne.n	8002eb4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4b83      	ldr	r3, [pc, #524]	@ (800313c <HAL_DMA_Init+0x420>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002f3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f46:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f52:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d107      	bne.n	8002f78 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f70:	4313      	orrs	r3, r2
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002f78:	4b71      	ldr	r3, [pc, #452]	@ (8003140 <HAL_DMA_Init+0x424>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b71      	ldr	r3, [pc, #452]	@ (8003144 <HAL_DMA_Init+0x428>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f84:	d328      	bcc.n	8002fd8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b28      	cmp	r3, #40	@ 0x28
 8002f8c:	d903      	bls.n	8002f96 <HAL_DMA_Init+0x27a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f94:	d917      	bls.n	8002fc6 <HAL_DMA_Init+0x2aa>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f9c:	d903      	bls.n	8002fa6 <HAL_DMA_Init+0x28a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b42      	cmp	r3, #66	@ 0x42
 8002fa4:	d90f      	bls.n	8002fc6 <HAL_DMA_Init+0x2aa>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b46      	cmp	r3, #70	@ 0x46
 8002fac:	d903      	bls.n	8002fb6 <HAL_DMA_Init+0x29a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b48      	cmp	r3, #72	@ 0x48
 8002fb4:	d907      	bls.n	8002fc6 <HAL_DMA_Init+0x2aa>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b4e      	cmp	r3, #78	@ 0x4e
 8002fbc:	d905      	bls.n	8002fca <HAL_DMA_Init+0x2ae>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b52      	cmp	r3, #82	@ 0x52
 8002fc4:	d801      	bhi.n	8002fca <HAL_DMA_Init+0x2ae>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_DMA_Init+0x2b0>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fd6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f023 0307 	bic.w	r3, r3, #7
 8002fee:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d117      	bne.n	8003032 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00e      	beq.n	8003032 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f002 fb41 	bl	800569c <DMA_CheckFifoParam>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2240      	movs	r2, #64	@ 0x40
 8003024:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e197      	b.n	8003362 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f002 fa7c 	bl	8005538 <DMA_CalcBaseAndBitshift>
 8003040:	4603      	mov	r3, r0
 8003042:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	223f      	movs	r2, #63	@ 0x3f
 800304e:	409a      	lsls	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	e0cd      	b.n	80031f2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a3b      	ldr	r2, [pc, #236]	@ (8003148 <HAL_DMA_Init+0x42c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d022      	beq.n	80030a6 <HAL_DMA_Init+0x38a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a39      	ldr	r2, [pc, #228]	@ (800314c <HAL_DMA_Init+0x430>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01d      	beq.n	80030a6 <HAL_DMA_Init+0x38a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a38      	ldr	r2, [pc, #224]	@ (8003150 <HAL_DMA_Init+0x434>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d018      	beq.n	80030a6 <HAL_DMA_Init+0x38a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a36      	ldr	r2, [pc, #216]	@ (8003154 <HAL_DMA_Init+0x438>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_DMA_Init+0x38a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a35      	ldr	r2, [pc, #212]	@ (8003158 <HAL_DMA_Init+0x43c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00e      	beq.n	80030a6 <HAL_DMA_Init+0x38a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a33      	ldr	r2, [pc, #204]	@ (800315c <HAL_DMA_Init+0x440>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d009      	beq.n	80030a6 <HAL_DMA_Init+0x38a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a32      	ldr	r2, [pc, #200]	@ (8003160 <HAL_DMA_Init+0x444>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d004      	beq.n	80030a6 <HAL_DMA_Init+0x38a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a30      	ldr	r2, [pc, #192]	@ (8003164 <HAL_DMA_Init+0x448>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d101      	bne.n	80030aa <HAL_DMA_Init+0x38e>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_DMA_Init+0x390>
 80030aa:	2300      	movs	r3, #0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8097 	beq.w	80031e0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a24      	ldr	r2, [pc, #144]	@ (8003148 <HAL_DMA_Init+0x42c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d021      	beq.n	8003100 <HAL_DMA_Init+0x3e4>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a22      	ldr	r2, [pc, #136]	@ (800314c <HAL_DMA_Init+0x430>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01c      	beq.n	8003100 <HAL_DMA_Init+0x3e4>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a21      	ldr	r2, [pc, #132]	@ (8003150 <HAL_DMA_Init+0x434>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d017      	beq.n	8003100 <HAL_DMA_Init+0x3e4>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003154 <HAL_DMA_Init+0x438>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d012      	beq.n	8003100 <HAL_DMA_Init+0x3e4>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1e      	ldr	r2, [pc, #120]	@ (8003158 <HAL_DMA_Init+0x43c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00d      	beq.n	8003100 <HAL_DMA_Init+0x3e4>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1c      	ldr	r2, [pc, #112]	@ (800315c <HAL_DMA_Init+0x440>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d008      	beq.n	8003100 <HAL_DMA_Init+0x3e4>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003160 <HAL_DMA_Init+0x444>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d003      	beq.n	8003100 <HAL_DMA_Init+0x3e4>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a19      	ldr	r2, [pc, #100]	@ (8003164 <HAL_DMA_Init+0x448>)
 80030fe:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4b13      	ldr	r3, [pc, #76]	@ (8003168 <HAL_DMA_Init+0x44c>)
 800311c:	4013      	ands	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b40      	cmp	r3, #64	@ 0x40
 8003126:	d021      	beq.n	800316c <HAL_DMA_Init+0x450>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b80      	cmp	r3, #128	@ 0x80
 800312e:	d102      	bne.n	8003136 <HAL_DMA_Init+0x41a>
 8003130:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003134:	e01b      	b.n	800316e <HAL_DMA_Init+0x452>
 8003136:	2300      	movs	r3, #0
 8003138:	e019      	b.n	800316e <HAL_DMA_Init+0x452>
 800313a:	bf00      	nop
 800313c:	fe10803f 	.word	0xfe10803f
 8003140:	5c001000 	.word	0x5c001000
 8003144:	ffff0000 	.word	0xffff0000
 8003148:	58025408 	.word	0x58025408
 800314c:	5802541c 	.word	0x5802541c
 8003150:	58025430 	.word	0x58025430
 8003154:	58025444 	.word	0x58025444
 8003158:	58025458 	.word	0x58025458
 800315c:	5802546c 	.word	0x5802546c
 8003160:	58025480 	.word	0x58025480
 8003164:	58025494 	.word	0x58025494
 8003168:	fffe000f 	.word	0xfffe000f
 800316c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68d2      	ldr	r2, [r2, #12]
 8003172:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003174:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800317c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003184:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800318c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003194:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800319c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b6e      	ldr	r3, [pc, #440]	@ (800336c <HAL_DMA_Init+0x650>)
 80031b4:	4413      	add	r3, r2
 80031b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003370 <HAL_DMA_Init+0x654>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	009a      	lsls	r2, r3, #2
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f002 f9b7 	bl	8005538 <DMA_CalcBaseAndBitshift>
 80031ca:	4603      	mov	r3, r0
 80031cc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	2201      	movs	r2, #1
 80031d8:	409a      	lsls	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	e008      	b.n	80031f2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2240      	movs	r2, #64	@ 0x40
 80031e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2203      	movs	r2, #3
 80031ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e0b7      	b.n	8003362 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a5f      	ldr	r2, [pc, #380]	@ (8003374 <HAL_DMA_Init+0x658>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d072      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a5d      	ldr	r2, [pc, #372]	@ (8003378 <HAL_DMA_Init+0x65c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d06d      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a5c      	ldr	r2, [pc, #368]	@ (800337c <HAL_DMA_Init+0x660>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d068      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a5a      	ldr	r2, [pc, #360]	@ (8003380 <HAL_DMA_Init+0x664>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d063      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a59      	ldr	r2, [pc, #356]	@ (8003384 <HAL_DMA_Init+0x668>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d05e      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a57      	ldr	r2, [pc, #348]	@ (8003388 <HAL_DMA_Init+0x66c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d059      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a56      	ldr	r2, [pc, #344]	@ (800338c <HAL_DMA_Init+0x670>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d054      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a54      	ldr	r2, [pc, #336]	@ (8003390 <HAL_DMA_Init+0x674>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d04f      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a53      	ldr	r2, [pc, #332]	@ (8003394 <HAL_DMA_Init+0x678>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d04a      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a51      	ldr	r2, [pc, #324]	@ (8003398 <HAL_DMA_Init+0x67c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d045      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a50      	ldr	r2, [pc, #320]	@ (800339c <HAL_DMA_Init+0x680>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d040      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a4e      	ldr	r2, [pc, #312]	@ (80033a0 <HAL_DMA_Init+0x684>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d03b      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a4d      	ldr	r2, [pc, #308]	@ (80033a4 <HAL_DMA_Init+0x688>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d036      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a4b      	ldr	r2, [pc, #300]	@ (80033a8 <HAL_DMA_Init+0x68c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d031      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a4a      	ldr	r2, [pc, #296]	@ (80033ac <HAL_DMA_Init+0x690>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d02c      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a48      	ldr	r2, [pc, #288]	@ (80033b0 <HAL_DMA_Init+0x694>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d027      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a47      	ldr	r2, [pc, #284]	@ (80033b4 <HAL_DMA_Init+0x698>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d022      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a45      	ldr	r2, [pc, #276]	@ (80033b8 <HAL_DMA_Init+0x69c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d01d      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a44      	ldr	r2, [pc, #272]	@ (80033bc <HAL_DMA_Init+0x6a0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d018      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a42      	ldr	r2, [pc, #264]	@ (80033c0 <HAL_DMA_Init+0x6a4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a41      	ldr	r2, [pc, #260]	@ (80033c4 <HAL_DMA_Init+0x6a8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00e      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a3f      	ldr	r2, [pc, #252]	@ (80033c8 <HAL_DMA_Init+0x6ac>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a3e      	ldr	r2, [pc, #248]	@ (80033cc <HAL_DMA_Init+0x6b0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d004      	beq.n	80032e2 <HAL_DMA_Init+0x5c6>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a3c      	ldr	r2, [pc, #240]	@ (80033d0 <HAL_DMA_Init+0x6b4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d101      	bne.n	80032e6 <HAL_DMA_Init+0x5ca>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_DMA_Init+0x5cc>
 80032e6:	2300      	movs	r3, #0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d032      	beq.n	8003352 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f002 fa51 	bl	8005794 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b80      	cmp	r3, #128	@ 0x80
 80032f8:	d102      	bne.n	8003300 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003314:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d010      	beq.n	8003340 <HAL_DMA_Init+0x624>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b08      	cmp	r3, #8
 8003324:	d80c      	bhi.n	8003340 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f002 face 	bl	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	e008      	b.n	8003352 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	a7fdabf8 	.word	0xa7fdabf8
 8003370:	cccccccd 	.word	0xcccccccd
 8003374:	40020010 	.word	0x40020010
 8003378:	40020028 	.word	0x40020028
 800337c:	40020040 	.word	0x40020040
 8003380:	40020058 	.word	0x40020058
 8003384:	40020070 	.word	0x40020070
 8003388:	40020088 	.word	0x40020088
 800338c:	400200a0 	.word	0x400200a0
 8003390:	400200b8 	.word	0x400200b8
 8003394:	40020410 	.word	0x40020410
 8003398:	40020428 	.word	0x40020428
 800339c:	40020440 	.word	0x40020440
 80033a0:	40020458 	.word	0x40020458
 80033a4:	40020470 	.word	0x40020470
 80033a8:	40020488 	.word	0x40020488
 80033ac:	400204a0 	.word	0x400204a0
 80033b0:	400204b8 	.word	0x400204b8
 80033b4:	58025408 	.word	0x58025408
 80033b8:	5802541c 	.word	0x5802541c
 80033bc:	58025430 	.word	0x58025430
 80033c0:	58025444 	.word	0x58025444
 80033c4:	58025458 	.word	0x58025458
 80033c8:	5802546c 	.word	0x5802546c
 80033cc:	58025480 	.word	0x58025480
 80033d0:	58025494 	.word	0x58025494

080033d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e226      	b.n	800383e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_DMA_Start_IT+0x2a>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e21f      	b.n	800383e <HAL_DMA_Start_IT+0x46a>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	f040 820a 	bne.w	8003828 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a68      	ldr	r2, [pc, #416]	@ (80035c8 <HAL_DMA_Start_IT+0x1f4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d04a      	beq.n	80034c2 <HAL_DMA_Start_IT+0xee>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a66      	ldr	r2, [pc, #408]	@ (80035cc <HAL_DMA_Start_IT+0x1f8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d045      	beq.n	80034c2 <HAL_DMA_Start_IT+0xee>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a65      	ldr	r2, [pc, #404]	@ (80035d0 <HAL_DMA_Start_IT+0x1fc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d040      	beq.n	80034c2 <HAL_DMA_Start_IT+0xee>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a63      	ldr	r2, [pc, #396]	@ (80035d4 <HAL_DMA_Start_IT+0x200>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d03b      	beq.n	80034c2 <HAL_DMA_Start_IT+0xee>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a62      	ldr	r2, [pc, #392]	@ (80035d8 <HAL_DMA_Start_IT+0x204>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d036      	beq.n	80034c2 <HAL_DMA_Start_IT+0xee>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a60      	ldr	r2, [pc, #384]	@ (80035dc <HAL_DMA_Start_IT+0x208>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d031      	beq.n	80034c2 <HAL_DMA_Start_IT+0xee>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a5f      	ldr	r2, [pc, #380]	@ (80035e0 <HAL_DMA_Start_IT+0x20c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d02c      	beq.n	80034c2 <HAL_DMA_Start_IT+0xee>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a5d      	ldr	r2, [pc, #372]	@ (80035e4 <HAL_DMA_Start_IT+0x210>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d027      	beq.n	80034c2 <HAL_DMA_Start_IT+0xee>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a5c      	ldr	r2, [pc, #368]	@ (80035e8 <HAL_DMA_Start_IT+0x214>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d022      	beq.n	80034c2 <HAL_DMA_Start_IT+0xee>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a5a      	ldr	r2, [pc, #360]	@ (80035ec <HAL_DMA_Start_IT+0x218>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01d      	beq.n	80034c2 <HAL_DMA_Start_IT+0xee>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a59      	ldr	r2, [pc, #356]	@ (80035f0 <HAL_DMA_Start_IT+0x21c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d018      	beq.n	80034c2 <HAL_DMA_Start_IT+0xee>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a57      	ldr	r2, [pc, #348]	@ (80035f4 <HAL_DMA_Start_IT+0x220>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <HAL_DMA_Start_IT+0xee>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a56      	ldr	r2, [pc, #344]	@ (80035f8 <HAL_DMA_Start_IT+0x224>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00e      	beq.n	80034c2 <HAL_DMA_Start_IT+0xee>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a54      	ldr	r2, [pc, #336]	@ (80035fc <HAL_DMA_Start_IT+0x228>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_DMA_Start_IT+0xee>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a53      	ldr	r2, [pc, #332]	@ (8003600 <HAL_DMA_Start_IT+0x22c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d004      	beq.n	80034c2 <HAL_DMA_Start_IT+0xee>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a51      	ldr	r2, [pc, #324]	@ (8003604 <HAL_DMA_Start_IT+0x230>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d108      	bne.n	80034d4 <HAL_DMA_Start_IT+0x100>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e007      	b.n	80034e4 <HAL_DMA_Start_IT+0x110>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f001 fe78 	bl	80051e0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a34      	ldr	r2, [pc, #208]	@ (80035c8 <HAL_DMA_Start_IT+0x1f4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d04a      	beq.n	8003590 <HAL_DMA_Start_IT+0x1bc>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a33      	ldr	r2, [pc, #204]	@ (80035cc <HAL_DMA_Start_IT+0x1f8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d045      	beq.n	8003590 <HAL_DMA_Start_IT+0x1bc>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a31      	ldr	r2, [pc, #196]	@ (80035d0 <HAL_DMA_Start_IT+0x1fc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d040      	beq.n	8003590 <HAL_DMA_Start_IT+0x1bc>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a30      	ldr	r2, [pc, #192]	@ (80035d4 <HAL_DMA_Start_IT+0x200>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d03b      	beq.n	8003590 <HAL_DMA_Start_IT+0x1bc>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2e      	ldr	r2, [pc, #184]	@ (80035d8 <HAL_DMA_Start_IT+0x204>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d036      	beq.n	8003590 <HAL_DMA_Start_IT+0x1bc>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a2d      	ldr	r2, [pc, #180]	@ (80035dc <HAL_DMA_Start_IT+0x208>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d031      	beq.n	8003590 <HAL_DMA_Start_IT+0x1bc>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2b      	ldr	r2, [pc, #172]	@ (80035e0 <HAL_DMA_Start_IT+0x20c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d02c      	beq.n	8003590 <HAL_DMA_Start_IT+0x1bc>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2a      	ldr	r2, [pc, #168]	@ (80035e4 <HAL_DMA_Start_IT+0x210>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d027      	beq.n	8003590 <HAL_DMA_Start_IT+0x1bc>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a28      	ldr	r2, [pc, #160]	@ (80035e8 <HAL_DMA_Start_IT+0x214>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d022      	beq.n	8003590 <HAL_DMA_Start_IT+0x1bc>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a27      	ldr	r2, [pc, #156]	@ (80035ec <HAL_DMA_Start_IT+0x218>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d01d      	beq.n	8003590 <HAL_DMA_Start_IT+0x1bc>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a25      	ldr	r2, [pc, #148]	@ (80035f0 <HAL_DMA_Start_IT+0x21c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d018      	beq.n	8003590 <HAL_DMA_Start_IT+0x1bc>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a24      	ldr	r2, [pc, #144]	@ (80035f4 <HAL_DMA_Start_IT+0x220>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <HAL_DMA_Start_IT+0x1bc>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a22      	ldr	r2, [pc, #136]	@ (80035f8 <HAL_DMA_Start_IT+0x224>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00e      	beq.n	8003590 <HAL_DMA_Start_IT+0x1bc>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a21      	ldr	r2, [pc, #132]	@ (80035fc <HAL_DMA_Start_IT+0x228>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d009      	beq.n	8003590 <HAL_DMA_Start_IT+0x1bc>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1f      	ldr	r2, [pc, #124]	@ (8003600 <HAL_DMA_Start_IT+0x22c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d004      	beq.n	8003590 <HAL_DMA_Start_IT+0x1bc>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1e      	ldr	r2, [pc, #120]	@ (8003604 <HAL_DMA_Start_IT+0x230>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d101      	bne.n	8003594 <HAL_DMA_Start_IT+0x1c0>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <HAL_DMA_Start_IT+0x1c2>
 8003594:	2300      	movs	r3, #0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d036      	beq.n	8003608 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f023 021e 	bic.w	r2, r3, #30
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0216 	orr.w	r2, r2, #22
 80035ac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d03e      	beq.n	8003634 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0208 	orr.w	r2, r2, #8
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	e035      	b.n	8003634 <HAL_DMA_Start_IT+0x260>
 80035c8:	40020010 	.word	0x40020010
 80035cc:	40020028 	.word	0x40020028
 80035d0:	40020040 	.word	0x40020040
 80035d4:	40020058 	.word	0x40020058
 80035d8:	40020070 	.word	0x40020070
 80035dc:	40020088 	.word	0x40020088
 80035e0:	400200a0 	.word	0x400200a0
 80035e4:	400200b8 	.word	0x400200b8
 80035e8:	40020410 	.word	0x40020410
 80035ec:	40020428 	.word	0x40020428
 80035f0:	40020440 	.word	0x40020440
 80035f4:	40020458 	.word	0x40020458
 80035f8:	40020470 	.word	0x40020470
 80035fc:	40020488 	.word	0x40020488
 8003600:	400204a0 	.word	0x400204a0
 8003604:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 020e 	bic.w	r2, r3, #14
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 020a 	orr.w	r2, r2, #10
 800361a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0204 	orr.w	r2, r2, #4
 8003632:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a83      	ldr	r2, [pc, #524]	@ (8003848 <HAL_DMA_Start_IT+0x474>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d072      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a82      	ldr	r2, [pc, #520]	@ (800384c <HAL_DMA_Start_IT+0x478>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d06d      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a80      	ldr	r2, [pc, #512]	@ (8003850 <HAL_DMA_Start_IT+0x47c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d068      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a7f      	ldr	r2, [pc, #508]	@ (8003854 <HAL_DMA_Start_IT+0x480>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d063      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a7d      	ldr	r2, [pc, #500]	@ (8003858 <HAL_DMA_Start_IT+0x484>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d05e      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a7c      	ldr	r2, [pc, #496]	@ (800385c <HAL_DMA_Start_IT+0x488>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d059      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a7a      	ldr	r2, [pc, #488]	@ (8003860 <HAL_DMA_Start_IT+0x48c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d054      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a79      	ldr	r2, [pc, #484]	@ (8003864 <HAL_DMA_Start_IT+0x490>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d04f      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a77      	ldr	r2, [pc, #476]	@ (8003868 <HAL_DMA_Start_IT+0x494>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d04a      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a76      	ldr	r2, [pc, #472]	@ (800386c <HAL_DMA_Start_IT+0x498>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d045      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a74      	ldr	r2, [pc, #464]	@ (8003870 <HAL_DMA_Start_IT+0x49c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d040      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a73      	ldr	r2, [pc, #460]	@ (8003874 <HAL_DMA_Start_IT+0x4a0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d03b      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a71      	ldr	r2, [pc, #452]	@ (8003878 <HAL_DMA_Start_IT+0x4a4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d036      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a70      	ldr	r2, [pc, #448]	@ (800387c <HAL_DMA_Start_IT+0x4a8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d031      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003880 <HAL_DMA_Start_IT+0x4ac>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d02c      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6d      	ldr	r2, [pc, #436]	@ (8003884 <HAL_DMA_Start_IT+0x4b0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d027      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a6b      	ldr	r2, [pc, #428]	@ (8003888 <HAL_DMA_Start_IT+0x4b4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d022      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a6a      	ldr	r2, [pc, #424]	@ (800388c <HAL_DMA_Start_IT+0x4b8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d01d      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a68      	ldr	r2, [pc, #416]	@ (8003890 <HAL_DMA_Start_IT+0x4bc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d018      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a67      	ldr	r2, [pc, #412]	@ (8003894 <HAL_DMA_Start_IT+0x4c0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d013      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a65      	ldr	r2, [pc, #404]	@ (8003898 <HAL_DMA_Start_IT+0x4c4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00e      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a64      	ldr	r2, [pc, #400]	@ (800389c <HAL_DMA_Start_IT+0x4c8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d009      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a62      	ldr	r2, [pc, #392]	@ (80038a0 <HAL_DMA_Start_IT+0x4cc>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <HAL_DMA_Start_IT+0x350>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a61      	ldr	r2, [pc, #388]	@ (80038a4 <HAL_DMA_Start_IT+0x4d0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d101      	bne.n	8003728 <HAL_DMA_Start_IT+0x354>
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <HAL_DMA_Start_IT+0x356>
 8003728:	2300      	movs	r3, #0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d01a      	beq.n	8003764 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003746:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800374a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800375e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003762:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a37      	ldr	r2, [pc, #220]	@ (8003848 <HAL_DMA_Start_IT+0x474>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d04a      	beq.n	8003804 <HAL_DMA_Start_IT+0x430>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a36      	ldr	r2, [pc, #216]	@ (800384c <HAL_DMA_Start_IT+0x478>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d045      	beq.n	8003804 <HAL_DMA_Start_IT+0x430>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a34      	ldr	r2, [pc, #208]	@ (8003850 <HAL_DMA_Start_IT+0x47c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d040      	beq.n	8003804 <HAL_DMA_Start_IT+0x430>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a33      	ldr	r2, [pc, #204]	@ (8003854 <HAL_DMA_Start_IT+0x480>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d03b      	beq.n	8003804 <HAL_DMA_Start_IT+0x430>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a31      	ldr	r2, [pc, #196]	@ (8003858 <HAL_DMA_Start_IT+0x484>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d036      	beq.n	8003804 <HAL_DMA_Start_IT+0x430>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a30      	ldr	r2, [pc, #192]	@ (800385c <HAL_DMA_Start_IT+0x488>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d031      	beq.n	8003804 <HAL_DMA_Start_IT+0x430>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003860 <HAL_DMA_Start_IT+0x48c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d02c      	beq.n	8003804 <HAL_DMA_Start_IT+0x430>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003864 <HAL_DMA_Start_IT+0x490>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d027      	beq.n	8003804 <HAL_DMA_Start_IT+0x430>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003868 <HAL_DMA_Start_IT+0x494>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d022      	beq.n	8003804 <HAL_DMA_Start_IT+0x430>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2a      	ldr	r2, [pc, #168]	@ (800386c <HAL_DMA_Start_IT+0x498>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d01d      	beq.n	8003804 <HAL_DMA_Start_IT+0x430>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a28      	ldr	r2, [pc, #160]	@ (8003870 <HAL_DMA_Start_IT+0x49c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d018      	beq.n	8003804 <HAL_DMA_Start_IT+0x430>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a27      	ldr	r2, [pc, #156]	@ (8003874 <HAL_DMA_Start_IT+0x4a0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d013      	beq.n	8003804 <HAL_DMA_Start_IT+0x430>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a25      	ldr	r2, [pc, #148]	@ (8003878 <HAL_DMA_Start_IT+0x4a4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00e      	beq.n	8003804 <HAL_DMA_Start_IT+0x430>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a24      	ldr	r2, [pc, #144]	@ (800387c <HAL_DMA_Start_IT+0x4a8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d009      	beq.n	8003804 <HAL_DMA_Start_IT+0x430>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a22      	ldr	r2, [pc, #136]	@ (8003880 <HAL_DMA_Start_IT+0x4ac>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <HAL_DMA_Start_IT+0x430>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a21      	ldr	r2, [pc, #132]	@ (8003884 <HAL_DMA_Start_IT+0x4b0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d108      	bne.n	8003816 <HAL_DMA_Start_IT+0x442>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	e012      	b.n	800383c <HAL_DMA_Start_IT+0x468>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e009      	b.n	800383c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800382e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800383c:	7dfb      	ldrb	r3, [r7, #23]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40020010 	.word	0x40020010
 800384c:	40020028 	.word	0x40020028
 8003850:	40020040 	.word	0x40020040
 8003854:	40020058 	.word	0x40020058
 8003858:	40020070 	.word	0x40020070
 800385c:	40020088 	.word	0x40020088
 8003860:	400200a0 	.word	0x400200a0
 8003864:	400200b8 	.word	0x400200b8
 8003868:	40020410 	.word	0x40020410
 800386c:	40020428 	.word	0x40020428
 8003870:	40020440 	.word	0x40020440
 8003874:	40020458 	.word	0x40020458
 8003878:	40020470 	.word	0x40020470
 800387c:	40020488 	.word	0x40020488
 8003880:	400204a0 	.word	0x400204a0
 8003884:	400204b8 	.word	0x400204b8
 8003888:	58025408 	.word	0x58025408
 800388c:	5802541c 	.word	0x5802541c
 8003890:	58025430 	.word	0x58025430
 8003894:	58025444 	.word	0x58025444
 8003898:	58025458 	.word	0x58025458
 800389c:	5802546c 	.word	0x5802546c
 80038a0:	58025480 	.word	0x58025480
 80038a4:	58025494 	.word	0x58025494

080038a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80038b0:	f7fe fd7a 	bl	80023a8 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e2dc      	b.n	8003e7a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d008      	beq.n	80038de <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2280      	movs	r2, #128	@ 0x80
 80038d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e2cd      	b.n	8003e7a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a76      	ldr	r2, [pc, #472]	@ (8003abc <HAL_DMA_Abort+0x214>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d04a      	beq.n	800397e <HAL_DMA_Abort+0xd6>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a74      	ldr	r2, [pc, #464]	@ (8003ac0 <HAL_DMA_Abort+0x218>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d045      	beq.n	800397e <HAL_DMA_Abort+0xd6>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a73      	ldr	r2, [pc, #460]	@ (8003ac4 <HAL_DMA_Abort+0x21c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d040      	beq.n	800397e <HAL_DMA_Abort+0xd6>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a71      	ldr	r2, [pc, #452]	@ (8003ac8 <HAL_DMA_Abort+0x220>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d03b      	beq.n	800397e <HAL_DMA_Abort+0xd6>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a70      	ldr	r2, [pc, #448]	@ (8003acc <HAL_DMA_Abort+0x224>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d036      	beq.n	800397e <HAL_DMA_Abort+0xd6>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a6e      	ldr	r2, [pc, #440]	@ (8003ad0 <HAL_DMA_Abort+0x228>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d031      	beq.n	800397e <HAL_DMA_Abort+0xd6>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a6d      	ldr	r2, [pc, #436]	@ (8003ad4 <HAL_DMA_Abort+0x22c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d02c      	beq.n	800397e <HAL_DMA_Abort+0xd6>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a6b      	ldr	r2, [pc, #428]	@ (8003ad8 <HAL_DMA_Abort+0x230>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d027      	beq.n	800397e <HAL_DMA_Abort+0xd6>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a6a      	ldr	r2, [pc, #424]	@ (8003adc <HAL_DMA_Abort+0x234>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d022      	beq.n	800397e <HAL_DMA_Abort+0xd6>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a68      	ldr	r2, [pc, #416]	@ (8003ae0 <HAL_DMA_Abort+0x238>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d01d      	beq.n	800397e <HAL_DMA_Abort+0xd6>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a67      	ldr	r2, [pc, #412]	@ (8003ae4 <HAL_DMA_Abort+0x23c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d018      	beq.n	800397e <HAL_DMA_Abort+0xd6>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a65      	ldr	r2, [pc, #404]	@ (8003ae8 <HAL_DMA_Abort+0x240>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d013      	beq.n	800397e <HAL_DMA_Abort+0xd6>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a64      	ldr	r2, [pc, #400]	@ (8003aec <HAL_DMA_Abort+0x244>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00e      	beq.n	800397e <HAL_DMA_Abort+0xd6>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a62      	ldr	r2, [pc, #392]	@ (8003af0 <HAL_DMA_Abort+0x248>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d009      	beq.n	800397e <HAL_DMA_Abort+0xd6>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a61      	ldr	r2, [pc, #388]	@ (8003af4 <HAL_DMA_Abort+0x24c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d004      	beq.n	800397e <HAL_DMA_Abort+0xd6>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a5f      	ldr	r2, [pc, #380]	@ (8003af8 <HAL_DMA_Abort+0x250>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d101      	bne.n	8003982 <HAL_DMA_Abort+0xda>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <HAL_DMA_Abort+0xdc>
 8003982:	2300      	movs	r3, #0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 021e 	bic.w	r2, r2, #30
 8003996:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039a6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	e00a      	b.n	80039c6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 020e 	bic.w	r2, r2, #14
 80039be:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a3c      	ldr	r2, [pc, #240]	@ (8003abc <HAL_DMA_Abort+0x214>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d072      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ac0 <HAL_DMA_Abort+0x218>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d06d      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a39      	ldr	r2, [pc, #228]	@ (8003ac4 <HAL_DMA_Abort+0x21c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d068      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a37      	ldr	r2, [pc, #220]	@ (8003ac8 <HAL_DMA_Abort+0x220>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d063      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a36      	ldr	r2, [pc, #216]	@ (8003acc <HAL_DMA_Abort+0x224>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d05e      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a34      	ldr	r2, [pc, #208]	@ (8003ad0 <HAL_DMA_Abort+0x228>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d059      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a33      	ldr	r2, [pc, #204]	@ (8003ad4 <HAL_DMA_Abort+0x22c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d054      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a31      	ldr	r2, [pc, #196]	@ (8003ad8 <HAL_DMA_Abort+0x230>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d04f      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a30      	ldr	r2, [pc, #192]	@ (8003adc <HAL_DMA_Abort+0x234>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d04a      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a2e      	ldr	r2, [pc, #184]	@ (8003ae0 <HAL_DMA_Abort+0x238>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d045      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a2d      	ldr	r2, [pc, #180]	@ (8003ae4 <HAL_DMA_Abort+0x23c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d040      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a2b      	ldr	r2, [pc, #172]	@ (8003ae8 <HAL_DMA_Abort+0x240>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d03b      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a2a      	ldr	r2, [pc, #168]	@ (8003aec <HAL_DMA_Abort+0x244>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d036      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a28      	ldr	r2, [pc, #160]	@ (8003af0 <HAL_DMA_Abort+0x248>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d031      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a27      	ldr	r2, [pc, #156]	@ (8003af4 <HAL_DMA_Abort+0x24c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d02c      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a25      	ldr	r2, [pc, #148]	@ (8003af8 <HAL_DMA_Abort+0x250>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d027      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a24      	ldr	r2, [pc, #144]	@ (8003afc <HAL_DMA_Abort+0x254>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d022      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a22      	ldr	r2, [pc, #136]	@ (8003b00 <HAL_DMA_Abort+0x258>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01d      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a21      	ldr	r2, [pc, #132]	@ (8003b04 <HAL_DMA_Abort+0x25c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d018      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1f      	ldr	r2, [pc, #124]	@ (8003b08 <HAL_DMA_Abort+0x260>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1e      	ldr	r2, [pc, #120]	@ (8003b0c <HAL_DMA_Abort+0x264>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00e      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <HAL_DMA_Abort+0x268>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d009      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b14 <HAL_DMA_Abort+0x26c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_DMA_Abort+0x20e>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a19      	ldr	r2, [pc, #100]	@ (8003b18 <HAL_DMA_Abort+0x270>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d132      	bne.n	8003b1c <HAL_DMA_Abort+0x274>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e031      	b.n	8003b1e <HAL_DMA_Abort+0x276>
 8003aba:	bf00      	nop
 8003abc:	40020010 	.word	0x40020010
 8003ac0:	40020028 	.word	0x40020028
 8003ac4:	40020040 	.word	0x40020040
 8003ac8:	40020058 	.word	0x40020058
 8003acc:	40020070 	.word	0x40020070
 8003ad0:	40020088 	.word	0x40020088
 8003ad4:	400200a0 	.word	0x400200a0
 8003ad8:	400200b8 	.word	0x400200b8
 8003adc:	40020410 	.word	0x40020410
 8003ae0:	40020428 	.word	0x40020428
 8003ae4:	40020440 	.word	0x40020440
 8003ae8:	40020458 	.word	0x40020458
 8003aec:	40020470 	.word	0x40020470
 8003af0:	40020488 	.word	0x40020488
 8003af4:	400204a0 	.word	0x400204a0
 8003af8:	400204b8 	.word	0x400204b8
 8003afc:	58025408 	.word	0x58025408
 8003b00:	5802541c 	.word	0x5802541c
 8003b04:	58025430 	.word	0x58025430
 8003b08:	58025444 	.word	0x58025444
 8003b0c:	58025458 	.word	0x58025458
 8003b10:	5802546c 	.word	0x5802546c
 8003b14:	58025480 	.word	0x58025480
 8003b18:	58025494 	.word	0x58025494
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b30:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6d      	ldr	r2, [pc, #436]	@ (8003cec <HAL_DMA_Abort+0x444>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d04a      	beq.n	8003bd2 <HAL_DMA_Abort+0x32a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a6b      	ldr	r2, [pc, #428]	@ (8003cf0 <HAL_DMA_Abort+0x448>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d045      	beq.n	8003bd2 <HAL_DMA_Abort+0x32a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6a      	ldr	r2, [pc, #424]	@ (8003cf4 <HAL_DMA_Abort+0x44c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d040      	beq.n	8003bd2 <HAL_DMA_Abort+0x32a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a68      	ldr	r2, [pc, #416]	@ (8003cf8 <HAL_DMA_Abort+0x450>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d03b      	beq.n	8003bd2 <HAL_DMA_Abort+0x32a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a67      	ldr	r2, [pc, #412]	@ (8003cfc <HAL_DMA_Abort+0x454>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d036      	beq.n	8003bd2 <HAL_DMA_Abort+0x32a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a65      	ldr	r2, [pc, #404]	@ (8003d00 <HAL_DMA_Abort+0x458>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d031      	beq.n	8003bd2 <HAL_DMA_Abort+0x32a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a64      	ldr	r2, [pc, #400]	@ (8003d04 <HAL_DMA_Abort+0x45c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d02c      	beq.n	8003bd2 <HAL_DMA_Abort+0x32a>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a62      	ldr	r2, [pc, #392]	@ (8003d08 <HAL_DMA_Abort+0x460>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d027      	beq.n	8003bd2 <HAL_DMA_Abort+0x32a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a61      	ldr	r2, [pc, #388]	@ (8003d0c <HAL_DMA_Abort+0x464>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d022      	beq.n	8003bd2 <HAL_DMA_Abort+0x32a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a5f      	ldr	r2, [pc, #380]	@ (8003d10 <HAL_DMA_Abort+0x468>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01d      	beq.n	8003bd2 <HAL_DMA_Abort+0x32a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003d14 <HAL_DMA_Abort+0x46c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d018      	beq.n	8003bd2 <HAL_DMA_Abort+0x32a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a5c      	ldr	r2, [pc, #368]	@ (8003d18 <HAL_DMA_Abort+0x470>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <HAL_DMA_Abort+0x32a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a5b      	ldr	r2, [pc, #364]	@ (8003d1c <HAL_DMA_Abort+0x474>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_DMA_Abort+0x32a>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a59      	ldr	r2, [pc, #356]	@ (8003d20 <HAL_DMA_Abort+0x478>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d009      	beq.n	8003bd2 <HAL_DMA_Abort+0x32a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a58      	ldr	r2, [pc, #352]	@ (8003d24 <HAL_DMA_Abort+0x47c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_DMA_Abort+0x32a>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a56      	ldr	r2, [pc, #344]	@ (8003d28 <HAL_DMA_Abort+0x480>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d108      	bne.n	8003be4 <HAL_DMA_Abort+0x33c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	e007      	b.n	8003bf4 <HAL_DMA_Abort+0x34c>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003bf4:	e013      	b.n	8003c1e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bf6:	f7fe fbd7 	bl	80023a8 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b05      	cmp	r3, #5
 8003c02:	d90c      	bls.n	8003c1e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e12d      	b.n	8003e7a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e5      	bne.n	8003bf6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8003cec <HAL_DMA_Abort+0x444>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d04a      	beq.n	8003cca <HAL_DMA_Abort+0x422>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf0 <HAL_DMA_Abort+0x448>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d045      	beq.n	8003cca <HAL_DMA_Abort+0x422>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf4 <HAL_DMA_Abort+0x44c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d040      	beq.n	8003cca <HAL_DMA_Abort+0x422>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf8 <HAL_DMA_Abort+0x450>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d03b      	beq.n	8003cca <HAL_DMA_Abort+0x422>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a29      	ldr	r2, [pc, #164]	@ (8003cfc <HAL_DMA_Abort+0x454>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d036      	beq.n	8003cca <HAL_DMA_Abort+0x422>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a27      	ldr	r2, [pc, #156]	@ (8003d00 <HAL_DMA_Abort+0x458>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d031      	beq.n	8003cca <HAL_DMA_Abort+0x422>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a26      	ldr	r2, [pc, #152]	@ (8003d04 <HAL_DMA_Abort+0x45c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d02c      	beq.n	8003cca <HAL_DMA_Abort+0x422>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a24      	ldr	r2, [pc, #144]	@ (8003d08 <HAL_DMA_Abort+0x460>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d027      	beq.n	8003cca <HAL_DMA_Abort+0x422>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a23      	ldr	r2, [pc, #140]	@ (8003d0c <HAL_DMA_Abort+0x464>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d022      	beq.n	8003cca <HAL_DMA_Abort+0x422>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a21      	ldr	r2, [pc, #132]	@ (8003d10 <HAL_DMA_Abort+0x468>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d01d      	beq.n	8003cca <HAL_DMA_Abort+0x422>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a20      	ldr	r2, [pc, #128]	@ (8003d14 <HAL_DMA_Abort+0x46c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d018      	beq.n	8003cca <HAL_DMA_Abort+0x422>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003d18 <HAL_DMA_Abort+0x470>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d013      	beq.n	8003cca <HAL_DMA_Abort+0x422>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d1c <HAL_DMA_Abort+0x474>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00e      	beq.n	8003cca <HAL_DMA_Abort+0x422>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003d20 <HAL_DMA_Abort+0x478>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d009      	beq.n	8003cca <HAL_DMA_Abort+0x422>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1a      	ldr	r2, [pc, #104]	@ (8003d24 <HAL_DMA_Abort+0x47c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d004      	beq.n	8003cca <HAL_DMA_Abort+0x422>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a18      	ldr	r2, [pc, #96]	@ (8003d28 <HAL_DMA_Abort+0x480>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d101      	bne.n	8003cce <HAL_DMA_Abort+0x426>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <HAL_DMA_Abort+0x428>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d02b      	beq.n	8003d2c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	223f      	movs	r2, #63	@ 0x3f
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	609a      	str	r2, [r3, #8]
 8003cea:	e02a      	b.n	8003d42 <HAL_DMA_Abort+0x49a>
 8003cec:	40020010 	.word	0x40020010
 8003cf0:	40020028 	.word	0x40020028
 8003cf4:	40020040 	.word	0x40020040
 8003cf8:	40020058 	.word	0x40020058
 8003cfc:	40020070 	.word	0x40020070
 8003d00:	40020088 	.word	0x40020088
 8003d04:	400200a0 	.word	0x400200a0
 8003d08:	400200b8 	.word	0x400200b8
 8003d0c:	40020410 	.word	0x40020410
 8003d10:	40020428 	.word	0x40020428
 8003d14:	40020440 	.word	0x40020440
 8003d18:	40020458 	.word	0x40020458
 8003d1c:	40020470 	.word	0x40020470
 8003d20:	40020488 	.word	0x40020488
 8003d24:	400204a0 	.word	0x400204a0
 8003d28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d30:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a4f      	ldr	r2, [pc, #316]	@ (8003e84 <HAL_DMA_Abort+0x5dc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d072      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a4d      	ldr	r2, [pc, #308]	@ (8003e88 <HAL_DMA_Abort+0x5e0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d06d      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a4c      	ldr	r2, [pc, #304]	@ (8003e8c <HAL_DMA_Abort+0x5e4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d068      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a4a      	ldr	r2, [pc, #296]	@ (8003e90 <HAL_DMA_Abort+0x5e8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d063      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a49      	ldr	r2, [pc, #292]	@ (8003e94 <HAL_DMA_Abort+0x5ec>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d05e      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a47      	ldr	r2, [pc, #284]	@ (8003e98 <HAL_DMA_Abort+0x5f0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d059      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a46      	ldr	r2, [pc, #280]	@ (8003e9c <HAL_DMA_Abort+0x5f4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d054      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a44      	ldr	r2, [pc, #272]	@ (8003ea0 <HAL_DMA_Abort+0x5f8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d04f      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a43      	ldr	r2, [pc, #268]	@ (8003ea4 <HAL_DMA_Abort+0x5fc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d04a      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a41      	ldr	r2, [pc, #260]	@ (8003ea8 <HAL_DMA_Abort+0x600>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d045      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a40      	ldr	r2, [pc, #256]	@ (8003eac <HAL_DMA_Abort+0x604>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d040      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a3e      	ldr	r2, [pc, #248]	@ (8003eb0 <HAL_DMA_Abort+0x608>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d03b      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a3d      	ldr	r2, [pc, #244]	@ (8003eb4 <HAL_DMA_Abort+0x60c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d036      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a3b      	ldr	r2, [pc, #236]	@ (8003eb8 <HAL_DMA_Abort+0x610>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d031      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a3a      	ldr	r2, [pc, #232]	@ (8003ebc <HAL_DMA_Abort+0x614>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d02c      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a38      	ldr	r2, [pc, #224]	@ (8003ec0 <HAL_DMA_Abort+0x618>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d027      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a37      	ldr	r2, [pc, #220]	@ (8003ec4 <HAL_DMA_Abort+0x61c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d022      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a35      	ldr	r2, [pc, #212]	@ (8003ec8 <HAL_DMA_Abort+0x620>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d01d      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a34      	ldr	r2, [pc, #208]	@ (8003ecc <HAL_DMA_Abort+0x624>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d018      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a32      	ldr	r2, [pc, #200]	@ (8003ed0 <HAL_DMA_Abort+0x628>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d013      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a31      	ldr	r2, [pc, #196]	@ (8003ed4 <HAL_DMA_Abort+0x62c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00e      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a2f      	ldr	r2, [pc, #188]	@ (8003ed8 <HAL_DMA_Abort+0x630>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d009      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a2e      	ldr	r2, [pc, #184]	@ (8003edc <HAL_DMA_Abort+0x634>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d004      	beq.n	8003e32 <HAL_DMA_Abort+0x58a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ee0 <HAL_DMA_Abort+0x638>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d101      	bne.n	8003e36 <HAL_DMA_Abort+0x58e>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <HAL_DMA_Abort+0x590>
 8003e36:	2300      	movs	r3, #0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d015      	beq.n	8003e68 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e44:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00c      	beq.n	8003e68 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e5c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e66:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40020010 	.word	0x40020010
 8003e88:	40020028 	.word	0x40020028
 8003e8c:	40020040 	.word	0x40020040
 8003e90:	40020058 	.word	0x40020058
 8003e94:	40020070 	.word	0x40020070
 8003e98:	40020088 	.word	0x40020088
 8003e9c:	400200a0 	.word	0x400200a0
 8003ea0:	400200b8 	.word	0x400200b8
 8003ea4:	40020410 	.word	0x40020410
 8003ea8:	40020428 	.word	0x40020428
 8003eac:	40020440 	.word	0x40020440
 8003eb0:	40020458 	.word	0x40020458
 8003eb4:	40020470 	.word	0x40020470
 8003eb8:	40020488 	.word	0x40020488
 8003ebc:	400204a0 	.word	0x400204a0
 8003ec0:	400204b8 	.word	0x400204b8
 8003ec4:	58025408 	.word	0x58025408
 8003ec8:	5802541c 	.word	0x5802541c
 8003ecc:	58025430 	.word	0x58025430
 8003ed0:	58025444 	.word	0x58025444
 8003ed4:	58025458 	.word	0x58025458
 8003ed8:	5802546c 	.word	0x5802546c
 8003edc:	58025480 	.word	0x58025480
 8003ee0:	58025494 	.word	0x58025494

08003ee4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e237      	b.n	8004366 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d004      	beq.n	8003f0c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2280      	movs	r2, #128	@ 0x80
 8003f06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e22c      	b.n	8004366 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a5c      	ldr	r2, [pc, #368]	@ (8004084 <HAL_DMA_Abort_IT+0x1a0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d04a      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a5b      	ldr	r2, [pc, #364]	@ (8004088 <HAL_DMA_Abort_IT+0x1a4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d045      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a59      	ldr	r2, [pc, #356]	@ (800408c <HAL_DMA_Abort_IT+0x1a8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d040      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a58      	ldr	r2, [pc, #352]	@ (8004090 <HAL_DMA_Abort_IT+0x1ac>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d03b      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a56      	ldr	r2, [pc, #344]	@ (8004094 <HAL_DMA_Abort_IT+0x1b0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d036      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a55      	ldr	r2, [pc, #340]	@ (8004098 <HAL_DMA_Abort_IT+0x1b4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d031      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a53      	ldr	r2, [pc, #332]	@ (800409c <HAL_DMA_Abort_IT+0x1b8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d02c      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a52      	ldr	r2, [pc, #328]	@ (80040a0 <HAL_DMA_Abort_IT+0x1bc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d027      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a50      	ldr	r2, [pc, #320]	@ (80040a4 <HAL_DMA_Abort_IT+0x1c0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d022      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a4f      	ldr	r2, [pc, #316]	@ (80040a8 <HAL_DMA_Abort_IT+0x1c4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d01d      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a4d      	ldr	r2, [pc, #308]	@ (80040ac <HAL_DMA_Abort_IT+0x1c8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d018      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a4c      	ldr	r2, [pc, #304]	@ (80040b0 <HAL_DMA_Abort_IT+0x1cc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d013      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a4a      	ldr	r2, [pc, #296]	@ (80040b4 <HAL_DMA_Abort_IT+0x1d0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00e      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a49      	ldr	r2, [pc, #292]	@ (80040b8 <HAL_DMA_Abort_IT+0x1d4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d009      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a47      	ldr	r2, [pc, #284]	@ (80040bc <HAL_DMA_Abort_IT+0x1d8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d004      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a46      	ldr	r2, [pc, #280]	@ (80040c0 <HAL_DMA_Abort_IT+0x1dc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d101      	bne.n	8003fb0 <HAL_DMA_Abort_IT+0xcc>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <HAL_DMA_Abort_IT+0xce>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8086 	beq.w	80040c4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2204      	movs	r2, #4
 8003fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a2f      	ldr	r2, [pc, #188]	@ (8004084 <HAL_DMA_Abort_IT+0x1a0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d04a      	beq.n	8004060 <HAL_DMA_Abort_IT+0x17c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a2e      	ldr	r2, [pc, #184]	@ (8004088 <HAL_DMA_Abort_IT+0x1a4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d045      	beq.n	8004060 <HAL_DMA_Abort_IT+0x17c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800408c <HAL_DMA_Abort_IT+0x1a8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d040      	beq.n	8004060 <HAL_DMA_Abort_IT+0x17c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a2b      	ldr	r2, [pc, #172]	@ (8004090 <HAL_DMA_Abort_IT+0x1ac>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d03b      	beq.n	8004060 <HAL_DMA_Abort_IT+0x17c>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a29      	ldr	r2, [pc, #164]	@ (8004094 <HAL_DMA_Abort_IT+0x1b0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d036      	beq.n	8004060 <HAL_DMA_Abort_IT+0x17c>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a28      	ldr	r2, [pc, #160]	@ (8004098 <HAL_DMA_Abort_IT+0x1b4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d031      	beq.n	8004060 <HAL_DMA_Abort_IT+0x17c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a26      	ldr	r2, [pc, #152]	@ (800409c <HAL_DMA_Abort_IT+0x1b8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d02c      	beq.n	8004060 <HAL_DMA_Abort_IT+0x17c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a25      	ldr	r2, [pc, #148]	@ (80040a0 <HAL_DMA_Abort_IT+0x1bc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d027      	beq.n	8004060 <HAL_DMA_Abort_IT+0x17c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a23      	ldr	r2, [pc, #140]	@ (80040a4 <HAL_DMA_Abort_IT+0x1c0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d022      	beq.n	8004060 <HAL_DMA_Abort_IT+0x17c>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a22      	ldr	r2, [pc, #136]	@ (80040a8 <HAL_DMA_Abort_IT+0x1c4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d01d      	beq.n	8004060 <HAL_DMA_Abort_IT+0x17c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a20      	ldr	r2, [pc, #128]	@ (80040ac <HAL_DMA_Abort_IT+0x1c8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d018      	beq.n	8004060 <HAL_DMA_Abort_IT+0x17c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1f      	ldr	r2, [pc, #124]	@ (80040b0 <HAL_DMA_Abort_IT+0x1cc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d013      	beq.n	8004060 <HAL_DMA_Abort_IT+0x17c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a1d      	ldr	r2, [pc, #116]	@ (80040b4 <HAL_DMA_Abort_IT+0x1d0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00e      	beq.n	8004060 <HAL_DMA_Abort_IT+0x17c>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1c      	ldr	r2, [pc, #112]	@ (80040b8 <HAL_DMA_Abort_IT+0x1d4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d009      	beq.n	8004060 <HAL_DMA_Abort_IT+0x17c>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1a      	ldr	r2, [pc, #104]	@ (80040bc <HAL_DMA_Abort_IT+0x1d8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d004      	beq.n	8004060 <HAL_DMA_Abort_IT+0x17c>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a19      	ldr	r2, [pc, #100]	@ (80040c0 <HAL_DMA_Abort_IT+0x1dc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d108      	bne.n	8004072 <HAL_DMA_Abort_IT+0x18e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	e178      	b.n	8004364 <HAL_DMA_Abort_IT+0x480>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0201 	bic.w	r2, r2, #1
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e16f      	b.n	8004364 <HAL_DMA_Abort_IT+0x480>
 8004084:	40020010 	.word	0x40020010
 8004088:	40020028 	.word	0x40020028
 800408c:	40020040 	.word	0x40020040
 8004090:	40020058 	.word	0x40020058
 8004094:	40020070 	.word	0x40020070
 8004098:	40020088 	.word	0x40020088
 800409c:	400200a0 	.word	0x400200a0
 80040a0:	400200b8 	.word	0x400200b8
 80040a4:	40020410 	.word	0x40020410
 80040a8:	40020428 	.word	0x40020428
 80040ac:	40020440 	.word	0x40020440
 80040b0:	40020458 	.word	0x40020458
 80040b4:	40020470 	.word	0x40020470
 80040b8:	40020488 	.word	0x40020488
 80040bc:	400204a0 	.word	0x400204a0
 80040c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 020e 	bic.w	r2, r2, #14
 80040d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a6c      	ldr	r2, [pc, #432]	@ (800428c <HAL_DMA_Abort_IT+0x3a8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d04a      	beq.n	8004174 <HAL_DMA_Abort_IT+0x290>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a6b      	ldr	r2, [pc, #428]	@ (8004290 <HAL_DMA_Abort_IT+0x3ac>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d045      	beq.n	8004174 <HAL_DMA_Abort_IT+0x290>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a69      	ldr	r2, [pc, #420]	@ (8004294 <HAL_DMA_Abort_IT+0x3b0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d040      	beq.n	8004174 <HAL_DMA_Abort_IT+0x290>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a68      	ldr	r2, [pc, #416]	@ (8004298 <HAL_DMA_Abort_IT+0x3b4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d03b      	beq.n	8004174 <HAL_DMA_Abort_IT+0x290>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a66      	ldr	r2, [pc, #408]	@ (800429c <HAL_DMA_Abort_IT+0x3b8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d036      	beq.n	8004174 <HAL_DMA_Abort_IT+0x290>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a65      	ldr	r2, [pc, #404]	@ (80042a0 <HAL_DMA_Abort_IT+0x3bc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d031      	beq.n	8004174 <HAL_DMA_Abort_IT+0x290>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a63      	ldr	r2, [pc, #396]	@ (80042a4 <HAL_DMA_Abort_IT+0x3c0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d02c      	beq.n	8004174 <HAL_DMA_Abort_IT+0x290>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a62      	ldr	r2, [pc, #392]	@ (80042a8 <HAL_DMA_Abort_IT+0x3c4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d027      	beq.n	8004174 <HAL_DMA_Abort_IT+0x290>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a60      	ldr	r2, [pc, #384]	@ (80042ac <HAL_DMA_Abort_IT+0x3c8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d022      	beq.n	8004174 <HAL_DMA_Abort_IT+0x290>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a5f      	ldr	r2, [pc, #380]	@ (80042b0 <HAL_DMA_Abort_IT+0x3cc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d01d      	beq.n	8004174 <HAL_DMA_Abort_IT+0x290>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a5d      	ldr	r2, [pc, #372]	@ (80042b4 <HAL_DMA_Abort_IT+0x3d0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d018      	beq.n	8004174 <HAL_DMA_Abort_IT+0x290>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a5c      	ldr	r2, [pc, #368]	@ (80042b8 <HAL_DMA_Abort_IT+0x3d4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d013      	beq.n	8004174 <HAL_DMA_Abort_IT+0x290>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a5a      	ldr	r2, [pc, #360]	@ (80042bc <HAL_DMA_Abort_IT+0x3d8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00e      	beq.n	8004174 <HAL_DMA_Abort_IT+0x290>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a59      	ldr	r2, [pc, #356]	@ (80042c0 <HAL_DMA_Abort_IT+0x3dc>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d009      	beq.n	8004174 <HAL_DMA_Abort_IT+0x290>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a57      	ldr	r2, [pc, #348]	@ (80042c4 <HAL_DMA_Abort_IT+0x3e0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d004      	beq.n	8004174 <HAL_DMA_Abort_IT+0x290>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a56      	ldr	r2, [pc, #344]	@ (80042c8 <HAL_DMA_Abort_IT+0x3e4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d108      	bne.n	8004186 <HAL_DMA_Abort_IT+0x2a2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0201 	bic.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e007      	b.n	8004196 <HAL_DMA_Abort_IT+0x2b2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0201 	bic.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a3c      	ldr	r2, [pc, #240]	@ (800428c <HAL_DMA_Abort_IT+0x3a8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d072      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a3a      	ldr	r2, [pc, #232]	@ (8004290 <HAL_DMA_Abort_IT+0x3ac>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d06d      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a39      	ldr	r2, [pc, #228]	@ (8004294 <HAL_DMA_Abort_IT+0x3b0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d068      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a37      	ldr	r2, [pc, #220]	@ (8004298 <HAL_DMA_Abort_IT+0x3b4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d063      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a36      	ldr	r2, [pc, #216]	@ (800429c <HAL_DMA_Abort_IT+0x3b8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d05e      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a34      	ldr	r2, [pc, #208]	@ (80042a0 <HAL_DMA_Abort_IT+0x3bc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d059      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a33      	ldr	r2, [pc, #204]	@ (80042a4 <HAL_DMA_Abort_IT+0x3c0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d054      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a31      	ldr	r2, [pc, #196]	@ (80042a8 <HAL_DMA_Abort_IT+0x3c4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d04f      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a30      	ldr	r2, [pc, #192]	@ (80042ac <HAL_DMA_Abort_IT+0x3c8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d04a      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a2e      	ldr	r2, [pc, #184]	@ (80042b0 <HAL_DMA_Abort_IT+0x3cc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d045      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a2d      	ldr	r2, [pc, #180]	@ (80042b4 <HAL_DMA_Abort_IT+0x3d0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d040      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a2b      	ldr	r2, [pc, #172]	@ (80042b8 <HAL_DMA_Abort_IT+0x3d4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d03b      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a2a      	ldr	r2, [pc, #168]	@ (80042bc <HAL_DMA_Abort_IT+0x3d8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d036      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a28      	ldr	r2, [pc, #160]	@ (80042c0 <HAL_DMA_Abort_IT+0x3dc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d031      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a27      	ldr	r2, [pc, #156]	@ (80042c4 <HAL_DMA_Abort_IT+0x3e0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d02c      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a25      	ldr	r2, [pc, #148]	@ (80042c8 <HAL_DMA_Abort_IT+0x3e4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d027      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a24      	ldr	r2, [pc, #144]	@ (80042cc <HAL_DMA_Abort_IT+0x3e8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d022      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a22      	ldr	r2, [pc, #136]	@ (80042d0 <HAL_DMA_Abort_IT+0x3ec>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01d      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a21      	ldr	r2, [pc, #132]	@ (80042d4 <HAL_DMA_Abort_IT+0x3f0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d018      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1f      	ldr	r2, [pc, #124]	@ (80042d8 <HAL_DMA_Abort_IT+0x3f4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1e      	ldr	r2, [pc, #120]	@ (80042dc <HAL_DMA_Abort_IT+0x3f8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1c      	ldr	r2, [pc, #112]	@ (80042e0 <HAL_DMA_Abort_IT+0x3fc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a1b      	ldr	r2, [pc, #108]	@ (80042e4 <HAL_DMA_Abort_IT+0x400>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <HAL_DMA_Abort_IT+0x3a2>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a19      	ldr	r2, [pc, #100]	@ (80042e8 <HAL_DMA_Abort_IT+0x404>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d132      	bne.n	80042ec <HAL_DMA_Abort_IT+0x408>
 8004286:	2301      	movs	r3, #1
 8004288:	e031      	b.n	80042ee <HAL_DMA_Abort_IT+0x40a>
 800428a:	bf00      	nop
 800428c:	40020010 	.word	0x40020010
 8004290:	40020028 	.word	0x40020028
 8004294:	40020040 	.word	0x40020040
 8004298:	40020058 	.word	0x40020058
 800429c:	40020070 	.word	0x40020070
 80042a0:	40020088 	.word	0x40020088
 80042a4:	400200a0 	.word	0x400200a0
 80042a8:	400200b8 	.word	0x400200b8
 80042ac:	40020410 	.word	0x40020410
 80042b0:	40020428 	.word	0x40020428
 80042b4:	40020440 	.word	0x40020440
 80042b8:	40020458 	.word	0x40020458
 80042bc:	40020470 	.word	0x40020470
 80042c0:	40020488 	.word	0x40020488
 80042c4:	400204a0 	.word	0x400204a0
 80042c8:	400204b8 	.word	0x400204b8
 80042cc:	58025408 	.word	0x58025408
 80042d0:	5802541c 	.word	0x5802541c
 80042d4:	58025430 	.word	0x58025430
 80042d8:	58025444 	.word	0x58025444
 80042dc:	58025458 	.word	0x58025458
 80042e0:	5802546c 	.word	0x5802546c
 80042e4:	58025480 	.word	0x58025480
 80042e8:	58025494 	.word	0x58025494
 80042ec:	2300      	movs	r3, #0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d028      	beq.n	8004344 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004300:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004306:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	2201      	movs	r2, #1
 8004312:	409a      	lsls	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004320:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00c      	beq.n	8004344 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004334:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004338:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004342:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop

08004370 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08a      	sub	sp, #40	@ 0x28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800437c:	4b67      	ldr	r3, [pc, #412]	@ (800451c <HAL_DMA_IRQHandler+0x1ac>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a67      	ldr	r2, [pc, #412]	@ (8004520 <HAL_DMA_IRQHandler+0x1b0>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	0a9b      	lsrs	r3, r3, #10
 8004388:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004394:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a5f      	ldr	r2, [pc, #380]	@ (8004524 <HAL_DMA_IRQHandler+0x1b4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d04a      	beq.n	8004442 <HAL_DMA_IRQHandler+0xd2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a5d      	ldr	r2, [pc, #372]	@ (8004528 <HAL_DMA_IRQHandler+0x1b8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d045      	beq.n	8004442 <HAL_DMA_IRQHandler+0xd2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a5c      	ldr	r2, [pc, #368]	@ (800452c <HAL_DMA_IRQHandler+0x1bc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d040      	beq.n	8004442 <HAL_DMA_IRQHandler+0xd2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a5a      	ldr	r2, [pc, #360]	@ (8004530 <HAL_DMA_IRQHandler+0x1c0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d03b      	beq.n	8004442 <HAL_DMA_IRQHandler+0xd2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a59      	ldr	r2, [pc, #356]	@ (8004534 <HAL_DMA_IRQHandler+0x1c4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d036      	beq.n	8004442 <HAL_DMA_IRQHandler+0xd2>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a57      	ldr	r2, [pc, #348]	@ (8004538 <HAL_DMA_IRQHandler+0x1c8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d031      	beq.n	8004442 <HAL_DMA_IRQHandler+0xd2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a56      	ldr	r2, [pc, #344]	@ (800453c <HAL_DMA_IRQHandler+0x1cc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d02c      	beq.n	8004442 <HAL_DMA_IRQHandler+0xd2>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a54      	ldr	r2, [pc, #336]	@ (8004540 <HAL_DMA_IRQHandler+0x1d0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d027      	beq.n	8004442 <HAL_DMA_IRQHandler+0xd2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a53      	ldr	r2, [pc, #332]	@ (8004544 <HAL_DMA_IRQHandler+0x1d4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d022      	beq.n	8004442 <HAL_DMA_IRQHandler+0xd2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a51      	ldr	r2, [pc, #324]	@ (8004548 <HAL_DMA_IRQHandler+0x1d8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01d      	beq.n	8004442 <HAL_DMA_IRQHandler+0xd2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a50      	ldr	r2, [pc, #320]	@ (800454c <HAL_DMA_IRQHandler+0x1dc>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d018      	beq.n	8004442 <HAL_DMA_IRQHandler+0xd2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a4e      	ldr	r2, [pc, #312]	@ (8004550 <HAL_DMA_IRQHandler+0x1e0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d013      	beq.n	8004442 <HAL_DMA_IRQHandler+0xd2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a4d      	ldr	r2, [pc, #308]	@ (8004554 <HAL_DMA_IRQHandler+0x1e4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00e      	beq.n	8004442 <HAL_DMA_IRQHandler+0xd2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a4b      	ldr	r2, [pc, #300]	@ (8004558 <HAL_DMA_IRQHandler+0x1e8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d009      	beq.n	8004442 <HAL_DMA_IRQHandler+0xd2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a4a      	ldr	r2, [pc, #296]	@ (800455c <HAL_DMA_IRQHandler+0x1ec>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <HAL_DMA_IRQHandler+0xd2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a48      	ldr	r2, [pc, #288]	@ (8004560 <HAL_DMA_IRQHandler+0x1f0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <HAL_DMA_IRQHandler+0xd6>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_DMA_IRQHandler+0xd8>
 8004446:	2300      	movs	r3, #0
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 842b 	beq.w	8004ca4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004452:	f003 031f 	and.w	r3, r3, #31
 8004456:	2208      	movs	r2, #8
 8004458:	409a      	lsls	r2, r3
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80a2 	beq.w	80045a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a2e      	ldr	r2, [pc, #184]	@ (8004524 <HAL_DMA_IRQHandler+0x1b4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d04a      	beq.n	8004504 <HAL_DMA_IRQHandler+0x194>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a2d      	ldr	r2, [pc, #180]	@ (8004528 <HAL_DMA_IRQHandler+0x1b8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d045      	beq.n	8004504 <HAL_DMA_IRQHandler+0x194>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a2b      	ldr	r2, [pc, #172]	@ (800452c <HAL_DMA_IRQHandler+0x1bc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d040      	beq.n	8004504 <HAL_DMA_IRQHandler+0x194>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a2a      	ldr	r2, [pc, #168]	@ (8004530 <HAL_DMA_IRQHandler+0x1c0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d03b      	beq.n	8004504 <HAL_DMA_IRQHandler+0x194>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a28      	ldr	r2, [pc, #160]	@ (8004534 <HAL_DMA_IRQHandler+0x1c4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d036      	beq.n	8004504 <HAL_DMA_IRQHandler+0x194>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a27      	ldr	r2, [pc, #156]	@ (8004538 <HAL_DMA_IRQHandler+0x1c8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d031      	beq.n	8004504 <HAL_DMA_IRQHandler+0x194>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a25      	ldr	r2, [pc, #148]	@ (800453c <HAL_DMA_IRQHandler+0x1cc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d02c      	beq.n	8004504 <HAL_DMA_IRQHandler+0x194>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a24      	ldr	r2, [pc, #144]	@ (8004540 <HAL_DMA_IRQHandler+0x1d0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d027      	beq.n	8004504 <HAL_DMA_IRQHandler+0x194>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a22      	ldr	r2, [pc, #136]	@ (8004544 <HAL_DMA_IRQHandler+0x1d4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d022      	beq.n	8004504 <HAL_DMA_IRQHandler+0x194>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a21      	ldr	r2, [pc, #132]	@ (8004548 <HAL_DMA_IRQHandler+0x1d8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d01d      	beq.n	8004504 <HAL_DMA_IRQHandler+0x194>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1f      	ldr	r2, [pc, #124]	@ (800454c <HAL_DMA_IRQHandler+0x1dc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_DMA_IRQHandler+0x194>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004550 <HAL_DMA_IRQHandler+0x1e0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <HAL_DMA_IRQHandler+0x194>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004554 <HAL_DMA_IRQHandler+0x1e4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_DMA_IRQHandler+0x194>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004558 <HAL_DMA_IRQHandler+0x1e8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_DMA_IRQHandler+0x194>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a19      	ldr	r2, [pc, #100]	@ (800455c <HAL_DMA_IRQHandler+0x1ec>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_DMA_IRQHandler+0x194>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a18      	ldr	r2, [pc, #96]	@ (8004560 <HAL_DMA_IRQHandler+0x1f0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d12f      	bne.n	8004564 <HAL_DMA_IRQHandler+0x1f4>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	bf14      	ite	ne
 8004512:	2301      	movne	r3, #1
 8004514:	2300      	moveq	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	e02e      	b.n	8004578 <HAL_DMA_IRQHandler+0x208>
 800451a:	bf00      	nop
 800451c:	24000000 	.word	0x24000000
 8004520:	1b4e81b5 	.word	0x1b4e81b5
 8004524:	40020010 	.word	0x40020010
 8004528:	40020028 	.word	0x40020028
 800452c:	40020040 	.word	0x40020040
 8004530:	40020058 	.word	0x40020058
 8004534:	40020070 	.word	0x40020070
 8004538:	40020088 	.word	0x40020088
 800453c:	400200a0 	.word	0x400200a0
 8004540:	400200b8 	.word	0x400200b8
 8004544:	40020410 	.word	0x40020410
 8004548:	40020428 	.word	0x40020428
 800454c:	40020440 	.word	0x40020440
 8004550:	40020458 	.word	0x40020458
 8004554:	40020470 	.word	0x40020470
 8004558:	40020488 	.word	0x40020488
 800455c:	400204a0 	.word	0x400204a0
 8004560:	400204b8 	.word	0x400204b8
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	bf14      	ite	ne
 8004572:	2301      	movne	r3, #1
 8004574:	2300      	moveq	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d015      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0204 	bic.w	r2, r2, #4
 800458a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	2208      	movs	r2, #8
 8004596:	409a      	lsls	r2, r3
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a0:	f043 0201 	orr.w	r2, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	fa22 f303 	lsr.w	r3, r2, r3
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d06e      	beq.n	800469c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a69      	ldr	r2, [pc, #420]	@ (8004768 <HAL_DMA_IRQHandler+0x3f8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d04a      	beq.n	800465e <HAL_DMA_IRQHandler+0x2ee>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a67      	ldr	r2, [pc, #412]	@ (800476c <HAL_DMA_IRQHandler+0x3fc>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d045      	beq.n	800465e <HAL_DMA_IRQHandler+0x2ee>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a66      	ldr	r2, [pc, #408]	@ (8004770 <HAL_DMA_IRQHandler+0x400>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d040      	beq.n	800465e <HAL_DMA_IRQHandler+0x2ee>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a64      	ldr	r2, [pc, #400]	@ (8004774 <HAL_DMA_IRQHandler+0x404>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d03b      	beq.n	800465e <HAL_DMA_IRQHandler+0x2ee>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a63      	ldr	r2, [pc, #396]	@ (8004778 <HAL_DMA_IRQHandler+0x408>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d036      	beq.n	800465e <HAL_DMA_IRQHandler+0x2ee>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a61      	ldr	r2, [pc, #388]	@ (800477c <HAL_DMA_IRQHandler+0x40c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d031      	beq.n	800465e <HAL_DMA_IRQHandler+0x2ee>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a60      	ldr	r2, [pc, #384]	@ (8004780 <HAL_DMA_IRQHandler+0x410>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d02c      	beq.n	800465e <HAL_DMA_IRQHandler+0x2ee>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a5e      	ldr	r2, [pc, #376]	@ (8004784 <HAL_DMA_IRQHandler+0x414>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d027      	beq.n	800465e <HAL_DMA_IRQHandler+0x2ee>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a5d      	ldr	r2, [pc, #372]	@ (8004788 <HAL_DMA_IRQHandler+0x418>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d022      	beq.n	800465e <HAL_DMA_IRQHandler+0x2ee>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a5b      	ldr	r2, [pc, #364]	@ (800478c <HAL_DMA_IRQHandler+0x41c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d01d      	beq.n	800465e <HAL_DMA_IRQHandler+0x2ee>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a5a      	ldr	r2, [pc, #360]	@ (8004790 <HAL_DMA_IRQHandler+0x420>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d018      	beq.n	800465e <HAL_DMA_IRQHandler+0x2ee>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a58      	ldr	r2, [pc, #352]	@ (8004794 <HAL_DMA_IRQHandler+0x424>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <HAL_DMA_IRQHandler+0x2ee>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a57      	ldr	r2, [pc, #348]	@ (8004798 <HAL_DMA_IRQHandler+0x428>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00e      	beq.n	800465e <HAL_DMA_IRQHandler+0x2ee>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a55      	ldr	r2, [pc, #340]	@ (800479c <HAL_DMA_IRQHandler+0x42c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_DMA_IRQHandler+0x2ee>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a54      	ldr	r2, [pc, #336]	@ (80047a0 <HAL_DMA_IRQHandler+0x430>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d004      	beq.n	800465e <HAL_DMA_IRQHandler+0x2ee>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a52      	ldr	r2, [pc, #328]	@ (80047a4 <HAL_DMA_IRQHandler+0x434>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d10a      	bne.n	8004674 <HAL_DMA_IRQHandler+0x304>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004668:	2b00      	cmp	r3, #0
 800466a:	bf14      	ite	ne
 800466c:	2301      	movne	r3, #1
 800466e:	2300      	moveq	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e003      	b.n	800467c <HAL_DMA_IRQHandler+0x30c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2300      	movs	r3, #0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00d      	beq.n	800469c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004684:	f003 031f 	and.w	r3, r3, #31
 8004688:	2201      	movs	r2, #1
 800468a:	409a      	lsls	r2, r3
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004694:	f043 0202 	orr.w	r2, r3, #2
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	2204      	movs	r2, #4
 80046a6:	409a      	lsls	r2, r3
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 808f 	beq.w	80047d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004768 <HAL_DMA_IRQHandler+0x3f8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d04a      	beq.n	8004752 <HAL_DMA_IRQHandler+0x3e2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a2a      	ldr	r2, [pc, #168]	@ (800476c <HAL_DMA_IRQHandler+0x3fc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d045      	beq.n	8004752 <HAL_DMA_IRQHandler+0x3e2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a29      	ldr	r2, [pc, #164]	@ (8004770 <HAL_DMA_IRQHandler+0x400>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d040      	beq.n	8004752 <HAL_DMA_IRQHandler+0x3e2>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a27      	ldr	r2, [pc, #156]	@ (8004774 <HAL_DMA_IRQHandler+0x404>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d03b      	beq.n	8004752 <HAL_DMA_IRQHandler+0x3e2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a26      	ldr	r2, [pc, #152]	@ (8004778 <HAL_DMA_IRQHandler+0x408>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d036      	beq.n	8004752 <HAL_DMA_IRQHandler+0x3e2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a24      	ldr	r2, [pc, #144]	@ (800477c <HAL_DMA_IRQHandler+0x40c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d031      	beq.n	8004752 <HAL_DMA_IRQHandler+0x3e2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a23      	ldr	r2, [pc, #140]	@ (8004780 <HAL_DMA_IRQHandler+0x410>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d02c      	beq.n	8004752 <HAL_DMA_IRQHandler+0x3e2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a21      	ldr	r2, [pc, #132]	@ (8004784 <HAL_DMA_IRQHandler+0x414>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d027      	beq.n	8004752 <HAL_DMA_IRQHandler+0x3e2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a20      	ldr	r2, [pc, #128]	@ (8004788 <HAL_DMA_IRQHandler+0x418>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d022      	beq.n	8004752 <HAL_DMA_IRQHandler+0x3e2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1e      	ldr	r2, [pc, #120]	@ (800478c <HAL_DMA_IRQHandler+0x41c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01d      	beq.n	8004752 <HAL_DMA_IRQHandler+0x3e2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1d      	ldr	r2, [pc, #116]	@ (8004790 <HAL_DMA_IRQHandler+0x420>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d018      	beq.n	8004752 <HAL_DMA_IRQHandler+0x3e2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1b      	ldr	r2, [pc, #108]	@ (8004794 <HAL_DMA_IRQHandler+0x424>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_DMA_IRQHandler+0x3e2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1a      	ldr	r2, [pc, #104]	@ (8004798 <HAL_DMA_IRQHandler+0x428>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_DMA_IRQHandler+0x3e2>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a18      	ldr	r2, [pc, #96]	@ (800479c <HAL_DMA_IRQHandler+0x42c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_DMA_IRQHandler+0x3e2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a17      	ldr	r2, [pc, #92]	@ (80047a0 <HAL_DMA_IRQHandler+0x430>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_DMA_IRQHandler+0x3e2>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a15      	ldr	r2, [pc, #84]	@ (80047a4 <HAL_DMA_IRQHandler+0x434>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d12a      	bne.n	80047a8 <HAL_DMA_IRQHandler+0x438>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	bf14      	ite	ne
 8004760:	2301      	movne	r3, #1
 8004762:	2300      	moveq	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e023      	b.n	80047b0 <HAL_DMA_IRQHandler+0x440>
 8004768:	40020010 	.word	0x40020010
 800476c:	40020028 	.word	0x40020028
 8004770:	40020040 	.word	0x40020040
 8004774:	40020058 	.word	0x40020058
 8004778:	40020070 	.word	0x40020070
 800477c:	40020088 	.word	0x40020088
 8004780:	400200a0 	.word	0x400200a0
 8004784:	400200b8 	.word	0x400200b8
 8004788:	40020410 	.word	0x40020410
 800478c:	40020428 	.word	0x40020428
 8004790:	40020440 	.word	0x40020440
 8004794:	40020458 	.word	0x40020458
 8004798:	40020470 	.word	0x40020470
 800479c:	40020488 	.word	0x40020488
 80047a0:	400204a0 	.word	0x400204a0
 80047a4:	400204b8 	.word	0x400204b8
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2300      	movs	r3, #0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	2204      	movs	r2, #4
 80047be:	409a      	lsls	r2, r3
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c8:	f043 0204 	orr.w	r2, r3, #4
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	2210      	movs	r2, #16
 80047da:	409a      	lsls	r2, r3
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80a6 	beq.w	8004932 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a85      	ldr	r2, [pc, #532]	@ (8004a00 <HAL_DMA_IRQHandler+0x690>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d04a      	beq.n	8004886 <HAL_DMA_IRQHandler+0x516>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a83      	ldr	r2, [pc, #524]	@ (8004a04 <HAL_DMA_IRQHandler+0x694>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d045      	beq.n	8004886 <HAL_DMA_IRQHandler+0x516>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a82      	ldr	r2, [pc, #520]	@ (8004a08 <HAL_DMA_IRQHandler+0x698>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d040      	beq.n	8004886 <HAL_DMA_IRQHandler+0x516>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a80      	ldr	r2, [pc, #512]	@ (8004a0c <HAL_DMA_IRQHandler+0x69c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d03b      	beq.n	8004886 <HAL_DMA_IRQHandler+0x516>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a7f      	ldr	r2, [pc, #508]	@ (8004a10 <HAL_DMA_IRQHandler+0x6a0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d036      	beq.n	8004886 <HAL_DMA_IRQHandler+0x516>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a7d      	ldr	r2, [pc, #500]	@ (8004a14 <HAL_DMA_IRQHandler+0x6a4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d031      	beq.n	8004886 <HAL_DMA_IRQHandler+0x516>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a7c      	ldr	r2, [pc, #496]	@ (8004a18 <HAL_DMA_IRQHandler+0x6a8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d02c      	beq.n	8004886 <HAL_DMA_IRQHandler+0x516>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a7a      	ldr	r2, [pc, #488]	@ (8004a1c <HAL_DMA_IRQHandler+0x6ac>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d027      	beq.n	8004886 <HAL_DMA_IRQHandler+0x516>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a79      	ldr	r2, [pc, #484]	@ (8004a20 <HAL_DMA_IRQHandler+0x6b0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d022      	beq.n	8004886 <HAL_DMA_IRQHandler+0x516>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a77      	ldr	r2, [pc, #476]	@ (8004a24 <HAL_DMA_IRQHandler+0x6b4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01d      	beq.n	8004886 <HAL_DMA_IRQHandler+0x516>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a76      	ldr	r2, [pc, #472]	@ (8004a28 <HAL_DMA_IRQHandler+0x6b8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d018      	beq.n	8004886 <HAL_DMA_IRQHandler+0x516>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a74      	ldr	r2, [pc, #464]	@ (8004a2c <HAL_DMA_IRQHandler+0x6bc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d013      	beq.n	8004886 <HAL_DMA_IRQHandler+0x516>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a73      	ldr	r2, [pc, #460]	@ (8004a30 <HAL_DMA_IRQHandler+0x6c0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00e      	beq.n	8004886 <HAL_DMA_IRQHandler+0x516>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a71      	ldr	r2, [pc, #452]	@ (8004a34 <HAL_DMA_IRQHandler+0x6c4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d009      	beq.n	8004886 <HAL_DMA_IRQHandler+0x516>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a70      	ldr	r2, [pc, #448]	@ (8004a38 <HAL_DMA_IRQHandler+0x6c8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d004      	beq.n	8004886 <HAL_DMA_IRQHandler+0x516>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a6e      	ldr	r2, [pc, #440]	@ (8004a3c <HAL_DMA_IRQHandler+0x6cc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d10a      	bne.n	800489c <HAL_DMA_IRQHandler+0x52c>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e009      	b.n	80048b0 <HAL_DMA_IRQHandler+0x540>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bf14      	ite	ne
 80048aa:	2301      	movne	r3, #1
 80048ac:	2300      	moveq	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d03e      	beq.n	8004932 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	2210      	movs	r2, #16
 80048be:	409a      	lsls	r2, r3
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d018      	beq.n	8004904 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d108      	bne.n	80048f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d024      	beq.n	8004932 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	4798      	blx	r3
 80048f0:	e01f      	b.n	8004932 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01b      	beq.n	8004932 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	4798      	blx	r3
 8004902:	e016      	b.n	8004932 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800490e:	2b00      	cmp	r3, #0
 8004910:	d107      	bne.n	8004922 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0208 	bic.w	r2, r2, #8
 8004920:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004936:	f003 031f 	and.w	r3, r3, #31
 800493a:	2220      	movs	r2, #32
 800493c:	409a      	lsls	r2, r3
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	4013      	ands	r3, r2
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8110 	beq.w	8004b68 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a00 <HAL_DMA_IRQHandler+0x690>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d04a      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x678>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2b      	ldr	r2, [pc, #172]	@ (8004a04 <HAL_DMA_IRQHandler+0x694>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d045      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x678>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a29      	ldr	r2, [pc, #164]	@ (8004a08 <HAL_DMA_IRQHandler+0x698>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d040      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x678>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a28      	ldr	r2, [pc, #160]	@ (8004a0c <HAL_DMA_IRQHandler+0x69c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d03b      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x678>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a26      	ldr	r2, [pc, #152]	@ (8004a10 <HAL_DMA_IRQHandler+0x6a0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d036      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x678>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a25      	ldr	r2, [pc, #148]	@ (8004a14 <HAL_DMA_IRQHandler+0x6a4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d031      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x678>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a23      	ldr	r2, [pc, #140]	@ (8004a18 <HAL_DMA_IRQHandler+0x6a8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d02c      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x678>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a22      	ldr	r2, [pc, #136]	@ (8004a1c <HAL_DMA_IRQHandler+0x6ac>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d027      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x678>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a20      	ldr	r2, [pc, #128]	@ (8004a20 <HAL_DMA_IRQHandler+0x6b0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d022      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x678>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a24 <HAL_DMA_IRQHandler+0x6b4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d01d      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x678>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a28 <HAL_DMA_IRQHandler+0x6b8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d018      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x678>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1c      	ldr	r2, [pc, #112]	@ (8004a2c <HAL_DMA_IRQHandler+0x6bc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d013      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x678>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004a30 <HAL_DMA_IRQHandler+0x6c0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00e      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x678>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a19      	ldr	r2, [pc, #100]	@ (8004a34 <HAL_DMA_IRQHandler+0x6c4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d009      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x678>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a17      	ldr	r2, [pc, #92]	@ (8004a38 <HAL_DMA_IRQHandler+0x6c8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x678>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a16      	ldr	r2, [pc, #88]	@ (8004a3c <HAL_DMA_IRQHandler+0x6cc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d12b      	bne.n	8004a40 <HAL_DMA_IRQHandler+0x6d0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bf14      	ite	ne
 80049f6:	2301      	movne	r3, #1
 80049f8:	2300      	moveq	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	e02a      	b.n	8004a54 <HAL_DMA_IRQHandler+0x6e4>
 80049fe:	bf00      	nop
 8004a00:	40020010 	.word	0x40020010
 8004a04:	40020028 	.word	0x40020028
 8004a08:	40020040 	.word	0x40020040
 8004a0c:	40020058 	.word	0x40020058
 8004a10:	40020070 	.word	0x40020070
 8004a14:	40020088 	.word	0x40020088
 8004a18:	400200a0 	.word	0x400200a0
 8004a1c:	400200b8 	.word	0x400200b8
 8004a20:	40020410 	.word	0x40020410
 8004a24:	40020428 	.word	0x40020428
 8004a28:	40020440 	.word	0x40020440
 8004a2c:	40020458 	.word	0x40020458
 8004a30:	40020470 	.word	0x40020470
 8004a34:	40020488 	.word	0x40020488
 8004a38:	400204a0 	.word	0x400204a0
 8004a3c:	400204b8 	.word	0x400204b8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bf14      	ite	ne
 8004a4e:	2301      	movne	r3, #1
 8004a50:	2300      	moveq	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8087 	beq.w	8004b68 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	2220      	movs	r2, #32
 8004a64:	409a      	lsls	r2, r3
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d139      	bne.n	8004aea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0216 	bic.w	r2, r2, #22
 8004a84:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a94:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <HAL_DMA_IRQHandler+0x736>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0208 	bic.w	r2, r2, #8
 8004ab4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aba:	f003 031f 	and.w	r3, r3, #31
 8004abe:	223f      	movs	r2, #63	@ 0x3f
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 834a 	beq.w	8005174 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
          }
          return;
 8004ae8:	e344      	b.n	8005174 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d018      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d108      	bne.n	8004b18 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d02c      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	4798      	blx	r3
 8004b16:	e027      	b.n	8004b68 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d023      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4798      	blx	r3
 8004b28:	e01e      	b.n	8004b68 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10f      	bne.n	8004b58 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0210 	bic.w	r2, r2, #16
 8004b46:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8306 	beq.w	800517e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 8088 	beq.w	8004c90 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2204      	movs	r2, #4
 8004b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a7a      	ldr	r2, [pc, #488]	@ (8004d78 <HAL_DMA_IRQHandler+0xa08>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d04a      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x8b8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a79      	ldr	r2, [pc, #484]	@ (8004d7c <HAL_DMA_IRQHandler+0xa0c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d045      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x8b8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a77      	ldr	r2, [pc, #476]	@ (8004d80 <HAL_DMA_IRQHandler+0xa10>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d040      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x8b8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a76      	ldr	r2, [pc, #472]	@ (8004d84 <HAL_DMA_IRQHandler+0xa14>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d03b      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x8b8>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a74      	ldr	r2, [pc, #464]	@ (8004d88 <HAL_DMA_IRQHandler+0xa18>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d036      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x8b8>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a73      	ldr	r2, [pc, #460]	@ (8004d8c <HAL_DMA_IRQHandler+0xa1c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d031      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x8b8>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a71      	ldr	r2, [pc, #452]	@ (8004d90 <HAL_DMA_IRQHandler+0xa20>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d02c      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x8b8>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a70      	ldr	r2, [pc, #448]	@ (8004d94 <HAL_DMA_IRQHandler+0xa24>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d027      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x8b8>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a6e      	ldr	r2, [pc, #440]	@ (8004d98 <HAL_DMA_IRQHandler+0xa28>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d022      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x8b8>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a6d      	ldr	r2, [pc, #436]	@ (8004d9c <HAL_DMA_IRQHandler+0xa2c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d01d      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x8b8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a6b      	ldr	r2, [pc, #428]	@ (8004da0 <HAL_DMA_IRQHandler+0xa30>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d018      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x8b8>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a6a      	ldr	r2, [pc, #424]	@ (8004da4 <HAL_DMA_IRQHandler+0xa34>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d013      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x8b8>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a68      	ldr	r2, [pc, #416]	@ (8004da8 <HAL_DMA_IRQHandler+0xa38>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00e      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x8b8>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a67      	ldr	r2, [pc, #412]	@ (8004dac <HAL_DMA_IRQHandler+0xa3c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d009      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x8b8>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a65      	ldr	r2, [pc, #404]	@ (8004db0 <HAL_DMA_IRQHandler+0xa40>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x8b8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a64      	ldr	r2, [pc, #400]	@ (8004db4 <HAL_DMA_IRQHandler+0xa44>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d108      	bne.n	8004c3a <HAL_DMA_IRQHandler+0x8ca>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e007      	b.n	8004c4a <HAL_DMA_IRQHandler+0x8da>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0201 	bic.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d307      	bcc.n	8004c66 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f2      	bne.n	8004c4a <HAL_DMA_IRQHandler+0x8da>
 8004c64:	e000      	b.n	8004c68 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c66:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d004      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2203      	movs	r2, #3
 8004c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004c7e:	e003      	b.n	8004c88 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8272 	beq.w	800517e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	4798      	blx	r3
 8004ca2:	e26c      	b.n	800517e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a43      	ldr	r2, [pc, #268]	@ (8004db8 <HAL_DMA_IRQHandler+0xa48>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d022      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x984>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a42      	ldr	r2, [pc, #264]	@ (8004dbc <HAL_DMA_IRQHandler+0xa4c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d01d      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x984>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a40      	ldr	r2, [pc, #256]	@ (8004dc0 <HAL_DMA_IRQHandler+0xa50>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d018      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x984>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a3f      	ldr	r2, [pc, #252]	@ (8004dc4 <HAL_DMA_IRQHandler+0xa54>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d013      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x984>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a3d      	ldr	r2, [pc, #244]	@ (8004dc8 <HAL_DMA_IRQHandler+0xa58>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00e      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x984>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a3c      	ldr	r2, [pc, #240]	@ (8004dcc <HAL_DMA_IRQHandler+0xa5c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d009      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x984>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a3a      	ldr	r2, [pc, #232]	@ (8004dd0 <HAL_DMA_IRQHandler+0xa60>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d004      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x984>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a39      	ldr	r2, [pc, #228]	@ (8004dd4 <HAL_DMA_IRQHandler+0xa64>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d101      	bne.n	8004cf8 <HAL_DMA_IRQHandler+0x988>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <HAL_DMA_IRQHandler+0x98a>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 823f 	beq.w	800517e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	2204      	movs	r2, #4
 8004d12:	409a      	lsls	r2, r3
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 80cd 	beq.w	8004eb8 <HAL_DMA_IRQHandler+0xb48>
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80c7 	beq.w	8004eb8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2204      	movs	r2, #4
 8004d34:	409a      	lsls	r2, r3
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d049      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 8210 	beq.w	8005178 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d60:	e20a      	b.n	8005178 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 8206 	beq.w	8005178 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d74:	e200      	b.n	8005178 <HAL_DMA_IRQHandler+0xe08>
 8004d76:	bf00      	nop
 8004d78:	40020010 	.word	0x40020010
 8004d7c:	40020028 	.word	0x40020028
 8004d80:	40020040 	.word	0x40020040
 8004d84:	40020058 	.word	0x40020058
 8004d88:	40020070 	.word	0x40020070
 8004d8c:	40020088 	.word	0x40020088
 8004d90:	400200a0 	.word	0x400200a0
 8004d94:	400200b8 	.word	0x400200b8
 8004d98:	40020410 	.word	0x40020410
 8004d9c:	40020428 	.word	0x40020428
 8004da0:	40020440 	.word	0x40020440
 8004da4:	40020458 	.word	0x40020458
 8004da8:	40020470 	.word	0x40020470
 8004dac:	40020488 	.word	0x40020488
 8004db0:	400204a0 	.word	0x400204a0
 8004db4:	400204b8 	.word	0x400204b8
 8004db8:	58025408 	.word	0x58025408
 8004dbc:	5802541c 	.word	0x5802541c
 8004dc0:	58025430 	.word	0x58025430
 8004dc4:	58025444 	.word	0x58025444
 8004dc8:	58025458 	.word	0x58025458
 8004dcc:	5802546c 	.word	0x5802546c
 8004dd0:	58025480 	.word	0x58025480
 8004dd4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d160      	bne.n	8004ea4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a7f      	ldr	r2, [pc, #508]	@ (8004fe4 <HAL_DMA_IRQHandler+0xc74>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d04a      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xb12>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a7d      	ldr	r2, [pc, #500]	@ (8004fe8 <HAL_DMA_IRQHandler+0xc78>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d045      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xb12>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a7c      	ldr	r2, [pc, #496]	@ (8004fec <HAL_DMA_IRQHandler+0xc7c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d040      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xb12>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a7a      	ldr	r2, [pc, #488]	@ (8004ff0 <HAL_DMA_IRQHandler+0xc80>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d03b      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xb12>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a79      	ldr	r2, [pc, #484]	@ (8004ff4 <HAL_DMA_IRQHandler+0xc84>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d036      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xb12>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a77      	ldr	r2, [pc, #476]	@ (8004ff8 <HAL_DMA_IRQHandler+0xc88>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d031      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xb12>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a76      	ldr	r2, [pc, #472]	@ (8004ffc <HAL_DMA_IRQHandler+0xc8c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d02c      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xb12>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a74      	ldr	r2, [pc, #464]	@ (8005000 <HAL_DMA_IRQHandler+0xc90>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d027      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xb12>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a73      	ldr	r2, [pc, #460]	@ (8005004 <HAL_DMA_IRQHandler+0xc94>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d022      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xb12>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a71      	ldr	r2, [pc, #452]	@ (8005008 <HAL_DMA_IRQHandler+0xc98>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d01d      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xb12>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a70      	ldr	r2, [pc, #448]	@ (800500c <HAL_DMA_IRQHandler+0xc9c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d018      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xb12>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a6e      	ldr	r2, [pc, #440]	@ (8005010 <HAL_DMA_IRQHandler+0xca0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xb12>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a6d      	ldr	r2, [pc, #436]	@ (8005014 <HAL_DMA_IRQHandler+0xca4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00e      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xb12>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a6b      	ldr	r2, [pc, #428]	@ (8005018 <HAL_DMA_IRQHandler+0xca8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d009      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xb12>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a6a      	ldr	r2, [pc, #424]	@ (800501c <HAL_DMA_IRQHandler+0xcac>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xb12>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a68      	ldr	r2, [pc, #416]	@ (8005020 <HAL_DMA_IRQHandler+0xcb0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d108      	bne.n	8004e94 <HAL_DMA_IRQHandler+0xb24>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0208 	bic.w	r2, r2, #8
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	e007      	b.n	8004ea4 <HAL_DMA_IRQHandler+0xb34>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0204 	bic.w	r2, r2, #4
 8004ea2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8165 	beq.w	8005178 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eb6:	e15f      	b.n	8005178 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	409a      	lsls	r2, r3
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80c5 	beq.w	8005058 <HAL_DMA_IRQHandler+0xce8>
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 80bf 	beq.w	8005058 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ede:	f003 031f 	and.w	r3, r3, #31
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	409a      	lsls	r2, r3
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d018      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 813a 	beq.w	800517c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f10:	e134      	b.n	800517c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8130 	beq.w	800517c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f24:	e12a      	b.n	800517c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f040 8089 	bne.w	8005044 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe4 <HAL_DMA_IRQHandler+0xc74>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d04a      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xc62>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a29      	ldr	r2, [pc, #164]	@ (8004fe8 <HAL_DMA_IRQHandler+0xc78>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d045      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xc62>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a28      	ldr	r2, [pc, #160]	@ (8004fec <HAL_DMA_IRQHandler+0xc7c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d040      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xc62>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a26      	ldr	r2, [pc, #152]	@ (8004ff0 <HAL_DMA_IRQHandler+0xc80>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d03b      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xc62>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a25      	ldr	r2, [pc, #148]	@ (8004ff4 <HAL_DMA_IRQHandler+0xc84>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d036      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xc62>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a23      	ldr	r2, [pc, #140]	@ (8004ff8 <HAL_DMA_IRQHandler+0xc88>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d031      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xc62>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a22      	ldr	r2, [pc, #136]	@ (8004ffc <HAL_DMA_IRQHandler+0xc8c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d02c      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xc62>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a20      	ldr	r2, [pc, #128]	@ (8005000 <HAL_DMA_IRQHandler+0xc90>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d027      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xc62>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a1f      	ldr	r2, [pc, #124]	@ (8005004 <HAL_DMA_IRQHandler+0xc94>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d022      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xc62>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1d      	ldr	r2, [pc, #116]	@ (8005008 <HAL_DMA_IRQHandler+0xc98>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d01d      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xc62>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800500c <HAL_DMA_IRQHandler+0xc9c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d018      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xc62>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8005010 <HAL_DMA_IRQHandler+0xca0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xc62>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a19      	ldr	r2, [pc, #100]	@ (8005014 <HAL_DMA_IRQHandler+0xca4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xc62>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a17      	ldr	r2, [pc, #92]	@ (8005018 <HAL_DMA_IRQHandler+0xca8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xc62>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a16      	ldr	r2, [pc, #88]	@ (800501c <HAL_DMA_IRQHandler+0xcac>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_DMA_IRQHandler+0xc62>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a14      	ldr	r2, [pc, #80]	@ (8005020 <HAL_DMA_IRQHandler+0xcb0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d128      	bne.n	8005024 <HAL_DMA_IRQHandler+0xcb4>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0214 	bic.w	r2, r2, #20
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	e027      	b.n	8005034 <HAL_DMA_IRQHandler+0xcc4>
 8004fe4:	40020010 	.word	0x40020010
 8004fe8:	40020028 	.word	0x40020028
 8004fec:	40020040 	.word	0x40020040
 8004ff0:	40020058 	.word	0x40020058
 8004ff4:	40020070 	.word	0x40020070
 8004ff8:	40020088 	.word	0x40020088
 8004ffc:	400200a0 	.word	0x400200a0
 8005000:	400200b8 	.word	0x400200b8
 8005004:	40020410 	.word	0x40020410
 8005008:	40020428 	.word	0x40020428
 800500c:	40020440 	.word	0x40020440
 8005010:	40020458 	.word	0x40020458
 8005014:	40020470 	.word	0x40020470
 8005018:	40020488 	.word	0x40020488
 800501c:	400204a0 	.word	0x400204a0
 8005020:	400204b8 	.word	0x400204b8
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 020a 	bic.w	r2, r2, #10
 8005032:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8097 	beq.w	800517c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005056:	e091      	b.n	800517c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800505c:	f003 031f 	and.w	r3, r3, #31
 8005060:	2208      	movs	r2, #8
 8005062:	409a      	lsls	r2, r3
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	4013      	ands	r3, r2
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8088 	beq.w	800517e <HAL_DMA_IRQHandler+0xe0e>
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8082 	beq.w	800517e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a41      	ldr	r2, [pc, #260]	@ (8005184 <HAL_DMA_IRQHandler+0xe14>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d04a      	beq.n	800511a <HAL_DMA_IRQHandler+0xdaa>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a3f      	ldr	r2, [pc, #252]	@ (8005188 <HAL_DMA_IRQHandler+0xe18>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d045      	beq.n	800511a <HAL_DMA_IRQHandler+0xdaa>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a3e      	ldr	r2, [pc, #248]	@ (800518c <HAL_DMA_IRQHandler+0xe1c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d040      	beq.n	800511a <HAL_DMA_IRQHandler+0xdaa>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a3c      	ldr	r2, [pc, #240]	@ (8005190 <HAL_DMA_IRQHandler+0xe20>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d03b      	beq.n	800511a <HAL_DMA_IRQHandler+0xdaa>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a3b      	ldr	r2, [pc, #236]	@ (8005194 <HAL_DMA_IRQHandler+0xe24>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d036      	beq.n	800511a <HAL_DMA_IRQHandler+0xdaa>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a39      	ldr	r2, [pc, #228]	@ (8005198 <HAL_DMA_IRQHandler+0xe28>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d031      	beq.n	800511a <HAL_DMA_IRQHandler+0xdaa>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a38      	ldr	r2, [pc, #224]	@ (800519c <HAL_DMA_IRQHandler+0xe2c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d02c      	beq.n	800511a <HAL_DMA_IRQHandler+0xdaa>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a36      	ldr	r2, [pc, #216]	@ (80051a0 <HAL_DMA_IRQHandler+0xe30>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d027      	beq.n	800511a <HAL_DMA_IRQHandler+0xdaa>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a35      	ldr	r2, [pc, #212]	@ (80051a4 <HAL_DMA_IRQHandler+0xe34>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d022      	beq.n	800511a <HAL_DMA_IRQHandler+0xdaa>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a33      	ldr	r2, [pc, #204]	@ (80051a8 <HAL_DMA_IRQHandler+0xe38>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d01d      	beq.n	800511a <HAL_DMA_IRQHandler+0xdaa>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a32      	ldr	r2, [pc, #200]	@ (80051ac <HAL_DMA_IRQHandler+0xe3c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d018      	beq.n	800511a <HAL_DMA_IRQHandler+0xdaa>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a30      	ldr	r2, [pc, #192]	@ (80051b0 <HAL_DMA_IRQHandler+0xe40>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d013      	beq.n	800511a <HAL_DMA_IRQHandler+0xdaa>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a2f      	ldr	r2, [pc, #188]	@ (80051b4 <HAL_DMA_IRQHandler+0xe44>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00e      	beq.n	800511a <HAL_DMA_IRQHandler+0xdaa>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a2d      	ldr	r2, [pc, #180]	@ (80051b8 <HAL_DMA_IRQHandler+0xe48>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d009      	beq.n	800511a <HAL_DMA_IRQHandler+0xdaa>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a2c      	ldr	r2, [pc, #176]	@ (80051bc <HAL_DMA_IRQHandler+0xe4c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d004      	beq.n	800511a <HAL_DMA_IRQHandler+0xdaa>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a2a      	ldr	r2, [pc, #168]	@ (80051c0 <HAL_DMA_IRQHandler+0xe50>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d108      	bne.n	800512c <HAL_DMA_IRQHandler+0xdbc>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 021c 	bic.w	r2, r2, #28
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e007      	b.n	800513c <HAL_DMA_IRQHandler+0xdcc>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 020e 	bic.w	r2, r2, #14
 800513a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005140:	f003 031f 	and.w	r3, r3, #31
 8005144:	2201      	movs	r2, #1
 8005146:	409a      	lsls	r2, r3
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	4798      	blx	r3
 8005172:	e004      	b.n	800517e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005174:	bf00      	nop
 8005176:	e002      	b.n	800517e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005178:	bf00      	nop
 800517a:	e000      	b.n	800517e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800517c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800517e:	3728      	adds	r7, #40	@ 0x28
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40020010 	.word	0x40020010
 8005188:	40020028 	.word	0x40020028
 800518c:	40020040 	.word	0x40020040
 8005190:	40020058 	.word	0x40020058
 8005194:	40020070 	.word	0x40020070
 8005198:	40020088 	.word	0x40020088
 800519c:	400200a0 	.word	0x400200a0
 80051a0:	400200b8 	.word	0x400200b8
 80051a4:	40020410 	.word	0x40020410
 80051a8:	40020428 	.word	0x40020428
 80051ac:	40020440 	.word	0x40020440
 80051b0:	40020458 	.word	0x40020458
 80051b4:	40020470 	.word	0x40020470
 80051b8:	40020488 	.word	0x40020488
 80051bc:	400204a0 	.word	0x400204a0
 80051c0:	400204b8 	.word	0x400204b8

080051c4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051d2:	b2db      	uxtb	r3, r3
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a7f      	ldr	r2, [pc, #508]	@ (80053fc <DMA_SetConfig+0x21c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d072      	beq.n	80052ea <DMA_SetConfig+0x10a>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a7d      	ldr	r2, [pc, #500]	@ (8005400 <DMA_SetConfig+0x220>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d06d      	beq.n	80052ea <DMA_SetConfig+0x10a>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a7c      	ldr	r2, [pc, #496]	@ (8005404 <DMA_SetConfig+0x224>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d068      	beq.n	80052ea <DMA_SetConfig+0x10a>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a7a      	ldr	r2, [pc, #488]	@ (8005408 <DMA_SetConfig+0x228>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d063      	beq.n	80052ea <DMA_SetConfig+0x10a>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a79      	ldr	r2, [pc, #484]	@ (800540c <DMA_SetConfig+0x22c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d05e      	beq.n	80052ea <DMA_SetConfig+0x10a>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a77      	ldr	r2, [pc, #476]	@ (8005410 <DMA_SetConfig+0x230>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d059      	beq.n	80052ea <DMA_SetConfig+0x10a>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a76      	ldr	r2, [pc, #472]	@ (8005414 <DMA_SetConfig+0x234>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d054      	beq.n	80052ea <DMA_SetConfig+0x10a>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a74      	ldr	r2, [pc, #464]	@ (8005418 <DMA_SetConfig+0x238>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d04f      	beq.n	80052ea <DMA_SetConfig+0x10a>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a73      	ldr	r2, [pc, #460]	@ (800541c <DMA_SetConfig+0x23c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d04a      	beq.n	80052ea <DMA_SetConfig+0x10a>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a71      	ldr	r2, [pc, #452]	@ (8005420 <DMA_SetConfig+0x240>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d045      	beq.n	80052ea <DMA_SetConfig+0x10a>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a70      	ldr	r2, [pc, #448]	@ (8005424 <DMA_SetConfig+0x244>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d040      	beq.n	80052ea <DMA_SetConfig+0x10a>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a6e      	ldr	r2, [pc, #440]	@ (8005428 <DMA_SetConfig+0x248>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d03b      	beq.n	80052ea <DMA_SetConfig+0x10a>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a6d      	ldr	r2, [pc, #436]	@ (800542c <DMA_SetConfig+0x24c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d036      	beq.n	80052ea <DMA_SetConfig+0x10a>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a6b      	ldr	r2, [pc, #428]	@ (8005430 <DMA_SetConfig+0x250>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d031      	beq.n	80052ea <DMA_SetConfig+0x10a>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a6a      	ldr	r2, [pc, #424]	@ (8005434 <DMA_SetConfig+0x254>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d02c      	beq.n	80052ea <DMA_SetConfig+0x10a>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a68      	ldr	r2, [pc, #416]	@ (8005438 <DMA_SetConfig+0x258>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d027      	beq.n	80052ea <DMA_SetConfig+0x10a>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a67      	ldr	r2, [pc, #412]	@ (800543c <DMA_SetConfig+0x25c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d022      	beq.n	80052ea <DMA_SetConfig+0x10a>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a65      	ldr	r2, [pc, #404]	@ (8005440 <DMA_SetConfig+0x260>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d01d      	beq.n	80052ea <DMA_SetConfig+0x10a>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a64      	ldr	r2, [pc, #400]	@ (8005444 <DMA_SetConfig+0x264>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d018      	beq.n	80052ea <DMA_SetConfig+0x10a>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a62      	ldr	r2, [pc, #392]	@ (8005448 <DMA_SetConfig+0x268>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <DMA_SetConfig+0x10a>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a61      	ldr	r2, [pc, #388]	@ (800544c <DMA_SetConfig+0x26c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00e      	beq.n	80052ea <DMA_SetConfig+0x10a>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a5f      	ldr	r2, [pc, #380]	@ (8005450 <DMA_SetConfig+0x270>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d009      	beq.n	80052ea <DMA_SetConfig+0x10a>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a5e      	ldr	r2, [pc, #376]	@ (8005454 <DMA_SetConfig+0x274>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d004      	beq.n	80052ea <DMA_SetConfig+0x10a>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a5c      	ldr	r2, [pc, #368]	@ (8005458 <DMA_SetConfig+0x278>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d101      	bne.n	80052ee <DMA_SetConfig+0x10e>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <DMA_SetConfig+0x110>
 80052ee:	2300      	movs	r3, #0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00d      	beq.n	8005310 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80052fc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800530e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a39      	ldr	r2, [pc, #228]	@ (80053fc <DMA_SetConfig+0x21c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d04a      	beq.n	80053b0 <DMA_SetConfig+0x1d0>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a38      	ldr	r2, [pc, #224]	@ (8005400 <DMA_SetConfig+0x220>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d045      	beq.n	80053b0 <DMA_SetConfig+0x1d0>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a36      	ldr	r2, [pc, #216]	@ (8005404 <DMA_SetConfig+0x224>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d040      	beq.n	80053b0 <DMA_SetConfig+0x1d0>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a35      	ldr	r2, [pc, #212]	@ (8005408 <DMA_SetConfig+0x228>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d03b      	beq.n	80053b0 <DMA_SetConfig+0x1d0>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a33      	ldr	r2, [pc, #204]	@ (800540c <DMA_SetConfig+0x22c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d036      	beq.n	80053b0 <DMA_SetConfig+0x1d0>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a32      	ldr	r2, [pc, #200]	@ (8005410 <DMA_SetConfig+0x230>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d031      	beq.n	80053b0 <DMA_SetConfig+0x1d0>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a30      	ldr	r2, [pc, #192]	@ (8005414 <DMA_SetConfig+0x234>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d02c      	beq.n	80053b0 <DMA_SetConfig+0x1d0>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a2f      	ldr	r2, [pc, #188]	@ (8005418 <DMA_SetConfig+0x238>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d027      	beq.n	80053b0 <DMA_SetConfig+0x1d0>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a2d      	ldr	r2, [pc, #180]	@ (800541c <DMA_SetConfig+0x23c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d022      	beq.n	80053b0 <DMA_SetConfig+0x1d0>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a2c      	ldr	r2, [pc, #176]	@ (8005420 <DMA_SetConfig+0x240>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d01d      	beq.n	80053b0 <DMA_SetConfig+0x1d0>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a2a      	ldr	r2, [pc, #168]	@ (8005424 <DMA_SetConfig+0x244>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d018      	beq.n	80053b0 <DMA_SetConfig+0x1d0>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a29      	ldr	r2, [pc, #164]	@ (8005428 <DMA_SetConfig+0x248>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d013      	beq.n	80053b0 <DMA_SetConfig+0x1d0>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a27      	ldr	r2, [pc, #156]	@ (800542c <DMA_SetConfig+0x24c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00e      	beq.n	80053b0 <DMA_SetConfig+0x1d0>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a26      	ldr	r2, [pc, #152]	@ (8005430 <DMA_SetConfig+0x250>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d009      	beq.n	80053b0 <DMA_SetConfig+0x1d0>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a24      	ldr	r2, [pc, #144]	@ (8005434 <DMA_SetConfig+0x254>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <DMA_SetConfig+0x1d0>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a23      	ldr	r2, [pc, #140]	@ (8005438 <DMA_SetConfig+0x258>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d101      	bne.n	80053b4 <DMA_SetConfig+0x1d4>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <DMA_SetConfig+0x1d6>
 80053b4:	2300      	movs	r3, #0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d059      	beq.n	800546e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053be:	f003 031f 	and.w	r3, r3, #31
 80053c2:	223f      	movs	r2, #63	@ 0x3f
 80053c4:	409a      	lsls	r2, r3
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80053d8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2b40      	cmp	r3, #64	@ 0x40
 80053e8:	d138      	bne.n	800545c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053fa:	e086      	b.n	800550a <DMA_SetConfig+0x32a>
 80053fc:	40020010 	.word	0x40020010
 8005400:	40020028 	.word	0x40020028
 8005404:	40020040 	.word	0x40020040
 8005408:	40020058 	.word	0x40020058
 800540c:	40020070 	.word	0x40020070
 8005410:	40020088 	.word	0x40020088
 8005414:	400200a0 	.word	0x400200a0
 8005418:	400200b8 	.word	0x400200b8
 800541c:	40020410 	.word	0x40020410
 8005420:	40020428 	.word	0x40020428
 8005424:	40020440 	.word	0x40020440
 8005428:	40020458 	.word	0x40020458
 800542c:	40020470 	.word	0x40020470
 8005430:	40020488 	.word	0x40020488
 8005434:	400204a0 	.word	0x400204a0
 8005438:	400204b8 	.word	0x400204b8
 800543c:	58025408 	.word	0x58025408
 8005440:	5802541c 	.word	0x5802541c
 8005444:	58025430 	.word	0x58025430
 8005448:	58025444 	.word	0x58025444
 800544c:	58025458 	.word	0x58025458
 8005450:	5802546c 	.word	0x5802546c
 8005454:	58025480 	.word	0x58025480
 8005458:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	60da      	str	r2, [r3, #12]
}
 800546c:	e04d      	b.n	800550a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a29      	ldr	r2, [pc, #164]	@ (8005518 <DMA_SetConfig+0x338>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d022      	beq.n	80054be <DMA_SetConfig+0x2de>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a27      	ldr	r2, [pc, #156]	@ (800551c <DMA_SetConfig+0x33c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d01d      	beq.n	80054be <DMA_SetConfig+0x2de>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a26      	ldr	r2, [pc, #152]	@ (8005520 <DMA_SetConfig+0x340>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d018      	beq.n	80054be <DMA_SetConfig+0x2de>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a24      	ldr	r2, [pc, #144]	@ (8005524 <DMA_SetConfig+0x344>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <DMA_SetConfig+0x2de>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a23      	ldr	r2, [pc, #140]	@ (8005528 <DMA_SetConfig+0x348>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00e      	beq.n	80054be <DMA_SetConfig+0x2de>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a21      	ldr	r2, [pc, #132]	@ (800552c <DMA_SetConfig+0x34c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d009      	beq.n	80054be <DMA_SetConfig+0x2de>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a20      	ldr	r2, [pc, #128]	@ (8005530 <DMA_SetConfig+0x350>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <DMA_SetConfig+0x2de>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005534 <DMA_SetConfig+0x354>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d101      	bne.n	80054c2 <DMA_SetConfig+0x2e2>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <DMA_SetConfig+0x2e4>
 80054c2:	2300      	movs	r3, #0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d020      	beq.n	800550a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	2201      	movs	r2, #1
 80054d2:	409a      	lsls	r2, r3
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b40      	cmp	r3, #64	@ 0x40
 80054e6:	d108      	bne.n	80054fa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	60da      	str	r2, [r3, #12]
}
 80054f8:	e007      	b.n	800550a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	60da      	str	r2, [r3, #12]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	58025408 	.word	0x58025408
 800551c:	5802541c 	.word	0x5802541c
 8005520:	58025430 	.word	0x58025430
 8005524:	58025444 	.word	0x58025444
 8005528:	58025458 	.word	0x58025458
 800552c:	5802546c 	.word	0x5802546c
 8005530:	58025480 	.word	0x58025480
 8005534:	58025494 	.word	0x58025494

08005538 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a42      	ldr	r2, [pc, #264]	@ (8005650 <DMA_CalcBaseAndBitshift+0x118>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d04a      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xa8>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a41      	ldr	r2, [pc, #260]	@ (8005654 <DMA_CalcBaseAndBitshift+0x11c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d045      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a3f      	ldr	r2, [pc, #252]	@ (8005658 <DMA_CalcBaseAndBitshift+0x120>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d040      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xa8>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a3e      	ldr	r2, [pc, #248]	@ (800565c <DMA_CalcBaseAndBitshift+0x124>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d03b      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a3c      	ldr	r2, [pc, #240]	@ (8005660 <DMA_CalcBaseAndBitshift+0x128>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d036      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a3b      	ldr	r2, [pc, #236]	@ (8005664 <DMA_CalcBaseAndBitshift+0x12c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d031      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xa8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a39      	ldr	r2, [pc, #228]	@ (8005668 <DMA_CalcBaseAndBitshift+0x130>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d02c      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a38      	ldr	r2, [pc, #224]	@ (800566c <DMA_CalcBaseAndBitshift+0x134>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d027      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a36      	ldr	r2, [pc, #216]	@ (8005670 <DMA_CalcBaseAndBitshift+0x138>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d022      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xa8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a35      	ldr	r2, [pc, #212]	@ (8005674 <DMA_CalcBaseAndBitshift+0x13c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d01d      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xa8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a33      	ldr	r2, [pc, #204]	@ (8005678 <DMA_CalcBaseAndBitshift+0x140>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d018      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xa8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a32      	ldr	r2, [pc, #200]	@ (800567c <DMA_CalcBaseAndBitshift+0x144>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d013      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xa8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a30      	ldr	r2, [pc, #192]	@ (8005680 <DMA_CalcBaseAndBitshift+0x148>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00e      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xa8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005684 <DMA_CalcBaseAndBitshift+0x14c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d009      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xa8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005688 <DMA_CalcBaseAndBitshift+0x150>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d004      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xa8>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a2c      	ldr	r2, [pc, #176]	@ (800568c <DMA_CalcBaseAndBitshift+0x154>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d101      	bne.n	80055e4 <DMA_CalcBaseAndBitshift+0xac>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <DMA_CalcBaseAndBitshift+0xae>
 80055e4:	2300      	movs	r3, #0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d024      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	3b10      	subs	r3, #16
 80055f2:	4a27      	ldr	r2, [pc, #156]	@ (8005690 <DMA_CalcBaseAndBitshift+0x158>)
 80055f4:	fba2 2303 	umull	r2, r3, r2, r3
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	4a24      	ldr	r2, [pc, #144]	@ (8005694 <DMA_CalcBaseAndBitshift+0x15c>)
 8005604:	5cd3      	ldrb	r3, [r2, r3]
 8005606:	461a      	mov	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b03      	cmp	r3, #3
 8005610:	d908      	bls.n	8005624 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	4b1f      	ldr	r3, [pc, #124]	@ (8005698 <DMA_CalcBaseAndBitshift+0x160>)
 800561a:	4013      	ands	r3, r2
 800561c:	1d1a      	adds	r2, r3, #4
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	659a      	str	r2, [r3, #88]	@ 0x58
 8005622:	e00d      	b.n	8005640 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	461a      	mov	r2, r3
 800562a:	4b1b      	ldr	r3, [pc, #108]	@ (8005698 <DMA_CalcBaseAndBitshift+0x160>)
 800562c:	4013      	ands	r3, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6593      	str	r3, [r2, #88]	@ 0x58
 8005632:	e005      	b.n	8005640 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	40020010 	.word	0x40020010
 8005654:	40020028 	.word	0x40020028
 8005658:	40020040 	.word	0x40020040
 800565c:	40020058 	.word	0x40020058
 8005660:	40020070 	.word	0x40020070
 8005664:	40020088 	.word	0x40020088
 8005668:	400200a0 	.word	0x400200a0
 800566c:	400200b8 	.word	0x400200b8
 8005670:	40020410 	.word	0x40020410
 8005674:	40020428 	.word	0x40020428
 8005678:	40020440 	.word	0x40020440
 800567c:	40020458 	.word	0x40020458
 8005680:	40020470 	.word	0x40020470
 8005684:	40020488 	.word	0x40020488
 8005688:	400204a0 	.word	0x400204a0
 800568c:	400204b8 	.word	0x400204b8
 8005690:	aaaaaaab 	.word	0xaaaaaaab
 8005694:	08015cac 	.word	0x08015cac
 8005698:	fffffc00 	.word	0xfffffc00

0800569c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d120      	bne.n	80056f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	d858      	bhi.n	800576a <DMA_CheckFifoParam+0xce>
 80056b8:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <DMA_CheckFifoParam+0x24>)
 80056ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056be:	bf00      	nop
 80056c0:	080056d1 	.word	0x080056d1
 80056c4:	080056e3 	.word	0x080056e3
 80056c8:	080056d1 	.word	0x080056d1
 80056cc:	0800576b 	.word	0x0800576b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d048      	beq.n	800576e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056e0:	e045      	b.n	800576e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056ea:	d142      	bne.n	8005772 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056f0:	e03f      	b.n	8005772 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056fa:	d123      	bne.n	8005744 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005700:	2b03      	cmp	r3, #3
 8005702:	d838      	bhi.n	8005776 <DMA_CheckFifoParam+0xda>
 8005704:	a201      	add	r2, pc, #4	@ (adr r2, 800570c <DMA_CheckFifoParam+0x70>)
 8005706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570a:	bf00      	nop
 800570c:	0800571d 	.word	0x0800571d
 8005710:	08005723 	.word	0x08005723
 8005714:	0800571d 	.word	0x0800571d
 8005718:	08005735 	.word	0x08005735
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	73fb      	strb	r3, [r7, #15]
        break;
 8005720:	e030      	b.n	8005784 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005726:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d025      	beq.n	800577a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005732:	e022      	b.n	800577a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005738:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800573c:	d11f      	bne.n	800577e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005742:	e01c      	b.n	800577e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005748:	2b02      	cmp	r3, #2
 800574a:	d902      	bls.n	8005752 <DMA_CheckFifoParam+0xb6>
 800574c:	2b03      	cmp	r3, #3
 800574e:	d003      	beq.n	8005758 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005750:	e018      	b.n	8005784 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	73fb      	strb	r3, [r7, #15]
        break;
 8005756:	e015      	b.n	8005784 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00e      	beq.n	8005782 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	73fb      	strb	r3, [r7, #15]
    break;
 8005768:	e00b      	b.n	8005782 <DMA_CheckFifoParam+0xe6>
        break;
 800576a:	bf00      	nop
 800576c:	e00a      	b.n	8005784 <DMA_CheckFifoParam+0xe8>
        break;
 800576e:	bf00      	nop
 8005770:	e008      	b.n	8005784 <DMA_CheckFifoParam+0xe8>
        break;
 8005772:	bf00      	nop
 8005774:	e006      	b.n	8005784 <DMA_CheckFifoParam+0xe8>
        break;
 8005776:	bf00      	nop
 8005778:	e004      	b.n	8005784 <DMA_CheckFifoParam+0xe8>
        break;
 800577a:	bf00      	nop
 800577c:	e002      	b.n	8005784 <DMA_CheckFifoParam+0xe8>
        break;
 800577e:	bf00      	nop
 8005780:	e000      	b.n	8005784 <DMA_CheckFifoParam+0xe8>
    break;
 8005782:	bf00      	nop
    }
  }

  return status;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop

08005794 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a38      	ldr	r2, [pc, #224]	@ (8005888 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d022      	beq.n	80057f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a36      	ldr	r2, [pc, #216]	@ (800588c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d01d      	beq.n	80057f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a35      	ldr	r2, [pc, #212]	@ (8005890 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d018      	beq.n	80057f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a33      	ldr	r2, [pc, #204]	@ (8005894 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d013      	beq.n	80057f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a32      	ldr	r2, [pc, #200]	@ (8005898 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00e      	beq.n	80057f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a30      	ldr	r2, [pc, #192]	@ (800589c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d009      	beq.n	80057f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a2f      	ldr	r2, [pc, #188]	@ (80058a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d004      	beq.n	80057f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a2d      	ldr	r2, [pc, #180]	@ (80058a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d101      	bne.n	80057f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80057f6:	2300      	movs	r3, #0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01a      	beq.n	8005832 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	3b08      	subs	r3, #8
 8005804:	4a28      	ldr	r2, [pc, #160]	@ (80058a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	091b      	lsrs	r3, r3, #4
 800580c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4b26      	ldr	r3, [pc, #152]	@ (80058ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	461a      	mov	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a24      	ldr	r2, [pc, #144]	@ (80058b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005820:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f003 031f 	and.w	r3, r3, #31
 8005828:	2201      	movs	r2, #1
 800582a:	409a      	lsls	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005830:	e024      	b.n	800587c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	3b10      	subs	r3, #16
 800583a:	4a1e      	ldr	r2, [pc, #120]	@ (80058b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4a1c      	ldr	r2, [pc, #112]	@ (80058b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d806      	bhi.n	800585a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4a1b      	ldr	r2, [pc, #108]	@ (80058bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d902      	bls.n	800585a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3308      	adds	r3, #8
 8005858:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4b18      	ldr	r3, [pc, #96]	@ (80058c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800585e:	4413      	add	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	461a      	mov	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a16      	ldr	r2, [pc, #88]	@ (80058c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800586c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f003 031f 	and.w	r3, r3, #31
 8005874:	2201      	movs	r2, #1
 8005876:	409a      	lsls	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800587c:	bf00      	nop
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	58025408 	.word	0x58025408
 800588c:	5802541c 	.word	0x5802541c
 8005890:	58025430 	.word	0x58025430
 8005894:	58025444 	.word	0x58025444
 8005898:	58025458 	.word	0x58025458
 800589c:	5802546c 	.word	0x5802546c
 80058a0:	58025480 	.word	0x58025480
 80058a4:	58025494 	.word	0x58025494
 80058a8:	cccccccd 	.word	0xcccccccd
 80058ac:	16009600 	.word	0x16009600
 80058b0:	58025880 	.word	0x58025880
 80058b4:	aaaaaaab 	.word	0xaaaaaaab
 80058b8:	400204b8 	.word	0x400204b8
 80058bc:	4002040f 	.word	0x4002040f
 80058c0:	10008200 	.word	0x10008200
 80058c4:	40020880 	.word	0x40020880

080058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d04a      	beq.n	8005974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d847      	bhi.n	8005974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a25      	ldr	r2, [pc, #148]	@ (8005980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d022      	beq.n	8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a24      	ldr	r2, [pc, #144]	@ (8005984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d01d      	beq.n	8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a22      	ldr	r2, [pc, #136]	@ (8005988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d018      	beq.n	8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a21      	ldr	r2, [pc, #132]	@ (800598c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d013      	beq.n	8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1f      	ldr	r2, [pc, #124]	@ (8005990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00e      	beq.n	8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1e      	ldr	r2, [pc, #120]	@ (8005994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d009      	beq.n	8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1c      	ldr	r2, [pc, #112]	@ (8005998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1b      	ldr	r2, [pc, #108]	@ (800599c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d101      	bne.n	8005938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005934:	2301      	movs	r3, #1
 8005936:	e000      	b.n	800593a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005938:	2300      	movs	r3, #0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4b17      	ldr	r3, [pc, #92]	@ (80059a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	461a      	mov	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a15      	ldr	r2, [pc, #84]	@ (80059a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005950:	671a      	str	r2, [r3, #112]	@ 0x70
 8005952:	e009      	b.n	8005968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4b14      	ldr	r3, [pc, #80]	@ (80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	461a      	mov	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a11      	ldr	r2, [pc, #68]	@ (80059ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005966:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3b01      	subs	r3, #1
 800596c:	2201      	movs	r2, #1
 800596e:	409a      	lsls	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005974:	bf00      	nop
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	58025408 	.word	0x58025408
 8005984:	5802541c 	.word	0x5802541c
 8005988:	58025430 	.word	0x58025430
 800598c:	58025444 	.word	0x58025444
 8005990:	58025458 	.word	0x58025458
 8005994:	5802546c 	.word	0x5802546c
 8005998:	58025480 	.word	0x58025480
 800599c:	58025494 	.word	0x58025494
 80059a0:	1600963f 	.word	0x1600963f
 80059a4:	58025940 	.word	0x58025940
 80059a8:	1000823f 	.word	0x1000823f
 80059ac:	40020940 	.word	0x40020940

080059b0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	2b80      	cmp	r3, #128	@ 0x80
 80059c8:	d105      	bne.n	80059d6 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e315      	b.n	8006002 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e30e      	b.n	8006002 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	f040 82fd 	bne.w	8005ff4 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2202      	movs	r2, #2
 80059fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a82      	ldr	r2, [pc, #520]	@ (8005c18 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d04a      	beq.n	8005aa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a81      	ldr	r2, [pc, #516]	@ (8005c1c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d045      	beq.n	8005aa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a7f      	ldr	r2, [pc, #508]	@ (8005c20 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d040      	beq.n	8005aa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a7e      	ldr	r2, [pc, #504]	@ (8005c24 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d03b      	beq.n	8005aa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a7c      	ldr	r2, [pc, #496]	@ (8005c28 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d036      	beq.n	8005aa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a7b      	ldr	r2, [pc, #492]	@ (8005c2c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d031      	beq.n	8005aa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a79      	ldr	r2, [pc, #484]	@ (8005c30 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d02c      	beq.n	8005aa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a78      	ldr	r2, [pc, #480]	@ (8005c34 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d027      	beq.n	8005aa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a76      	ldr	r2, [pc, #472]	@ (8005c38 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d022      	beq.n	8005aa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a75      	ldr	r2, [pc, #468]	@ (8005c3c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d01d      	beq.n	8005aa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a73      	ldr	r2, [pc, #460]	@ (8005c40 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d018      	beq.n	8005aa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a72      	ldr	r2, [pc, #456]	@ (8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d013      	beq.n	8005aa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a70      	ldr	r2, [pc, #448]	@ (8005c48 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00e      	beq.n	8005aa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a6f      	ldr	r2, [pc, #444]	@ (8005c4c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d009      	beq.n	8005aa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a6d      	ldr	r2, [pc, #436]	@ (8005c50 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d004      	beq.n	8005aa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a6c      	ldr	r2, [pc, #432]	@ (8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d101      	bne.n	8005aac <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8005aac:	2300      	movs	r3, #0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d018      	beq.n	8005ae4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005ac0:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ace:	3308      	adds	r3, #8
 8005ad0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	223f      	movs	r2, #63	@ 0x3f
 8005adc:	409a      	lsls	r2, r3
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e018      	b.n	8005b16 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6819      	ldr	r1, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	f248 0320 	movw	r3, #32800	@ 0x8020
 8005af2:	430b      	orrs	r3, r1
 8005af4:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b02:	3304      	adds	r3, #4
 8005b04:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	2201      	movs	r2, #1
 8005b10:	409a      	lsls	r2, r3
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	68b9      	ldr	r1, [r7, #8]
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fb41 	bl	80061a4 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a3c      	ldr	r2, [pc, #240]	@ (8005c18 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d072      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a3a      	ldr	r2, [pc, #232]	@ (8005c1c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d06d      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a39      	ldr	r2, [pc, #228]	@ (8005c20 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d068      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a37      	ldr	r2, [pc, #220]	@ (8005c24 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d063      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a36      	ldr	r2, [pc, #216]	@ (8005c28 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d05e      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a34      	ldr	r2, [pc, #208]	@ (8005c2c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d059      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a33      	ldr	r2, [pc, #204]	@ (8005c30 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d054      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a31      	ldr	r2, [pc, #196]	@ (8005c34 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d04f      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a30      	ldr	r2, [pc, #192]	@ (8005c38 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d04a      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a2e      	ldr	r2, [pc, #184]	@ (8005c3c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d045      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8005c40 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d040      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a2b      	ldr	r2, [pc, #172]	@ (8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d03b      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8005c48 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d036      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a28      	ldr	r2, [pc, #160]	@ (8005c4c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d031      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a27      	ldr	r2, [pc, #156]	@ (8005c50 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d02c      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a25      	ldr	r2, [pc, #148]	@ (8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d027      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a24      	ldr	r2, [pc, #144]	@ (8005c58 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d022      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a22      	ldr	r2, [pc, #136]	@ (8005c5c <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01d      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a21      	ldr	r2, [pc, #132]	@ (8005c60 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d018      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a1f      	ldr	r2, [pc, #124]	@ (8005c64 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d013      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1e      	ldr	r2, [pc, #120]	@ (8005c68 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00e      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c6c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d009      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1b      	ldr	r2, [pc, #108]	@ (8005c70 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d004      	beq.n	8005c12 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a19      	ldr	r2, [pc, #100]	@ (8005c74 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d132      	bne.n	8005c78 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e031      	b.n	8005c7a <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8005c16:	bf00      	nop
 8005c18:	40020010 	.word	0x40020010
 8005c1c:	40020028 	.word	0x40020028
 8005c20:	40020040 	.word	0x40020040
 8005c24:	40020058 	.word	0x40020058
 8005c28:	40020070 	.word	0x40020070
 8005c2c:	40020088 	.word	0x40020088
 8005c30:	400200a0 	.word	0x400200a0
 8005c34:	400200b8 	.word	0x400200b8
 8005c38:	40020410 	.word	0x40020410
 8005c3c:	40020428 	.word	0x40020428
 8005c40:	40020440 	.word	0x40020440
 8005c44:	40020458 	.word	0x40020458
 8005c48:	40020470 	.word	0x40020470
 8005c4c:	40020488 	.word	0x40020488
 8005c50:	400204a0 	.word	0x400204a0
 8005c54:	400204b8 	.word	0x400204b8
 8005c58:	58025408 	.word	0x58025408
 8005c5c:	5802541c 	.word	0x5802541c
 8005c60:	58025430 	.word	0x58025430
 8005c64:	58025444 	.word	0x58025444
 8005c68:	58025458 	.word	0x58025458
 8005c6c:	5802546c 	.word	0x5802546c
 8005c70:	58025480 	.word	0x58025480
 8005c74:	58025494 	.word	0x58025494
 8005c78:	2300      	movs	r3, #0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00d      	beq.n	8005c9a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005c86:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d004      	beq.n	8005c9a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005c98:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a3b      	ldr	r2, [pc, #236]	@ (8005d8c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d04a      	beq.n	8005d3a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a39      	ldr	r2, [pc, #228]	@ (8005d90 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d045      	beq.n	8005d3a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a38      	ldr	r2, [pc, #224]	@ (8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d040      	beq.n	8005d3a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a36      	ldr	r2, [pc, #216]	@ (8005d98 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d03b      	beq.n	8005d3a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a35      	ldr	r2, [pc, #212]	@ (8005d9c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d036      	beq.n	8005d3a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a33      	ldr	r2, [pc, #204]	@ (8005da0 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d031      	beq.n	8005d3a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a32      	ldr	r2, [pc, #200]	@ (8005da4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d02c      	beq.n	8005d3a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a30      	ldr	r2, [pc, #192]	@ (8005da8 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d027      	beq.n	8005d3a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a2f      	ldr	r2, [pc, #188]	@ (8005dac <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d022      	beq.n	8005d3a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a2d      	ldr	r2, [pc, #180]	@ (8005db0 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d01d      	beq.n	8005d3a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a2c      	ldr	r2, [pc, #176]	@ (8005db4 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d018      	beq.n	8005d3a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8005db8 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d013      	beq.n	8005d3a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a29      	ldr	r2, [pc, #164]	@ (8005dbc <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00e      	beq.n	8005d3a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a27      	ldr	r2, [pc, #156]	@ (8005dc0 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d009      	beq.n	8005d3a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a26      	ldr	r2, [pc, #152]	@ (8005dc4 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d004      	beq.n	8005d3a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a24      	ldr	r2, [pc, #144]	@ (8005dc8 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d101      	bne.n	8005d3e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d043      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f023 021e 	bic.w	r2, r3, #30
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0216 	orr.w	r2, r2, #22
 8005d56:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695a      	ldr	r2, [r3, #20]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d66:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d103      	bne.n	8005d78 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d043      	beq.n	8005e00 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0208 	orr.w	r2, r2, #8
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	e03a      	b.n	8005e00 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8005d8a:	bf00      	nop
 8005d8c:	40020010 	.word	0x40020010
 8005d90:	40020028 	.word	0x40020028
 8005d94:	40020040 	.word	0x40020040
 8005d98:	40020058 	.word	0x40020058
 8005d9c:	40020070 	.word	0x40020070
 8005da0:	40020088 	.word	0x40020088
 8005da4:	400200a0 	.word	0x400200a0
 8005da8:	400200b8 	.word	0x400200b8
 8005dac:	40020410 	.word	0x40020410
 8005db0:	40020428 	.word	0x40020428
 8005db4:	40020440 	.word	0x40020440
 8005db8:	40020458 	.word	0x40020458
 8005dbc:	40020470 	.word	0x40020470
 8005dc0:	40020488 	.word	0x40020488
 8005dc4:	400204a0 	.word	0x400204a0
 8005dc8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f023 020e 	bic.w	r2, r3, #14
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 020a 	orr.w	r2, r2, #10
 8005dde:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d103      	bne.n	8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d007      	beq.n	8005e00 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0204 	orr.w	r2, r2, #4
 8005dfe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a81      	ldr	r2, [pc, #516]	@ (800600c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d072      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a80      	ldr	r2, [pc, #512]	@ (8006010 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d06d      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a7e      	ldr	r2, [pc, #504]	@ (8006014 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d068      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a7d      	ldr	r2, [pc, #500]	@ (8006018 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d063      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a7b      	ldr	r2, [pc, #492]	@ (800601c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d05e      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a7a      	ldr	r2, [pc, #488]	@ (8006020 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d059      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a78      	ldr	r2, [pc, #480]	@ (8006024 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d054      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a77      	ldr	r2, [pc, #476]	@ (8006028 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d04f      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a75      	ldr	r2, [pc, #468]	@ (800602c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d04a      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a74      	ldr	r2, [pc, #464]	@ (8006030 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d045      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a72      	ldr	r2, [pc, #456]	@ (8006034 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d040      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a71      	ldr	r2, [pc, #452]	@ (8006038 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d03b      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a6f      	ldr	r2, [pc, #444]	@ (800603c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d036      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a6e      	ldr	r2, [pc, #440]	@ (8006040 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d031      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a6c      	ldr	r2, [pc, #432]	@ (8006044 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d02c      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a6b      	ldr	r2, [pc, #428]	@ (8006048 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d027      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a69      	ldr	r2, [pc, #420]	@ (800604c <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d022      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a68      	ldr	r2, [pc, #416]	@ (8006050 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d01d      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a66      	ldr	r2, [pc, #408]	@ (8006054 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d018      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a65      	ldr	r2, [pc, #404]	@ (8006058 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d013      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a63      	ldr	r2, [pc, #396]	@ (800605c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00e      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a62      	ldr	r2, [pc, #392]	@ (8006060 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d009      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a60      	ldr	r2, [pc, #384]	@ (8006064 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a5f      	ldr	r2, [pc, #380]	@ (8006068 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d101      	bne.n	8005ef4 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e000      	b.n	8005ef6 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01a      	beq.n	8005f30 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f16:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f2e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a35      	ldr	r2, [pc, #212]	@ (800600c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d04a      	beq.n	8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a34      	ldr	r2, [pc, #208]	@ (8006010 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d045      	beq.n	8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a32      	ldr	r2, [pc, #200]	@ (8006014 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d040      	beq.n	8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a31      	ldr	r2, [pc, #196]	@ (8006018 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d03b      	beq.n	8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a2f      	ldr	r2, [pc, #188]	@ (800601c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d036      	beq.n	8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a2e      	ldr	r2, [pc, #184]	@ (8006020 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d031      	beq.n	8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a2c      	ldr	r2, [pc, #176]	@ (8006024 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d02c      	beq.n	8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8006028 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d027      	beq.n	8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a29      	ldr	r2, [pc, #164]	@ (800602c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d022      	beq.n	8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a28      	ldr	r2, [pc, #160]	@ (8006030 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d01d      	beq.n	8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a26      	ldr	r2, [pc, #152]	@ (8006034 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d018      	beq.n	8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a25      	ldr	r2, [pc, #148]	@ (8006038 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d013      	beq.n	8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a23      	ldr	r2, [pc, #140]	@ (800603c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a22      	ldr	r2, [pc, #136]	@ (8006040 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d009      	beq.n	8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a20      	ldr	r2, [pc, #128]	@ (8006044 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d004      	beq.n	8005fd0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1f      	ldr	r2, [pc, #124]	@ (8006048 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d108      	bne.n	8005fe2 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	e00e      	b.n	8006000 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f042 0201 	orr.w	r2, r2, #1
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	e005      	b.n	8006000 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ffa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006000:	7dfb      	ldrb	r3, [r7, #23]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40020010 	.word	0x40020010
 8006010:	40020028 	.word	0x40020028
 8006014:	40020040 	.word	0x40020040
 8006018:	40020058 	.word	0x40020058
 800601c:	40020070 	.word	0x40020070
 8006020:	40020088 	.word	0x40020088
 8006024:	400200a0 	.word	0x400200a0
 8006028:	400200b8 	.word	0x400200b8
 800602c:	40020410 	.word	0x40020410
 8006030:	40020428 	.word	0x40020428
 8006034:	40020440 	.word	0x40020440
 8006038:	40020458 	.word	0x40020458
 800603c:	40020470 	.word	0x40020470
 8006040:	40020488 	.word	0x40020488
 8006044:	400204a0 	.word	0x400204a0
 8006048:	400204b8 	.word	0x400204b8
 800604c:	58025408 	.word	0x58025408
 8006050:	5802541c 	.word	0x5802541c
 8006054:	58025430 	.word	0x58025430
 8006058:	58025444 	.word	0x58025444
 800605c:	58025458 	.word	0x58025458
 8006060:	5802546c 	.word	0x5802546c
 8006064:	58025480 	.word	0x58025480
 8006068:	58025494 	.word	0x58025494

0800606c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4613      	mov	r3, r2
 8006078:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a39      	ldr	r2, [pc, #228]	@ (8006164 <HAL_DMAEx_ChangeMemory+0xf8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d04a      	beq.n	800611a <HAL_DMAEx_ChangeMemory+0xae>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a37      	ldr	r2, [pc, #220]	@ (8006168 <HAL_DMAEx_ChangeMemory+0xfc>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d045      	beq.n	800611a <HAL_DMAEx_ChangeMemory+0xae>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a36      	ldr	r2, [pc, #216]	@ (800616c <HAL_DMAEx_ChangeMemory+0x100>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d040      	beq.n	800611a <HAL_DMAEx_ChangeMemory+0xae>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a34      	ldr	r2, [pc, #208]	@ (8006170 <HAL_DMAEx_ChangeMemory+0x104>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d03b      	beq.n	800611a <HAL_DMAEx_ChangeMemory+0xae>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a33      	ldr	r2, [pc, #204]	@ (8006174 <HAL_DMAEx_ChangeMemory+0x108>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d036      	beq.n	800611a <HAL_DMAEx_ChangeMemory+0xae>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a31      	ldr	r2, [pc, #196]	@ (8006178 <HAL_DMAEx_ChangeMemory+0x10c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d031      	beq.n	800611a <HAL_DMAEx_ChangeMemory+0xae>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a30      	ldr	r2, [pc, #192]	@ (800617c <HAL_DMAEx_ChangeMemory+0x110>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d02c      	beq.n	800611a <HAL_DMAEx_ChangeMemory+0xae>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006180 <HAL_DMAEx_ChangeMemory+0x114>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d027      	beq.n	800611a <HAL_DMAEx_ChangeMemory+0xae>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006184 <HAL_DMAEx_ChangeMemory+0x118>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d022      	beq.n	800611a <HAL_DMAEx_ChangeMemory+0xae>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006188 <HAL_DMAEx_ChangeMemory+0x11c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d01d      	beq.n	800611a <HAL_DMAEx_ChangeMemory+0xae>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a2a      	ldr	r2, [pc, #168]	@ (800618c <HAL_DMAEx_ChangeMemory+0x120>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d018      	beq.n	800611a <HAL_DMAEx_ChangeMemory+0xae>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a28      	ldr	r2, [pc, #160]	@ (8006190 <HAL_DMAEx_ChangeMemory+0x124>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <HAL_DMAEx_ChangeMemory+0xae>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a27      	ldr	r2, [pc, #156]	@ (8006194 <HAL_DMAEx_ChangeMemory+0x128>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d00e      	beq.n	800611a <HAL_DMAEx_ChangeMemory+0xae>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a25      	ldr	r2, [pc, #148]	@ (8006198 <HAL_DMAEx_ChangeMemory+0x12c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d009      	beq.n	800611a <HAL_DMAEx_ChangeMemory+0xae>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a24      	ldr	r2, [pc, #144]	@ (800619c <HAL_DMAEx_ChangeMemory+0x130>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d004      	beq.n	800611a <HAL_DMAEx_ChangeMemory+0xae>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a22      	ldr	r2, [pc, #136]	@ (80061a0 <HAL_DMAEx_ChangeMemory+0x134>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d101      	bne.n	800611e <HAL_DMAEx_ChangeMemory+0xb2>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <HAL_DMAEx_ChangeMemory+0xb4>
 800611e:	2300      	movs	r3, #0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00c      	beq.n	800613e <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d104      	bne.n	8006134 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	60da      	str	r2, [r3, #12]
 8006132:	e010      	b.n	8006156 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	611a      	str	r2, [r3, #16]
 800613c:	e00b      	b.n	8006156 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d104      	bne.n	800614e <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	60da      	str	r2, [r3, #12]
 800614c:	e003      	b.n	8006156 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	40020010 	.word	0x40020010
 8006168:	40020028 	.word	0x40020028
 800616c:	40020040 	.word	0x40020040
 8006170:	40020058 	.word	0x40020058
 8006174:	40020070 	.word	0x40020070
 8006178:	40020088 	.word	0x40020088
 800617c:	400200a0 	.word	0x400200a0
 8006180:	400200b8 	.word	0x400200b8
 8006184:	40020410 	.word	0x40020410
 8006188:	40020428 	.word	0x40020428
 800618c:	40020440 	.word	0x40020440
 8006190:	40020458 	.word	0x40020458
 8006194:	40020470 	.word	0x40020470
 8006198:	40020488 	.word	0x40020488
 800619c:	400204a0 	.word	0x400204a0
 80061a0:	400204b8 	.word	0x400204b8

080061a4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a46      	ldr	r2, [pc, #280]	@ (80062d0 <DMA_MultiBufferSetConfig+0x12c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d04a      	beq.n	8006252 <DMA_MultiBufferSetConfig+0xae>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a44      	ldr	r2, [pc, #272]	@ (80062d4 <DMA_MultiBufferSetConfig+0x130>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d045      	beq.n	8006252 <DMA_MultiBufferSetConfig+0xae>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a43      	ldr	r2, [pc, #268]	@ (80062d8 <DMA_MultiBufferSetConfig+0x134>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d040      	beq.n	8006252 <DMA_MultiBufferSetConfig+0xae>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a41      	ldr	r2, [pc, #260]	@ (80062dc <DMA_MultiBufferSetConfig+0x138>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d03b      	beq.n	8006252 <DMA_MultiBufferSetConfig+0xae>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a40      	ldr	r2, [pc, #256]	@ (80062e0 <DMA_MultiBufferSetConfig+0x13c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d036      	beq.n	8006252 <DMA_MultiBufferSetConfig+0xae>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a3e      	ldr	r2, [pc, #248]	@ (80062e4 <DMA_MultiBufferSetConfig+0x140>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d031      	beq.n	8006252 <DMA_MultiBufferSetConfig+0xae>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a3d      	ldr	r2, [pc, #244]	@ (80062e8 <DMA_MultiBufferSetConfig+0x144>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d02c      	beq.n	8006252 <DMA_MultiBufferSetConfig+0xae>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a3b      	ldr	r2, [pc, #236]	@ (80062ec <DMA_MultiBufferSetConfig+0x148>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d027      	beq.n	8006252 <DMA_MultiBufferSetConfig+0xae>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a3a      	ldr	r2, [pc, #232]	@ (80062f0 <DMA_MultiBufferSetConfig+0x14c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d022      	beq.n	8006252 <DMA_MultiBufferSetConfig+0xae>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a38      	ldr	r2, [pc, #224]	@ (80062f4 <DMA_MultiBufferSetConfig+0x150>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d01d      	beq.n	8006252 <DMA_MultiBufferSetConfig+0xae>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a37      	ldr	r2, [pc, #220]	@ (80062f8 <DMA_MultiBufferSetConfig+0x154>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d018      	beq.n	8006252 <DMA_MultiBufferSetConfig+0xae>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a35      	ldr	r2, [pc, #212]	@ (80062fc <DMA_MultiBufferSetConfig+0x158>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <DMA_MultiBufferSetConfig+0xae>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a34      	ldr	r2, [pc, #208]	@ (8006300 <DMA_MultiBufferSetConfig+0x15c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00e      	beq.n	8006252 <DMA_MultiBufferSetConfig+0xae>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a32      	ldr	r2, [pc, #200]	@ (8006304 <DMA_MultiBufferSetConfig+0x160>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d009      	beq.n	8006252 <DMA_MultiBufferSetConfig+0xae>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a31      	ldr	r2, [pc, #196]	@ (8006308 <DMA_MultiBufferSetConfig+0x164>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d004      	beq.n	8006252 <DMA_MultiBufferSetConfig+0xae>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a2f      	ldr	r2, [pc, #188]	@ (800630c <DMA_MultiBufferSetConfig+0x168>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d101      	bne.n	8006256 <DMA_MultiBufferSetConfig+0xb2>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <DMA_MultiBufferSetConfig+0xb4>
 8006256:	2300      	movs	r3, #0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d019      	beq.n	8006290 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2b40      	cmp	r3, #64	@ 0x40
 800626a:	d108      	bne.n	800627e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 800627c:	e021      	b.n	80062c2 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	60da      	str	r2, [r3, #12]
}
 800628e:	e018      	b.n	80062c2 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	2b40      	cmp	r3, #64	@ 0x40
 800629e:	d108      	bne.n	80062b2 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	60da      	str	r2, [r3, #12]
}
 80062b0:	e007      	b.n	80062c2 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	60da      	str	r2, [r3, #12]
}
 80062c2:	bf00      	nop
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40020010 	.word	0x40020010
 80062d4:	40020028 	.word	0x40020028
 80062d8:	40020040 	.word	0x40020040
 80062dc:	40020058 	.word	0x40020058
 80062e0:	40020070 	.word	0x40020070
 80062e4:	40020088 	.word	0x40020088
 80062e8:	400200a0 	.word	0x400200a0
 80062ec:	400200b8 	.word	0x400200b8
 80062f0:	40020410 	.word	0x40020410
 80062f4:	40020428 	.word	0x40020428
 80062f8:	40020440 	.word	0x40020440
 80062fc:	40020458 	.word	0x40020458
 8006300:	40020470 	.word	0x40020470
 8006304:	40020488 	.word	0x40020488
 8006308:	400204a0 	.word	0x400204a0
 800630c:	400204b8 	.word	0x400204b8

08006310 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006310:	b480      	push	{r7}
 8006312:	b089      	sub	sp, #36	@ 0x24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800631e:	4b89      	ldr	r3, [pc, #548]	@ (8006544 <HAL_GPIO_Init+0x234>)
 8006320:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006322:	e194      	b.n	800664e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	2101      	movs	r1, #1
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	fa01 f303 	lsl.w	r3, r1, r3
 8006330:	4013      	ands	r3, r2
 8006332:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 8186 	beq.w	8006648 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	2b01      	cmp	r3, #1
 8006346:	d005      	beq.n	8006354 <HAL_GPIO_Init+0x44>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f003 0303 	and.w	r3, r3, #3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d130      	bne.n	80063b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	2203      	movs	r2, #3
 8006360:	fa02 f303 	lsl.w	r3, r2, r3
 8006364:	43db      	mvns	r3, r3
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	4013      	ands	r3, r2
 800636a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	fa02 f303 	lsl.w	r3, r2, r3
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	4313      	orrs	r3, r2
 800637c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800638a:	2201      	movs	r2, #1
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	43db      	mvns	r3, r3
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	4013      	ands	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	091b      	lsrs	r3, r3, #4
 80063a0:	f003 0201 	and.w	r2, r3, #1
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f003 0303 	and.w	r3, r3, #3
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d017      	beq.n	80063f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	2203      	movs	r2, #3
 80063ce:	fa02 f303 	lsl.w	r3, r2, r3
 80063d2:	43db      	mvns	r3, r3
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	4013      	ands	r3, r2
 80063d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	fa02 f303 	lsl.w	r3, r2, r3
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d123      	bne.n	8006446 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	08da      	lsrs	r2, r3, #3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3208      	adds	r2, #8
 8006406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	220f      	movs	r2, #15
 8006416:	fa02 f303 	lsl.w	r3, r2, r3
 800641a:	43db      	mvns	r3, r3
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	4013      	ands	r3, r2
 8006420:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	fa02 f303 	lsl.w	r3, r2, r3
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	4313      	orrs	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	08da      	lsrs	r2, r3, #3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3208      	adds	r2, #8
 8006440:	69b9      	ldr	r1, [r7, #24]
 8006442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	2203      	movs	r2, #3
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	43db      	mvns	r3, r3
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	4013      	ands	r3, r2
 800645c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f003 0203 	and.w	r2, r3, #3
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	fa02 f303 	lsl.w	r3, r2, r3
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	4313      	orrs	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 80e0 	beq.w	8006648 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006488:	4b2f      	ldr	r3, [pc, #188]	@ (8006548 <HAL_GPIO_Init+0x238>)
 800648a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800648e:	4a2e      	ldr	r2, [pc, #184]	@ (8006548 <HAL_GPIO_Init+0x238>)
 8006490:	f043 0302 	orr.w	r3, r3, #2
 8006494:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006498:	4b2b      	ldr	r3, [pc, #172]	@ (8006548 <HAL_GPIO_Init+0x238>)
 800649a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064a6:	4a29      	ldr	r2, [pc, #164]	@ (800654c <HAL_GPIO_Init+0x23c>)
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	089b      	lsrs	r3, r3, #2
 80064ac:	3302      	adds	r3, #2
 80064ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	220f      	movs	r2, #15
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	43db      	mvns	r3, r3
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	4013      	ands	r3, r2
 80064c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a20      	ldr	r2, [pc, #128]	@ (8006550 <HAL_GPIO_Init+0x240>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d052      	beq.n	8006578 <HAL_GPIO_Init+0x268>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006554 <HAL_GPIO_Init+0x244>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d031      	beq.n	800653e <HAL_GPIO_Init+0x22e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006558 <HAL_GPIO_Init+0x248>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d02b      	beq.n	800653a <HAL_GPIO_Init+0x22a>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a1d      	ldr	r2, [pc, #116]	@ (800655c <HAL_GPIO_Init+0x24c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d025      	beq.n	8006536 <HAL_GPIO_Init+0x226>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006560 <HAL_GPIO_Init+0x250>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d01f      	beq.n	8006532 <HAL_GPIO_Init+0x222>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006564 <HAL_GPIO_Init+0x254>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d019      	beq.n	800652e <HAL_GPIO_Init+0x21e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006568 <HAL_GPIO_Init+0x258>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d013      	beq.n	800652a <HAL_GPIO_Init+0x21a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a19      	ldr	r2, [pc, #100]	@ (800656c <HAL_GPIO_Init+0x25c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00d      	beq.n	8006526 <HAL_GPIO_Init+0x216>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a18      	ldr	r2, [pc, #96]	@ (8006570 <HAL_GPIO_Init+0x260>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d007      	beq.n	8006522 <HAL_GPIO_Init+0x212>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a17      	ldr	r2, [pc, #92]	@ (8006574 <HAL_GPIO_Init+0x264>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d101      	bne.n	800651e <HAL_GPIO_Init+0x20e>
 800651a:	2309      	movs	r3, #9
 800651c:	e02d      	b.n	800657a <HAL_GPIO_Init+0x26a>
 800651e:	230a      	movs	r3, #10
 8006520:	e02b      	b.n	800657a <HAL_GPIO_Init+0x26a>
 8006522:	2308      	movs	r3, #8
 8006524:	e029      	b.n	800657a <HAL_GPIO_Init+0x26a>
 8006526:	2307      	movs	r3, #7
 8006528:	e027      	b.n	800657a <HAL_GPIO_Init+0x26a>
 800652a:	2306      	movs	r3, #6
 800652c:	e025      	b.n	800657a <HAL_GPIO_Init+0x26a>
 800652e:	2305      	movs	r3, #5
 8006530:	e023      	b.n	800657a <HAL_GPIO_Init+0x26a>
 8006532:	2304      	movs	r3, #4
 8006534:	e021      	b.n	800657a <HAL_GPIO_Init+0x26a>
 8006536:	2303      	movs	r3, #3
 8006538:	e01f      	b.n	800657a <HAL_GPIO_Init+0x26a>
 800653a:	2302      	movs	r3, #2
 800653c:	e01d      	b.n	800657a <HAL_GPIO_Init+0x26a>
 800653e:	2301      	movs	r3, #1
 8006540:	e01b      	b.n	800657a <HAL_GPIO_Init+0x26a>
 8006542:	bf00      	nop
 8006544:	58000080 	.word	0x58000080
 8006548:	58024400 	.word	0x58024400
 800654c:	58000400 	.word	0x58000400
 8006550:	58020000 	.word	0x58020000
 8006554:	58020400 	.word	0x58020400
 8006558:	58020800 	.word	0x58020800
 800655c:	58020c00 	.word	0x58020c00
 8006560:	58021000 	.word	0x58021000
 8006564:	58021400 	.word	0x58021400
 8006568:	58021800 	.word	0x58021800
 800656c:	58021c00 	.word	0x58021c00
 8006570:	58022000 	.word	0x58022000
 8006574:	58022400 	.word	0x58022400
 8006578:	2300      	movs	r3, #0
 800657a:	69fa      	ldr	r2, [r7, #28]
 800657c:	f002 0203 	and.w	r2, r2, #3
 8006580:	0092      	lsls	r2, r2, #2
 8006582:	4093      	lsls	r3, r2
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	4313      	orrs	r3, r2
 8006588:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800658a:	4938      	ldr	r1, [pc, #224]	@ (800666c <HAL_GPIO_Init+0x35c>)
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	089b      	lsrs	r3, r3, #2
 8006590:	3302      	adds	r3, #2
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	43db      	mvns	r3, r3
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	4013      	ands	r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80065be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80065c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	43db      	mvns	r3, r3
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	4013      	ands	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80065ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	43db      	mvns	r3, r3
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	4013      	ands	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	43db      	mvns	r3, r3
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	4013      	ands	r3, r2
 800662c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	3301      	adds	r3, #1
 800664c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	fa22 f303 	lsr.w	r3, r2, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	f47f ae63 	bne.w	8006324 <HAL_GPIO_Init+0x14>
  }
}
 800665e:	bf00      	nop
 8006660:	bf00      	nop
 8006662:	3724      	adds	r7, #36	@ 0x24
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	58000400 	.word	0x58000400

08006670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	807b      	strh	r3, [r7, #2]
 800667c:	4613      	mov	r3, r2
 800667e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006680:	787b      	ldrb	r3, [r7, #1]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006686:	887a      	ldrh	r2, [r7, #2]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800668c:	e003      	b.n	8006696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800668e:	887b      	ldrh	r3, [r7, #2]
 8006690:	041a      	lsls	r2, r3, #16
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	619a      	str	r2, [r3, #24]
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
	...

080066a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e08b      	b.n	80067ce <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d106      	bne.n	80066d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fb f8e6 	bl	800189c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2224      	movs	r2, #36	@ 0x24
 80066d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0201 	bic.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80066f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006704:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d107      	bne.n	800671e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800671a:	609a      	str	r2, [r3, #8]
 800671c:	e006      	b.n	800672c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800672a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	2b02      	cmp	r3, #2
 8006732:	d108      	bne.n	8006746 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006742:	605a      	str	r2, [r3, #4]
 8006744:	e007      	b.n	8006756 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006754:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6859      	ldr	r1, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	4b1d      	ldr	r3, [pc, #116]	@ (80067d8 <HAL_I2C_Init+0x134>)
 8006762:	430b      	orrs	r3, r1
 8006764:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006774:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	69d9      	ldr	r1, [r3, #28]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1a      	ldr	r2, [r3, #32]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0201 	orr.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	02008000 	.word	0x02008000

080067dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	607a      	str	r2, [r7, #4]
 80067e6:	461a      	mov	r2, r3
 80067e8:	460b      	mov	r3, r1
 80067ea:	817b      	strh	r3, [r7, #10]
 80067ec:	4613      	mov	r3, r2
 80067ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b20      	cmp	r3, #32
 80067fa:	f040 80fd 	bne.w	80069f8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006804:	2b01      	cmp	r3, #1
 8006806:	d101      	bne.n	800680c <HAL_I2C_Master_Transmit+0x30>
 8006808:	2302      	movs	r3, #2
 800680a:	e0f6      	b.n	80069fa <HAL_I2C_Master_Transmit+0x21e>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006814:	f7fb fdc8 	bl	80023a8 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	2319      	movs	r3, #25
 8006820:	2201      	movs	r2, #1
 8006822:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f001 f891 	bl	800794e <I2C_WaitOnFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e0e1      	b.n	80069fa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2221      	movs	r2, #33	@ 0x21
 800683a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2210      	movs	r2, #16
 8006842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	893a      	ldrh	r2, [r7, #8]
 8006856:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006862:	b29b      	uxth	r3, r3
 8006864:	2bff      	cmp	r3, #255	@ 0xff
 8006866:	d906      	bls.n	8006876 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	22ff      	movs	r2, #255	@ 0xff
 800686c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800686e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	e007      	b.n	8006886 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006880:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006884:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800688a:	2b00      	cmp	r3, #0
 800688c:	d024      	beq.n	80068d8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006892:	781a      	ldrb	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	3301      	adds	r3, #1
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	8979      	ldrh	r1, [r7, #10]
 80068ca:	4b4e      	ldr	r3, [pc, #312]	@ (8006a04 <HAL_I2C_Master_Transmit+0x228>)
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f001 fa8b 	bl	8007dec <I2C_TransferConfig>
 80068d6:	e066      	b.n	80069a6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	8979      	ldrh	r1, [r7, #10]
 80068e0:	4b48      	ldr	r3, [pc, #288]	@ (8006a04 <HAL_I2C_Master_Transmit+0x228>)
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f001 fa80 	bl	8007dec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80068ec:	e05b      	b.n	80069a6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	6a39      	ldr	r1, [r7, #32]
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f001 f884 	bl	8007a00 <I2C_WaitOnTXISFlagUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e07b      	b.n	80069fa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006906:	781a      	ldrb	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800691c:	b29b      	uxth	r3, r3
 800691e:	3b01      	subs	r3, #1
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006936:	b29b      	uxth	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d034      	beq.n	80069a6 <HAL_I2C_Master_Transmit+0x1ca>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006940:	2b00      	cmp	r3, #0
 8006942:	d130      	bne.n	80069a6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	2200      	movs	r2, #0
 800694c:	2180      	movs	r1, #128	@ 0x80
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 fffd 	bl	800794e <I2C_WaitOnFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e04d      	b.n	80069fa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006962:	b29b      	uxth	r3, r3
 8006964:	2bff      	cmp	r3, #255	@ 0xff
 8006966:	d90e      	bls.n	8006986 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	22ff      	movs	r2, #255	@ 0xff
 800696c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006972:	b2da      	uxtb	r2, r3
 8006974:	8979      	ldrh	r1, [r7, #10]
 8006976:	2300      	movs	r3, #0
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f001 fa34 	bl	8007dec <I2C_TransferConfig>
 8006984:	e00f      	b.n	80069a6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006994:	b2da      	uxtb	r2, r3
 8006996:	8979      	ldrh	r1, [r7, #10]
 8006998:	2300      	movs	r3, #0
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f001 fa23 	bl	8007dec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d19e      	bne.n	80068ee <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	6a39      	ldr	r1, [r7, #32]
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f001 f86a 	bl	8007a8e <I2C_WaitOnSTOPFlagUntilTimeout>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e01a      	b.n	80069fa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2220      	movs	r2, #32
 80069ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6859      	ldr	r1, [r3, #4]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006a08 <HAL_I2C_Master_Transmit+0x22c>)
 80069d8:	400b      	ands	r3, r1
 80069da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	e000      	b.n	80069fa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80069f8:	2302      	movs	r3, #2
  }
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	80002000 	.word	0x80002000
 8006a08:	fe00e800 	.word	0xfe00e800

08006a0c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	607a      	str	r2, [r7, #4]
 8006a16:	461a      	mov	r2, r3
 8006a18:	460b      	mov	r3, r1
 8006a1a:	817b      	strh	r3, [r7, #10]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	f040 80db 	bne.w	8006be4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_I2C_Master_Receive+0x30>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e0d4      	b.n	8006be6 <HAL_I2C_Master_Receive+0x1da>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a44:	f7fb fcb0 	bl	80023a8 <HAL_GetTick>
 8006a48:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	2319      	movs	r3, #25
 8006a50:	2201      	movs	r2, #1
 8006a52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 ff79 	bl	800794e <I2C_WaitOnFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e0bf      	b.n	8006be6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2222      	movs	r2, #34	@ 0x22
 8006a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2210      	movs	r2, #16
 8006a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	893a      	ldrh	r2, [r7, #8]
 8006a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2bff      	cmp	r3, #255	@ 0xff
 8006a96:	d90e      	bls.n	8006ab6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	22ff      	movs	r2, #255	@ 0xff
 8006a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	8979      	ldrh	r1, [r7, #10]
 8006aa6:	4b52      	ldr	r3, [pc, #328]	@ (8006bf0 <HAL_I2C_Master_Receive+0x1e4>)
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f001 f99c 	bl	8007dec <I2C_TransferConfig>
 8006ab4:	e06d      	b.n	8006b92 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	8979      	ldrh	r1, [r7, #10]
 8006ac8:	4b49      	ldr	r3, [pc, #292]	@ (8006bf0 <HAL_I2C_Master_Receive+0x1e4>)
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f001 f98b 	bl	8007dec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006ad6:	e05c      	b.n	8006b92 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	6a39      	ldr	r1, [r7, #32]
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f001 f819 	bl	8007b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e07c      	b.n	8006be6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	3b01      	subs	r3, #1
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d034      	beq.n	8006b92 <HAL_I2C_Master_Receive+0x186>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d130      	bne.n	8006b92 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	2200      	movs	r2, #0
 8006b38:	2180      	movs	r1, #128	@ 0x80
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 ff07 	bl	800794e <I2C_WaitOnFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e04d      	b.n	8006be6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2bff      	cmp	r3, #255	@ 0xff
 8006b52:	d90e      	bls.n	8006b72 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	22ff      	movs	r2, #255	@ 0xff
 8006b58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	8979      	ldrh	r1, [r7, #10]
 8006b62:	2300      	movs	r3, #0
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f001 f93e 	bl	8007dec <I2C_TransferConfig>
 8006b70:	e00f      	b.n	8006b92 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	8979      	ldrh	r1, [r7, #10]
 8006b84:	2300      	movs	r3, #0
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f001 f92d 	bl	8007dec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d19d      	bne.n	8006ad8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	6a39      	ldr	r1, [r7, #32]
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 ff74 	bl	8007a8e <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e01a      	b.n	8006be6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6859      	ldr	r1, [r3, #4]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf4 <HAL_I2C_Master_Receive+0x1e8>)
 8006bc4:	400b      	ands	r3, r1
 8006bc6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	e000      	b.n	8006be6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006be4:	2302      	movs	r3, #2
  }
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	80002400 	.word	0x80002400
 8006bf4:	fe00e800 	.word	0xfe00e800

08006bf8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	68f9      	ldr	r1, [r7, #12]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	4798      	blx	r3
  }
}
 8006c24:	bf00      	nop
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	0a1b      	lsrs	r3, r3, #8
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d010      	beq.n	8006c72 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	09db      	lsrs	r3, r3, #7
 8006c54:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c60:	f043 0201 	orr.w	r2, r3, #1
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c70:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	0a9b      	lsrs	r3, r3, #10
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d010      	beq.n	8006ca0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	09db      	lsrs	r3, r3, #7
 8006c82:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c8e:	f043 0208 	orr.w	r2, r3, #8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006c9e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	0a5b      	lsrs	r3, r3, #9
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d010      	beq.n	8006cce <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	09db      	lsrs	r3, r3, #7
 8006cb0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00a      	beq.n	8006cce <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cbc:	f043 0202 	orr.w	r2, r3, #2
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ccc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 030b 	and.w	r3, r3, #11
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006cde:	68f9      	ldr	r1, [r7, #12]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fcdb 	bl	800769c <I2C_ITError>
  }
}
 8006ce6:	bf00      	nop
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	70fb      	strb	r3, [r7, #3]
 8006d22:	4613      	mov	r3, r2
 8006d24:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b086      	sub	sp, #24
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <I2C_Slave_ISR_IT+0x24>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e0ed      	b.n	8006f6e <I2C_Slave_ISR_IT+0x200>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	095b      	lsrs	r3, r3, #5
 8006daa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d004      	beq.n	8006dbc <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006db2:	6939      	ldr	r1, [r7, #16]
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 f9c1 	bl	800713c <I2C_ITSlaveCplt>
 8006dba:	e0d3      	b.n	8006f64 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	091b      	lsrs	r3, r3, #4
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d04d      	beq.n	8006e64 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	091b      	lsrs	r3, r3, #4
 8006dcc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d047      	beq.n	8006e64 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d128      	bne.n	8006e30 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b28      	cmp	r3, #40	@ 0x28
 8006de8:	d108      	bne.n	8006dfc <I2C_Slave_ISR_IT+0x8e>
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006df0:	d104      	bne.n	8006dfc <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006df2:	6939      	ldr	r1, [r7, #16]
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 fbfb 	bl	80075f0 <I2C_ITListenCplt>
 8006dfa:	e032      	b.n	8006e62 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b29      	cmp	r3, #41	@ 0x29
 8006e06:	d10e      	bne.n	8006e26 <I2C_Slave_ISR_IT+0xb8>
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e0e:	d00a      	beq.n	8006e26 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2210      	movs	r2, #16
 8006e16:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fd56 	bl	80078ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 f92d 	bl	800707e <I2C_ITSlaveSeqCplt>
 8006e24:	e01d      	b.n	8006e62 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2210      	movs	r2, #16
 8006e2c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006e2e:	e096      	b.n	8006f5e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2210      	movs	r2, #16
 8006e36:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e3c:	f043 0204 	orr.w	r2, r3, #4
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d004      	beq.n	8006e54 <I2C_Slave_ISR_IT+0xe6>
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e50:	f040 8085 	bne.w	8006f5e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e58:	4619      	mov	r1, r3
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fc1e 	bl	800769c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006e60:	e07d      	b.n	8006f5e <I2C_Slave_ISR_IT+0x1f0>
 8006e62:	e07c      	b.n	8006f5e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	089b      	lsrs	r3, r3, #2
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d030      	beq.n	8006ed2 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	089b      	lsrs	r3, r3, #2
 8006e74:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d02a      	beq.n	8006ed2 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d018      	beq.n	8006eb8 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d14f      	bne.n	8006f62 <I2C_Slave_ISR_IT+0x1f4>
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ec8:	d04b      	beq.n	8006f62 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f000 f8d7 	bl	800707e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006ed0:	e047      	b.n	8006f62 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	08db      	lsrs	r3, r3, #3
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	08db      	lsrs	r3, r3, #3
 8006ee2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d004      	beq.n	8006ef4 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006eea:	6939      	ldr	r1, [r7, #16]
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 f842 	bl	8006f76 <I2C_ITAddrCplt>
 8006ef2:	e037      	b.n	8006f64 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d031      	beq.n	8006f64 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	085b      	lsrs	r3, r3, #1
 8006f04:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d02b      	beq.n	8006f64 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d018      	beq.n	8006f48 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1a:	781a      	ldrb	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006f46:	e00d      	b.n	8006f64 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f4e:	d002      	beq.n	8006f56 <I2C_Slave_ISR_IT+0x1e8>
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d106      	bne.n	8006f64 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 f891 	bl	800707e <I2C_ITSlaveSeqCplt>
 8006f5c:	e002      	b.n	8006f64 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006f5e:	bf00      	nop
 8006f60:	e000      	b.n	8006f64 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8006f62:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f8c:	2b28      	cmp	r3, #40	@ 0x28
 8006f8e:	d16a      	bne.n	8007066 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	0c1b      	lsrs	r3, r3, #16
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	0c1b      	lsrs	r3, r3, #16
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006fae:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fbc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006fca:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d138      	bne.n	8007046 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006fd4:	897b      	ldrh	r3, [r7, #10]
 8006fd6:	09db      	lsrs	r3, r3, #7
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	89bb      	ldrh	r3, [r7, #12]
 8006fdc:	4053      	eors	r3, r2
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	f003 0306 	and.w	r3, r3, #6
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d11c      	bne.n	8007022 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006fe8:	897b      	ldrh	r3, [r7, #10]
 8006fea:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d13b      	bne.n	8007076 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2208      	movs	r2, #8
 800700a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007014:	89ba      	ldrh	r2, [r7, #12]
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7ff fe7b 	bl	8006d16 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007020:	e029      	b.n	8007076 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007022:	893b      	ldrh	r3, [r7, #8]
 8007024:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007026:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 ff10 	bl	8007e50 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007038:	89ba      	ldrh	r2, [r7, #12]
 800703a:	7bfb      	ldrb	r3, [r7, #15]
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7ff fe69 	bl	8006d16 <HAL_I2C_AddrCallback>
}
 8007044:	e017      	b.n	8007076 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007046:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 ff00 	bl	8007e50 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007058:	89ba      	ldrh	r2, [r7, #12]
 800705a:	7bfb      	ldrb	r3, [r7, #15]
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff fe59 	bl	8006d16 <HAL_I2C_AddrCallback>
}
 8007064:	e007      	b.n	8007076 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2208      	movs	r2, #8
 800706c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007076:	bf00      	nop
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	0b9b      	lsrs	r3, r3, #14
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d008      	beq.n	80070b4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	e00d      	b.n	80070d0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	0bdb      	lsrs	r3, r3, #15
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070ce:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b29      	cmp	r3, #41	@ 0x29
 80070da:	d112      	bne.n	8007102 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2228      	movs	r2, #40	@ 0x28
 80070e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2221      	movs	r2, #33	@ 0x21
 80070e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80070ea:	2101      	movs	r1, #1
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 feaf 	bl	8007e50 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff fdf7 	bl	8006cee <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007100:	e017      	b.n	8007132 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b2a      	cmp	r3, #42	@ 0x2a
 800710c:	d111      	bne.n	8007132 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2228      	movs	r2, #40	@ 0x28
 8007112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2222      	movs	r2, #34	@ 0x22
 800711a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800711c:	2102      	movs	r1, #2
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fe96 	bl	8007e50 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff fde8 	bl	8006d02 <HAL_I2C_SlaveRxCpltCallback>
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
	...

0800713c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007156:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800715e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2220      	movs	r2, #32
 8007166:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007168:	7afb      	ldrb	r3, [r7, #11]
 800716a:	2b21      	cmp	r3, #33	@ 0x21
 800716c:	d002      	beq.n	8007174 <I2C_ITSlaveCplt+0x38>
 800716e:	7afb      	ldrb	r3, [r7, #11]
 8007170:	2b29      	cmp	r3, #41	@ 0x29
 8007172:	d108      	bne.n	8007186 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007174:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fe69 	bl	8007e50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2221      	movs	r2, #33	@ 0x21
 8007182:	631a      	str	r2, [r3, #48]	@ 0x30
 8007184:	e019      	b.n	80071ba <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007186:	7afb      	ldrb	r3, [r7, #11]
 8007188:	2b22      	cmp	r3, #34	@ 0x22
 800718a:	d002      	beq.n	8007192 <I2C_ITSlaveCplt+0x56>
 800718c:	7afb      	ldrb	r3, [r7, #11]
 800718e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007190:	d108      	bne.n	80071a4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007192:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fe5a 	bl	8007e50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2222      	movs	r2, #34	@ 0x22
 80071a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80071a2:	e00a      	b.n	80071ba <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80071a4:	7afb      	ldrb	r3, [r7, #11]
 80071a6:	2b28      	cmp	r3, #40	@ 0x28
 80071a8:	d107      	bne.n	80071ba <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80071aa:	f248 0103 	movw	r1, #32771	@ 0x8003
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fe4e 	bl	8007e50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071c8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6859      	ldr	r1, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	4b80      	ldr	r3, [pc, #512]	@ (80073d8 <I2C_ITSlaveCplt+0x29c>)
 80071d6:	400b      	ands	r3, r1
 80071d8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fb75 	bl	80078ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	0b9b      	lsrs	r3, r3, #14
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d07a      	beq.n	80072e2 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80071fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 8112 	beq.w	800742a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a73      	ldr	r2, [pc, #460]	@ (80073dc <I2C_ITSlaveCplt+0x2a0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d059      	beq.n	80072c6 <I2C_ITSlaveCplt+0x18a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a71      	ldr	r2, [pc, #452]	@ (80073e0 <I2C_ITSlaveCplt+0x2a4>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d053      	beq.n	80072c6 <I2C_ITSlaveCplt+0x18a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a6f      	ldr	r2, [pc, #444]	@ (80073e4 <I2C_ITSlaveCplt+0x2a8>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d04d      	beq.n	80072c6 <I2C_ITSlaveCplt+0x18a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a6d      	ldr	r2, [pc, #436]	@ (80073e8 <I2C_ITSlaveCplt+0x2ac>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d047      	beq.n	80072c6 <I2C_ITSlaveCplt+0x18a>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a6b      	ldr	r2, [pc, #428]	@ (80073ec <I2C_ITSlaveCplt+0x2b0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d041      	beq.n	80072c6 <I2C_ITSlaveCplt+0x18a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a69      	ldr	r2, [pc, #420]	@ (80073f0 <I2C_ITSlaveCplt+0x2b4>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d03b      	beq.n	80072c6 <I2C_ITSlaveCplt+0x18a>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a67      	ldr	r2, [pc, #412]	@ (80073f4 <I2C_ITSlaveCplt+0x2b8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d035      	beq.n	80072c6 <I2C_ITSlaveCplt+0x18a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a65      	ldr	r2, [pc, #404]	@ (80073f8 <I2C_ITSlaveCplt+0x2bc>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d02f      	beq.n	80072c6 <I2C_ITSlaveCplt+0x18a>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a63      	ldr	r2, [pc, #396]	@ (80073fc <I2C_ITSlaveCplt+0x2c0>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d029      	beq.n	80072c6 <I2C_ITSlaveCplt+0x18a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a61      	ldr	r2, [pc, #388]	@ (8007400 <I2C_ITSlaveCplt+0x2c4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d023      	beq.n	80072c6 <I2C_ITSlaveCplt+0x18a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a5f      	ldr	r2, [pc, #380]	@ (8007404 <I2C_ITSlaveCplt+0x2c8>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d01d      	beq.n	80072c6 <I2C_ITSlaveCplt+0x18a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a5d      	ldr	r2, [pc, #372]	@ (8007408 <I2C_ITSlaveCplt+0x2cc>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d017      	beq.n	80072c6 <I2C_ITSlaveCplt+0x18a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a5b      	ldr	r2, [pc, #364]	@ (800740c <I2C_ITSlaveCplt+0x2d0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d011      	beq.n	80072c6 <I2C_ITSlaveCplt+0x18a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a59      	ldr	r2, [pc, #356]	@ (8007410 <I2C_ITSlaveCplt+0x2d4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d00b      	beq.n	80072c6 <I2C_ITSlaveCplt+0x18a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a57      	ldr	r2, [pc, #348]	@ (8007414 <I2C_ITSlaveCplt+0x2d8>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d005      	beq.n	80072c6 <I2C_ITSlaveCplt+0x18a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a55      	ldr	r2, [pc, #340]	@ (8007418 <I2C_ITSlaveCplt+0x2dc>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d105      	bne.n	80072d2 <I2C_ITSlaveCplt+0x196>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	e004      	b.n	80072dc <I2C_ITSlaveCplt+0x1a0>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80072e0:	e0a3      	b.n	800742a <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	0bdb      	lsrs	r3, r3, #15
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 809d 	beq.w	800742a <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80072fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 8090 	beq.w	800742a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a32      	ldr	r2, [pc, #200]	@ (80073dc <I2C_ITSlaveCplt+0x2a0>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d059      	beq.n	80073ca <I2C_ITSlaveCplt+0x28e>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a30      	ldr	r2, [pc, #192]	@ (80073e0 <I2C_ITSlaveCplt+0x2a4>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d053      	beq.n	80073ca <I2C_ITSlaveCplt+0x28e>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a2e      	ldr	r2, [pc, #184]	@ (80073e4 <I2C_ITSlaveCplt+0x2a8>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d04d      	beq.n	80073ca <I2C_ITSlaveCplt+0x28e>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a2c      	ldr	r2, [pc, #176]	@ (80073e8 <I2C_ITSlaveCplt+0x2ac>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d047      	beq.n	80073ca <I2C_ITSlaveCplt+0x28e>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a2a      	ldr	r2, [pc, #168]	@ (80073ec <I2C_ITSlaveCplt+0x2b0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d041      	beq.n	80073ca <I2C_ITSlaveCplt+0x28e>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a28      	ldr	r2, [pc, #160]	@ (80073f0 <I2C_ITSlaveCplt+0x2b4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d03b      	beq.n	80073ca <I2C_ITSlaveCplt+0x28e>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a26      	ldr	r2, [pc, #152]	@ (80073f4 <I2C_ITSlaveCplt+0x2b8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d035      	beq.n	80073ca <I2C_ITSlaveCplt+0x28e>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a24      	ldr	r2, [pc, #144]	@ (80073f8 <I2C_ITSlaveCplt+0x2bc>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d02f      	beq.n	80073ca <I2C_ITSlaveCplt+0x28e>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a22      	ldr	r2, [pc, #136]	@ (80073fc <I2C_ITSlaveCplt+0x2c0>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d029      	beq.n	80073ca <I2C_ITSlaveCplt+0x28e>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a20      	ldr	r2, [pc, #128]	@ (8007400 <I2C_ITSlaveCplt+0x2c4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d023      	beq.n	80073ca <I2C_ITSlaveCplt+0x28e>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a1e      	ldr	r2, [pc, #120]	@ (8007404 <I2C_ITSlaveCplt+0x2c8>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d01d      	beq.n	80073ca <I2C_ITSlaveCplt+0x28e>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a1c      	ldr	r2, [pc, #112]	@ (8007408 <I2C_ITSlaveCplt+0x2cc>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d017      	beq.n	80073ca <I2C_ITSlaveCplt+0x28e>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a1a      	ldr	r2, [pc, #104]	@ (800740c <I2C_ITSlaveCplt+0x2d0>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d011      	beq.n	80073ca <I2C_ITSlaveCplt+0x28e>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a18      	ldr	r2, [pc, #96]	@ (8007410 <I2C_ITSlaveCplt+0x2d4>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00b      	beq.n	80073ca <I2C_ITSlaveCplt+0x28e>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a16      	ldr	r2, [pc, #88]	@ (8007414 <I2C_ITSlaveCplt+0x2d8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d005      	beq.n	80073ca <I2C_ITSlaveCplt+0x28e>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a14      	ldr	r2, [pc, #80]	@ (8007418 <I2C_ITSlaveCplt+0x2dc>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d128      	bne.n	800741c <I2C_ITSlaveCplt+0x2e0>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	e027      	b.n	8007426 <I2C_ITSlaveCplt+0x2ea>
 80073d6:	bf00      	nop
 80073d8:	fe00e800 	.word	0xfe00e800
 80073dc:	40020010 	.word	0x40020010
 80073e0:	40020028 	.word	0x40020028
 80073e4:	40020040 	.word	0x40020040
 80073e8:	40020058 	.word	0x40020058
 80073ec:	40020070 	.word	0x40020070
 80073f0:	40020088 	.word	0x40020088
 80073f4:	400200a0 	.word	0x400200a0
 80073f8:	400200b8 	.word	0x400200b8
 80073fc:	40020410 	.word	0x40020410
 8007400:	40020428 	.word	0x40020428
 8007404:	40020440 	.word	0x40020440
 8007408:	40020458 	.word	0x40020458
 800740c:	40020470 	.word	0x40020470
 8007410:	40020488 	.word	0x40020488
 8007414:	400204a0 	.word	0x400204a0
 8007418:	400204b8 	.word	0x400204b8
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	b29b      	uxth	r3, r3
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	089b      	lsrs	r3, r3, #2
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	d020      	beq.n	8007478 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f023 0304 	bic.w	r3, r3, #4
 800743c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00c      	beq.n	8007478 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007462:	3b01      	subs	r3, #1
 8007464:	b29a      	uxth	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800746e:	b29b      	uxth	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800747c:	b29b      	uxth	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d005      	beq.n	800748e <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007486:	f043 0204 	orr.w	r2, r3, #4
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	091b      	lsrs	r3, r3, #4
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d04a      	beq.n	8007530 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	091b      	lsrs	r3, r3, #4
 800749e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d044      	beq.n	8007530 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d128      	bne.n	8007502 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b28      	cmp	r3, #40	@ 0x28
 80074ba:	d108      	bne.n	80074ce <I2C_ITSlaveCplt+0x392>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074c2:	d104      	bne.n	80074ce <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80074c4:	6979      	ldr	r1, [r7, #20]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f892 	bl	80075f0 <I2C_ITListenCplt>
 80074cc:	e030      	b.n	8007530 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b29      	cmp	r3, #41	@ 0x29
 80074d8:	d10e      	bne.n	80074f8 <I2C_ITSlaveCplt+0x3bc>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80074e0:	d00a      	beq.n	80074f8 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2210      	movs	r2, #16
 80074e8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f9ed 	bl	80078ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7ff fdc4 	bl	800707e <I2C_ITSlaveSeqCplt>
 80074f6:	e01b      	b.n	8007530 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2210      	movs	r2, #16
 80074fe:	61da      	str	r2, [r3, #28]
 8007500:	e016      	b.n	8007530 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2210      	movs	r2, #16
 8007508:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800750e:	f043 0204 	orr.w	r2, r3, #4
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <I2C_ITSlaveCplt+0x3e8>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007522:	d105      	bne.n	8007530 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f8b6 	bl	800769c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007542:	2b00      	cmp	r3, #0
 8007544:	d010      	beq.n	8007568 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f8a5 	bl	800769c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b28      	cmp	r3, #40	@ 0x28
 800755c:	d141      	bne.n	80075e2 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800755e:	6979      	ldr	r1, [r7, #20]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f845 	bl	80075f0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007566:	e03c      	b.n	80075e2 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007570:	d014      	beq.n	800759c <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff fd83 	bl	800707e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a1c      	ldr	r2, [pc, #112]	@ (80075ec <I2C_ITSlaveCplt+0x4b0>)
 800757c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff fbcc 	bl	8006d32 <HAL_I2C_ListenCpltCallback>
}
 800759a:	e022      	b.n	80075e2 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b22      	cmp	r3, #34	@ 0x22
 80075a6:	d10e      	bne.n	80075c6 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2220      	movs	r2, #32
 80075ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7ff fb9f 	bl	8006d02 <HAL_I2C_SlaveRxCpltCallback>
}
 80075c4:	e00d      	b.n	80075e2 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2220      	movs	r2, #32
 80075ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff fb86 	bl	8006cee <HAL_I2C_SlaveTxCpltCallback>
}
 80075e2:	bf00      	nop
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	ffff0000 	.word	0xffff0000

080075f0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a26      	ldr	r2, [pc, #152]	@ (8007698 <I2C_ITListenCplt+0xa8>)
 80075fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2220      	movs	r2, #32
 800760a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	089b      	lsrs	r3, r3, #2
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	d022      	beq.n	800766e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007644:	2b00      	cmp	r3, #0
 8007646:	d012      	beq.n	800766e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800764c:	3b01      	subs	r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007658:	b29b      	uxth	r3, r3
 800765a:	3b01      	subs	r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007666:	f043 0204 	orr.w	r2, r3, #4
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800766e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fbec 	bl	8007e50 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2210      	movs	r2, #16
 800767e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7ff fb52 	bl	8006d32 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800768e:	bf00      	nop
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	ffff0000 	.word	0xffff0000

0800769c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076ac:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a6d      	ldr	r2, [pc, #436]	@ (8007870 <I2C_ITError+0x1d4>)
 80076ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	431a      	orrs	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	2b28      	cmp	r3, #40	@ 0x28
 80076d2:	d005      	beq.n	80076e0 <I2C_ITError+0x44>
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	2b29      	cmp	r3, #41	@ 0x29
 80076d8:	d002      	beq.n	80076e0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80076de:	d10b      	bne.n	80076f8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80076e0:	2103      	movs	r1, #3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fbb4 	bl	8007e50 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2228      	movs	r2, #40	@ 0x28
 80076ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a60      	ldr	r2, [pc, #384]	@ (8007874 <I2C_ITError+0x1d8>)
 80076f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80076f6:	e030      	b.n	800775a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80076f8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fba7 	bl	8007e50 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f8e1 	bl	80078ca <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b60      	cmp	r3, #96	@ 0x60
 8007712:	d01f      	beq.n	8007754 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2220      	movs	r2, #32
 8007718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b20      	cmp	r3, #32
 8007728:	d114      	bne.n	8007754 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	f003 0310 	and.w	r3, r3, #16
 8007734:	2b10      	cmp	r3, #16
 8007736:	d109      	bne.n	800774c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2210      	movs	r2, #16
 800773e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007744:	f043 0204 	orr.w	r2, r3, #4
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2220      	movs	r2, #32
 8007752:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007764:	2b00      	cmp	r3, #0
 8007766:	d039      	beq.n	80077dc <I2C_ITError+0x140>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2b11      	cmp	r3, #17
 800776c:	d002      	beq.n	8007774 <I2C_ITError+0xd8>
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2b21      	cmp	r3, #33	@ 0x21
 8007772:	d133      	bne.n	80077dc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800777e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007782:	d107      	bne.n	8007794 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007792:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007798:	4618      	mov	r0, r3
 800779a:	f7fd fd13 	bl	80051c4 <HAL_DMA_GetState>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d017      	beq.n	80077d4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a8:	4a33      	ldr	r2, [pc, #204]	@ (8007878 <I2C_ITError+0x1dc>)
 80077aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fc fb93 	bl	8003ee4 <HAL_DMA_Abort_IT>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d04d      	beq.n	8007860 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80077ce:	4610      	mov	r0, r2
 80077d0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077d2:	e045      	b.n	8007860 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f851 	bl	800787c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077da:	e041      	b.n	8007860 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d039      	beq.n	8007858 <I2C_ITError+0x1bc>
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b12      	cmp	r3, #18
 80077e8:	d002      	beq.n	80077f0 <I2C_ITError+0x154>
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2b22      	cmp	r3, #34	@ 0x22
 80077ee:	d133      	bne.n	8007858 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077fe:	d107      	bne.n	8007810 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800780e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007814:	4618      	mov	r0, r3
 8007816:	f7fd fcd5 	bl	80051c4 <HAL_DMA_GetState>
 800781a:	4603      	mov	r3, r0
 800781c:	2b01      	cmp	r3, #1
 800781e:	d017      	beq.n	8007850 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007824:	4a14      	ldr	r2, [pc, #80]	@ (8007878 <I2C_ITError+0x1dc>)
 8007826:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007834:	4618      	mov	r0, r3
 8007836:	f7fc fb55 	bl	8003ee4 <HAL_DMA_Abort_IT>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d011      	beq.n	8007864 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800784a:	4610      	mov	r0, r2
 800784c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800784e:	e009      	b.n	8007864 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f813 	bl	800787c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007856:	e005      	b.n	8007864 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f80f 	bl	800787c <I2C_TreatErrorCallback>
  }
}
 800785e:	e002      	b.n	8007866 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007860:	bf00      	nop
 8007862:	e000      	b.n	8007866 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007864:	bf00      	nop
}
 8007866:	bf00      	nop
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	ffff0000 	.word	0xffff0000
 8007874:	08006d6f 	.word	0x08006d6f
 8007878:	08007913 	.word	0x08007913

0800787c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b60      	cmp	r3, #96	@ 0x60
 800788e:	d10e      	bne.n	80078ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2220      	movs	r2, #32
 8007894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7ff fa57 	bl	8006d5a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80078ac:	e009      	b.n	80078c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff fa42 	bl	8006d46 <HAL_I2C_ErrorCallback>
}
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d103      	bne.n	80078e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2200      	movs	r2, #0
 80078e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d007      	beq.n	8007906 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	699a      	ldr	r2, [r3, #24]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0201 	orr.w	r2, r2, #1
 8007904:	619a      	str	r2, [r3, #24]
  }
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792c:	2200      	movs	r2, #0
 800792e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800793c:	2200      	movs	r2, #0
 800793e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f7ff ff9b 	bl	800787c <I2C_TreatErrorCallback>
}
 8007946:	bf00      	nop
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	603b      	str	r3, [r7, #0]
 800795a:	4613      	mov	r3, r2
 800795c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800795e:	e03b      	b.n	80079d8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f961 	bl	8007c2c <I2C_IsErrorOccurred>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e041      	b.n	80079f8 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797a:	d02d      	beq.n	80079d8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800797c:	f7fa fd14 	bl	80023a8 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	429a      	cmp	r2, r3
 800798a:	d302      	bcc.n	8007992 <I2C_WaitOnFlagUntilTimeout+0x44>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d122      	bne.n	80079d8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	699a      	ldr	r2, [r3, #24]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	4013      	ands	r3, r2
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	429a      	cmp	r2, r3
 80079a0:	bf0c      	ite	eq
 80079a2:	2301      	moveq	r3, #1
 80079a4:	2300      	movne	r3, #0
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	461a      	mov	r2, r3
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d113      	bne.n	80079d8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079b4:	f043 0220 	orr.w	r2, r3, #32
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2220      	movs	r2, #32
 80079c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e00f      	b.n	80079f8 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699a      	ldr	r2, [r3, #24]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	4013      	ands	r3, r2
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	bf0c      	ite	eq
 80079e8:	2301      	moveq	r3, #1
 80079ea:	2300      	movne	r3, #0
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	461a      	mov	r2, r3
 80079f0:	79fb      	ldrb	r3, [r7, #7]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d0b4      	beq.n	8007960 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a0c:	e033      	b.n	8007a76 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	68b9      	ldr	r1, [r7, #8]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 f90a 	bl	8007c2c <I2C_IsErrorOccurred>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e031      	b.n	8007a86 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a28:	d025      	beq.n	8007a76 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a2a:	f7fa fcbd 	bl	80023a8 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d302      	bcc.n	8007a40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d11a      	bne.n	8007a76 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d013      	beq.n	8007a76 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a52:	f043 0220 	orr.w	r2, r3, #32
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e007      	b.n	8007a86 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d1c4      	bne.n	8007a0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b084      	sub	sp, #16
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	60f8      	str	r0, [r7, #12]
 8007a96:	60b9      	str	r1, [r7, #8]
 8007a98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a9a:	e02f      	b.n	8007afc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 f8c3 	bl	8007c2c <I2C_IsErrorOccurred>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e02d      	b.n	8007b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab0:	f7fa fc7a 	bl	80023a8 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d302      	bcc.n	8007ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d11a      	bne.n	8007afc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	2b20      	cmp	r3, #32
 8007ad2:	d013      	beq.n	8007afc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ad8:	f043 0220 	orr.w	r2, r3, #32
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e007      	b.n	8007b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b20      	cmp	r3, #32
 8007b08:	d1c8      	bne.n	8007a9c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007b24:	e071      	b.n	8007c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	68b9      	ldr	r1, [r7, #8]
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 f87e 	bl	8007c2c <I2C_IsErrorOccurred>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	f003 0320 	and.w	r3, r3, #32
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	d13b      	bne.n	8007bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d138      	bne.n	8007bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d105      	bne.n	8007b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	f003 0310 	and.w	r3, r3, #16
 8007b72:	2b10      	cmp	r3, #16
 8007b74:	d121      	bne.n	8007bba <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2210      	movs	r2, #16
 8007b7c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2204      	movs	r2, #4
 8007b82:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6859      	ldr	r1, [r3, #4]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	4b24      	ldr	r3, [pc, #144]	@ (8007c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8007b98:	400b      	ands	r3, r1
 8007b9a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	75fb      	strb	r3, [r7, #23]
 8007bb8:	e002      	b.n	8007bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007bc0:	f7fa fbf2 	bl	80023a8 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d302      	bcc.n	8007bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d119      	bne.n	8007c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d116      	bne.n	8007c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	f003 0304 	and.w	r3, r3, #4
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d00f      	beq.n	8007c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bee:	f043 0220 	orr.w	r2, r3, #32
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d002      	beq.n	8007c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d083      	beq.n	8007b26 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	fe00e800 	.word	0xfe00e800

08007c2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08a      	sub	sp, #40	@ 0x28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007c46:	2300      	movs	r3, #0
 8007c48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	f003 0310 	and.w	r3, r3, #16
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d068      	beq.n	8007d2a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2210      	movs	r2, #16
 8007c5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c60:	e049      	b.n	8007cf6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c68:	d045      	beq.n	8007cf6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c6a:	f7fa fb9d 	bl	80023a8 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d302      	bcc.n	8007c80 <I2C_IsErrorOccurred+0x54>
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d13a      	bne.n	8007cf6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca2:	d121      	bne.n	8007ce8 <I2C_IsErrorOccurred+0xbc>
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007caa:	d01d      	beq.n	8007ce8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007cac:	7cfb      	ldrb	r3, [r7, #19]
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	d01a      	beq.n	8007ce8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cc0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007cc2:	f7fa fb71 	bl	80023a8 <HAL_GetTick>
 8007cc6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cc8:	e00e      	b.n	8007ce8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007cca:	f7fa fb6d 	bl	80023a8 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	2b19      	cmp	r3, #25
 8007cd6:	d907      	bls.n	8007ce8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007cd8:	6a3b      	ldr	r3, [r7, #32]
 8007cda:	f043 0320 	orr.w	r3, r3, #32
 8007cde:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007ce6:	e006      	b.n	8007cf6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	f003 0320 	and.w	r3, r3, #32
 8007cf2:	2b20      	cmp	r3, #32
 8007cf4:	d1e9      	bne.n	8007cca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b20      	cmp	r3, #32
 8007d02:	d003      	beq.n	8007d0c <I2C_IsErrorOccurred+0xe0>
 8007d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d0aa      	beq.n	8007c62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d103      	bne.n	8007d1c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	f043 0304 	orr.w	r3, r3, #4
 8007d22:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00b      	beq.n	8007d54 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	f043 0301 	orr.w	r3, r3, #1
 8007d42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00b      	beq.n	8007d76 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	f043 0308 	orr.w	r3, r3, #8
 8007d64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007d6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00b      	beq.n	8007d98 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	f043 0302 	orr.w	r3, r3, #2
 8007d86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007d98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01c      	beq.n	8007dda <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f7ff fd92 	bl	80078ca <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6859      	ldr	r1, [r3, #4]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	4b0d      	ldr	r3, [pc, #52]	@ (8007de8 <I2C_IsErrorOccurred+0x1bc>)
 8007db2:	400b      	ands	r3, r1
 8007db4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007dda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3728      	adds	r7, #40	@ 0x28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	fe00e800 	.word	0xfe00e800

08007dec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	607b      	str	r3, [r7, #4]
 8007df6:	460b      	mov	r3, r1
 8007df8:	817b      	strh	r3, [r7, #10]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007dfe:	897b      	ldrh	r3, [r7, #10]
 8007e00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e04:	7a7b      	ldrb	r3, [r7, #9]
 8007e06:	041b      	lsls	r3, r3, #16
 8007e08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e0c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e1a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	0d5b      	lsrs	r3, r3, #21
 8007e26:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007e2a:	4b08      	ldr	r3, [pc, #32]	@ (8007e4c <I2C_TransferConfig+0x60>)
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	43db      	mvns	r3, r3
 8007e30:	ea02 0103 	and.w	r1, r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007e3e:	bf00      	nop
 8007e40:	371c      	adds	r7, #28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	03ff63ff 	.word	0x03ff63ff

08007e50 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007e60:	887b      	ldrh	r3, [r7, #2]
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00f      	beq.n	8007e8a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007e70:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007e7e:	2b28      	cmp	r3, #40	@ 0x28
 8007e80:	d003      	beq.n	8007e8a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007e88:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007e8a:	887b      	ldrh	r3, [r7, #2]
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00f      	beq.n	8007eb4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007e9a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007ea8:	2b28      	cmp	r3, #40	@ 0x28
 8007eaa:	d003      	beq.n	8007eb4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007eb2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007eb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	da03      	bge.n	8007ec4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007ec2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007ec4:	887b      	ldrh	r3, [r7, #2]
 8007ec6:	2b10      	cmp	r3, #16
 8007ec8:	d103      	bne.n	8007ed2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007ed0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007ed2:	887b      	ldrh	r3, [r7, #2]
 8007ed4:	2b20      	cmp	r3, #32
 8007ed6:	d103      	bne.n	8007ee0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f043 0320 	orr.w	r3, r3, #32
 8007ede:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007ee0:	887b      	ldrh	r3, [r7, #2]
 8007ee2:	2b40      	cmp	r3, #64	@ 0x40
 8007ee4:	d103      	bne.n	8007eee <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eec:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6819      	ldr	r1, [r3, #0]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	43da      	mvns	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	400a      	ands	r2, r1
 8007efe:	601a      	str	r2, [r3, #0]
}
 8007f00:	bf00      	nop
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b20      	cmp	r3, #32
 8007f20:	d138      	bne.n	8007f94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d101      	bne.n	8007f30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e032      	b.n	8007f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2224      	movs	r2, #36	@ 0x24
 8007f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f022 0201 	bic.w	r2, r2, #1
 8007f4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007f5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6819      	ldr	r1, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 0201 	orr.w	r2, r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2220      	movs	r2, #32
 8007f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	e000      	b.n	8007f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f94:	2302      	movs	r3, #2
  }
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b085      	sub	sp, #20
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b20      	cmp	r3, #32
 8007fb6:	d139      	bne.n	800802c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d101      	bne.n	8007fc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	e033      	b.n	800802e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2224      	movs	r2, #36	@ 0x24
 8007fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0201 	bic.w	r2, r2, #1
 8007fe4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007ff4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	021b      	lsls	r3, r3, #8
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f042 0201 	orr.w	r2, r2, #1
 8008016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2220      	movs	r2, #32
 800801c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	e000      	b.n	800802e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800802c:	2302      	movs	r3, #2
  }
}
 800802e:	4618      	mov	r0, r3
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b086      	sub	sp, #24
 800803e:	af02      	add	r7, sp, #8
 8008040:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e0fe      	b.n	800824a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	d106      	bne.n	8008066 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f00c fd63 	bl	8014b2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2203      	movs	r2, #3
 800806a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4618      	mov	r0, r3
 8008074:	f009 f91d 	bl	80112b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6818      	ldr	r0, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	7c1a      	ldrb	r2, [r3, #16]
 8008080:	f88d 2000 	strb.w	r2, [sp]
 8008084:	3304      	adds	r3, #4
 8008086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008088:	f008 ffee 	bl	8011068 <USB_CoreInit>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d005      	beq.n	800809e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2202      	movs	r2, #2
 8008096:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e0d5      	b.n	800824a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2100      	movs	r1, #0
 80080a4:	4618      	mov	r0, r3
 80080a6:	f009 f915 	bl	80112d4 <USB_SetCurrentMode>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e0c6      	b.n	800824a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080bc:	2300      	movs	r3, #0
 80080be:	73fb      	strb	r3, [r7, #15]
 80080c0:	e04a      	b.n	8008158 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80080c2:	7bfa      	ldrb	r2, [r7, #15]
 80080c4:	6879      	ldr	r1, [r7, #4]
 80080c6:	4613      	mov	r3, r2
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	440b      	add	r3, r1
 80080d0:	3315      	adds	r3, #21
 80080d2:	2201      	movs	r2, #1
 80080d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80080d6:	7bfa      	ldrb	r2, [r7, #15]
 80080d8:	6879      	ldr	r1, [r7, #4]
 80080da:	4613      	mov	r3, r2
 80080dc:	00db      	lsls	r3, r3, #3
 80080de:	4413      	add	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	440b      	add	r3, r1
 80080e4:	3314      	adds	r3, #20
 80080e6:	7bfa      	ldrb	r2, [r7, #15]
 80080e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80080ea:	7bfa      	ldrb	r2, [r7, #15]
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	b298      	uxth	r0, r3
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	4613      	mov	r3, r2
 80080f4:	00db      	lsls	r3, r3, #3
 80080f6:	4413      	add	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	440b      	add	r3, r1
 80080fc:	332e      	adds	r3, #46	@ 0x2e
 80080fe:	4602      	mov	r2, r0
 8008100:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008102:	7bfa      	ldrb	r2, [r7, #15]
 8008104:	6879      	ldr	r1, [r7, #4]
 8008106:	4613      	mov	r3, r2
 8008108:	00db      	lsls	r3, r3, #3
 800810a:	4413      	add	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	440b      	add	r3, r1
 8008110:	3318      	adds	r3, #24
 8008112:	2200      	movs	r2, #0
 8008114:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008116:	7bfa      	ldrb	r2, [r7, #15]
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	4613      	mov	r3, r2
 800811c:	00db      	lsls	r3, r3, #3
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	440b      	add	r3, r1
 8008124:	331c      	adds	r3, #28
 8008126:	2200      	movs	r2, #0
 8008128:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800812a:	7bfa      	ldrb	r2, [r7, #15]
 800812c:	6879      	ldr	r1, [r7, #4]
 800812e:	4613      	mov	r3, r2
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	4413      	add	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	440b      	add	r3, r1
 8008138:	3320      	adds	r3, #32
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800813e:	7bfa      	ldrb	r2, [r7, #15]
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	4613      	mov	r3, r2
 8008144:	00db      	lsls	r3, r3, #3
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	440b      	add	r3, r1
 800814c:	3324      	adds	r3, #36	@ 0x24
 800814e:	2200      	movs	r2, #0
 8008150:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	3301      	adds	r3, #1
 8008156:	73fb      	strb	r3, [r7, #15]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	791b      	ldrb	r3, [r3, #4]
 800815c:	7bfa      	ldrb	r2, [r7, #15]
 800815e:	429a      	cmp	r2, r3
 8008160:	d3af      	bcc.n	80080c2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]
 8008166:	e044      	b.n	80081f2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008168:	7bfa      	ldrb	r2, [r7, #15]
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	4613      	mov	r3, r2
 800816e:	00db      	lsls	r3, r3, #3
 8008170:	4413      	add	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	440b      	add	r3, r1
 8008176:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800817a:	2200      	movs	r2, #0
 800817c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800817e:	7bfa      	ldrb	r2, [r7, #15]
 8008180:	6879      	ldr	r1, [r7, #4]
 8008182:	4613      	mov	r3, r2
 8008184:	00db      	lsls	r3, r3, #3
 8008186:	4413      	add	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	440b      	add	r3, r1
 800818c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008190:	7bfa      	ldrb	r2, [r7, #15]
 8008192:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008194:	7bfa      	ldrb	r2, [r7, #15]
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	4613      	mov	r3, r2
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	440b      	add	r3, r1
 80081a2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80081a6:	2200      	movs	r2, #0
 80081a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80081aa:	7bfa      	ldrb	r2, [r7, #15]
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	4613      	mov	r3, r2
 80081b0:	00db      	lsls	r3, r3, #3
 80081b2:	4413      	add	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	440b      	add	r3, r1
 80081b8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80081bc:	2200      	movs	r2, #0
 80081be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80081c0:	7bfa      	ldrb	r2, [r7, #15]
 80081c2:	6879      	ldr	r1, [r7, #4]
 80081c4:	4613      	mov	r3, r2
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	4413      	add	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	440b      	add	r3, r1
 80081ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80081d6:	7bfa      	ldrb	r2, [r7, #15]
 80081d8:	6879      	ldr	r1, [r7, #4]
 80081da:	4613      	mov	r3, r2
 80081dc:	00db      	lsls	r3, r3, #3
 80081de:	4413      	add	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	440b      	add	r3, r1
 80081e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	3301      	adds	r3, #1
 80081f0:	73fb      	strb	r3, [r7, #15]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	791b      	ldrb	r3, [r3, #4]
 80081f6:	7bfa      	ldrb	r2, [r7, #15]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d3b5      	bcc.n	8008168 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	7c1a      	ldrb	r2, [r3, #16]
 8008204:	f88d 2000 	strb.w	r2, [sp]
 8008208:	3304      	adds	r3, #4
 800820a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800820c:	f009 f8ae 	bl	801136c <USB_DevInit>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d005      	beq.n	8008222 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2202      	movs	r2, #2
 800821a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e013      	b.n	800824a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	7b1b      	ldrb	r3, [r3, #12]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d102      	bne.n	800823e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 f96f 	bl	800951c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f00a f8f1 	bl	801242a <USB_DevDisconnect>

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_PCD_Start+0x1c>
 800826a:	2302      	movs	r3, #2
 800826c:	e022      	b.n	80082b4 <HAL_PCD_Start+0x62>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800827e:	2b00      	cmp	r3, #0
 8008280:	d009      	beq.n	8008296 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008286:	2b01      	cmp	r3, #1
 8008288:	d105      	bne.n	8008296 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800828e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4618      	mov	r0, r3
 800829c:	f008 fff8 	bl	8011290 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f00a f89f 	bl	80123e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80082bc:	b590      	push	{r4, r7, lr}
 80082be:	b08d      	sub	sp, #52	@ 0x34
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f00a f95d 	bl	8012592 <USB_GetMode>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f040 84b9 	bne.w	8008c52 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f00a f8c1 	bl	801246c <USB_ReadInterrupts>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 84af 	beq.w	8008c50 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	0a1b      	lsrs	r3, r3, #8
 80082fc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4618      	mov	r0, r3
 800830c:	f00a f8ae 	bl	801246c <USB_ReadInterrupts>
 8008310:	4603      	mov	r3, r0
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b02      	cmp	r3, #2
 8008318:	d107      	bne.n	800832a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	695a      	ldr	r2, [r3, #20]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f002 0202 	and.w	r2, r2, #2
 8008328:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4618      	mov	r0, r3
 8008330:	f00a f89c 	bl	801246c <USB_ReadInterrupts>
 8008334:	4603      	mov	r3, r0
 8008336:	f003 0310 	and.w	r3, r3, #16
 800833a:	2b10      	cmp	r3, #16
 800833c:	d161      	bne.n	8008402 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	699a      	ldr	r2, [r3, #24]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 0210 	bic.w	r2, r2, #16
 800834c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	f003 020f 	and.w	r2, r3, #15
 800835a:	4613      	mov	r3, r2
 800835c:	00db      	lsls	r3, r3, #3
 800835e:	4413      	add	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	4413      	add	r3, r2
 800836a:	3304      	adds	r3, #4
 800836c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008374:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008378:	d124      	bne.n	80083c4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008380:	4013      	ands	r3, r2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d035      	beq.n	80083f2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	091b      	lsrs	r3, r3, #4
 800838e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008394:	b29b      	uxth	r3, r3
 8008396:	461a      	mov	r2, r3
 8008398:	6a38      	ldr	r0, [r7, #32]
 800839a:	f009 fed3 	bl	8012144 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	091b      	lsrs	r3, r3, #4
 80083a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083aa:	441a      	add	r2, r3
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	695a      	ldr	r2, [r3, #20]
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	091b      	lsrs	r3, r3, #4
 80083b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083bc:	441a      	add	r2, r3
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	615a      	str	r2, [r3, #20]
 80083c2:	e016      	b.n	80083f2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80083ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80083ce:	d110      	bne.n	80083f2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80083d6:	2208      	movs	r2, #8
 80083d8:	4619      	mov	r1, r3
 80083da:	6a38      	ldr	r0, [r7, #32]
 80083dc:	f009 feb2 	bl	8012144 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	695a      	ldr	r2, [r3, #20]
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	091b      	lsrs	r3, r3, #4
 80083e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083ec:	441a      	add	r2, r3
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	699a      	ldr	r2, [r3, #24]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f042 0210 	orr.w	r2, r2, #16
 8008400:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4618      	mov	r0, r3
 8008408:	f00a f830 	bl	801246c <USB_ReadInterrupts>
 800840c:	4603      	mov	r3, r0
 800840e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008412:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008416:	f040 80a7 	bne.w	8008568 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4618      	mov	r0, r3
 8008424:	f00a f835 	bl	8012492 <USB_ReadDevAllOutEpInterrupt>
 8008428:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800842a:	e099      	b.n	8008560 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800842c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 808e 	beq.w	8008554 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800843e:	b2d2      	uxtb	r2, r2
 8008440:	4611      	mov	r1, r2
 8008442:	4618      	mov	r0, r3
 8008444:	f00a f859 	bl	80124fa <USB_ReadDevOutEPInterrupt>
 8008448:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00c      	beq.n	800846e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008460:	461a      	mov	r2, r3
 8008462:	2301      	movs	r3, #1
 8008464:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008466:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fed1 	bl	8009210 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f003 0308 	and.w	r3, r3, #8
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00c      	beq.n	8008492 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008484:	461a      	mov	r2, r3
 8008486:	2308      	movs	r3, #8
 8008488:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800848a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 ffa7 	bl	80093e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f003 0310 	and.w	r3, r3, #16
 8008498:	2b00      	cmp	r3, #0
 800849a:	d008      	beq.n	80084ae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084a8:	461a      	mov	r2, r3
 80084aa:	2310      	movs	r3, #16
 80084ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f003 0302 	and.w	r3, r3, #2
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d030      	beq.n	800851a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80084b8:	6a3b      	ldr	r3, [r7, #32]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084c0:	2b80      	cmp	r3, #128	@ 0x80
 80084c2:	d109      	bne.n	80084d8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	69fa      	ldr	r2, [r7, #28]
 80084ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80084d6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80084d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084da:	4613      	mov	r3, r2
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	4413      	add	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	4413      	add	r3, r2
 80084ea:	3304      	adds	r3, #4
 80084ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	78db      	ldrb	r3, [r3, #3]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d108      	bne.n	8008508 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2200      	movs	r2, #0
 80084fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80084fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f00c fc38 	bl	8014d78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008514:	461a      	mov	r2, r3
 8008516:	2302      	movs	r3, #2
 8008518:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f003 0320 	and.w	r3, r3, #32
 8008520:	2b00      	cmp	r3, #0
 8008522:	d008      	beq.n	8008536 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008530:	461a      	mov	r2, r3
 8008532:	2320      	movs	r3, #32
 8008534:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d009      	beq.n	8008554 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800854c:	461a      	mov	r2, r3
 800854e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008552:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008556:	3301      	adds	r3, #1
 8008558:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800855a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855c:	085b      	lsrs	r3, r3, #1
 800855e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008562:	2b00      	cmp	r3, #0
 8008564:	f47f af62 	bne.w	800842c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4618      	mov	r0, r3
 800856e:	f009 ff7d 	bl	801246c <USB_ReadInterrupts>
 8008572:	4603      	mov	r3, r0
 8008574:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008578:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800857c:	f040 80db 	bne.w	8008736 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f009 ff9e 	bl	80124c6 <USB_ReadDevAllInEpInterrupt>
 800858a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800858c:	2300      	movs	r3, #0
 800858e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8008590:	e0cd      	b.n	800872e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 80c2 	beq.w	8008722 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085a4:	b2d2      	uxtb	r2, r2
 80085a6:	4611      	mov	r1, r2
 80085a8:	4618      	mov	r0, r3
 80085aa:	f009 ffc4 	bl	8012536 <USB_ReadDevInEPInterrupt>
 80085ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d057      	beq.n	800866a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	f003 030f 	and.w	r3, r3, #15
 80085c0:	2201      	movs	r2, #1
 80085c2:	fa02 f303 	lsl.w	r3, r2, r3
 80085c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	43db      	mvns	r3, r3
 80085d4:	69f9      	ldr	r1, [r7, #28]
 80085d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085da:	4013      	ands	r3, r2
 80085dc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80085de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085ea:	461a      	mov	r2, r3
 80085ec:	2301      	movs	r3, #1
 80085ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	799b      	ldrb	r3, [r3, #6]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d132      	bne.n	800865e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085fc:	4613      	mov	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	3320      	adds	r3, #32
 8008608:	6819      	ldr	r1, [r3, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800860e:	4613      	mov	r3, r2
 8008610:	00db      	lsls	r3, r3, #3
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4403      	add	r3, r0
 8008618:	331c      	adds	r3, #28
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4419      	add	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008622:	4613      	mov	r3, r2
 8008624:	00db      	lsls	r3, r3, #3
 8008626:	4413      	add	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4403      	add	r3, r0
 800862c:	3320      	adds	r3, #32
 800862e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	d113      	bne.n	800865e <HAL_PCD_IRQHandler+0x3a2>
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800863a:	4613      	mov	r3, r2
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	4413      	add	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	440b      	add	r3, r1
 8008644:	3324      	adds	r3, #36	@ 0x24
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d108      	bne.n	800865e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6818      	ldr	r0, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008656:	461a      	mov	r2, r3
 8008658:	2101      	movs	r1, #1
 800865a:	f009 ffcd 	bl	80125f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800865e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008660:	b2db      	uxtb	r3, r3
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f00c fb02 	bl	8014c6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f003 0308 	and.w	r3, r3, #8
 8008670:	2b00      	cmp	r3, #0
 8008672:	d008      	beq.n	8008686 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008680:	461a      	mov	r2, r3
 8008682:	2308      	movs	r3, #8
 8008684:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f003 0310 	and.w	r3, r3, #16
 800868c:	2b00      	cmp	r3, #0
 800868e:	d008      	beq.n	80086a2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800869c:	461a      	mov	r2, r3
 800869e:	2310      	movs	r3, #16
 80086a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d008      	beq.n	80086be <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80086ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086b8:	461a      	mov	r2, r3
 80086ba:	2340      	movs	r3, #64	@ 0x40
 80086bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d023      	beq.n	8008710 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80086c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80086ca:	6a38      	ldr	r0, [r7, #32]
 80086cc:	f008 ffac 	bl	8011628 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80086d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086d2:	4613      	mov	r3, r2
 80086d4:	00db      	lsls	r3, r3, #3
 80086d6:	4413      	add	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	3310      	adds	r3, #16
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	4413      	add	r3, r2
 80086e0:	3304      	adds	r3, #4
 80086e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	78db      	ldrb	r3, [r3, #3]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d108      	bne.n	80086fe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	2200      	movs	r2, #0
 80086f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80086f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f00c fb4f 	bl	8014d9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80086fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	4413      	add	r3, r2
 8008706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800870a:	461a      	mov	r2, r3
 800870c:	2302      	movs	r3, #2
 800870e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800871a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fcea 	bl	80090f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008724:	3301      	adds	r3, #1
 8008726:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872a:	085b      	lsrs	r3, r3, #1
 800872c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800872e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008730:	2b00      	cmp	r3, #0
 8008732:	f47f af2e 	bne.w	8008592 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4618      	mov	r0, r3
 800873c:	f009 fe96 	bl	801246c <USB_ReadInterrupts>
 8008740:	4603      	mov	r3, r0
 8008742:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008746:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800874a:	d122      	bne.n	8008792 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	69fa      	ldr	r2, [r7, #28]
 8008756:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800875a:	f023 0301 	bic.w	r3, r3, #1
 800875e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008766:	2b01      	cmp	r3, #1
 8008768:	d108      	bne.n	800877c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008772:	2100      	movs	r1, #0
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fef5 	bl	8009564 <HAL_PCDEx_LPM_Callback>
 800877a:	e002      	b.n	8008782 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f00c faed 	bl	8014d5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	695a      	ldr	r2, [r3, #20]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8008790:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4618      	mov	r0, r3
 8008798:	f009 fe68 	bl	801246c <USB_ReadInterrupts>
 800879c:	4603      	mov	r3, r0
 800879e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087a6:	d112      	bne.n	80087ce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d102      	bne.n	80087be <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f00c faa9 	bl	8014d10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	695a      	ldr	r2, [r3, #20]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80087cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f009 fe4a 	bl	801246c <USB_ReadInterrupts>
 80087d8:	4603      	mov	r3, r0
 80087da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087e2:	d121      	bne.n	8008828 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	695a      	ldr	r2, [r3, #20]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80087f2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d111      	bne.n	8008822 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800880c:	089b      	lsrs	r3, r3, #2
 800880e:	f003 020f 	and.w	r2, r3, #15
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008818:	2101      	movs	r1, #1
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fea2 	bl	8009564 <HAL_PCDEx_LPM_Callback>
 8008820:	e002      	b.n	8008828 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f00c fa74 	bl	8014d10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4618      	mov	r0, r3
 800882e:	f009 fe1d 	bl	801246c <USB_ReadInterrupts>
 8008832:	4603      	mov	r3, r0
 8008834:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800883c:	f040 80b7 	bne.w	80089ae <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	69fa      	ldr	r2, [r7, #28]
 800884a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800884e:	f023 0301 	bic.w	r3, r3, #1
 8008852:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2110      	movs	r1, #16
 800885a:	4618      	mov	r0, r3
 800885c:	f008 fee4 	bl	8011628 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008860:	2300      	movs	r3, #0
 8008862:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008864:	e046      	b.n	80088f4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	4413      	add	r3, r2
 800886e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008872:	461a      	mov	r2, r3
 8008874:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008878:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800887a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800887c:	015a      	lsls	r2, r3, #5
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	4413      	add	r3, r2
 8008882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800888a:	0151      	lsls	r1, r2, #5
 800888c:	69fa      	ldr	r2, [r7, #28]
 800888e:	440a      	add	r2, r1
 8008890:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008894:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008898:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800889a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088a6:	461a      	mov	r2, r3
 80088a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80088ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80088ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088be:	0151      	lsls	r1, r2, #5
 80088c0:	69fa      	ldr	r2, [r7, #28]
 80088c2:	440a      	add	r2, r1
 80088c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80088cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d0:	015a      	lsls	r2, r3, #5
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	4413      	add	r3, r2
 80088d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088de:	0151      	lsls	r1, r2, #5
 80088e0:	69fa      	ldr	r2, [r7, #28]
 80088e2:	440a      	add	r2, r1
 80088e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80088ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f0:	3301      	adds	r3, #1
 80088f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	791b      	ldrb	r3, [r3, #4]
 80088f8:	461a      	mov	r2, r3
 80088fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d3b2      	bcc.n	8008866 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008906:	69db      	ldr	r3, [r3, #28]
 8008908:	69fa      	ldr	r2, [r7, #28]
 800890a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800890e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008912:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	7bdb      	ldrb	r3, [r3, #15]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d016      	beq.n	800894a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800892c:	f043 030b 	orr.w	r3, r3, #11
 8008930:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800893a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893c:	69fa      	ldr	r2, [r7, #28]
 800893e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008942:	f043 030b 	orr.w	r3, r3, #11
 8008946:	6453      	str	r3, [r2, #68]	@ 0x44
 8008948:	e015      	b.n	8008976 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008950:	695a      	ldr	r2, [r3, #20]
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008958:	4619      	mov	r1, r3
 800895a:	f242 032b 	movw	r3, #8235	@ 0x202b
 800895e:	4313      	orrs	r3, r2
 8008960:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	69fa      	ldr	r2, [r7, #28]
 800896c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008970:	f043 030b 	orr.w	r3, r3, #11
 8008974:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008984:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008988:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6818      	ldr	r0, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008998:	461a      	mov	r2, r3
 800899a:	f009 fe2d 	bl	80125f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	695a      	ldr	r2, [r3, #20]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80089ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f009 fd5a 	bl	801246c <USB_ReadInterrupts>
 80089b8:	4603      	mov	r3, r0
 80089ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80089be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089c2:	d123      	bne.n	8008a0c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f009 fdf1 	bl	80125b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f008 fea1 	bl	801171a <USB_GetDevSpeed>
 80089d8:	4603      	mov	r3, r0
 80089da:	461a      	mov	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681c      	ldr	r4, [r3, #0]
 80089e4:	f001 fd9e 	bl	800a524 <HAL_RCC_GetHCLKFreq>
 80089e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80089ee:	461a      	mov	r2, r3
 80089f0:	4620      	mov	r0, r4
 80089f2:	f008 fbab 	bl	801114c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f00c f961 	bl	8014cbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	695a      	ldr	r2, [r3, #20]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f009 fd2b 	bl	801246c <USB_ReadInterrupts>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f003 0308 	and.w	r3, r3, #8
 8008a1c:	2b08      	cmp	r3, #8
 8008a1e:	d10a      	bne.n	8008a36 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f00c f93e 	bl	8014ca2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	695a      	ldr	r2, [r3, #20]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f002 0208 	and.w	r2, r2, #8
 8008a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f009 fd16 	bl	801246c <USB_ReadInterrupts>
 8008a40:	4603      	mov	r3, r0
 8008a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a46:	2b80      	cmp	r3, #128	@ 0x80
 8008a48:	d123      	bne.n	8008a92 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a56:	2301      	movs	r3, #1
 8008a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a5a:	e014      	b.n	8008a86 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008a5c:	6879      	ldr	r1, [r7, #4]
 8008a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a60:	4613      	mov	r3, r2
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	4413      	add	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	440b      	add	r3, r1
 8008a6a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d105      	bne.n	8008a80 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fb0a 	bl	8009094 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a82:	3301      	adds	r3, #1
 8008a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	791b      	ldrb	r3, [r3, #4]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d3e4      	bcc.n	8008a5c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f009 fce8 	bl	801246c <USB_ReadInterrupts>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aa6:	d13c      	bne.n	8008b22 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8008aac:	e02b      	b.n	8008b06 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008abe:	6879      	ldr	r1, [r7, #4]
 8008ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	00db      	lsls	r3, r3, #3
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	440b      	add	r3, r1
 8008acc:	3318      	adds	r3, #24
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d115      	bne.n	8008b00 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008ad4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	da12      	bge.n	8008b00 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008ada:	6879      	ldr	r1, [r7, #4]
 8008adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ade:	4613      	mov	r3, r2
 8008ae0:	00db      	lsls	r3, r3, #3
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	440b      	add	r3, r1
 8008ae8:	3317      	adds	r3, #23
 8008aea:	2201      	movs	r2, #1
 8008aec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 faca 	bl	8009094 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	3301      	adds	r3, #1
 8008b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	791b      	ldrb	r3, [r3, #4]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d3cd      	bcc.n	8008aae <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	695a      	ldr	r2, [r3, #20]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f009 fca0 	bl	801246c <USB_ReadInterrupts>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b36:	d156      	bne.n	8008be6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b38:	2301      	movs	r3, #1
 8008b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b3c:	e045      	b.n	8008bca <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008b4e:	6879      	ldr	r1, [r7, #4]
 8008b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b52:	4613      	mov	r3, r2
 8008b54:	00db      	lsls	r3, r3, #3
 8008b56:	4413      	add	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	440b      	add	r3, r1
 8008b5c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d12e      	bne.n	8008bc4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008b66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	da2b      	bge.n	8008bc4 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	0c1a      	lsrs	r2, r3, #16
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008b76:	4053      	eors	r3, r2
 8008b78:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d121      	bne.n	8008bc4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b84:	4613      	mov	r3, r2
 8008b86:	00db      	lsls	r3, r3, #3
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	440b      	add	r3, r1
 8008b8e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008b92:	2201      	movs	r2, #1
 8008b94:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008ba2:	6a3b      	ldr	r3, [r7, #32]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10a      	bne.n	8008bc4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	69fa      	ldr	r2, [r7, #28]
 8008bb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008bc0:	6053      	str	r3, [r2, #4]
            break;
 8008bc2:	e008      	b.n	8008bd6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	791b      	ldrb	r3, [r3, #4]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d3b3      	bcc.n	8008b3e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	695a      	ldr	r2, [r3, #20]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f009 fc3e 	bl	801246c <USB_ReadInterrupts>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bfa:	d10a      	bne.n	8008c12 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f00c f8df 	bl	8014dc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	695a      	ldr	r2, [r3, #20]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008c10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f009 fc28 	bl	801246c <USB_ReadInterrupts>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	f003 0304 	and.w	r3, r3, #4
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	d115      	bne.n	8008c52 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	f003 0304 	and.w	r3, r3, #4
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f00c f8cf 	bl	8014ddc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6859      	ldr	r1, [r3, #4]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	605a      	str	r2, [r3, #4]
 8008c4e:	e000      	b.n	8008c52 <HAL_PCD_IRQHandler+0x996>
      return;
 8008c50:	bf00      	nop
    }
  }
}
 8008c52:	3734      	adds	r7, #52	@ 0x34
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd90      	pop	{r4, r7, pc}

08008c58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d101      	bne.n	8008c72 <HAL_PCD_SetAddress+0x1a>
 8008c6e:	2302      	movs	r3, #2
 8008c70:	e012      	b.n	8008c98 <HAL_PCD_SetAddress+0x40>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	78fa      	ldrb	r2, [r7, #3]
 8008c7e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	78fa      	ldrb	r2, [r7, #3]
 8008c86:	4611      	mov	r1, r2
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f009 fb87 	bl	801239c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	4608      	mov	r0, r1
 8008caa:	4611      	mov	r1, r2
 8008cac:	461a      	mov	r2, r3
 8008cae:	4603      	mov	r3, r0
 8008cb0:	70fb      	strb	r3, [r7, #3]
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	803b      	strh	r3, [r7, #0]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008cbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	da0f      	bge.n	8008ce6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cc6:	78fb      	ldrb	r3, [r7, #3]
 8008cc8:	f003 020f 	and.w	r2, r3, #15
 8008ccc:	4613      	mov	r3, r2
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	3310      	adds	r3, #16
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	4413      	add	r3, r2
 8008cda:	3304      	adds	r3, #4
 8008cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	705a      	strb	r2, [r3, #1]
 8008ce4:	e00f      	b.n	8008d06 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ce6:	78fb      	ldrb	r3, [r7, #3]
 8008ce8:	f003 020f 	and.w	r2, r3, #15
 8008cec:	4613      	mov	r3, r2
 8008cee:	00db      	lsls	r3, r3, #3
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008d06:	78fb      	ldrb	r3, [r7, #3]
 8008d08:	f003 030f 	and.w	r3, r3, #15
 8008d0c:	b2da      	uxtb	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008d12:	883b      	ldrh	r3, [r7, #0]
 8008d14:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	78ba      	ldrb	r2, [r7, #2]
 8008d20:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	785b      	ldrb	r3, [r3, #1]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d004      	beq.n	8008d34 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008d34:	78bb      	ldrb	r3, [r7, #2]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d102      	bne.n	8008d40 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d101      	bne.n	8008d4e <HAL_PCD_EP_Open+0xae>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e00e      	b.n	8008d6c <HAL_PCD_EP_Open+0xcc>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68f9      	ldr	r1, [r7, #12]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f008 fd01 	bl	8011764 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008d6a:	7afb      	ldrb	r3, [r7, #11]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	da0f      	bge.n	8008da8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d88:	78fb      	ldrb	r3, [r7, #3]
 8008d8a:	f003 020f 	and.w	r2, r3, #15
 8008d8e:	4613      	mov	r3, r2
 8008d90:	00db      	lsls	r3, r3, #3
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	3310      	adds	r3, #16
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2201      	movs	r2, #1
 8008da4:	705a      	strb	r2, [r3, #1]
 8008da6:	e00f      	b.n	8008dc8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008da8:	78fb      	ldrb	r3, [r7, #3]
 8008daa:	f003 020f 	and.w	r2, r3, #15
 8008dae:	4613      	mov	r3, r2
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	4413      	add	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	f003 030f 	and.w	r3, r3, #15
 8008dce:	b2da      	uxtb	r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d101      	bne.n	8008de2 <HAL_PCD_EP_Close+0x6e>
 8008dde:	2302      	movs	r3, #2
 8008de0:	e00e      	b.n	8008e00 <HAL_PCD_EP_Close+0x8c>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68f9      	ldr	r1, [r7, #12]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f008 fd3f 	bl	8011874 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	607a      	str	r2, [r7, #4]
 8008e12:	603b      	str	r3, [r7, #0]
 8008e14:	460b      	mov	r3, r1
 8008e16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e18:	7afb      	ldrb	r3, [r7, #11]
 8008e1a:	f003 020f 	and.w	r2, r3, #15
 8008e1e:	4613      	mov	r3, r2
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	4413      	add	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	3304      	adds	r3, #4
 8008e30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	683a      	ldr	r2, [r7, #0]
 8008e3c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2200      	movs	r2, #0
 8008e42:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	2200      	movs	r2, #0
 8008e48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e4a:	7afb      	ldrb	r3, [r7, #11]
 8008e4c:	f003 030f 	and.w	r3, r3, #15
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	799b      	ldrb	r3, [r3, #6]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d102      	bne.n	8008e64 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	799b      	ldrb	r3, [r3, #6]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	6979      	ldr	r1, [r7, #20]
 8008e70:	f008 fddc 	bl	8011a2c <USB_EPStartXfer>

  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3718      	adds	r7, #24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b083      	sub	sp, #12
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	460b      	mov	r3, r1
 8008e88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008e8a:	78fb      	ldrb	r3, [r7, #3]
 8008e8c:	f003 020f 	and.w	r2, r3, #15
 8008e90:	6879      	ldr	r1, [r7, #4]
 8008e92:	4613      	mov	r3, r2
 8008e94:	00db      	lsls	r3, r3, #3
 8008e96:	4413      	add	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	440b      	add	r3, r1
 8008e9c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008ea0:	681b      	ldr	r3, [r3, #0]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b086      	sub	sp, #24
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	60f8      	str	r0, [r7, #12]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ebe:	7afb      	ldrb	r3, [r7, #11]
 8008ec0:	f003 020f 	and.w	r2, r3, #15
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	00db      	lsls	r3, r3, #3
 8008ec8:	4413      	add	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	3310      	adds	r3, #16
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	2201      	movs	r2, #1
 8008eec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008eee:	7afb      	ldrb	r3, [r7, #11]
 8008ef0:	f003 030f 	and.w	r3, r3, #15
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	799b      	ldrb	r3, [r3, #6]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d102      	bne.n	8008f08 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6818      	ldr	r0, [r3, #0]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	799b      	ldrb	r3, [r3, #6]
 8008f10:	461a      	mov	r2, r3
 8008f12:	6979      	ldr	r1, [r7, #20]
 8008f14:	f008 fd8a 	bl	8011a2c <USB_EPStartXfer>

  return HAL_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008f2e:	78fb      	ldrb	r3, [r7, #3]
 8008f30:	f003 030f 	and.w	r3, r3, #15
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	7912      	ldrb	r2, [r2, #4]
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d901      	bls.n	8008f40 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e04f      	b.n	8008fe0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	da0f      	bge.n	8008f68 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f48:	78fb      	ldrb	r3, [r7, #3]
 8008f4a:	f003 020f 	and.w	r2, r3, #15
 8008f4e:	4613      	mov	r3, r2
 8008f50:	00db      	lsls	r3, r3, #3
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	3310      	adds	r3, #16
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2201      	movs	r2, #1
 8008f64:	705a      	strb	r2, [r3, #1]
 8008f66:	e00d      	b.n	8008f84 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008f68:	78fa      	ldrb	r2, [r7, #3]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	00db      	lsls	r3, r3, #3
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	4413      	add	r3, r2
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2201      	movs	r2, #1
 8008f88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	f003 030f 	and.w	r3, r3, #15
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_PCD_EP_SetStall+0x82>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e01d      	b.n	8008fe0 <HAL_PCD_EP_SetStall+0xbe>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68f9      	ldr	r1, [r7, #12]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f009 f91e 	bl	80121f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	f003 030f 	and.w	r3, r3, #15
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d109      	bne.n	8008fd6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6818      	ldr	r0, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	7999      	ldrb	r1, [r3, #6]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	f009 fb11 	bl	80125f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	f003 030f 	and.w	r3, r3, #15
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	7912      	ldrb	r2, [r2, #4]
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d901      	bls.n	8009006 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e042      	b.n	800908c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800900a:	2b00      	cmp	r3, #0
 800900c:	da0f      	bge.n	800902e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800900e:	78fb      	ldrb	r3, [r7, #3]
 8009010:	f003 020f 	and.w	r2, r3, #15
 8009014:	4613      	mov	r3, r2
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	4413      	add	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	3310      	adds	r3, #16
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	4413      	add	r3, r2
 8009022:	3304      	adds	r3, #4
 8009024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2201      	movs	r2, #1
 800902a:	705a      	strb	r2, [r3, #1]
 800902c:	e00f      	b.n	800904e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800902e:	78fb      	ldrb	r3, [r7, #3]
 8009030:	f003 020f 	and.w	r2, r3, #15
 8009034:	4613      	mov	r3, r2
 8009036:	00db      	lsls	r3, r3, #3
 8009038:	4413      	add	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	4413      	add	r3, r2
 8009044:	3304      	adds	r3, #4
 8009046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	f003 030f 	and.w	r3, r3, #15
 800905a:	b2da      	uxtb	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009066:	2b01      	cmp	r3, #1
 8009068:	d101      	bne.n	800906e <HAL_PCD_EP_ClrStall+0x86>
 800906a:	2302      	movs	r3, #2
 800906c:	e00e      	b.n	800908c <HAL_PCD_EP_ClrStall+0xa4>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68f9      	ldr	r1, [r7, #12]
 800907c:	4618      	mov	r0, r3
 800907e:	f009 f927 	bl	80122d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80090a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	da0c      	bge.n	80090c2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090a8:	78fb      	ldrb	r3, [r7, #3]
 80090aa:	f003 020f 	and.w	r2, r3, #15
 80090ae:	4613      	mov	r3, r2
 80090b0:	00db      	lsls	r3, r3, #3
 80090b2:	4413      	add	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	3310      	adds	r3, #16
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	4413      	add	r3, r2
 80090bc:	3304      	adds	r3, #4
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	e00c      	b.n	80090dc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090c2:	78fb      	ldrb	r3, [r7, #3]
 80090c4:	f003 020f 	and.w	r2, r3, #15
 80090c8:	4613      	mov	r3, r2
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	4413      	add	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	4413      	add	r3, r2
 80090d8:	3304      	adds	r3, #4
 80090da:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68f9      	ldr	r1, [r7, #12]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f008 ff46 	bl	8011f74 <USB_EPStopXfer>
 80090e8:	4603      	mov	r3, r0
 80090ea:	72fb      	strb	r3, [r7, #11]

  return ret;
 80090ec:	7afb      	ldrb	r3, [r7, #11]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b08a      	sub	sp, #40	@ 0x28
 80090fa:	af02      	add	r7, sp, #8
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	4613      	mov	r3, r2
 800910e:	00db      	lsls	r3, r3, #3
 8009110:	4413      	add	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	3310      	adds	r3, #16
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	4413      	add	r3, r2
 800911a:	3304      	adds	r3, #4
 800911c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	695a      	ldr	r2, [r3, #20]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	429a      	cmp	r2, r3
 8009128:	d901      	bls.n	800912e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e06b      	b.n	8009206 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	691a      	ldr	r2, [r3, #16]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	69fa      	ldr	r2, [r7, #28]
 8009140:	429a      	cmp	r2, r3
 8009142:	d902      	bls.n	800914a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	3303      	adds	r3, #3
 800914e:	089b      	lsrs	r3, r3, #2
 8009150:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009152:	e02a      	b.n	80091aa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	691a      	ldr	r2, [r3, #16]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	695b      	ldr	r3, [r3, #20]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	69fa      	ldr	r2, [r7, #28]
 8009166:	429a      	cmp	r2, r3
 8009168:	d902      	bls.n	8009170 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	3303      	adds	r3, #3
 8009174:	089b      	lsrs	r3, r3, #2
 8009176:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	68d9      	ldr	r1, [r3, #12]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	b2da      	uxtb	r2, r3
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	4603      	mov	r3, r0
 800918c:	6978      	ldr	r0, [r7, #20]
 800918e:	f008 ff9b 	bl	80120c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	68da      	ldr	r2, [r3, #12]
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	441a      	add	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	695a      	ldr	r2, [r3, #20]
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	441a      	add	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	015a      	lsls	r2, r3, #5
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	4413      	add	r3, r2
 80091b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80091ba:	69ba      	ldr	r2, [r7, #24]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d809      	bhi.n	80091d4 <PCD_WriteEmptyTxFifo+0xde>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	695a      	ldr	r2, [r3, #20]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d203      	bcs.n	80091d4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1bf      	bne.n	8009154 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	691a      	ldr	r2, [r3, #16]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d811      	bhi.n	8009204 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	f003 030f 	and.w	r3, r3, #15
 80091e6:	2201      	movs	r2, #1
 80091e8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	43db      	mvns	r3, r3
 80091fa:	6939      	ldr	r1, [r7, #16]
 80091fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009200:	4013      	ands	r3, r2
 8009202:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3720      	adds	r7, #32
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
	...

08009210 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	333c      	adds	r3, #60	@ 0x3c
 8009228:	3304      	adds	r3, #4
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	4413      	add	r3, r2
 8009236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	799b      	ldrb	r3, [r3, #6]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d17b      	bne.n	800933e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	f003 0308 	and.w	r3, r3, #8
 800924c:	2b00      	cmp	r3, #0
 800924e:	d015      	beq.n	800927c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	4a61      	ldr	r2, [pc, #388]	@ (80093d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009254:	4293      	cmp	r3, r2
 8009256:	f240 80b9 	bls.w	80093cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 80b3 	beq.w	80093cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009272:	461a      	mov	r2, r3
 8009274:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009278:	6093      	str	r3, [r2, #8]
 800927a:	e0a7      	b.n	80093cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	f003 0320 	and.w	r3, r3, #32
 8009282:	2b00      	cmp	r3, #0
 8009284:	d009      	beq.n	800929a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	015a      	lsls	r2, r3, #5
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	4413      	add	r3, r2
 800928e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009292:	461a      	mov	r2, r3
 8009294:	2320      	movs	r3, #32
 8009296:	6093      	str	r3, [r2, #8]
 8009298:	e098      	b.n	80093cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f040 8093 	bne.w	80093cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	4a4b      	ldr	r2, [pc, #300]	@ (80093d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d90f      	bls.n	80092ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00a      	beq.n	80092ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092c4:	461a      	mov	r2, r3
 80092c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092ca:	6093      	str	r3, [r2, #8]
 80092cc:	e07e      	b.n	80093cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	4613      	mov	r3, r2
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	4413      	add	r3, r2
 80092e0:	3304      	adds	r3, #4
 80092e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6a1a      	ldr	r2, [r3, #32]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	0159      	lsls	r1, r3, #5
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	440b      	add	r3, r1
 80092f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092fa:	1ad2      	subs	r2, r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d114      	bne.n	8009330 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d109      	bne.n	8009322 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6818      	ldr	r0, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009318:	461a      	mov	r2, r3
 800931a:	2101      	movs	r1, #1
 800931c:	f009 f96c 	bl	80125f8 <USB_EP0_OutStart>
 8009320:	e006      	b.n	8009330 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	441a      	add	r2, r3
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f00b fc7e 	bl	8014c38 <HAL_PCD_DataOutStageCallback>
 800933c:	e046      	b.n	80093cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	4a26      	ldr	r2, [pc, #152]	@ (80093dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d124      	bne.n	8009390 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00a      	beq.n	8009366 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800935c:	461a      	mov	r2, r3
 800935e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009362:	6093      	str	r3, [r2, #8]
 8009364:	e032      	b.n	80093cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	f003 0320 	and.w	r3, r3, #32
 800936c:	2b00      	cmp	r3, #0
 800936e:	d008      	beq.n	8009382 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800937c:	461a      	mov	r2, r3
 800937e:	2320      	movs	r3, #32
 8009380:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	b2db      	uxtb	r3, r3
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f00b fc55 	bl	8014c38 <HAL_PCD_DataOutStageCallback>
 800938e:	e01d      	b.n	80093cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d114      	bne.n	80093c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	683a      	ldr	r2, [r7, #0]
 800939a:	4613      	mov	r3, r2
 800939c:	00db      	lsls	r3, r3, #3
 800939e:	4413      	add	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	440b      	add	r3, r1
 80093a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d108      	bne.n	80093c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6818      	ldr	r0, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80093b8:	461a      	mov	r2, r3
 80093ba:	2100      	movs	r1, #0
 80093bc:	f009 f91c 	bl	80125f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f00b fc36 	bl	8014c38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3720      	adds	r7, #32
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	4f54300a 	.word	0x4f54300a
 80093dc:	4f54310a 	.word	0x4f54310a

080093e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	333c      	adds	r3, #60	@ 0x3c
 80093f8:	3304      	adds	r3, #4
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	015a      	lsls	r2, r3, #5
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	4413      	add	r3, r2
 8009406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	4a15      	ldr	r2, [pc, #84]	@ (8009468 <PCD_EP_OutSetupPacket_int+0x88>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d90e      	bls.n	8009434 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800941c:	2b00      	cmp	r3, #0
 800941e:	d009      	beq.n	8009434 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	015a      	lsls	r2, r3, #5
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	4413      	add	r3, r2
 8009428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800942c:	461a      	mov	r2, r3
 800942e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009432:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f00b fbed 	bl	8014c14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	4a0a      	ldr	r2, [pc, #40]	@ (8009468 <PCD_EP_OutSetupPacket_int+0x88>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d90c      	bls.n	800945c <PCD_EP_OutSetupPacket_int+0x7c>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	799b      	ldrb	r3, [r3, #6]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d108      	bne.n	800945c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6818      	ldr	r0, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009454:	461a      	mov	r2, r3
 8009456:	2101      	movs	r1, #1
 8009458:	f009 f8ce 	bl	80125f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	4f54300a 	.word	0x4f54300a

0800946c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	70fb      	strb	r3, [r7, #3]
 8009478:	4613      	mov	r3, r2
 800947a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009482:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009484:	78fb      	ldrb	r3, [r7, #3]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d107      	bne.n	800949a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800948a:	883b      	ldrh	r3, [r7, #0]
 800948c:	0419      	lsls	r1, r3, #16
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	430a      	orrs	r2, r1
 8009496:	629a      	str	r2, [r3, #40]	@ 0x28
 8009498:	e028      	b.n	80094ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a0:	0c1b      	lsrs	r3, r3, #16
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	4413      	add	r3, r2
 80094a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80094a8:	2300      	movs	r3, #0
 80094aa:	73fb      	strb	r3, [r7, #15]
 80094ac:	e00d      	b.n	80094ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
 80094b4:	3340      	adds	r3, #64	@ 0x40
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	0c1b      	lsrs	r3, r3, #16
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	4413      	add	r3, r2
 80094c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	3301      	adds	r3, #1
 80094c8:	73fb      	strb	r3, [r7, #15]
 80094ca:	7bfa      	ldrb	r2, [r7, #15]
 80094cc:	78fb      	ldrb	r3, [r7, #3]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d3ec      	bcc.n	80094ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80094d4:	883b      	ldrh	r3, [r7, #0]
 80094d6:	0418      	lsls	r0, r3, #16
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6819      	ldr	r1, [r3, #0]
 80094dc:	78fb      	ldrb	r3, [r7, #3]
 80094de:	3b01      	subs	r3, #1
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	4302      	orrs	r2, r0
 80094e4:	3340      	adds	r3, #64	@ 0x40
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	440b      	add	r3, r1
 80094ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b083      	sub	sp, #12
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	887a      	ldrh	r2, [r7, #2]
 800950c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800954a:	4b05      	ldr	r3, [pc, #20]	@ (8009560 <HAL_PCDEx_ActivateLPM+0x44>)
 800954c:	4313      	orrs	r3, r2
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	10000003 	.word	0x10000003

08009564 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009584:	4b19      	ldr	r3, [pc, #100]	@ (80095ec <HAL_PWREx_ConfigSupply+0x70>)
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	f003 0304 	and.w	r3, r3, #4
 800958c:	2b04      	cmp	r3, #4
 800958e:	d00a      	beq.n	80095a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009590:	4b16      	ldr	r3, [pc, #88]	@ (80095ec <HAL_PWREx_ConfigSupply+0x70>)
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	f003 0307 	and.w	r3, r3, #7
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	429a      	cmp	r2, r3
 800959c:	d001      	beq.n	80095a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e01f      	b.n	80095e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	e01d      	b.n	80095e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80095a6:	4b11      	ldr	r3, [pc, #68]	@ (80095ec <HAL_PWREx_ConfigSupply+0x70>)
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f023 0207 	bic.w	r2, r3, #7
 80095ae:	490f      	ldr	r1, [pc, #60]	@ (80095ec <HAL_PWREx_ConfigSupply+0x70>)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80095b6:	f7f8 fef7 	bl	80023a8 <HAL_GetTick>
 80095ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80095bc:	e009      	b.n	80095d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80095be:	f7f8 fef3 	bl	80023a8 <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80095cc:	d901      	bls.n	80095d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e007      	b.n	80095e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80095d2:	4b06      	ldr	r3, [pc, #24]	@ (80095ec <HAL_PWREx_ConfigSupply+0x70>)
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095de:	d1ee      	bne.n	80095be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	58024800 	.word	0x58024800

080095f0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80095f0:	b480      	push	{r7}
 80095f2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80095f4:	4b05      	ldr	r3, [pc, #20]	@ (800960c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	4a04      	ldr	r2, [pc, #16]	@ (800960c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80095fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80095fe:	60d3      	str	r3, [r2, #12]
}
 8009600:	bf00      	nop
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	58024800 	.word	0x58024800

08009610 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b08c      	sub	sp, #48	@ 0x30
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d102      	bne.n	8009624 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	f000 bc48 	b.w	8009eb4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 0301 	and.w	r3, r3, #1
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 8088 	beq.w	8009742 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009632:	4b99      	ldr	r3, [pc, #612]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800963a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800963c:	4b96      	ldr	r3, [pc, #600]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 800963e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009640:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009644:	2b10      	cmp	r3, #16
 8009646:	d007      	beq.n	8009658 <HAL_RCC_OscConfig+0x48>
 8009648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964a:	2b18      	cmp	r3, #24
 800964c:	d111      	bne.n	8009672 <HAL_RCC_OscConfig+0x62>
 800964e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009650:	f003 0303 	and.w	r3, r3, #3
 8009654:	2b02      	cmp	r3, #2
 8009656:	d10c      	bne.n	8009672 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009658:	4b8f      	ldr	r3, [pc, #572]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d06d      	beq.n	8009740 <HAL_RCC_OscConfig+0x130>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d169      	bne.n	8009740 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	f000 bc21 	b.w	8009eb4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800967a:	d106      	bne.n	800968a <HAL_RCC_OscConfig+0x7a>
 800967c:	4b86      	ldr	r3, [pc, #536]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a85      	ldr	r2, [pc, #532]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	e02e      	b.n	80096e8 <HAL_RCC_OscConfig+0xd8>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10c      	bne.n	80096ac <HAL_RCC_OscConfig+0x9c>
 8009692:	4b81      	ldr	r3, [pc, #516]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a80      	ldr	r2, [pc, #512]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800969c:	6013      	str	r3, [r2, #0]
 800969e:	4b7e      	ldr	r3, [pc, #504]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a7d      	ldr	r2, [pc, #500]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 80096a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	e01d      	b.n	80096e8 <HAL_RCC_OscConfig+0xd8>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096b4:	d10c      	bne.n	80096d0 <HAL_RCC_OscConfig+0xc0>
 80096b6:	4b78      	ldr	r3, [pc, #480]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a77      	ldr	r2, [pc, #476]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 80096bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80096c0:	6013      	str	r3, [r2, #0]
 80096c2:	4b75      	ldr	r3, [pc, #468]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a74      	ldr	r2, [pc, #464]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 80096c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096cc:	6013      	str	r3, [r2, #0]
 80096ce:	e00b      	b.n	80096e8 <HAL_RCC_OscConfig+0xd8>
 80096d0:	4b71      	ldr	r3, [pc, #452]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a70      	ldr	r2, [pc, #448]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 80096d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096da:	6013      	str	r3, [r2, #0]
 80096dc:	4b6e      	ldr	r3, [pc, #440]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a6d      	ldr	r2, [pc, #436]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 80096e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80096e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d013      	beq.n	8009718 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096f0:	f7f8 fe5a 	bl	80023a8 <HAL_GetTick>
 80096f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096f6:	e008      	b.n	800970a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096f8:	f7f8 fe56 	bl	80023a8 <HAL_GetTick>
 80096fc:	4602      	mov	r2, r0
 80096fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	2b64      	cmp	r3, #100	@ 0x64
 8009704:	d901      	bls.n	800970a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e3d4      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800970a:	4b63      	ldr	r3, [pc, #396]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009712:	2b00      	cmp	r3, #0
 8009714:	d0f0      	beq.n	80096f8 <HAL_RCC_OscConfig+0xe8>
 8009716:	e014      	b.n	8009742 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009718:	f7f8 fe46 	bl	80023a8 <HAL_GetTick>
 800971c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800971e:	e008      	b.n	8009732 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009720:	f7f8 fe42 	bl	80023a8 <HAL_GetTick>
 8009724:	4602      	mov	r2, r0
 8009726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	2b64      	cmp	r3, #100	@ 0x64
 800972c:	d901      	bls.n	8009732 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800972e:	2303      	movs	r3, #3
 8009730:	e3c0      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009732:	4b59      	ldr	r3, [pc, #356]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1f0      	bne.n	8009720 <HAL_RCC_OscConfig+0x110>
 800973e:	e000      	b.n	8009742 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0302 	and.w	r3, r3, #2
 800974a:	2b00      	cmp	r3, #0
 800974c:	f000 80ca 	beq.w	80098e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009750:	4b51      	ldr	r3, [pc, #324]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009758:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800975a:	4b4f      	ldr	r3, [pc, #316]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 800975c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800975e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d007      	beq.n	8009776 <HAL_RCC_OscConfig+0x166>
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	2b18      	cmp	r3, #24
 800976a:	d156      	bne.n	800981a <HAL_RCC_OscConfig+0x20a>
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	f003 0303 	and.w	r3, r3, #3
 8009772:	2b00      	cmp	r3, #0
 8009774:	d151      	bne.n	800981a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009776:	4b48      	ldr	r3, [pc, #288]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0304 	and.w	r3, r3, #4
 800977e:	2b00      	cmp	r3, #0
 8009780:	d005      	beq.n	800978e <HAL_RCC_OscConfig+0x17e>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e392      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800978e:	4b42      	ldr	r3, [pc, #264]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f023 0219 	bic.w	r2, r3, #25
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	493f      	ldr	r1, [pc, #252]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 800979c:	4313      	orrs	r3, r2
 800979e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097a0:	f7f8 fe02 	bl	80023a8 <HAL_GetTick>
 80097a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097a6:	e008      	b.n	80097ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097a8:	f7f8 fdfe 	bl	80023a8 <HAL_GetTick>
 80097ac:	4602      	mov	r2, r0
 80097ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d901      	bls.n	80097ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80097b6:	2303      	movs	r3, #3
 80097b8:	e37c      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097ba:	4b37      	ldr	r3, [pc, #220]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 0304 	and.w	r3, r3, #4
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0f0      	beq.n	80097a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097c6:	f7f8 fe1f 	bl	8002408 <HAL_GetREVID>
 80097ca:	4603      	mov	r3, r0
 80097cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d817      	bhi.n	8009804 <HAL_RCC_OscConfig+0x1f4>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	2b40      	cmp	r3, #64	@ 0x40
 80097da:	d108      	bne.n	80097ee <HAL_RCC_OscConfig+0x1de>
 80097dc:	4b2e      	ldr	r3, [pc, #184]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80097e4:	4a2c      	ldr	r2, [pc, #176]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 80097e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80097ec:	e07a      	b.n	80098e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097ee:	4b2a      	ldr	r3, [pc, #168]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	031b      	lsls	r3, r3, #12
 80097fc:	4926      	ldr	r1, [pc, #152]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009802:	e06f      	b.n	80098e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009804:	4b24      	ldr	r3, [pc, #144]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	061b      	lsls	r3, r3, #24
 8009812:	4921      	ldr	r1, [pc, #132]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009814:	4313      	orrs	r3, r2
 8009816:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009818:	e064      	b.n	80098e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d047      	beq.n	80098b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009822:	4b1d      	ldr	r3, [pc, #116]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f023 0219 	bic.w	r2, r3, #25
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	491a      	ldr	r1, [pc, #104]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009830:	4313      	orrs	r3, r2
 8009832:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009834:	f7f8 fdb8 	bl	80023a8 <HAL_GetTick>
 8009838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800983a:	e008      	b.n	800984e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800983c:	f7f8 fdb4 	bl	80023a8 <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	2b02      	cmp	r3, #2
 8009848:	d901      	bls.n	800984e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e332      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800984e:	4b12      	ldr	r3, [pc, #72]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0304 	and.w	r3, r3, #4
 8009856:	2b00      	cmp	r3, #0
 8009858:	d0f0      	beq.n	800983c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800985a:	f7f8 fdd5 	bl	8002408 <HAL_GetREVID>
 800985e:	4603      	mov	r3, r0
 8009860:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009864:	4293      	cmp	r3, r2
 8009866:	d819      	bhi.n	800989c <HAL_RCC_OscConfig+0x28c>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	2b40      	cmp	r3, #64	@ 0x40
 800986e:	d108      	bne.n	8009882 <HAL_RCC_OscConfig+0x272>
 8009870:	4b09      	ldr	r3, [pc, #36]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009878:	4a07      	ldr	r2, [pc, #28]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 800987a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800987e:	6053      	str	r3, [r2, #4]
 8009880:	e030      	b.n	80098e4 <HAL_RCC_OscConfig+0x2d4>
 8009882:	4b05      	ldr	r3, [pc, #20]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	031b      	lsls	r3, r3, #12
 8009890:	4901      	ldr	r1, [pc, #4]	@ (8009898 <HAL_RCC_OscConfig+0x288>)
 8009892:	4313      	orrs	r3, r2
 8009894:	604b      	str	r3, [r1, #4]
 8009896:	e025      	b.n	80098e4 <HAL_RCC_OscConfig+0x2d4>
 8009898:	58024400 	.word	0x58024400
 800989c:	4b9a      	ldr	r3, [pc, #616]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	061b      	lsls	r3, r3, #24
 80098aa:	4997      	ldr	r1, [pc, #604]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 80098ac:	4313      	orrs	r3, r2
 80098ae:	604b      	str	r3, [r1, #4]
 80098b0:	e018      	b.n	80098e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098b2:	4b95      	ldr	r3, [pc, #596]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a94      	ldr	r2, [pc, #592]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 80098b8:	f023 0301 	bic.w	r3, r3, #1
 80098bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098be:	f7f8 fd73 	bl	80023a8 <HAL_GetTick>
 80098c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80098c4:	e008      	b.n	80098d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098c6:	f7f8 fd6f 	bl	80023a8 <HAL_GetTick>
 80098ca:	4602      	mov	r2, r0
 80098cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d901      	bls.n	80098d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e2ed      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80098d8:	4b8b      	ldr	r3, [pc, #556]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0304 	and.w	r3, r3, #4
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1f0      	bne.n	80098c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0310 	and.w	r3, r3, #16
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 80a9 	beq.w	8009a44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098f2:	4b85      	ldr	r3, [pc, #532]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098fc:	4b82      	ldr	r3, [pc, #520]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 80098fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009900:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	2b08      	cmp	r3, #8
 8009906:	d007      	beq.n	8009918 <HAL_RCC_OscConfig+0x308>
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	2b18      	cmp	r3, #24
 800990c:	d13a      	bne.n	8009984 <HAL_RCC_OscConfig+0x374>
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f003 0303 	and.w	r3, r3, #3
 8009914:	2b01      	cmp	r3, #1
 8009916:	d135      	bne.n	8009984 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009918:	4b7b      	ldr	r3, [pc, #492]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009920:	2b00      	cmp	r3, #0
 8009922:	d005      	beq.n	8009930 <HAL_RCC_OscConfig+0x320>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	69db      	ldr	r3, [r3, #28]
 8009928:	2b80      	cmp	r3, #128	@ 0x80
 800992a:	d001      	beq.n	8009930 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e2c1      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009930:	f7f8 fd6a 	bl	8002408 <HAL_GetREVID>
 8009934:	4603      	mov	r3, r0
 8009936:	f241 0203 	movw	r2, #4099	@ 0x1003
 800993a:	4293      	cmp	r3, r2
 800993c:	d817      	bhi.n	800996e <HAL_RCC_OscConfig+0x35e>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	2b20      	cmp	r3, #32
 8009944:	d108      	bne.n	8009958 <HAL_RCC_OscConfig+0x348>
 8009946:	4b70      	ldr	r3, [pc, #448]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800994e:	4a6e      	ldr	r2, [pc, #440]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009950:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009954:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009956:	e075      	b.n	8009a44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009958:	4b6b      	ldr	r3, [pc, #428]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	069b      	lsls	r3, r3, #26
 8009966:	4968      	ldr	r1, [pc, #416]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009968:	4313      	orrs	r3, r2
 800996a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800996c:	e06a      	b.n	8009a44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800996e:	4b66      	ldr	r3, [pc, #408]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	061b      	lsls	r3, r3, #24
 800997c:	4962      	ldr	r1, [pc, #392]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 800997e:	4313      	orrs	r3, r2
 8009980:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009982:	e05f      	b.n	8009a44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d042      	beq.n	8009a12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800998c:	4b5e      	ldr	r3, [pc, #376]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a5d      	ldr	r2, [pc, #372]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009998:	f7f8 fd06 	bl	80023a8 <HAL_GetTick>
 800999c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800999e:	e008      	b.n	80099b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80099a0:	f7f8 fd02 	bl	80023a8 <HAL_GetTick>
 80099a4:	4602      	mov	r2, r0
 80099a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d901      	bls.n	80099b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e280      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80099b2:	4b55      	ldr	r3, [pc, #340]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0f0      	beq.n	80099a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099be:	f7f8 fd23 	bl	8002408 <HAL_GetREVID>
 80099c2:	4603      	mov	r3, r0
 80099c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d817      	bhi.n	80099fc <HAL_RCC_OscConfig+0x3ec>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a1b      	ldr	r3, [r3, #32]
 80099d0:	2b20      	cmp	r3, #32
 80099d2:	d108      	bne.n	80099e6 <HAL_RCC_OscConfig+0x3d6>
 80099d4:	4b4c      	ldr	r3, [pc, #304]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80099dc:	4a4a      	ldr	r2, [pc, #296]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 80099de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099e2:	6053      	str	r3, [r2, #4]
 80099e4:	e02e      	b.n	8009a44 <HAL_RCC_OscConfig+0x434>
 80099e6:	4b48      	ldr	r3, [pc, #288]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	069b      	lsls	r3, r3, #26
 80099f4:	4944      	ldr	r1, [pc, #272]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 80099f6:	4313      	orrs	r3, r2
 80099f8:	604b      	str	r3, [r1, #4]
 80099fa:	e023      	b.n	8009a44 <HAL_RCC_OscConfig+0x434>
 80099fc:	4b42      	ldr	r3, [pc, #264]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	061b      	lsls	r3, r3, #24
 8009a0a:	493f      	ldr	r1, [pc, #252]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	60cb      	str	r3, [r1, #12]
 8009a10:	e018      	b.n	8009a44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009a12:	4b3d      	ldr	r3, [pc, #244]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a3c      	ldr	r2, [pc, #240]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009a18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a1e:	f7f8 fcc3 	bl	80023a8 <HAL_GetTick>
 8009a22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a24:	e008      	b.n	8009a38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a26:	f7f8 fcbf 	bl	80023a8 <HAL_GetTick>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d901      	bls.n	8009a38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e23d      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a38:	4b33      	ldr	r3, [pc, #204]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1f0      	bne.n	8009a26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0308 	and.w	r3, r3, #8
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d036      	beq.n	8009abe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	695b      	ldr	r3, [r3, #20]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d019      	beq.n	8009a8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a58:	4b2b      	ldr	r3, [pc, #172]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009a5e:	f043 0301 	orr.w	r3, r3, #1
 8009a62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a64:	f7f8 fca0 	bl	80023a8 <HAL_GetTick>
 8009a68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009a6a:	e008      	b.n	8009a7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a6c:	f7f8 fc9c 	bl	80023a8 <HAL_GetTick>
 8009a70:	4602      	mov	r2, r0
 8009a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d901      	bls.n	8009a7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e21a      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009a7e:	4b22      	ldr	r3, [pc, #136]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a82:	f003 0302 	and.w	r3, r3, #2
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d0f0      	beq.n	8009a6c <HAL_RCC_OscConfig+0x45c>
 8009a8a:	e018      	b.n	8009abe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a90:	4a1d      	ldr	r2, [pc, #116]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009a92:	f023 0301 	bic.w	r3, r3, #1
 8009a96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a98:	f7f8 fc86 	bl	80023a8 <HAL_GetTick>
 8009a9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009a9e:	e008      	b.n	8009ab2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009aa0:	f7f8 fc82 	bl	80023a8 <HAL_GetTick>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d901      	bls.n	8009ab2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e200      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ab2:	4b15      	ldr	r3, [pc, #84]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ab6:	f003 0302 	and.w	r3, r3, #2
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1f0      	bne.n	8009aa0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 0320 	and.w	r3, r3, #32
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d039      	beq.n	8009b3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d01c      	beq.n	8009b0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009ad8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009adc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009ade:	f7f8 fc63 	bl	80023a8 <HAL_GetTick>
 8009ae2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009ae4:	e008      	b.n	8009af8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ae6:	f7f8 fc5f 	bl	80023a8 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d901      	bls.n	8009af8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e1dd      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009af8:	4b03      	ldr	r3, [pc, #12]	@ (8009b08 <HAL_RCC_OscConfig+0x4f8>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d0f0      	beq.n	8009ae6 <HAL_RCC_OscConfig+0x4d6>
 8009b04:	e01b      	b.n	8009b3e <HAL_RCC_OscConfig+0x52e>
 8009b06:	bf00      	nop
 8009b08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009b0c:	4b9b      	ldr	r3, [pc, #620]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a9a      	ldr	r2, [pc, #616]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009b12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b18:	f7f8 fc46 	bl	80023a8 <HAL_GetTick>
 8009b1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b1e:	e008      	b.n	8009b32 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b20:	f7f8 fc42 	bl	80023a8 <HAL_GetTick>
 8009b24:	4602      	mov	r2, r0
 8009b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d901      	bls.n	8009b32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e1c0      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b32:	4b92      	ldr	r3, [pc, #584]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1f0      	bne.n	8009b20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f003 0304 	and.w	r3, r3, #4
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 8081 	beq.w	8009c4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009b4c:	4b8c      	ldr	r3, [pc, #560]	@ (8009d80 <HAL_RCC_OscConfig+0x770>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a8b      	ldr	r2, [pc, #556]	@ (8009d80 <HAL_RCC_OscConfig+0x770>)
 8009b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b58:	f7f8 fc26 	bl	80023a8 <HAL_GetTick>
 8009b5c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b5e:	e008      	b.n	8009b72 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b60:	f7f8 fc22 	bl	80023a8 <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	2b64      	cmp	r3, #100	@ 0x64
 8009b6c:	d901      	bls.n	8009b72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e1a0      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b72:	4b83      	ldr	r3, [pc, #524]	@ (8009d80 <HAL_RCC_OscConfig+0x770>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d0f0      	beq.n	8009b60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d106      	bne.n	8009b94 <HAL_RCC_OscConfig+0x584>
 8009b86:	4b7d      	ldr	r3, [pc, #500]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b8a:	4a7c      	ldr	r2, [pc, #496]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009b8c:	f043 0301 	orr.w	r3, r3, #1
 8009b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b92:	e02d      	b.n	8009bf0 <HAL_RCC_OscConfig+0x5e0>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10c      	bne.n	8009bb6 <HAL_RCC_OscConfig+0x5a6>
 8009b9c:	4b77      	ldr	r3, [pc, #476]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ba0:	4a76      	ldr	r2, [pc, #472]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009ba2:	f023 0301 	bic.w	r3, r3, #1
 8009ba6:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ba8:	4b74      	ldr	r3, [pc, #464]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bac:	4a73      	ldr	r2, [pc, #460]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009bae:	f023 0304 	bic.w	r3, r3, #4
 8009bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009bb4:	e01c      	b.n	8009bf0 <HAL_RCC_OscConfig+0x5e0>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	2b05      	cmp	r3, #5
 8009bbc:	d10c      	bne.n	8009bd8 <HAL_RCC_OscConfig+0x5c8>
 8009bbe:	4b6f      	ldr	r3, [pc, #444]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bc2:	4a6e      	ldr	r2, [pc, #440]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009bc4:	f043 0304 	orr.w	r3, r3, #4
 8009bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8009bca:	4b6c      	ldr	r3, [pc, #432]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bce:	4a6b      	ldr	r2, [pc, #428]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009bd0:	f043 0301 	orr.w	r3, r3, #1
 8009bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8009bd6:	e00b      	b.n	8009bf0 <HAL_RCC_OscConfig+0x5e0>
 8009bd8:	4b68      	ldr	r3, [pc, #416]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bdc:	4a67      	ldr	r2, [pc, #412]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009bde:	f023 0301 	bic.w	r3, r3, #1
 8009be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009be4:	4b65      	ldr	r3, [pc, #404]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009be8:	4a64      	ldr	r2, [pc, #400]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009bea:	f023 0304 	bic.w	r3, r3, #4
 8009bee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d015      	beq.n	8009c24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bf8:	f7f8 fbd6 	bl	80023a8 <HAL_GetTick>
 8009bfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bfe:	e00a      	b.n	8009c16 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c00:	f7f8 fbd2 	bl	80023a8 <HAL_GetTick>
 8009c04:	4602      	mov	r2, r0
 8009c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d901      	bls.n	8009c16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e14e      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c16:	4b59      	ldr	r3, [pc, #356]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c1a:	f003 0302 	and.w	r3, r3, #2
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d0ee      	beq.n	8009c00 <HAL_RCC_OscConfig+0x5f0>
 8009c22:	e014      	b.n	8009c4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c24:	f7f8 fbc0 	bl	80023a8 <HAL_GetTick>
 8009c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c2a:	e00a      	b.n	8009c42 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c2c:	f7f8 fbbc 	bl	80023a8 <HAL_GetTick>
 8009c30:	4602      	mov	r2, r0
 8009c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d901      	bls.n	8009c42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e138      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c42:	4b4e      	ldr	r3, [pc, #312]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c46:	f003 0302 	and.w	r3, r3, #2
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1ee      	bne.n	8009c2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 812d 	beq.w	8009eb2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009c58:	4b48      	ldr	r3, [pc, #288]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c60:	2b18      	cmp	r3, #24
 8009c62:	f000 80bd 	beq.w	8009de0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	f040 809e 	bne.w	8009dac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c70:	4b42      	ldr	r3, [pc, #264]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a41      	ldr	r2, [pc, #260]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009c76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c7c:	f7f8 fb94 	bl	80023a8 <HAL_GetTick>
 8009c80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c82:	e008      	b.n	8009c96 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c84:	f7f8 fb90 	bl	80023a8 <HAL_GetTick>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d901      	bls.n	8009c96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009c92:	2303      	movs	r3, #3
 8009c94:	e10e      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c96:	4b39      	ldr	r3, [pc, #228]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1f0      	bne.n	8009c84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ca2:	4b36      	ldr	r3, [pc, #216]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009ca4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ca6:	4b37      	ldr	r3, [pc, #220]	@ (8009d84 <HAL_RCC_OscConfig+0x774>)
 8009ca8:	4013      	ands	r3, r2
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009cb2:	0112      	lsls	r2, r2, #4
 8009cb4:	430a      	orrs	r2, r1
 8009cb6:	4931      	ldr	r1, [pc, #196]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	628b      	str	r3, [r1, #40]	@ 0x28
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	025b      	lsls	r3, r3, #9
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	431a      	orrs	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	041b      	lsls	r3, r3, #16
 8009cda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009cde:	431a      	orrs	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	061b      	lsls	r3, r3, #24
 8009ce8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009cec:	4923      	ldr	r1, [pc, #140]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009cf2:	4b22      	ldr	r3, [pc, #136]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf6:	4a21      	ldr	r2, [pc, #132]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009cf8:	f023 0301 	bic.w	r3, r3, #1
 8009cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d02:	4b21      	ldr	r3, [pc, #132]	@ (8009d88 <HAL_RCC_OscConfig+0x778>)
 8009d04:	4013      	ands	r3, r2
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009d0a:	00d2      	lsls	r2, r2, #3
 8009d0c:	491b      	ldr	r1, [pc, #108]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009d12:	4b1a      	ldr	r3, [pc, #104]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d16:	f023 020c 	bic.w	r2, r3, #12
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d1e:	4917      	ldr	r1, [pc, #92]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009d24:	4b15      	ldr	r3, [pc, #84]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d28:	f023 0202 	bic.w	r2, r3, #2
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d30:	4912      	ldr	r1, [pc, #72]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d32:	4313      	orrs	r3, r2
 8009d34:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009d36:	4b11      	ldr	r3, [pc, #68]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d3a:	4a10      	ldr	r2, [pc, #64]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d42:	4b0e      	ldr	r3, [pc, #56]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d46:	4a0d      	ldr	r2, [pc, #52]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d52:	4a0a      	ldr	r2, [pc, #40]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009d5a:	4b08      	ldr	r3, [pc, #32]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5e:	4a07      	ldr	r2, [pc, #28]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d60:	f043 0301 	orr.w	r3, r3, #1
 8009d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d66:	4b05      	ldr	r3, [pc, #20]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a04      	ldr	r2, [pc, #16]	@ (8009d7c <HAL_RCC_OscConfig+0x76c>)
 8009d6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d72:	f7f8 fb19 	bl	80023a8 <HAL_GetTick>
 8009d76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d78:	e011      	b.n	8009d9e <HAL_RCC_OscConfig+0x78e>
 8009d7a:	bf00      	nop
 8009d7c:	58024400 	.word	0x58024400
 8009d80:	58024800 	.word	0x58024800
 8009d84:	fffffc0c 	.word	0xfffffc0c
 8009d88:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d8c:	f7f8 fb0c 	bl	80023a8 <HAL_GetTick>
 8009d90:	4602      	mov	r2, r0
 8009d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d901      	bls.n	8009d9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e08a      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d9e:	4b47      	ldr	r3, [pc, #284]	@ (8009ebc <HAL_RCC_OscConfig+0x8ac>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0f0      	beq.n	8009d8c <HAL_RCC_OscConfig+0x77c>
 8009daa:	e082      	b.n	8009eb2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dac:	4b43      	ldr	r3, [pc, #268]	@ (8009ebc <HAL_RCC_OscConfig+0x8ac>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a42      	ldr	r2, [pc, #264]	@ (8009ebc <HAL_RCC_OscConfig+0x8ac>)
 8009db2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009db8:	f7f8 faf6 	bl	80023a8 <HAL_GetTick>
 8009dbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009dbe:	e008      	b.n	8009dd2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009dc0:	f7f8 faf2 	bl	80023a8 <HAL_GetTick>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc8:	1ad3      	subs	r3, r2, r3
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d901      	bls.n	8009dd2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009dce:	2303      	movs	r3, #3
 8009dd0:	e070      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8009ebc <HAL_RCC_OscConfig+0x8ac>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1f0      	bne.n	8009dc0 <HAL_RCC_OscConfig+0x7b0>
 8009dde:	e068      	b.n	8009eb2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009de0:	4b36      	ldr	r3, [pc, #216]	@ (8009ebc <HAL_RCC_OscConfig+0x8ac>)
 8009de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009de6:	4b35      	ldr	r3, [pc, #212]	@ (8009ebc <HAL_RCC_OscConfig+0x8ac>)
 8009de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d031      	beq.n	8009e58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	f003 0203 	and.w	r2, r3, #3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d12a      	bne.n	8009e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	091b      	lsrs	r3, r3, #4
 8009e06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d122      	bne.n	8009e58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d11a      	bne.n	8009e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	0a5b      	lsrs	r3, r3, #9
 8009e26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d111      	bne.n	8009e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	0c1b      	lsrs	r3, r3, #16
 8009e38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d108      	bne.n	8009e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	0e1b      	lsrs	r3, r3, #24
 8009e4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d001      	beq.n	8009e5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e02b      	b.n	8009eb4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009e5c:	4b17      	ldr	r3, [pc, #92]	@ (8009ebc <HAL_RCC_OscConfig+0x8ac>)
 8009e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e60:	08db      	lsrs	r3, r3, #3
 8009e62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d01f      	beq.n	8009eb2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009e72:	4b12      	ldr	r3, [pc, #72]	@ (8009ebc <HAL_RCC_OscConfig+0x8ac>)
 8009e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e76:	4a11      	ldr	r2, [pc, #68]	@ (8009ebc <HAL_RCC_OscConfig+0x8ac>)
 8009e78:	f023 0301 	bic.w	r3, r3, #1
 8009e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009e7e:	f7f8 fa93 	bl	80023a8 <HAL_GetTick>
 8009e82:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009e84:	bf00      	nop
 8009e86:	f7f8 fa8f 	bl	80023a8 <HAL_GetTick>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d0f9      	beq.n	8009e86 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e92:	4b0a      	ldr	r3, [pc, #40]	@ (8009ebc <HAL_RCC_OscConfig+0x8ac>)
 8009e94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e96:	4b0a      	ldr	r3, [pc, #40]	@ (8009ec0 <HAL_RCC_OscConfig+0x8b0>)
 8009e98:	4013      	ands	r3, r2
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009e9e:	00d2      	lsls	r2, r2, #3
 8009ea0:	4906      	ldr	r1, [pc, #24]	@ (8009ebc <HAL_RCC_OscConfig+0x8ac>)
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009ea6:	4b05      	ldr	r3, [pc, #20]	@ (8009ebc <HAL_RCC_OscConfig+0x8ac>)
 8009ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eaa:	4a04      	ldr	r2, [pc, #16]	@ (8009ebc <HAL_RCC_OscConfig+0x8ac>)
 8009eac:	f043 0301 	orr.w	r3, r3, #1
 8009eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3730      	adds	r7, #48	@ 0x30
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	58024400 	.word	0x58024400
 8009ec0:	ffff0007 	.word	0xffff0007

08009ec4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d101      	bne.n	8009ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e19c      	b.n	800a212 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ed8:	4b8a      	ldr	r3, [pc, #552]	@ (800a104 <HAL_RCC_ClockConfig+0x240>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 030f 	and.w	r3, r3, #15
 8009ee0:	683a      	ldr	r2, [r7, #0]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d910      	bls.n	8009f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ee6:	4b87      	ldr	r3, [pc, #540]	@ (800a104 <HAL_RCC_ClockConfig+0x240>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f023 020f 	bic.w	r2, r3, #15
 8009eee:	4985      	ldr	r1, [pc, #532]	@ (800a104 <HAL_RCC_ClockConfig+0x240>)
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ef6:	4b83      	ldr	r3, [pc, #524]	@ (800a104 <HAL_RCC_ClockConfig+0x240>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 030f 	and.w	r3, r3, #15
 8009efe:	683a      	ldr	r2, [r7, #0]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d001      	beq.n	8009f08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e184      	b.n	800a212 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 0304 	and.w	r3, r3, #4
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d010      	beq.n	8009f36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	691a      	ldr	r2, [r3, #16]
 8009f18:	4b7b      	ldr	r3, [pc, #492]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d908      	bls.n	8009f36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009f24:	4b78      	ldr	r3, [pc, #480]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	4975      	ldr	r1, [pc, #468]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009f32:	4313      	orrs	r3, r2
 8009f34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 0308 	and.w	r3, r3, #8
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d010      	beq.n	8009f64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	695a      	ldr	r2, [r3, #20]
 8009f46:	4b70      	ldr	r3, [pc, #448]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d908      	bls.n	8009f64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009f52:	4b6d      	ldr	r3, [pc, #436]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009f54:	69db      	ldr	r3, [r3, #28]
 8009f56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	695b      	ldr	r3, [r3, #20]
 8009f5e:	496a      	ldr	r1, [pc, #424]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0310 	and.w	r3, r3, #16
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d010      	beq.n	8009f92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	699a      	ldr	r2, [r3, #24]
 8009f74:	4b64      	ldr	r3, [pc, #400]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009f76:	69db      	ldr	r3, [r3, #28]
 8009f78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d908      	bls.n	8009f92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009f80:	4b61      	ldr	r3, [pc, #388]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	699b      	ldr	r3, [r3, #24]
 8009f8c:	495e      	ldr	r1, [pc, #376]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 0320 	and.w	r3, r3, #32
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d010      	beq.n	8009fc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	69da      	ldr	r2, [r3, #28]
 8009fa2:	4b59      	ldr	r3, [pc, #356]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d908      	bls.n	8009fc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009fae:	4b56      	ldr	r3, [pc, #344]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	69db      	ldr	r3, [r3, #28]
 8009fba:	4953      	ldr	r1, [pc, #332]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 0302 	and.w	r3, r3, #2
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d010      	beq.n	8009fee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	68da      	ldr	r2, [r3, #12]
 8009fd0:	4b4d      	ldr	r3, [pc, #308]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	f003 030f 	and.w	r3, r3, #15
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d908      	bls.n	8009fee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fdc:	4b4a      	ldr	r3, [pc, #296]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009fde:	699b      	ldr	r3, [r3, #24]
 8009fe0:	f023 020f 	bic.w	r2, r3, #15
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	4947      	ldr	r1, [pc, #284]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0301 	and.w	r3, r3, #1
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d055      	beq.n	800a0a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009ffa:	4b43      	ldr	r3, [pc, #268]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	4940      	ldr	r1, [pc, #256]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 800a008:	4313      	orrs	r3, r2
 800a00a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	2b02      	cmp	r3, #2
 800a012:	d107      	bne.n	800a024 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a014:	4b3c      	ldr	r3, [pc, #240]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d121      	bne.n	800a064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e0f6      	b.n	800a212 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d107      	bne.n	800a03c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a02c:	4b36      	ldr	r3, [pc, #216]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d115      	bne.n	800a064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e0ea      	b.n	800a212 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d107      	bne.n	800a054 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a044:	4b30      	ldr	r3, [pc, #192]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d109      	bne.n	800a064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	e0de      	b.n	800a212 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a054:	4b2c      	ldr	r3, [pc, #176]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 0304 	and.w	r3, r3, #4
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	e0d6      	b.n	800a212 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a064:	4b28      	ldr	r3, [pc, #160]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	f023 0207 	bic.w	r2, r3, #7
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	4925      	ldr	r1, [pc, #148]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 800a072:	4313      	orrs	r3, r2
 800a074:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a076:	f7f8 f997 	bl	80023a8 <HAL_GetTick>
 800a07a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a07c:	e00a      	b.n	800a094 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a07e:	f7f8 f993 	bl	80023a8 <HAL_GetTick>
 800a082:	4602      	mov	r2, r0
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d901      	bls.n	800a094 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a090:	2303      	movs	r3, #3
 800a092:	e0be      	b.n	800a212 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a094:	4b1c      	ldr	r3, [pc, #112]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	00db      	lsls	r3, r3, #3
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d1eb      	bne.n	800a07e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0302 	and.w	r3, r3, #2
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d010      	beq.n	800a0d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68da      	ldr	r2, [r3, #12]
 800a0b6:	4b14      	ldr	r3, [pc, #80]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	f003 030f 	and.w	r3, r3, #15
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d208      	bcs.n	800a0d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0c2:	4b11      	ldr	r3, [pc, #68]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	f023 020f 	bic.w	r2, r3, #15
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	490e      	ldr	r1, [pc, #56]	@ (800a108 <HAL_RCC_ClockConfig+0x244>)
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a0d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a104 <HAL_RCC_ClockConfig+0x240>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 030f 	and.w	r3, r3, #15
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d214      	bcs.n	800a10c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0e2:	4b08      	ldr	r3, [pc, #32]	@ (800a104 <HAL_RCC_ClockConfig+0x240>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f023 020f 	bic.w	r2, r3, #15
 800a0ea:	4906      	ldr	r1, [pc, #24]	@ (800a104 <HAL_RCC_ClockConfig+0x240>)
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0f2:	4b04      	ldr	r3, [pc, #16]	@ (800a104 <HAL_RCC_ClockConfig+0x240>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 030f 	and.w	r3, r3, #15
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d005      	beq.n	800a10c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	e086      	b.n	800a212 <HAL_RCC_ClockConfig+0x34e>
 800a104:	52002000 	.word	0x52002000
 800a108:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b00      	cmp	r3, #0
 800a116:	d010      	beq.n	800a13a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	691a      	ldr	r2, [r3, #16]
 800a11c:	4b3f      	ldr	r3, [pc, #252]	@ (800a21c <HAL_RCC_ClockConfig+0x358>)
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a124:	429a      	cmp	r2, r3
 800a126:	d208      	bcs.n	800a13a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a128:	4b3c      	ldr	r3, [pc, #240]	@ (800a21c <HAL_RCC_ClockConfig+0x358>)
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	4939      	ldr	r1, [pc, #228]	@ (800a21c <HAL_RCC_ClockConfig+0x358>)
 800a136:	4313      	orrs	r3, r2
 800a138:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 0308 	and.w	r3, r3, #8
 800a142:	2b00      	cmp	r3, #0
 800a144:	d010      	beq.n	800a168 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	695a      	ldr	r2, [r3, #20]
 800a14a:	4b34      	ldr	r3, [pc, #208]	@ (800a21c <HAL_RCC_ClockConfig+0x358>)
 800a14c:	69db      	ldr	r3, [r3, #28]
 800a14e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a152:	429a      	cmp	r2, r3
 800a154:	d208      	bcs.n	800a168 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a156:	4b31      	ldr	r3, [pc, #196]	@ (800a21c <HAL_RCC_ClockConfig+0x358>)
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	492e      	ldr	r1, [pc, #184]	@ (800a21c <HAL_RCC_ClockConfig+0x358>)
 800a164:	4313      	orrs	r3, r2
 800a166:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 0310 	and.w	r3, r3, #16
 800a170:	2b00      	cmp	r3, #0
 800a172:	d010      	beq.n	800a196 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	699a      	ldr	r2, [r3, #24]
 800a178:	4b28      	ldr	r3, [pc, #160]	@ (800a21c <HAL_RCC_ClockConfig+0x358>)
 800a17a:	69db      	ldr	r3, [r3, #28]
 800a17c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a180:	429a      	cmp	r2, r3
 800a182:	d208      	bcs.n	800a196 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a184:	4b25      	ldr	r3, [pc, #148]	@ (800a21c <HAL_RCC_ClockConfig+0x358>)
 800a186:	69db      	ldr	r3, [r3, #28]
 800a188:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	4922      	ldr	r1, [pc, #136]	@ (800a21c <HAL_RCC_ClockConfig+0x358>)
 800a192:	4313      	orrs	r3, r2
 800a194:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 0320 	and.w	r3, r3, #32
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d010      	beq.n	800a1c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	69da      	ldr	r2, [r3, #28]
 800a1a6:	4b1d      	ldr	r3, [pc, #116]	@ (800a21c <HAL_RCC_ClockConfig+0x358>)
 800a1a8:	6a1b      	ldr	r3, [r3, #32]
 800a1aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d208      	bcs.n	800a1c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a1b2:	4b1a      	ldr	r3, [pc, #104]	@ (800a21c <HAL_RCC_ClockConfig+0x358>)
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	69db      	ldr	r3, [r3, #28]
 800a1be:	4917      	ldr	r1, [pc, #92]	@ (800a21c <HAL_RCC_ClockConfig+0x358>)
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a1c4:	f000 f834 	bl	800a230 <HAL_RCC_GetSysClockFreq>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	4b14      	ldr	r3, [pc, #80]	@ (800a21c <HAL_RCC_ClockConfig+0x358>)
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	0a1b      	lsrs	r3, r3, #8
 800a1d0:	f003 030f 	and.w	r3, r3, #15
 800a1d4:	4912      	ldr	r1, [pc, #72]	@ (800a220 <HAL_RCC_ClockConfig+0x35c>)
 800a1d6:	5ccb      	ldrb	r3, [r1, r3]
 800a1d8:	f003 031f 	and.w	r3, r3, #31
 800a1dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a1e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a21c <HAL_RCC_ClockConfig+0x358>)
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	f003 030f 	and.w	r3, r3, #15
 800a1ea:	4a0d      	ldr	r2, [pc, #52]	@ (800a220 <HAL_RCC_ClockConfig+0x35c>)
 800a1ec:	5cd3      	ldrb	r3, [r2, r3]
 800a1ee:	f003 031f 	and.w	r3, r3, #31
 800a1f2:	693a      	ldr	r2, [r7, #16]
 800a1f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a1f8:	4a0a      	ldr	r2, [pc, #40]	@ (800a224 <HAL_RCC_ClockConfig+0x360>)
 800a1fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a1fc:	4a0a      	ldr	r2, [pc, #40]	@ (800a228 <HAL_RCC_ClockConfig+0x364>)
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a202:	4b0a      	ldr	r3, [pc, #40]	@ (800a22c <HAL_RCC_ClockConfig+0x368>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4618      	mov	r0, r3
 800a208:	f7f8 f884 	bl	8002314 <HAL_InitTick>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a210:	7bfb      	ldrb	r3, [r7, #15]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3718      	adds	r7, #24
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	58024400 	.word	0x58024400
 800a220:	08015c9c 	.word	0x08015c9c
 800a224:	24000004 	.word	0x24000004
 800a228:	24000000 	.word	0x24000000
 800a22c:	24000008 	.word	0x24000008

0800a230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a230:	b480      	push	{r7}
 800a232:	b089      	sub	sp, #36	@ 0x24
 800a234:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a236:	4bb3      	ldr	r3, [pc, #716]	@ (800a504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a23e:	2b18      	cmp	r3, #24
 800a240:	f200 8155 	bhi.w	800a4ee <HAL_RCC_GetSysClockFreq+0x2be>
 800a244:	a201      	add	r2, pc, #4	@ (adr r2, 800a24c <HAL_RCC_GetSysClockFreq+0x1c>)
 800a246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24a:	bf00      	nop
 800a24c:	0800a2b1 	.word	0x0800a2b1
 800a250:	0800a4ef 	.word	0x0800a4ef
 800a254:	0800a4ef 	.word	0x0800a4ef
 800a258:	0800a4ef 	.word	0x0800a4ef
 800a25c:	0800a4ef 	.word	0x0800a4ef
 800a260:	0800a4ef 	.word	0x0800a4ef
 800a264:	0800a4ef 	.word	0x0800a4ef
 800a268:	0800a4ef 	.word	0x0800a4ef
 800a26c:	0800a2d7 	.word	0x0800a2d7
 800a270:	0800a4ef 	.word	0x0800a4ef
 800a274:	0800a4ef 	.word	0x0800a4ef
 800a278:	0800a4ef 	.word	0x0800a4ef
 800a27c:	0800a4ef 	.word	0x0800a4ef
 800a280:	0800a4ef 	.word	0x0800a4ef
 800a284:	0800a4ef 	.word	0x0800a4ef
 800a288:	0800a4ef 	.word	0x0800a4ef
 800a28c:	0800a2dd 	.word	0x0800a2dd
 800a290:	0800a4ef 	.word	0x0800a4ef
 800a294:	0800a4ef 	.word	0x0800a4ef
 800a298:	0800a4ef 	.word	0x0800a4ef
 800a29c:	0800a4ef 	.word	0x0800a4ef
 800a2a0:	0800a4ef 	.word	0x0800a4ef
 800a2a4:	0800a4ef 	.word	0x0800a4ef
 800a2a8:	0800a4ef 	.word	0x0800a4ef
 800a2ac:	0800a2e3 	.word	0x0800a2e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2b0:	4b94      	ldr	r3, [pc, #592]	@ (800a504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 0320 	and.w	r3, r3, #32
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d009      	beq.n	800a2d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2bc:	4b91      	ldr	r3, [pc, #580]	@ (800a504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	08db      	lsrs	r3, r3, #3
 800a2c2:	f003 0303 	and.w	r3, r3, #3
 800a2c6:	4a90      	ldr	r2, [pc, #576]	@ (800a508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a2c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a2cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a2ce:	e111      	b.n	800a4f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a2d0:	4b8d      	ldr	r3, [pc, #564]	@ (800a508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a2d2:	61bb      	str	r3, [r7, #24]
      break;
 800a2d4:	e10e      	b.n	800a4f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a2d6:	4b8d      	ldr	r3, [pc, #564]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a2d8:	61bb      	str	r3, [r7, #24]
      break;
 800a2da:	e10b      	b.n	800a4f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a2dc:	4b8c      	ldr	r3, [pc, #560]	@ (800a510 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a2de:	61bb      	str	r3, [r7, #24]
      break;
 800a2e0:	e108      	b.n	800a4f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2e2:	4b88      	ldr	r3, [pc, #544]	@ (800a504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e6:	f003 0303 	and.w	r3, r3, #3
 800a2ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a2ec:	4b85      	ldr	r3, [pc, #532]	@ (800a504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f0:	091b      	lsrs	r3, r3, #4
 800a2f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a2f8:	4b82      	ldr	r3, [pc, #520]	@ (800a504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2fc:	f003 0301 	and.w	r3, r3, #1
 800a300:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a302:	4b80      	ldr	r3, [pc, #512]	@ (800a504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a306:	08db      	lsrs	r3, r3, #3
 800a308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	fb02 f303 	mul.w	r3, r2, r3
 800a312:	ee07 3a90 	vmov	s15, r3
 800a316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a31a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	2b00      	cmp	r3, #0
 800a322:	f000 80e1 	beq.w	800a4e8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	2b02      	cmp	r3, #2
 800a32a:	f000 8083 	beq.w	800a434 <HAL_RCC_GetSysClockFreq+0x204>
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	2b02      	cmp	r3, #2
 800a332:	f200 80a1 	bhi.w	800a478 <HAL_RCC_GetSysClockFreq+0x248>
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d003      	beq.n	800a344 <HAL_RCC_GetSysClockFreq+0x114>
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d056      	beq.n	800a3f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a342:	e099      	b.n	800a478 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a344:	4b6f      	ldr	r3, [pc, #444]	@ (800a504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0320 	and.w	r3, r3, #32
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d02d      	beq.n	800a3ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a350:	4b6c      	ldr	r3, [pc, #432]	@ (800a504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	08db      	lsrs	r3, r3, #3
 800a356:	f003 0303 	and.w	r3, r3, #3
 800a35a:	4a6b      	ldr	r2, [pc, #428]	@ (800a508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a35c:	fa22 f303 	lsr.w	r3, r2, r3
 800a360:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	ee07 3a90 	vmov	s15, r3
 800a368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	ee07 3a90 	vmov	s15, r3
 800a372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a37a:	4b62      	ldr	r3, [pc, #392]	@ (800a504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a37c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a382:	ee07 3a90 	vmov	s15, r3
 800a386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a38a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a38e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a514 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a39a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a39e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a3aa:	e087      	b.n	800a4bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	ee07 3a90 	vmov	s15, r3
 800a3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a518 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a3ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3be:	4b51      	ldr	r3, [pc, #324]	@ (800a504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c6:	ee07 3a90 	vmov	s15, r3
 800a3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a514 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a3d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a3ee:	e065      	b.n	800a4bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	ee07 3a90 	vmov	s15, r3
 800a3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a51c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a3fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a402:	4b40      	ldr	r3, [pc, #256]	@ (800a504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a40a:	ee07 3a90 	vmov	s15, r3
 800a40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a412:	ed97 6a02 	vldr	s12, [r7, #8]
 800a416:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a514 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a41a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a41e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a42e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a432:	e043      	b.n	800a4bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	ee07 3a90 	vmov	s15, r3
 800a43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a43e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a520 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a446:	4b2f      	ldr	r3, [pc, #188]	@ (800a504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a44a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a44e:	ee07 3a90 	vmov	s15, r3
 800a452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a456:	ed97 6a02 	vldr	s12, [r7, #8]
 800a45a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a514 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a45e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a46a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a472:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a476:	e021      	b.n	800a4bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a482:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a51c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a48a:	4b1e      	ldr	r3, [pc, #120]	@ (800a504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a48c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a48e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a492:	ee07 3a90 	vmov	s15, r3
 800a496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a49a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a49e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a514 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a4ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a4bc:	4b11      	ldr	r3, [pc, #68]	@ (800a504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4c0:	0a5b      	lsrs	r3, r3, #9
 800a4c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	ee07 3a90 	vmov	s15, r3
 800a4d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a4d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4e0:	ee17 3a90 	vmov	r3, s15
 800a4e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a4e6:	e005      	b.n	800a4f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	61bb      	str	r3, [r7, #24]
      break;
 800a4ec:	e002      	b.n	800a4f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a4ee:	4b07      	ldr	r3, [pc, #28]	@ (800a50c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a4f0:	61bb      	str	r3, [r7, #24]
      break;
 800a4f2:	bf00      	nop
  }

  return sysclockfreq;
 800a4f4:	69bb      	ldr	r3, [r7, #24]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3724      	adds	r7, #36	@ 0x24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	58024400 	.word	0x58024400
 800a508:	03d09000 	.word	0x03d09000
 800a50c:	003d0900 	.word	0x003d0900
 800a510:	017d7840 	.word	0x017d7840
 800a514:	46000000 	.word	0x46000000
 800a518:	4c742400 	.word	0x4c742400
 800a51c:	4a742400 	.word	0x4a742400
 800a520:	4bbebc20 	.word	0x4bbebc20

0800a524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a52a:	f7ff fe81 	bl	800a230 <HAL_RCC_GetSysClockFreq>
 800a52e:	4602      	mov	r2, r0
 800a530:	4b10      	ldr	r3, [pc, #64]	@ (800a574 <HAL_RCC_GetHCLKFreq+0x50>)
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	0a1b      	lsrs	r3, r3, #8
 800a536:	f003 030f 	and.w	r3, r3, #15
 800a53a:	490f      	ldr	r1, [pc, #60]	@ (800a578 <HAL_RCC_GetHCLKFreq+0x54>)
 800a53c:	5ccb      	ldrb	r3, [r1, r3]
 800a53e:	f003 031f 	and.w	r3, r3, #31
 800a542:	fa22 f303 	lsr.w	r3, r2, r3
 800a546:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a548:	4b0a      	ldr	r3, [pc, #40]	@ (800a574 <HAL_RCC_GetHCLKFreq+0x50>)
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	f003 030f 	and.w	r3, r3, #15
 800a550:	4a09      	ldr	r2, [pc, #36]	@ (800a578 <HAL_RCC_GetHCLKFreq+0x54>)
 800a552:	5cd3      	ldrb	r3, [r2, r3]
 800a554:	f003 031f 	and.w	r3, r3, #31
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	fa22 f303 	lsr.w	r3, r2, r3
 800a55e:	4a07      	ldr	r2, [pc, #28]	@ (800a57c <HAL_RCC_GetHCLKFreq+0x58>)
 800a560:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a562:	4a07      	ldr	r2, [pc, #28]	@ (800a580 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a568:	4b04      	ldr	r3, [pc, #16]	@ (800a57c <HAL_RCC_GetHCLKFreq+0x58>)
 800a56a:	681b      	ldr	r3, [r3, #0]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	58024400 	.word	0x58024400
 800a578:	08015c9c 	.word	0x08015c9c
 800a57c:	24000004 	.word	0x24000004
 800a580:	24000000 	.word	0x24000000

0800a584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a588:	f7ff ffcc 	bl	800a524 <HAL_RCC_GetHCLKFreq>
 800a58c:	4602      	mov	r2, r0
 800a58e:	4b06      	ldr	r3, [pc, #24]	@ (800a5a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a590:	69db      	ldr	r3, [r3, #28]
 800a592:	091b      	lsrs	r3, r3, #4
 800a594:	f003 0307 	and.w	r3, r3, #7
 800a598:	4904      	ldr	r1, [pc, #16]	@ (800a5ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800a59a:	5ccb      	ldrb	r3, [r1, r3]
 800a59c:	f003 031f 	and.w	r3, r3, #31
 800a5a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	58024400 	.word	0x58024400
 800a5ac:	08015c9c 	.word	0x08015c9c

0800a5b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a5b4:	f7ff ffb6 	bl	800a524 <HAL_RCC_GetHCLKFreq>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	4b06      	ldr	r3, [pc, #24]	@ (800a5d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a5bc:	69db      	ldr	r3, [r3, #28]
 800a5be:	0a1b      	lsrs	r3, r3, #8
 800a5c0:	f003 0307 	and.w	r3, r3, #7
 800a5c4:	4904      	ldr	r1, [pc, #16]	@ (800a5d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a5c6:	5ccb      	ldrb	r3, [r1, r3]
 800a5c8:	f003 031f 	and.w	r3, r3, #31
 800a5cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	58024400 	.word	0x58024400
 800a5d8:	08015c9c 	.word	0x08015c9c

0800a5dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a5dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5e0:	b0ca      	sub	sp, #296	@ 0x128
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a5f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a600:	2500      	movs	r5, #0
 800a602:	ea54 0305 	orrs.w	r3, r4, r5
 800a606:	d049      	beq.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a60c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a60e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a612:	d02f      	beq.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a614:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a618:	d828      	bhi.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a61a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a61e:	d01a      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a620:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a624:	d822      	bhi.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a626:	2b00      	cmp	r3, #0
 800a628:	d003      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a62a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a62e:	d007      	beq.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a630:	e01c      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a632:	4bb8      	ldr	r3, [pc, #736]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a636:	4ab7      	ldr	r2, [pc, #732]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a63c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a63e:	e01a      	b.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a644:	3308      	adds	r3, #8
 800a646:	2102      	movs	r1, #2
 800a648:	4618      	mov	r0, r3
 800a64a:	f002 fb61 	bl	800cd10 <RCCEx_PLL2_Config>
 800a64e:	4603      	mov	r3, r0
 800a650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a654:	e00f      	b.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a65a:	3328      	adds	r3, #40	@ 0x28
 800a65c:	2102      	movs	r1, #2
 800a65e:	4618      	mov	r0, r3
 800a660:	f002 fc08 	bl	800ce74 <RCCEx_PLL3_Config>
 800a664:	4603      	mov	r3, r0
 800a666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a66a:	e004      	b.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a672:	e000      	b.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a674:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10a      	bne.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a67e:	4ba5      	ldr	r3, [pc, #660]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a682:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a68a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a68c:	4aa1      	ldr	r2, [pc, #644]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a68e:	430b      	orrs	r3, r1
 800a690:	6513      	str	r3, [r2, #80]	@ 0x50
 800a692:	e003      	b.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a698:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a69c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a6a8:	f04f 0900 	mov.w	r9, #0
 800a6ac:	ea58 0309 	orrs.w	r3, r8, r9
 800a6b0:	d047      	beq.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6b8:	2b04      	cmp	r3, #4
 800a6ba:	d82a      	bhi.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a6bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c2:	bf00      	nop
 800a6c4:	0800a6d9 	.word	0x0800a6d9
 800a6c8:	0800a6e7 	.word	0x0800a6e7
 800a6cc:	0800a6fd 	.word	0x0800a6fd
 800a6d0:	0800a71b 	.word	0x0800a71b
 800a6d4:	0800a71b 	.word	0x0800a71b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6d8:	4b8e      	ldr	r3, [pc, #568]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6dc:	4a8d      	ldr	r2, [pc, #564]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a6de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6e4:	e01a      	b.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6ea:	3308      	adds	r3, #8
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f002 fb0e 	bl	800cd10 <RCCEx_PLL2_Config>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6fa:	e00f      	b.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a700:	3328      	adds	r3, #40	@ 0x28
 800a702:	2100      	movs	r1, #0
 800a704:	4618      	mov	r0, r3
 800a706:	f002 fbb5 	bl	800ce74 <RCCEx_PLL3_Config>
 800a70a:	4603      	mov	r3, r0
 800a70c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a710:	e004      	b.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a718:	e000      	b.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a71a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a71c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10a      	bne.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a724:	4b7b      	ldr	r3, [pc, #492]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a728:	f023 0107 	bic.w	r1, r3, #7
 800a72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a732:	4a78      	ldr	r2, [pc, #480]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a734:	430b      	orrs	r3, r1
 800a736:	6513      	str	r3, [r2, #80]	@ 0x50
 800a738:	e003      	b.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a73a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a73e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a74e:	f04f 0b00 	mov.w	fp, #0
 800a752:	ea5a 030b 	orrs.w	r3, sl, fp
 800a756:	d04c      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a75c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a75e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a762:	d030      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a768:	d829      	bhi.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a76a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a76c:	d02d      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a76e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a770:	d825      	bhi.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a772:	2b80      	cmp	r3, #128	@ 0x80
 800a774:	d018      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a776:	2b80      	cmp	r3, #128	@ 0x80
 800a778:	d821      	bhi.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d002      	beq.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a77e:	2b40      	cmp	r3, #64	@ 0x40
 800a780:	d007      	beq.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a782:	e01c      	b.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a784:	4b63      	ldr	r3, [pc, #396]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a788:	4a62      	ldr	r2, [pc, #392]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a78a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a78e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a790:	e01c      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a796:	3308      	adds	r3, #8
 800a798:	2100      	movs	r1, #0
 800a79a:	4618      	mov	r0, r3
 800a79c:	f002 fab8 	bl	800cd10 <RCCEx_PLL2_Config>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a7a6:	e011      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7ac:	3328      	adds	r3, #40	@ 0x28
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f002 fb5f 	bl	800ce74 <RCCEx_PLL3_Config>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a7bc:	e006      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a7c4:	e002      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a7c6:	bf00      	nop
 800a7c8:	e000      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a7ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d10a      	bne.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a7d4:	4b4f      	ldr	r3, [pc, #316]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7e2:	4a4c      	ldr	r2, [pc, #304]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7e4:	430b      	orrs	r3, r1
 800a7e6:	6513      	str	r3, [r2, #80]	@ 0x50
 800a7e8:	e003      	b.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a7fe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800a802:	2300      	movs	r3, #0
 800a804:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800a808:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800a80c:	460b      	mov	r3, r1
 800a80e:	4313      	orrs	r3, r2
 800a810:	d053      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a816:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a81a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a81e:	d035      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a820:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a824:	d82e      	bhi.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a826:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a82a:	d031      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a82c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a830:	d828      	bhi.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a832:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a836:	d01a      	beq.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a838:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a83c:	d822      	bhi.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d003      	beq.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a842:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a846:	d007      	beq.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a848:	e01c      	b.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a84a:	4b32      	ldr	r3, [pc, #200]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84e:	4a31      	ldr	r2, [pc, #196]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a854:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a856:	e01c      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a85c:	3308      	adds	r3, #8
 800a85e:	2100      	movs	r1, #0
 800a860:	4618      	mov	r0, r3
 800a862:	f002 fa55 	bl	800cd10 <RCCEx_PLL2_Config>
 800a866:	4603      	mov	r3, r0
 800a868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a86c:	e011      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a86e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a872:	3328      	adds	r3, #40	@ 0x28
 800a874:	2100      	movs	r1, #0
 800a876:	4618      	mov	r0, r3
 800a878:	f002 fafc 	bl	800ce74 <RCCEx_PLL3_Config>
 800a87c:	4603      	mov	r3, r0
 800a87e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a882:	e006      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a88a:	e002      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a88c:	bf00      	nop
 800a88e:	e000      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a890:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10b      	bne.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a89a:	4b1e      	ldr	r3, [pc, #120]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a89c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a89e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a8aa:	4a1a      	ldr	r2, [pc, #104]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8ac:	430b      	orrs	r3, r1
 800a8ae:	6593      	str	r3, [r2, #88]	@ 0x58
 800a8b0:	e003      	b.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a8ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a8c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a8d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	d056      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a8e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8e6:	d038      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a8e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8ec:	d831      	bhi.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a8ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8f2:	d034      	beq.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a8f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8f8:	d82b      	bhi.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a8fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8fe:	d01d      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a900:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a904:	d825      	bhi.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a906:	2b00      	cmp	r3, #0
 800a908:	d006      	beq.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a90a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a90e:	d00a      	beq.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a910:	e01f      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a912:	bf00      	nop
 800a914:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a918:	4ba2      	ldr	r3, [pc, #648]	@ (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a91a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a91c:	4aa1      	ldr	r2, [pc, #644]	@ (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a91e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a924:	e01c      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a92a:	3308      	adds	r3, #8
 800a92c:	2100      	movs	r1, #0
 800a92e:	4618      	mov	r0, r3
 800a930:	f002 f9ee 	bl	800cd10 <RCCEx_PLL2_Config>
 800a934:	4603      	mov	r3, r0
 800a936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a93a:	e011      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a93c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a940:	3328      	adds	r3, #40	@ 0x28
 800a942:	2100      	movs	r1, #0
 800a944:	4618      	mov	r0, r3
 800a946:	f002 fa95 	bl	800ce74 <RCCEx_PLL3_Config>
 800a94a:	4603      	mov	r3, r0
 800a94c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a950:	e006      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a958:	e002      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a95a:	bf00      	nop
 800a95c:	e000      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a95e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10b      	bne.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a968:	4b8e      	ldr	r3, [pc, #568]	@ (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a96a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a96c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a974:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a978:	4a8a      	ldr	r2, [pc, #552]	@ (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a97a:	430b      	orrs	r3, r1
 800a97c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a97e:	e003      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a984:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a990:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a994:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a998:	2300      	movs	r3, #0
 800a99a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a99e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	d03a      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9ae:	2b30      	cmp	r3, #48	@ 0x30
 800a9b0:	d01f      	beq.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a9b2:	2b30      	cmp	r3, #48	@ 0x30
 800a9b4:	d819      	bhi.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a9b6:	2b20      	cmp	r3, #32
 800a9b8:	d00c      	beq.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a9ba:	2b20      	cmp	r3, #32
 800a9bc:	d815      	bhi.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d019      	beq.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a9c2:	2b10      	cmp	r3, #16
 800a9c4:	d111      	bne.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9c6:	4b77      	ldr	r3, [pc, #476]	@ (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ca:	4a76      	ldr	r2, [pc, #472]	@ (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a9cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a9d2:	e011      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9d8:	3308      	adds	r3, #8
 800a9da:	2102      	movs	r1, #2
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f002 f997 	bl	800cd10 <RCCEx_PLL2_Config>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a9e8:	e006      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9f0:	e002      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a9f2:	bf00      	nop
 800a9f4:	e000      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a9f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10a      	bne.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800aa00:	4b68      	ldr	r3, [pc, #416]	@ (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa04:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800aa08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa0e:	4a65      	ldr	r2, [pc, #404]	@ (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa10:	430b      	orrs	r3, r1
 800aa12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa14:	e003      	b.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aa1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800aa2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800aa2e:	2300      	movs	r3, #0
 800aa30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800aa34:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	d051      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800aa3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa48:	d035      	beq.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800aa4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa4e:	d82e      	bhi.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aa50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa54:	d031      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800aa56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa5a:	d828      	bhi.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aa5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa60:	d01a      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800aa62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa66:	d822      	bhi.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d003      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800aa6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa70:	d007      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800aa72:	e01c      	b.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa74:	4b4b      	ldr	r3, [pc, #300]	@ (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa78:	4a4a      	ldr	r2, [pc, #296]	@ (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aa80:	e01c      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa86:	3308      	adds	r3, #8
 800aa88:	2100      	movs	r1, #0
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f002 f940 	bl	800cd10 <RCCEx_PLL2_Config>
 800aa90:	4603      	mov	r3, r0
 800aa92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aa96:	e011      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa9c:	3328      	adds	r3, #40	@ 0x28
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f002 f9e7 	bl	800ce74 <RCCEx_PLL3_Config>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aaac:	e006      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aab4:	e002      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800aab6:	bf00      	nop
 800aab8:	e000      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800aaba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aabc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10a      	bne.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800aac4:	4b37      	ldr	r3, [pc, #220]	@ (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aac8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800aacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aad2:	4a34      	ldr	r2, [pc, #208]	@ (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aad4:	430b      	orrs	r3, r1
 800aad6:	6513      	str	r3, [r2, #80]	@ 0x50
 800aad8:	e003      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800aaee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800aaf8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800aafc:	460b      	mov	r3, r1
 800aafe:	4313      	orrs	r3, r2
 800ab00:	d056      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ab02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab0c:	d033      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ab0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab12:	d82c      	bhi.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ab14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab18:	d02f      	beq.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ab1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab1e:	d826      	bhi.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ab20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab24:	d02b      	beq.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ab26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab2a:	d820      	bhi.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ab2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab30:	d012      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ab32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab36:	d81a      	bhi.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d022      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ab3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab40:	d115      	bne.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab46:	3308      	adds	r3, #8
 800ab48:	2101      	movs	r1, #1
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f002 f8e0 	bl	800cd10 <RCCEx_PLL2_Config>
 800ab50:	4603      	mov	r3, r0
 800ab52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ab56:	e015      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab5c:	3328      	adds	r3, #40	@ 0x28
 800ab5e:	2101      	movs	r1, #1
 800ab60:	4618      	mov	r0, r3
 800ab62:	f002 f987 	bl	800ce74 <RCCEx_PLL3_Config>
 800ab66:	4603      	mov	r3, r0
 800ab68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ab6c:	e00a      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab74:	e006      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ab76:	bf00      	nop
 800ab78:	e004      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ab7a:	bf00      	nop
 800ab7c:	e002      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ab7e:	bf00      	nop
 800ab80:	e000      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ab82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10d      	bne.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ab8c:	4b05      	ldr	r3, [pc, #20]	@ (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab90:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800ab94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab9a:	4a02      	ldr	r2, [pc, #8]	@ (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	6513      	str	r3, [r2, #80]	@ 0x50
 800aba0:	e006      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800aba2:	bf00      	nop
 800aba4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800abb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800abbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800abc0:	2300      	movs	r3, #0
 800abc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800abc6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800abca:	460b      	mov	r3, r1
 800abcc:	4313      	orrs	r3, r2
 800abce:	d055      	beq.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800abd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abdc:	d033      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800abde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abe2:	d82c      	bhi.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800abe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abe8:	d02f      	beq.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800abea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abee:	d826      	bhi.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800abf0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800abf4:	d02b      	beq.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800abf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800abfa:	d820      	bhi.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800abfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac00:	d012      	beq.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ac02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac06:	d81a      	bhi.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d022      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ac0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac10:	d115      	bne.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac16:	3308      	adds	r3, #8
 800ac18:	2101      	movs	r1, #1
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f002 f878 	bl	800cd10 <RCCEx_PLL2_Config>
 800ac20:	4603      	mov	r3, r0
 800ac22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ac26:	e015      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac2c:	3328      	adds	r3, #40	@ 0x28
 800ac2e:	2101      	movs	r1, #1
 800ac30:	4618      	mov	r0, r3
 800ac32:	f002 f91f 	bl	800ce74 <RCCEx_PLL3_Config>
 800ac36:	4603      	mov	r3, r0
 800ac38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ac3c:	e00a      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac44:	e006      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ac46:	bf00      	nop
 800ac48:	e004      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ac4a:	bf00      	nop
 800ac4c:	e002      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ac4e:	bf00      	nop
 800ac50:	e000      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ac52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10b      	bne.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ac5c:	4ba3      	ldr	r3, [pc, #652]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac60:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ac64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ac6c:	4a9f      	ldr	r2, [pc, #636]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac6e:	430b      	orrs	r3, r1
 800ac70:	6593      	str	r3, [r2, #88]	@ 0x58
 800ac72:	e003      	b.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ac7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac84:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ac88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ac92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ac96:	460b      	mov	r3, r1
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	d037      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ac9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aca2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aca6:	d00e      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800aca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acac:	d816      	bhi.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d018      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800acb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acb6:	d111      	bne.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acb8:	4b8c      	ldr	r3, [pc, #560]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acbc:	4a8b      	ldr	r2, [pc, #556]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800acc4:	e00f      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acca:	3308      	adds	r3, #8
 800accc:	2101      	movs	r1, #1
 800acce:	4618      	mov	r0, r3
 800acd0:	f002 f81e 	bl	800cd10 <RCCEx_PLL2_Config>
 800acd4:	4603      	mov	r3, r0
 800acd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800acda:	e004      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ace2:	e000      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800ace4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ace6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10a      	bne.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800acee:	4b7f      	ldr	r3, [pc, #508]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acf2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800acf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acfc:	4a7b      	ldr	r2, [pc, #492]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acfe:	430b      	orrs	r3, r1
 800ad00:	6513      	str	r3, [r2, #80]	@ 0x50
 800ad02:	e003      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ad0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800ad18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ad22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ad26:	460b      	mov	r3, r1
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	d039      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ad2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d81c      	bhi.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800ad36:	a201      	add	r2, pc, #4	@ (adr r2, 800ad3c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800ad38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3c:	0800ad79 	.word	0x0800ad79
 800ad40:	0800ad4d 	.word	0x0800ad4d
 800ad44:	0800ad5b 	.word	0x0800ad5b
 800ad48:	0800ad79 	.word	0x0800ad79
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad4c:	4b67      	ldr	r3, [pc, #412]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad50:	4a66      	ldr	r2, [pc, #408]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ad58:	e00f      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad5e:	3308      	adds	r3, #8
 800ad60:	2102      	movs	r1, #2
 800ad62:	4618      	mov	r0, r3
 800ad64:	f001 ffd4 	bl	800cd10 <RCCEx_PLL2_Config>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ad6e:	e004      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ad76:	e000      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800ad78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10a      	bne.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ad82:	4b5a      	ldr	r3, [pc, #360]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad86:	f023 0103 	bic.w	r1, r3, #3
 800ad8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad90:	4a56      	ldr	r2, [pc, #344]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad92:	430b      	orrs	r3, r1
 800ad94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ad96:	e003      	b.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ada0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800adac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800adb0:	2300      	movs	r3, #0
 800adb2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800adb6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800adba:	460b      	mov	r3, r1
 800adbc:	4313      	orrs	r3, r2
 800adbe:	f000 809f 	beq.w	800af00 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800adc2:	4b4b      	ldr	r3, [pc, #300]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a4a      	ldr	r2, [pc, #296]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800adc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800adcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800adce:	f7f7 faeb 	bl	80023a8 <HAL_GetTick>
 800add2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800add6:	e00b      	b.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800add8:	f7f7 fae6 	bl	80023a8 <HAL_GetTick>
 800addc:	4602      	mov	r2, r0
 800adde:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	2b64      	cmp	r3, #100	@ 0x64
 800ade6:	d903      	bls.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ade8:	2303      	movs	r3, #3
 800adea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800adee:	e005      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800adf0:	4b3f      	ldr	r3, [pc, #252]	@ (800aef0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d0ed      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800adfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d179      	bne.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ae04:	4b39      	ldr	r3, [pc, #228]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ae08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ae10:	4053      	eors	r3, r2
 800ae12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d015      	beq.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ae1a:	4b34      	ldr	r3, [pc, #208]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae22:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ae26:	4b31      	ldr	r3, [pc, #196]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae2a:	4a30      	ldr	r2, [pc, #192]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae30:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ae32:	4b2e      	ldr	r3, [pc, #184]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae36:	4a2d      	ldr	r2, [pc, #180]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae3c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ae3e:	4a2b      	ldr	r2, [pc, #172]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ae44:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ae46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ae4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae52:	d118      	bne.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae54:	f7f7 faa8 	bl	80023a8 <HAL_GetTick>
 800ae58:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae5c:	e00d      	b.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae5e:	f7f7 faa3 	bl	80023a8 <HAL_GetTick>
 800ae62:	4602      	mov	r2, r0
 800ae64:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ae68:	1ad2      	subs	r2, r2, r3
 800ae6a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d903      	bls.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800ae72:	2303      	movs	r3, #3
 800ae74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800ae78:	e005      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae7a:	4b1c      	ldr	r3, [pc, #112]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae7e:	f003 0302 	and.w	r3, r3, #2
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d0eb      	beq.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800ae86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d129      	bne.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ae8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ae96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae9e:	d10e      	bne.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800aea0:	4b12      	ldr	r3, [pc, #72]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800aea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aeb0:	091a      	lsrs	r2, r3, #4
 800aeb2:	4b10      	ldr	r3, [pc, #64]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	4a0d      	ldr	r2, [pc, #52]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aeb8:	430b      	orrs	r3, r1
 800aeba:	6113      	str	r3, [r2, #16]
 800aebc:	e005      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800aebe:	4b0b      	ldr	r3, [pc, #44]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	4a0a      	ldr	r2, [pc, #40]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aec4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800aec8:	6113      	str	r3, [r2, #16]
 800aeca:	4b08      	ldr	r3, [pc, #32]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aecc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800aece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aed2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aeda:	4a04      	ldr	r2, [pc, #16]	@ (800aeec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aedc:	430b      	orrs	r3, r1
 800aede:	6713      	str	r3, [r2, #112]	@ 0x70
 800aee0:	e00e      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800aeea:	e009      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800aeec:	58024400 	.word	0x58024400
 800aef0:	58024800 	.word	0x58024800
 800aef4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aefc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800af00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af08:	f002 0301 	and.w	r3, r2, #1
 800af0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800af10:	2300      	movs	r3, #0
 800af12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800af16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800af1a:	460b      	mov	r3, r1
 800af1c:	4313      	orrs	r3, r2
 800af1e:	f000 8089 	beq.w	800b034 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800af22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af28:	2b28      	cmp	r3, #40	@ 0x28
 800af2a:	d86b      	bhi.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800af2c:	a201      	add	r2, pc, #4	@ (adr r2, 800af34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800af2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af32:	bf00      	nop
 800af34:	0800b00d 	.word	0x0800b00d
 800af38:	0800b005 	.word	0x0800b005
 800af3c:	0800b005 	.word	0x0800b005
 800af40:	0800b005 	.word	0x0800b005
 800af44:	0800b005 	.word	0x0800b005
 800af48:	0800b005 	.word	0x0800b005
 800af4c:	0800b005 	.word	0x0800b005
 800af50:	0800b005 	.word	0x0800b005
 800af54:	0800afd9 	.word	0x0800afd9
 800af58:	0800b005 	.word	0x0800b005
 800af5c:	0800b005 	.word	0x0800b005
 800af60:	0800b005 	.word	0x0800b005
 800af64:	0800b005 	.word	0x0800b005
 800af68:	0800b005 	.word	0x0800b005
 800af6c:	0800b005 	.word	0x0800b005
 800af70:	0800b005 	.word	0x0800b005
 800af74:	0800afef 	.word	0x0800afef
 800af78:	0800b005 	.word	0x0800b005
 800af7c:	0800b005 	.word	0x0800b005
 800af80:	0800b005 	.word	0x0800b005
 800af84:	0800b005 	.word	0x0800b005
 800af88:	0800b005 	.word	0x0800b005
 800af8c:	0800b005 	.word	0x0800b005
 800af90:	0800b005 	.word	0x0800b005
 800af94:	0800b00d 	.word	0x0800b00d
 800af98:	0800b005 	.word	0x0800b005
 800af9c:	0800b005 	.word	0x0800b005
 800afa0:	0800b005 	.word	0x0800b005
 800afa4:	0800b005 	.word	0x0800b005
 800afa8:	0800b005 	.word	0x0800b005
 800afac:	0800b005 	.word	0x0800b005
 800afb0:	0800b005 	.word	0x0800b005
 800afb4:	0800b00d 	.word	0x0800b00d
 800afb8:	0800b005 	.word	0x0800b005
 800afbc:	0800b005 	.word	0x0800b005
 800afc0:	0800b005 	.word	0x0800b005
 800afc4:	0800b005 	.word	0x0800b005
 800afc8:	0800b005 	.word	0x0800b005
 800afcc:	0800b005 	.word	0x0800b005
 800afd0:	0800b005 	.word	0x0800b005
 800afd4:	0800b00d 	.word	0x0800b00d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afdc:	3308      	adds	r3, #8
 800afde:	2101      	movs	r1, #1
 800afe0:	4618      	mov	r0, r3
 800afe2:	f001 fe95 	bl	800cd10 <RCCEx_PLL2_Config>
 800afe6:	4603      	mov	r3, r0
 800afe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800afec:	e00f      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aff2:	3328      	adds	r3, #40	@ 0x28
 800aff4:	2101      	movs	r1, #1
 800aff6:	4618      	mov	r0, r3
 800aff8:	f001 ff3c 	bl	800ce74 <RCCEx_PLL3_Config>
 800affc:	4603      	mov	r3, r0
 800affe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b002:	e004      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b00a:	e000      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b00c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b00e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10a      	bne.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b016:	4bbf      	ldr	r3, [pc, #764]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b01a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b022:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b024:	4abb      	ldr	r2, [pc, #748]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b026:	430b      	orrs	r3, r1
 800b028:	6553      	str	r3, [r2, #84]	@ 0x54
 800b02a:	e003      	b.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b02c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b030:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03c:	f002 0302 	and.w	r3, r2, #2
 800b040:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b044:	2300      	movs	r3, #0
 800b046:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b04a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b04e:	460b      	mov	r3, r1
 800b050:	4313      	orrs	r3, r2
 800b052:	d041      	beq.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b058:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b05a:	2b05      	cmp	r3, #5
 800b05c:	d824      	bhi.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b05e:	a201      	add	r2, pc, #4	@ (adr r2, 800b064 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b064:	0800b0b1 	.word	0x0800b0b1
 800b068:	0800b07d 	.word	0x0800b07d
 800b06c:	0800b093 	.word	0x0800b093
 800b070:	0800b0b1 	.word	0x0800b0b1
 800b074:	0800b0b1 	.word	0x0800b0b1
 800b078:	0800b0b1 	.word	0x0800b0b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b080:	3308      	adds	r3, #8
 800b082:	2101      	movs	r1, #1
 800b084:	4618      	mov	r0, r3
 800b086:	f001 fe43 	bl	800cd10 <RCCEx_PLL2_Config>
 800b08a:	4603      	mov	r3, r0
 800b08c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b090:	e00f      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b096:	3328      	adds	r3, #40	@ 0x28
 800b098:	2101      	movs	r1, #1
 800b09a:	4618      	mov	r0, r3
 800b09c:	f001 feea 	bl	800ce74 <RCCEx_PLL3_Config>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b0a6:	e004      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b0ae:	e000      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b0b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10a      	bne.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b0ba:	4b96      	ldr	r3, [pc, #600]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b0bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0be:	f023 0107 	bic.w	r1, r3, #7
 800b0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0c8:	4a92      	ldr	r2, [pc, #584]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b0ca:	430b      	orrs	r3, r1
 800b0cc:	6553      	str	r3, [r2, #84]	@ 0x54
 800b0ce:	e003      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b0d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e0:	f002 0304 	and.w	r3, r2, #4
 800b0e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b0ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	d044      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b100:	2b05      	cmp	r3, #5
 800b102:	d825      	bhi.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b104:	a201      	add	r2, pc, #4	@ (adr r2, 800b10c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10a:	bf00      	nop
 800b10c:	0800b159 	.word	0x0800b159
 800b110:	0800b125 	.word	0x0800b125
 800b114:	0800b13b 	.word	0x0800b13b
 800b118:	0800b159 	.word	0x0800b159
 800b11c:	0800b159 	.word	0x0800b159
 800b120:	0800b159 	.word	0x0800b159
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b128:	3308      	adds	r3, #8
 800b12a:	2101      	movs	r1, #1
 800b12c:	4618      	mov	r0, r3
 800b12e:	f001 fdef 	bl	800cd10 <RCCEx_PLL2_Config>
 800b132:	4603      	mov	r3, r0
 800b134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b138:	e00f      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b13e:	3328      	adds	r3, #40	@ 0x28
 800b140:	2101      	movs	r1, #1
 800b142:	4618      	mov	r0, r3
 800b144:	f001 fe96 	bl	800ce74 <RCCEx_PLL3_Config>
 800b148:	4603      	mov	r3, r0
 800b14a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b14e:	e004      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b150:	2301      	movs	r3, #1
 800b152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b156:	e000      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b15a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10b      	bne.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b162:	4b6c      	ldr	r3, [pc, #432]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b166:	f023 0107 	bic.w	r1, r3, #7
 800b16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b16e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b172:	4a68      	ldr	r2, [pc, #416]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b174:	430b      	orrs	r3, r1
 800b176:	6593      	str	r3, [r2, #88]	@ 0x58
 800b178:	e003      	b.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b17a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b17e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18a:	f002 0320 	and.w	r3, r2, #32
 800b18e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b192:	2300      	movs	r3, #0
 800b194:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b198:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b19c:	460b      	mov	r3, r1
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	d055      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b1ae:	d033      	beq.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b1b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b1b4:	d82c      	bhi.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1ba:	d02f      	beq.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b1bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1c0:	d826      	bhi.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b1c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b1c6:	d02b      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b1c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b1cc:	d820      	bhi.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b1ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1d2:	d012      	beq.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b1d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1d8:	d81a      	bhi.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d022      	beq.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b1de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1e2:	d115      	bne.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1e8:	3308      	adds	r3, #8
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f001 fd8f 	bl	800cd10 <RCCEx_PLL2_Config>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b1f8:	e015      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1fe:	3328      	adds	r3, #40	@ 0x28
 800b200:	2102      	movs	r1, #2
 800b202:	4618      	mov	r0, r3
 800b204:	f001 fe36 	bl	800ce74 <RCCEx_PLL3_Config>
 800b208:	4603      	mov	r3, r0
 800b20a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b20e:	e00a      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b216:	e006      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b218:	bf00      	nop
 800b21a:	e004      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b21c:	bf00      	nop
 800b21e:	e002      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b220:	bf00      	nop
 800b222:	e000      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b224:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10b      	bne.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b22e:	4b39      	ldr	r3, [pc, #228]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b232:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b23a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b23e:	4a35      	ldr	r2, [pc, #212]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b240:	430b      	orrs	r3, r1
 800b242:	6553      	str	r3, [r2, #84]	@ 0x54
 800b244:	e003      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b24a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b24e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b256:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b25a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b25e:	2300      	movs	r3, #0
 800b260:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b264:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b268:	460b      	mov	r3, r1
 800b26a:	4313      	orrs	r3, r2
 800b26c:	d058      	beq.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b272:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b276:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b27a:	d033      	beq.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b27c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b280:	d82c      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b286:	d02f      	beq.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b288:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b28c:	d826      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b28e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b292:	d02b      	beq.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b294:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b298:	d820      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b29a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b29e:	d012      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b2a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2a4:	d81a      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d022      	beq.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b2aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2ae:	d115      	bne.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2b4:	3308      	adds	r3, #8
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f001 fd29 	bl	800cd10 <RCCEx_PLL2_Config>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b2c4:	e015      	b.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2ca:	3328      	adds	r3, #40	@ 0x28
 800b2cc:	2102      	movs	r1, #2
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f001 fdd0 	bl	800ce74 <RCCEx_PLL3_Config>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b2da:	e00a      	b.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b2e2:	e006      	b.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b2e4:	bf00      	nop
 800b2e6:	e004      	b.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b2e8:	bf00      	nop
 800b2ea:	e002      	b.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b2ec:	bf00      	nop
 800b2ee:	e000      	b.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b2f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d10e      	bne.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b2fa:	4b06      	ldr	r3, [pc, #24]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b2fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2fe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b306:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b30a:	4a02      	ldr	r2, [pc, #8]	@ (800b314 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b30c:	430b      	orrs	r3, r1
 800b30e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b310:	e006      	b.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b312:	bf00      	nop
 800b314:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b31c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b328:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b32c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b330:	2300      	movs	r3, #0
 800b332:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b336:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b33a:	460b      	mov	r3, r1
 800b33c:	4313      	orrs	r3, r2
 800b33e:	d055      	beq.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b344:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b348:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b34c:	d033      	beq.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b34e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b352:	d82c      	bhi.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b354:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b358:	d02f      	beq.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b35a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b35e:	d826      	bhi.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b360:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b364:	d02b      	beq.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b366:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b36a:	d820      	bhi.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b36c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b370:	d012      	beq.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b372:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b376:	d81a      	bhi.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d022      	beq.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b37c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b380:	d115      	bne.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b386:	3308      	adds	r3, #8
 800b388:	2100      	movs	r1, #0
 800b38a:	4618      	mov	r0, r3
 800b38c:	f001 fcc0 	bl	800cd10 <RCCEx_PLL2_Config>
 800b390:	4603      	mov	r3, r0
 800b392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b396:	e015      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b39c:	3328      	adds	r3, #40	@ 0x28
 800b39e:	2102      	movs	r1, #2
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f001 fd67 	bl	800ce74 <RCCEx_PLL3_Config>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b3ac:	e00a      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b3b4:	e006      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b3b6:	bf00      	nop
 800b3b8:	e004      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b3ba:	bf00      	nop
 800b3bc:	e002      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b3be:	bf00      	nop
 800b3c0:	e000      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b3c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10b      	bne.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b3cc:	4ba1      	ldr	r3, [pc, #644]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b3ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3d0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b3dc:	4a9d      	ldr	r2, [pc, #628]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b3de:	430b      	orrs	r3, r1
 800b3e0:	6593      	str	r3, [r2, #88]	@ 0x58
 800b3e2:	e003      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b3e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f4:	f002 0308 	and.w	r3, r2, #8
 800b3f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b402:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b406:	460b      	mov	r3, r1
 800b408:	4313      	orrs	r3, r2
 800b40a:	d01e      	beq.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b410:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b418:	d10c      	bne.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b41e:	3328      	adds	r3, #40	@ 0x28
 800b420:	2102      	movs	r1, #2
 800b422:	4618      	mov	r0, r3
 800b424:	f001 fd26 	bl	800ce74 <RCCEx_PLL3_Config>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d002      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b434:	4b87      	ldr	r3, [pc, #540]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b438:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b444:	4a83      	ldr	r2, [pc, #524]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b446:	430b      	orrs	r3, r1
 800b448:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	f002 0310 	and.w	r3, r2, #16
 800b456:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b45a:	2300      	movs	r3, #0
 800b45c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b460:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b464:	460b      	mov	r3, r1
 800b466:	4313      	orrs	r3, r2
 800b468:	d01e      	beq.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b46e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b476:	d10c      	bne.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b47c:	3328      	adds	r3, #40	@ 0x28
 800b47e:	2102      	movs	r1, #2
 800b480:	4618      	mov	r0, r3
 800b482:	f001 fcf7 	bl	800ce74 <RCCEx_PLL3_Config>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b492:	4b70      	ldr	r3, [pc, #448]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b496:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b49e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b4a2:	4a6c      	ldr	r2, [pc, #432]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b4a4:	430b      	orrs	r3, r1
 800b4a6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b4a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b4b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b4be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	d03e      	beq.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b4c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b4d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4d4:	d022      	beq.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b4d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4da:	d81b      	bhi.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d003      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b4e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4e4:	d00b      	beq.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b4e6:	e015      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4ec:	3308      	adds	r3, #8
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f001 fc0d 	bl	800cd10 <RCCEx_PLL2_Config>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b4fc:	e00f      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b502:	3328      	adds	r3, #40	@ 0x28
 800b504:	2102      	movs	r1, #2
 800b506:	4618      	mov	r0, r3
 800b508:	f001 fcb4 	bl	800ce74 <RCCEx_PLL3_Config>
 800b50c:	4603      	mov	r3, r0
 800b50e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b512:	e004      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b51a:	e000      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b51c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b51e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10b      	bne.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b526:	4b4b      	ldr	r3, [pc, #300]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b52a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b52e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b532:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b536:	4a47      	ldr	r2, [pc, #284]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b538:	430b      	orrs	r3, r1
 800b53a:	6593      	str	r3, [r2, #88]	@ 0x58
 800b53c:	e003      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b53e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b542:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b552:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b554:	2300      	movs	r3, #0
 800b556:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b558:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b55c:	460b      	mov	r3, r1
 800b55e:	4313      	orrs	r3, r2
 800b560:	d03b      	beq.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b56a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b56e:	d01f      	beq.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b570:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b574:	d818      	bhi.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b576:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b57a:	d003      	beq.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b57c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b580:	d007      	beq.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b582:	e011      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b584:	4b33      	ldr	r3, [pc, #204]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b588:	4a32      	ldr	r2, [pc, #200]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b58a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b58e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b590:	e00f      	b.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b596:	3328      	adds	r3, #40	@ 0x28
 800b598:	2101      	movs	r1, #1
 800b59a:	4618      	mov	r0, r3
 800b59c:	f001 fc6a 	bl	800ce74 <RCCEx_PLL3_Config>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b5a6:	e004      	b.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b5ae:	e000      	b.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b5b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10b      	bne.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b5ba:	4b26      	ldr	r3, [pc, #152]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5ca:	4a22      	ldr	r2, [pc, #136]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5cc:	430b      	orrs	r3, r1
 800b5ce:	6553      	str	r3, [r2, #84]	@ 0x54
 800b5d0:	e003      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b5e6:	673b      	str	r3, [r7, #112]	@ 0x70
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	677b      	str	r3, [r7, #116]	@ 0x74
 800b5ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	d034      	beq.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d003      	beq.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b604:	d007      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b606:	e011      	b.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b608:	4b12      	ldr	r3, [pc, #72]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b60a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b60c:	4a11      	ldr	r2, [pc, #68]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b60e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b614:	e00e      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b61a:	3308      	adds	r3, #8
 800b61c:	2102      	movs	r1, #2
 800b61e:	4618      	mov	r0, r3
 800b620:	f001 fb76 	bl	800cd10 <RCCEx_PLL2_Config>
 800b624:	4603      	mov	r3, r0
 800b626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b62a:	e003      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b632:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10d      	bne.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b63c:	4b05      	ldr	r3, [pc, #20]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b63e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b640:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b64a:	4a02      	ldr	r2, [pc, #8]	@ (800b654 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b64c:	430b      	orrs	r3, r1
 800b64e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b650:	e006      	b.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b652:	bf00      	nop
 800b654:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b65c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b668:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b66c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b66e:	2300      	movs	r3, #0
 800b670:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b672:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b676:	460b      	mov	r3, r1
 800b678:	4313      	orrs	r3, r2
 800b67a:	d00c      	beq.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b67c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b680:	3328      	adds	r3, #40	@ 0x28
 800b682:	2102      	movs	r1, #2
 800b684:	4618      	mov	r0, r3
 800b686:	f001 fbf5 	bl	800ce74 <RCCEx_PLL3_Config>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b6a2:	663b      	str	r3, [r7, #96]	@ 0x60
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	667b      	str	r3, [r7, #100]	@ 0x64
 800b6a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	d038      	beq.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6be:	d018      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b6c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6c4:	d811      	bhi.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b6c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6ca:	d014      	beq.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b6cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6d0:	d80b      	bhi.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d011      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b6d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6da:	d106      	bne.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6dc:	4bc3      	ldr	r3, [pc, #780]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b6de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6e0:	4ac2      	ldr	r2, [pc, #776]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b6e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b6e8:	e008      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b6f0:	e004      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b6f2:	bf00      	nop
 800b6f4:	e002      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b6f6:	bf00      	nop
 800b6f8:	e000      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b6fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b700:	2b00      	cmp	r3, #0
 800b702:	d10b      	bne.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b704:	4bb9      	ldr	r3, [pc, #740]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b708:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b70c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b714:	4ab5      	ldr	r2, [pc, #724]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b716:	430b      	orrs	r3, r1
 800b718:	6553      	str	r3, [r2, #84]	@ 0x54
 800b71a:	e003      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b71c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b720:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b730:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b732:	2300      	movs	r3, #0
 800b734:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b736:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b73a:	460b      	mov	r3, r1
 800b73c:	4313      	orrs	r3, r2
 800b73e:	d009      	beq.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b740:	4baa      	ldr	r3, [pc, #680]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b744:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b74c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b74e:	4aa7      	ldr	r2, [pc, #668]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b750:	430b      	orrs	r3, r1
 800b752:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b760:	653b      	str	r3, [r7, #80]	@ 0x50
 800b762:	2300      	movs	r3, #0
 800b764:	657b      	str	r3, [r7, #84]	@ 0x54
 800b766:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b76a:	460b      	mov	r3, r1
 800b76c:	4313      	orrs	r3, r2
 800b76e:	d00a      	beq.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b770:	4b9e      	ldr	r3, [pc, #632]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b77c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b780:	4a9a      	ldr	r2, [pc, #616]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b782:	430b      	orrs	r3, r1
 800b784:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b792:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b794:	2300      	movs	r3, #0
 800b796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b798:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b79c:	460b      	mov	r3, r1
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	d009      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b7a2:	4b92      	ldr	r3, [pc, #584]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7a6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7b0:	4a8e      	ldr	r2, [pc, #568]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7b2:	430b      	orrs	r3, r1
 800b7b4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b7c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	d00e      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b7d2:	4b86      	ldr	r3, [pc, #536]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	4a85      	ldr	r2, [pc, #532]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b7dc:	6113      	str	r3, [r2, #16]
 800b7de:	4b83      	ldr	r3, [pc, #524]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7e0:	6919      	ldr	r1, [r3, #16]
 800b7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b7ea:	4a80      	ldr	r2, [pc, #512]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7ec:	430b      	orrs	r3, r1
 800b7ee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b7f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b7fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b7fe:	2300      	movs	r3, #0
 800b800:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b802:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b806:	460b      	mov	r3, r1
 800b808:	4313      	orrs	r3, r2
 800b80a:	d009      	beq.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b80c:	4b77      	ldr	r3, [pc, #476]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b80e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b810:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b81a:	4a74      	ldr	r2, [pc, #464]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b81c:	430b      	orrs	r3, r1
 800b81e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b82c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b82e:	2300      	movs	r3, #0
 800b830:	637b      	str	r3, [r7, #52]	@ 0x34
 800b832:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b836:	460b      	mov	r3, r1
 800b838:	4313      	orrs	r3, r2
 800b83a:	d00a      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b83c:	4b6b      	ldr	r3, [pc, #428]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b83e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b840:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b84c:	4a67      	ldr	r2, [pc, #412]	@ (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b84e:	430b      	orrs	r3, r1
 800b850:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85a:	2100      	movs	r1, #0
 800b85c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b85e:	f003 0301 	and.w	r3, r3, #1
 800b862:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b864:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b868:	460b      	mov	r3, r1
 800b86a:	4313      	orrs	r3, r2
 800b86c:	d011      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b86e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b872:	3308      	adds	r3, #8
 800b874:	2100      	movs	r1, #0
 800b876:	4618      	mov	r0, r3
 800b878:	f001 fa4a 	bl	800cd10 <RCCEx_PLL2_Config>
 800b87c:	4603      	mov	r3, r0
 800b87e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b886:	2b00      	cmp	r3, #0
 800b888:	d003      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b88a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b88e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89a:	2100      	movs	r1, #0
 800b89c:	6239      	str	r1, [r7, #32]
 800b89e:	f003 0302 	and.w	r3, r3, #2
 800b8a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	d011      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f001 fa2a 	bl	800cd10 <RCCEx_PLL2_Config>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b8c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d003      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b8ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b8d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8da:	2100      	movs	r1, #0
 800b8dc:	61b9      	str	r1, [r7, #24]
 800b8de:	f003 0304 	and.w	r3, r3, #4
 800b8e2:	61fb      	str	r3, [r7, #28]
 800b8e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	d011      	beq.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b8ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8f2:	3308      	adds	r3, #8
 800b8f4:	2102      	movs	r1, #2
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f001 fa0a 	bl	800cd10 <RCCEx_PLL2_Config>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b906:	2b00      	cmp	r3, #0
 800b908:	d003      	beq.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b90a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b90e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	2100      	movs	r1, #0
 800b91c:	6139      	str	r1, [r7, #16]
 800b91e:	f003 0308 	and.w	r3, r3, #8
 800b922:	617b      	str	r3, [r7, #20]
 800b924:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b928:	460b      	mov	r3, r1
 800b92a:	4313      	orrs	r3, r2
 800b92c:	d011      	beq.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b932:	3328      	adds	r3, #40	@ 0x28
 800b934:	2100      	movs	r1, #0
 800b936:	4618      	mov	r0, r3
 800b938:	f001 fa9c 	bl	800ce74 <RCCEx_PLL3_Config>
 800b93c:	4603      	mov	r3, r0
 800b93e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800b942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b94a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b94e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95a:	2100      	movs	r1, #0
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	f003 0310 	and.w	r3, r3, #16
 800b962:	60fb      	str	r3, [r7, #12]
 800b964:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b968:	460b      	mov	r3, r1
 800b96a:	4313      	orrs	r3, r2
 800b96c:	d011      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b972:	3328      	adds	r3, #40	@ 0x28
 800b974:	2101      	movs	r1, #1
 800b976:	4618      	mov	r0, r3
 800b978:	f001 fa7c 	bl	800ce74 <RCCEx_PLL3_Config>
 800b97c:	4603      	mov	r3, r0
 800b97e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b986:	2b00      	cmp	r3, #0
 800b988:	d003      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b98a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b98e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99a:	2100      	movs	r1, #0
 800b99c:	6039      	str	r1, [r7, #0]
 800b99e:	f003 0320 	and.w	r3, r3, #32
 800b9a2:	607b      	str	r3, [r7, #4]
 800b9a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	d011      	beq.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9b2:	3328      	adds	r3, #40	@ 0x28
 800b9b4:	2102      	movs	r1, #2
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f001 fa5c 	bl	800ce74 <RCCEx_PLL3_Config>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b9c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d003      	beq.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b9ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800b9d2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d101      	bne.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	e000      	b.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b9de:	2301      	movs	r3, #1
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9ec:	58024400 	.word	0x58024400

0800b9f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b090      	sub	sp, #64	@ 0x40
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b9fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9fe:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ba02:	430b      	orrs	r3, r1
 800ba04:	f040 8094 	bne.w	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ba08:	4b9e      	ldr	r3, [pc, #632]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba0c:	f003 0307 	and.w	r3, r3, #7
 800ba10:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ba12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba14:	2b04      	cmp	r3, #4
 800ba16:	f200 8087 	bhi.w	800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ba1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ba1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba20:	0800ba35 	.word	0x0800ba35
 800ba24:	0800ba5d 	.word	0x0800ba5d
 800ba28:	0800ba85 	.word	0x0800ba85
 800ba2c:	0800bb21 	.word	0x0800bb21
 800ba30:	0800baad 	.word	0x0800baad
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba34:	4b93      	ldr	r3, [pc, #588]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba40:	d108      	bne.n	800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba46:	4618      	mov	r0, r3
 800ba48:	f001 f810 	bl	800ca6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba50:	f000 bd45 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba54:	2300      	movs	r3, #0
 800ba56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba58:	f000 bd41 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba5c:	4b89      	ldr	r3, [pc, #548]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba68:	d108      	bne.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba6a:	f107 0318 	add.w	r3, r7, #24
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 fd54 	bl	800c51c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba78:	f000 bd31 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba80:	f000 bd2d 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba84:	4b7f      	ldr	r3, [pc, #508]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba90:	d108      	bne.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba92:	f107 030c 	add.w	r3, r7, #12
 800ba96:	4618      	mov	r0, r3
 800ba98:	f000 fe94 	bl	800c7c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baa0:	f000 bd1d 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baa8:	f000 bd19 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800baac:	4b75      	ldr	r3, [pc, #468]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800baae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bab0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bab4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bab6:	4b73      	ldr	r3, [pc, #460]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f003 0304 	and.w	r3, r3, #4
 800babe:	2b04      	cmp	r3, #4
 800bac0:	d10c      	bne.n	800badc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d109      	bne.n	800badc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bac8:	4b6e      	ldr	r3, [pc, #440]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	08db      	lsrs	r3, r3, #3
 800bace:	f003 0303 	and.w	r3, r3, #3
 800bad2:	4a6d      	ldr	r2, [pc, #436]	@ (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bad4:	fa22 f303 	lsr.w	r3, r2, r3
 800bad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bada:	e01f      	b.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800badc:	4b69      	ldr	r3, [pc, #420]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bae8:	d106      	bne.n	800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800baea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800baf0:	d102      	bne.n	800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800baf2:	4b66      	ldr	r3, [pc, #408]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800baf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800baf6:	e011      	b.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800baf8:	4b62      	ldr	r3, [pc, #392]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb04:	d106      	bne.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bb06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb0c:	d102      	bne.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb0e:	4b60      	ldr	r3, [pc, #384]	@ (800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bb10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb12:	e003      	b.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb14:	2300      	movs	r3, #0
 800bb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bb18:	f000 bce1 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bb1c:	f000 bcdf 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bb20:	4b5c      	ldr	r3, [pc, #368]	@ (800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb24:	f000 bcdb 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb2c:	f000 bcd7 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bb30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb34:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800bb38:	430b      	orrs	r3, r1
 800bb3a:	f040 80ad 	bne.w	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bb3e:	4b51      	ldr	r3, [pc, #324]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb42:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800bb46:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb4e:	d056      	beq.n	800bbfe <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb56:	f200 8090 	bhi.w	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5c:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb5e:	f000 8088 	beq.w	800bc72 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb64:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb66:	f200 8088 	bhi.w	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb6c:	2b80      	cmp	r3, #128	@ 0x80
 800bb6e:	d032      	beq.n	800bbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb72:	2b80      	cmp	r3, #128	@ 0x80
 800bb74:	f200 8081 	bhi.w	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bb78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d003      	beq.n	800bb86 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bb7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb80:	2b40      	cmp	r3, #64	@ 0x40
 800bb82:	d014      	beq.n	800bbae <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bb84:	e079      	b.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb86:	4b3f      	ldr	r3, [pc, #252]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb92:	d108      	bne.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f000 ff67 	bl	800ca6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bba2:	f000 bc9c 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bba6:	2300      	movs	r3, #0
 800bba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbaa:	f000 bc98 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbae:	4b35      	ldr	r3, [pc, #212]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bbba:	d108      	bne.n	800bbce <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbbc:	f107 0318 	add.w	r3, r7, #24
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f000 fcab 	bl	800c51c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbca:	f000 bc88 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbd2:	f000 bc84 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbd6:	4b2b      	ldr	r3, [pc, #172]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bbde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbe2:	d108      	bne.n	800bbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbe4:	f107 030c 	add.w	r3, r7, #12
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f000 fdeb 	bl	800c7c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbf2:	f000 bc74 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbfa:	f000 bc70 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bbfe:	4b21      	ldr	r3, [pc, #132]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bc06:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc08:	4b1e      	ldr	r3, [pc, #120]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 0304 	and.w	r3, r3, #4
 800bc10:	2b04      	cmp	r3, #4
 800bc12:	d10c      	bne.n	800bc2e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800bc14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d109      	bne.n	800bc2e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc1a:	4b1a      	ldr	r3, [pc, #104]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	08db      	lsrs	r3, r3, #3
 800bc20:	f003 0303 	and.w	r3, r3, #3
 800bc24:	4a18      	ldr	r2, [pc, #96]	@ (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bc26:	fa22 f303 	lsr.w	r3, r2, r3
 800bc2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc2c:	e01f      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc2e:	4b15      	ldr	r3, [pc, #84]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc3a:	d106      	bne.n	800bc4a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800bc3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc42:	d102      	bne.n	800bc4a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc44:	4b11      	ldr	r3, [pc, #68]	@ (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bc46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc48:	e011      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc4a:	4b0e      	ldr	r3, [pc, #56]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc56:	d106      	bne.n	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800bc58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc5e:	d102      	bne.n	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc60:	4b0b      	ldr	r3, [pc, #44]	@ (800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bc62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc64:	e003      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc66:	2300      	movs	r3, #0
 800bc68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bc6a:	f000 bc38 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc6e:	f000 bc36 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc72:	4b08      	ldr	r3, [pc, #32]	@ (800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bc74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc76:	f000 bc32 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc7e:	f000 bc2e 	b.w	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc82:	bf00      	nop
 800bc84:	58024400 	.word	0x58024400
 800bc88:	03d09000 	.word	0x03d09000
 800bc8c:	003d0900 	.word	0x003d0900
 800bc90:	017d7840 	.word	0x017d7840
 800bc94:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bc98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc9c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800bca0:	430b      	orrs	r3, r1
 800bca2:	f040 809c 	bne.w	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bca6:	4b9e      	ldr	r3, [pc, #632]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcaa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800bcae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bcb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bcb6:	d054      	beq.n	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bcbe:	f200 808b 	bhi.w	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bcc8:	f000 8083 	beq.w	800bdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800bccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bcd2:	f200 8081 	bhi.w	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bcdc:	d02f      	beq.n	800bd3e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800bcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bce4:	d878      	bhi.n	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d004      	beq.n	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800bcec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bcf2:	d012      	beq.n	800bd1a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800bcf4:	e070      	b.n	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bcf6:	4b8a      	ldr	r3, [pc, #552]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bcfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd02:	d107      	bne.n	800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f000 feaf 	bl	800ca6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd12:	e3e4      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd14:	2300      	movs	r3, #0
 800bd16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd18:	e3e1      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd1a:	4b81      	ldr	r3, [pc, #516]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd26:	d107      	bne.n	800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd28:	f107 0318 	add.w	r3, r7, #24
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f000 fbf5 	bl	800c51c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd36:	e3d2      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd3c:	e3cf      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd3e:	4b78      	ldr	r3, [pc, #480]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd4a:	d107      	bne.n	800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd4c:	f107 030c 	add.w	r3, r7, #12
 800bd50:	4618      	mov	r0, r3
 800bd52:	f000 fd37 	bl	800c7c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd5a:	e3c0      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd60:	e3bd      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd62:	4b6f      	ldr	r3, [pc, #444]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bd6a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd6c:	4b6c      	ldr	r3, [pc, #432]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 0304 	and.w	r3, r3, #4
 800bd74:	2b04      	cmp	r3, #4
 800bd76:	d10c      	bne.n	800bd92 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800bd78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d109      	bne.n	800bd92 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd7e:	4b68      	ldr	r3, [pc, #416]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	08db      	lsrs	r3, r3, #3
 800bd84:	f003 0303 	and.w	r3, r3, #3
 800bd88:	4a66      	ldr	r2, [pc, #408]	@ (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bd8a:	fa22 f303 	lsr.w	r3, r2, r3
 800bd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd90:	e01e      	b.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd92:	4b63      	ldr	r3, [pc, #396]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd9e:	d106      	bne.n	800bdae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800bda0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bda2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bda6:	d102      	bne.n	800bdae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bda8:	4b5f      	ldr	r3, [pc, #380]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bdaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdac:	e010      	b.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdae:	4b5c      	ldr	r3, [pc, #368]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdba:	d106      	bne.n	800bdca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800bdbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdc2:	d102      	bne.n	800bdca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bdc4:	4b59      	ldr	r3, [pc, #356]	@ (800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bdc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdc8:	e002      	b.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bdce:	e386      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bdd0:	e385      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bdd2:	4b57      	ldr	r3, [pc, #348]	@ (800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bdd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdd6:	e382      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bddc:	e37f      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bdde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bde2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800bde6:	430b      	orrs	r3, r1
 800bde8:	f040 80a7 	bne.w	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bdec:	4b4c      	ldr	r3, [pc, #304]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdf0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800bdf4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bdfc:	d055      	beq.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800be04:	f200 8096 	bhi.w	800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800be08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800be0e:	f000 8084 	beq.w	800bf1a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800be12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800be18:	f200 808c 	bhi.w	800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800be1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be22:	d030      	beq.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800be24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be2a:	f200 8083 	bhi.w	800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800be2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be30:	2b00      	cmp	r3, #0
 800be32:	d004      	beq.n	800be3e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800be34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be3a:	d012      	beq.n	800be62 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800be3c:	e07a      	b.n	800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be3e:	4b38      	ldr	r3, [pc, #224]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be4a:	d107      	bne.n	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be50:	4618      	mov	r0, r3
 800be52:	f000 fe0b 	bl	800ca6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be5a:	e340      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be5c:	2300      	movs	r3, #0
 800be5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be60:	e33d      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be62:	4b2f      	ldr	r3, [pc, #188]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be6e:	d107      	bne.n	800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be70:	f107 0318 	add.w	r3, r7, #24
 800be74:	4618      	mov	r0, r3
 800be76:	f000 fb51 	bl	800c51c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be7e:	e32e      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be80:	2300      	movs	r3, #0
 800be82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be84:	e32b      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be86:	4b26      	ldr	r3, [pc, #152]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be92:	d107      	bne.n	800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be94:	f107 030c 	add.w	r3, r7, #12
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 fc93 	bl	800c7c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bea2:	e31c      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bea4:	2300      	movs	r3, #0
 800bea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bea8:	e319      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800beaa:	4b1d      	ldr	r3, [pc, #116]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800beac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800beae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800beb2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800beb4:	4b1a      	ldr	r3, [pc, #104]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f003 0304 	and.w	r3, r3, #4
 800bebc:	2b04      	cmp	r3, #4
 800bebe:	d10c      	bne.n	800beda <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800bec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d109      	bne.n	800beda <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bec6:	4b16      	ldr	r3, [pc, #88]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	08db      	lsrs	r3, r3, #3
 800becc:	f003 0303 	and.w	r3, r3, #3
 800bed0:	4a14      	ldr	r2, [pc, #80]	@ (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bed2:	fa22 f303 	lsr.w	r3, r2, r3
 800bed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bed8:	e01e      	b.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800beda:	4b11      	ldr	r3, [pc, #68]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bee6:	d106      	bne.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800bee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800beee:	d102      	bne.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bef0:	4b0d      	ldr	r3, [pc, #52]	@ (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bef4:	e010      	b.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bef6:	4b0a      	ldr	r3, [pc, #40]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800befe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf02:	d106      	bne.n	800bf12 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800bf04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf0a:	d102      	bne.n	800bf12 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf0c:	4b07      	ldr	r3, [pc, #28]	@ (800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bf0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf10:	e002      	b.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf12:	2300      	movs	r3, #0
 800bf14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bf16:	e2e2      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf18:	e2e1      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf1a:	4b05      	ldr	r3, [pc, #20]	@ (800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bf1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf1e:	e2de      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf20:	58024400 	.word	0x58024400
 800bf24:	03d09000 	.word	0x03d09000
 800bf28:	003d0900 	.word	0x003d0900
 800bf2c:	017d7840 	.word	0x017d7840
 800bf30:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf38:	e2d1      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bf3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf3e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800bf42:	430b      	orrs	r3, r1
 800bf44:	f040 809c 	bne.w	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bf48:	4b93      	ldr	r3, [pc, #588]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bf4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf4c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800bf50:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bf52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf58:	d054      	beq.n	800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf60:	f200 808b 	bhi.w	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bf64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bf6a:	f000 8083 	beq.w	800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800bf6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bf74:	f200 8081 	bhi.w	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bf78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf7e:	d02f      	beq.n	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800bf80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf86:	d878      	bhi.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bf88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d004      	beq.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800bf8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf94:	d012      	beq.n	800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800bf96:	e070      	b.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf98:	4b7f      	ldr	r3, [pc, #508]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bfa4:	d107      	bne.n	800bfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f000 fd5e 	bl	800ca6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfb4:	e293      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfba:	e290      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfbc:	4b76      	ldr	r3, [pc, #472]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bfc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bfc8:	d107      	bne.n	800bfda <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfca:	f107 0318 	add.w	r3, r7, #24
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f000 faa4 	bl	800c51c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfd8:	e281      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfde:	e27e      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bfe0:	4b6d      	ldr	r3, [pc, #436]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bfe8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfec:	d107      	bne.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfee:	f107 030c 	add.w	r3, r7, #12
 800bff2:	4618      	mov	r0, r3
 800bff4:	f000 fbe6 	bl	800c7c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bffc:	e26f      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bffe:	2300      	movs	r3, #0
 800c000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c002:	e26c      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c004:	4b64      	ldr	r3, [pc, #400]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c008:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c00c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c00e:	4b62      	ldr	r3, [pc, #392]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f003 0304 	and.w	r3, r3, #4
 800c016:	2b04      	cmp	r3, #4
 800c018:	d10c      	bne.n	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d109      	bne.n	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c020:	4b5d      	ldr	r3, [pc, #372]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	08db      	lsrs	r3, r3, #3
 800c026:	f003 0303 	and.w	r3, r3, #3
 800c02a:	4a5c      	ldr	r2, [pc, #368]	@ (800c19c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c02c:	fa22 f303 	lsr.w	r3, r2, r3
 800c030:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c032:	e01e      	b.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c034:	4b58      	ldr	r3, [pc, #352]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c03c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c040:	d106      	bne.n	800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c048:	d102      	bne.n	800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c04a:	4b55      	ldr	r3, [pc, #340]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c04c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c04e:	e010      	b.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c050:	4b51      	ldr	r3, [pc, #324]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c05c:	d106      	bne.n	800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c064:	d102      	bne.n	800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c066:	4b4f      	ldr	r3, [pc, #316]	@ (800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c06a:	e002      	b.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c06c:	2300      	movs	r3, #0
 800c06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c070:	e235      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c072:	e234      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c074:	4b4c      	ldr	r3, [pc, #304]	@ (800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c078:	e231      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c07a:	2300      	movs	r3, #0
 800c07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c07e:	e22e      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c080:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c084:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c088:	430b      	orrs	r3, r1
 800c08a:	f040 808f 	bne.w	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c08e:	4b42      	ldr	r3, [pc, #264]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c092:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c096:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800c098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c09a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c09e:	d06b      	beq.n	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c0a6:	d874      	bhi.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c0ae:	d056      	beq.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c0b6:	d86c      	bhi.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c0be:	d03b      	beq.n	800c138 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c0c6:	d864      	bhi.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0ce:	d021      	beq.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0d6:	d85c      	bhi.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d004      	beq.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0e4:	d004      	beq.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c0e6:	e054      	b.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c0e8:	f7fe fa4c 	bl	800a584 <HAL_RCC_GetPCLK1Freq>
 800c0ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c0ee:	e1f6      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0f0:	4b29      	ldr	r3, [pc, #164]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c0f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c0fc:	d107      	bne.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0fe:	f107 0318 	add.w	r3, r7, #24
 800c102:	4618      	mov	r0, r3
 800c104:	f000 fa0a 	bl	800c51c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c10c:	e1e7      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c10e:	2300      	movs	r3, #0
 800c110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c112:	e1e4      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c114:	4b20      	ldr	r3, [pc, #128]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c11c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c120:	d107      	bne.n	800c132 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c122:	f107 030c 	add.w	r3, r7, #12
 800c126:	4618      	mov	r0, r3
 800c128:	f000 fb4c 	bl	800c7c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c130:	e1d5      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c132:	2300      	movs	r3, #0
 800c134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c136:	e1d2      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c138:	4b17      	ldr	r3, [pc, #92]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 0304 	and.w	r3, r3, #4
 800c140:	2b04      	cmp	r3, #4
 800c142:	d109      	bne.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c144:	4b14      	ldr	r3, [pc, #80]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	08db      	lsrs	r3, r3, #3
 800c14a:	f003 0303 	and.w	r3, r3, #3
 800c14e:	4a13      	ldr	r2, [pc, #76]	@ (800c19c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c150:	fa22 f303 	lsr.w	r3, r2, r3
 800c154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c156:	e1c2      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c15c:	e1bf      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c15e:	4b0e      	ldr	r3, [pc, #56]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c16a:	d102      	bne.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c16c:	4b0c      	ldr	r3, [pc, #48]	@ (800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c170:	e1b5      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c172:	2300      	movs	r3, #0
 800c174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c176:	e1b2      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c178:	4b07      	ldr	r3, [pc, #28]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c180:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c184:	d102      	bne.n	800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c186:	4b07      	ldr	r3, [pc, #28]	@ (800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c18a:	e1a8      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c18c:	2300      	movs	r3, #0
 800c18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c190:	e1a5      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c192:	2300      	movs	r3, #0
 800c194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c196:	e1a2      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c198:	58024400 	.word	0x58024400
 800c19c:	03d09000 	.word	0x03d09000
 800c1a0:	003d0900 	.word	0x003d0900
 800c1a4:	017d7840 	.word	0x017d7840
 800c1a8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c1ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1b0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c1b4:	430b      	orrs	r3, r1
 800c1b6:	d173      	bne.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c1b8:	4b9c      	ldr	r3, [pc, #624]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c1ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c1c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1c8:	d02f      	beq.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1d0:	d863      	bhi.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d004      	beq.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1de:	d012      	beq.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c1e0:	e05b      	b.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1e2:	4b92      	ldr	r3, [pc, #584]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1ee:	d107      	bne.n	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1f0:	f107 0318 	add.w	r3, r7, #24
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 f991 	bl	800c51c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1fe:	e16e      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c200:	2300      	movs	r3, #0
 800c202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c204:	e16b      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c206:	4b89      	ldr	r3, [pc, #548]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c20e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c212:	d107      	bne.n	800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c214:	f107 030c 	add.w	r3, r7, #12
 800c218:	4618      	mov	r0, r3
 800c21a:	f000 fad3 	bl	800c7c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c222:	e15c      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c224:	2300      	movs	r3, #0
 800c226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c228:	e159      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c22a:	4b80      	ldr	r3, [pc, #512]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c22c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c22e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c232:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c234:	4b7d      	ldr	r3, [pc, #500]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f003 0304 	and.w	r3, r3, #4
 800c23c:	2b04      	cmp	r3, #4
 800c23e:	d10c      	bne.n	800c25a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c242:	2b00      	cmp	r3, #0
 800c244:	d109      	bne.n	800c25a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c246:	4b79      	ldr	r3, [pc, #484]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	08db      	lsrs	r3, r3, #3
 800c24c:	f003 0303 	and.w	r3, r3, #3
 800c250:	4a77      	ldr	r2, [pc, #476]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c252:	fa22 f303 	lsr.w	r3, r2, r3
 800c256:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c258:	e01e      	b.n	800c298 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c25a:	4b74      	ldr	r3, [pc, #464]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c266:	d106      	bne.n	800c276 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c26a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c26e:	d102      	bne.n	800c276 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c270:	4b70      	ldr	r3, [pc, #448]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c274:	e010      	b.n	800c298 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c276:	4b6d      	ldr	r3, [pc, #436]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c27e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c282:	d106      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c286:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c28a:	d102      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c28c:	4b6a      	ldr	r3, [pc, #424]	@ (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c290:	e002      	b.n	800c298 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c292:	2300      	movs	r3, #0
 800c294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c296:	e122      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c298:	e121      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c29a:	2300      	movs	r3, #0
 800c29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c29e:	e11e      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c2a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2a4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c2a8:	430b      	orrs	r3, r1
 800c2aa:	d133      	bne.n	800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c2ac:	4b5f      	ldr	r3, [pc, #380]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c2b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d004      	beq.n	800c2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2c2:	d012      	beq.n	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c2c4:	e023      	b.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2c6:	4b59      	ldr	r3, [pc, #356]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c2ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c2d2:	d107      	bne.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f000 fbc7 	bl	800ca6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2e2:	e0fc      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2e8:	e0f9      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2ea:	4b50      	ldr	r3, [pc, #320]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c2f6:	d107      	bne.n	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2f8:	f107 0318 	add.w	r3, r7, #24
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 f90d 	bl	800c51c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c302:	6a3b      	ldr	r3, [r7, #32]
 800c304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c306:	e0ea      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c308:	2300      	movs	r3, #0
 800c30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c30c:	e0e7      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c30e:	2300      	movs	r3, #0
 800c310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c312:	e0e4      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c314:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c318:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c31c:	430b      	orrs	r3, r1
 800c31e:	f040 808d 	bne.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c322:	4b42      	ldr	r3, [pc, #264]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c326:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800c32a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c32e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c332:	d06b      	beq.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c336:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c33a:	d874      	bhi.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c33e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c342:	d056      	beq.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c34a:	d86c      	bhi.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c34e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c352:	d03b      	beq.n	800c3cc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c356:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c35a:	d864      	bhi.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c35e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c362:	d021      	beq.n	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c36a:	d85c      	bhi.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d004      	beq.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c374:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c378:	d004      	beq.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c37a:	e054      	b.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c37c:	f000 f8b8 	bl	800c4f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c380:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c382:	e0ac      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c384:	4b29      	ldr	r3, [pc, #164]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c38c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c390:	d107      	bne.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c392:	f107 0318 	add.w	r3, r7, #24
 800c396:	4618      	mov	r0, r3
 800c398:	f000 f8c0 	bl	800c51c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3a0:	e09d      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3a6:	e09a      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3a8:	4b20      	ldr	r3, [pc, #128]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3b4:	d107      	bne.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3b6:	f107 030c 	add.w	r3, r7, #12
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 fa02 	bl	800c7c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3c4:	e08b      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3ca:	e088      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c3cc:	4b17      	ldr	r3, [pc, #92]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 0304 	and.w	r3, r3, #4
 800c3d4:	2b04      	cmp	r3, #4
 800c3d6:	d109      	bne.n	800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3d8:	4b14      	ldr	r3, [pc, #80]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	08db      	lsrs	r3, r3, #3
 800c3de:	f003 0303 	and.w	r3, r3, #3
 800c3e2:	4a13      	ldr	r2, [pc, #76]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c3e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3ea:	e078      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3f0:	e075      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c3f2:	4b0e      	ldr	r3, [pc, #56]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3fe:	d102      	bne.n	800c406 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c400:	4b0c      	ldr	r3, [pc, #48]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c404:	e06b      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c406:	2300      	movs	r3, #0
 800c408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c40a:	e068      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c40c:	4b07      	ldr	r3, [pc, #28]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c414:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c418:	d102      	bne.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c41a:	4b07      	ldr	r3, [pc, #28]	@ (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c41e:	e05e      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c424:	e05b      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c426:	2300      	movs	r3, #0
 800c428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c42a:	e058      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c42c:	58024400 	.word	0x58024400
 800c430:	03d09000 	.word	0x03d09000
 800c434:	003d0900 	.word	0x003d0900
 800c438:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c43c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c440:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c444:	430b      	orrs	r3, r1
 800c446:	d148      	bne.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c448:	4b27      	ldr	r3, [pc, #156]	@ (800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c44a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c44c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c450:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c454:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c458:	d02a      	beq.n	800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c460:	d838      	bhi.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c464:	2b00      	cmp	r3, #0
 800c466:	d004      	beq.n	800c472 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c46a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c46e:	d00d      	beq.n	800c48c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c470:	e030      	b.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c472:	4b1d      	ldr	r3, [pc, #116]	@ (800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c47a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c47e:	d102      	bne.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c480:	4b1a      	ldr	r3, [pc, #104]	@ (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c484:	e02b      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c486:	2300      	movs	r3, #0
 800c488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c48a:	e028      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c48c:	4b16      	ldr	r3, [pc, #88]	@ (800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c494:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c498:	d107      	bne.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c49a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f000 fae4 	bl	800ca6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4a8:	e019      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4ae:	e016      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4b0:	4b0d      	ldr	r3, [pc, #52]	@ (800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c4bc:	d107      	bne.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4be:	f107 0318 	add.w	r3, r7, #24
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f000 f82a 	bl	800c51c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4cc:	e007      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4d2:	e004      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4d8:	e001      	b.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800c4de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3740      	adds	r7, #64	@ 0x40
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	58024400 	.word	0x58024400
 800c4ec:	017d7840 	.word	0x017d7840

0800c4f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c4f4:	f7fe f816 	bl	800a524 <HAL_RCC_GetHCLKFreq>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	4b06      	ldr	r3, [pc, #24]	@ (800c514 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c4fc:	6a1b      	ldr	r3, [r3, #32]
 800c4fe:	091b      	lsrs	r3, r3, #4
 800c500:	f003 0307 	and.w	r3, r3, #7
 800c504:	4904      	ldr	r1, [pc, #16]	@ (800c518 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c506:	5ccb      	ldrb	r3, [r1, r3]
 800c508:	f003 031f 	and.w	r3, r3, #31
 800c50c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c510:	4618      	mov	r0, r3
 800c512:	bd80      	pop	{r7, pc}
 800c514:	58024400 	.word	0x58024400
 800c518:	08015c9c 	.word	0x08015c9c

0800c51c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b089      	sub	sp, #36	@ 0x24
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c524:	4ba1      	ldr	r3, [pc, #644]	@ (800c7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c528:	f003 0303 	and.w	r3, r3, #3
 800c52c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c52e:	4b9f      	ldr	r3, [pc, #636]	@ (800c7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c532:	0b1b      	lsrs	r3, r3, #12
 800c534:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c538:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c53a:	4b9c      	ldr	r3, [pc, #624]	@ (800c7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c53e:	091b      	lsrs	r3, r3, #4
 800c540:	f003 0301 	and.w	r3, r3, #1
 800c544:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c546:	4b99      	ldr	r3, [pc, #612]	@ (800c7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c54a:	08db      	lsrs	r3, r3, #3
 800c54c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c550:	693a      	ldr	r2, [r7, #16]
 800c552:	fb02 f303 	mul.w	r3, r2, r3
 800c556:	ee07 3a90 	vmov	s15, r3
 800c55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c55e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	2b00      	cmp	r3, #0
 800c566:	f000 8111 	beq.w	800c78c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	f000 8083 	beq.w	800c678 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	2b02      	cmp	r3, #2
 800c576:	f200 80a1 	bhi.w	800c6bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d003      	beq.n	800c588 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	2b01      	cmp	r3, #1
 800c584:	d056      	beq.n	800c634 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c586:	e099      	b.n	800c6bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c588:	4b88      	ldr	r3, [pc, #544]	@ (800c7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f003 0320 	and.w	r3, r3, #32
 800c590:	2b00      	cmp	r3, #0
 800c592:	d02d      	beq.n	800c5f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c594:	4b85      	ldr	r3, [pc, #532]	@ (800c7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	08db      	lsrs	r3, r3, #3
 800c59a:	f003 0303 	and.w	r3, r3, #3
 800c59e:	4a84      	ldr	r2, [pc, #528]	@ (800c7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c5a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c5a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	ee07 3a90 	vmov	s15, r3
 800c5ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	ee07 3a90 	vmov	s15, r3
 800c5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5be:	4b7b      	ldr	r3, [pc, #492]	@ (800c7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5c6:	ee07 3a90 	vmov	s15, r3
 800c5ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c5e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c5ee:	e087      	b.n	800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	ee07 3a90 	vmov	s15, r3
 800c5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c5fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c602:	4b6a      	ldr	r3, [pc, #424]	@ (800c7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c612:	ed97 6a03 	vldr	s12, [r7, #12]
 800c616:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c61a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c61e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c62e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c632:	e065      	b.n	800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	ee07 3a90 	vmov	s15, r3
 800c63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c7bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c646:	4b59      	ldr	r3, [pc, #356]	@ (800c7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c64e:	ee07 3a90 	vmov	s15, r3
 800c652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c656:	ed97 6a03 	vldr	s12, [r7, #12]
 800c65a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c65e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c66a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c66e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c676:	e043      	b.n	800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	ee07 3a90 	vmov	s15, r3
 800c67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c682:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c68a:	4b48      	ldr	r3, [pc, #288]	@ (800c7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c68c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c692:	ee07 3a90 	vmov	s15, r3
 800c696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c69a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c69e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6ba:	e021      	b.n	800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	ee07 3a90 	vmov	s15, r3
 800c6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c7bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6ce:	4b37      	ldr	r3, [pc, #220]	@ (800c7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6d6:	ee07 3a90 	vmov	s15, r3
 800c6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c700:	4b2a      	ldr	r3, [pc, #168]	@ (800c7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c704:	0a5b      	lsrs	r3, r3, #9
 800c706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c70a:	ee07 3a90 	vmov	s15, r3
 800c70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c712:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c716:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c71a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c71e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c726:	ee17 2a90 	vmov	r2, s15
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c72e:	4b1f      	ldr	r3, [pc, #124]	@ (800c7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c732:	0c1b      	lsrs	r3, r3, #16
 800c734:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c738:	ee07 3a90 	vmov	s15, r3
 800c73c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c740:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c744:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c748:	edd7 6a07 	vldr	s13, [r7, #28]
 800c74c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c754:	ee17 2a90 	vmov	r2, s15
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c75c:	4b13      	ldr	r3, [pc, #76]	@ (800c7ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c760:	0e1b      	lsrs	r3, r3, #24
 800c762:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c766:	ee07 3a90 	vmov	s15, r3
 800c76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c76e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c772:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c776:	edd7 6a07 	vldr	s13, [r7, #28]
 800c77a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c77e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c782:	ee17 2a90 	vmov	r2, s15
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c78a:	e008      	b.n	800c79e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	609a      	str	r2, [r3, #8]
}
 800c79e:	bf00      	nop
 800c7a0:	3724      	adds	r7, #36	@ 0x24
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	58024400 	.word	0x58024400
 800c7b0:	03d09000 	.word	0x03d09000
 800c7b4:	46000000 	.word	0x46000000
 800c7b8:	4c742400 	.word	0x4c742400
 800c7bc:	4a742400 	.word	0x4a742400
 800c7c0:	4bbebc20 	.word	0x4bbebc20

0800c7c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b089      	sub	sp, #36	@ 0x24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c7cc:	4ba1      	ldr	r3, [pc, #644]	@ (800ca54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7d0:	f003 0303 	and.w	r3, r3, #3
 800c7d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c7d6:	4b9f      	ldr	r3, [pc, #636]	@ (800ca54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7da:	0d1b      	lsrs	r3, r3, #20
 800c7dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c7e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c7e2:	4b9c      	ldr	r3, [pc, #624]	@ (800ca54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7e6:	0a1b      	lsrs	r3, r3, #8
 800c7e8:	f003 0301 	and.w	r3, r3, #1
 800c7ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c7ee:	4b99      	ldr	r3, [pc, #612]	@ (800ca54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7f2:	08db      	lsrs	r3, r3, #3
 800c7f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7f8:	693a      	ldr	r2, [r7, #16]
 800c7fa:	fb02 f303 	mul.w	r3, r2, r3
 800c7fe:	ee07 3a90 	vmov	s15, r3
 800c802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c806:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f000 8111 	beq.w	800ca34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	2b02      	cmp	r3, #2
 800c816:	f000 8083 	beq.w	800c920 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c81a:	69bb      	ldr	r3, [r7, #24]
 800c81c:	2b02      	cmp	r3, #2
 800c81e:	f200 80a1 	bhi.w	800c964 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d003      	beq.n	800c830 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c828:	69bb      	ldr	r3, [r7, #24]
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d056      	beq.n	800c8dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c82e:	e099      	b.n	800c964 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c830:	4b88      	ldr	r3, [pc, #544]	@ (800ca54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f003 0320 	and.w	r3, r3, #32
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d02d      	beq.n	800c898 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c83c:	4b85      	ldr	r3, [pc, #532]	@ (800ca54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	08db      	lsrs	r3, r3, #3
 800c842:	f003 0303 	and.w	r3, r3, #3
 800c846:	4a84      	ldr	r2, [pc, #528]	@ (800ca58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c848:	fa22 f303 	lsr.w	r3, r2, r3
 800c84c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	ee07 3a90 	vmov	s15, r3
 800c854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	ee07 3a90 	vmov	s15, r3
 800c85e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c866:	4b7b      	ldr	r3, [pc, #492]	@ (800ca54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c86e:	ee07 3a90 	vmov	s15, r3
 800c872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c876:	ed97 6a03 	vldr	s12, [r7, #12]
 800c87a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c87e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c88a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c892:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c896:	e087      	b.n	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	ee07 3a90 	vmov	s15, r3
 800c89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ca60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c8a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8aa:	4b6a      	ldr	r3, [pc, #424]	@ (800ca54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8b2:	ee07 3a90 	vmov	s15, r3
 800c8b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c8ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8da:	e065      	b.n	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	ee07 3a90 	vmov	s15, r3
 800c8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ca64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ee:	4b59      	ldr	r3, [pc, #356]	@ (800ca54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f6:	ee07 3a90 	vmov	s15, r3
 800c8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800c902:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c90e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c91a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c91e:	e043      	b.n	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	ee07 3a90 	vmov	s15, r3
 800c926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c92a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ca68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c932:	4b48      	ldr	r3, [pc, #288]	@ (800ca54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c93a:	ee07 3a90 	vmov	s15, r3
 800c93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c942:	ed97 6a03 	vldr	s12, [r7, #12]
 800c946:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c95e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c962:	e021      	b.n	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	ee07 3a90 	vmov	s15, r3
 800c96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ca64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c976:	4b37      	ldr	r3, [pc, #220]	@ (800ca54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c97e:	ee07 3a90 	vmov	s15, r3
 800c982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c986:	ed97 6a03 	vldr	s12, [r7, #12]
 800c98a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c9a8:	4b2a      	ldr	r3, [pc, #168]	@ (800ca54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ac:	0a5b      	lsrs	r3, r3, #9
 800c9ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9b2:	ee07 3a90 	vmov	s15, r3
 800c9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c9be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9ce:	ee17 2a90 	vmov	r2, s15
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c9d6:	4b1f      	ldr	r3, [pc, #124]	@ (800ca54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9da:	0c1b      	lsrs	r3, r3, #16
 800c9dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9e0:	ee07 3a90 	vmov	s15, r3
 800c9e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c9ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9fc:	ee17 2a90 	vmov	r2, s15
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ca04:	4b13      	ldr	r3, [pc, #76]	@ (800ca54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca08:	0e1b      	lsrs	r3, r3, #24
 800ca0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca0e:	ee07 3a90 	vmov	s15, r3
 800ca12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ca1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca2a:	ee17 2a90 	vmov	r2, s15
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ca32:	e008      	b.n	800ca46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	609a      	str	r2, [r3, #8]
}
 800ca46:	bf00      	nop
 800ca48:	3724      	adds	r7, #36	@ 0x24
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	58024400 	.word	0x58024400
 800ca58:	03d09000 	.word	0x03d09000
 800ca5c:	46000000 	.word	0x46000000
 800ca60:	4c742400 	.word	0x4c742400
 800ca64:	4a742400 	.word	0x4a742400
 800ca68:	4bbebc20 	.word	0x4bbebc20

0800ca6c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b089      	sub	sp, #36	@ 0x24
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca74:	4ba0      	ldr	r3, [pc, #640]	@ (800ccf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca78:	f003 0303 	and.w	r3, r3, #3
 800ca7c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ca7e:	4b9e      	ldr	r3, [pc, #632]	@ (800ccf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca82:	091b      	lsrs	r3, r3, #4
 800ca84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca88:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ca8a:	4b9b      	ldr	r3, [pc, #620]	@ (800ccf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca8e:	f003 0301 	and.w	r3, r3, #1
 800ca92:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ca94:	4b98      	ldr	r3, [pc, #608]	@ (800ccf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca98:	08db      	lsrs	r3, r3, #3
 800ca9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca9e:	693a      	ldr	r2, [r7, #16]
 800caa0:	fb02 f303 	mul.w	r3, r2, r3
 800caa4:	ee07 3a90 	vmov	s15, r3
 800caa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f000 8111 	beq.w	800ccda <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	2b02      	cmp	r3, #2
 800cabc:	f000 8083 	beq.w	800cbc6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	2b02      	cmp	r3, #2
 800cac4:	f200 80a1 	bhi.w	800cc0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d003      	beq.n	800cad6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d056      	beq.n	800cb82 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cad4:	e099      	b.n	800cc0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cad6:	4b88      	ldr	r3, [pc, #544]	@ (800ccf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f003 0320 	and.w	r3, r3, #32
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d02d      	beq.n	800cb3e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cae2:	4b85      	ldr	r3, [pc, #532]	@ (800ccf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	08db      	lsrs	r3, r3, #3
 800cae8:	f003 0303 	and.w	r3, r3, #3
 800caec:	4a83      	ldr	r2, [pc, #524]	@ (800ccfc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800caee:	fa22 f303 	lsr.w	r3, r2, r3
 800caf2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	ee07 3a90 	vmov	s15, r3
 800cafa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	ee07 3a90 	vmov	s15, r3
 800cb04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb0c:	4b7a      	ldr	r3, [pc, #488]	@ (800ccf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb14:	ee07 3a90 	vmov	s15, r3
 800cb18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb20:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb38:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb3c:	e087      	b.n	800cc4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	ee07 3a90 	vmov	s15, r3
 800cb44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb48:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800cd04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cb4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb50:	4b69      	ldr	r3, [pc, #420]	@ (800ccf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb58:	ee07 3a90 	vmov	s15, r3
 800cb5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb60:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb64:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb80:	e065      	b.n	800cc4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	ee07 3a90 	vmov	s15, r3
 800cb88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb8c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800cd08 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cb90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb94:	4b58      	ldr	r3, [pc, #352]	@ (800ccf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb9c:	ee07 3a90 	vmov	s15, r3
 800cba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cba4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cba8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cbb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbc4:	e043      	b.n	800cc4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	ee07 3a90 	vmov	s15, r3
 800cbcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800cd0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cbd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbd8:	4b47      	ldr	r3, [pc, #284]	@ (800ccf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe0:	ee07 3a90 	vmov	s15, r3
 800cbe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbe8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbec:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cbfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc08:	e021      	b.n	800cc4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	ee07 3a90 	vmov	s15, r3
 800cc10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc14:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800cd04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cc18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc1c:	4b36      	ldr	r3, [pc, #216]	@ (800ccf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc24:	ee07 3a90 	vmov	s15, r3
 800cc28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc30:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc4c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cc4e:	4b2a      	ldr	r3, [pc, #168]	@ (800ccf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc52:	0a5b      	lsrs	r3, r3, #9
 800cc54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc58:	ee07 3a90 	vmov	s15, r3
 800cc5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc68:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc74:	ee17 2a90 	vmov	r2, s15
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cc7c:	4b1e      	ldr	r3, [pc, #120]	@ (800ccf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc80:	0c1b      	lsrs	r3, r3, #16
 800cc82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc86:	ee07 3a90 	vmov	s15, r3
 800cc8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc96:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cca2:	ee17 2a90 	vmov	r2, s15
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ccaa:	4b13      	ldr	r3, [pc, #76]	@ (800ccf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccae:	0e1b      	lsrs	r3, r3, #24
 800ccb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccb4:	ee07 3a90 	vmov	s15, r3
 800ccb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ccc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccc4:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccd0:	ee17 2a90 	vmov	r2, s15
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ccd8:	e008      	b.n	800ccec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	609a      	str	r2, [r3, #8]
}
 800ccec:	bf00      	nop
 800ccee:	3724      	adds	r7, #36	@ 0x24
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr
 800ccf8:	58024400 	.word	0x58024400
 800ccfc:	03d09000 	.word	0x03d09000
 800cd00:	46000000 	.word	0x46000000
 800cd04:	4c742400 	.word	0x4c742400
 800cd08:	4a742400 	.word	0x4a742400
 800cd0c:	4bbebc20 	.word	0x4bbebc20

0800cd10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd1e:	4b53      	ldr	r3, [pc, #332]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cd20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd22:	f003 0303 	and.w	r3, r3, #3
 800cd26:	2b03      	cmp	r3, #3
 800cd28:	d101      	bne.n	800cd2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e099      	b.n	800ce62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cd2e:	4b4f      	ldr	r3, [pc, #316]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a4e      	ldr	r2, [pc, #312]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cd34:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cd38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd3a:	f7f5 fb35 	bl	80023a8 <HAL_GetTick>
 800cd3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd40:	e008      	b.n	800cd54 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd42:	f7f5 fb31 	bl	80023a8 <HAL_GetTick>
 800cd46:	4602      	mov	r2, r0
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	1ad3      	subs	r3, r2, r3
 800cd4c:	2b02      	cmp	r3, #2
 800cd4e:	d901      	bls.n	800cd54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd50:	2303      	movs	r3, #3
 800cd52:	e086      	b.n	800ce62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd54:	4b45      	ldr	r3, [pc, #276]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d1f0      	bne.n	800cd42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cd60:	4b42      	ldr	r3, [pc, #264]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cd62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd64:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	031b      	lsls	r3, r3, #12
 800cd6e:	493f      	ldr	r1, [pc, #252]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cd70:	4313      	orrs	r3, r2
 800cd72:	628b      	str	r3, [r1, #40]	@ 0x28
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	689b      	ldr	r3, [r3, #8]
 800cd82:	3b01      	subs	r3, #1
 800cd84:	025b      	lsls	r3, r3, #9
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	431a      	orrs	r2, r3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	68db      	ldr	r3, [r3, #12]
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	041b      	lsls	r3, r3, #16
 800cd92:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cd96:	431a      	orrs	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	3b01      	subs	r3, #1
 800cd9e:	061b      	lsls	r3, r3, #24
 800cda0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cda4:	4931      	ldr	r1, [pc, #196]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cda6:	4313      	orrs	r3, r2
 800cda8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cdaa:	4b30      	ldr	r3, [pc, #192]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cdac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	695b      	ldr	r3, [r3, #20]
 800cdb6:	492d      	ldr	r1, [pc, #180]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cdbc:	4b2b      	ldr	r3, [pc, #172]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cdbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdc0:	f023 0220 	bic.w	r2, r3, #32
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	699b      	ldr	r3, [r3, #24]
 800cdc8:	4928      	ldr	r1, [pc, #160]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cdce:	4b27      	ldr	r3, [pc, #156]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cdd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdd2:	4a26      	ldr	r2, [pc, #152]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cdd4:	f023 0310 	bic.w	r3, r3, #16
 800cdd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cdda:	4b24      	ldr	r3, [pc, #144]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cddc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cdde:	4b24      	ldr	r3, [pc, #144]	@ (800ce70 <RCCEx_PLL2_Config+0x160>)
 800cde0:	4013      	ands	r3, r2
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	69d2      	ldr	r2, [r2, #28]
 800cde6:	00d2      	lsls	r2, r2, #3
 800cde8:	4920      	ldr	r1, [pc, #128]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cdea:	4313      	orrs	r3, r2
 800cdec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cdee:	4b1f      	ldr	r3, [pc, #124]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cdf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdf2:	4a1e      	ldr	r2, [pc, #120]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800cdf4:	f043 0310 	orr.w	r3, r3, #16
 800cdf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d106      	bne.n	800ce0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ce00:	4b1a      	ldr	r3, [pc, #104]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800ce02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce04:	4a19      	ldr	r2, [pc, #100]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800ce06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ce0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ce0c:	e00f      	b.n	800ce2e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d106      	bne.n	800ce22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ce14:	4b15      	ldr	r3, [pc, #84]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800ce16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce18:	4a14      	ldr	r2, [pc, #80]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800ce1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ce20:	e005      	b.n	800ce2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ce22:	4b12      	ldr	r3, [pc, #72]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800ce24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce26:	4a11      	ldr	r2, [pc, #68]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800ce28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ce2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ce2e:	4b0f      	ldr	r3, [pc, #60]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4a0e      	ldr	r2, [pc, #56]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800ce34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ce38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce3a:	f7f5 fab5 	bl	80023a8 <HAL_GetTick>
 800ce3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce40:	e008      	b.n	800ce54 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce42:	f7f5 fab1 	bl	80023a8 <HAL_GetTick>
 800ce46:	4602      	mov	r2, r0
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	1ad3      	subs	r3, r2, r3
 800ce4c:	2b02      	cmp	r3, #2
 800ce4e:	d901      	bls.n	800ce54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce50:	2303      	movs	r3, #3
 800ce52:	e006      	b.n	800ce62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce54:	4b05      	ldr	r3, [pc, #20]	@ (800ce6c <RCCEx_PLL2_Config+0x15c>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d0f0      	beq.n	800ce42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ce60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3710      	adds	r7, #16
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	58024400 	.word	0x58024400
 800ce70:	ffff0007 	.word	0xffff0007

0800ce74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce82:	4b53      	ldr	r3, [pc, #332]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800ce84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce86:	f003 0303 	and.w	r3, r3, #3
 800ce8a:	2b03      	cmp	r3, #3
 800ce8c:	d101      	bne.n	800ce92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e099      	b.n	800cfc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ce92:	4b4f      	ldr	r3, [pc, #316]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a4e      	ldr	r2, [pc, #312]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800ce98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce9e:	f7f5 fa83 	bl	80023a8 <HAL_GetTick>
 800cea2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cea4:	e008      	b.n	800ceb8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cea6:	f7f5 fa7f 	bl	80023a8 <HAL_GetTick>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	1ad3      	subs	r3, r2, r3
 800ceb0:	2b02      	cmp	r3, #2
 800ceb2:	d901      	bls.n	800ceb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ceb4:	2303      	movs	r3, #3
 800ceb6:	e086      	b.n	800cfc6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ceb8:	4b45      	ldr	r3, [pc, #276]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1f0      	bne.n	800cea6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cec4:	4b42      	ldr	r3, [pc, #264]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cec8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	051b      	lsls	r3, r3, #20
 800ced2:	493f      	ldr	r1, [pc, #252]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800ced4:	4313      	orrs	r3, r2
 800ced6:	628b      	str	r3, [r1, #40]	@ 0x28
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	3b01      	subs	r3, #1
 800cede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	689b      	ldr	r3, [r3, #8]
 800cee6:	3b01      	subs	r3, #1
 800cee8:	025b      	lsls	r3, r3, #9
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	431a      	orrs	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	3b01      	subs	r3, #1
 800cef4:	041b      	lsls	r3, r3, #16
 800cef6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cefa:	431a      	orrs	r2, r3
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	691b      	ldr	r3, [r3, #16]
 800cf00:	3b01      	subs	r3, #1
 800cf02:	061b      	lsls	r3, r3, #24
 800cf04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cf08:	4931      	ldr	r1, [pc, #196]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cf0e:	4b30      	ldr	r3, [pc, #192]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	695b      	ldr	r3, [r3, #20]
 800cf1a:	492d      	ldr	r1, [pc, #180]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cf20:	4b2b      	ldr	r3, [pc, #172]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf24:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	699b      	ldr	r3, [r3, #24]
 800cf2c:	4928      	ldr	r1, [pc, #160]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cf32:	4b27      	ldr	r3, [pc, #156]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf36:	4a26      	ldr	r2, [pc, #152]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cf3e:	4b24      	ldr	r3, [pc, #144]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf42:	4b24      	ldr	r3, [pc, #144]	@ (800cfd4 <RCCEx_PLL3_Config+0x160>)
 800cf44:	4013      	ands	r3, r2
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	69d2      	ldr	r2, [r2, #28]
 800cf4a:	00d2      	lsls	r2, r2, #3
 800cf4c:	4920      	ldr	r1, [pc, #128]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cf52:	4b1f      	ldr	r3, [pc, #124]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf56:	4a1e      	ldr	r2, [pc, #120]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cf5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d106      	bne.n	800cf72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cf64:	4b1a      	ldr	r3, [pc, #104]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf68:	4a19      	ldr	r2, [pc, #100]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800cf6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cf70:	e00f      	b.n	800cf92 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d106      	bne.n	800cf86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cf78:	4b15      	ldr	r3, [pc, #84]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf7c:	4a14      	ldr	r2, [pc, #80]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cf82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cf84:	e005      	b.n	800cf92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cf86:	4b12      	ldr	r3, [pc, #72]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf8a:	4a11      	ldr	r2, [pc, #68]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cf90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cf92:	4b0f      	ldr	r3, [pc, #60]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a0e      	ldr	r2, [pc, #56]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cf98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cf9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf9e:	f7f5 fa03 	bl	80023a8 <HAL_GetTick>
 800cfa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cfa4:	e008      	b.n	800cfb8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cfa6:	f7f5 f9ff 	bl	80023a8 <HAL_GetTick>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	1ad3      	subs	r3, r2, r3
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	d901      	bls.n	800cfb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	e006      	b.n	800cfc6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cfb8:	4b05      	ldr	r3, [pc, #20]	@ (800cfd0 <RCCEx_PLL3_Config+0x15c>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d0f0      	beq.n	800cfa6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	58024400 	.word	0x58024400
 800cfd4:	ffff0007 	.word	0xffff0007

0800cfd8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b08a      	sub	sp, #40	@ 0x28
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d101      	bne.n	800cfea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e075      	b.n	800d0d6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d105      	bne.n	800d002 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f7f4 fcd9 	bl	80019b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2204      	movs	r2, #4
 800d006:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 f868 	bl	800d0e0 <HAL_SD_InitCard>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d001      	beq.n	800d01a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d016:	2301      	movs	r3, #1
 800d018:	e05d      	b.n	800d0d6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d01a:	f107 0308 	add.w	r3, r7, #8
 800d01e:	4619      	mov	r1, r3
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 fa9d 	bl	800d560 <HAL_SD_GetCardStatus>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d02c:	2301      	movs	r3, #1
 800d02e:	e052      	b.n	800d0d6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d030:	7e3b      	ldrb	r3, [r7, #24]
 800d032:	b2db      	uxtb	r3, r3
 800d034:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d036:	7e7b      	ldrb	r3, [r7, #25]
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d040:	2b01      	cmp	r3, #1
 800d042:	d10a      	bne.n	800d05a <HAL_SD_Init+0x82>
 800d044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d046:	2b00      	cmp	r3, #0
 800d048:	d102      	bne.n	800d050 <HAL_SD_Init+0x78>
 800d04a:	6a3b      	ldr	r3, [r7, #32]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d004      	beq.n	800d05a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d056:	659a      	str	r2, [r3, #88]	@ 0x58
 800d058:	e00b      	b.n	800d072 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d104      	bne.n	800d06c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d068:	659a      	str	r2, [r3, #88]	@ 0x58
 800d06a:	e002      	b.n	800d072 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	4619      	mov	r1, r3
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 fb2f 	bl	800d6dc <HAL_SD_ConfigWideBusOperation>
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d001      	beq.n	800d088 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d084:	2301      	movs	r3, #1
 800d086:	e026      	b.n	800d0d6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d088:	f7f5 f98e 	bl	80023a8 <HAL_GetTick>
 800d08c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d08e:	e011      	b.n	800d0b4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800d090:	f7f5 f98a 	bl	80023a8 <HAL_GetTick>
 800d094:	4602      	mov	r2, r0
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	1ad3      	subs	r3, r2, r3
 800d09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d09e:	d109      	bne.n	800d0b4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d0a6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800d0b0:	2303      	movs	r3, #3
 800d0b2:	e010      	b.n	800d0d6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 fc23 	bl	800d900 <HAL_SD_GetCardState>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b04      	cmp	r3, #4
 800d0be:	d1e7      	bne.n	800d090 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3728      	adds	r7, #40	@ 0x28
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
	...

0800d0e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d0e0:	b590      	push	{r4, r7, lr}
 800d0e2:	b08d      	sub	sp, #52	@ 0x34
 800d0e4:	af02      	add	r7, sp, #8
 800d0e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d0f8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d0fc:	f04f 0100 	mov.w	r1, #0
 800d100:	f7fe fc76 	bl	800b9f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d104:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800d106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d109      	bne.n	800d120 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800d11a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d11c:	2301      	movs	r3, #1
 800d11e:	e070      	b.n	800d202 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d122:	0a1b      	lsrs	r3, r3, #8
 800d124:	4a39      	ldr	r2, [pc, #228]	@ (800d20c <HAL_SD_InitCard+0x12c>)
 800d126:	fba2 2303 	umull	r2, r3, r2, r3
 800d12a:	091b      	lsrs	r3, r3, #4
 800d12c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681c      	ldr	r4, [r3, #0]
 800d132:	466a      	mov	r2, sp
 800d134:	f107 0318 	add.w	r3, r7, #24
 800d138:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d13c:	e882 0003 	stmia.w	r2, {r0, r1}
 800d140:	f107 030c 	add.w	r3, r7, #12
 800d144:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d146:	4620      	mov	r0, r4
 800d148:	f003 faa0 	bl	801068c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4618      	mov	r0, r3
 800d152:	f003 fad2 	bl	80106fa <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d156:	69fb      	ldr	r3, [r7, #28]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d005      	beq.n	800d168 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d15c:	69fb      	ldr	r3, [r7, #28]
 800d15e:	005b      	lsls	r3, r3, #1
 800d160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d162:	fbb2 f3f3 	udiv	r3, r2, r3
 800d166:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800d168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d007      	beq.n	800d17e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d16e:	4a28      	ldr	r2, [pc, #160]	@ (800d210 <HAL_SD_InitCard+0x130>)
 800d170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d172:	fbb2 f3f3 	udiv	r3, r2, r3
 800d176:	3301      	adds	r3, #1
 800d178:	4618      	mov	r0, r3
 800d17a:	f7f5 f921 	bl	80023c0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 fcac 	bl	800dadc <SD_PowerON>
 800d184:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00b      	beq.n	800d1a4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2201      	movs	r2, #1
 800d190:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d198:	6a3b      	ldr	r3, [r7, #32]
 800d19a:	431a      	orrs	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e02e      	b.n	800d202 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 fbcb 	bl	800d940 <SD_InitCard>
 800d1aa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1ac:	6a3b      	ldr	r3, [r7, #32]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00b      	beq.n	800d1ca <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1be:	6a3b      	ldr	r3, [r7, #32]
 800d1c0:	431a      	orrs	r2, r3
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e01b      	b.n	800d202 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f003 fb26 	bl	8010824 <SDMMC_CmdBlockLength>
 800d1d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1da:	6a3b      	ldr	r3, [r7, #32]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d00f      	beq.n	800d200 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a0b      	ldr	r2, [pc, #44]	@ (800d214 <HAL_SD_InitCard+0x134>)
 800d1e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1ec:	6a3b      	ldr	r3, [r7, #32]
 800d1ee:	431a      	orrs	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e000      	b.n	800d202 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d200:	2300      	movs	r3, #0
}
 800d202:	4618      	mov	r0, r3
 800d204:	372c      	adds	r7, #44	@ 0x2c
 800d206:	46bd      	mov	sp, r7
 800d208:	bd90      	pop	{r4, r7, pc}
 800d20a:	bf00      	nop
 800d20c:	014f8b59 	.word	0x014f8b59
 800d210:	00012110 	.word	0x00012110
 800d214:	1fe00fff 	.word	0x1fe00fff

0800d218 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d226:	0f9b      	lsrs	r3, r3, #30
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d232:	0e9b      	lsrs	r3, r3, #26
 800d234:	b2db      	uxtb	r3, r3
 800d236:	f003 030f 	and.w	r3, r3, #15
 800d23a:	b2da      	uxtb	r2, r3
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d244:	0e1b      	lsrs	r3, r3, #24
 800d246:	b2db      	uxtb	r3, r3
 800d248:	f003 0303 	and.w	r3, r3, #3
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d256:	0c1b      	lsrs	r3, r3, #16
 800d258:	b2da      	uxtb	r2, r3
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d262:	0a1b      	lsrs	r3, r3, #8
 800d264:	b2da      	uxtb	r2, r3
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d26e:	b2da      	uxtb	r2, r3
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d278:	0d1b      	lsrs	r3, r3, #20
 800d27a:	b29a      	uxth	r2, r3
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d284:	0c1b      	lsrs	r3, r3, #16
 800d286:	b2db      	uxtb	r3, r3
 800d288:	f003 030f 	and.w	r3, r3, #15
 800d28c:	b2da      	uxtb	r2, r3
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d296:	0bdb      	lsrs	r3, r3, #15
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	f003 0301 	and.w	r3, r3, #1
 800d29e:	b2da      	uxtb	r2, r3
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2a8:	0b9b      	lsrs	r3, r3, #14
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	f003 0301 	and.w	r3, r3, #1
 800d2b0:	b2da      	uxtb	r2, r3
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2ba:	0b5b      	lsrs	r3, r3, #13
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	f003 0301 	and.w	r3, r3, #1
 800d2c2:	b2da      	uxtb	r2, r3
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2cc:	0b1b      	lsrs	r3, r3, #12
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	f003 0301 	and.w	r3, r3, #1
 800d2d4:	b2da      	uxtb	r2, r3
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d163      	bne.n	800d3b0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2ec:	009a      	lsls	r2, r3, #2
 800d2ee:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d2f2:	4013      	ands	r3, r2
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800d2f8:	0f92      	lsrs	r2, r2, #30
 800d2fa:	431a      	orrs	r2, r3
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d304:	0edb      	lsrs	r3, r3, #27
 800d306:	b2db      	uxtb	r3, r3
 800d308:	f003 0307 	and.w	r3, r3, #7
 800d30c:	b2da      	uxtb	r2, r3
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d316:	0e1b      	lsrs	r3, r3, #24
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	f003 0307 	and.w	r3, r3, #7
 800d31e:	b2da      	uxtb	r2, r3
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d328:	0d5b      	lsrs	r3, r3, #21
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	f003 0307 	and.w	r3, r3, #7
 800d330:	b2da      	uxtb	r2, r3
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d33a:	0c9b      	lsrs	r3, r3, #18
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	f003 0307 	and.w	r3, r3, #7
 800d342:	b2da      	uxtb	r2, r3
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d34c:	0bdb      	lsrs	r3, r3, #15
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	f003 0307 	and.w	r3, r3, #7
 800d354:	b2da      	uxtb	r2, r3
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	691b      	ldr	r3, [r3, #16]
 800d35e:	1c5a      	adds	r2, r3, #1
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	7e1b      	ldrb	r3, [r3, #24]
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	f003 0307 	and.w	r3, r3, #7
 800d36e:	3302      	adds	r3, #2
 800d370:	2201      	movs	r2, #1
 800d372:	fa02 f303 	lsl.w	r3, r2, r3
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d37a:	fb03 f202 	mul.w	r2, r3, r2
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	7a1b      	ldrb	r3, [r3, #8]
 800d386:	b2db      	uxtb	r3, r3
 800d388:	f003 030f 	and.w	r3, r3, #15
 800d38c:	2201      	movs	r2, #1
 800d38e:	409a      	lsls	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800d39c:	0a52      	lsrs	r2, r2, #9
 800d39e:	fb03 f202 	mul.w	r2, r3, r2
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3ac:	655a      	str	r2, [r3, #84]	@ 0x54
 800d3ae:	e031      	b.n	800d414 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d11d      	bne.n	800d3f4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d3bc:	041b      	lsls	r3, r3, #16
 800d3be:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d3c6:	0c1b      	lsrs	r3, r3, #16
 800d3c8:	431a      	orrs	r2, r3
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	691b      	ldr	r3, [r3, #16]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	029a      	lsls	r2, r3, #10
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	655a      	str	r2, [r3, #84]	@ 0x54
 800d3f2:	e00f      	b.n	800d414 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a58      	ldr	r2, [pc, #352]	@ (800d55c <HAL_SD_GetCardCSD+0x344>)
 800d3fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d400:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800d410:	2301      	movs	r3, #1
 800d412:	e09d      	b.n	800d550 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d418:	0b9b      	lsrs	r3, r3, #14
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	b2da      	uxtb	r2, r3
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d42a:	09db      	lsrs	r3, r3, #7
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d432:	b2da      	uxtb	r2, r3
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d442:	b2da      	uxtb	r2, r3
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d44c:	0fdb      	lsrs	r3, r3, #31
 800d44e:	b2da      	uxtb	r2, r3
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d458:	0f5b      	lsrs	r3, r3, #29
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	f003 0303 	and.w	r3, r3, #3
 800d460:	b2da      	uxtb	r2, r3
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d46a:	0e9b      	lsrs	r3, r3, #26
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	f003 0307 	and.w	r3, r3, #7
 800d472:	b2da      	uxtb	r2, r3
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d47c:	0d9b      	lsrs	r3, r3, #22
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	f003 030f 	and.w	r3, r3, #15
 800d484:	b2da      	uxtb	r2, r3
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d48e:	0d5b      	lsrs	r3, r3, #21
 800d490:	b2db      	uxtb	r3, r3
 800d492:	f003 0301 	and.w	r3, r3, #1
 800d496:	b2da      	uxtb	r2, r3
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d4aa:	0c1b      	lsrs	r3, r3, #16
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	f003 0301 	and.w	r3, r3, #1
 800d4b2:	b2da      	uxtb	r2, r3
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d4be:	0bdb      	lsrs	r3, r3, #15
 800d4c0:	b2db      	uxtb	r3, r3
 800d4c2:	f003 0301 	and.w	r3, r3, #1
 800d4c6:	b2da      	uxtb	r2, r3
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d4d2:	0b9b      	lsrs	r3, r3, #14
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	f003 0301 	and.w	r3, r3, #1
 800d4da:	b2da      	uxtb	r2, r3
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d4e6:	0b5b      	lsrs	r3, r3, #13
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	f003 0301 	and.w	r3, r3, #1
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d4fa:	0b1b      	lsrs	r3, r3, #12
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	f003 0301 	and.w	r3, r3, #1
 800d502:	b2da      	uxtb	r2, r3
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d50e:	0a9b      	lsrs	r3, r3, #10
 800d510:	b2db      	uxtb	r3, r3
 800d512:	f003 0303 	and.w	r3, r3, #3
 800d516:	b2da      	uxtb	r2, r3
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d522:	0a1b      	lsrs	r3, r3, #8
 800d524:	b2db      	uxtb	r3, r3
 800d526:	f003 0303 	and.w	r3, r3, #3
 800d52a:	b2da      	uxtb	r2, r3
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d536:	085b      	lsrs	r3, r3, #1
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d53e:	b2da      	uxtb	r2, r3
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	2201      	movs	r2, #1
 800d54a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d54e:	2300      	movs	r3, #0
}
 800d550:	4618      	mov	r0, r3
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr
 800d55c:	1fe00fff 	.word	0x1fe00fff

0800d560 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b094      	sub	sp, #80	@ 0x50
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d56a:	2300      	movs	r3, #0
 800d56c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d576:	b2db      	uxtb	r3, r3
 800d578:	2b03      	cmp	r3, #3
 800d57a:	d101      	bne.n	800d580 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d57c:	2301      	movs	r3, #1
 800d57e:	e0a7      	b.n	800d6d0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d580:	f107 0308 	add.w	r3, r7, #8
 800d584:	4619      	mov	r1, r3
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 fb36 	bl	800dbf8 <SD_SendSDStatus>
 800d58c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d58e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d590:	2b00      	cmp	r3, #0
 800d592:	d011      	beq.n	800d5b8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a4f      	ldr	r2, [pc, #316]	@ (800d6d8 <HAL_SD_GetCardStatus+0x178>)
 800d59a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d5a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5a2:	431a      	orrs	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800d5b6:	e070      	b.n	800d69a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	099b      	lsrs	r3, r3, #6
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	f003 0303 	and.w	r3, r3, #3
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	095b      	lsrs	r3, r3, #5
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	f003 0301 	and.w	r3, r3, #1
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	0a1b      	lsrs	r3, r3, #8
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d5e2:	b29a      	uxth	r2, r3
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	0e1b      	lsrs	r3, r3, #24
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	061a      	lsls	r2, r3, #24
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	021b      	lsls	r3, r3, #8
 800d5fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d5fe:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	0a1b      	lsrs	r3, r3, #8
 800d604:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d608:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	0e1b      	lsrs	r3, r3, #24
 800d60e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	b2da      	uxtb	r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	0a1b      	lsrs	r3, r3, #8
 800d620:	b2da      	uxtb	r2, r3
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	0d1b      	lsrs	r3, r3, #20
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	f003 030f 	and.w	r3, r3, #15
 800d630:	b2da      	uxtb	r2, r3
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	0c1b      	lsrs	r3, r3, #16
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d640:	b29a      	uxth	r2, r3
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	b29b      	uxth	r3, r3
 800d646:	b2db      	uxtb	r3, r3
 800d648:	b29b      	uxth	r3, r3
 800d64a:	4313      	orrs	r3, r2
 800d64c:	b29a      	uxth	r2, r3
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	0a9b      	lsrs	r3, r3, #10
 800d656:	b2db      	uxtb	r3, r3
 800d658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d65c:	b2da      	uxtb	r2, r3
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	0a1b      	lsrs	r3, r3, #8
 800d666:	b2db      	uxtb	r3, r3
 800d668:	f003 0303 	and.w	r3, r3, #3
 800d66c:	b2da      	uxtb	r2, r3
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	091b      	lsrs	r3, r3, #4
 800d676:	b2db      	uxtb	r3, r3
 800d678:	f003 030f 	and.w	r3, r3, #15
 800d67c:	b2da      	uxtb	r2, r3
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	b2db      	uxtb	r3, r3
 800d686:	f003 030f 	and.w	r3, r3, #15
 800d68a:	b2da      	uxtb	r2, r3
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d690:	69bb      	ldr	r3, [r7, #24]
 800d692:	0e1b      	lsrs	r3, r3, #24
 800d694:	b2da      	uxtb	r2, r3
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f003 f8be 	bl	8010824 <SDMMC_CmdBlockLength>
 800d6a8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00d      	beq.n	800d6cc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4a08      	ldr	r2, [pc, #32]	@ (800d6d8 <HAL_SD_GetCardStatus+0x178>)
 800d6b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d6bc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800d6cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3750      	adds	r7, #80	@ 0x50
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	1fe00fff 	.word	0x1fe00fff

0800d6dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d6dc:	b590      	push	{r4, r7, lr}
 800d6de:	b08d      	sub	sp, #52	@ 0x34
 800d6e0:	af02      	add	r7, sp, #8
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2203      	movs	r2, #3
 800d6f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6f8:	2b03      	cmp	r3, #3
 800d6fa:	d02e      	beq.n	800d75a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d702:	d106      	bne.n	800d712 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d708:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	635a      	str	r2, [r3, #52]	@ 0x34
 800d710:	e029      	b.n	800d766 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d718:	d10a      	bne.n	800d730 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 fb64 	bl	800dde8 <SD_WideBus_Enable>
 800d720:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d726:	6a3b      	ldr	r3, [r7, #32]
 800d728:	431a      	orrs	r2, r3
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	635a      	str	r2, [r3, #52]	@ 0x34
 800d72e:	e01a      	b.n	800d766 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d10a      	bne.n	800d74c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 fba1 	bl	800de7e <SD_WideBus_Disable>
 800d73c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d742:	6a3b      	ldr	r3, [r7, #32]
 800d744:	431a      	orrs	r2, r3
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	635a      	str	r2, [r3, #52]	@ 0x34
 800d74a:	e00c      	b.n	800d766 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d750:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	635a      	str	r2, [r3, #52]	@ 0x34
 800d758:	e005      	b.n	800d766 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d75e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d007      	beq.n	800d77e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	4a5f      	ldr	r2, [pc, #380]	@ (800d8f0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d774:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d776:	2301      	movs	r3, #1
 800d778:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d77c:	e096      	b.n	800d8ac <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d77e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d782:	f04f 0100 	mov.w	r1, #0
 800d786:	f7fe f933 	bl	800b9f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d78a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f000 8083 	beq.w	800d89a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	691b      	ldr	r3, [r3, #16]
 800d7a8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	695a      	ldr	r2, [r3, #20]
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	4950      	ldr	r1, [pc, #320]	@ (800d8f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d7b2:	fba1 1303 	umull	r1, r3, r1, r3
 800d7b6:	0e1b      	lsrs	r3, r3, #24
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d303      	bcc.n	800d7c4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	695b      	ldr	r3, [r3, #20]
 800d7c0:	61bb      	str	r3, [r7, #24]
 800d7c2:	e05a      	b.n	800d87a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7cc:	d103      	bne.n	800d7d6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	695b      	ldr	r3, [r3, #20]
 800d7d2:	61bb      	str	r3, [r7, #24]
 800d7d4:	e051      	b.n	800d87a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d7de:	d126      	bne.n	800d82e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	695b      	ldr	r3, [r3, #20]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d10e      	bne.n	800d806 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	4a43      	ldr	r2, [pc, #268]	@ (800d8f8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d906      	bls.n	800d7fe <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	4a40      	ldr	r2, [pc, #256]	@ (800d8f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d7f4:	fba2 2303 	umull	r2, r3, r2, r3
 800d7f8:	0e5b      	lsrs	r3, r3, #25
 800d7fa:	61bb      	str	r3, [r7, #24]
 800d7fc:	e03d      	b.n	800d87a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	695b      	ldr	r3, [r3, #20]
 800d802:	61bb      	str	r3, [r7, #24]
 800d804:	e039      	b.n	800d87a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	695b      	ldr	r3, [r3, #20]
 800d80a:	005b      	lsls	r3, r3, #1
 800d80c:	69fa      	ldr	r2, [r7, #28]
 800d80e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d812:	4a39      	ldr	r2, [pc, #228]	@ (800d8f8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d814:	4293      	cmp	r3, r2
 800d816:	d906      	bls.n	800d826 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	4a36      	ldr	r2, [pc, #216]	@ (800d8f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d81c:	fba2 2303 	umull	r2, r3, r2, r3
 800d820:	0e5b      	lsrs	r3, r3, #25
 800d822:	61bb      	str	r3, [r7, #24]
 800d824:	e029      	b.n	800d87a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	695b      	ldr	r3, [r3, #20]
 800d82a:	61bb      	str	r3, [r7, #24]
 800d82c:	e025      	b.n	800d87a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d10e      	bne.n	800d854 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	4a30      	ldr	r2, [pc, #192]	@ (800d8fc <HAL_SD_ConfigWideBusOperation+0x220>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d906      	bls.n	800d84c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	4a2c      	ldr	r2, [pc, #176]	@ (800d8f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d842:	fba2 2303 	umull	r2, r3, r2, r3
 800d846:	0e1b      	lsrs	r3, r3, #24
 800d848:	61bb      	str	r3, [r7, #24]
 800d84a:	e016      	b.n	800d87a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	695b      	ldr	r3, [r3, #20]
 800d850:	61bb      	str	r3, [r7, #24]
 800d852:	e012      	b.n	800d87a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	695b      	ldr	r3, [r3, #20]
 800d858:	005b      	lsls	r3, r3, #1
 800d85a:	69fa      	ldr	r2, [r7, #28]
 800d85c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d860:	4a26      	ldr	r2, [pc, #152]	@ (800d8fc <HAL_SD_ConfigWideBusOperation+0x220>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d906      	bls.n	800d874 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	4a22      	ldr	r2, [pc, #136]	@ (800d8f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d86a:	fba2 2303 	umull	r2, r3, r2, r3
 800d86e:	0e1b      	lsrs	r3, r3, #24
 800d870:	61bb      	str	r3, [r7, #24]
 800d872:	e002      	b.n	800d87a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	695b      	ldr	r3, [r3, #20]
 800d878:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681c      	ldr	r4, [r3, #0]
 800d87e:	466a      	mov	r2, sp
 800d880:	f107 0314 	add.w	r3, r7, #20
 800d884:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d888:	e882 0003 	stmia.w	r2, {r0, r1}
 800d88c:	f107 0308 	add.w	r3, r7, #8
 800d890:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d892:	4620      	mov	r0, r4
 800d894:	f002 fefa 	bl	801068c <SDMMC_Init>
 800d898:	e008      	b.n	800d8ac <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d89e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f002 ffb5 	bl	8010824 <SDMMC_CmdBlockLength>
 800d8ba:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d8bc:	6a3b      	ldr	r3, [r7, #32]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00c      	beq.n	800d8dc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4a0a      	ldr	r2, [pc, #40]	@ (800d8f0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d8c8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d8ce:	6a3b      	ldr	r3, [r7, #32]
 800d8d0:	431a      	orrs	r2, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800d8e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	372c      	adds	r7, #44	@ 0x2c
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd90      	pop	{r4, r7, pc}
 800d8f0:	1fe00fff 	.word	0x1fe00fff
 800d8f4:	55e63b89 	.word	0x55e63b89
 800d8f8:	02faf080 	.word	0x02faf080
 800d8fc:	017d7840 	.word	0x017d7840

0800d900 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d908:	2300      	movs	r3, #0
 800d90a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d90c:	f107 030c 	add.w	r3, r7, #12
 800d910:	4619      	mov	r1, r3
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 fa40 	bl	800dd98 <SD_SendStatus>
 800d918:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d005      	beq.n	800d92c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	431a      	orrs	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	0a5b      	lsrs	r3, r3, #9
 800d930:	f003 030f 	and.w	r3, r3, #15
 800d934:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d936:	693b      	ldr	r3, [r7, #16]
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3718      	adds	r7, #24
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b090      	sub	sp, #64	@ 0x40
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d948:	2300      	movs	r3, #0
 800d94a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d94c:	f7f4 fd2c 	bl	80023a8 <HAL_GetTick>
 800d950:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4618      	mov	r0, r3
 800d958:	f002 fee0 	bl	801071c <SDMMC_GetPowerState>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d102      	bne.n	800d968 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d962:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d966:	e0b5      	b.n	800dad4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d96c:	2b03      	cmp	r3, #3
 800d96e:	d02e      	beq.n	800d9ce <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4618      	mov	r0, r3
 800d976:	f003 f861 	bl	8010a3c <SDMMC_CmdSendCID>
 800d97a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <SD_InitCard+0x46>
    {
      return errorstate;
 800d982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d984:	e0a6      	b.n	800dad4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2100      	movs	r1, #0
 800d98c:	4618      	mov	r0, r3
 800d98e:	f002 ff0a 	bl	80107a6 <SDMMC_GetResponse>
 800d992:	4602      	mov	r2, r0
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2104      	movs	r1, #4
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f002 ff01 	bl	80107a6 <SDMMC_GetResponse>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	2108      	movs	r1, #8
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f002 fef8 	bl	80107a6 <SDMMC_GetResponse>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	210c      	movs	r1, #12
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f002 feef 	bl	80107a6 <SDMMC_GetResponse>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9d2:	2b03      	cmp	r3, #3
 800d9d4:	d01d      	beq.n	800da12 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d9d6:	e019      	b.n	800da0c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f107 020a 	add.w	r2, r7, #10
 800d9e0:	4611      	mov	r1, r2
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f003 f869 	bl	8010aba <SDMMC_CmdSetRelAdd>
 800d9e8:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d001      	beq.n	800d9f4 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f2:	e06f      	b.n	800dad4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d9f4:	f7f4 fcd8 	bl	80023a8 <HAL_GetTick>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9fc:	1ad3      	subs	r3, r2, r3
 800d9fe:	f241 3287 	movw	r2, #4999	@ 0x1387
 800da02:	4293      	cmp	r3, r2
 800da04:	d902      	bls.n	800da0c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800da06:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da0a:	e063      	b.n	800dad4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800da0c:	897b      	ldrh	r3, [r7, #10]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d0e2      	beq.n	800d9d8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da16:	2b03      	cmp	r3, #3
 800da18:	d036      	beq.n	800da88 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800da1a:	897b      	ldrh	r3, [r7, #10]
 800da1c:	461a      	mov	r2, r3
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da2a:	041b      	lsls	r3, r3, #16
 800da2c:	4619      	mov	r1, r3
 800da2e:	4610      	mov	r0, r2
 800da30:	f003 f823 	bl	8010a7a <SDMMC_CmdSendCSD>
 800da34:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800da36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d001      	beq.n	800da40 <SD_InitCard+0x100>
    {
      return errorstate;
 800da3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da3e:	e049      	b.n	800dad4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2100      	movs	r1, #0
 800da46:	4618      	mov	r0, r3
 800da48:	f002 fead 	bl	80107a6 <SDMMC_GetResponse>
 800da4c:	4602      	mov	r2, r0
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2104      	movs	r1, #4
 800da58:	4618      	mov	r0, r3
 800da5a:	f002 fea4 	bl	80107a6 <SDMMC_GetResponse>
 800da5e:	4602      	mov	r2, r0
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2108      	movs	r1, #8
 800da6a:	4618      	mov	r0, r3
 800da6c:	f002 fe9b 	bl	80107a6 <SDMMC_GetResponse>
 800da70:	4602      	mov	r2, r0
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	210c      	movs	r1, #12
 800da7c:	4618      	mov	r0, r3
 800da7e:	f002 fe92 	bl	80107a6 <SDMMC_GetResponse>
 800da82:	4602      	mov	r2, r0
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2104      	movs	r1, #4
 800da8e:	4618      	mov	r0, r3
 800da90:	f002 fe89 	bl	80107a6 <SDMMC_GetResponse>
 800da94:	4603      	mov	r3, r0
 800da96:	0d1a      	lsrs	r2, r3, #20
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800da9c:	f107 030c 	add.w	r3, r7, #12
 800daa0:	4619      	mov	r1, r3
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f7ff fbb8 	bl	800d218 <HAL_SD_GetCardCSD>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d002      	beq.n	800dab4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800daae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800dab2:	e00f      	b.n	800dad4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681a      	ldr	r2, [r3, #0]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dabc:	041b      	lsls	r3, r3, #16
 800dabe:	4619      	mov	r1, r3
 800dac0:	4610      	mov	r0, r2
 800dac2:	f002 fed2 	bl	801086a <SDMMC_CmdSelDesel>
 800dac6:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800dac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d001      	beq.n	800dad2 <SD_InitCard+0x192>
  {
    return errorstate;
 800dace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad0:	e000      	b.n	800dad4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dad2:	2300      	movs	r3, #0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3740      	adds	r7, #64	@ 0x40
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b086      	sub	sp, #24
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dae4:	2300      	movs	r3, #0
 800dae6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800dae8:	2300      	movs	r3, #0
 800daea:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800daec:	2300      	movs	r3, #0
 800daee:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4618      	mov	r0, r3
 800daf6:	f002 fedb 	bl	80108b0 <SDMMC_CmdGoIdleState>
 800dafa:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d001      	beq.n	800db06 <SD_PowerON+0x2a>
  {
    return errorstate;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	e072      	b.n	800dbec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4618      	mov	r0, r3
 800db0c:	f002 feee 	bl	80108ec <SDMMC_CmdOperCond>
 800db10:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db18:	d10d      	bne.n	800db36 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4618      	mov	r0, r3
 800db26:	f002 fec3 	bl	80108b0 <SDMMC_CmdGoIdleState>
 800db2a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d004      	beq.n	800db3c <SD_PowerON+0x60>
    {
      return errorstate;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	e05a      	b.n	800dbec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2201      	movs	r2, #1
 800db3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db40:	2b01      	cmp	r3, #1
 800db42:	d137      	bne.n	800dbb4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	2100      	movs	r1, #0
 800db4a:	4618      	mov	r0, r3
 800db4c:	f002 feee 	bl	801092c <SDMMC_CmdAppCommand>
 800db50:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d02d      	beq.n	800dbb4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db58:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800db5c:	e046      	b.n	800dbec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2100      	movs	r1, #0
 800db64:	4618      	mov	r0, r3
 800db66:	f002 fee1 	bl	801092c <SDMMC_CmdAppCommand>
 800db6a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d001      	beq.n	800db76 <SD_PowerON+0x9a>
    {
      return errorstate;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	e03a      	b.n	800dbec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	491e      	ldr	r1, [pc, #120]	@ (800dbf4 <SD_PowerON+0x118>)
 800db7c:	4618      	mov	r0, r3
 800db7e:	f002 fef8 	bl	8010972 <SDMMC_CmdAppOperCommand>
 800db82:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d002      	beq.n	800db90 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db8a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800db8e:	e02d      	b.n	800dbec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	2100      	movs	r1, #0
 800db96:	4618      	mov	r0, r3
 800db98:	f002 fe05 	bl	80107a6 <SDMMC_GetResponse>
 800db9c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	0fdb      	lsrs	r3, r3, #31
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d101      	bne.n	800dbaa <SD_PowerON+0xce>
 800dba6:	2301      	movs	r3, #1
 800dba8:	e000      	b.n	800dbac <SD_PowerON+0xd0>
 800dbaa:	2300      	movs	r3, #0
 800dbac:	613b      	str	r3, [r7, #16]

    count++;
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d802      	bhi.n	800dbc4 <SD_PowerON+0xe8>
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d0cc      	beq.n	800db5e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d902      	bls.n	800dbd4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dbce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dbd2:	e00b      	b.n	800dbec <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d002      	beq.n	800dbea <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3718      	adds	r7, #24
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	c1100000 	.word	0xc1100000

0800dbf8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b08c      	sub	sp, #48	@ 0x30
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dc02:	f7f4 fbd1 	bl	80023a8 <HAL_GetTick>
 800dc06:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2100      	movs	r1, #0
 800dc12:	4618      	mov	r0, r3
 800dc14:	f002 fdc7 	bl	80107a6 <SDMMC_GetResponse>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc22:	d102      	bne.n	800dc2a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dc24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc28:	e0b0      	b.n	800dd8c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2140      	movs	r1, #64	@ 0x40
 800dc30:	4618      	mov	r0, r3
 800dc32:	f002 fdf7 	bl	8010824 <SDMMC_CmdBlockLength>
 800dc36:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc38:	6a3b      	ldr	r3, [r7, #32]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d005      	beq.n	800dc4a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800dc46:	6a3b      	ldr	r3, [r7, #32]
 800dc48:	e0a0      	b.n	800dd8c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc52:	041b      	lsls	r3, r3, #16
 800dc54:	4619      	mov	r1, r3
 800dc56:	4610      	mov	r0, r2
 800dc58:	f002 fe68 	bl	801092c <SDMMC_CmdAppCommand>
 800dc5c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc5e:	6a3b      	ldr	r3, [r7, #32]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d005      	beq.n	800dc70 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800dc6c:	6a3b      	ldr	r3, [r7, #32]
 800dc6e:	e08d      	b.n	800dd8c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dc70:	f04f 33ff 	mov.w	r3, #4294967295
 800dc74:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800dc76:	2340      	movs	r3, #64	@ 0x40
 800dc78:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800dc7a:	2360      	movs	r3, #96	@ 0x60
 800dc7c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dc7e:	2302      	movs	r3, #2
 800dc80:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dc82:	2300      	movs	r3, #0
 800dc84:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dc86:	2301      	movs	r3, #1
 800dc88:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f107 0208 	add.w	r2, r7, #8
 800dc92:	4611      	mov	r1, r2
 800dc94:	4618      	mov	r0, r3
 800dc96:	f002 fd99 	bl	80107cc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f002 ff50 	bl	8010b44 <SDMMC_CmdStatusRegister>
 800dca4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dca6:	6a3b      	ldr	r3, [r7, #32]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d02b      	beq.n	800dd04 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800dcb4:	6a3b      	ldr	r3, [r7, #32]
 800dcb6:	e069      	b.n	800dd8c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d013      	beq.n	800dcee <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dcca:	e00d      	b.n	800dce8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f002 fd05 	bl	80106e0 <SDMMC_ReadFIFO>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcda:	601a      	str	r2, [r3, #0]
        pData++;
 800dcdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcde:	3304      	adds	r3, #4
 800dce0:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800dce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce4:	3301      	adds	r3, #1
 800dce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcea:	2b07      	cmp	r3, #7
 800dcec:	d9ee      	bls.n	800dccc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800dcee:	f7f4 fb5b 	bl	80023a8 <HAL_GetTick>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf6:	1ad3      	subs	r3, r2, r3
 800dcf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcfc:	d102      	bne.n	800dd04 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dcfe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd02:	e043      	b.n	800dd8c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd0a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d0d2      	beq.n	800dcb8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd18:	f003 0308 	and.w	r3, r3, #8
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d001      	beq.n	800dd24 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dd20:	2308      	movs	r3, #8
 800dd22:	e033      	b.n	800dd8c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd2a:	f003 0302 	and.w	r3, r3, #2
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d001      	beq.n	800dd36 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dd32:	2302      	movs	r3, #2
 800dd34:	e02a      	b.n	800dd8c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd3c:	f003 0320 	and.w	r3, r3, #32
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d017      	beq.n	800dd74 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800dd44:	2320      	movs	r3, #32
 800dd46:	e021      	b.n	800dd8c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f002 fcc7 	bl	80106e0 <SDMMC_ReadFIFO>
 800dd52:	4602      	mov	r2, r0
 800dd54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd56:	601a      	str	r2, [r3, #0]
    pData++;
 800dd58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd5a:	3304      	adds	r3, #4
 800dd5c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800dd5e:	f7f4 fb23 	bl	80023a8 <HAL_GetTick>
 800dd62:	4602      	mov	r2, r0
 800dd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd66:	1ad3      	subs	r3, r2, r3
 800dd68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd6c:	d102      	bne.n	800dd74 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dd6e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd72:	e00b      	b.n	800dd8c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d1e2      	bne.n	800dd48 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a03      	ldr	r2, [pc, #12]	@ (800dd94 <SD_SendSDStatus+0x19c>)
 800dd88:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800dd8a:	2300      	movs	r3, #0
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3730      	adds	r7, #48	@ 0x30
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	18000f3a 	.word	0x18000f3a

0800dd98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d102      	bne.n	800ddae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dda8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ddac:	e018      	b.n	800dde0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddb6:	041b      	lsls	r3, r3, #16
 800ddb8:	4619      	mov	r1, r3
 800ddba:	4610      	mov	r0, r2
 800ddbc:	f002 fe9f 	bl	8010afe <SDMMC_CmdSendStatus>
 800ddc0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d001      	beq.n	800ddcc <SD_SendStatus+0x34>
  {
    return errorstate;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	e009      	b.n	800dde0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f002 fce7 	bl	80107a6 <SDMMC_GetResponse>
 800ddd8:	4602      	mov	r2, r0
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ddde:	2300      	movs	r3, #0
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3710      	adds	r7, #16
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b086      	sub	sp, #24
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	60fb      	str	r3, [r7, #12]
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	4618      	mov	r0, r3
 800de00:	f002 fcd1 	bl	80107a6 <SDMMC_GetResponse>
 800de04:	4603      	mov	r3, r0
 800de06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800de0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800de0e:	d102      	bne.n	800de16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800de10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800de14:	e02f      	b.n	800de76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800de16:	f107 030c 	add.w	r3, r7, #12
 800de1a:	4619      	mov	r1, r3
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 f879 	bl	800df14 <SD_FindSCR>
 800de22:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d001      	beq.n	800de2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	e023      	b.n	800de76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800de34:	2b00      	cmp	r3, #0
 800de36:	d01c      	beq.n	800de72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de40:	041b      	lsls	r3, r3, #16
 800de42:	4619      	mov	r1, r3
 800de44:	4610      	mov	r0, r2
 800de46:	f002 fd71 	bl	801092c <SDMMC_CmdAppCommand>
 800de4a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d001      	beq.n	800de56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	e00f      	b.n	800de76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	2102      	movs	r1, #2
 800de5c:	4618      	mov	r0, r3
 800de5e:	f002 fda8 	bl	80109b2 <SDMMC_CmdBusWidth>
 800de62:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d001      	beq.n	800de6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	e003      	b.n	800de76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800de6e:	2300      	movs	r3, #0
 800de70:	e001      	b.n	800de76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de72:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800de76:	4618      	mov	r0, r3
 800de78:	3718      	adds	r7, #24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800de7e:	b580      	push	{r7, lr}
 800de80:	b086      	sub	sp, #24
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800de86:	2300      	movs	r3, #0
 800de88:	60fb      	str	r3, [r7, #12]
 800de8a:	2300      	movs	r3, #0
 800de8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2100      	movs	r1, #0
 800de94:	4618      	mov	r0, r3
 800de96:	f002 fc86 	bl	80107a6 <SDMMC_GetResponse>
 800de9a:	4603      	mov	r3, r0
 800de9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dea0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dea4:	d102      	bne.n	800deac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dea6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800deaa:	e02f      	b.n	800df0c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800deac:	f107 030c 	add.w	r3, r7, #12
 800deb0:	4619      	mov	r1, r3
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 f82e 	bl	800df14 <SD_FindSCR>
 800deb8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d001      	beq.n	800dec4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	e023      	b.n	800df0c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800deca:	2b00      	cmp	r3, #0
 800decc:	d01c      	beq.n	800df08 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ded6:	041b      	lsls	r3, r3, #16
 800ded8:	4619      	mov	r1, r3
 800deda:	4610      	mov	r0, r2
 800dedc:	f002 fd26 	bl	801092c <SDMMC_CmdAppCommand>
 800dee0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d001      	beq.n	800deec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	e00f      	b.n	800df0c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2100      	movs	r1, #0
 800def2:	4618      	mov	r0, r3
 800def4:	f002 fd5d 	bl	80109b2 <SDMMC_CmdBusWidth>
 800def8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d001      	beq.n	800df04 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	e003      	b.n	800df0c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800df04:	2300      	movs	r3, #0
 800df06:	e001      	b.n	800df0c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800df08:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b08e      	sub	sp, #56	@ 0x38
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800df1e:	f7f4 fa43 	bl	80023a8 <HAL_GetTick>
 800df22:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800df24:	2300      	movs	r3, #0
 800df26:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800df28:	2300      	movs	r3, #0
 800df2a:	60bb      	str	r3, [r7, #8]
 800df2c:	2300      	movs	r3, #0
 800df2e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	2108      	movs	r1, #8
 800df3a:	4618      	mov	r0, r3
 800df3c:	f002 fc72 	bl	8010824 <SDMMC_CmdBlockLength>
 800df40:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800df42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df44:	2b00      	cmp	r3, #0
 800df46:	d001      	beq.n	800df4c <SD_FindSCR+0x38>
  {
    return errorstate;
 800df48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df4a:	e0ad      	b.n	800e0a8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df54:	041b      	lsls	r3, r3, #16
 800df56:	4619      	mov	r1, r3
 800df58:	4610      	mov	r0, r2
 800df5a:	f002 fce7 	bl	801092c <SDMMC_CmdAppCommand>
 800df5e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800df60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df62:	2b00      	cmp	r3, #0
 800df64:	d001      	beq.n	800df6a <SD_FindSCR+0x56>
  {
    return errorstate;
 800df66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df68:	e09e      	b.n	800e0a8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800df6a:	f04f 33ff 	mov.w	r3, #4294967295
 800df6e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800df70:	2308      	movs	r3, #8
 800df72:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800df74:	2330      	movs	r3, #48	@ 0x30
 800df76:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800df78:	2302      	movs	r3, #2
 800df7a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800df7c:	2300      	movs	r3, #0
 800df7e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800df80:	2301      	movs	r3, #1
 800df82:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f107 0210 	add.w	r2, r7, #16
 800df8c:	4611      	mov	r1, r2
 800df8e:	4618      	mov	r0, r3
 800df90:	f002 fc1c 	bl	80107cc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4618      	mov	r0, r3
 800df9a:	f002 fd2d 	bl	80109f8 <SDMMC_CmdSendSCR>
 800df9e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dfa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d027      	beq.n	800dff6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800dfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfa8:	e07e      	b.n	800e0a8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d113      	bne.n	800dfe0 <SD_FindSCR+0xcc>
 800dfb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d110      	bne.n	800dfe0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f002 fb8c 	bl	80106e0 <SDMMC_ReadFIFO>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f002 fb85 	bl	80106e0 <SDMMC_ReadFIFO>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	60fb      	str	r3, [r7, #12]
      index++;
 800dfda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfdc:	3301      	adds	r3, #1
 800dfde:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800dfe0:	f7f4 f9e2 	bl	80023a8 <HAL_GetTick>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfe8:	1ad3      	subs	r3, r2, r3
 800dfea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfee:	d102      	bne.n	800dff6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dff0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dff4:	e058      	b.n	800e0a8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dffc:	f240 532a 	movw	r3, #1322	@ 0x52a
 800e000:	4013      	ands	r3, r2
 800e002:	2b00      	cmp	r3, #0
 800e004:	d0d1      	beq.n	800dfaa <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e00c:	f003 0308 	and.w	r3, r3, #8
 800e010:	2b00      	cmp	r3, #0
 800e012:	d005      	beq.n	800e020 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2208      	movs	r2, #8
 800e01a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e01c:	2308      	movs	r3, #8
 800e01e:	e043      	b.n	800e0a8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e026:	f003 0302 	and.w	r3, r3, #2
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d005      	beq.n	800e03a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2202      	movs	r2, #2
 800e034:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e036:	2302      	movs	r3, #2
 800e038:	e036      	b.n	800e0a8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e040:	f003 0320 	and.w	r3, r3, #32
 800e044:	2b00      	cmp	r3, #0
 800e046:	d005      	beq.n	800e054 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2220      	movs	r2, #32
 800e04e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e050:	2320      	movs	r3, #32
 800e052:	e029      	b.n	800e0a8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4a15      	ldr	r2, [pc, #84]	@ (800e0b0 <SD_FindSCR+0x19c>)
 800e05a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	061a      	lsls	r2, r3, #24
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	021b      	lsls	r3, r3, #8
 800e064:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e068:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	0a1b      	lsrs	r3, r3, #8
 800e06e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800e072:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	0e1b      	lsrs	r3, r3, #24
 800e078:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800e07a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e07c:	601a      	str	r2, [r3, #0]
    scr++;
 800e07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e080:	3304      	adds	r3, #4
 800e082:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	061a      	lsls	r2, r3, #24
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	021b      	lsls	r3, r3, #8
 800e08c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e090:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	0a1b      	lsrs	r3, r3, #8
 800e096:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800e09a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	0e1b      	lsrs	r3, r3, #24
 800e0a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800e0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e0a6:	2300      	movs	r3, #0
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3738      	adds	r7, #56	@ 0x38
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	18000f3a 	.word	0x18000f3a

0800e0b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b084      	sub	sp, #16
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d101      	bne.n	800e0c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e10f      	b.n	800e2e6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a87      	ldr	r2, [pc, #540]	@ (800e2f0 <HAL_SPI_Init+0x23c>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d00f      	beq.n	800e0f6 <HAL_SPI_Init+0x42>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4a86      	ldr	r2, [pc, #536]	@ (800e2f4 <HAL_SPI_Init+0x240>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d00a      	beq.n	800e0f6 <HAL_SPI_Init+0x42>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a84      	ldr	r2, [pc, #528]	@ (800e2f8 <HAL_SPI_Init+0x244>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d005      	beq.n	800e0f6 <HAL_SPI_Init+0x42>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	2b0f      	cmp	r3, #15
 800e0f0:	d901      	bls.n	800e0f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	e0f7      	b.n	800e2e6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 f900 	bl	800e2fc <SPI_GetPacketSize>
 800e0fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	4a7b      	ldr	r2, [pc, #492]	@ (800e2f0 <HAL_SPI_Init+0x23c>)
 800e104:	4293      	cmp	r3, r2
 800e106:	d00c      	beq.n	800e122 <HAL_SPI_Init+0x6e>
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a79      	ldr	r2, [pc, #484]	@ (800e2f4 <HAL_SPI_Init+0x240>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	d007      	beq.n	800e122 <HAL_SPI_Init+0x6e>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4a78      	ldr	r2, [pc, #480]	@ (800e2f8 <HAL_SPI_Init+0x244>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d002      	beq.n	800e122 <HAL_SPI_Init+0x6e>
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	2b08      	cmp	r3, #8
 800e120:	d811      	bhi.n	800e146 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e126:	4a72      	ldr	r2, [pc, #456]	@ (800e2f0 <HAL_SPI_Init+0x23c>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d009      	beq.n	800e140 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a70      	ldr	r2, [pc, #448]	@ (800e2f4 <HAL_SPI_Init+0x240>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d004      	beq.n	800e140 <HAL_SPI_Init+0x8c>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a6f      	ldr	r2, [pc, #444]	@ (800e2f8 <HAL_SPI_Init+0x244>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d104      	bne.n	800e14a <HAL_SPI_Init+0x96>
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2b10      	cmp	r3, #16
 800e144:	d901      	bls.n	800e14a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e146:	2301      	movs	r3, #1
 800e148:	e0cd      	b.n	800e2e6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e150:	b2db      	uxtb	r3, r3
 800e152:	2b00      	cmp	r3, #0
 800e154:	d106      	bne.n	800e164 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2200      	movs	r2, #0
 800e15a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7f3 fcb6 	bl	8001ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2202      	movs	r2, #2
 800e168:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	681a      	ldr	r2, [r3, #0]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f022 0201 	bic.w	r2, r2, #1
 800e17a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	689b      	ldr	r3, [r3, #8]
 800e182:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800e186:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	699b      	ldr	r3, [r3, #24]
 800e18c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e190:	d119      	bne.n	800e1c6 <HAL_SPI_Init+0x112>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e19a:	d103      	bne.n	800e1a4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d008      	beq.n	800e1b6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d10c      	bne.n	800e1c6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e1b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e1b4:	d107      	bne.n	800e1c6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e1c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00f      	beq.n	800e1f2 <HAL_SPI_Init+0x13e>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	2b06      	cmp	r3, #6
 800e1d8:	d90b      	bls.n	800e1f2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	430a      	orrs	r2, r1
 800e1ee:	601a      	str	r2, [r3, #0]
 800e1f0:	e007      	b.n	800e202 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	681a      	ldr	r2, [r3, #0]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e200:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	69da      	ldr	r2, [r3, #28]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e20a:	431a      	orrs	r2, r3
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	431a      	orrs	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e214:	ea42 0103 	orr.w	r1, r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	68da      	ldr	r2, [r3, #12]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	430a      	orrs	r2, r1
 800e222:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e22c:	431a      	orrs	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e232:	431a      	orrs	r2, r3
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	699b      	ldr	r3, [r3, #24]
 800e238:	431a      	orrs	r2, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	691b      	ldr	r3, [r3, #16]
 800e23e:	431a      	orrs	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	695b      	ldr	r3, [r3, #20]
 800e244:	431a      	orrs	r2, r3
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6a1b      	ldr	r3, [r3, #32]
 800e24a:	431a      	orrs	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	431a      	orrs	r2, r3
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e256:	431a      	orrs	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	431a      	orrs	r2, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e262:	ea42 0103 	orr.w	r1, r2, r3
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	430a      	orrs	r2, r1
 800e270:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d113      	bne.n	800e2a2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e28c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	689b      	ldr	r3, [r3, #8]
 800e294:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e2a0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f022 0201 	bic.w	r2, r2, #1
 800e2b0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	685b      	ldr	r3, [r3, #4]
 800e2b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d00a      	beq.n	800e2d4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	430a      	orrs	r2, r1
 800e2d2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2201      	movs	r2, #1
 800e2e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800e2e4:	2300      	movs	r3, #0
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3710      	adds	r7, #16
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	40013000 	.word	0x40013000
 800e2f4:	40003800 	.word	0x40003800
 800e2f8:	40003c00 	.word	0x40003c00

0800e2fc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b085      	sub	sp, #20
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e308:	095b      	lsrs	r3, r3, #5
 800e30a:	3301      	adds	r3, #1
 800e30c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	3301      	adds	r3, #1
 800e314:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	3307      	adds	r3, #7
 800e31a:	08db      	lsrs	r3, r3, #3
 800e31c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	fb02 f303 	mul.w	r3, r2, r3
}
 800e326:	4618      	mov	r0, r3
 800e328:	3714      	adds	r7, #20
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr

0800e332 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e332:	b580      	push	{r7, lr}
 800e334:	b082      	sub	sp, #8
 800e336:	af00      	add	r7, sp, #0
 800e338:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d101      	bne.n	800e344 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e340:	2301      	movs	r3, #1
 800e342:	e049      	b.n	800e3d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d106      	bne.n	800e35e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2200      	movs	r2, #0
 800e354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f7f3 fcad 	bl	8001cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2202      	movs	r2, #2
 800e362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	3304      	adds	r3, #4
 800e36e:	4619      	mov	r1, r3
 800e370:	4610      	mov	r0, r2
 800e372:	f000 fbe9 	bl	800eb48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2201      	movs	r2, #1
 800e37a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2201      	movs	r2, #1
 800e382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2201      	movs	r2, #1
 800e38a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2201      	movs	r2, #1
 800e392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2201      	movs	r2, #1
 800e39a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2201      	movs	r2, #1
 800e3a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e3d6:	2300      	movs	r3, #0
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3708      	adds	r7, #8
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d101      	bne.n	800e3f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	e049      	b.n	800e486 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e3f8:	b2db      	uxtb	r3, r3
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d106      	bne.n	800e40c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f7f3 fbf0 	bl	8001bec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2202      	movs	r2, #2
 800e410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	3304      	adds	r3, #4
 800e41c:	4619      	mov	r1, r3
 800e41e:	4610      	mov	r0, r2
 800e420:	f000 fb92 	bl	800eb48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2201      	movs	r2, #1
 800e428:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2201      	movs	r2, #1
 800e430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2201      	movs	r2, #1
 800e438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2201      	movs	r2, #1
 800e440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2201      	movs	r2, #1
 800e448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2201      	movs	r2, #1
 800e450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2201      	movs	r2, #1
 800e458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2201      	movs	r2, #1
 800e460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2201      	movs	r2, #1
 800e468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2201      	movs	r2, #1
 800e470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2201      	movs	r2, #1
 800e478:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2201      	movs	r2, #1
 800e480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e484:	2300      	movs	r3, #0
}
 800e486:	4618      	mov	r0, r3
 800e488:	3708      	adds	r7, #8
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
	...

0800e490 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d109      	bne.n	800e4b4 <HAL_TIM_PWM_Start+0x24>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	bf14      	ite	ne
 800e4ac:	2301      	movne	r3, #1
 800e4ae:	2300      	moveq	r3, #0
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	e03c      	b.n	800e52e <HAL_TIM_PWM_Start+0x9e>
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	2b04      	cmp	r3, #4
 800e4b8:	d109      	bne.n	800e4ce <HAL_TIM_PWM_Start+0x3e>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	bf14      	ite	ne
 800e4c6:	2301      	movne	r3, #1
 800e4c8:	2300      	moveq	r3, #0
 800e4ca:	b2db      	uxtb	r3, r3
 800e4cc:	e02f      	b.n	800e52e <HAL_TIM_PWM_Start+0x9e>
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	2b08      	cmp	r3, #8
 800e4d2:	d109      	bne.n	800e4e8 <HAL_TIM_PWM_Start+0x58>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e4da:	b2db      	uxtb	r3, r3
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	bf14      	ite	ne
 800e4e0:	2301      	movne	r3, #1
 800e4e2:	2300      	moveq	r3, #0
 800e4e4:	b2db      	uxtb	r3, r3
 800e4e6:	e022      	b.n	800e52e <HAL_TIM_PWM_Start+0x9e>
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	2b0c      	cmp	r3, #12
 800e4ec:	d109      	bne.n	800e502 <HAL_TIM_PWM_Start+0x72>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	bf14      	ite	ne
 800e4fa:	2301      	movne	r3, #1
 800e4fc:	2300      	moveq	r3, #0
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	e015      	b.n	800e52e <HAL_TIM_PWM_Start+0x9e>
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	2b10      	cmp	r3, #16
 800e506:	d109      	bne.n	800e51c <HAL_TIM_PWM_Start+0x8c>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e50e:	b2db      	uxtb	r3, r3
 800e510:	2b01      	cmp	r3, #1
 800e512:	bf14      	ite	ne
 800e514:	2301      	movne	r3, #1
 800e516:	2300      	moveq	r3, #0
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	e008      	b.n	800e52e <HAL_TIM_PWM_Start+0x9e>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e522:	b2db      	uxtb	r3, r3
 800e524:	2b01      	cmp	r3, #1
 800e526:	bf14      	ite	ne
 800e528:	2301      	movne	r3, #1
 800e52a:	2300      	moveq	r3, #0
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d001      	beq.n	800e536 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e532:	2301      	movs	r3, #1
 800e534:	e0a1      	b.n	800e67a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d104      	bne.n	800e546 <HAL_TIM_PWM_Start+0xb6>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2202      	movs	r2, #2
 800e540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e544:	e023      	b.n	800e58e <HAL_TIM_PWM_Start+0xfe>
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	2b04      	cmp	r3, #4
 800e54a:	d104      	bne.n	800e556 <HAL_TIM_PWM_Start+0xc6>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2202      	movs	r2, #2
 800e550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e554:	e01b      	b.n	800e58e <HAL_TIM_PWM_Start+0xfe>
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	2b08      	cmp	r3, #8
 800e55a:	d104      	bne.n	800e566 <HAL_TIM_PWM_Start+0xd6>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2202      	movs	r2, #2
 800e560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e564:	e013      	b.n	800e58e <HAL_TIM_PWM_Start+0xfe>
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	2b0c      	cmp	r3, #12
 800e56a:	d104      	bne.n	800e576 <HAL_TIM_PWM_Start+0xe6>
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2202      	movs	r2, #2
 800e570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e574:	e00b      	b.n	800e58e <HAL_TIM_PWM_Start+0xfe>
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	2b10      	cmp	r3, #16
 800e57a:	d104      	bne.n	800e586 <HAL_TIM_PWM_Start+0xf6>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2202      	movs	r2, #2
 800e580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e584:	e003      	b.n	800e58e <HAL_TIM_PWM_Start+0xfe>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2202      	movs	r2, #2
 800e58a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	2201      	movs	r2, #1
 800e594:	6839      	ldr	r1, [r7, #0]
 800e596:	4618      	mov	r0, r3
 800e598:	f000 fe4c 	bl	800f234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a38      	ldr	r2, [pc, #224]	@ (800e684 <HAL_TIM_PWM_Start+0x1f4>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d013      	beq.n	800e5ce <HAL_TIM_PWM_Start+0x13e>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4a37      	ldr	r2, [pc, #220]	@ (800e688 <HAL_TIM_PWM_Start+0x1f8>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d00e      	beq.n	800e5ce <HAL_TIM_PWM_Start+0x13e>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4a35      	ldr	r2, [pc, #212]	@ (800e68c <HAL_TIM_PWM_Start+0x1fc>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d009      	beq.n	800e5ce <HAL_TIM_PWM_Start+0x13e>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4a34      	ldr	r2, [pc, #208]	@ (800e690 <HAL_TIM_PWM_Start+0x200>)
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d004      	beq.n	800e5ce <HAL_TIM_PWM_Start+0x13e>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a32      	ldr	r2, [pc, #200]	@ (800e694 <HAL_TIM_PWM_Start+0x204>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d101      	bne.n	800e5d2 <HAL_TIM_PWM_Start+0x142>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e000      	b.n	800e5d4 <HAL_TIM_PWM_Start+0x144>
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d007      	beq.n	800e5e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e5e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4a25      	ldr	r2, [pc, #148]	@ (800e684 <HAL_TIM_PWM_Start+0x1f4>)
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d022      	beq.n	800e638 <HAL_TIM_PWM_Start+0x1a8>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5fa:	d01d      	beq.n	800e638 <HAL_TIM_PWM_Start+0x1a8>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4a25      	ldr	r2, [pc, #148]	@ (800e698 <HAL_TIM_PWM_Start+0x208>)
 800e602:	4293      	cmp	r3, r2
 800e604:	d018      	beq.n	800e638 <HAL_TIM_PWM_Start+0x1a8>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4a24      	ldr	r2, [pc, #144]	@ (800e69c <HAL_TIM_PWM_Start+0x20c>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d013      	beq.n	800e638 <HAL_TIM_PWM_Start+0x1a8>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4a22      	ldr	r2, [pc, #136]	@ (800e6a0 <HAL_TIM_PWM_Start+0x210>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d00e      	beq.n	800e638 <HAL_TIM_PWM_Start+0x1a8>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4a1a      	ldr	r2, [pc, #104]	@ (800e688 <HAL_TIM_PWM_Start+0x1f8>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d009      	beq.n	800e638 <HAL_TIM_PWM_Start+0x1a8>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4a1e      	ldr	r2, [pc, #120]	@ (800e6a4 <HAL_TIM_PWM_Start+0x214>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d004      	beq.n	800e638 <HAL_TIM_PWM_Start+0x1a8>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4a16      	ldr	r2, [pc, #88]	@ (800e68c <HAL_TIM_PWM_Start+0x1fc>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d115      	bne.n	800e664 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	689a      	ldr	r2, [r3, #8]
 800e63e:	4b1a      	ldr	r3, [pc, #104]	@ (800e6a8 <HAL_TIM_PWM_Start+0x218>)
 800e640:	4013      	ands	r3, r2
 800e642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2b06      	cmp	r3, #6
 800e648:	d015      	beq.n	800e676 <HAL_TIM_PWM_Start+0x1e6>
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e650:	d011      	beq.n	800e676 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f042 0201 	orr.w	r2, r2, #1
 800e660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e662:	e008      	b.n	800e676 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f042 0201 	orr.w	r2, r2, #1
 800e672:	601a      	str	r2, [r3, #0]
 800e674:	e000      	b.n	800e678 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e676:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e678:	2300      	movs	r3, #0
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3710      	adds	r7, #16
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	40010000 	.word	0x40010000
 800e688:	40010400 	.word	0x40010400
 800e68c:	40014000 	.word	0x40014000
 800e690:	40014400 	.word	0x40014400
 800e694:	40014800 	.word	0x40014800
 800e698:	40000400 	.word	0x40000400
 800e69c:	40000800 	.word	0x40000800
 800e6a0:	40000c00 	.word	0x40000c00
 800e6a4:	40001800 	.word	0x40001800
 800e6a8:	00010007 	.word	0x00010007

0800e6ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	68db      	ldr	r3, [r3, #12]
 800e6ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	691b      	ldr	r3, [r3, #16]
 800e6c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	f003 0302 	and.w	r3, r3, #2
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d020      	beq.n	800e710 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f003 0302 	and.w	r3, r3, #2
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d01b      	beq.n	800e710 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f06f 0202 	mvn.w	r2, #2
 800e6e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	699b      	ldr	r3, [r3, #24]
 800e6ee:	f003 0303 	and.w	r3, r3, #3
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d003      	beq.n	800e6fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f000 fa08 	bl	800eb0c <HAL_TIM_IC_CaptureCallback>
 800e6fc:	e005      	b.n	800e70a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 f9fa 	bl	800eaf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f000 fa0b 	bl	800eb20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2200      	movs	r2, #0
 800e70e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	f003 0304 	and.w	r3, r3, #4
 800e716:	2b00      	cmp	r3, #0
 800e718:	d020      	beq.n	800e75c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	f003 0304 	and.w	r3, r3, #4
 800e720:	2b00      	cmp	r3, #0
 800e722:	d01b      	beq.n	800e75c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f06f 0204 	mvn.w	r2, #4
 800e72c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2202      	movs	r2, #2
 800e732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	699b      	ldr	r3, [r3, #24]
 800e73a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d003      	beq.n	800e74a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 f9e2 	bl	800eb0c <HAL_TIM_IC_CaptureCallback>
 800e748:	e005      	b.n	800e756 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f000 f9d4 	bl	800eaf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f000 f9e5 	bl	800eb20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2200      	movs	r2, #0
 800e75a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	f003 0308 	and.w	r3, r3, #8
 800e762:	2b00      	cmp	r3, #0
 800e764:	d020      	beq.n	800e7a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f003 0308 	and.w	r3, r3, #8
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d01b      	beq.n	800e7a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f06f 0208 	mvn.w	r2, #8
 800e778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2204      	movs	r2, #4
 800e77e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	69db      	ldr	r3, [r3, #28]
 800e786:	f003 0303 	and.w	r3, r3, #3
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d003      	beq.n	800e796 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 f9bc 	bl	800eb0c <HAL_TIM_IC_CaptureCallback>
 800e794:	e005      	b.n	800e7a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f000 f9ae 	bl	800eaf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 f9bf 	bl	800eb20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	f003 0310 	and.w	r3, r3, #16
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d020      	beq.n	800e7f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f003 0310 	and.w	r3, r3, #16
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d01b      	beq.n	800e7f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f06f 0210 	mvn.w	r2, #16
 800e7c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2208      	movs	r2, #8
 800e7ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	69db      	ldr	r3, [r3, #28]
 800e7d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d003      	beq.n	800e7e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 f996 	bl	800eb0c <HAL_TIM_IC_CaptureCallback>
 800e7e0:	e005      	b.n	800e7ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 f988 	bl	800eaf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f000 f999 	bl	800eb20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	f003 0301 	and.w	r3, r3, #1
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d00c      	beq.n	800e818 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f003 0301 	and.w	r3, r3, #1
 800e804:	2b00      	cmp	r3, #0
 800e806:	d007      	beq.n	800e818 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f06f 0201 	mvn.w	r2, #1
 800e810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f000 f966 	bl	800eae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d104      	bne.n	800e82c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d00c      	beq.n	800e846 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e832:	2b00      	cmp	r3, #0
 800e834:	d007      	beq.n	800e846 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e83e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 fe33 	bl	800f4ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00c      	beq.n	800e86a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e856:	2b00      	cmp	r3, #0
 800e858:	d007      	beq.n	800e86a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f000 fe2b 	bl	800f4c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00c      	beq.n	800e88e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d007      	beq.n	800e88e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 f953 	bl	800eb34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	f003 0320 	and.w	r3, r3, #32
 800e894:	2b00      	cmp	r3, #0
 800e896:	d00c      	beq.n	800e8b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f003 0320 	and.w	r3, r3, #32
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d007      	beq.n	800e8b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f06f 0220 	mvn.w	r2, #32
 800e8aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f000 fdf3 	bl	800f498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e8b2:	bf00      	nop
 800e8b4:	3710      	adds	r7, #16
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
	...

0800e8bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b086      	sub	sp, #24
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d101      	bne.n	800e8da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e8d6:	2302      	movs	r3, #2
 800e8d8:	e0ff      	b.n	800eada <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2201      	movs	r2, #1
 800e8de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2b14      	cmp	r3, #20
 800e8e6:	f200 80f0 	bhi.w	800eaca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e8ea:	a201      	add	r2, pc, #4	@ (adr r2, 800e8f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f0:	0800e945 	.word	0x0800e945
 800e8f4:	0800eacb 	.word	0x0800eacb
 800e8f8:	0800eacb 	.word	0x0800eacb
 800e8fc:	0800eacb 	.word	0x0800eacb
 800e900:	0800e985 	.word	0x0800e985
 800e904:	0800eacb 	.word	0x0800eacb
 800e908:	0800eacb 	.word	0x0800eacb
 800e90c:	0800eacb 	.word	0x0800eacb
 800e910:	0800e9c7 	.word	0x0800e9c7
 800e914:	0800eacb 	.word	0x0800eacb
 800e918:	0800eacb 	.word	0x0800eacb
 800e91c:	0800eacb 	.word	0x0800eacb
 800e920:	0800ea07 	.word	0x0800ea07
 800e924:	0800eacb 	.word	0x0800eacb
 800e928:	0800eacb 	.word	0x0800eacb
 800e92c:	0800eacb 	.word	0x0800eacb
 800e930:	0800ea49 	.word	0x0800ea49
 800e934:	0800eacb 	.word	0x0800eacb
 800e938:	0800eacb 	.word	0x0800eacb
 800e93c:	0800eacb 	.word	0x0800eacb
 800e940:	0800ea89 	.word	0x0800ea89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	68b9      	ldr	r1, [r7, #8]
 800e94a:	4618      	mov	r0, r3
 800e94c:	f000 f99c 	bl	800ec88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	699a      	ldr	r2, [r3, #24]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f042 0208 	orr.w	r2, r2, #8
 800e95e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	699a      	ldr	r2, [r3, #24]
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f022 0204 	bic.w	r2, r2, #4
 800e96e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	6999      	ldr	r1, [r3, #24]
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	691a      	ldr	r2, [r3, #16]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	430a      	orrs	r2, r1
 800e980:	619a      	str	r2, [r3, #24]
      break;
 800e982:	e0a5      	b.n	800ead0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	68b9      	ldr	r1, [r7, #8]
 800e98a:	4618      	mov	r0, r3
 800e98c:	f000 fa0c 	bl	800eda8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	699a      	ldr	r2, [r3, #24]
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e99e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	699a      	ldr	r2, [r3, #24]
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e9ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	6999      	ldr	r1, [r3, #24]
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	691b      	ldr	r3, [r3, #16]
 800e9ba:	021a      	lsls	r2, r3, #8
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	430a      	orrs	r2, r1
 800e9c2:	619a      	str	r2, [r3, #24]
      break;
 800e9c4:	e084      	b.n	800ead0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	68b9      	ldr	r1, [r7, #8]
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f000 fa75 	bl	800eebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	69da      	ldr	r2, [r3, #28]
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f042 0208 	orr.w	r2, r2, #8
 800e9e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	69da      	ldr	r2, [r3, #28]
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f022 0204 	bic.w	r2, r2, #4
 800e9f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	69d9      	ldr	r1, [r3, #28]
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	691a      	ldr	r2, [r3, #16]
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	430a      	orrs	r2, r1
 800ea02:	61da      	str	r2, [r3, #28]
      break;
 800ea04:	e064      	b.n	800ead0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	68b9      	ldr	r1, [r7, #8]
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f000 fadd 	bl	800efcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	69da      	ldr	r2, [r3, #28]
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ea20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	69da      	ldr	r2, [r3, #28]
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	69d9      	ldr	r1, [r3, #28]
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	691b      	ldr	r3, [r3, #16]
 800ea3c:	021a      	lsls	r2, r3, #8
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	430a      	orrs	r2, r1
 800ea44:	61da      	str	r2, [r3, #28]
      break;
 800ea46:	e043      	b.n	800ead0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	68b9      	ldr	r1, [r7, #8]
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f000 fb26 	bl	800f0a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f042 0208 	orr.w	r2, r2, #8
 800ea62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f022 0204 	bic.w	r2, r2, #4
 800ea72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	691a      	ldr	r2, [r3, #16]
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	430a      	orrs	r2, r1
 800ea84:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ea86:	e023      	b.n	800ead0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	68b9      	ldr	r1, [r7, #8]
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f000 fb6a 	bl	800f168 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eaa2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eab2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	691b      	ldr	r3, [r3, #16]
 800eabe:	021a      	lsls	r2, r3, #8
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	430a      	orrs	r2, r1
 800eac6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800eac8:	e002      	b.n	800ead0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800eaca:	2301      	movs	r3, #1
 800eacc:	75fb      	strb	r3, [r7, #23]
      break;
 800eace:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2200      	movs	r2, #0
 800ead4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ead8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3718      	adds	r7, #24
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop

0800eae4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800eaec:	bf00      	nop
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eb00:	bf00      	nop
 800eb02:	370c      	adds	r7, #12
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr

0800eb0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eb14:	bf00      	nop
 800eb16:	370c      	adds	r7, #12
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr

0800eb20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eb28:	bf00      	nop
 800eb2a:	370c      	adds	r7, #12
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr

0800eb34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eb3c:	bf00      	nop
 800eb3e:	370c      	adds	r7, #12
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr

0800eb48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	4a43      	ldr	r2, [pc, #268]	@ (800ec68 <TIM_Base_SetConfig+0x120>)
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d013      	beq.n	800eb88 <TIM_Base_SetConfig+0x40>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb66:	d00f      	beq.n	800eb88 <TIM_Base_SetConfig+0x40>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	4a40      	ldr	r2, [pc, #256]	@ (800ec6c <TIM_Base_SetConfig+0x124>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d00b      	beq.n	800eb88 <TIM_Base_SetConfig+0x40>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	4a3f      	ldr	r2, [pc, #252]	@ (800ec70 <TIM_Base_SetConfig+0x128>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d007      	beq.n	800eb88 <TIM_Base_SetConfig+0x40>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	4a3e      	ldr	r2, [pc, #248]	@ (800ec74 <TIM_Base_SetConfig+0x12c>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d003      	beq.n	800eb88 <TIM_Base_SetConfig+0x40>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	4a3d      	ldr	r2, [pc, #244]	@ (800ec78 <TIM_Base_SetConfig+0x130>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d108      	bne.n	800eb9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	4313      	orrs	r3, r2
 800eb98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4a32      	ldr	r2, [pc, #200]	@ (800ec68 <TIM_Base_SetConfig+0x120>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d01f      	beq.n	800ebe2 <TIM_Base_SetConfig+0x9a>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eba8:	d01b      	beq.n	800ebe2 <TIM_Base_SetConfig+0x9a>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4a2f      	ldr	r2, [pc, #188]	@ (800ec6c <TIM_Base_SetConfig+0x124>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d017      	beq.n	800ebe2 <TIM_Base_SetConfig+0x9a>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4a2e      	ldr	r2, [pc, #184]	@ (800ec70 <TIM_Base_SetConfig+0x128>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d013      	beq.n	800ebe2 <TIM_Base_SetConfig+0x9a>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	4a2d      	ldr	r2, [pc, #180]	@ (800ec74 <TIM_Base_SetConfig+0x12c>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d00f      	beq.n	800ebe2 <TIM_Base_SetConfig+0x9a>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	4a2c      	ldr	r2, [pc, #176]	@ (800ec78 <TIM_Base_SetConfig+0x130>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d00b      	beq.n	800ebe2 <TIM_Base_SetConfig+0x9a>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4a2b      	ldr	r2, [pc, #172]	@ (800ec7c <TIM_Base_SetConfig+0x134>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d007      	beq.n	800ebe2 <TIM_Base_SetConfig+0x9a>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4a2a      	ldr	r2, [pc, #168]	@ (800ec80 <TIM_Base_SetConfig+0x138>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d003      	beq.n	800ebe2 <TIM_Base_SetConfig+0x9a>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4a29      	ldr	r2, [pc, #164]	@ (800ec84 <TIM_Base_SetConfig+0x13c>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d108      	bne.n	800ebf4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ebe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	68db      	ldr	r3, [r3, #12]
 800ebee:	68fa      	ldr	r2, [r7, #12]
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	695b      	ldr	r3, [r3, #20]
 800ebfe:	4313      	orrs	r3, r2
 800ec00:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	689a      	ldr	r2, [r3, #8]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	681a      	ldr	r2, [r3, #0]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	4a14      	ldr	r2, [pc, #80]	@ (800ec68 <TIM_Base_SetConfig+0x120>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d00f      	beq.n	800ec3a <TIM_Base_SetConfig+0xf2>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	4a16      	ldr	r2, [pc, #88]	@ (800ec78 <TIM_Base_SetConfig+0x130>)
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d00b      	beq.n	800ec3a <TIM_Base_SetConfig+0xf2>
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	4a15      	ldr	r2, [pc, #84]	@ (800ec7c <TIM_Base_SetConfig+0x134>)
 800ec26:	4293      	cmp	r3, r2
 800ec28:	d007      	beq.n	800ec3a <TIM_Base_SetConfig+0xf2>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	4a14      	ldr	r2, [pc, #80]	@ (800ec80 <TIM_Base_SetConfig+0x138>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d003      	beq.n	800ec3a <TIM_Base_SetConfig+0xf2>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	4a13      	ldr	r2, [pc, #76]	@ (800ec84 <TIM_Base_SetConfig+0x13c>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d103      	bne.n	800ec42 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	691a      	ldr	r2, [r3, #16]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	f043 0204 	orr.w	r2, r3, #4
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2201      	movs	r2, #1
 800ec52:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	68fa      	ldr	r2, [r7, #12]
 800ec58:	601a      	str	r2, [r3, #0]
}
 800ec5a:	bf00      	nop
 800ec5c:	3714      	adds	r7, #20
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr
 800ec66:	bf00      	nop
 800ec68:	40010000 	.word	0x40010000
 800ec6c:	40000400 	.word	0x40000400
 800ec70:	40000800 	.word	0x40000800
 800ec74:	40000c00 	.word	0x40000c00
 800ec78:	40010400 	.word	0x40010400
 800ec7c:	40014000 	.word	0x40014000
 800ec80:	40014400 	.word	0x40014400
 800ec84:	40014800 	.word	0x40014800

0800ec88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b087      	sub	sp, #28
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a1b      	ldr	r3, [r3, #32]
 800ec96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6a1b      	ldr	r3, [r3, #32]
 800ec9c:	f023 0201 	bic.w	r2, r3, #1
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	685b      	ldr	r3, [r3, #4]
 800eca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	699b      	ldr	r3, [r3, #24]
 800ecae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	4b37      	ldr	r3, [pc, #220]	@ (800ed90 <TIM_OC1_SetConfig+0x108>)
 800ecb4:	4013      	ands	r3, r2
 800ecb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	f023 0303 	bic.w	r3, r3, #3
 800ecbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	68fa      	ldr	r2, [r7, #12]
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	f023 0302 	bic.w	r3, r3, #2
 800ecd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	689b      	ldr	r3, [r3, #8]
 800ecd6:	697a      	ldr	r2, [r7, #20]
 800ecd8:	4313      	orrs	r3, r2
 800ecda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4a2d      	ldr	r2, [pc, #180]	@ (800ed94 <TIM_OC1_SetConfig+0x10c>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d00f      	beq.n	800ed04 <TIM_OC1_SetConfig+0x7c>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	4a2c      	ldr	r2, [pc, #176]	@ (800ed98 <TIM_OC1_SetConfig+0x110>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d00b      	beq.n	800ed04 <TIM_OC1_SetConfig+0x7c>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	4a2b      	ldr	r2, [pc, #172]	@ (800ed9c <TIM_OC1_SetConfig+0x114>)
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d007      	beq.n	800ed04 <TIM_OC1_SetConfig+0x7c>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	4a2a      	ldr	r2, [pc, #168]	@ (800eda0 <TIM_OC1_SetConfig+0x118>)
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d003      	beq.n	800ed04 <TIM_OC1_SetConfig+0x7c>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	4a29      	ldr	r2, [pc, #164]	@ (800eda4 <TIM_OC1_SetConfig+0x11c>)
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d10c      	bne.n	800ed1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	f023 0308 	bic.w	r3, r3, #8
 800ed0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	697a      	ldr	r2, [r7, #20]
 800ed12:	4313      	orrs	r3, r2
 800ed14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	f023 0304 	bic.w	r3, r3, #4
 800ed1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4a1c      	ldr	r2, [pc, #112]	@ (800ed94 <TIM_OC1_SetConfig+0x10c>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d00f      	beq.n	800ed46 <TIM_OC1_SetConfig+0xbe>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	4a1b      	ldr	r2, [pc, #108]	@ (800ed98 <TIM_OC1_SetConfig+0x110>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d00b      	beq.n	800ed46 <TIM_OC1_SetConfig+0xbe>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	4a1a      	ldr	r2, [pc, #104]	@ (800ed9c <TIM_OC1_SetConfig+0x114>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d007      	beq.n	800ed46 <TIM_OC1_SetConfig+0xbe>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	4a19      	ldr	r2, [pc, #100]	@ (800eda0 <TIM_OC1_SetConfig+0x118>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d003      	beq.n	800ed46 <TIM_OC1_SetConfig+0xbe>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4a18      	ldr	r2, [pc, #96]	@ (800eda4 <TIM_OC1_SetConfig+0x11c>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d111      	bne.n	800ed6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ed4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ed54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	695b      	ldr	r3, [r3, #20]
 800ed5a:	693a      	ldr	r2, [r7, #16]
 800ed5c:	4313      	orrs	r3, r2
 800ed5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	699b      	ldr	r3, [r3, #24]
 800ed64:	693a      	ldr	r2, [r7, #16]
 800ed66:	4313      	orrs	r3, r2
 800ed68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	693a      	ldr	r2, [r7, #16]
 800ed6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	68fa      	ldr	r2, [r7, #12]
 800ed74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	685a      	ldr	r2, [r3, #4]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	697a      	ldr	r2, [r7, #20]
 800ed82:	621a      	str	r2, [r3, #32]
}
 800ed84:	bf00      	nop
 800ed86:	371c      	adds	r7, #28
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr
 800ed90:	fffeff8f 	.word	0xfffeff8f
 800ed94:	40010000 	.word	0x40010000
 800ed98:	40010400 	.word	0x40010400
 800ed9c:	40014000 	.word	0x40014000
 800eda0:	40014400 	.word	0x40014400
 800eda4:	40014800 	.word	0x40014800

0800eda8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b087      	sub	sp, #28
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6a1b      	ldr	r3, [r3, #32]
 800edb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6a1b      	ldr	r3, [r3, #32]
 800edbc:	f023 0210 	bic.w	r2, r3, #16
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	699b      	ldr	r3, [r3, #24]
 800edce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800edd0:	68fa      	ldr	r2, [r7, #12]
 800edd2:	4b34      	ldr	r3, [pc, #208]	@ (800eea4 <TIM_OC2_SetConfig+0xfc>)
 800edd4:	4013      	ands	r3, r2
 800edd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800edde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	021b      	lsls	r3, r3, #8
 800ede6:	68fa      	ldr	r2, [r7, #12]
 800ede8:	4313      	orrs	r3, r2
 800edea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	f023 0320 	bic.w	r3, r3, #32
 800edf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	011b      	lsls	r3, r3, #4
 800edfa:	697a      	ldr	r2, [r7, #20]
 800edfc:	4313      	orrs	r3, r2
 800edfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	4a29      	ldr	r2, [pc, #164]	@ (800eea8 <TIM_OC2_SetConfig+0x100>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d003      	beq.n	800ee10 <TIM_OC2_SetConfig+0x68>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	4a28      	ldr	r2, [pc, #160]	@ (800eeac <TIM_OC2_SetConfig+0x104>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d10d      	bne.n	800ee2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ee16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	68db      	ldr	r3, [r3, #12]
 800ee1c:	011b      	lsls	r3, r3, #4
 800ee1e:	697a      	ldr	r2, [r7, #20]
 800ee20:	4313      	orrs	r3, r2
 800ee22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	4a1e      	ldr	r2, [pc, #120]	@ (800eea8 <TIM_OC2_SetConfig+0x100>)
 800ee30:	4293      	cmp	r3, r2
 800ee32:	d00f      	beq.n	800ee54 <TIM_OC2_SetConfig+0xac>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	4a1d      	ldr	r2, [pc, #116]	@ (800eeac <TIM_OC2_SetConfig+0x104>)
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d00b      	beq.n	800ee54 <TIM_OC2_SetConfig+0xac>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	4a1c      	ldr	r2, [pc, #112]	@ (800eeb0 <TIM_OC2_SetConfig+0x108>)
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d007      	beq.n	800ee54 <TIM_OC2_SetConfig+0xac>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	4a1b      	ldr	r2, [pc, #108]	@ (800eeb4 <TIM_OC2_SetConfig+0x10c>)
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	d003      	beq.n	800ee54 <TIM_OC2_SetConfig+0xac>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	4a1a      	ldr	r2, [pc, #104]	@ (800eeb8 <TIM_OC2_SetConfig+0x110>)
 800ee50:	4293      	cmp	r3, r2
 800ee52:	d113      	bne.n	800ee7c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ee5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ee62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	695b      	ldr	r3, [r3, #20]
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	693a      	ldr	r2, [r7, #16]
 800ee6c:	4313      	orrs	r3, r2
 800ee6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	699b      	ldr	r3, [r3, #24]
 800ee74:	009b      	lsls	r3, r3, #2
 800ee76:	693a      	ldr	r2, [r7, #16]
 800ee78:	4313      	orrs	r3, r2
 800ee7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	693a      	ldr	r2, [r7, #16]
 800ee80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	68fa      	ldr	r2, [r7, #12]
 800ee86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	685a      	ldr	r2, [r3, #4]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	697a      	ldr	r2, [r7, #20]
 800ee94:	621a      	str	r2, [r3, #32]
}
 800ee96:	bf00      	nop
 800ee98:	371c      	adds	r7, #28
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr
 800eea2:	bf00      	nop
 800eea4:	feff8fff 	.word	0xfeff8fff
 800eea8:	40010000 	.word	0x40010000
 800eeac:	40010400 	.word	0x40010400
 800eeb0:	40014000 	.word	0x40014000
 800eeb4:	40014400 	.word	0x40014400
 800eeb8:	40014800 	.word	0x40014800

0800eebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b087      	sub	sp, #28
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6a1b      	ldr	r3, [r3, #32]
 800eeca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6a1b      	ldr	r3, [r3, #32]
 800eed0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	685b      	ldr	r3, [r3, #4]
 800eedc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	69db      	ldr	r3, [r3, #28]
 800eee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eee4:	68fa      	ldr	r2, [r7, #12]
 800eee6:	4b33      	ldr	r3, [pc, #204]	@ (800efb4 <TIM_OC3_SetConfig+0xf8>)
 800eee8:	4013      	ands	r3, r2
 800eeea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f023 0303 	bic.w	r3, r3, #3
 800eef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	68fa      	ldr	r2, [r7, #12]
 800eefa:	4313      	orrs	r3, r2
 800eefc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ef04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	689b      	ldr	r3, [r3, #8]
 800ef0a:	021b      	lsls	r3, r3, #8
 800ef0c:	697a      	ldr	r2, [r7, #20]
 800ef0e:	4313      	orrs	r3, r2
 800ef10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	4a28      	ldr	r2, [pc, #160]	@ (800efb8 <TIM_OC3_SetConfig+0xfc>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d003      	beq.n	800ef22 <TIM_OC3_SetConfig+0x66>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4a27      	ldr	r2, [pc, #156]	@ (800efbc <TIM_OC3_SetConfig+0x100>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d10d      	bne.n	800ef3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ef28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	68db      	ldr	r3, [r3, #12]
 800ef2e:	021b      	lsls	r3, r3, #8
 800ef30:	697a      	ldr	r2, [r7, #20]
 800ef32:	4313      	orrs	r3, r2
 800ef34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ef3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4a1d      	ldr	r2, [pc, #116]	@ (800efb8 <TIM_OC3_SetConfig+0xfc>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d00f      	beq.n	800ef66 <TIM_OC3_SetConfig+0xaa>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4a1c      	ldr	r2, [pc, #112]	@ (800efbc <TIM_OC3_SetConfig+0x100>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d00b      	beq.n	800ef66 <TIM_OC3_SetConfig+0xaa>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a1b      	ldr	r2, [pc, #108]	@ (800efc0 <TIM_OC3_SetConfig+0x104>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d007      	beq.n	800ef66 <TIM_OC3_SetConfig+0xaa>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a1a      	ldr	r2, [pc, #104]	@ (800efc4 <TIM_OC3_SetConfig+0x108>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d003      	beq.n	800ef66 <TIM_OC3_SetConfig+0xaa>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4a19      	ldr	r2, [pc, #100]	@ (800efc8 <TIM_OC3_SetConfig+0x10c>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d113      	bne.n	800ef8e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ef6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ef74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	695b      	ldr	r3, [r3, #20]
 800ef7a:	011b      	lsls	r3, r3, #4
 800ef7c:	693a      	ldr	r2, [r7, #16]
 800ef7e:	4313      	orrs	r3, r2
 800ef80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	699b      	ldr	r3, [r3, #24]
 800ef86:	011b      	lsls	r3, r3, #4
 800ef88:	693a      	ldr	r2, [r7, #16]
 800ef8a:	4313      	orrs	r3, r2
 800ef8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	693a      	ldr	r2, [r7, #16]
 800ef92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	68fa      	ldr	r2, [r7, #12]
 800ef98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	685a      	ldr	r2, [r3, #4]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	697a      	ldr	r2, [r7, #20]
 800efa6:	621a      	str	r2, [r3, #32]
}
 800efa8:	bf00      	nop
 800efaa:	371c      	adds	r7, #28
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr
 800efb4:	fffeff8f 	.word	0xfffeff8f
 800efb8:	40010000 	.word	0x40010000
 800efbc:	40010400 	.word	0x40010400
 800efc0:	40014000 	.word	0x40014000
 800efc4:	40014400 	.word	0x40014400
 800efc8:	40014800 	.word	0x40014800

0800efcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800efcc:	b480      	push	{r7}
 800efce:	b087      	sub	sp, #28
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6a1b      	ldr	r3, [r3, #32]
 800efda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6a1b      	ldr	r3, [r3, #32]
 800efe0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	69db      	ldr	r3, [r3, #28]
 800eff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	4b24      	ldr	r3, [pc, #144]	@ (800f088 <TIM_OC4_SetConfig+0xbc>)
 800eff8:	4013      	ands	r3, r2
 800effa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	021b      	lsls	r3, r3, #8
 800f00a:	68fa      	ldr	r2, [r7, #12]
 800f00c:	4313      	orrs	r3, r2
 800f00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	031b      	lsls	r3, r3, #12
 800f01e:	693a      	ldr	r2, [r7, #16]
 800f020:	4313      	orrs	r3, r2
 800f022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	4a19      	ldr	r2, [pc, #100]	@ (800f08c <TIM_OC4_SetConfig+0xc0>)
 800f028:	4293      	cmp	r3, r2
 800f02a:	d00f      	beq.n	800f04c <TIM_OC4_SetConfig+0x80>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	4a18      	ldr	r2, [pc, #96]	@ (800f090 <TIM_OC4_SetConfig+0xc4>)
 800f030:	4293      	cmp	r3, r2
 800f032:	d00b      	beq.n	800f04c <TIM_OC4_SetConfig+0x80>
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	4a17      	ldr	r2, [pc, #92]	@ (800f094 <TIM_OC4_SetConfig+0xc8>)
 800f038:	4293      	cmp	r3, r2
 800f03a:	d007      	beq.n	800f04c <TIM_OC4_SetConfig+0x80>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	4a16      	ldr	r2, [pc, #88]	@ (800f098 <TIM_OC4_SetConfig+0xcc>)
 800f040:	4293      	cmp	r3, r2
 800f042:	d003      	beq.n	800f04c <TIM_OC4_SetConfig+0x80>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4a15      	ldr	r2, [pc, #84]	@ (800f09c <TIM_OC4_SetConfig+0xd0>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d109      	bne.n	800f060 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f052:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	695b      	ldr	r3, [r3, #20]
 800f058:	019b      	lsls	r3, r3, #6
 800f05a:	697a      	ldr	r2, [r7, #20]
 800f05c:	4313      	orrs	r3, r2
 800f05e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	697a      	ldr	r2, [r7, #20]
 800f064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	685a      	ldr	r2, [r3, #4]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	693a      	ldr	r2, [r7, #16]
 800f078:	621a      	str	r2, [r3, #32]
}
 800f07a:	bf00      	nop
 800f07c:	371c      	adds	r7, #28
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr
 800f086:	bf00      	nop
 800f088:	feff8fff 	.word	0xfeff8fff
 800f08c:	40010000 	.word	0x40010000
 800f090:	40010400 	.word	0x40010400
 800f094:	40014000 	.word	0x40014000
 800f098:	40014400 	.word	0x40014400
 800f09c:	40014800 	.word	0x40014800

0800f0a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b087      	sub	sp, #28
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6a1b      	ldr	r3, [r3, #32]
 800f0ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6a1b      	ldr	r3, [r3, #32]
 800f0b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f0c8:	68fa      	ldr	r2, [r7, #12]
 800f0ca:	4b21      	ldr	r3, [pc, #132]	@ (800f150 <TIM_OC5_SetConfig+0xb0>)
 800f0cc:	4013      	ands	r3, r2
 800f0ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f0e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	689b      	ldr	r3, [r3, #8]
 800f0e6:	041b      	lsls	r3, r3, #16
 800f0e8:	693a      	ldr	r2, [r7, #16]
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	4a18      	ldr	r2, [pc, #96]	@ (800f154 <TIM_OC5_SetConfig+0xb4>)
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d00f      	beq.n	800f116 <TIM_OC5_SetConfig+0x76>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	4a17      	ldr	r2, [pc, #92]	@ (800f158 <TIM_OC5_SetConfig+0xb8>)
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d00b      	beq.n	800f116 <TIM_OC5_SetConfig+0x76>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	4a16      	ldr	r2, [pc, #88]	@ (800f15c <TIM_OC5_SetConfig+0xbc>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d007      	beq.n	800f116 <TIM_OC5_SetConfig+0x76>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	4a15      	ldr	r2, [pc, #84]	@ (800f160 <TIM_OC5_SetConfig+0xc0>)
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d003      	beq.n	800f116 <TIM_OC5_SetConfig+0x76>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	4a14      	ldr	r2, [pc, #80]	@ (800f164 <TIM_OC5_SetConfig+0xc4>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d109      	bne.n	800f12a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f11c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	695b      	ldr	r3, [r3, #20]
 800f122:	021b      	lsls	r3, r3, #8
 800f124:	697a      	ldr	r2, [r7, #20]
 800f126:	4313      	orrs	r3, r2
 800f128:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	697a      	ldr	r2, [r7, #20]
 800f12e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	68fa      	ldr	r2, [r7, #12]
 800f134:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	685a      	ldr	r2, [r3, #4]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	693a      	ldr	r2, [r7, #16]
 800f142:	621a      	str	r2, [r3, #32]
}
 800f144:	bf00      	nop
 800f146:	371c      	adds	r7, #28
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr
 800f150:	fffeff8f 	.word	0xfffeff8f
 800f154:	40010000 	.word	0x40010000
 800f158:	40010400 	.word	0x40010400
 800f15c:	40014000 	.word	0x40014000
 800f160:	40014400 	.word	0x40014400
 800f164:	40014800 	.word	0x40014800

0800f168 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f168:	b480      	push	{r7}
 800f16a:	b087      	sub	sp, #28
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6a1b      	ldr	r3, [r3, #32]
 800f176:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6a1b      	ldr	r3, [r3, #32]
 800f17c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	4b22      	ldr	r3, [pc, #136]	@ (800f21c <TIM_OC6_SetConfig+0xb4>)
 800f194:	4013      	ands	r3, r2
 800f196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	021b      	lsls	r3, r3, #8
 800f19e:	68fa      	ldr	r2, [r7, #12]
 800f1a0:	4313      	orrs	r3, r2
 800f1a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f1aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	689b      	ldr	r3, [r3, #8]
 800f1b0:	051b      	lsls	r3, r3, #20
 800f1b2:	693a      	ldr	r2, [r7, #16]
 800f1b4:	4313      	orrs	r3, r2
 800f1b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	4a19      	ldr	r2, [pc, #100]	@ (800f220 <TIM_OC6_SetConfig+0xb8>)
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d00f      	beq.n	800f1e0 <TIM_OC6_SetConfig+0x78>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4a18      	ldr	r2, [pc, #96]	@ (800f224 <TIM_OC6_SetConfig+0xbc>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d00b      	beq.n	800f1e0 <TIM_OC6_SetConfig+0x78>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a17      	ldr	r2, [pc, #92]	@ (800f228 <TIM_OC6_SetConfig+0xc0>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d007      	beq.n	800f1e0 <TIM_OC6_SetConfig+0x78>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a16      	ldr	r2, [pc, #88]	@ (800f22c <TIM_OC6_SetConfig+0xc4>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d003      	beq.n	800f1e0 <TIM_OC6_SetConfig+0x78>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	4a15      	ldr	r2, [pc, #84]	@ (800f230 <TIM_OC6_SetConfig+0xc8>)
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d109      	bne.n	800f1f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f1e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	695b      	ldr	r3, [r3, #20]
 800f1ec:	029b      	lsls	r3, r3, #10
 800f1ee:	697a      	ldr	r2, [r7, #20]
 800f1f0:	4313      	orrs	r3, r2
 800f1f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	697a      	ldr	r2, [r7, #20]
 800f1f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	68fa      	ldr	r2, [r7, #12]
 800f1fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	685a      	ldr	r2, [r3, #4]
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	693a      	ldr	r2, [r7, #16]
 800f20c:	621a      	str	r2, [r3, #32]
}
 800f20e:	bf00      	nop
 800f210:	371c      	adds	r7, #28
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr
 800f21a:	bf00      	nop
 800f21c:	feff8fff 	.word	0xfeff8fff
 800f220:	40010000 	.word	0x40010000
 800f224:	40010400 	.word	0x40010400
 800f228:	40014000 	.word	0x40014000
 800f22c:	40014400 	.word	0x40014400
 800f230:	40014800 	.word	0x40014800

0800f234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f234:	b480      	push	{r7}
 800f236:	b087      	sub	sp, #28
 800f238:	af00      	add	r7, sp, #0
 800f23a:	60f8      	str	r0, [r7, #12]
 800f23c:	60b9      	str	r1, [r7, #8]
 800f23e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	f003 031f 	and.w	r3, r3, #31
 800f246:	2201      	movs	r2, #1
 800f248:	fa02 f303 	lsl.w	r3, r2, r3
 800f24c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	6a1a      	ldr	r2, [r3, #32]
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	43db      	mvns	r3, r3
 800f256:	401a      	ands	r2, r3
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6a1a      	ldr	r2, [r3, #32]
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	f003 031f 	and.w	r3, r3, #31
 800f266:	6879      	ldr	r1, [r7, #4]
 800f268:	fa01 f303 	lsl.w	r3, r1, r3
 800f26c:	431a      	orrs	r2, r3
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	621a      	str	r2, [r3, #32]
}
 800f272:	bf00      	nop
 800f274:	371c      	adds	r7, #28
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr
	...

0800f280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f280:	b480      	push	{r7}
 800f282:	b085      	sub	sp, #20
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f290:	2b01      	cmp	r3, #1
 800f292:	d101      	bne.n	800f298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f294:	2302      	movs	r3, #2
 800f296:	e06d      	b.n	800f374 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2201      	movs	r2, #1
 800f29c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2202      	movs	r2, #2
 800f2a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	689b      	ldr	r3, [r3, #8]
 800f2b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a30      	ldr	r2, [pc, #192]	@ (800f380 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d004      	beq.n	800f2cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4a2f      	ldr	r2, [pc, #188]	@ (800f384 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d108      	bne.n	800f2de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f2d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	68fa      	ldr	r2, [r7, #12]
 800f2da:	4313      	orrs	r3, r2
 800f2dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	68fa      	ldr	r2, [r7, #12]
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	68fa      	ldr	r2, [r7, #12]
 800f2f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4a20      	ldr	r2, [pc, #128]	@ (800f380 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d022      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f30a:	d01d      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	4a1d      	ldr	r2, [pc, #116]	@ (800f388 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d018      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	4a1c      	ldr	r2, [pc, #112]	@ (800f38c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d013      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4a1a      	ldr	r2, [pc, #104]	@ (800f390 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f326:	4293      	cmp	r3, r2
 800f328:	d00e      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	4a15      	ldr	r2, [pc, #84]	@ (800f384 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d009      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4a16      	ldr	r2, [pc, #88]	@ (800f394 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d004      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	4a15      	ldr	r2, [pc, #84]	@ (800f398 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d10c      	bne.n	800f362 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f34e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	689b      	ldr	r3, [r3, #8]
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	4313      	orrs	r3, r2
 800f358:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	68ba      	ldr	r2, [r7, #8]
 800f360:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2201      	movs	r2, #1
 800f366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2200      	movs	r2, #0
 800f36e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f372:	2300      	movs	r3, #0
}
 800f374:	4618      	mov	r0, r3
 800f376:	3714      	adds	r7, #20
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr
 800f380:	40010000 	.word	0x40010000
 800f384:	40010400 	.word	0x40010400
 800f388:	40000400 	.word	0x40000400
 800f38c:	40000800 	.word	0x40000800
 800f390:	40000c00 	.word	0x40000c00
 800f394:	40001800 	.word	0x40001800
 800f398:	40014000 	.word	0x40014000

0800f39c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b085      	sub	sp, #20
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d101      	bne.n	800f3b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f3b4:	2302      	movs	r3, #2
 800f3b6:	e065      	b.n	800f484 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	68db      	ldr	r3, [r3, #12]
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	689b      	ldr	r3, [r3, #8]
 800f3d8:	4313      	orrs	r3, r2
 800f3da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4313      	orrs	r3, r2
 800f3f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	691b      	ldr	r3, [r3, #16]
 800f402:	4313      	orrs	r3, r2
 800f404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	695b      	ldr	r3, [r3, #20]
 800f410:	4313      	orrs	r3, r2
 800f412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f41e:	4313      	orrs	r3, r2
 800f420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	699b      	ldr	r3, [r3, #24]
 800f42c:	041b      	lsls	r3, r3, #16
 800f42e:	4313      	orrs	r3, r2
 800f430:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4a16      	ldr	r2, [pc, #88]	@ (800f490 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d004      	beq.n	800f446 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	4a14      	ldr	r2, [pc, #80]	@ (800f494 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f442:	4293      	cmp	r3, r2
 800f444:	d115      	bne.n	800f472 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f450:	051b      	lsls	r3, r3, #20
 800f452:	4313      	orrs	r3, r2
 800f454:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	69db      	ldr	r3, [r3, #28]
 800f460:	4313      	orrs	r3, r2
 800f462:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	6a1b      	ldr	r3, [r3, #32]
 800f46e:	4313      	orrs	r3, r2
 800f470:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	68fa      	ldr	r2, [r7, #12]
 800f478:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2200      	movs	r2, #0
 800f47e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f482:	2300      	movs	r3, #0
}
 800f484:	4618      	mov	r0, r3
 800f486:	3714      	adds	r7, #20
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr
 800f490:	40010000 	.word	0x40010000
 800f494:	40010400 	.word	0x40010400

0800f498 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f498:	b480      	push	{r7}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f4a0:	bf00      	nop
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f4b4:	bf00      	nop
 800f4b6:	370c      	adds	r7, #12
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f4c8:	bf00      	nop
 800f4ca:	370c      	adds	r7, #12
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr

0800f4d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d101      	bne.n	800f4e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	e042      	b.n	800f56c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d106      	bne.n	800f4fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f7f2 fcdf 	bl	8001ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2224      	movs	r2, #36	@ 0x24
 800f502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f022 0201 	bic.w	r2, r2, #1
 800f514:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d002      	beq.n	800f524 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f000 fd90 	bl	8010044 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f000 f825 	bl	800f574 <UART_SetConfig>
 800f52a:	4603      	mov	r3, r0
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d101      	bne.n	800f534 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f530:	2301      	movs	r3, #1
 800f532:	e01b      	b.n	800f56c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	685a      	ldr	r2, [r3, #4]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	689a      	ldr	r2, [r3, #8]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	681a      	ldr	r2, [r3, #0]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	f042 0201 	orr.w	r2, r2, #1
 800f562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f000 fe0f 	bl	8010188 <UART_CheckIdleState>
 800f56a:	4603      	mov	r3, r0
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}

0800f574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f578:	b092      	sub	sp, #72	@ 0x48
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f57e:	2300      	movs	r3, #0
 800f580:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	689a      	ldr	r2, [r3, #8]
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	691b      	ldr	r3, [r3, #16]
 800f58c:	431a      	orrs	r2, r3
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	695b      	ldr	r3, [r3, #20]
 800f592:	431a      	orrs	r2, r3
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	69db      	ldr	r3, [r3, #28]
 800f598:	4313      	orrs	r3, r2
 800f59a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	4bbe      	ldr	r3, [pc, #760]	@ (800f89c <UART_SetConfig+0x328>)
 800f5a4:	4013      	ands	r3, r2
 800f5a6:	697a      	ldr	r2, [r7, #20]
 800f5a8:	6812      	ldr	r2, [r2, #0]
 800f5aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f5ac:	430b      	orrs	r3, r1
 800f5ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	68da      	ldr	r2, [r3, #12]
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	430a      	orrs	r2, r1
 800f5c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	699b      	ldr	r3, [r3, #24]
 800f5ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	4ab3      	ldr	r2, [pc, #716]	@ (800f8a0 <UART_SetConfig+0x32c>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d004      	beq.n	800f5e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	6a1b      	ldr	r3, [r3, #32]
 800f5da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	689a      	ldr	r2, [r3, #8]
 800f5e6:	4baf      	ldr	r3, [pc, #700]	@ (800f8a4 <UART_SetConfig+0x330>)
 800f5e8:	4013      	ands	r3, r2
 800f5ea:	697a      	ldr	r2, [r7, #20]
 800f5ec:	6812      	ldr	r2, [r2, #0]
 800f5ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f5f0:	430b      	orrs	r3, r1
 800f5f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5fa:	f023 010f 	bic.w	r1, r3, #15
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	430a      	orrs	r2, r1
 800f608:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	4aa6      	ldr	r2, [pc, #664]	@ (800f8a8 <UART_SetConfig+0x334>)
 800f610:	4293      	cmp	r3, r2
 800f612:	d177      	bne.n	800f704 <UART_SetConfig+0x190>
 800f614:	4ba5      	ldr	r3, [pc, #660]	@ (800f8ac <UART_SetConfig+0x338>)
 800f616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f618:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f61c:	2b28      	cmp	r3, #40	@ 0x28
 800f61e:	d86d      	bhi.n	800f6fc <UART_SetConfig+0x188>
 800f620:	a201      	add	r2, pc, #4	@ (adr r2, 800f628 <UART_SetConfig+0xb4>)
 800f622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f626:	bf00      	nop
 800f628:	0800f6cd 	.word	0x0800f6cd
 800f62c:	0800f6fd 	.word	0x0800f6fd
 800f630:	0800f6fd 	.word	0x0800f6fd
 800f634:	0800f6fd 	.word	0x0800f6fd
 800f638:	0800f6fd 	.word	0x0800f6fd
 800f63c:	0800f6fd 	.word	0x0800f6fd
 800f640:	0800f6fd 	.word	0x0800f6fd
 800f644:	0800f6fd 	.word	0x0800f6fd
 800f648:	0800f6d5 	.word	0x0800f6d5
 800f64c:	0800f6fd 	.word	0x0800f6fd
 800f650:	0800f6fd 	.word	0x0800f6fd
 800f654:	0800f6fd 	.word	0x0800f6fd
 800f658:	0800f6fd 	.word	0x0800f6fd
 800f65c:	0800f6fd 	.word	0x0800f6fd
 800f660:	0800f6fd 	.word	0x0800f6fd
 800f664:	0800f6fd 	.word	0x0800f6fd
 800f668:	0800f6dd 	.word	0x0800f6dd
 800f66c:	0800f6fd 	.word	0x0800f6fd
 800f670:	0800f6fd 	.word	0x0800f6fd
 800f674:	0800f6fd 	.word	0x0800f6fd
 800f678:	0800f6fd 	.word	0x0800f6fd
 800f67c:	0800f6fd 	.word	0x0800f6fd
 800f680:	0800f6fd 	.word	0x0800f6fd
 800f684:	0800f6fd 	.word	0x0800f6fd
 800f688:	0800f6e5 	.word	0x0800f6e5
 800f68c:	0800f6fd 	.word	0x0800f6fd
 800f690:	0800f6fd 	.word	0x0800f6fd
 800f694:	0800f6fd 	.word	0x0800f6fd
 800f698:	0800f6fd 	.word	0x0800f6fd
 800f69c:	0800f6fd 	.word	0x0800f6fd
 800f6a0:	0800f6fd 	.word	0x0800f6fd
 800f6a4:	0800f6fd 	.word	0x0800f6fd
 800f6a8:	0800f6ed 	.word	0x0800f6ed
 800f6ac:	0800f6fd 	.word	0x0800f6fd
 800f6b0:	0800f6fd 	.word	0x0800f6fd
 800f6b4:	0800f6fd 	.word	0x0800f6fd
 800f6b8:	0800f6fd 	.word	0x0800f6fd
 800f6bc:	0800f6fd 	.word	0x0800f6fd
 800f6c0:	0800f6fd 	.word	0x0800f6fd
 800f6c4:	0800f6fd 	.word	0x0800f6fd
 800f6c8:	0800f6f5 	.word	0x0800f6f5
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6d2:	e222      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f6d4:	2304      	movs	r3, #4
 800f6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6da:	e21e      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f6dc:	2308      	movs	r3, #8
 800f6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6e2:	e21a      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f6e4:	2310      	movs	r3, #16
 800f6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ea:	e216      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f6ec:	2320      	movs	r3, #32
 800f6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6f2:	e212      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f6f4:	2340      	movs	r3, #64	@ 0x40
 800f6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6fa:	e20e      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f6fc:	2380      	movs	r3, #128	@ 0x80
 800f6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f702:	e20a      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4a69      	ldr	r2, [pc, #420]	@ (800f8b0 <UART_SetConfig+0x33c>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d130      	bne.n	800f770 <UART_SetConfig+0x1fc>
 800f70e:	4b67      	ldr	r3, [pc, #412]	@ (800f8ac <UART_SetConfig+0x338>)
 800f710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f712:	f003 0307 	and.w	r3, r3, #7
 800f716:	2b05      	cmp	r3, #5
 800f718:	d826      	bhi.n	800f768 <UART_SetConfig+0x1f4>
 800f71a:	a201      	add	r2, pc, #4	@ (adr r2, 800f720 <UART_SetConfig+0x1ac>)
 800f71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f720:	0800f739 	.word	0x0800f739
 800f724:	0800f741 	.word	0x0800f741
 800f728:	0800f749 	.word	0x0800f749
 800f72c:	0800f751 	.word	0x0800f751
 800f730:	0800f759 	.word	0x0800f759
 800f734:	0800f761 	.word	0x0800f761
 800f738:	2300      	movs	r3, #0
 800f73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f73e:	e1ec      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f740:	2304      	movs	r3, #4
 800f742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f746:	e1e8      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f748:	2308      	movs	r3, #8
 800f74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f74e:	e1e4      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f750:	2310      	movs	r3, #16
 800f752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f756:	e1e0      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f758:	2320      	movs	r3, #32
 800f75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f75e:	e1dc      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f760:	2340      	movs	r3, #64	@ 0x40
 800f762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f766:	e1d8      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f768:	2380      	movs	r3, #128	@ 0x80
 800f76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f76e:	e1d4      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4a4f      	ldr	r2, [pc, #316]	@ (800f8b4 <UART_SetConfig+0x340>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d130      	bne.n	800f7dc <UART_SetConfig+0x268>
 800f77a:	4b4c      	ldr	r3, [pc, #304]	@ (800f8ac <UART_SetConfig+0x338>)
 800f77c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f77e:	f003 0307 	and.w	r3, r3, #7
 800f782:	2b05      	cmp	r3, #5
 800f784:	d826      	bhi.n	800f7d4 <UART_SetConfig+0x260>
 800f786:	a201      	add	r2, pc, #4	@ (adr r2, 800f78c <UART_SetConfig+0x218>)
 800f788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f78c:	0800f7a5 	.word	0x0800f7a5
 800f790:	0800f7ad 	.word	0x0800f7ad
 800f794:	0800f7b5 	.word	0x0800f7b5
 800f798:	0800f7bd 	.word	0x0800f7bd
 800f79c:	0800f7c5 	.word	0x0800f7c5
 800f7a0:	0800f7cd 	.word	0x0800f7cd
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7aa:	e1b6      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f7ac:	2304      	movs	r3, #4
 800f7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7b2:	e1b2      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f7b4:	2308      	movs	r3, #8
 800f7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ba:	e1ae      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f7bc:	2310      	movs	r3, #16
 800f7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7c2:	e1aa      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f7c4:	2320      	movs	r3, #32
 800f7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ca:	e1a6      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f7cc:	2340      	movs	r3, #64	@ 0x40
 800f7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7d2:	e1a2      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f7d4:	2380      	movs	r3, #128	@ 0x80
 800f7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7da:	e19e      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4a35      	ldr	r2, [pc, #212]	@ (800f8b8 <UART_SetConfig+0x344>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d130      	bne.n	800f848 <UART_SetConfig+0x2d4>
 800f7e6:	4b31      	ldr	r3, [pc, #196]	@ (800f8ac <UART_SetConfig+0x338>)
 800f7e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7ea:	f003 0307 	and.w	r3, r3, #7
 800f7ee:	2b05      	cmp	r3, #5
 800f7f0:	d826      	bhi.n	800f840 <UART_SetConfig+0x2cc>
 800f7f2:	a201      	add	r2, pc, #4	@ (adr r2, 800f7f8 <UART_SetConfig+0x284>)
 800f7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7f8:	0800f811 	.word	0x0800f811
 800f7fc:	0800f819 	.word	0x0800f819
 800f800:	0800f821 	.word	0x0800f821
 800f804:	0800f829 	.word	0x0800f829
 800f808:	0800f831 	.word	0x0800f831
 800f80c:	0800f839 	.word	0x0800f839
 800f810:	2300      	movs	r3, #0
 800f812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f816:	e180      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f818:	2304      	movs	r3, #4
 800f81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f81e:	e17c      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f820:	2308      	movs	r3, #8
 800f822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f826:	e178      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f828:	2310      	movs	r3, #16
 800f82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f82e:	e174      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f830:	2320      	movs	r3, #32
 800f832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f836:	e170      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f838:	2340      	movs	r3, #64	@ 0x40
 800f83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f83e:	e16c      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f840:	2380      	movs	r3, #128	@ 0x80
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f846:	e168      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4a1b      	ldr	r2, [pc, #108]	@ (800f8bc <UART_SetConfig+0x348>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d142      	bne.n	800f8d8 <UART_SetConfig+0x364>
 800f852:	4b16      	ldr	r3, [pc, #88]	@ (800f8ac <UART_SetConfig+0x338>)
 800f854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f856:	f003 0307 	and.w	r3, r3, #7
 800f85a:	2b05      	cmp	r3, #5
 800f85c:	d838      	bhi.n	800f8d0 <UART_SetConfig+0x35c>
 800f85e:	a201      	add	r2, pc, #4	@ (adr r2, 800f864 <UART_SetConfig+0x2f0>)
 800f860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f864:	0800f87d 	.word	0x0800f87d
 800f868:	0800f885 	.word	0x0800f885
 800f86c:	0800f88d 	.word	0x0800f88d
 800f870:	0800f895 	.word	0x0800f895
 800f874:	0800f8c1 	.word	0x0800f8c1
 800f878:	0800f8c9 	.word	0x0800f8c9
 800f87c:	2300      	movs	r3, #0
 800f87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f882:	e14a      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f884:	2304      	movs	r3, #4
 800f886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f88a:	e146      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f88c:	2308      	movs	r3, #8
 800f88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f892:	e142      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f894:	2310      	movs	r3, #16
 800f896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f89a:	e13e      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f89c:	cfff69f3 	.word	0xcfff69f3
 800f8a0:	58000c00 	.word	0x58000c00
 800f8a4:	11fff4ff 	.word	0x11fff4ff
 800f8a8:	40011000 	.word	0x40011000
 800f8ac:	58024400 	.word	0x58024400
 800f8b0:	40004400 	.word	0x40004400
 800f8b4:	40004800 	.word	0x40004800
 800f8b8:	40004c00 	.word	0x40004c00
 800f8bc:	40005000 	.word	0x40005000
 800f8c0:	2320      	movs	r3, #32
 800f8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8c6:	e128      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f8c8:	2340      	movs	r3, #64	@ 0x40
 800f8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ce:	e124      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f8d0:	2380      	movs	r3, #128	@ 0x80
 800f8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8d6:	e120      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4acb      	ldr	r2, [pc, #812]	@ (800fc0c <UART_SetConfig+0x698>)
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d176      	bne.n	800f9d0 <UART_SetConfig+0x45c>
 800f8e2:	4bcb      	ldr	r3, [pc, #812]	@ (800fc10 <UART_SetConfig+0x69c>)
 800f8e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f8ea:	2b28      	cmp	r3, #40	@ 0x28
 800f8ec:	d86c      	bhi.n	800f9c8 <UART_SetConfig+0x454>
 800f8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f8f4 <UART_SetConfig+0x380>)
 800f8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f4:	0800f999 	.word	0x0800f999
 800f8f8:	0800f9c9 	.word	0x0800f9c9
 800f8fc:	0800f9c9 	.word	0x0800f9c9
 800f900:	0800f9c9 	.word	0x0800f9c9
 800f904:	0800f9c9 	.word	0x0800f9c9
 800f908:	0800f9c9 	.word	0x0800f9c9
 800f90c:	0800f9c9 	.word	0x0800f9c9
 800f910:	0800f9c9 	.word	0x0800f9c9
 800f914:	0800f9a1 	.word	0x0800f9a1
 800f918:	0800f9c9 	.word	0x0800f9c9
 800f91c:	0800f9c9 	.word	0x0800f9c9
 800f920:	0800f9c9 	.word	0x0800f9c9
 800f924:	0800f9c9 	.word	0x0800f9c9
 800f928:	0800f9c9 	.word	0x0800f9c9
 800f92c:	0800f9c9 	.word	0x0800f9c9
 800f930:	0800f9c9 	.word	0x0800f9c9
 800f934:	0800f9a9 	.word	0x0800f9a9
 800f938:	0800f9c9 	.word	0x0800f9c9
 800f93c:	0800f9c9 	.word	0x0800f9c9
 800f940:	0800f9c9 	.word	0x0800f9c9
 800f944:	0800f9c9 	.word	0x0800f9c9
 800f948:	0800f9c9 	.word	0x0800f9c9
 800f94c:	0800f9c9 	.word	0x0800f9c9
 800f950:	0800f9c9 	.word	0x0800f9c9
 800f954:	0800f9b1 	.word	0x0800f9b1
 800f958:	0800f9c9 	.word	0x0800f9c9
 800f95c:	0800f9c9 	.word	0x0800f9c9
 800f960:	0800f9c9 	.word	0x0800f9c9
 800f964:	0800f9c9 	.word	0x0800f9c9
 800f968:	0800f9c9 	.word	0x0800f9c9
 800f96c:	0800f9c9 	.word	0x0800f9c9
 800f970:	0800f9c9 	.word	0x0800f9c9
 800f974:	0800f9b9 	.word	0x0800f9b9
 800f978:	0800f9c9 	.word	0x0800f9c9
 800f97c:	0800f9c9 	.word	0x0800f9c9
 800f980:	0800f9c9 	.word	0x0800f9c9
 800f984:	0800f9c9 	.word	0x0800f9c9
 800f988:	0800f9c9 	.word	0x0800f9c9
 800f98c:	0800f9c9 	.word	0x0800f9c9
 800f990:	0800f9c9 	.word	0x0800f9c9
 800f994:	0800f9c1 	.word	0x0800f9c1
 800f998:	2301      	movs	r3, #1
 800f99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f99e:	e0bc      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f9a0:	2304      	movs	r3, #4
 800f9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9a6:	e0b8      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f9a8:	2308      	movs	r3, #8
 800f9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ae:	e0b4      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f9b0:	2310      	movs	r3, #16
 800f9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9b6:	e0b0      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f9b8:	2320      	movs	r3, #32
 800f9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9be:	e0ac      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f9c0:	2340      	movs	r3, #64	@ 0x40
 800f9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9c6:	e0a8      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f9c8:	2380      	movs	r3, #128	@ 0x80
 800f9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ce:	e0a4      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4a8f      	ldr	r2, [pc, #572]	@ (800fc14 <UART_SetConfig+0x6a0>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d130      	bne.n	800fa3c <UART_SetConfig+0x4c8>
 800f9da:	4b8d      	ldr	r3, [pc, #564]	@ (800fc10 <UART_SetConfig+0x69c>)
 800f9dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9de:	f003 0307 	and.w	r3, r3, #7
 800f9e2:	2b05      	cmp	r3, #5
 800f9e4:	d826      	bhi.n	800fa34 <UART_SetConfig+0x4c0>
 800f9e6:	a201      	add	r2, pc, #4	@ (adr r2, 800f9ec <UART_SetConfig+0x478>)
 800f9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9ec:	0800fa05 	.word	0x0800fa05
 800f9f0:	0800fa0d 	.word	0x0800fa0d
 800f9f4:	0800fa15 	.word	0x0800fa15
 800f9f8:	0800fa1d 	.word	0x0800fa1d
 800f9fc:	0800fa25 	.word	0x0800fa25
 800fa00:	0800fa2d 	.word	0x0800fa2d
 800fa04:	2300      	movs	r3, #0
 800fa06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa0a:	e086      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fa0c:	2304      	movs	r3, #4
 800fa0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa12:	e082      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fa14:	2308      	movs	r3, #8
 800fa16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa1a:	e07e      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fa1c:	2310      	movs	r3, #16
 800fa1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa22:	e07a      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fa24:	2320      	movs	r3, #32
 800fa26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa2a:	e076      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fa2c:	2340      	movs	r3, #64	@ 0x40
 800fa2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa32:	e072      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fa34:	2380      	movs	r3, #128	@ 0x80
 800fa36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa3a:	e06e      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	4a75      	ldr	r2, [pc, #468]	@ (800fc18 <UART_SetConfig+0x6a4>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d130      	bne.n	800faa8 <UART_SetConfig+0x534>
 800fa46:	4b72      	ldr	r3, [pc, #456]	@ (800fc10 <UART_SetConfig+0x69c>)
 800fa48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa4a:	f003 0307 	and.w	r3, r3, #7
 800fa4e:	2b05      	cmp	r3, #5
 800fa50:	d826      	bhi.n	800faa0 <UART_SetConfig+0x52c>
 800fa52:	a201      	add	r2, pc, #4	@ (adr r2, 800fa58 <UART_SetConfig+0x4e4>)
 800fa54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa58:	0800fa71 	.word	0x0800fa71
 800fa5c:	0800fa79 	.word	0x0800fa79
 800fa60:	0800fa81 	.word	0x0800fa81
 800fa64:	0800fa89 	.word	0x0800fa89
 800fa68:	0800fa91 	.word	0x0800fa91
 800fa6c:	0800fa99 	.word	0x0800fa99
 800fa70:	2300      	movs	r3, #0
 800fa72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa76:	e050      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fa78:	2304      	movs	r3, #4
 800fa7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa7e:	e04c      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fa80:	2308      	movs	r3, #8
 800fa82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa86:	e048      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fa88:	2310      	movs	r3, #16
 800fa8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa8e:	e044      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fa90:	2320      	movs	r3, #32
 800fa92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa96:	e040      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fa98:	2340      	movs	r3, #64	@ 0x40
 800fa9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa9e:	e03c      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800faa0:	2380      	movs	r3, #128	@ 0x80
 800faa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faa6:	e038      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	4a5b      	ldr	r2, [pc, #364]	@ (800fc1c <UART_SetConfig+0x6a8>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d130      	bne.n	800fb14 <UART_SetConfig+0x5a0>
 800fab2:	4b57      	ldr	r3, [pc, #348]	@ (800fc10 <UART_SetConfig+0x69c>)
 800fab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fab6:	f003 0307 	and.w	r3, r3, #7
 800faba:	2b05      	cmp	r3, #5
 800fabc:	d826      	bhi.n	800fb0c <UART_SetConfig+0x598>
 800fabe:	a201      	add	r2, pc, #4	@ (adr r2, 800fac4 <UART_SetConfig+0x550>)
 800fac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fac4:	0800fadd 	.word	0x0800fadd
 800fac8:	0800fae5 	.word	0x0800fae5
 800facc:	0800faed 	.word	0x0800faed
 800fad0:	0800faf5 	.word	0x0800faf5
 800fad4:	0800fafd 	.word	0x0800fafd
 800fad8:	0800fb05 	.word	0x0800fb05
 800fadc:	2302      	movs	r3, #2
 800fade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fae2:	e01a      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fae4:	2304      	movs	r3, #4
 800fae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faea:	e016      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800faec:	2308      	movs	r3, #8
 800faee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faf2:	e012      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800faf4:	2310      	movs	r3, #16
 800faf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fafa:	e00e      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fafc:	2320      	movs	r3, #32
 800fafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb02:	e00a      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fb04:	2340      	movs	r3, #64	@ 0x40
 800fb06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb0a:	e006      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fb0c:	2380      	movs	r3, #128	@ 0x80
 800fb0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb12:	e002      	b.n	800fb1a <UART_SetConfig+0x5a6>
 800fb14:	2380      	movs	r3, #128	@ 0x80
 800fb16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	4a3f      	ldr	r2, [pc, #252]	@ (800fc1c <UART_SetConfig+0x6a8>)
 800fb20:	4293      	cmp	r3, r2
 800fb22:	f040 80f8 	bne.w	800fd16 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fb26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fb2a:	2b20      	cmp	r3, #32
 800fb2c:	dc46      	bgt.n	800fbbc <UART_SetConfig+0x648>
 800fb2e:	2b02      	cmp	r3, #2
 800fb30:	f2c0 8082 	blt.w	800fc38 <UART_SetConfig+0x6c4>
 800fb34:	3b02      	subs	r3, #2
 800fb36:	2b1e      	cmp	r3, #30
 800fb38:	d87e      	bhi.n	800fc38 <UART_SetConfig+0x6c4>
 800fb3a:	a201      	add	r2, pc, #4	@ (adr r2, 800fb40 <UART_SetConfig+0x5cc>)
 800fb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb40:	0800fbc3 	.word	0x0800fbc3
 800fb44:	0800fc39 	.word	0x0800fc39
 800fb48:	0800fbcb 	.word	0x0800fbcb
 800fb4c:	0800fc39 	.word	0x0800fc39
 800fb50:	0800fc39 	.word	0x0800fc39
 800fb54:	0800fc39 	.word	0x0800fc39
 800fb58:	0800fbdb 	.word	0x0800fbdb
 800fb5c:	0800fc39 	.word	0x0800fc39
 800fb60:	0800fc39 	.word	0x0800fc39
 800fb64:	0800fc39 	.word	0x0800fc39
 800fb68:	0800fc39 	.word	0x0800fc39
 800fb6c:	0800fc39 	.word	0x0800fc39
 800fb70:	0800fc39 	.word	0x0800fc39
 800fb74:	0800fc39 	.word	0x0800fc39
 800fb78:	0800fbeb 	.word	0x0800fbeb
 800fb7c:	0800fc39 	.word	0x0800fc39
 800fb80:	0800fc39 	.word	0x0800fc39
 800fb84:	0800fc39 	.word	0x0800fc39
 800fb88:	0800fc39 	.word	0x0800fc39
 800fb8c:	0800fc39 	.word	0x0800fc39
 800fb90:	0800fc39 	.word	0x0800fc39
 800fb94:	0800fc39 	.word	0x0800fc39
 800fb98:	0800fc39 	.word	0x0800fc39
 800fb9c:	0800fc39 	.word	0x0800fc39
 800fba0:	0800fc39 	.word	0x0800fc39
 800fba4:	0800fc39 	.word	0x0800fc39
 800fba8:	0800fc39 	.word	0x0800fc39
 800fbac:	0800fc39 	.word	0x0800fc39
 800fbb0:	0800fc39 	.word	0x0800fc39
 800fbb4:	0800fc39 	.word	0x0800fc39
 800fbb8:	0800fc2b 	.word	0x0800fc2b
 800fbbc:	2b40      	cmp	r3, #64	@ 0x40
 800fbbe:	d037      	beq.n	800fc30 <UART_SetConfig+0x6bc>
 800fbc0:	e03a      	b.n	800fc38 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fbc2:	f7fc fc95 	bl	800c4f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800fbc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fbc8:	e03c      	b.n	800fc44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fc fca4 	bl	800c51c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fbd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbd8:	e034      	b.n	800fc44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fbda:	f107 0318 	add.w	r3, r7, #24
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7fc fdf0 	bl	800c7c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fbe4:	69fb      	ldr	r3, [r7, #28]
 800fbe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbe8:	e02c      	b.n	800fc44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fbea:	4b09      	ldr	r3, [pc, #36]	@ (800fc10 <UART_SetConfig+0x69c>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f003 0320 	and.w	r3, r3, #32
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d016      	beq.n	800fc24 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fbf6:	4b06      	ldr	r3, [pc, #24]	@ (800fc10 <UART_SetConfig+0x69c>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	08db      	lsrs	r3, r3, #3
 800fbfc:	f003 0303 	and.w	r3, r3, #3
 800fc00:	4a07      	ldr	r2, [pc, #28]	@ (800fc20 <UART_SetConfig+0x6ac>)
 800fc02:	fa22 f303 	lsr.w	r3, r2, r3
 800fc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc08:	e01c      	b.n	800fc44 <UART_SetConfig+0x6d0>
 800fc0a:	bf00      	nop
 800fc0c:	40011400 	.word	0x40011400
 800fc10:	58024400 	.word	0x58024400
 800fc14:	40007800 	.word	0x40007800
 800fc18:	40007c00 	.word	0x40007c00
 800fc1c:	58000c00 	.word	0x58000c00
 800fc20:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fc24:	4b9d      	ldr	r3, [pc, #628]	@ (800fe9c <UART_SetConfig+0x928>)
 800fc26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc28:	e00c      	b.n	800fc44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc2a:	4b9d      	ldr	r3, [pc, #628]	@ (800fea0 <UART_SetConfig+0x92c>)
 800fc2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc2e:	e009      	b.n	800fc44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fc34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc36:	e005      	b.n	800fc44 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fc38:	2300      	movs	r3, #0
 800fc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fc42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fc44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	f000 81de 	beq.w	8010008 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc50:	4a94      	ldr	r2, [pc, #592]	@ (800fea4 <UART_SetConfig+0x930>)
 800fc52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc56:	461a      	mov	r2, r3
 800fc58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc5e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	685a      	ldr	r2, [r3, #4]
 800fc64:	4613      	mov	r3, r2
 800fc66:	005b      	lsls	r3, r3, #1
 800fc68:	4413      	add	r3, r2
 800fc6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d305      	bcc.n	800fc7c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	685b      	ldr	r3, [r3, #4]
 800fc74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d903      	bls.n	800fc84 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fc82:	e1c1      	b.n	8010008 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc86:	2200      	movs	r2, #0
 800fc88:	60bb      	str	r3, [r7, #8]
 800fc8a:	60fa      	str	r2, [r7, #12]
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc90:	4a84      	ldr	r2, [pc, #528]	@ (800fea4 <UART_SetConfig+0x930>)
 800fc92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	2200      	movs	r2, #0
 800fc9a:	603b      	str	r3, [r7, #0]
 800fc9c:	607a      	str	r2, [r7, #4]
 800fc9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fca2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fca6:	f7f0 fb73 	bl	8000390 <__aeabi_uldivmod>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	460b      	mov	r3, r1
 800fcae:	4610      	mov	r0, r2
 800fcb0:	4619      	mov	r1, r3
 800fcb2:	f04f 0200 	mov.w	r2, #0
 800fcb6:	f04f 0300 	mov.w	r3, #0
 800fcba:	020b      	lsls	r3, r1, #8
 800fcbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fcc0:	0202      	lsls	r2, r0, #8
 800fcc2:	6979      	ldr	r1, [r7, #20]
 800fcc4:	6849      	ldr	r1, [r1, #4]
 800fcc6:	0849      	lsrs	r1, r1, #1
 800fcc8:	2000      	movs	r0, #0
 800fcca:	460c      	mov	r4, r1
 800fccc:	4605      	mov	r5, r0
 800fcce:	eb12 0804 	adds.w	r8, r2, r4
 800fcd2:	eb43 0905 	adc.w	r9, r3, r5
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	685b      	ldr	r3, [r3, #4]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	469a      	mov	sl, r3
 800fcde:	4693      	mov	fp, r2
 800fce0:	4652      	mov	r2, sl
 800fce2:	465b      	mov	r3, fp
 800fce4:	4640      	mov	r0, r8
 800fce6:	4649      	mov	r1, r9
 800fce8:	f7f0 fb52 	bl	8000390 <__aeabi_uldivmod>
 800fcec:	4602      	mov	r2, r0
 800fcee:	460b      	mov	r3, r1
 800fcf0:	4613      	mov	r3, r2
 800fcf2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fcfa:	d308      	bcc.n	800fd0e <UART_SetConfig+0x79a>
 800fcfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fd02:	d204      	bcs.n	800fd0e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fd0a:	60da      	str	r2, [r3, #12]
 800fd0c:	e17c      	b.n	8010008 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fd0e:	2301      	movs	r3, #1
 800fd10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fd14:	e178      	b.n	8010008 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	69db      	ldr	r3, [r3, #28]
 800fd1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fd1e:	f040 80c5 	bne.w	800feac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fd22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fd26:	2b20      	cmp	r3, #32
 800fd28:	dc48      	bgt.n	800fdbc <UART_SetConfig+0x848>
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	db7b      	blt.n	800fe26 <UART_SetConfig+0x8b2>
 800fd2e:	2b20      	cmp	r3, #32
 800fd30:	d879      	bhi.n	800fe26 <UART_SetConfig+0x8b2>
 800fd32:	a201      	add	r2, pc, #4	@ (adr r2, 800fd38 <UART_SetConfig+0x7c4>)
 800fd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd38:	0800fdc3 	.word	0x0800fdc3
 800fd3c:	0800fdcb 	.word	0x0800fdcb
 800fd40:	0800fe27 	.word	0x0800fe27
 800fd44:	0800fe27 	.word	0x0800fe27
 800fd48:	0800fdd3 	.word	0x0800fdd3
 800fd4c:	0800fe27 	.word	0x0800fe27
 800fd50:	0800fe27 	.word	0x0800fe27
 800fd54:	0800fe27 	.word	0x0800fe27
 800fd58:	0800fde3 	.word	0x0800fde3
 800fd5c:	0800fe27 	.word	0x0800fe27
 800fd60:	0800fe27 	.word	0x0800fe27
 800fd64:	0800fe27 	.word	0x0800fe27
 800fd68:	0800fe27 	.word	0x0800fe27
 800fd6c:	0800fe27 	.word	0x0800fe27
 800fd70:	0800fe27 	.word	0x0800fe27
 800fd74:	0800fe27 	.word	0x0800fe27
 800fd78:	0800fdf3 	.word	0x0800fdf3
 800fd7c:	0800fe27 	.word	0x0800fe27
 800fd80:	0800fe27 	.word	0x0800fe27
 800fd84:	0800fe27 	.word	0x0800fe27
 800fd88:	0800fe27 	.word	0x0800fe27
 800fd8c:	0800fe27 	.word	0x0800fe27
 800fd90:	0800fe27 	.word	0x0800fe27
 800fd94:	0800fe27 	.word	0x0800fe27
 800fd98:	0800fe27 	.word	0x0800fe27
 800fd9c:	0800fe27 	.word	0x0800fe27
 800fda0:	0800fe27 	.word	0x0800fe27
 800fda4:	0800fe27 	.word	0x0800fe27
 800fda8:	0800fe27 	.word	0x0800fe27
 800fdac:	0800fe27 	.word	0x0800fe27
 800fdb0:	0800fe27 	.word	0x0800fe27
 800fdb4:	0800fe27 	.word	0x0800fe27
 800fdb8:	0800fe19 	.word	0x0800fe19
 800fdbc:	2b40      	cmp	r3, #64	@ 0x40
 800fdbe:	d02e      	beq.n	800fe1e <UART_SetConfig+0x8aa>
 800fdc0:	e031      	b.n	800fe26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fdc2:	f7fa fbdf 	bl	800a584 <HAL_RCC_GetPCLK1Freq>
 800fdc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fdc8:	e033      	b.n	800fe32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fdca:	f7fa fbf1 	bl	800a5b0 <HAL_RCC_GetPCLK2Freq>
 800fdce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fdd0:	e02f      	b.n	800fe32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7fc fba0 	bl	800c51c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fde0:	e027      	b.n	800fe32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fde2:	f107 0318 	add.w	r3, r7, #24
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fc fcec 	bl	800c7c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fdec:	69fb      	ldr	r3, [r7, #28]
 800fdee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdf0:	e01f      	b.n	800fe32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fdf2:	4b2d      	ldr	r3, [pc, #180]	@ (800fea8 <UART_SetConfig+0x934>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f003 0320 	and.w	r3, r3, #32
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d009      	beq.n	800fe12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fdfe:	4b2a      	ldr	r3, [pc, #168]	@ (800fea8 <UART_SetConfig+0x934>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	08db      	lsrs	r3, r3, #3
 800fe04:	f003 0303 	and.w	r3, r3, #3
 800fe08:	4a24      	ldr	r2, [pc, #144]	@ (800fe9c <UART_SetConfig+0x928>)
 800fe0a:	fa22 f303 	lsr.w	r3, r2, r3
 800fe0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe10:	e00f      	b.n	800fe32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fe12:	4b22      	ldr	r3, [pc, #136]	@ (800fe9c <UART_SetConfig+0x928>)
 800fe14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe16:	e00c      	b.n	800fe32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fe18:	4b21      	ldr	r3, [pc, #132]	@ (800fea0 <UART_SetConfig+0x92c>)
 800fe1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe1c:	e009      	b.n	800fe32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fe22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe24:	e005      	b.n	800fe32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fe26:	2300      	movs	r3, #0
 800fe28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fe30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fe32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	f000 80e7 	beq.w	8010008 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe3e:	4a19      	ldr	r2, [pc, #100]	@ (800fea4 <UART_SetConfig+0x930>)
 800fe40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe44:	461a      	mov	r2, r3
 800fe46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe48:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe4c:	005a      	lsls	r2, r3, #1
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	685b      	ldr	r3, [r3, #4]
 800fe52:	085b      	lsrs	r3, r3, #1
 800fe54:	441a      	add	r2, r3
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe62:	2b0f      	cmp	r3, #15
 800fe64:	d916      	bls.n	800fe94 <UART_SetConfig+0x920>
 800fe66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe6c:	d212      	bcs.n	800fe94 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fe6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	f023 030f 	bic.w	r3, r3, #15
 800fe76:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fe78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe7a:	085b      	lsrs	r3, r3, #1
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	f003 0307 	and.w	r3, r3, #7
 800fe82:	b29a      	uxth	r2, r3
 800fe84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fe86:	4313      	orrs	r3, r2
 800fe88:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fe90:	60da      	str	r2, [r3, #12]
 800fe92:	e0b9      	b.n	8010008 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fe94:	2301      	movs	r3, #1
 800fe96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fe9a:	e0b5      	b.n	8010008 <UART_SetConfig+0xa94>
 800fe9c:	03d09000 	.word	0x03d09000
 800fea0:	003d0900 	.word	0x003d0900
 800fea4:	08015cb4 	.word	0x08015cb4
 800fea8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800feac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800feb0:	2b20      	cmp	r3, #32
 800feb2:	dc49      	bgt.n	800ff48 <UART_SetConfig+0x9d4>
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	db7c      	blt.n	800ffb2 <UART_SetConfig+0xa3e>
 800feb8:	2b20      	cmp	r3, #32
 800feba:	d87a      	bhi.n	800ffb2 <UART_SetConfig+0xa3e>
 800febc:	a201      	add	r2, pc, #4	@ (adr r2, 800fec4 <UART_SetConfig+0x950>)
 800febe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fec2:	bf00      	nop
 800fec4:	0800ff4f 	.word	0x0800ff4f
 800fec8:	0800ff57 	.word	0x0800ff57
 800fecc:	0800ffb3 	.word	0x0800ffb3
 800fed0:	0800ffb3 	.word	0x0800ffb3
 800fed4:	0800ff5f 	.word	0x0800ff5f
 800fed8:	0800ffb3 	.word	0x0800ffb3
 800fedc:	0800ffb3 	.word	0x0800ffb3
 800fee0:	0800ffb3 	.word	0x0800ffb3
 800fee4:	0800ff6f 	.word	0x0800ff6f
 800fee8:	0800ffb3 	.word	0x0800ffb3
 800feec:	0800ffb3 	.word	0x0800ffb3
 800fef0:	0800ffb3 	.word	0x0800ffb3
 800fef4:	0800ffb3 	.word	0x0800ffb3
 800fef8:	0800ffb3 	.word	0x0800ffb3
 800fefc:	0800ffb3 	.word	0x0800ffb3
 800ff00:	0800ffb3 	.word	0x0800ffb3
 800ff04:	0800ff7f 	.word	0x0800ff7f
 800ff08:	0800ffb3 	.word	0x0800ffb3
 800ff0c:	0800ffb3 	.word	0x0800ffb3
 800ff10:	0800ffb3 	.word	0x0800ffb3
 800ff14:	0800ffb3 	.word	0x0800ffb3
 800ff18:	0800ffb3 	.word	0x0800ffb3
 800ff1c:	0800ffb3 	.word	0x0800ffb3
 800ff20:	0800ffb3 	.word	0x0800ffb3
 800ff24:	0800ffb3 	.word	0x0800ffb3
 800ff28:	0800ffb3 	.word	0x0800ffb3
 800ff2c:	0800ffb3 	.word	0x0800ffb3
 800ff30:	0800ffb3 	.word	0x0800ffb3
 800ff34:	0800ffb3 	.word	0x0800ffb3
 800ff38:	0800ffb3 	.word	0x0800ffb3
 800ff3c:	0800ffb3 	.word	0x0800ffb3
 800ff40:	0800ffb3 	.word	0x0800ffb3
 800ff44:	0800ffa5 	.word	0x0800ffa5
 800ff48:	2b40      	cmp	r3, #64	@ 0x40
 800ff4a:	d02e      	beq.n	800ffaa <UART_SetConfig+0xa36>
 800ff4c:	e031      	b.n	800ffb2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff4e:	f7fa fb19 	bl	800a584 <HAL_RCC_GetPCLK1Freq>
 800ff52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff54:	e033      	b.n	800ffbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff56:	f7fa fb2b 	bl	800a5b0 <HAL_RCC_GetPCLK2Freq>
 800ff5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff5c:	e02f      	b.n	800ffbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7fc fada 	bl	800c51c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff6c:	e027      	b.n	800ffbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff6e:	f107 0318 	add.w	r3, r7, #24
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7fc fc26 	bl	800c7c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff78:	69fb      	ldr	r3, [r7, #28]
 800ff7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff7c:	e01f      	b.n	800ffbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff7e:	4b2d      	ldr	r3, [pc, #180]	@ (8010034 <UART_SetConfig+0xac0>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f003 0320 	and.w	r3, r3, #32
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d009      	beq.n	800ff9e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff8a:	4b2a      	ldr	r3, [pc, #168]	@ (8010034 <UART_SetConfig+0xac0>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	08db      	lsrs	r3, r3, #3
 800ff90:	f003 0303 	and.w	r3, r3, #3
 800ff94:	4a28      	ldr	r2, [pc, #160]	@ (8010038 <UART_SetConfig+0xac4>)
 800ff96:	fa22 f303 	lsr.w	r3, r2, r3
 800ff9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff9c:	e00f      	b.n	800ffbe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ff9e:	4b26      	ldr	r3, [pc, #152]	@ (8010038 <UART_SetConfig+0xac4>)
 800ffa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffa2:	e00c      	b.n	800ffbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ffa4:	4b25      	ldr	r3, [pc, #148]	@ (801003c <UART_SetConfig+0xac8>)
 800ffa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffa8:	e009      	b.n	800ffbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ffaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ffae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffb0:	e005      	b.n	800ffbe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ffbc:	bf00      	nop
    }

    if (pclk != 0U)
 800ffbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d021      	beq.n	8010008 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffc8:	4a1d      	ldr	r2, [pc, #116]	@ (8010040 <UART_SetConfig+0xacc>)
 800ffca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffd2:	fbb3 f2f2 	udiv	r2, r3, r2
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	085b      	lsrs	r3, r3, #1
 800ffdc:	441a      	add	r2, r3
 800ffde:	697b      	ldr	r3, [r7, #20]
 800ffe0:	685b      	ldr	r3, [r3, #4]
 800ffe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffe6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ffe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffea:	2b0f      	cmp	r3, #15
 800ffec:	d909      	bls.n	8010002 <UART_SetConfig+0xa8e>
 800ffee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fff4:	d205      	bcs.n	8010002 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fff8:	b29a      	uxth	r2, r3
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	60da      	str	r2, [r3, #12]
 8010000:	e002      	b.n	8010008 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010002:	2301      	movs	r3, #1
 8010004:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	2201      	movs	r2, #1
 801000c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	2201      	movs	r2, #1
 8010014:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	2200      	movs	r2, #0
 801001c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	2200      	movs	r2, #0
 8010022:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010024:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010028:	4618      	mov	r0, r3
 801002a:	3748      	adds	r7, #72	@ 0x48
 801002c:	46bd      	mov	sp, r7
 801002e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010032:	bf00      	nop
 8010034:	58024400 	.word	0x58024400
 8010038:	03d09000 	.word	0x03d09000
 801003c:	003d0900 	.word	0x003d0900
 8010040:	08015cb4 	.word	0x08015cb4

08010044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010044:	b480      	push	{r7}
 8010046:	b083      	sub	sp, #12
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010050:	f003 0308 	and.w	r3, r3, #8
 8010054:	2b00      	cmp	r3, #0
 8010056:	d00a      	beq.n	801006e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	430a      	orrs	r2, r1
 801006c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010072:	f003 0301 	and.w	r3, r3, #1
 8010076:	2b00      	cmp	r3, #0
 8010078:	d00a      	beq.n	8010090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	685b      	ldr	r3, [r3, #4]
 8010080:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	430a      	orrs	r2, r1
 801008e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010094:	f003 0302 	and.w	r3, r3, #2
 8010098:	2b00      	cmp	r3, #0
 801009a:	d00a      	beq.n	80100b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	430a      	orrs	r2, r1
 80100b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100b6:	f003 0304 	and.w	r3, r3, #4
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d00a      	beq.n	80100d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	430a      	orrs	r2, r1
 80100d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100d8:	f003 0310 	and.w	r3, r3, #16
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d00a      	beq.n	80100f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	689b      	ldr	r3, [r3, #8]
 80100e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	430a      	orrs	r2, r1
 80100f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100fa:	f003 0320 	and.w	r3, r3, #32
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d00a      	beq.n	8010118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	689b      	ldr	r3, [r3, #8]
 8010108:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	430a      	orrs	r2, r1
 8010116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801011c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010120:	2b00      	cmp	r3, #0
 8010122:	d01a      	beq.n	801015a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	430a      	orrs	r2, r1
 8010138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801013e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010142:	d10a      	bne.n	801015a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	430a      	orrs	r2, r1
 8010158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801015e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010162:	2b00      	cmp	r3, #0
 8010164:	d00a      	beq.n	801017c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	430a      	orrs	r2, r1
 801017a:	605a      	str	r2, [r3, #4]
  }
}
 801017c:	bf00      	nop
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b098      	sub	sp, #96	@ 0x60
 801018c:	af02      	add	r7, sp, #8
 801018e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2200      	movs	r2, #0
 8010194:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010198:	f7f2 f906 	bl	80023a8 <HAL_GetTick>
 801019c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	f003 0308 	and.w	r3, r3, #8
 80101a8:	2b08      	cmp	r3, #8
 80101aa:	d12f      	bne.n	801020c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80101ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80101b0:	9300      	str	r3, [sp, #0]
 80101b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101b4:	2200      	movs	r2, #0
 80101b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f000 f88e 	bl	80102dc <UART_WaitOnFlagUntilTimeout>
 80101c0:	4603      	mov	r3, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d022      	beq.n	801020c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ce:	e853 3f00 	ldrex	r3, [r3]
 80101d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80101d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80101da:	653b      	str	r3, [r7, #80]	@ 0x50
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	461a      	mov	r2, r3
 80101e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80101e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80101e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80101ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80101ec:	e841 2300 	strex	r3, r2, [r1]
 80101f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80101f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d1e6      	bne.n	80101c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2220      	movs	r2, #32
 80101fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2200      	movs	r2, #0
 8010204:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010208:	2303      	movs	r3, #3
 801020a:	e063      	b.n	80102d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	f003 0304 	and.w	r3, r3, #4
 8010216:	2b04      	cmp	r3, #4
 8010218:	d149      	bne.n	80102ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801021a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801021e:	9300      	str	r3, [sp, #0]
 8010220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010222:	2200      	movs	r2, #0
 8010224:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 f857 	bl	80102dc <UART_WaitOnFlagUntilTimeout>
 801022e:	4603      	mov	r3, r0
 8010230:	2b00      	cmp	r3, #0
 8010232:	d03c      	beq.n	80102ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801023a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801023c:	e853 3f00 	ldrex	r3, [r3]
 8010240:	623b      	str	r3, [r7, #32]
   return(result);
 8010242:	6a3b      	ldr	r3, [r7, #32]
 8010244:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010248:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	461a      	mov	r2, r3
 8010250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010252:	633b      	str	r3, [r7, #48]	@ 0x30
 8010254:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801025a:	e841 2300 	strex	r3, r2, [r1]
 801025e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010262:	2b00      	cmp	r3, #0
 8010264:	d1e6      	bne.n	8010234 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	3308      	adds	r3, #8
 801026c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	e853 3f00 	ldrex	r3, [r3]
 8010274:	60fb      	str	r3, [r7, #12]
   return(result);
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	f023 0301 	bic.w	r3, r3, #1
 801027c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	3308      	adds	r3, #8
 8010284:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010286:	61fa      	str	r2, [r7, #28]
 8010288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801028a:	69b9      	ldr	r1, [r7, #24]
 801028c:	69fa      	ldr	r2, [r7, #28]
 801028e:	e841 2300 	strex	r3, r2, [r1]
 8010292:	617b      	str	r3, [r7, #20]
   return(result);
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d1e5      	bne.n	8010266 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2220      	movs	r2, #32
 801029e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2200      	movs	r2, #0
 80102a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80102aa:	2303      	movs	r3, #3
 80102ac:	e012      	b.n	80102d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2220      	movs	r2, #32
 80102b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2220      	movs	r2, #32
 80102ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2200      	movs	r2, #0
 80102c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2200      	movs	r2, #0
 80102c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2200      	movs	r2, #0
 80102ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80102d2:	2300      	movs	r3, #0
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3758      	adds	r7, #88	@ 0x58
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b084      	sub	sp, #16
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	60f8      	str	r0, [r7, #12]
 80102e4:	60b9      	str	r1, [r7, #8]
 80102e6:	603b      	str	r3, [r7, #0]
 80102e8:	4613      	mov	r3, r2
 80102ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102ec:	e04f      	b.n	801038e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102f4:	d04b      	beq.n	801038e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80102f6:	f7f2 f857 	bl	80023a8 <HAL_GetTick>
 80102fa:	4602      	mov	r2, r0
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	1ad3      	subs	r3, r2, r3
 8010300:	69ba      	ldr	r2, [r7, #24]
 8010302:	429a      	cmp	r2, r3
 8010304:	d302      	bcc.n	801030c <UART_WaitOnFlagUntilTimeout+0x30>
 8010306:	69bb      	ldr	r3, [r7, #24]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d101      	bne.n	8010310 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801030c:	2303      	movs	r3, #3
 801030e:	e04e      	b.n	80103ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	f003 0304 	and.w	r3, r3, #4
 801031a:	2b00      	cmp	r3, #0
 801031c:	d037      	beq.n	801038e <UART_WaitOnFlagUntilTimeout+0xb2>
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	2b80      	cmp	r3, #128	@ 0x80
 8010322:	d034      	beq.n	801038e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	2b40      	cmp	r3, #64	@ 0x40
 8010328:	d031      	beq.n	801038e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	69db      	ldr	r3, [r3, #28]
 8010330:	f003 0308 	and.w	r3, r3, #8
 8010334:	2b08      	cmp	r3, #8
 8010336:	d110      	bne.n	801035a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	2208      	movs	r2, #8
 801033e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010340:	68f8      	ldr	r0, [r7, #12]
 8010342:	f000 f839 	bl	80103b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2208      	movs	r2, #8
 801034a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2200      	movs	r2, #0
 8010352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010356:	2301      	movs	r3, #1
 8010358:	e029      	b.n	80103ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	69db      	ldr	r3, [r3, #28]
 8010360:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010364:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010368:	d111      	bne.n	801038e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010374:	68f8      	ldr	r0, [r7, #12]
 8010376:	f000 f81f 	bl	80103b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	2220      	movs	r2, #32
 801037e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	2200      	movs	r2, #0
 8010386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801038a:	2303      	movs	r3, #3
 801038c:	e00f      	b.n	80103ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	69da      	ldr	r2, [r3, #28]
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	4013      	ands	r3, r2
 8010398:	68ba      	ldr	r2, [r7, #8]
 801039a:	429a      	cmp	r2, r3
 801039c:	bf0c      	ite	eq
 801039e:	2301      	moveq	r3, #1
 80103a0:	2300      	movne	r3, #0
 80103a2:	b2db      	uxtb	r3, r3
 80103a4:	461a      	mov	r2, r3
 80103a6:	79fb      	ldrb	r3, [r7, #7]
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d0a0      	beq.n	80102ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80103ac:	2300      	movs	r3, #0
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3710      	adds	r7, #16
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
	...

080103b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b095      	sub	sp, #84	@ 0x54
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103c8:	e853 3f00 	ldrex	r3, [r3]
 80103cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80103ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80103d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	461a      	mov	r2, r3
 80103dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80103de:	643b      	str	r3, [r7, #64]	@ 0x40
 80103e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80103e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80103e6:	e841 2300 	strex	r3, r2, [r1]
 80103ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80103ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d1e6      	bne.n	80103c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	3308      	adds	r3, #8
 80103f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103fa:	6a3b      	ldr	r3, [r7, #32]
 80103fc:	e853 3f00 	ldrex	r3, [r3]
 8010400:	61fb      	str	r3, [r7, #28]
   return(result);
 8010402:	69fa      	ldr	r2, [r7, #28]
 8010404:	4b1e      	ldr	r3, [pc, #120]	@ (8010480 <UART_EndRxTransfer+0xc8>)
 8010406:	4013      	ands	r3, r2
 8010408:	64bb      	str	r3, [r7, #72]	@ 0x48
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	3308      	adds	r3, #8
 8010410:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010412:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010414:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010416:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801041a:	e841 2300 	strex	r3, r2, [r1]
 801041e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010422:	2b00      	cmp	r3, #0
 8010424:	d1e5      	bne.n	80103f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801042a:	2b01      	cmp	r3, #1
 801042c:	d118      	bne.n	8010460 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	e853 3f00 	ldrex	r3, [r3]
 801043a:	60bb      	str	r3, [r7, #8]
   return(result);
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	f023 0310 	bic.w	r3, r3, #16
 8010442:	647b      	str	r3, [r7, #68]	@ 0x44
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	461a      	mov	r2, r3
 801044a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801044c:	61bb      	str	r3, [r7, #24]
 801044e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010450:	6979      	ldr	r1, [r7, #20]
 8010452:	69ba      	ldr	r2, [r7, #24]
 8010454:	e841 2300 	strex	r3, r2, [r1]
 8010458:	613b      	str	r3, [r7, #16]
   return(result);
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d1e6      	bne.n	801042e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2220      	movs	r2, #32
 8010464:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2200      	movs	r2, #0
 801046c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2200      	movs	r2, #0
 8010472:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010474:	bf00      	nop
 8010476:	3754      	adds	r7, #84	@ 0x54
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr
 8010480:	effffffe 	.word	0xeffffffe

08010484 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010484:	b480      	push	{r7}
 8010486:	b085      	sub	sp, #20
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010492:	2b01      	cmp	r3, #1
 8010494:	d101      	bne.n	801049a <HAL_UARTEx_DisableFifoMode+0x16>
 8010496:	2302      	movs	r3, #2
 8010498:	e027      	b.n	80104ea <HAL_UARTEx_DisableFifoMode+0x66>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2201      	movs	r2, #1
 801049e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2224      	movs	r2, #36	@ 0x24
 80104a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	681a      	ldr	r2, [r3, #0]
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	f022 0201 	bic.w	r2, r2, #1
 80104c0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80104c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2200      	movs	r2, #0
 80104ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	68fa      	ldr	r2, [r7, #12]
 80104d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2220      	movs	r2, #32
 80104dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2200      	movs	r2, #0
 80104e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80104e8:	2300      	movs	r3, #0
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3714      	adds	r7, #20
 80104ee:	46bd      	mov	sp, r7
 80104f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f4:	4770      	bx	lr

080104f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80104f6:	b580      	push	{r7, lr}
 80104f8:	b084      	sub	sp, #16
 80104fa:	af00      	add	r7, sp, #0
 80104fc:	6078      	str	r0, [r7, #4]
 80104fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010506:	2b01      	cmp	r3, #1
 8010508:	d101      	bne.n	801050e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801050a:	2302      	movs	r3, #2
 801050c:	e02d      	b.n	801056a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2201      	movs	r2, #1
 8010512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2224      	movs	r2, #36	@ 0x24
 801051a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f022 0201 	bic.w	r2, r2, #1
 8010534:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	689b      	ldr	r3, [r3, #8]
 801053c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	683a      	ldr	r2, [r7, #0]
 8010546:	430a      	orrs	r2, r1
 8010548:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f000 f850 	bl	80105f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	68fa      	ldr	r2, [r7, #12]
 8010556:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2220      	movs	r2, #32
 801055c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2200      	movs	r2, #0
 8010564:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010568:	2300      	movs	r3, #0
}
 801056a:	4618      	mov	r0, r3
 801056c:	3710      	adds	r7, #16
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}

08010572 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010572:	b580      	push	{r7, lr}
 8010574:	b084      	sub	sp, #16
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
 801057a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010582:	2b01      	cmp	r3, #1
 8010584:	d101      	bne.n	801058a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010586:	2302      	movs	r3, #2
 8010588:	e02d      	b.n	80105e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2201      	movs	r2, #1
 801058e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2224      	movs	r2, #36	@ 0x24
 8010596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	681a      	ldr	r2, [r3, #0]
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f022 0201 	bic.w	r2, r2, #1
 80105b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	689b      	ldr	r3, [r3, #8]
 80105b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	683a      	ldr	r2, [r7, #0]
 80105c2:	430a      	orrs	r2, r1
 80105c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f000 f812 	bl	80105f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	68fa      	ldr	r2, [r7, #12]
 80105d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2220      	movs	r2, #32
 80105d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2200      	movs	r2, #0
 80105e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80105e4:	2300      	movs	r3, #0
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3710      	adds	r7, #16
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
	...

080105f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b085      	sub	sp, #20
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d108      	bne.n	8010612 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2201      	movs	r2, #1
 8010604:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2201      	movs	r2, #1
 801060c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010610:	e031      	b.n	8010676 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010612:	2310      	movs	r3, #16
 8010614:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010616:	2310      	movs	r3, #16
 8010618:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	689b      	ldr	r3, [r3, #8]
 8010620:	0e5b      	lsrs	r3, r3, #25
 8010622:	b2db      	uxtb	r3, r3
 8010624:	f003 0307 	and.w	r3, r3, #7
 8010628:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	689b      	ldr	r3, [r3, #8]
 8010630:	0f5b      	lsrs	r3, r3, #29
 8010632:	b2db      	uxtb	r3, r3
 8010634:	f003 0307 	and.w	r3, r3, #7
 8010638:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801063a:	7bbb      	ldrb	r3, [r7, #14]
 801063c:	7b3a      	ldrb	r2, [r7, #12]
 801063e:	4911      	ldr	r1, [pc, #68]	@ (8010684 <UARTEx_SetNbDataToProcess+0x94>)
 8010640:	5c8a      	ldrb	r2, [r1, r2]
 8010642:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010646:	7b3a      	ldrb	r2, [r7, #12]
 8010648:	490f      	ldr	r1, [pc, #60]	@ (8010688 <UARTEx_SetNbDataToProcess+0x98>)
 801064a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801064c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010650:	b29a      	uxth	r2, r3
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010658:	7bfb      	ldrb	r3, [r7, #15]
 801065a:	7b7a      	ldrb	r2, [r7, #13]
 801065c:	4909      	ldr	r1, [pc, #36]	@ (8010684 <UARTEx_SetNbDataToProcess+0x94>)
 801065e:	5c8a      	ldrb	r2, [r1, r2]
 8010660:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010664:	7b7a      	ldrb	r2, [r7, #13]
 8010666:	4908      	ldr	r1, [pc, #32]	@ (8010688 <UARTEx_SetNbDataToProcess+0x98>)
 8010668:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801066a:	fb93 f3f2 	sdiv	r3, r3, r2
 801066e:	b29a      	uxth	r2, r3
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010676:	bf00      	nop
 8010678:	3714      	adds	r7, #20
 801067a:	46bd      	mov	sp, r7
 801067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010680:	4770      	bx	lr
 8010682:	bf00      	nop
 8010684:	08015ccc 	.word	0x08015ccc
 8010688:	08015cd4 	.word	0x08015cd4

0801068c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801068c:	b084      	sub	sp, #16
 801068e:	b480      	push	{r7}
 8010690:	b085      	sub	sp, #20
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
 8010696:	f107 001c 	add.w	r0, r7, #28
 801069a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801069e:	2300      	movs	r3, #0
 80106a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80106a2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80106a4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80106a6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80106a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 80106aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80106ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 80106ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 80106b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 80106b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80106b4:	68fa      	ldr	r2, [r7, #12]
 80106b6:	4313      	orrs	r3, r2
 80106b8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	685a      	ldr	r2, [r3, #4]
 80106be:	4b07      	ldr	r3, [pc, #28]	@ (80106dc <SDMMC_Init+0x50>)
 80106c0:	4013      	ands	r3, r2
 80106c2:	68fa      	ldr	r2, [r7, #12]
 80106c4:	431a      	orrs	r2, r3
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80106ca:	2300      	movs	r3, #0
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3714      	adds	r7, #20
 80106d0:	46bd      	mov	sp, r7
 80106d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d6:	b004      	add	sp, #16
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop
 80106dc:	ffc02c00 	.word	0xffc02c00

080106e0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 80106e0:	b480      	push	{r7}
 80106e2:	b083      	sub	sp, #12
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	370c      	adds	r7, #12
 80106f2:	46bd      	mov	sp, r7
 80106f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f8:	4770      	bx	lr

080106fa <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80106fa:	b480      	push	{r7}
 80106fc:	b083      	sub	sp, #12
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	f043 0203 	orr.w	r2, r3, #3
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801070e:	2300      	movs	r3, #0
}
 8010710:	4618      	mov	r0, r3
 8010712:	370c      	adds	r7, #12
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr

0801071c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 801071c:	b480      	push	{r7}
 801071e:	b083      	sub	sp, #12
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	f003 0303 	and.w	r3, r3, #3
}
 801072c:	4618      	mov	r0, r3
 801072e:	370c      	adds	r7, #12
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr

08010738 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8010738:	b480      	push	{r7}
 801073a:	b085      	sub	sp, #20
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010742:	2300      	movs	r3, #0
 8010744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010756:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801075c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010762:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010764:	68fa      	ldr	r2, [r7, #12]
 8010766:	4313      	orrs	r3, r2
 8010768:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	68da      	ldr	r2, [r3, #12]
 801076e:	4b06      	ldr	r3, [pc, #24]	@ (8010788 <SDMMC_SendCommand+0x50>)
 8010770:	4013      	ands	r3, r2
 8010772:	68fa      	ldr	r2, [r7, #12]
 8010774:	431a      	orrs	r2, r3
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801077a:	2300      	movs	r3, #0
}
 801077c:	4618      	mov	r0, r3
 801077e:	3714      	adds	r7, #20
 8010780:	46bd      	mov	sp, r7
 8010782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010786:	4770      	bx	lr
 8010788:	fffee0c0 	.word	0xfffee0c0

0801078c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	691b      	ldr	r3, [r3, #16]
 8010798:	b2db      	uxtb	r3, r3
}
 801079a:	4618      	mov	r0, r3
 801079c:	370c      	adds	r7, #12
 801079e:	46bd      	mov	sp, r7
 80107a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a4:	4770      	bx	lr

080107a6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80107a6:	b480      	push	{r7}
 80107a8:	b085      	sub	sp, #20
 80107aa:	af00      	add	r7, sp, #0
 80107ac:	6078      	str	r0, [r7, #4]
 80107ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	3314      	adds	r3, #20
 80107b4:	461a      	mov	r2, r3
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	4413      	add	r3, r2
 80107ba:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681b      	ldr	r3, [r3, #0]
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3714      	adds	r7, #20
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr

080107cc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b085      	sub	sp, #20
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80107d6:	2300      	movs	r3, #0
 80107d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	681a      	ldr	r2, [r3, #0]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	685a      	ldr	r2, [r3, #4]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80107f2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80107f8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80107fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010800:	68fa      	ldr	r2, [r7, #12]
 8010802:	4313      	orrs	r3, r2
 8010804:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801080a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	431a      	orrs	r2, r3
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010816:	2300      	movs	r3, #0

}
 8010818:	4618      	mov	r0, r3
 801081a:	3714      	adds	r7, #20
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr

08010824 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b088      	sub	sp, #32
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010832:	2310      	movs	r3, #16
 8010834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010836:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801083a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801083c:	2300      	movs	r3, #0
 801083e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010840:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010844:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010846:	f107 0308 	add.w	r3, r7, #8
 801084a:	4619      	mov	r1, r3
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f7ff ff73 	bl	8010738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010856:	2110      	movs	r1, #16
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f000 f995 	bl	8010b88 <SDMMC_GetCmdResp1>
 801085e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010860:	69fb      	ldr	r3, [r7, #28]
}
 8010862:	4618      	mov	r0, r3
 8010864:	3720      	adds	r7, #32
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}

0801086a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 801086a:	b580      	push	{r7, lr}
 801086c:	b088      	sub	sp, #32
 801086e:	af00      	add	r7, sp, #0
 8010870:	6078      	str	r0, [r7, #4]
 8010872:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010878:	2307      	movs	r3, #7
 801087a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801087c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010880:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010882:	2300      	movs	r3, #0
 8010884:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801088a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801088c:	f107 0308 	add.w	r3, r7, #8
 8010890:	4619      	mov	r1, r3
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f7ff ff50 	bl	8010738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010898:	f241 3288 	movw	r2, #5000	@ 0x1388
 801089c:	2107      	movs	r1, #7
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f000 f972 	bl	8010b88 <SDMMC_GetCmdResp1>
 80108a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108a6:	69fb      	ldr	r3, [r7, #28]
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3720      	adds	r7, #32
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b088      	sub	sp, #32
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80108b8:	2300      	movs	r3, #0
 80108ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80108bc:	2300      	movs	r3, #0
 80108be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80108c0:	2300      	movs	r3, #0
 80108c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80108c4:	2300      	movs	r3, #0
 80108c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80108cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108ce:	f107 0308 	add.w	r3, r7, #8
 80108d2:	4619      	mov	r1, r3
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f7ff ff2f 	bl	8010738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f000 fb96 	bl	801100c <SDMMC_GetCmdError>
 80108e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108e2:	69fb      	ldr	r3, [r7, #28]
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	3720      	adds	r7, #32
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}

080108ec <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b088      	sub	sp, #32
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80108f4:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80108f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80108fa:	2308      	movs	r3, #8
 80108fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80108fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010904:	2300      	movs	r3, #0
 8010906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801090c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801090e:	f107 0308 	add.w	r3, r7, #8
 8010912:	4619      	mov	r1, r3
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f7ff ff0f 	bl	8010738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f000 fb28 	bl	8010f70 <SDMMC_GetCmdResp7>
 8010920:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010922:	69fb      	ldr	r3, [r7, #28]
}
 8010924:	4618      	mov	r0, r3
 8010926:	3720      	adds	r7, #32
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b088      	sub	sp, #32
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801093a:	2337      	movs	r3, #55	@ 0x37
 801093c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801093e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010942:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010944:	2300      	movs	r3, #0
 8010946:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801094c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801094e:	f107 0308 	add.w	r3, r7, #8
 8010952:	4619      	mov	r1, r3
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f7ff feef 	bl	8010738 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801095a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801095e:	2137      	movs	r1, #55	@ 0x37
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f000 f911 	bl	8010b88 <SDMMC_GetCmdResp1>
 8010966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010968:	69fb      	ldr	r3, [r7, #28]
}
 801096a:	4618      	mov	r0, r3
 801096c:	3720      	adds	r7, #32
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}

08010972 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010972:	b580      	push	{r7, lr}
 8010974:	b088      	sub	sp, #32
 8010976:	af00      	add	r7, sp, #0
 8010978:	6078      	str	r0, [r7, #4]
 801097a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010980:	2329      	movs	r3, #41	@ 0x29
 8010982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010984:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801098a:	2300      	movs	r3, #0
 801098c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801098e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010992:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010994:	f107 0308 	add.w	r3, r7, #8
 8010998:	4619      	mov	r1, r3
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f7ff fecc 	bl	8010738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f000 fa2d 	bl	8010e00 <SDMMC_GetCmdResp3>
 80109a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109a8:	69fb      	ldr	r3, [r7, #28]
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3720      	adds	r7, #32
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}

080109b2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80109b2:	b580      	push	{r7, lr}
 80109b4:	b088      	sub	sp, #32
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	6078      	str	r0, [r7, #4]
 80109ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80109c0:	2306      	movs	r3, #6
 80109c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80109c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109ca:	2300      	movs	r3, #0
 80109cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80109d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109d4:	f107 0308 	add.w	r3, r7, #8
 80109d8:	4619      	mov	r1, r3
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f7ff feac 	bl	8010738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80109e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109e4:	2106      	movs	r1, #6
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f000 f8ce 	bl	8010b88 <SDMMC_GetCmdResp1>
 80109ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109ee:	69fb      	ldr	r3, [r7, #28]
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3720      	adds	r7, #32
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b088      	sub	sp, #32
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010a00:	2300      	movs	r3, #0
 8010a02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010a04:	2333      	movs	r3, #51	@ 0x33
 8010a06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010a0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010a16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a18:	f107 0308 	add.w	r3, r7, #8
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f7ff fe8a 	bl	8010738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a28:	2133      	movs	r1, #51	@ 0x33
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f000 f8ac 	bl	8010b88 <SDMMC_GetCmdResp1>
 8010a30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a32:	69fb      	ldr	r3, [r7, #28]
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3720      	adds	r7, #32
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b088      	sub	sp, #32
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010a44:	2300      	movs	r3, #0
 8010a46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010a48:	2302      	movs	r3, #2
 8010a4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010a4c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010a50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a52:	2300      	movs	r3, #0
 8010a54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010a5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a5c:	f107 0308 	add.w	r3, r7, #8
 8010a60:	4619      	mov	r1, r3
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f7ff fe68 	bl	8010738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f000 f97f 	bl	8010d6c <SDMMC_GetCmdResp2>
 8010a6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a70:	69fb      	ldr	r3, [r7, #28]
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3720      	adds	r7, #32
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}

08010a7a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010a7a:	b580      	push	{r7, lr}
 8010a7c:	b088      	sub	sp, #32
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
 8010a82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010a88:	2309      	movs	r3, #9
 8010a8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010a8c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010a90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a92:	2300      	movs	r3, #0
 8010a94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010a9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a9c:	f107 0308 	add.w	r3, r7, #8
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f7ff fe48 	bl	8010738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f000 f95f 	bl	8010d6c <SDMMC_GetCmdResp2>
 8010aae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ab0:	69fb      	ldr	r3, [r7, #28]
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3720      	adds	r7, #32
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}

08010aba <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010aba:	b580      	push	{r7, lr}
 8010abc:	b088      	sub	sp, #32
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
 8010ac2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010ac8:	2303      	movs	r3, #3
 8010aca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010acc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010ad0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ad6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010ada:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010adc:	f107 0308 	add.w	r3, r7, #8
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f7ff fe28 	bl	8010738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010ae8:	683a      	ldr	r2, [r7, #0]
 8010aea:	2103      	movs	r1, #3
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f000 f9c7 	bl	8010e80 <SDMMC_GetCmdResp6>
 8010af2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010af4:	69fb      	ldr	r3, [r7, #28]
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3720      	adds	r7, #32
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}

08010afe <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010afe:	b580      	push	{r7, lr}
 8010b00:	b088      	sub	sp, #32
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
 8010b06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010b0c:	230d      	movs	r3, #13
 8010b0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010b14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b16:	2300      	movs	r3, #0
 8010b18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b20:	f107 0308 	add.w	r3, r7, #8
 8010b24:	4619      	mov	r1, r3
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f7ff fe06 	bl	8010738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010b30:	210d      	movs	r1, #13
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f000 f828 	bl	8010b88 <SDMMC_GetCmdResp1>
 8010b38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b3a:	69fb      	ldr	r3, [r7, #28]
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3720      	adds	r7, #32
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b088      	sub	sp, #32
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010b50:	230d      	movs	r3, #13
 8010b52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010b58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b64:	f107 0308 	add.w	r3, r7, #8
 8010b68:	4619      	mov	r1, r3
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	f7ff fde4 	bl	8010738 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010b74:	210d      	movs	r1, #13
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f000 f806 	bl	8010b88 <SDMMC_GetCmdResp1>
 8010b7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b7e:	69fb      	ldr	r3, [r7, #28]
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3720      	adds	r7, #32
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}

08010b88 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b088      	sub	sp, #32
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	60f8      	str	r0, [r7, #12]
 8010b90:	460b      	mov	r3, r1
 8010b92:	607a      	str	r2, [r7, #4]
 8010b94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010b96:	4b70      	ldr	r3, [pc, #448]	@ (8010d58 <SDMMC_GetCmdResp1+0x1d0>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a70      	ldr	r2, [pc, #448]	@ (8010d5c <SDMMC_GetCmdResp1+0x1d4>)
 8010b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8010ba0:	0a5a      	lsrs	r2, r3, #9
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	fb02 f303 	mul.w	r3, r2, r3
 8010ba8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010baa:	69fb      	ldr	r3, [r7, #28]
 8010bac:	1e5a      	subs	r2, r3, #1
 8010bae:	61fa      	str	r2, [r7, #28]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d102      	bne.n	8010bba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010bb4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010bb8:	e0c9      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bbe:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010bc0:	69ba      	ldr	r2, [r7, #24]
 8010bc2:	4b67      	ldr	r3, [pc, #412]	@ (8010d60 <SDMMC_GetCmdResp1+0x1d8>)
 8010bc4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d0ef      	beq.n	8010baa <SDMMC_GetCmdResp1+0x22>
 8010bca:	69bb      	ldr	r3, [r7, #24]
 8010bcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d1ea      	bne.n	8010baa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bd8:	f003 0304 	and.w	r3, r3, #4
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d004      	beq.n	8010bea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	2204      	movs	r2, #4
 8010be4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010be6:	2304      	movs	r3, #4
 8010be8:	e0b1      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bee:	f003 0301 	and.w	r3, r3, #1
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d004      	beq.n	8010c00 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	2201      	movs	r2, #1
 8010bfa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	e0a6      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	4a58      	ldr	r2, [pc, #352]	@ (8010d64 <SDMMC_GetCmdResp1+0x1dc>)
 8010c04:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010c06:	68f8      	ldr	r0, [r7, #12]
 8010c08:	f7ff fdc0 	bl	801078c <SDMMC_GetCommandResponse>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	461a      	mov	r2, r3
 8010c10:	7afb      	ldrb	r3, [r7, #11]
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d001      	beq.n	8010c1a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c16:	2301      	movs	r3, #1
 8010c18:	e099      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010c1a:	2100      	movs	r1, #0
 8010c1c:	68f8      	ldr	r0, [r7, #12]
 8010c1e:	f7ff fdc2 	bl	80107a6 <SDMMC_GetResponse>
 8010c22:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010c24:	697a      	ldr	r2, [r7, #20]
 8010c26:	4b50      	ldr	r3, [pc, #320]	@ (8010d68 <SDMMC_GetCmdResp1+0x1e0>)
 8010c28:	4013      	ands	r3, r2
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d101      	bne.n	8010c32 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	e08d      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	da02      	bge.n	8010c3e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010c38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010c3c:	e087      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d001      	beq.n	8010c4c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010c48:	2340      	movs	r3, #64	@ 0x40
 8010c4a:	e080      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d001      	beq.n	8010c5a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010c56:	2380      	movs	r3, #128	@ 0x80
 8010c58:	e079      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d002      	beq.n	8010c6a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010c64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010c68:	e071      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d002      	beq.n	8010c7a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010c74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010c78:	e069      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d002      	beq.n	8010c8a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010c84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c88:	e061      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d002      	beq.n	8010c9a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010c94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010c98:	e059      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d002      	beq.n	8010caa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010ca4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010ca8:	e051      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d002      	beq.n	8010cba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010cb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010cb8:	e049      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d002      	beq.n	8010cca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010cc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010cc8:	e041      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d002      	beq.n	8010cda <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010cd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010cd8:	e039      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d002      	beq.n	8010cea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010ce4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010ce8:	e031      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d002      	beq.n	8010cfa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010cf4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010cf8:	e029      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d002      	beq.n	8010d0a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010d04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010d08:	e021      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d002      	beq.n	8010d1a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010d14:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010d18:	e019      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d002      	beq.n	8010d2a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010d24:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010d28:	e011      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d002      	beq.n	8010d3a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010d34:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010d38:	e009      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	f003 0308 	and.w	r3, r3, #8
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d002      	beq.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010d44:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010d48:	e001      	b.n	8010d4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010d4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010d4e:	4618      	mov	r0, r3
 8010d50:	3720      	adds	r7, #32
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}
 8010d56:	bf00      	nop
 8010d58:	24000000 	.word	0x24000000
 8010d5c:	10624dd3 	.word	0x10624dd3
 8010d60:	00200045 	.word	0x00200045
 8010d64:	002000c5 	.word	0x002000c5
 8010d68:	fdffe008 	.word	0xfdffe008

08010d6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b085      	sub	sp, #20
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010d74:	4b1f      	ldr	r3, [pc, #124]	@ (8010df4 <SDMMC_GetCmdResp2+0x88>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	4a1f      	ldr	r2, [pc, #124]	@ (8010df8 <SDMMC_GetCmdResp2+0x8c>)
 8010d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8010d7e:	0a5b      	lsrs	r3, r3, #9
 8010d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d84:	fb02 f303 	mul.w	r3, r2, r3
 8010d88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	1e5a      	subs	r2, r3, #1
 8010d8e:	60fa      	str	r2, [r7, #12]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d102      	bne.n	8010d9a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010d98:	e026      	b.n	8010de8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d9e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d0ef      	beq.n	8010d8a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d1ea      	bne.n	8010d8a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010db8:	f003 0304 	and.w	r3, r3, #4
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d004      	beq.n	8010dca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2204      	movs	r2, #4
 8010dc4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010dc6:	2304      	movs	r3, #4
 8010dc8:	e00e      	b.n	8010de8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dce:	f003 0301 	and.w	r3, r3, #1
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d004      	beq.n	8010de0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2201      	movs	r2, #1
 8010dda:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	e003      	b.n	8010de8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	4a06      	ldr	r2, [pc, #24]	@ (8010dfc <SDMMC_GetCmdResp2+0x90>)
 8010de4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010de6:	2300      	movs	r3, #0
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	3714      	adds	r7, #20
 8010dec:	46bd      	mov	sp, r7
 8010dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df2:	4770      	bx	lr
 8010df4:	24000000 	.word	0x24000000
 8010df8:	10624dd3 	.word	0x10624dd3
 8010dfc:	002000c5 	.word	0x002000c5

08010e00 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b085      	sub	sp, #20
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010e08:	4b1a      	ldr	r3, [pc, #104]	@ (8010e74 <SDMMC_GetCmdResp3+0x74>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8010e78 <SDMMC_GetCmdResp3+0x78>)
 8010e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8010e12:	0a5b      	lsrs	r3, r3, #9
 8010e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e18:	fb02 f303 	mul.w	r3, r2, r3
 8010e1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	1e5a      	subs	r2, r3, #1
 8010e22:	60fa      	str	r2, [r7, #12]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d102      	bne.n	8010e2e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010e2c:	e01b      	b.n	8010e66 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e32:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d0ef      	beq.n	8010e1e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d1ea      	bne.n	8010e1e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e4c:	f003 0304 	and.w	r3, r3, #4
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d004      	beq.n	8010e5e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2204      	movs	r2, #4
 8010e58:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e5a:	2304      	movs	r3, #4
 8010e5c:	e003      	b.n	8010e66 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	4a06      	ldr	r2, [pc, #24]	@ (8010e7c <SDMMC_GetCmdResp3+0x7c>)
 8010e62:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010e64:	2300      	movs	r3, #0
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3714      	adds	r7, #20
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	24000000 	.word	0x24000000
 8010e78:	10624dd3 	.word	0x10624dd3
 8010e7c:	002000c5 	.word	0x002000c5

08010e80 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b088      	sub	sp, #32
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	460b      	mov	r3, r1
 8010e8a:	607a      	str	r2, [r7, #4]
 8010e8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010e8e:	4b35      	ldr	r3, [pc, #212]	@ (8010f64 <SDMMC_GetCmdResp6+0xe4>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	4a35      	ldr	r2, [pc, #212]	@ (8010f68 <SDMMC_GetCmdResp6+0xe8>)
 8010e94:	fba2 2303 	umull	r2, r3, r2, r3
 8010e98:	0a5b      	lsrs	r3, r3, #9
 8010e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e9e:	fb02 f303 	mul.w	r3, r2, r3
 8010ea2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	1e5a      	subs	r2, r3, #1
 8010ea8:	61fa      	str	r2, [r7, #28]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d102      	bne.n	8010eb4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010eae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010eb2:	e052      	b.n	8010f5a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010eb8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d0ef      	beq.n	8010ea4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010ec4:	69bb      	ldr	r3, [r7, #24]
 8010ec6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d1ea      	bne.n	8010ea4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ed2:	f003 0304 	and.w	r3, r3, #4
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d004      	beq.n	8010ee4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	2204      	movs	r2, #4
 8010ede:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ee0:	2304      	movs	r3, #4
 8010ee2:	e03a      	b.n	8010f5a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ee8:	f003 0301 	and.w	r3, r3, #1
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d004      	beq.n	8010efa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	e02f      	b.n	8010f5a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010efa:	68f8      	ldr	r0, [r7, #12]
 8010efc:	f7ff fc46 	bl	801078c <SDMMC_GetCommandResponse>
 8010f00:	4603      	mov	r3, r0
 8010f02:	461a      	mov	r2, r3
 8010f04:	7afb      	ldrb	r3, [r7, #11]
 8010f06:	4293      	cmp	r3, r2
 8010f08:	d001      	beq.n	8010f0e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	e025      	b.n	8010f5a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	4a16      	ldr	r2, [pc, #88]	@ (8010f6c <SDMMC_GetCmdResp6+0xec>)
 8010f12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010f14:	2100      	movs	r1, #0
 8010f16:	68f8      	ldr	r0, [r7, #12]
 8010f18:	f7ff fc45 	bl	80107a6 <SDMMC_GetResponse>
 8010f1c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d106      	bne.n	8010f36 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	0c1b      	lsrs	r3, r3, #16
 8010f2c:	b29a      	uxth	r2, r3
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010f32:	2300      	movs	r3, #0
 8010f34:	e011      	b.n	8010f5a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d002      	beq.n	8010f46 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010f40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010f44:	e009      	b.n	8010f5a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d002      	beq.n	8010f56 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010f54:	e001      	b.n	8010f5a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010f56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3720      	adds	r7, #32
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	24000000 	.word	0x24000000
 8010f68:	10624dd3 	.word	0x10624dd3
 8010f6c:	002000c5 	.word	0x002000c5

08010f70 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010f70:	b480      	push	{r7}
 8010f72:	b085      	sub	sp, #20
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f78:	4b22      	ldr	r3, [pc, #136]	@ (8011004 <SDMMC_GetCmdResp7+0x94>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	4a22      	ldr	r2, [pc, #136]	@ (8011008 <SDMMC_GetCmdResp7+0x98>)
 8010f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8010f82:	0a5b      	lsrs	r3, r3, #9
 8010f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f88:	fb02 f303 	mul.w	r3, r2, r3
 8010f8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	1e5a      	subs	r2, r3, #1
 8010f92:	60fa      	str	r2, [r7, #12]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d102      	bne.n	8010f9e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010f9c:	e02c      	b.n	8010ff8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fa2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010fa4:	68bb      	ldr	r3, [r7, #8]
 8010fa6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d0ef      	beq.n	8010f8e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d1ea      	bne.n	8010f8e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fbc:	f003 0304 	and.w	r3, r3, #4
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d004      	beq.n	8010fce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2204      	movs	r2, #4
 8010fc8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010fca:	2304      	movs	r3, #4
 8010fcc:	e014      	b.n	8010ff8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fd2:	f003 0301 	and.w	r3, r3, #1
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d004      	beq.n	8010fe4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2201      	movs	r2, #1
 8010fde:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010fe0:	2301      	movs	r3, #1
 8010fe2:	e009      	b.n	8010ff8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d002      	beq.n	8010ff6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2240      	movs	r2, #64	@ 0x40
 8010ff4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010ff6:	2300      	movs	r3, #0

}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3714      	adds	r7, #20
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011002:	4770      	bx	lr
 8011004:	24000000 	.word	0x24000000
 8011008:	10624dd3 	.word	0x10624dd3

0801100c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801100c:	b480      	push	{r7}
 801100e:	b085      	sub	sp, #20
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011014:	4b11      	ldr	r3, [pc, #68]	@ (801105c <SDMMC_GetCmdError+0x50>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	4a11      	ldr	r2, [pc, #68]	@ (8011060 <SDMMC_GetCmdError+0x54>)
 801101a:	fba2 2303 	umull	r2, r3, r2, r3
 801101e:	0a5b      	lsrs	r3, r3, #9
 8011020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011024:	fb02 f303 	mul.w	r3, r2, r3
 8011028:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	1e5a      	subs	r2, r3, #1
 801102e:	60fa      	str	r2, [r7, #12]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d102      	bne.n	801103a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011034:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011038:	e009      	b.n	801104e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801103e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011042:	2b00      	cmp	r3, #0
 8011044:	d0f1      	beq.n	801102a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	4a06      	ldr	r2, [pc, #24]	@ (8011064 <SDMMC_GetCmdError+0x58>)
 801104a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 801104c:	2300      	movs	r3, #0
}
 801104e:	4618      	mov	r0, r3
 8011050:	3714      	adds	r7, #20
 8011052:	46bd      	mov	sp, r7
 8011054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011058:	4770      	bx	lr
 801105a:	bf00      	nop
 801105c:	24000000 	.word	0x24000000
 8011060:	10624dd3 	.word	0x10624dd3
 8011064:	002000c5 	.word	0x002000c5

08011068 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011068:	b084      	sub	sp, #16
 801106a:	b580      	push	{r7, lr}
 801106c:	b084      	sub	sp, #16
 801106e:	af00      	add	r7, sp, #0
 8011070:	6078      	str	r0, [r7, #4]
 8011072:	f107 001c 	add.w	r0, r7, #28
 8011076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801107a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801107e:	2b01      	cmp	r3, #1
 8011080:	d121      	bne.n	80110c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011086:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	68da      	ldr	r2, [r3, #12]
 8011092:	4b2c      	ldr	r3, [pc, #176]	@ (8011144 <USB_CoreInit+0xdc>)
 8011094:	4013      	ands	r3, r2
 8011096:	687a      	ldr	r2, [r7, #4]
 8011098:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	68db      	ldr	r3, [r3, #12]
 801109e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80110a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80110aa:	2b01      	cmp	r3, #1
 80110ac:	d105      	bne.n	80110ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	68db      	ldr	r3, [r3, #12]
 80110b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f001 fafa 	bl	80126b4 <USB_CoreReset>
 80110c0:	4603      	mov	r3, r0
 80110c2:	73fb      	strb	r3, [r7, #15]
 80110c4:	e01b      	b.n	80110fe <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f001 faee 	bl	80126b4 <USB_CoreReset>
 80110d8:	4603      	mov	r3, r0
 80110da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80110dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d106      	bne.n	80110f2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80110f0:	e005      	b.n	80110fe <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80110fe:	7fbb      	ldrb	r3, [r7, #30]
 8011100:	2b01      	cmp	r3, #1
 8011102:	d116      	bne.n	8011132 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011108:	b29a      	uxth	r2, r3
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011112:	4b0d      	ldr	r3, [pc, #52]	@ (8011148 <USB_CoreInit+0xe0>)
 8011114:	4313      	orrs	r3, r2
 8011116:	687a      	ldr	r2, [r7, #4]
 8011118:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	689b      	ldr	r3, [r3, #8]
 801111e:	f043 0206 	orr.w	r2, r3, #6
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	689b      	ldr	r3, [r3, #8]
 801112a:	f043 0220 	orr.w	r2, r3, #32
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011132:	7bfb      	ldrb	r3, [r7, #15]
}
 8011134:	4618      	mov	r0, r3
 8011136:	3710      	adds	r7, #16
 8011138:	46bd      	mov	sp, r7
 801113a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801113e:	b004      	add	sp, #16
 8011140:	4770      	bx	lr
 8011142:	bf00      	nop
 8011144:	ffbdffbf 	.word	0xffbdffbf
 8011148:	03ee0000 	.word	0x03ee0000

0801114c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801114c:	b480      	push	{r7}
 801114e:	b087      	sub	sp, #28
 8011150:	af00      	add	r7, sp, #0
 8011152:	60f8      	str	r0, [r7, #12]
 8011154:	60b9      	str	r1, [r7, #8]
 8011156:	4613      	mov	r3, r2
 8011158:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801115a:	79fb      	ldrb	r3, [r7, #7]
 801115c:	2b02      	cmp	r3, #2
 801115e:	d165      	bne.n	801122c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	4a41      	ldr	r2, [pc, #260]	@ (8011268 <USB_SetTurnaroundTime+0x11c>)
 8011164:	4293      	cmp	r3, r2
 8011166:	d906      	bls.n	8011176 <USB_SetTurnaroundTime+0x2a>
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	4a40      	ldr	r2, [pc, #256]	@ (801126c <USB_SetTurnaroundTime+0x120>)
 801116c:	4293      	cmp	r3, r2
 801116e:	d202      	bcs.n	8011176 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011170:	230f      	movs	r3, #15
 8011172:	617b      	str	r3, [r7, #20]
 8011174:	e062      	b.n	801123c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	4a3c      	ldr	r2, [pc, #240]	@ (801126c <USB_SetTurnaroundTime+0x120>)
 801117a:	4293      	cmp	r3, r2
 801117c:	d306      	bcc.n	801118c <USB_SetTurnaroundTime+0x40>
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	4a3b      	ldr	r2, [pc, #236]	@ (8011270 <USB_SetTurnaroundTime+0x124>)
 8011182:	4293      	cmp	r3, r2
 8011184:	d202      	bcs.n	801118c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011186:	230e      	movs	r3, #14
 8011188:	617b      	str	r3, [r7, #20]
 801118a:	e057      	b.n	801123c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	4a38      	ldr	r2, [pc, #224]	@ (8011270 <USB_SetTurnaroundTime+0x124>)
 8011190:	4293      	cmp	r3, r2
 8011192:	d306      	bcc.n	80111a2 <USB_SetTurnaroundTime+0x56>
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	4a37      	ldr	r2, [pc, #220]	@ (8011274 <USB_SetTurnaroundTime+0x128>)
 8011198:	4293      	cmp	r3, r2
 801119a:	d202      	bcs.n	80111a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801119c:	230d      	movs	r3, #13
 801119e:	617b      	str	r3, [r7, #20]
 80111a0:	e04c      	b.n	801123c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80111a2:	68bb      	ldr	r3, [r7, #8]
 80111a4:	4a33      	ldr	r2, [pc, #204]	@ (8011274 <USB_SetTurnaroundTime+0x128>)
 80111a6:	4293      	cmp	r3, r2
 80111a8:	d306      	bcc.n	80111b8 <USB_SetTurnaroundTime+0x6c>
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	4a32      	ldr	r2, [pc, #200]	@ (8011278 <USB_SetTurnaroundTime+0x12c>)
 80111ae:	4293      	cmp	r3, r2
 80111b0:	d802      	bhi.n	80111b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80111b2:	230c      	movs	r3, #12
 80111b4:	617b      	str	r3, [r7, #20]
 80111b6:	e041      	b.n	801123c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	4a2f      	ldr	r2, [pc, #188]	@ (8011278 <USB_SetTurnaroundTime+0x12c>)
 80111bc:	4293      	cmp	r3, r2
 80111be:	d906      	bls.n	80111ce <USB_SetTurnaroundTime+0x82>
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	4a2e      	ldr	r2, [pc, #184]	@ (801127c <USB_SetTurnaroundTime+0x130>)
 80111c4:	4293      	cmp	r3, r2
 80111c6:	d802      	bhi.n	80111ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80111c8:	230b      	movs	r3, #11
 80111ca:	617b      	str	r3, [r7, #20]
 80111cc:	e036      	b.n	801123c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	4a2a      	ldr	r2, [pc, #168]	@ (801127c <USB_SetTurnaroundTime+0x130>)
 80111d2:	4293      	cmp	r3, r2
 80111d4:	d906      	bls.n	80111e4 <USB_SetTurnaroundTime+0x98>
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	4a29      	ldr	r2, [pc, #164]	@ (8011280 <USB_SetTurnaroundTime+0x134>)
 80111da:	4293      	cmp	r3, r2
 80111dc:	d802      	bhi.n	80111e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80111de:	230a      	movs	r3, #10
 80111e0:	617b      	str	r3, [r7, #20]
 80111e2:	e02b      	b.n	801123c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	4a26      	ldr	r2, [pc, #152]	@ (8011280 <USB_SetTurnaroundTime+0x134>)
 80111e8:	4293      	cmp	r3, r2
 80111ea:	d906      	bls.n	80111fa <USB_SetTurnaroundTime+0xae>
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	4a25      	ldr	r2, [pc, #148]	@ (8011284 <USB_SetTurnaroundTime+0x138>)
 80111f0:	4293      	cmp	r3, r2
 80111f2:	d202      	bcs.n	80111fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80111f4:	2309      	movs	r3, #9
 80111f6:	617b      	str	r3, [r7, #20]
 80111f8:	e020      	b.n	801123c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	4a21      	ldr	r2, [pc, #132]	@ (8011284 <USB_SetTurnaroundTime+0x138>)
 80111fe:	4293      	cmp	r3, r2
 8011200:	d306      	bcc.n	8011210 <USB_SetTurnaroundTime+0xc4>
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	4a20      	ldr	r2, [pc, #128]	@ (8011288 <USB_SetTurnaroundTime+0x13c>)
 8011206:	4293      	cmp	r3, r2
 8011208:	d802      	bhi.n	8011210 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801120a:	2308      	movs	r3, #8
 801120c:	617b      	str	r3, [r7, #20]
 801120e:	e015      	b.n	801123c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	4a1d      	ldr	r2, [pc, #116]	@ (8011288 <USB_SetTurnaroundTime+0x13c>)
 8011214:	4293      	cmp	r3, r2
 8011216:	d906      	bls.n	8011226 <USB_SetTurnaroundTime+0xda>
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	4a1c      	ldr	r2, [pc, #112]	@ (801128c <USB_SetTurnaroundTime+0x140>)
 801121c:	4293      	cmp	r3, r2
 801121e:	d202      	bcs.n	8011226 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011220:	2307      	movs	r3, #7
 8011222:	617b      	str	r3, [r7, #20]
 8011224:	e00a      	b.n	801123c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011226:	2306      	movs	r3, #6
 8011228:	617b      	str	r3, [r7, #20]
 801122a:	e007      	b.n	801123c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801122c:	79fb      	ldrb	r3, [r7, #7]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d102      	bne.n	8011238 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011232:	2309      	movs	r3, #9
 8011234:	617b      	str	r3, [r7, #20]
 8011236:	e001      	b.n	801123c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011238:	2309      	movs	r3, #9
 801123a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	68db      	ldr	r3, [r3, #12]
 8011240:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	68da      	ldr	r2, [r3, #12]
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	029b      	lsls	r3, r3, #10
 8011250:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8011254:	431a      	orrs	r2, r3
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801125a:	2300      	movs	r3, #0
}
 801125c:	4618      	mov	r0, r3
 801125e:	371c      	adds	r7, #28
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr
 8011268:	00d8acbf 	.word	0x00d8acbf
 801126c:	00e4e1c0 	.word	0x00e4e1c0
 8011270:	00f42400 	.word	0x00f42400
 8011274:	01067380 	.word	0x01067380
 8011278:	011a499f 	.word	0x011a499f
 801127c:	01312cff 	.word	0x01312cff
 8011280:	014ca43f 	.word	0x014ca43f
 8011284:	016e3600 	.word	0x016e3600
 8011288:	01a6ab1f 	.word	0x01a6ab1f
 801128c:	01e84800 	.word	0x01e84800

08011290 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011290:	b480      	push	{r7}
 8011292:	b083      	sub	sp, #12
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	689b      	ldr	r3, [r3, #8]
 801129c:	f043 0201 	orr.w	r2, r3, #1
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80112a4:	2300      	movs	r3, #0
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	370c      	adds	r7, #12
 80112aa:	46bd      	mov	sp, r7
 80112ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b0:	4770      	bx	lr

080112b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80112b2:	b480      	push	{r7}
 80112b4:	b083      	sub	sp, #12
 80112b6:	af00      	add	r7, sp, #0
 80112b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	689b      	ldr	r3, [r3, #8]
 80112be:	f023 0201 	bic.w	r2, r3, #1
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80112c6:	2300      	movs	r3, #0
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	370c      	adds	r7, #12
 80112cc:	46bd      	mov	sp, r7
 80112ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d2:	4770      	bx	lr

080112d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b084      	sub	sp, #16
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	460b      	mov	r3, r1
 80112de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80112e0:	2300      	movs	r3, #0
 80112e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	68db      	ldr	r3, [r3, #12]
 80112e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80112f0:	78fb      	ldrb	r3, [r7, #3]
 80112f2:	2b01      	cmp	r3, #1
 80112f4:	d115      	bne.n	8011322 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011302:	200a      	movs	r0, #10
 8011304:	f7f1 f85c 	bl	80023c0 <HAL_Delay>
      ms += 10U;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	330a      	adds	r3, #10
 801130c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f001 f93f 	bl	8012592 <USB_GetMode>
 8011314:	4603      	mov	r3, r0
 8011316:	2b01      	cmp	r3, #1
 8011318:	d01e      	beq.n	8011358 <USB_SetCurrentMode+0x84>
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	2bc7      	cmp	r3, #199	@ 0xc7
 801131e:	d9f0      	bls.n	8011302 <USB_SetCurrentMode+0x2e>
 8011320:	e01a      	b.n	8011358 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011322:	78fb      	ldrb	r3, [r7, #3]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d115      	bne.n	8011354 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	68db      	ldr	r3, [r3, #12]
 801132c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011334:	200a      	movs	r0, #10
 8011336:	f7f1 f843 	bl	80023c0 <HAL_Delay>
      ms += 10U;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	330a      	adds	r3, #10
 801133e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	f001 f926 	bl	8012592 <USB_GetMode>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	d005      	beq.n	8011358 <USB_SetCurrentMode+0x84>
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	2bc7      	cmp	r3, #199	@ 0xc7
 8011350:	d9f0      	bls.n	8011334 <USB_SetCurrentMode+0x60>
 8011352:	e001      	b.n	8011358 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011354:	2301      	movs	r3, #1
 8011356:	e005      	b.n	8011364 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	2bc8      	cmp	r3, #200	@ 0xc8
 801135c:	d101      	bne.n	8011362 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801135e:	2301      	movs	r3, #1
 8011360:	e000      	b.n	8011364 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011362:	2300      	movs	r3, #0
}
 8011364:	4618      	mov	r0, r3
 8011366:	3710      	adds	r7, #16
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801136c:	b084      	sub	sp, #16
 801136e:	b580      	push	{r7, lr}
 8011370:	b086      	sub	sp, #24
 8011372:	af00      	add	r7, sp, #0
 8011374:	6078      	str	r0, [r7, #4]
 8011376:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801137a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801137e:	2300      	movs	r3, #0
 8011380:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011386:	2300      	movs	r3, #0
 8011388:	613b      	str	r3, [r7, #16]
 801138a:	e009      	b.n	80113a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801138c:	687a      	ldr	r2, [r7, #4]
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	3340      	adds	r3, #64	@ 0x40
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	4413      	add	r3, r2
 8011396:	2200      	movs	r2, #0
 8011398:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	3301      	adds	r3, #1
 801139e:	613b      	str	r3, [r7, #16]
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	2b0e      	cmp	r3, #14
 80113a4:	d9f2      	bls.n	801138c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80113a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d11c      	bne.n	80113e8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	68fa      	ldr	r2, [r7, #12]
 80113b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80113bc:	f043 0302 	orr.w	r3, r3, #2
 80113c0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	601a      	str	r2, [r3, #0]
 80113e6:	e005      	b.n	80113f4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80113fa:	461a      	mov	r2, r3
 80113fc:	2300      	movs	r3, #0
 80113fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011400:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8011404:	2b01      	cmp	r3, #1
 8011406:	d10d      	bne.n	8011424 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801140c:	2b00      	cmp	r3, #0
 801140e:	d104      	bne.n	801141a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011410:	2100      	movs	r1, #0
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f000 f968 	bl	80116e8 <USB_SetDevSpeed>
 8011418:	e008      	b.n	801142c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801141a:	2101      	movs	r1, #1
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f000 f963 	bl	80116e8 <USB_SetDevSpeed>
 8011422:	e003      	b.n	801142c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011424:	2103      	movs	r1, #3
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f000 f95e 	bl	80116e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801142c:	2110      	movs	r1, #16
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f000 f8fa 	bl	8011628 <USB_FlushTxFifo>
 8011434:	4603      	mov	r3, r0
 8011436:	2b00      	cmp	r3, #0
 8011438:	d001      	beq.n	801143e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801143a:	2301      	movs	r3, #1
 801143c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f000 f924 	bl	801168c <USB_FlushRxFifo>
 8011444:	4603      	mov	r3, r0
 8011446:	2b00      	cmp	r3, #0
 8011448:	d001      	beq.n	801144e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801144a:	2301      	movs	r3, #1
 801144c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011454:	461a      	mov	r2, r3
 8011456:	2300      	movs	r3, #0
 8011458:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011460:	461a      	mov	r2, r3
 8011462:	2300      	movs	r3, #0
 8011464:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801146c:	461a      	mov	r2, r3
 801146e:	2300      	movs	r3, #0
 8011470:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011472:	2300      	movs	r3, #0
 8011474:	613b      	str	r3, [r7, #16]
 8011476:	e043      	b.n	8011500 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	015a      	lsls	r2, r3, #5
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	4413      	add	r3, r2
 8011480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801148a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801148e:	d118      	bne.n	80114c2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d10a      	bne.n	80114ac <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	015a      	lsls	r2, r3, #5
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	4413      	add	r3, r2
 801149e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114a2:	461a      	mov	r2, r3
 80114a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80114a8:	6013      	str	r3, [r2, #0]
 80114aa:	e013      	b.n	80114d4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	015a      	lsls	r2, r3, #5
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	4413      	add	r3, r2
 80114b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114b8:	461a      	mov	r2, r3
 80114ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80114be:	6013      	str	r3, [r2, #0]
 80114c0:	e008      	b.n	80114d4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	015a      	lsls	r2, r3, #5
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	4413      	add	r3, r2
 80114ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114ce:	461a      	mov	r2, r3
 80114d0:	2300      	movs	r3, #0
 80114d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	015a      	lsls	r2, r3, #5
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	4413      	add	r3, r2
 80114dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114e0:	461a      	mov	r2, r3
 80114e2:	2300      	movs	r3, #0
 80114e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80114e6:	693b      	ldr	r3, [r7, #16]
 80114e8:	015a      	lsls	r2, r3, #5
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	4413      	add	r3, r2
 80114ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114f2:	461a      	mov	r2, r3
 80114f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80114f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	3301      	adds	r3, #1
 80114fe:	613b      	str	r3, [r7, #16]
 8011500:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011504:	461a      	mov	r2, r3
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	4293      	cmp	r3, r2
 801150a:	d3b5      	bcc.n	8011478 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801150c:	2300      	movs	r3, #0
 801150e:	613b      	str	r3, [r7, #16]
 8011510:	e043      	b.n	801159a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	015a      	lsls	r2, r3, #5
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	4413      	add	r3, r2
 801151a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011524:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011528:	d118      	bne.n	801155c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d10a      	bne.n	8011546 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	015a      	lsls	r2, r3, #5
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	4413      	add	r3, r2
 8011538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801153c:	461a      	mov	r2, r3
 801153e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011542:	6013      	str	r3, [r2, #0]
 8011544:	e013      	b.n	801156e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011546:	693b      	ldr	r3, [r7, #16]
 8011548:	015a      	lsls	r2, r3, #5
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	4413      	add	r3, r2
 801154e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011552:	461a      	mov	r2, r3
 8011554:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011558:	6013      	str	r3, [r2, #0]
 801155a:	e008      	b.n	801156e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	015a      	lsls	r2, r3, #5
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	4413      	add	r3, r2
 8011564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011568:	461a      	mov	r2, r3
 801156a:	2300      	movs	r3, #0
 801156c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	015a      	lsls	r2, r3, #5
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	4413      	add	r3, r2
 8011576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801157a:	461a      	mov	r2, r3
 801157c:	2300      	movs	r3, #0
 801157e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	015a      	lsls	r2, r3, #5
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	4413      	add	r3, r2
 8011588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801158c:	461a      	mov	r2, r3
 801158e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011592:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011594:	693b      	ldr	r3, [r7, #16]
 8011596:	3301      	adds	r3, #1
 8011598:	613b      	str	r3, [r7, #16]
 801159a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801159e:	461a      	mov	r2, r3
 80115a0:	693b      	ldr	r3, [r7, #16]
 80115a2:	4293      	cmp	r3, r2
 80115a4:	d3b5      	bcc.n	8011512 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80115ac:	691b      	ldr	r3, [r3, #16]
 80115ae:	68fa      	ldr	r2, [r7, #12]
 80115b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80115b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80115b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2200      	movs	r2, #0
 80115be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80115c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80115c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d105      	bne.n	80115dc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	699b      	ldr	r3, [r3, #24]
 80115d4:	f043 0210 	orr.w	r2, r3, #16
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	699a      	ldr	r2, [r3, #24]
 80115e0:	4b0f      	ldr	r3, [pc, #60]	@ (8011620 <USB_DevInit+0x2b4>)
 80115e2:	4313      	orrs	r3, r2
 80115e4:	687a      	ldr	r2, [r7, #4]
 80115e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80115e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d005      	beq.n	80115fc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	699b      	ldr	r3, [r3, #24]
 80115f4:	f043 0208 	orr.w	r2, r3, #8
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80115fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011600:	2b01      	cmp	r3, #1
 8011602:	d105      	bne.n	8011610 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	699a      	ldr	r2, [r3, #24]
 8011608:	4b06      	ldr	r3, [pc, #24]	@ (8011624 <USB_DevInit+0x2b8>)
 801160a:	4313      	orrs	r3, r2
 801160c:	687a      	ldr	r2, [r7, #4]
 801160e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011610:	7dfb      	ldrb	r3, [r7, #23]
}
 8011612:	4618      	mov	r0, r3
 8011614:	3718      	adds	r7, #24
 8011616:	46bd      	mov	sp, r7
 8011618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801161c:	b004      	add	sp, #16
 801161e:	4770      	bx	lr
 8011620:	803c3800 	.word	0x803c3800
 8011624:	40000004 	.word	0x40000004

08011628 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011628:	b480      	push	{r7}
 801162a:	b085      	sub	sp, #20
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
 8011630:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011632:	2300      	movs	r3, #0
 8011634:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	3301      	adds	r3, #1
 801163a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011642:	d901      	bls.n	8011648 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011644:	2303      	movs	r3, #3
 8011646:	e01b      	b.n	8011680 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	691b      	ldr	r3, [r3, #16]
 801164c:	2b00      	cmp	r3, #0
 801164e:	daf2      	bge.n	8011636 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011650:	2300      	movs	r3, #0
 8011652:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	019b      	lsls	r3, r3, #6
 8011658:	f043 0220 	orr.w	r2, r3, #32
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	3301      	adds	r3, #1
 8011664:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801166c:	d901      	bls.n	8011672 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801166e:	2303      	movs	r3, #3
 8011670:	e006      	b.n	8011680 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	691b      	ldr	r3, [r3, #16]
 8011676:	f003 0320 	and.w	r3, r3, #32
 801167a:	2b20      	cmp	r3, #32
 801167c:	d0f0      	beq.n	8011660 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801167e:	2300      	movs	r3, #0
}
 8011680:	4618      	mov	r0, r3
 8011682:	3714      	adds	r7, #20
 8011684:	46bd      	mov	sp, r7
 8011686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168a:	4770      	bx	lr

0801168c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801168c:	b480      	push	{r7}
 801168e:	b085      	sub	sp, #20
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011694:	2300      	movs	r3, #0
 8011696:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	3301      	adds	r3, #1
 801169c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80116a4:	d901      	bls.n	80116aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80116a6:	2303      	movs	r3, #3
 80116a8:	e018      	b.n	80116dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	691b      	ldr	r3, [r3, #16]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	daf2      	bge.n	8011698 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80116b2:	2300      	movs	r3, #0
 80116b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2210      	movs	r2, #16
 80116ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	3301      	adds	r3, #1
 80116c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80116c8:	d901      	bls.n	80116ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80116ca:	2303      	movs	r3, #3
 80116cc:	e006      	b.n	80116dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	691b      	ldr	r3, [r3, #16]
 80116d2:	f003 0310 	and.w	r3, r3, #16
 80116d6:	2b10      	cmp	r3, #16
 80116d8:	d0f0      	beq.n	80116bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80116da:	2300      	movs	r3, #0
}
 80116dc:	4618      	mov	r0, r3
 80116de:	3714      	adds	r7, #20
 80116e0:	46bd      	mov	sp, r7
 80116e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e6:	4770      	bx	lr

080116e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80116e8:	b480      	push	{r7}
 80116ea:	b085      	sub	sp, #20
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	460b      	mov	r3, r1
 80116f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116fe:	681a      	ldr	r2, [r3, #0]
 8011700:	78fb      	ldrb	r3, [r7, #3]
 8011702:	68f9      	ldr	r1, [r7, #12]
 8011704:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011708:	4313      	orrs	r3, r2
 801170a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801170c:	2300      	movs	r3, #0
}
 801170e:	4618      	mov	r0, r3
 8011710:	3714      	adds	r7, #20
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr

0801171a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801171a:	b480      	push	{r7}
 801171c:	b087      	sub	sp, #28
 801171e:	af00      	add	r7, sp, #0
 8011720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801172c:	689b      	ldr	r3, [r3, #8]
 801172e:	f003 0306 	and.w	r3, r3, #6
 8011732:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d102      	bne.n	8011740 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801173a:	2300      	movs	r3, #0
 801173c:	75fb      	strb	r3, [r7, #23]
 801173e:	e00a      	b.n	8011756 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	2b02      	cmp	r3, #2
 8011744:	d002      	beq.n	801174c <USB_GetDevSpeed+0x32>
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2b06      	cmp	r3, #6
 801174a:	d102      	bne.n	8011752 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801174c:	2302      	movs	r3, #2
 801174e:	75fb      	strb	r3, [r7, #23]
 8011750:	e001      	b.n	8011756 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011752:	230f      	movs	r3, #15
 8011754:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011756:	7dfb      	ldrb	r3, [r7, #23]
}
 8011758:	4618      	mov	r0, r3
 801175a:	371c      	adds	r7, #28
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr

08011764 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011764:	b480      	push	{r7}
 8011766:	b085      	sub	sp, #20
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	785b      	ldrb	r3, [r3, #1]
 801177c:	2b01      	cmp	r3, #1
 801177e:	d139      	bne.n	80117f4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011786:	69da      	ldr	r2, [r3, #28]
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	f003 030f 	and.w	r3, r3, #15
 8011790:	2101      	movs	r1, #1
 8011792:	fa01 f303 	lsl.w	r3, r1, r3
 8011796:	b29b      	uxth	r3, r3
 8011798:	68f9      	ldr	r1, [r7, #12]
 801179a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801179e:	4313      	orrs	r3, r2
 80117a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	015a      	lsls	r2, r3, #5
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	4413      	add	r3, r2
 80117aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d153      	bne.n	8011860 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	015a      	lsls	r2, r3, #5
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	4413      	add	r3, r2
 80117c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117c4:	681a      	ldr	r2, [r3, #0]
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	689b      	ldr	r3, [r3, #8]
 80117ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	791b      	ldrb	r3, [r3, #4]
 80117d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80117d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	059b      	lsls	r3, r3, #22
 80117da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80117dc:	431a      	orrs	r2, r3
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	0159      	lsls	r1, r3, #5
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	440b      	add	r3, r1
 80117e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117ea:	4619      	mov	r1, r3
 80117ec:	4b20      	ldr	r3, [pc, #128]	@ (8011870 <USB_ActivateEndpoint+0x10c>)
 80117ee:	4313      	orrs	r3, r2
 80117f0:	600b      	str	r3, [r1, #0]
 80117f2:	e035      	b.n	8011860 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117fa:	69da      	ldr	r2, [r3, #28]
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	781b      	ldrb	r3, [r3, #0]
 8011800:	f003 030f 	and.w	r3, r3, #15
 8011804:	2101      	movs	r1, #1
 8011806:	fa01 f303 	lsl.w	r3, r1, r3
 801180a:	041b      	lsls	r3, r3, #16
 801180c:	68f9      	ldr	r1, [r7, #12]
 801180e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011812:	4313      	orrs	r3, r2
 8011814:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011816:	68bb      	ldr	r3, [r7, #8]
 8011818:	015a      	lsls	r2, r3, #5
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	4413      	add	r3, r2
 801181e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011828:	2b00      	cmp	r3, #0
 801182a:	d119      	bne.n	8011860 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	015a      	lsls	r2, r3, #5
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	4413      	add	r3, r2
 8011834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011838:	681a      	ldr	r2, [r3, #0]
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	689b      	ldr	r3, [r3, #8]
 801183e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	791b      	ldrb	r3, [r3, #4]
 8011846:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011848:	430b      	orrs	r3, r1
 801184a:	431a      	orrs	r2, r3
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	0159      	lsls	r1, r3, #5
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	440b      	add	r3, r1
 8011854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011858:	4619      	mov	r1, r3
 801185a:	4b05      	ldr	r3, [pc, #20]	@ (8011870 <USB_ActivateEndpoint+0x10c>)
 801185c:	4313      	orrs	r3, r2
 801185e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011860:	2300      	movs	r3, #0
}
 8011862:	4618      	mov	r0, r3
 8011864:	3714      	adds	r7, #20
 8011866:	46bd      	mov	sp, r7
 8011868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186c:	4770      	bx	lr
 801186e:	bf00      	nop
 8011870:	10008000 	.word	0x10008000

08011874 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011874:	b480      	push	{r7}
 8011876:	b085      	sub	sp, #20
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	781b      	ldrb	r3, [r3, #0]
 8011886:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	785b      	ldrb	r3, [r3, #1]
 801188c:	2b01      	cmp	r3, #1
 801188e:	d161      	bne.n	8011954 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	015a      	lsls	r2, r3, #5
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	4413      	add	r3, r2
 8011898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80118a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80118a6:	d11f      	bne.n	80118e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	015a      	lsls	r2, r3, #5
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	4413      	add	r3, r2
 80118b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	68ba      	ldr	r2, [r7, #8]
 80118b8:	0151      	lsls	r1, r2, #5
 80118ba:	68fa      	ldr	r2, [r7, #12]
 80118bc:	440a      	add	r2, r1
 80118be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80118c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80118c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	015a      	lsls	r2, r3, #5
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	4413      	add	r3, r2
 80118d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	68ba      	ldr	r2, [r7, #8]
 80118d8:	0151      	lsls	r1, r2, #5
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	440a      	add	r2, r1
 80118de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80118e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80118e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	f003 030f 	and.w	r3, r3, #15
 80118f8:	2101      	movs	r1, #1
 80118fa:	fa01 f303 	lsl.w	r3, r1, r3
 80118fe:	b29b      	uxth	r3, r3
 8011900:	43db      	mvns	r3, r3
 8011902:	68f9      	ldr	r1, [r7, #12]
 8011904:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011908:	4013      	ands	r3, r2
 801190a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011912:	69da      	ldr	r2, [r3, #28]
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	781b      	ldrb	r3, [r3, #0]
 8011918:	f003 030f 	and.w	r3, r3, #15
 801191c:	2101      	movs	r1, #1
 801191e:	fa01 f303 	lsl.w	r3, r1, r3
 8011922:	b29b      	uxth	r3, r3
 8011924:	43db      	mvns	r3, r3
 8011926:	68f9      	ldr	r1, [r7, #12]
 8011928:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801192c:	4013      	ands	r3, r2
 801192e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011930:	68bb      	ldr	r3, [r7, #8]
 8011932:	015a      	lsls	r2, r3, #5
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	4413      	add	r3, r2
 8011938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801193c:	681a      	ldr	r2, [r3, #0]
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	0159      	lsls	r1, r3, #5
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	440b      	add	r3, r1
 8011946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801194a:	4619      	mov	r1, r3
 801194c:	4b35      	ldr	r3, [pc, #212]	@ (8011a24 <USB_DeactivateEndpoint+0x1b0>)
 801194e:	4013      	ands	r3, r2
 8011950:	600b      	str	r3, [r1, #0]
 8011952:	e060      	b.n	8011a16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	015a      	lsls	r2, r3, #5
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	4413      	add	r3, r2
 801195c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011966:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801196a:	d11f      	bne.n	80119ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	015a      	lsls	r2, r3, #5
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	4413      	add	r3, r2
 8011974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	68ba      	ldr	r2, [r7, #8]
 801197c:	0151      	lsls	r1, r2, #5
 801197e:	68fa      	ldr	r2, [r7, #12]
 8011980:	440a      	add	r2, r1
 8011982:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011986:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801198a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	015a      	lsls	r2, r3, #5
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	4413      	add	r3, r2
 8011994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	68ba      	ldr	r2, [r7, #8]
 801199c:	0151      	lsls	r1, r2, #5
 801199e:	68fa      	ldr	r2, [r7, #12]
 80119a0:	440a      	add	r2, r1
 80119a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80119a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80119aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80119b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	f003 030f 	and.w	r3, r3, #15
 80119bc:	2101      	movs	r1, #1
 80119be:	fa01 f303 	lsl.w	r3, r1, r3
 80119c2:	041b      	lsls	r3, r3, #16
 80119c4:	43db      	mvns	r3, r3
 80119c6:	68f9      	ldr	r1, [r7, #12]
 80119c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80119cc:	4013      	ands	r3, r2
 80119ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80119d6:	69da      	ldr	r2, [r3, #28]
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	f003 030f 	and.w	r3, r3, #15
 80119e0:	2101      	movs	r1, #1
 80119e2:	fa01 f303 	lsl.w	r3, r1, r3
 80119e6:	041b      	lsls	r3, r3, #16
 80119e8:	43db      	mvns	r3, r3
 80119ea:	68f9      	ldr	r1, [r7, #12]
 80119ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80119f0:	4013      	ands	r3, r2
 80119f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80119f4:	68bb      	ldr	r3, [r7, #8]
 80119f6:	015a      	lsls	r2, r3, #5
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	4413      	add	r3, r2
 80119fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a00:	681a      	ldr	r2, [r3, #0]
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	0159      	lsls	r1, r3, #5
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	440b      	add	r3, r1
 8011a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a0e:	4619      	mov	r1, r3
 8011a10:	4b05      	ldr	r3, [pc, #20]	@ (8011a28 <USB_DeactivateEndpoint+0x1b4>)
 8011a12:	4013      	ands	r3, r2
 8011a14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011a16:	2300      	movs	r3, #0
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3714      	adds	r7, #20
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a22:	4770      	bx	lr
 8011a24:	ec337800 	.word	0xec337800
 8011a28:	eff37800 	.word	0xeff37800

08011a2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b08a      	sub	sp, #40	@ 0x28
 8011a30:	af02      	add	r7, sp, #8
 8011a32:	60f8      	str	r0, [r7, #12]
 8011a34:	60b9      	str	r1, [r7, #8]
 8011a36:	4613      	mov	r3, r2
 8011a38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	781b      	ldrb	r3, [r3, #0]
 8011a42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	785b      	ldrb	r3, [r3, #1]
 8011a48:	2b01      	cmp	r3, #1
 8011a4a:	f040 8185 	bne.w	8011d58 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	691b      	ldr	r3, [r3, #16]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d132      	bne.n	8011abc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011a56:	69bb      	ldr	r3, [r7, #24]
 8011a58:	015a      	lsls	r2, r3, #5
 8011a5a:	69fb      	ldr	r3, [r7, #28]
 8011a5c:	4413      	add	r3, r2
 8011a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a62:	691a      	ldr	r2, [r3, #16]
 8011a64:	69bb      	ldr	r3, [r7, #24]
 8011a66:	0159      	lsls	r1, r3, #5
 8011a68:	69fb      	ldr	r3, [r7, #28]
 8011a6a:	440b      	add	r3, r1
 8011a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a70:	4619      	mov	r1, r3
 8011a72:	4ba7      	ldr	r3, [pc, #668]	@ (8011d10 <USB_EPStartXfer+0x2e4>)
 8011a74:	4013      	ands	r3, r2
 8011a76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011a78:	69bb      	ldr	r3, [r7, #24]
 8011a7a:	015a      	lsls	r2, r3, #5
 8011a7c:	69fb      	ldr	r3, [r7, #28]
 8011a7e:	4413      	add	r3, r2
 8011a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a84:	691b      	ldr	r3, [r3, #16]
 8011a86:	69ba      	ldr	r2, [r7, #24]
 8011a88:	0151      	lsls	r1, r2, #5
 8011a8a:	69fa      	ldr	r2, [r7, #28]
 8011a8c:	440a      	add	r2, r1
 8011a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011a92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011a96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011a98:	69bb      	ldr	r3, [r7, #24]
 8011a9a:	015a      	lsls	r2, r3, #5
 8011a9c:	69fb      	ldr	r3, [r7, #28]
 8011a9e:	4413      	add	r3, r2
 8011aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011aa4:	691a      	ldr	r2, [r3, #16]
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	0159      	lsls	r1, r3, #5
 8011aaa:	69fb      	ldr	r3, [r7, #28]
 8011aac:	440b      	add	r3, r1
 8011aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ab2:	4619      	mov	r1, r3
 8011ab4:	4b97      	ldr	r3, [pc, #604]	@ (8011d14 <USB_EPStartXfer+0x2e8>)
 8011ab6:	4013      	ands	r3, r2
 8011ab8:	610b      	str	r3, [r1, #16]
 8011aba:	e097      	b.n	8011bec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011abc:	69bb      	ldr	r3, [r7, #24]
 8011abe:	015a      	lsls	r2, r3, #5
 8011ac0:	69fb      	ldr	r3, [r7, #28]
 8011ac2:	4413      	add	r3, r2
 8011ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ac8:	691a      	ldr	r2, [r3, #16]
 8011aca:	69bb      	ldr	r3, [r7, #24]
 8011acc:	0159      	lsls	r1, r3, #5
 8011ace:	69fb      	ldr	r3, [r7, #28]
 8011ad0:	440b      	add	r3, r1
 8011ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ad6:	4619      	mov	r1, r3
 8011ad8:	4b8e      	ldr	r3, [pc, #568]	@ (8011d14 <USB_EPStartXfer+0x2e8>)
 8011ada:	4013      	ands	r3, r2
 8011adc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011ade:	69bb      	ldr	r3, [r7, #24]
 8011ae0:	015a      	lsls	r2, r3, #5
 8011ae2:	69fb      	ldr	r3, [r7, #28]
 8011ae4:	4413      	add	r3, r2
 8011ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011aea:	691a      	ldr	r2, [r3, #16]
 8011aec:	69bb      	ldr	r3, [r7, #24]
 8011aee:	0159      	lsls	r1, r3, #5
 8011af0:	69fb      	ldr	r3, [r7, #28]
 8011af2:	440b      	add	r3, r1
 8011af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011af8:	4619      	mov	r1, r3
 8011afa:	4b85      	ldr	r3, [pc, #532]	@ (8011d10 <USB_EPStartXfer+0x2e4>)
 8011afc:	4013      	ands	r3, r2
 8011afe:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d11a      	bne.n	8011b3c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	691a      	ldr	r2, [r3, #16]
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	689b      	ldr	r3, [r3, #8]
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d903      	bls.n	8011b1a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	689a      	ldr	r2, [r3, #8]
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011b1a:	69bb      	ldr	r3, [r7, #24]
 8011b1c:	015a      	lsls	r2, r3, #5
 8011b1e:	69fb      	ldr	r3, [r7, #28]
 8011b20:	4413      	add	r3, r2
 8011b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b26:	691b      	ldr	r3, [r3, #16]
 8011b28:	69ba      	ldr	r2, [r7, #24]
 8011b2a:	0151      	lsls	r1, r2, #5
 8011b2c:	69fa      	ldr	r2, [r7, #28]
 8011b2e:	440a      	add	r2, r1
 8011b30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011b34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011b38:	6113      	str	r3, [r2, #16]
 8011b3a:	e044      	b.n	8011bc6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	691a      	ldr	r2, [r3, #16]
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	689b      	ldr	r3, [r3, #8]
 8011b44:	4413      	add	r3, r2
 8011b46:	1e5a      	subs	r2, r3, #1
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	689b      	ldr	r3, [r3, #8]
 8011b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b50:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8011b52:	69bb      	ldr	r3, [r7, #24]
 8011b54:	015a      	lsls	r2, r3, #5
 8011b56:	69fb      	ldr	r3, [r7, #28]
 8011b58:	4413      	add	r3, r2
 8011b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b5e:	691a      	ldr	r2, [r3, #16]
 8011b60:	8afb      	ldrh	r3, [r7, #22]
 8011b62:	04d9      	lsls	r1, r3, #19
 8011b64:	4b6c      	ldr	r3, [pc, #432]	@ (8011d18 <USB_EPStartXfer+0x2ec>)
 8011b66:	400b      	ands	r3, r1
 8011b68:	69b9      	ldr	r1, [r7, #24]
 8011b6a:	0148      	lsls	r0, r1, #5
 8011b6c:	69f9      	ldr	r1, [r7, #28]
 8011b6e:	4401      	add	r1, r0
 8011b70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011b74:	4313      	orrs	r3, r2
 8011b76:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	791b      	ldrb	r3, [r3, #4]
 8011b7c:	2b01      	cmp	r3, #1
 8011b7e:	d122      	bne.n	8011bc6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011b80:	69bb      	ldr	r3, [r7, #24]
 8011b82:	015a      	lsls	r2, r3, #5
 8011b84:	69fb      	ldr	r3, [r7, #28]
 8011b86:	4413      	add	r3, r2
 8011b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b8c:	691b      	ldr	r3, [r3, #16]
 8011b8e:	69ba      	ldr	r2, [r7, #24]
 8011b90:	0151      	lsls	r1, r2, #5
 8011b92:	69fa      	ldr	r2, [r7, #28]
 8011b94:	440a      	add	r2, r1
 8011b96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011b9a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8011b9e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8011ba0:	69bb      	ldr	r3, [r7, #24]
 8011ba2:	015a      	lsls	r2, r3, #5
 8011ba4:	69fb      	ldr	r3, [r7, #28]
 8011ba6:	4413      	add	r3, r2
 8011ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011bac:	691a      	ldr	r2, [r3, #16]
 8011bae:	8afb      	ldrh	r3, [r7, #22]
 8011bb0:	075b      	lsls	r3, r3, #29
 8011bb2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8011bb6:	69b9      	ldr	r1, [r7, #24]
 8011bb8:	0148      	lsls	r0, r1, #5
 8011bba:	69f9      	ldr	r1, [r7, #28]
 8011bbc:	4401      	add	r1, r0
 8011bbe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011bc2:	4313      	orrs	r3, r2
 8011bc4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011bc6:	69bb      	ldr	r3, [r7, #24]
 8011bc8:	015a      	lsls	r2, r3, #5
 8011bca:	69fb      	ldr	r3, [r7, #28]
 8011bcc:	4413      	add	r3, r2
 8011bce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011bd2:	691a      	ldr	r2, [r3, #16]
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	691b      	ldr	r3, [r3, #16]
 8011bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011bdc:	69b9      	ldr	r1, [r7, #24]
 8011bde:	0148      	lsls	r0, r1, #5
 8011be0:	69f9      	ldr	r1, [r7, #28]
 8011be2:	4401      	add	r1, r0
 8011be4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011be8:	4313      	orrs	r3, r2
 8011bea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011bec:	79fb      	ldrb	r3, [r7, #7]
 8011bee:	2b01      	cmp	r3, #1
 8011bf0:	d14b      	bne.n	8011c8a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	69db      	ldr	r3, [r3, #28]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d009      	beq.n	8011c0e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011bfa:	69bb      	ldr	r3, [r7, #24]
 8011bfc:	015a      	lsls	r2, r3, #5
 8011bfe:	69fb      	ldr	r3, [r7, #28]
 8011c00:	4413      	add	r3, r2
 8011c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c06:	461a      	mov	r2, r3
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	69db      	ldr	r3, [r3, #28]
 8011c0c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	791b      	ldrb	r3, [r3, #4]
 8011c12:	2b01      	cmp	r3, #1
 8011c14:	d128      	bne.n	8011c68 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011c16:	69fb      	ldr	r3, [r7, #28]
 8011c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c1c:	689b      	ldr	r3, [r3, #8]
 8011c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d110      	bne.n	8011c48 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011c26:	69bb      	ldr	r3, [r7, #24]
 8011c28:	015a      	lsls	r2, r3, #5
 8011c2a:	69fb      	ldr	r3, [r7, #28]
 8011c2c:	4413      	add	r3, r2
 8011c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	69ba      	ldr	r2, [r7, #24]
 8011c36:	0151      	lsls	r1, r2, #5
 8011c38:	69fa      	ldr	r2, [r7, #28]
 8011c3a:	440a      	add	r2, r1
 8011c3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011c40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011c44:	6013      	str	r3, [r2, #0]
 8011c46:	e00f      	b.n	8011c68 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011c48:	69bb      	ldr	r3, [r7, #24]
 8011c4a:	015a      	lsls	r2, r3, #5
 8011c4c:	69fb      	ldr	r3, [r7, #28]
 8011c4e:	4413      	add	r3, r2
 8011c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	69ba      	ldr	r2, [r7, #24]
 8011c58:	0151      	lsls	r1, r2, #5
 8011c5a:	69fa      	ldr	r2, [r7, #28]
 8011c5c:	440a      	add	r2, r1
 8011c5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011c62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011c66:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011c68:	69bb      	ldr	r3, [r7, #24]
 8011c6a:	015a      	lsls	r2, r3, #5
 8011c6c:	69fb      	ldr	r3, [r7, #28]
 8011c6e:	4413      	add	r3, r2
 8011c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	69ba      	ldr	r2, [r7, #24]
 8011c78:	0151      	lsls	r1, r2, #5
 8011c7a:	69fa      	ldr	r2, [r7, #28]
 8011c7c:	440a      	add	r2, r1
 8011c7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011c82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011c86:	6013      	str	r3, [r2, #0]
 8011c88:	e169      	b.n	8011f5e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011c8a:	69bb      	ldr	r3, [r7, #24]
 8011c8c:	015a      	lsls	r2, r3, #5
 8011c8e:	69fb      	ldr	r3, [r7, #28]
 8011c90:	4413      	add	r3, r2
 8011c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	69ba      	ldr	r2, [r7, #24]
 8011c9a:	0151      	lsls	r1, r2, #5
 8011c9c:	69fa      	ldr	r2, [r7, #28]
 8011c9e:	440a      	add	r2, r1
 8011ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011ca4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011ca8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	791b      	ldrb	r3, [r3, #4]
 8011cae:	2b01      	cmp	r3, #1
 8011cb0:	d015      	beq.n	8011cde <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	691b      	ldr	r3, [r3, #16]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	f000 8151 	beq.w	8011f5e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011cbc:	69fb      	ldr	r3, [r7, #28]
 8011cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011cc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	781b      	ldrb	r3, [r3, #0]
 8011cc8:	f003 030f 	and.w	r3, r3, #15
 8011ccc:	2101      	movs	r1, #1
 8011cce:	fa01 f303 	lsl.w	r3, r1, r3
 8011cd2:	69f9      	ldr	r1, [r7, #28]
 8011cd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011cd8:	4313      	orrs	r3, r2
 8011cda:	634b      	str	r3, [r1, #52]	@ 0x34
 8011cdc:	e13f      	b.n	8011f5e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ce4:	689b      	ldr	r3, [r3, #8]
 8011ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d116      	bne.n	8011d1c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011cee:	69bb      	ldr	r3, [r7, #24]
 8011cf0:	015a      	lsls	r2, r3, #5
 8011cf2:	69fb      	ldr	r3, [r7, #28]
 8011cf4:	4413      	add	r3, r2
 8011cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	69ba      	ldr	r2, [r7, #24]
 8011cfe:	0151      	lsls	r1, r2, #5
 8011d00:	69fa      	ldr	r2, [r7, #28]
 8011d02:	440a      	add	r2, r1
 8011d04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011d08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011d0c:	6013      	str	r3, [r2, #0]
 8011d0e:	e015      	b.n	8011d3c <USB_EPStartXfer+0x310>
 8011d10:	e007ffff 	.word	0xe007ffff
 8011d14:	fff80000 	.word	0xfff80000
 8011d18:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011d1c:	69bb      	ldr	r3, [r7, #24]
 8011d1e:	015a      	lsls	r2, r3, #5
 8011d20:	69fb      	ldr	r3, [r7, #28]
 8011d22:	4413      	add	r3, r2
 8011d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	69ba      	ldr	r2, [r7, #24]
 8011d2c:	0151      	lsls	r1, r2, #5
 8011d2e:	69fa      	ldr	r2, [r7, #28]
 8011d30:	440a      	add	r2, r1
 8011d32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011d3a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	68d9      	ldr	r1, [r3, #12]
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	781a      	ldrb	r2, [r3, #0]
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	691b      	ldr	r3, [r3, #16]
 8011d48:	b298      	uxth	r0, r3
 8011d4a:	79fb      	ldrb	r3, [r7, #7]
 8011d4c:	9300      	str	r3, [sp, #0]
 8011d4e:	4603      	mov	r3, r0
 8011d50:	68f8      	ldr	r0, [r7, #12]
 8011d52:	f000 f9b9 	bl	80120c8 <USB_WritePacket>
 8011d56:	e102      	b.n	8011f5e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011d58:	69bb      	ldr	r3, [r7, #24]
 8011d5a:	015a      	lsls	r2, r3, #5
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	4413      	add	r3, r2
 8011d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d64:	691a      	ldr	r2, [r3, #16]
 8011d66:	69bb      	ldr	r3, [r7, #24]
 8011d68:	0159      	lsls	r1, r3, #5
 8011d6a:	69fb      	ldr	r3, [r7, #28]
 8011d6c:	440b      	add	r3, r1
 8011d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d72:	4619      	mov	r1, r3
 8011d74:	4b7c      	ldr	r3, [pc, #496]	@ (8011f68 <USB_EPStartXfer+0x53c>)
 8011d76:	4013      	ands	r3, r2
 8011d78:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011d7a:	69bb      	ldr	r3, [r7, #24]
 8011d7c:	015a      	lsls	r2, r3, #5
 8011d7e:	69fb      	ldr	r3, [r7, #28]
 8011d80:	4413      	add	r3, r2
 8011d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d86:	691a      	ldr	r2, [r3, #16]
 8011d88:	69bb      	ldr	r3, [r7, #24]
 8011d8a:	0159      	lsls	r1, r3, #5
 8011d8c:	69fb      	ldr	r3, [r7, #28]
 8011d8e:	440b      	add	r3, r1
 8011d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d94:	4619      	mov	r1, r3
 8011d96:	4b75      	ldr	r3, [pc, #468]	@ (8011f6c <USB_EPStartXfer+0x540>)
 8011d98:	4013      	ands	r3, r2
 8011d9a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8011d9c:	69bb      	ldr	r3, [r7, #24]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d12f      	bne.n	8011e02 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	691b      	ldr	r3, [r3, #16]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d003      	beq.n	8011db2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	689a      	ldr	r2, [r3, #8]
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	689a      	ldr	r2, [r3, #8]
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8011dba:	69bb      	ldr	r3, [r7, #24]
 8011dbc:	015a      	lsls	r2, r3, #5
 8011dbe:	69fb      	ldr	r3, [r7, #28]
 8011dc0:	4413      	add	r3, r2
 8011dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011dc6:	691a      	ldr	r2, [r3, #16]
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	6a1b      	ldr	r3, [r3, #32]
 8011dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011dd0:	69b9      	ldr	r1, [r7, #24]
 8011dd2:	0148      	lsls	r0, r1, #5
 8011dd4:	69f9      	ldr	r1, [r7, #28]
 8011dd6:	4401      	add	r1, r0
 8011dd8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011ddc:	4313      	orrs	r3, r2
 8011dde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011de0:	69bb      	ldr	r3, [r7, #24]
 8011de2:	015a      	lsls	r2, r3, #5
 8011de4:	69fb      	ldr	r3, [r7, #28]
 8011de6:	4413      	add	r3, r2
 8011de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011dec:	691b      	ldr	r3, [r3, #16]
 8011dee:	69ba      	ldr	r2, [r7, #24]
 8011df0:	0151      	lsls	r1, r2, #5
 8011df2:	69fa      	ldr	r2, [r7, #28]
 8011df4:	440a      	add	r2, r1
 8011df6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011dfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011dfe:	6113      	str	r3, [r2, #16]
 8011e00:	e05f      	b.n	8011ec2 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	691b      	ldr	r3, [r3, #16]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d123      	bne.n	8011e52 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011e0a:	69bb      	ldr	r3, [r7, #24]
 8011e0c:	015a      	lsls	r2, r3, #5
 8011e0e:	69fb      	ldr	r3, [r7, #28]
 8011e10:	4413      	add	r3, r2
 8011e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e16:	691a      	ldr	r2, [r3, #16]
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	689b      	ldr	r3, [r3, #8]
 8011e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011e20:	69b9      	ldr	r1, [r7, #24]
 8011e22:	0148      	lsls	r0, r1, #5
 8011e24:	69f9      	ldr	r1, [r7, #28]
 8011e26:	4401      	add	r1, r0
 8011e28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011e2c:	4313      	orrs	r3, r2
 8011e2e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011e30:	69bb      	ldr	r3, [r7, #24]
 8011e32:	015a      	lsls	r2, r3, #5
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	4413      	add	r3, r2
 8011e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e3c:	691b      	ldr	r3, [r3, #16]
 8011e3e:	69ba      	ldr	r2, [r7, #24]
 8011e40:	0151      	lsls	r1, r2, #5
 8011e42:	69fa      	ldr	r2, [r7, #28]
 8011e44:	440a      	add	r2, r1
 8011e46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011e4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011e4e:	6113      	str	r3, [r2, #16]
 8011e50:	e037      	b.n	8011ec2 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	691a      	ldr	r2, [r3, #16]
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	689b      	ldr	r3, [r3, #8]
 8011e5a:	4413      	add	r3, r2
 8011e5c:	1e5a      	subs	r2, r3, #1
 8011e5e:	68bb      	ldr	r3, [r7, #8]
 8011e60:	689b      	ldr	r3, [r3, #8]
 8011e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e66:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	689b      	ldr	r3, [r3, #8]
 8011e6c:	8afa      	ldrh	r2, [r7, #22]
 8011e6e:	fb03 f202 	mul.w	r2, r3, r2
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011e76:	69bb      	ldr	r3, [r7, #24]
 8011e78:	015a      	lsls	r2, r3, #5
 8011e7a:	69fb      	ldr	r3, [r7, #28]
 8011e7c:	4413      	add	r3, r2
 8011e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e82:	691a      	ldr	r2, [r3, #16]
 8011e84:	8afb      	ldrh	r3, [r7, #22]
 8011e86:	04d9      	lsls	r1, r3, #19
 8011e88:	4b39      	ldr	r3, [pc, #228]	@ (8011f70 <USB_EPStartXfer+0x544>)
 8011e8a:	400b      	ands	r3, r1
 8011e8c:	69b9      	ldr	r1, [r7, #24]
 8011e8e:	0148      	lsls	r0, r1, #5
 8011e90:	69f9      	ldr	r1, [r7, #28]
 8011e92:	4401      	add	r1, r0
 8011e94:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011e98:	4313      	orrs	r3, r2
 8011e9a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8011e9c:	69bb      	ldr	r3, [r7, #24]
 8011e9e:	015a      	lsls	r2, r3, #5
 8011ea0:	69fb      	ldr	r3, [r7, #28]
 8011ea2:	4413      	add	r3, r2
 8011ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ea8:	691a      	ldr	r2, [r3, #16]
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	6a1b      	ldr	r3, [r3, #32]
 8011eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011eb2:	69b9      	ldr	r1, [r7, #24]
 8011eb4:	0148      	lsls	r0, r1, #5
 8011eb6:	69f9      	ldr	r1, [r7, #28]
 8011eb8:	4401      	add	r1, r0
 8011eba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011ebe:	4313      	orrs	r3, r2
 8011ec0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8011ec2:	79fb      	ldrb	r3, [r7, #7]
 8011ec4:	2b01      	cmp	r3, #1
 8011ec6:	d10d      	bne.n	8011ee4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	68db      	ldr	r3, [r3, #12]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d009      	beq.n	8011ee4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	68d9      	ldr	r1, [r3, #12]
 8011ed4:	69bb      	ldr	r3, [r7, #24]
 8011ed6:	015a      	lsls	r2, r3, #5
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	4413      	add	r3, r2
 8011edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ee0:	460a      	mov	r2, r1
 8011ee2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	791b      	ldrb	r3, [r3, #4]
 8011ee8:	2b01      	cmp	r3, #1
 8011eea:	d128      	bne.n	8011f3e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011eec:	69fb      	ldr	r3, [r7, #28]
 8011eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ef2:	689b      	ldr	r3, [r3, #8]
 8011ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d110      	bne.n	8011f1e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011efc:	69bb      	ldr	r3, [r7, #24]
 8011efe:	015a      	lsls	r2, r3, #5
 8011f00:	69fb      	ldr	r3, [r7, #28]
 8011f02:	4413      	add	r3, r2
 8011f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	69ba      	ldr	r2, [r7, #24]
 8011f0c:	0151      	lsls	r1, r2, #5
 8011f0e:	69fa      	ldr	r2, [r7, #28]
 8011f10:	440a      	add	r2, r1
 8011f12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011f16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011f1a:	6013      	str	r3, [r2, #0]
 8011f1c:	e00f      	b.n	8011f3e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011f1e:	69bb      	ldr	r3, [r7, #24]
 8011f20:	015a      	lsls	r2, r3, #5
 8011f22:	69fb      	ldr	r3, [r7, #28]
 8011f24:	4413      	add	r3, r2
 8011f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	69ba      	ldr	r2, [r7, #24]
 8011f2e:	0151      	lsls	r1, r2, #5
 8011f30:	69fa      	ldr	r2, [r7, #28]
 8011f32:	440a      	add	r2, r1
 8011f34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011f3c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011f3e:	69bb      	ldr	r3, [r7, #24]
 8011f40:	015a      	lsls	r2, r3, #5
 8011f42:	69fb      	ldr	r3, [r7, #28]
 8011f44:	4413      	add	r3, r2
 8011f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	69ba      	ldr	r2, [r7, #24]
 8011f4e:	0151      	lsls	r1, r2, #5
 8011f50:	69fa      	ldr	r2, [r7, #28]
 8011f52:	440a      	add	r2, r1
 8011f54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011f58:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011f5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011f5e:	2300      	movs	r3, #0
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3720      	adds	r7, #32
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}
 8011f68:	fff80000 	.word	0xfff80000
 8011f6c:	e007ffff 	.word	0xe007ffff
 8011f70:	1ff80000 	.word	0x1ff80000

08011f74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011f74:	b480      	push	{r7}
 8011f76:	b087      	sub	sp, #28
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
 8011f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011f82:	2300      	movs	r3, #0
 8011f84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	785b      	ldrb	r3, [r3, #1]
 8011f8e:	2b01      	cmp	r3, #1
 8011f90:	d14a      	bne.n	8012028 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	781b      	ldrb	r3, [r3, #0]
 8011f96:	015a      	lsls	r2, r3, #5
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	4413      	add	r3, r2
 8011f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011faa:	f040 8086 	bne.w	80120ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	015a      	lsls	r2, r3, #5
 8011fb4:	693b      	ldr	r3, [r7, #16]
 8011fb6:	4413      	add	r3, r2
 8011fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	683a      	ldr	r2, [r7, #0]
 8011fc0:	7812      	ldrb	r2, [r2, #0]
 8011fc2:	0151      	lsls	r1, r2, #5
 8011fc4:	693a      	ldr	r2, [r7, #16]
 8011fc6:	440a      	add	r2, r1
 8011fc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011fcc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011fd0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	015a      	lsls	r2, r3, #5
 8011fd8:	693b      	ldr	r3, [r7, #16]
 8011fda:	4413      	add	r3, r2
 8011fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	683a      	ldr	r2, [r7, #0]
 8011fe4:	7812      	ldrb	r2, [r2, #0]
 8011fe6:	0151      	lsls	r1, r2, #5
 8011fe8:	693a      	ldr	r2, [r7, #16]
 8011fea:	440a      	add	r2, r1
 8011fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011ff0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011ff4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012002:	4293      	cmp	r3, r2
 8012004:	d902      	bls.n	801200c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012006:	2301      	movs	r3, #1
 8012008:	75fb      	strb	r3, [r7, #23]
          break;
 801200a:	e056      	b.n	80120ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	015a      	lsls	r2, r3, #5
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	4413      	add	r3, r2
 8012016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012020:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012024:	d0e7      	beq.n	8011ff6 <USB_EPStopXfer+0x82>
 8012026:	e048      	b.n	80120ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	781b      	ldrb	r3, [r3, #0]
 801202c:	015a      	lsls	r2, r3, #5
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	4413      	add	r3, r2
 8012032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801203c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012040:	d13b      	bne.n	80120ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	781b      	ldrb	r3, [r3, #0]
 8012046:	015a      	lsls	r2, r3, #5
 8012048:	693b      	ldr	r3, [r7, #16]
 801204a:	4413      	add	r3, r2
 801204c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	683a      	ldr	r2, [r7, #0]
 8012054:	7812      	ldrb	r2, [r2, #0]
 8012056:	0151      	lsls	r1, r2, #5
 8012058:	693a      	ldr	r2, [r7, #16]
 801205a:	440a      	add	r2, r1
 801205c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012060:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012064:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	015a      	lsls	r2, r3, #5
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	4413      	add	r3, r2
 8012070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	683a      	ldr	r2, [r7, #0]
 8012078:	7812      	ldrb	r2, [r2, #0]
 801207a:	0151      	lsls	r1, r2, #5
 801207c:	693a      	ldr	r2, [r7, #16]
 801207e:	440a      	add	r2, r1
 8012080:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012084:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012088:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	3301      	adds	r3, #1
 801208e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012096:	4293      	cmp	r3, r2
 8012098:	d902      	bls.n	80120a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801209a:	2301      	movs	r3, #1
 801209c:	75fb      	strb	r3, [r7, #23]
          break;
 801209e:	e00c      	b.n	80120ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	015a      	lsls	r2, r3, #5
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	4413      	add	r3, r2
 80120aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80120b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80120b8:	d0e7      	beq.n	801208a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80120ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80120bc:	4618      	mov	r0, r3
 80120be:	371c      	adds	r7, #28
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr

080120c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80120c8:	b480      	push	{r7}
 80120ca:	b089      	sub	sp, #36	@ 0x24
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	60f8      	str	r0, [r7, #12]
 80120d0:	60b9      	str	r1, [r7, #8]
 80120d2:	4611      	mov	r1, r2
 80120d4:	461a      	mov	r2, r3
 80120d6:	460b      	mov	r3, r1
 80120d8:	71fb      	strb	r3, [r7, #7]
 80120da:	4613      	mov	r3, r2
 80120dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80120e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d123      	bne.n	8012136 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80120ee:	88bb      	ldrh	r3, [r7, #4]
 80120f0:	3303      	adds	r3, #3
 80120f2:	089b      	lsrs	r3, r3, #2
 80120f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80120f6:	2300      	movs	r3, #0
 80120f8:	61bb      	str	r3, [r7, #24]
 80120fa:	e018      	b.n	801212e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80120fc:	79fb      	ldrb	r3, [r7, #7]
 80120fe:	031a      	lsls	r2, r3, #12
 8012100:	697b      	ldr	r3, [r7, #20]
 8012102:	4413      	add	r3, r2
 8012104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012108:	461a      	mov	r2, r3
 801210a:	69fb      	ldr	r3, [r7, #28]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012110:	69fb      	ldr	r3, [r7, #28]
 8012112:	3301      	adds	r3, #1
 8012114:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012116:	69fb      	ldr	r3, [r7, #28]
 8012118:	3301      	adds	r3, #1
 801211a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801211c:	69fb      	ldr	r3, [r7, #28]
 801211e:	3301      	adds	r3, #1
 8012120:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	3301      	adds	r3, #1
 8012126:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012128:	69bb      	ldr	r3, [r7, #24]
 801212a:	3301      	adds	r3, #1
 801212c:	61bb      	str	r3, [r7, #24]
 801212e:	69ba      	ldr	r2, [r7, #24]
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	429a      	cmp	r2, r3
 8012134:	d3e2      	bcc.n	80120fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012136:	2300      	movs	r3, #0
}
 8012138:	4618      	mov	r0, r3
 801213a:	3724      	adds	r7, #36	@ 0x24
 801213c:	46bd      	mov	sp, r7
 801213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012142:	4770      	bx	lr

08012144 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012144:	b480      	push	{r7}
 8012146:	b08b      	sub	sp, #44	@ 0x2c
 8012148:	af00      	add	r7, sp, #0
 801214a:	60f8      	str	r0, [r7, #12]
 801214c:	60b9      	str	r1, [r7, #8]
 801214e:	4613      	mov	r3, r2
 8012150:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801215a:	88fb      	ldrh	r3, [r7, #6]
 801215c:	089b      	lsrs	r3, r3, #2
 801215e:	b29b      	uxth	r3, r3
 8012160:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012162:	88fb      	ldrh	r3, [r7, #6]
 8012164:	f003 0303 	and.w	r3, r3, #3
 8012168:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801216a:	2300      	movs	r3, #0
 801216c:	623b      	str	r3, [r7, #32]
 801216e:	e014      	b.n	801219a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012170:	69bb      	ldr	r3, [r7, #24]
 8012172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012176:	681a      	ldr	r2, [r3, #0]
 8012178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801217a:	601a      	str	r2, [r3, #0]
    pDest++;
 801217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801217e:	3301      	adds	r3, #1
 8012180:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012184:	3301      	adds	r3, #1
 8012186:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801218a:	3301      	adds	r3, #1
 801218c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012190:	3301      	adds	r3, #1
 8012192:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8012194:	6a3b      	ldr	r3, [r7, #32]
 8012196:	3301      	adds	r3, #1
 8012198:	623b      	str	r3, [r7, #32]
 801219a:	6a3a      	ldr	r2, [r7, #32]
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d3e6      	bcc.n	8012170 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80121a2:	8bfb      	ldrh	r3, [r7, #30]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d01e      	beq.n	80121e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80121a8:	2300      	movs	r3, #0
 80121aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80121ac:	69bb      	ldr	r3, [r7, #24]
 80121ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80121b2:	461a      	mov	r2, r3
 80121b4:	f107 0310 	add.w	r3, r7, #16
 80121b8:	6812      	ldr	r2, [r2, #0]
 80121ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80121bc:	693a      	ldr	r2, [r7, #16]
 80121be:	6a3b      	ldr	r3, [r7, #32]
 80121c0:	b2db      	uxtb	r3, r3
 80121c2:	00db      	lsls	r3, r3, #3
 80121c4:	fa22 f303 	lsr.w	r3, r2, r3
 80121c8:	b2da      	uxtb	r2, r3
 80121ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121cc:	701a      	strb	r2, [r3, #0]
      i++;
 80121ce:	6a3b      	ldr	r3, [r7, #32]
 80121d0:	3301      	adds	r3, #1
 80121d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80121d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d6:	3301      	adds	r3, #1
 80121d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80121da:	8bfb      	ldrh	r3, [r7, #30]
 80121dc:	3b01      	subs	r3, #1
 80121de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80121e0:	8bfb      	ldrh	r3, [r7, #30]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d1ea      	bne.n	80121bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80121e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	372c      	adds	r7, #44	@ 0x2c
 80121ec:	46bd      	mov	sp, r7
 80121ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f2:	4770      	bx	lr

080121f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80121f4:	b480      	push	{r7}
 80121f6:	b085      	sub	sp, #20
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	785b      	ldrb	r3, [r3, #1]
 801220c:	2b01      	cmp	r3, #1
 801220e:	d12c      	bne.n	801226a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	015a      	lsls	r2, r3, #5
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	4413      	add	r3, r2
 8012218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	db12      	blt.n	8012248 <USB_EPSetStall+0x54>
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d00f      	beq.n	8012248 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	015a      	lsls	r2, r3, #5
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	4413      	add	r3, r2
 8012230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	68ba      	ldr	r2, [r7, #8]
 8012238:	0151      	lsls	r1, r2, #5
 801223a:	68fa      	ldr	r2, [r7, #12]
 801223c:	440a      	add	r2, r1
 801223e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012242:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012246:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	015a      	lsls	r2, r3, #5
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	4413      	add	r3, r2
 8012250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	68ba      	ldr	r2, [r7, #8]
 8012258:	0151      	lsls	r1, r2, #5
 801225a:	68fa      	ldr	r2, [r7, #12]
 801225c:	440a      	add	r2, r1
 801225e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012262:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012266:	6013      	str	r3, [r2, #0]
 8012268:	e02b      	b.n	80122c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801226a:	68bb      	ldr	r3, [r7, #8]
 801226c:	015a      	lsls	r2, r3, #5
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	4413      	add	r3, r2
 8012272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	2b00      	cmp	r3, #0
 801227a:	db12      	blt.n	80122a2 <USB_EPSetStall+0xae>
 801227c:	68bb      	ldr	r3, [r7, #8]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d00f      	beq.n	80122a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	015a      	lsls	r2, r3, #5
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	4413      	add	r3, r2
 801228a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	68ba      	ldr	r2, [r7, #8]
 8012292:	0151      	lsls	r1, r2, #5
 8012294:	68fa      	ldr	r2, [r7, #12]
 8012296:	440a      	add	r2, r1
 8012298:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801229c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80122a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	015a      	lsls	r2, r3, #5
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	4413      	add	r3, r2
 80122aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	68ba      	ldr	r2, [r7, #8]
 80122b2:	0151      	lsls	r1, r2, #5
 80122b4:	68fa      	ldr	r2, [r7, #12]
 80122b6:	440a      	add	r2, r1
 80122b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80122bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80122c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80122c2:	2300      	movs	r3, #0
}
 80122c4:	4618      	mov	r0, r3
 80122c6:	3714      	adds	r7, #20
 80122c8:	46bd      	mov	sp, r7
 80122ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ce:	4770      	bx	lr

080122d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80122d0:	b480      	push	{r7}
 80122d2:	b085      	sub	sp, #20
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	785b      	ldrb	r3, [r3, #1]
 80122e8:	2b01      	cmp	r3, #1
 80122ea:	d128      	bne.n	801233e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	015a      	lsls	r2, r3, #5
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	4413      	add	r3, r2
 80122f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	68ba      	ldr	r2, [r7, #8]
 80122fc:	0151      	lsls	r1, r2, #5
 80122fe:	68fa      	ldr	r2, [r7, #12]
 8012300:	440a      	add	r2, r1
 8012302:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012306:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801230a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	791b      	ldrb	r3, [r3, #4]
 8012310:	2b03      	cmp	r3, #3
 8012312:	d003      	beq.n	801231c <USB_EPClearStall+0x4c>
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	791b      	ldrb	r3, [r3, #4]
 8012318:	2b02      	cmp	r3, #2
 801231a:	d138      	bne.n	801238e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	015a      	lsls	r2, r3, #5
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	4413      	add	r3, r2
 8012324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	68ba      	ldr	r2, [r7, #8]
 801232c:	0151      	lsls	r1, r2, #5
 801232e:	68fa      	ldr	r2, [r7, #12]
 8012330:	440a      	add	r2, r1
 8012332:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801233a:	6013      	str	r3, [r2, #0]
 801233c:	e027      	b.n	801238e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	015a      	lsls	r2, r3, #5
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	4413      	add	r3, r2
 8012346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	68ba      	ldr	r2, [r7, #8]
 801234e:	0151      	lsls	r1, r2, #5
 8012350:	68fa      	ldr	r2, [r7, #12]
 8012352:	440a      	add	r2, r1
 8012354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012358:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801235c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	791b      	ldrb	r3, [r3, #4]
 8012362:	2b03      	cmp	r3, #3
 8012364:	d003      	beq.n	801236e <USB_EPClearStall+0x9e>
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	791b      	ldrb	r3, [r3, #4]
 801236a:	2b02      	cmp	r3, #2
 801236c:	d10f      	bne.n	801238e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	015a      	lsls	r2, r3, #5
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	4413      	add	r3, r2
 8012376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	68ba      	ldr	r2, [r7, #8]
 801237e:	0151      	lsls	r1, r2, #5
 8012380:	68fa      	ldr	r2, [r7, #12]
 8012382:	440a      	add	r2, r1
 8012384:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801238c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801238e:	2300      	movs	r3, #0
}
 8012390:	4618      	mov	r0, r3
 8012392:	3714      	adds	r7, #20
 8012394:	46bd      	mov	sp, r7
 8012396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239a:	4770      	bx	lr

0801239c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801239c:	b480      	push	{r7}
 801239e:	b085      	sub	sp, #20
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	460b      	mov	r3, r1
 80123a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	68fa      	ldr	r2, [r7, #12]
 80123b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80123ba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80123be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80123c6:	681a      	ldr	r2, [r3, #0]
 80123c8:	78fb      	ldrb	r3, [r7, #3]
 80123ca:	011b      	lsls	r3, r3, #4
 80123cc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80123d0:	68f9      	ldr	r1, [r7, #12]
 80123d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80123d6:	4313      	orrs	r3, r2
 80123d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80123da:	2300      	movs	r3, #0
}
 80123dc:	4618      	mov	r0, r3
 80123de:	3714      	adds	r7, #20
 80123e0:	46bd      	mov	sp, r7
 80123e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e6:	4770      	bx	lr

080123e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80123e8:	b480      	push	{r7}
 80123ea:	b085      	sub	sp, #20
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	68fa      	ldr	r2, [r7, #12]
 80123fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012402:	f023 0303 	bic.w	r3, r3, #3
 8012406:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	68fa      	ldr	r2, [r7, #12]
 8012412:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012416:	f023 0302 	bic.w	r3, r3, #2
 801241a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801241c:	2300      	movs	r3, #0
}
 801241e:	4618      	mov	r0, r3
 8012420:	3714      	adds	r7, #20
 8012422:	46bd      	mov	sp, r7
 8012424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012428:	4770      	bx	lr

0801242a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801242a:	b480      	push	{r7}
 801242c:	b085      	sub	sp, #20
 801242e:	af00      	add	r7, sp, #0
 8012430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	68fa      	ldr	r2, [r7, #12]
 8012440:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012444:	f023 0303 	bic.w	r3, r3, #3
 8012448:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012450:	685b      	ldr	r3, [r3, #4]
 8012452:	68fa      	ldr	r2, [r7, #12]
 8012454:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012458:	f043 0302 	orr.w	r3, r3, #2
 801245c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801245e:	2300      	movs	r3, #0
}
 8012460:	4618      	mov	r0, r3
 8012462:	3714      	adds	r7, #20
 8012464:	46bd      	mov	sp, r7
 8012466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246a:	4770      	bx	lr

0801246c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801246c:	b480      	push	{r7}
 801246e:	b085      	sub	sp, #20
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	695b      	ldr	r3, [r3, #20]
 8012478:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	699b      	ldr	r3, [r3, #24]
 801247e:	68fa      	ldr	r2, [r7, #12]
 8012480:	4013      	ands	r3, r2
 8012482:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012484:	68fb      	ldr	r3, [r7, #12]
}
 8012486:	4618      	mov	r0, r3
 8012488:	3714      	adds	r7, #20
 801248a:	46bd      	mov	sp, r7
 801248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012490:	4770      	bx	lr

08012492 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012492:	b480      	push	{r7}
 8012494:	b085      	sub	sp, #20
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80124a4:	699b      	ldr	r3, [r3, #24]
 80124a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80124ae:	69db      	ldr	r3, [r3, #28]
 80124b0:	68ba      	ldr	r2, [r7, #8]
 80124b2:	4013      	ands	r3, r2
 80124b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80124b6:	68bb      	ldr	r3, [r7, #8]
 80124b8:	0c1b      	lsrs	r3, r3, #16
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3714      	adds	r7, #20
 80124be:	46bd      	mov	sp, r7
 80124c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c4:	4770      	bx	lr

080124c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80124c6:	b480      	push	{r7}
 80124c8:	b085      	sub	sp, #20
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80124d8:	699b      	ldr	r3, [r3, #24]
 80124da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80124e2:	69db      	ldr	r3, [r3, #28]
 80124e4:	68ba      	ldr	r2, [r7, #8]
 80124e6:	4013      	ands	r3, r2
 80124e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	b29b      	uxth	r3, r3
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3714      	adds	r7, #20
 80124f2:	46bd      	mov	sp, r7
 80124f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f8:	4770      	bx	lr

080124fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80124fa:	b480      	push	{r7}
 80124fc:	b085      	sub	sp, #20
 80124fe:	af00      	add	r7, sp, #0
 8012500:	6078      	str	r0, [r7, #4]
 8012502:	460b      	mov	r3, r1
 8012504:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801250a:	78fb      	ldrb	r3, [r7, #3]
 801250c:	015a      	lsls	r2, r3, #5
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	4413      	add	r3, r2
 8012512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012516:	689b      	ldr	r3, [r3, #8]
 8012518:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012520:	695b      	ldr	r3, [r3, #20]
 8012522:	68ba      	ldr	r2, [r7, #8]
 8012524:	4013      	ands	r3, r2
 8012526:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012528:	68bb      	ldr	r3, [r7, #8]
}
 801252a:	4618      	mov	r0, r3
 801252c:	3714      	adds	r7, #20
 801252e:	46bd      	mov	sp, r7
 8012530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012534:	4770      	bx	lr

08012536 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012536:	b480      	push	{r7}
 8012538:	b087      	sub	sp, #28
 801253a:	af00      	add	r7, sp, #0
 801253c:	6078      	str	r0, [r7, #4]
 801253e:	460b      	mov	r3, r1
 8012540:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012546:	697b      	ldr	r3, [r7, #20]
 8012548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801254c:	691b      	ldr	r3, [r3, #16]
 801254e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012558:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801255a:	78fb      	ldrb	r3, [r7, #3]
 801255c:	f003 030f 	and.w	r3, r3, #15
 8012560:	68fa      	ldr	r2, [r7, #12]
 8012562:	fa22 f303 	lsr.w	r3, r2, r3
 8012566:	01db      	lsls	r3, r3, #7
 8012568:	b2db      	uxtb	r3, r3
 801256a:	693a      	ldr	r2, [r7, #16]
 801256c:	4313      	orrs	r3, r2
 801256e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012570:	78fb      	ldrb	r3, [r7, #3]
 8012572:	015a      	lsls	r2, r3, #5
 8012574:	697b      	ldr	r3, [r7, #20]
 8012576:	4413      	add	r3, r2
 8012578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801257c:	689b      	ldr	r3, [r3, #8]
 801257e:	693a      	ldr	r2, [r7, #16]
 8012580:	4013      	ands	r3, r2
 8012582:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012584:	68bb      	ldr	r3, [r7, #8]
}
 8012586:	4618      	mov	r0, r3
 8012588:	371c      	adds	r7, #28
 801258a:	46bd      	mov	sp, r7
 801258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012590:	4770      	bx	lr

08012592 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8012592:	b480      	push	{r7}
 8012594:	b083      	sub	sp, #12
 8012596:	af00      	add	r7, sp, #0
 8012598:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	695b      	ldr	r3, [r3, #20]
 801259e:	f003 0301 	and.w	r3, r3, #1
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	370c      	adds	r7, #12
 80125a6:	46bd      	mov	sp, r7
 80125a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ac:	4770      	bx	lr
	...

080125b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80125b0:	b480      	push	{r7}
 80125b2:	b085      	sub	sp, #20
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125c2:	681a      	ldr	r2, [r3, #0]
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125ca:	4619      	mov	r1, r3
 80125cc:	4b09      	ldr	r3, [pc, #36]	@ (80125f4 <USB_ActivateSetup+0x44>)
 80125ce:	4013      	ands	r3, r2
 80125d0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80125d8:	685b      	ldr	r3, [r3, #4]
 80125da:	68fa      	ldr	r2, [r7, #12]
 80125dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80125e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80125e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80125e6:	2300      	movs	r3, #0
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	3714      	adds	r7, #20
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr
 80125f4:	fffff800 	.word	0xfffff800

080125f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80125f8:	b480      	push	{r7}
 80125fa:	b087      	sub	sp, #28
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	60f8      	str	r0, [r7, #12]
 8012600:	460b      	mov	r3, r1
 8012602:	607a      	str	r2, [r7, #4]
 8012604:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	333c      	adds	r3, #60	@ 0x3c
 801260e:	3304      	adds	r3, #4
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	4a26      	ldr	r2, [pc, #152]	@ (80126b0 <USB_EP0_OutStart+0xb8>)
 8012618:	4293      	cmp	r3, r2
 801261a:	d90a      	bls.n	8012632 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801261c:	697b      	ldr	r3, [r7, #20]
 801261e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012628:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801262c:	d101      	bne.n	8012632 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801262e:	2300      	movs	r3, #0
 8012630:	e037      	b.n	80126a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012638:	461a      	mov	r2, r3
 801263a:	2300      	movs	r3, #0
 801263c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801263e:	697b      	ldr	r3, [r7, #20]
 8012640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012644:	691b      	ldr	r3, [r3, #16]
 8012646:	697a      	ldr	r2, [r7, #20]
 8012648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801264c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012650:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012652:	697b      	ldr	r3, [r7, #20]
 8012654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012658:	691b      	ldr	r3, [r3, #16]
 801265a:	697a      	ldr	r2, [r7, #20]
 801265c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012660:	f043 0318 	orr.w	r3, r3, #24
 8012664:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801266c:	691b      	ldr	r3, [r3, #16]
 801266e:	697a      	ldr	r2, [r7, #20]
 8012670:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012674:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8012678:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801267a:	7afb      	ldrb	r3, [r7, #11]
 801267c:	2b01      	cmp	r3, #1
 801267e:	d10f      	bne.n	80126a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012680:	697b      	ldr	r3, [r7, #20]
 8012682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012686:	461a      	mov	r2, r3
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801268c:	697b      	ldr	r3, [r7, #20]
 801268e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	697a      	ldr	r2, [r7, #20]
 8012696:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801269a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801269e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80126a0:	2300      	movs	r3, #0
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	371c      	adds	r7, #28
 80126a6:	46bd      	mov	sp, r7
 80126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ac:	4770      	bx	lr
 80126ae:	bf00      	nop
 80126b0:	4f54300a 	.word	0x4f54300a

080126b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80126b4:	b480      	push	{r7}
 80126b6:	b085      	sub	sp, #20
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80126bc:	2300      	movs	r3, #0
 80126be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	3301      	adds	r3, #1
 80126c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80126cc:	d901      	bls.n	80126d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80126ce:	2303      	movs	r3, #3
 80126d0:	e01b      	b.n	801270a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	691b      	ldr	r3, [r3, #16]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	daf2      	bge.n	80126c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80126da:	2300      	movs	r3, #0
 80126dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	691b      	ldr	r3, [r3, #16]
 80126e2:	f043 0201 	orr.w	r2, r3, #1
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	3301      	adds	r3, #1
 80126ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80126f6:	d901      	bls.n	80126fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80126f8:	2303      	movs	r3, #3
 80126fa:	e006      	b.n	801270a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	691b      	ldr	r3, [r3, #16]
 8012700:	f003 0301 	and.w	r3, r3, #1
 8012704:	2b01      	cmp	r3, #1
 8012706:	d0f0      	beq.n	80126ea <USB_CoreReset+0x36>

  return HAL_OK;
 8012708:	2300      	movs	r3, #0
}
 801270a:	4618      	mov	r0, r3
 801270c:	3714      	adds	r7, #20
 801270e:	46bd      	mov	sp, r7
 8012710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012714:	4770      	bx	lr
	...

08012718 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b084      	sub	sp, #16
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	460b      	mov	r3, r1
 8012722:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012724:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012728:	f002 fcf4 	bl	8015114 <USBD_static_malloc>
 801272c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d109      	bne.n	8012748 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	32b0      	adds	r2, #176	@ 0xb0
 801273e:	2100      	movs	r1, #0
 8012740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012744:	2302      	movs	r3, #2
 8012746:	e0d4      	b.n	80128f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012748:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 801274c:	2100      	movs	r1, #0
 801274e:	68f8      	ldr	r0, [r7, #12]
 8012750:	f002 fd46 	bl	80151e0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	32b0      	adds	r2, #176	@ 0xb0
 801275e:	68f9      	ldr	r1, [r7, #12]
 8012760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	32b0      	adds	r2, #176	@ 0xb0
 801276e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	7c1b      	ldrb	r3, [r3, #16]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d138      	bne.n	80127f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012780:	4b5e      	ldr	r3, [pc, #376]	@ (80128fc <USBD_CDC_Init+0x1e4>)
 8012782:	7819      	ldrb	r1, [r3, #0]
 8012784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012788:	2202      	movs	r2, #2
 801278a:	6878      	ldr	r0, [r7, #4]
 801278c:	f002 fb9f 	bl	8014ece <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012790:	4b5a      	ldr	r3, [pc, #360]	@ (80128fc <USBD_CDC_Init+0x1e4>)
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	f003 020f 	and.w	r2, r3, #15
 8012798:	6879      	ldr	r1, [r7, #4]
 801279a:	4613      	mov	r3, r2
 801279c:	009b      	lsls	r3, r3, #2
 801279e:	4413      	add	r3, r2
 80127a0:	009b      	lsls	r3, r3, #2
 80127a2:	440b      	add	r3, r1
 80127a4:	3324      	adds	r3, #36	@ 0x24
 80127a6:	2201      	movs	r2, #1
 80127a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80127aa:	4b55      	ldr	r3, [pc, #340]	@ (8012900 <USBD_CDC_Init+0x1e8>)
 80127ac:	7819      	ldrb	r1, [r3, #0]
 80127ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80127b2:	2202      	movs	r2, #2
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f002 fb8a 	bl	8014ece <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80127ba:	4b51      	ldr	r3, [pc, #324]	@ (8012900 <USBD_CDC_Init+0x1e8>)
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	f003 020f 	and.w	r2, r3, #15
 80127c2:	6879      	ldr	r1, [r7, #4]
 80127c4:	4613      	mov	r3, r2
 80127c6:	009b      	lsls	r3, r3, #2
 80127c8:	4413      	add	r3, r2
 80127ca:	009b      	lsls	r3, r3, #2
 80127cc:	440b      	add	r3, r1
 80127ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80127d2:	2201      	movs	r2, #1
 80127d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80127d6:	4b4b      	ldr	r3, [pc, #300]	@ (8012904 <USBD_CDC_Init+0x1ec>)
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	f003 020f 	and.w	r2, r3, #15
 80127de:	6879      	ldr	r1, [r7, #4]
 80127e0:	4613      	mov	r3, r2
 80127e2:	009b      	lsls	r3, r3, #2
 80127e4:	4413      	add	r3, r2
 80127e6:	009b      	lsls	r3, r3, #2
 80127e8:	440b      	add	r3, r1
 80127ea:	3326      	adds	r3, #38	@ 0x26
 80127ec:	2210      	movs	r2, #16
 80127ee:	801a      	strh	r2, [r3, #0]
 80127f0:	e035      	b.n	801285e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80127f2:	4b42      	ldr	r3, [pc, #264]	@ (80128fc <USBD_CDC_Init+0x1e4>)
 80127f4:	7819      	ldrb	r1, [r3, #0]
 80127f6:	2340      	movs	r3, #64	@ 0x40
 80127f8:	2202      	movs	r2, #2
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f002 fb67 	bl	8014ece <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012800:	4b3e      	ldr	r3, [pc, #248]	@ (80128fc <USBD_CDC_Init+0x1e4>)
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	f003 020f 	and.w	r2, r3, #15
 8012808:	6879      	ldr	r1, [r7, #4]
 801280a:	4613      	mov	r3, r2
 801280c:	009b      	lsls	r3, r3, #2
 801280e:	4413      	add	r3, r2
 8012810:	009b      	lsls	r3, r3, #2
 8012812:	440b      	add	r3, r1
 8012814:	3324      	adds	r3, #36	@ 0x24
 8012816:	2201      	movs	r2, #1
 8012818:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801281a:	4b39      	ldr	r3, [pc, #228]	@ (8012900 <USBD_CDC_Init+0x1e8>)
 801281c:	7819      	ldrb	r1, [r3, #0]
 801281e:	2340      	movs	r3, #64	@ 0x40
 8012820:	2202      	movs	r2, #2
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f002 fb53 	bl	8014ece <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012828:	4b35      	ldr	r3, [pc, #212]	@ (8012900 <USBD_CDC_Init+0x1e8>)
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	f003 020f 	and.w	r2, r3, #15
 8012830:	6879      	ldr	r1, [r7, #4]
 8012832:	4613      	mov	r3, r2
 8012834:	009b      	lsls	r3, r3, #2
 8012836:	4413      	add	r3, r2
 8012838:	009b      	lsls	r3, r3, #2
 801283a:	440b      	add	r3, r1
 801283c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012840:	2201      	movs	r2, #1
 8012842:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012844:	4b2f      	ldr	r3, [pc, #188]	@ (8012904 <USBD_CDC_Init+0x1ec>)
 8012846:	781b      	ldrb	r3, [r3, #0]
 8012848:	f003 020f 	and.w	r2, r3, #15
 801284c:	6879      	ldr	r1, [r7, #4]
 801284e:	4613      	mov	r3, r2
 8012850:	009b      	lsls	r3, r3, #2
 8012852:	4413      	add	r3, r2
 8012854:	009b      	lsls	r3, r3, #2
 8012856:	440b      	add	r3, r1
 8012858:	3326      	adds	r3, #38	@ 0x26
 801285a:	2210      	movs	r2, #16
 801285c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801285e:	4b29      	ldr	r3, [pc, #164]	@ (8012904 <USBD_CDC_Init+0x1ec>)
 8012860:	7819      	ldrb	r1, [r3, #0]
 8012862:	2308      	movs	r3, #8
 8012864:	2203      	movs	r2, #3
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f002 fb31 	bl	8014ece <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801286c:	4b25      	ldr	r3, [pc, #148]	@ (8012904 <USBD_CDC_Init+0x1ec>)
 801286e:	781b      	ldrb	r3, [r3, #0]
 8012870:	f003 020f 	and.w	r2, r3, #15
 8012874:	6879      	ldr	r1, [r7, #4]
 8012876:	4613      	mov	r3, r2
 8012878:	009b      	lsls	r3, r3, #2
 801287a:	4413      	add	r3, r2
 801287c:	009b      	lsls	r3, r3, #2
 801287e:	440b      	add	r3, r1
 8012880:	3324      	adds	r3, #36	@ 0x24
 8012882:	2201      	movs	r2, #1
 8012884:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2200      	movs	r2, #0
 801288a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012894:	687a      	ldr	r2, [r7, #4]
 8012896:	33b0      	adds	r3, #176	@ 0xb0
 8012898:	009b      	lsls	r3, r3, #2
 801289a:	4413      	add	r3, r2
 801289c:	685b      	ldr	r3, [r3, #4]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	2200      	movs	r2, #0
 80128a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	2200      	movs	r2, #0
 80128ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d101      	bne.n	80128c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80128bc:	2302      	movs	r3, #2
 80128be:	e018      	b.n	80128f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	7c1b      	ldrb	r3, [r3, #16]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d10a      	bne.n	80128de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80128c8:	4b0d      	ldr	r3, [pc, #52]	@ (8012900 <USBD_CDC_Init+0x1e8>)
 80128ca:	7819      	ldrb	r1, [r3, #0]
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80128d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f002 fbe8 	bl	80150ac <USBD_LL_PrepareReceive>
 80128dc:	e008      	b.n	80128f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80128de:	4b08      	ldr	r3, [pc, #32]	@ (8012900 <USBD_CDC_Init+0x1e8>)
 80128e0:	7819      	ldrb	r1, [r3, #0]
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80128e8:	2340      	movs	r3, #64	@ 0x40
 80128ea:	6878      	ldr	r0, [r7, #4]
 80128ec:	f002 fbde 	bl	80150ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80128f0:	2300      	movs	r3, #0
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	3710      	adds	r7, #16
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}
 80128fa:	bf00      	nop
 80128fc:	24000097 	.word	0x24000097
 8012900:	24000098 	.word	0x24000098
 8012904:	24000099 	.word	0x24000099

08012908 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	460b      	mov	r3, r1
 8012912:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012914:	4b3a      	ldr	r3, [pc, #232]	@ (8012a00 <USBD_CDC_DeInit+0xf8>)
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	4619      	mov	r1, r3
 801291a:	6878      	ldr	r0, [r7, #4]
 801291c:	f002 fafd 	bl	8014f1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012920:	4b37      	ldr	r3, [pc, #220]	@ (8012a00 <USBD_CDC_DeInit+0xf8>)
 8012922:	781b      	ldrb	r3, [r3, #0]
 8012924:	f003 020f 	and.w	r2, r3, #15
 8012928:	6879      	ldr	r1, [r7, #4]
 801292a:	4613      	mov	r3, r2
 801292c:	009b      	lsls	r3, r3, #2
 801292e:	4413      	add	r3, r2
 8012930:	009b      	lsls	r3, r3, #2
 8012932:	440b      	add	r3, r1
 8012934:	3324      	adds	r3, #36	@ 0x24
 8012936:	2200      	movs	r2, #0
 8012938:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801293a:	4b32      	ldr	r3, [pc, #200]	@ (8012a04 <USBD_CDC_DeInit+0xfc>)
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	4619      	mov	r1, r3
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f002 faea 	bl	8014f1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012946:	4b2f      	ldr	r3, [pc, #188]	@ (8012a04 <USBD_CDC_DeInit+0xfc>)
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	f003 020f 	and.w	r2, r3, #15
 801294e:	6879      	ldr	r1, [r7, #4]
 8012950:	4613      	mov	r3, r2
 8012952:	009b      	lsls	r3, r3, #2
 8012954:	4413      	add	r3, r2
 8012956:	009b      	lsls	r3, r3, #2
 8012958:	440b      	add	r3, r1
 801295a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801295e:	2200      	movs	r2, #0
 8012960:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012962:	4b29      	ldr	r3, [pc, #164]	@ (8012a08 <USBD_CDC_DeInit+0x100>)
 8012964:	781b      	ldrb	r3, [r3, #0]
 8012966:	4619      	mov	r1, r3
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f002 fad6 	bl	8014f1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801296e:	4b26      	ldr	r3, [pc, #152]	@ (8012a08 <USBD_CDC_DeInit+0x100>)
 8012970:	781b      	ldrb	r3, [r3, #0]
 8012972:	f003 020f 	and.w	r2, r3, #15
 8012976:	6879      	ldr	r1, [r7, #4]
 8012978:	4613      	mov	r3, r2
 801297a:	009b      	lsls	r3, r3, #2
 801297c:	4413      	add	r3, r2
 801297e:	009b      	lsls	r3, r3, #2
 8012980:	440b      	add	r3, r1
 8012982:	3324      	adds	r3, #36	@ 0x24
 8012984:	2200      	movs	r2, #0
 8012986:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012988:	4b1f      	ldr	r3, [pc, #124]	@ (8012a08 <USBD_CDC_DeInit+0x100>)
 801298a:	781b      	ldrb	r3, [r3, #0]
 801298c:	f003 020f 	and.w	r2, r3, #15
 8012990:	6879      	ldr	r1, [r7, #4]
 8012992:	4613      	mov	r3, r2
 8012994:	009b      	lsls	r3, r3, #2
 8012996:	4413      	add	r3, r2
 8012998:	009b      	lsls	r3, r3, #2
 801299a:	440b      	add	r3, r1
 801299c:	3326      	adds	r3, #38	@ 0x26
 801299e:	2200      	movs	r2, #0
 80129a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	32b0      	adds	r2, #176	@ 0xb0
 80129ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d01f      	beq.n	80129f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80129ba:	687a      	ldr	r2, [r7, #4]
 80129bc:	33b0      	adds	r3, #176	@ 0xb0
 80129be:	009b      	lsls	r3, r3, #2
 80129c0:	4413      	add	r3, r2
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	685b      	ldr	r3, [r3, #4]
 80129c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	32b0      	adds	r2, #176	@ 0xb0
 80129d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129d6:	4618      	mov	r0, r3
 80129d8:	f002 fbaa 	bl	8015130 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	32b0      	adds	r2, #176	@ 0xb0
 80129e6:	2100      	movs	r1, #0
 80129e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2200      	movs	r2, #0
 80129f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80129f4:	2300      	movs	r3, #0
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	3708      	adds	r7, #8
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}
 80129fe:	bf00      	nop
 8012a00:	24000097 	.word	0x24000097
 8012a04:	24000098 	.word	0x24000098
 8012a08:	24000099 	.word	0x24000099

08012a0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b086      	sub	sp, #24
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	32b0      	adds	r2, #176	@ 0xb0
 8012a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012a26:	2300      	movs	r3, #0
 8012a28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d101      	bne.n	8012a3c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012a38:	2303      	movs	r3, #3
 8012a3a:	e0bf      	b.n	8012bbc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012a3c:	683b      	ldr	r3, [r7, #0]
 8012a3e:	781b      	ldrb	r3, [r3, #0]
 8012a40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d050      	beq.n	8012aea <USBD_CDC_Setup+0xde>
 8012a48:	2b20      	cmp	r3, #32
 8012a4a:	f040 80af 	bne.w	8012bac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	88db      	ldrh	r3, [r3, #6]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d03a      	beq.n	8012acc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	b25b      	sxtb	r3, r3
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	da1b      	bge.n	8012a98 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012a66:	687a      	ldr	r2, [r7, #4]
 8012a68:	33b0      	adds	r3, #176	@ 0xb0
 8012a6a:	009b      	lsls	r3, r3, #2
 8012a6c:	4413      	add	r3, r2
 8012a6e:	685b      	ldr	r3, [r3, #4]
 8012a70:	689b      	ldr	r3, [r3, #8]
 8012a72:	683a      	ldr	r2, [r7, #0]
 8012a74:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012a76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012a78:	683a      	ldr	r2, [r7, #0]
 8012a7a:	88d2      	ldrh	r2, [r2, #6]
 8012a7c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	88db      	ldrh	r3, [r3, #6]
 8012a82:	2b07      	cmp	r3, #7
 8012a84:	bf28      	it	cs
 8012a86:	2307      	movcs	r3, #7
 8012a88:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	89fa      	ldrh	r2, [r7, #14]
 8012a8e:	4619      	mov	r1, r3
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f001 fdbd 	bl	8014610 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012a96:	e090      	b.n	8012bba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	785a      	ldrb	r2, [r3, #1]
 8012a9c:	693b      	ldr	r3, [r7, #16]
 8012a9e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	88db      	ldrh	r3, [r3, #6]
 8012aa6:	2b3f      	cmp	r3, #63	@ 0x3f
 8012aa8:	d803      	bhi.n	8012ab2 <USBD_CDC_Setup+0xa6>
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	88db      	ldrh	r3, [r3, #6]
 8012aae:	b2da      	uxtb	r2, r3
 8012ab0:	e000      	b.n	8012ab4 <USBD_CDC_Setup+0xa8>
 8012ab2:	2240      	movs	r2, #64	@ 0x40
 8012ab4:	693b      	ldr	r3, [r7, #16]
 8012ab6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012aba:	6939      	ldr	r1, [r7, #16]
 8012abc:	693b      	ldr	r3, [r7, #16]
 8012abe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8012ac2:	461a      	mov	r2, r3
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	f001 fdcf 	bl	8014668 <USBD_CtlPrepareRx>
      break;
 8012aca:	e076      	b.n	8012bba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012ad2:	687a      	ldr	r2, [r7, #4]
 8012ad4:	33b0      	adds	r3, #176	@ 0xb0
 8012ad6:	009b      	lsls	r3, r3, #2
 8012ad8:	4413      	add	r3, r2
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	689b      	ldr	r3, [r3, #8]
 8012ade:	683a      	ldr	r2, [r7, #0]
 8012ae0:	7850      	ldrb	r0, [r2, #1]
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	6839      	ldr	r1, [r7, #0]
 8012ae6:	4798      	blx	r3
      break;
 8012ae8:	e067      	b.n	8012bba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	785b      	ldrb	r3, [r3, #1]
 8012aee:	2b0b      	cmp	r3, #11
 8012af0:	d851      	bhi.n	8012b96 <USBD_CDC_Setup+0x18a>
 8012af2:	a201      	add	r2, pc, #4	@ (adr r2, 8012af8 <USBD_CDC_Setup+0xec>)
 8012af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012af8:	08012b29 	.word	0x08012b29
 8012afc:	08012ba5 	.word	0x08012ba5
 8012b00:	08012b97 	.word	0x08012b97
 8012b04:	08012b97 	.word	0x08012b97
 8012b08:	08012b97 	.word	0x08012b97
 8012b0c:	08012b97 	.word	0x08012b97
 8012b10:	08012b97 	.word	0x08012b97
 8012b14:	08012b97 	.word	0x08012b97
 8012b18:	08012b97 	.word	0x08012b97
 8012b1c:	08012b97 	.word	0x08012b97
 8012b20:	08012b53 	.word	0x08012b53
 8012b24:	08012b7d 	.word	0x08012b7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012b2e:	b2db      	uxtb	r3, r3
 8012b30:	2b03      	cmp	r3, #3
 8012b32:	d107      	bne.n	8012b44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012b34:	f107 030a 	add.w	r3, r7, #10
 8012b38:	2202      	movs	r2, #2
 8012b3a:	4619      	mov	r1, r3
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	f001 fd67 	bl	8014610 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012b42:	e032      	b.n	8012baa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012b44:	6839      	ldr	r1, [r7, #0]
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f001 fce5 	bl	8014516 <USBD_CtlError>
            ret = USBD_FAIL;
 8012b4c:	2303      	movs	r3, #3
 8012b4e:	75fb      	strb	r3, [r7, #23]
          break;
 8012b50:	e02b      	b.n	8012baa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012b58:	b2db      	uxtb	r3, r3
 8012b5a:	2b03      	cmp	r3, #3
 8012b5c:	d107      	bne.n	8012b6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012b5e:	f107 030d 	add.w	r3, r7, #13
 8012b62:	2201      	movs	r2, #1
 8012b64:	4619      	mov	r1, r3
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f001 fd52 	bl	8014610 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012b6c:	e01d      	b.n	8012baa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012b6e:	6839      	ldr	r1, [r7, #0]
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f001 fcd0 	bl	8014516 <USBD_CtlError>
            ret = USBD_FAIL;
 8012b76:	2303      	movs	r3, #3
 8012b78:	75fb      	strb	r3, [r7, #23]
          break;
 8012b7a:	e016      	b.n	8012baa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012b82:	b2db      	uxtb	r3, r3
 8012b84:	2b03      	cmp	r3, #3
 8012b86:	d00f      	beq.n	8012ba8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012b88:	6839      	ldr	r1, [r7, #0]
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f001 fcc3 	bl	8014516 <USBD_CtlError>
            ret = USBD_FAIL;
 8012b90:	2303      	movs	r3, #3
 8012b92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012b94:	e008      	b.n	8012ba8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012b96:	6839      	ldr	r1, [r7, #0]
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f001 fcbc 	bl	8014516 <USBD_CtlError>
          ret = USBD_FAIL;
 8012b9e:	2303      	movs	r3, #3
 8012ba0:	75fb      	strb	r3, [r7, #23]
          break;
 8012ba2:	e002      	b.n	8012baa <USBD_CDC_Setup+0x19e>
          break;
 8012ba4:	bf00      	nop
 8012ba6:	e008      	b.n	8012bba <USBD_CDC_Setup+0x1ae>
          break;
 8012ba8:	bf00      	nop
      }
      break;
 8012baa:	e006      	b.n	8012bba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012bac:	6839      	ldr	r1, [r7, #0]
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f001 fcb1 	bl	8014516 <USBD_CtlError>
      ret = USBD_FAIL;
 8012bb4:	2303      	movs	r3, #3
 8012bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8012bb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8012bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3718      	adds	r7, #24
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd80      	pop	{r7, pc}

08012bc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b084      	sub	sp, #16
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	460b      	mov	r3, r1
 8012bce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012bd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	32b0      	adds	r2, #176	@ 0xb0
 8012be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d101      	bne.n	8012bee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012bea:	2303      	movs	r3, #3
 8012bec:	e065      	b.n	8012cba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	32b0      	adds	r2, #176	@ 0xb0
 8012bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bfc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012bfe:	78fb      	ldrb	r3, [r7, #3]
 8012c00:	f003 020f 	and.w	r2, r3, #15
 8012c04:	6879      	ldr	r1, [r7, #4]
 8012c06:	4613      	mov	r3, r2
 8012c08:	009b      	lsls	r3, r3, #2
 8012c0a:	4413      	add	r3, r2
 8012c0c:	009b      	lsls	r3, r3, #2
 8012c0e:	440b      	add	r3, r1
 8012c10:	3318      	adds	r3, #24
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d02f      	beq.n	8012c78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8012c18:	78fb      	ldrb	r3, [r7, #3]
 8012c1a:	f003 020f 	and.w	r2, r3, #15
 8012c1e:	6879      	ldr	r1, [r7, #4]
 8012c20:	4613      	mov	r3, r2
 8012c22:	009b      	lsls	r3, r3, #2
 8012c24:	4413      	add	r3, r2
 8012c26:	009b      	lsls	r3, r3, #2
 8012c28:	440b      	add	r3, r1
 8012c2a:	3318      	adds	r3, #24
 8012c2c:	681a      	ldr	r2, [r3, #0]
 8012c2e:	78fb      	ldrb	r3, [r7, #3]
 8012c30:	f003 010f 	and.w	r1, r3, #15
 8012c34:	68f8      	ldr	r0, [r7, #12]
 8012c36:	460b      	mov	r3, r1
 8012c38:	00db      	lsls	r3, r3, #3
 8012c3a:	440b      	add	r3, r1
 8012c3c:	009b      	lsls	r3, r3, #2
 8012c3e:	4403      	add	r3, r0
 8012c40:	331c      	adds	r3, #28
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	fbb2 f1f3 	udiv	r1, r2, r3
 8012c48:	fb01 f303 	mul.w	r3, r1, r3
 8012c4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d112      	bne.n	8012c78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8012c52:	78fb      	ldrb	r3, [r7, #3]
 8012c54:	f003 020f 	and.w	r2, r3, #15
 8012c58:	6879      	ldr	r1, [r7, #4]
 8012c5a:	4613      	mov	r3, r2
 8012c5c:	009b      	lsls	r3, r3, #2
 8012c5e:	4413      	add	r3, r2
 8012c60:	009b      	lsls	r3, r3, #2
 8012c62:	440b      	add	r3, r1
 8012c64:	3318      	adds	r3, #24
 8012c66:	2200      	movs	r2, #0
 8012c68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012c6a:	78f9      	ldrb	r1, [r7, #3]
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	2200      	movs	r2, #0
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f002 f9fa 	bl	801506a <USBD_LL_Transmit>
 8012c76:	e01f      	b.n	8012cb8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012c86:	687a      	ldr	r2, [r7, #4]
 8012c88:	33b0      	adds	r3, #176	@ 0xb0
 8012c8a:	009b      	lsls	r3, r3, #2
 8012c8c:	4413      	add	r3, r2
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	691b      	ldr	r3, [r3, #16]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d010      	beq.n	8012cb8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012c9c:	687a      	ldr	r2, [r7, #4]
 8012c9e:	33b0      	adds	r3, #176	@ 0xb0
 8012ca0:	009b      	lsls	r3, r3, #2
 8012ca2:	4413      	add	r3, r2
 8012ca4:	685b      	ldr	r3, [r3, #4]
 8012ca6:	691b      	ldr	r3, [r3, #16]
 8012ca8:	68ba      	ldr	r2, [r7, #8]
 8012caa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8012cae:	68ba      	ldr	r2, [r7, #8]
 8012cb0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8012cb4:	78fa      	ldrb	r2, [r7, #3]
 8012cb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012cb8:	2300      	movs	r3, #0
}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	3710      	adds	r7, #16
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd80      	pop	{r7, pc}

08012cc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012cc2:	b580      	push	{r7, lr}
 8012cc4:	b084      	sub	sp, #16
 8012cc6:	af00      	add	r7, sp, #0
 8012cc8:	6078      	str	r0, [r7, #4]
 8012cca:	460b      	mov	r3, r1
 8012ccc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	32b0      	adds	r2, #176	@ 0xb0
 8012cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	32b0      	adds	r2, #176	@ 0xb0
 8012ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d101      	bne.n	8012cf4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012cf0:	2303      	movs	r3, #3
 8012cf2:	e01a      	b.n	8012d2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012cf4:	78fb      	ldrb	r3, [r7, #3]
 8012cf6:	4619      	mov	r1, r3
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	f002 f9f8 	bl	80150ee <USBD_LL_GetRxDataSize>
 8012cfe:	4602      	mov	r2, r0
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012d0c:	687a      	ldr	r2, [r7, #4]
 8012d0e:	33b0      	adds	r3, #176	@ 0xb0
 8012d10:	009b      	lsls	r3, r3, #2
 8012d12:	4413      	add	r3, r2
 8012d14:	685b      	ldr	r3, [r3, #4]
 8012d16:	68db      	ldr	r3, [r3, #12]
 8012d18:	68fa      	ldr	r2, [r7, #12]
 8012d1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8012d1e:	68fa      	ldr	r2, [r7, #12]
 8012d20:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8012d24:	4611      	mov	r1, r2
 8012d26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012d28:	2300      	movs	r3, #0
}
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	3710      	adds	r7, #16
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}

08012d32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012d32:	b580      	push	{r7, lr}
 8012d34:	b084      	sub	sp, #16
 8012d36:	af00      	add	r7, sp, #0
 8012d38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	32b0      	adds	r2, #176	@ 0xb0
 8012d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d101      	bne.n	8012d54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012d50:	2303      	movs	r3, #3
 8012d52:	e024      	b.n	8012d9e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012d5a:	687a      	ldr	r2, [r7, #4]
 8012d5c:	33b0      	adds	r3, #176	@ 0xb0
 8012d5e:	009b      	lsls	r3, r3, #2
 8012d60:	4413      	add	r3, r2
 8012d62:	685b      	ldr	r3, [r3, #4]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d019      	beq.n	8012d9c <USBD_CDC_EP0_RxReady+0x6a>
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8012d6e:	2bff      	cmp	r3, #255	@ 0xff
 8012d70:	d014      	beq.n	8012d9c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012d78:	687a      	ldr	r2, [r7, #4]
 8012d7a:	33b0      	adds	r3, #176	@ 0xb0
 8012d7c:	009b      	lsls	r3, r3, #2
 8012d7e:	4413      	add	r3, r2
 8012d80:	685b      	ldr	r3, [r3, #4]
 8012d82:	689b      	ldr	r3, [r3, #8]
 8012d84:	68fa      	ldr	r2, [r7, #12]
 8012d86:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8012d8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8012d8c:	68fa      	ldr	r2, [r7, #12]
 8012d8e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012d92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	22ff      	movs	r2, #255	@ 0xff
 8012d98:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8012d9c:	2300      	movs	r3, #0
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3710      	adds	r7, #16
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}
	...

08012da8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b086      	sub	sp, #24
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012db0:	2182      	movs	r1, #130	@ 0x82
 8012db2:	4818      	ldr	r0, [pc, #96]	@ (8012e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012db4:	f000 fd4f 	bl	8013856 <USBD_GetEpDesc>
 8012db8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012dba:	2101      	movs	r1, #1
 8012dbc:	4815      	ldr	r0, [pc, #84]	@ (8012e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012dbe:	f000 fd4a 	bl	8013856 <USBD_GetEpDesc>
 8012dc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012dc4:	2181      	movs	r1, #129	@ 0x81
 8012dc6:	4813      	ldr	r0, [pc, #76]	@ (8012e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012dc8:	f000 fd45 	bl	8013856 <USBD_GetEpDesc>
 8012dcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012dce:	697b      	ldr	r3, [r7, #20]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d002      	beq.n	8012dda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	2210      	movs	r2, #16
 8012dd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d006      	beq.n	8012dee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	2200      	movs	r2, #0
 8012de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012de8:	711a      	strb	r2, [r3, #4]
 8012dea:	2200      	movs	r2, #0
 8012dec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d006      	beq.n	8012e02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	2200      	movs	r2, #0
 8012df8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012dfc:	711a      	strb	r2, [r3, #4]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	2243      	movs	r2, #67	@ 0x43
 8012e06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012e08:	4b02      	ldr	r3, [pc, #8]	@ (8012e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	3718      	adds	r7, #24
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bd80      	pop	{r7, pc}
 8012e12:	bf00      	nop
 8012e14:	24000054 	.word	0x24000054

08012e18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b086      	sub	sp, #24
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012e20:	2182      	movs	r1, #130	@ 0x82
 8012e22:	4818      	ldr	r0, [pc, #96]	@ (8012e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012e24:	f000 fd17 	bl	8013856 <USBD_GetEpDesc>
 8012e28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012e2a:	2101      	movs	r1, #1
 8012e2c:	4815      	ldr	r0, [pc, #84]	@ (8012e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012e2e:	f000 fd12 	bl	8013856 <USBD_GetEpDesc>
 8012e32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012e34:	2181      	movs	r1, #129	@ 0x81
 8012e36:	4813      	ldr	r0, [pc, #76]	@ (8012e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012e38:	f000 fd0d 	bl	8013856 <USBD_GetEpDesc>
 8012e3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012e3e:	697b      	ldr	r3, [r7, #20]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d002      	beq.n	8012e4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8012e44:	697b      	ldr	r3, [r7, #20]
 8012e46:	2210      	movs	r2, #16
 8012e48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012e4a:	693b      	ldr	r3, [r7, #16]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d006      	beq.n	8012e5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	2200      	movs	r2, #0
 8012e54:	711a      	strb	r2, [r3, #4]
 8012e56:	2200      	movs	r2, #0
 8012e58:	f042 0202 	orr.w	r2, r2, #2
 8012e5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d006      	beq.n	8012e72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	2200      	movs	r2, #0
 8012e68:	711a      	strb	r2, [r3, #4]
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	f042 0202 	orr.w	r2, r2, #2
 8012e70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2243      	movs	r2, #67	@ 0x43
 8012e76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012e78:	4b02      	ldr	r3, [pc, #8]	@ (8012e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	3718      	adds	r7, #24
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}
 8012e82:	bf00      	nop
 8012e84:	24000054 	.word	0x24000054

08012e88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b086      	sub	sp, #24
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012e90:	2182      	movs	r1, #130	@ 0x82
 8012e92:	4818      	ldr	r0, [pc, #96]	@ (8012ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012e94:	f000 fcdf 	bl	8013856 <USBD_GetEpDesc>
 8012e98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012e9a:	2101      	movs	r1, #1
 8012e9c:	4815      	ldr	r0, [pc, #84]	@ (8012ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012e9e:	f000 fcda 	bl	8013856 <USBD_GetEpDesc>
 8012ea2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012ea4:	2181      	movs	r1, #129	@ 0x81
 8012ea6:	4813      	ldr	r0, [pc, #76]	@ (8012ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012ea8:	f000 fcd5 	bl	8013856 <USBD_GetEpDesc>
 8012eac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d002      	beq.n	8012eba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012eb4:	697b      	ldr	r3, [r7, #20]
 8012eb6:	2210      	movs	r2, #16
 8012eb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d006      	beq.n	8012ece <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012ec8:	711a      	strb	r2, [r3, #4]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d006      	beq.n	8012ee2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012edc:	711a      	strb	r2, [r3, #4]
 8012ede:	2200      	movs	r2, #0
 8012ee0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	2243      	movs	r2, #67	@ 0x43
 8012ee6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012ee8:	4b02      	ldr	r3, [pc, #8]	@ (8012ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	3718      	adds	r7, #24
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd80      	pop	{r7, pc}
 8012ef2:	bf00      	nop
 8012ef4:	24000054 	.word	0x24000054

08012ef8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012ef8:	b480      	push	{r7}
 8012efa:	b083      	sub	sp, #12
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	220a      	movs	r2, #10
 8012f04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012f06:	4b03      	ldr	r3, [pc, #12]	@ (8012f14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	370c      	adds	r7, #12
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f12:	4770      	bx	lr
 8012f14:	24000010 	.word	0x24000010

08012f18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012f18:	b480      	push	{r7}
 8012f1a:	b083      	sub	sp, #12
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
 8012f20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d101      	bne.n	8012f2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012f28:	2303      	movs	r3, #3
 8012f2a:	e009      	b.n	8012f40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012f32:	687a      	ldr	r2, [r7, #4]
 8012f34:	33b0      	adds	r3, #176	@ 0xb0
 8012f36:	009b      	lsls	r3, r3, #2
 8012f38:	4413      	add	r3, r2
 8012f3a:	683a      	ldr	r2, [r7, #0]
 8012f3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8012f3e:	2300      	movs	r3, #0
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	370c      	adds	r7, #12
 8012f44:	46bd      	mov	sp, r7
 8012f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4a:	4770      	bx	lr

08012f4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b087      	sub	sp, #28
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	60f8      	str	r0, [r7, #12]
 8012f54:	60b9      	str	r1, [r7, #8]
 8012f56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	32b0      	adds	r2, #176	@ 0xb0
 8012f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012f68:	697b      	ldr	r3, [r7, #20]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d101      	bne.n	8012f72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012f6e:	2303      	movs	r3, #3
 8012f70:	e008      	b.n	8012f84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8012f72:	697b      	ldr	r3, [r7, #20]
 8012f74:	68ba      	ldr	r2, [r7, #8]
 8012f76:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8012f7a:	697b      	ldr	r3, [r7, #20]
 8012f7c:	687a      	ldr	r2, [r7, #4]
 8012f7e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8012f82:	2300      	movs	r3, #0
}
 8012f84:	4618      	mov	r0, r3
 8012f86:	371c      	adds	r7, #28
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8e:	4770      	bx	lr

08012f90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012f90:	b480      	push	{r7}
 8012f92:	b085      	sub	sp, #20
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	32b0      	adds	r2, #176	@ 0xb0
 8012fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fa8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d101      	bne.n	8012fb4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012fb0:	2303      	movs	r3, #3
 8012fb2:	e004      	b.n	8012fbe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	683a      	ldr	r2, [r7, #0]
 8012fb8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8012fbc:	2300      	movs	r3, #0
}
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	3714      	adds	r7, #20
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc8:	4770      	bx	lr
	...

08012fcc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b084      	sub	sp, #16
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	32b0      	adds	r2, #176	@ 0xb0
 8012fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fe2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d101      	bne.n	8012ff2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012fee:	2303      	movs	r3, #3
 8012ff0:	e025      	b.n	801303e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d11f      	bne.n	801303c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	2201      	movs	r2, #1
 8013000:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013004:	4b10      	ldr	r3, [pc, #64]	@ (8013048 <USBD_CDC_TransmitPacket+0x7c>)
 8013006:	781b      	ldrb	r3, [r3, #0]
 8013008:	f003 020f 	and.w	r2, r3, #15
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013012:	6878      	ldr	r0, [r7, #4]
 8013014:	4613      	mov	r3, r2
 8013016:	009b      	lsls	r3, r3, #2
 8013018:	4413      	add	r3, r2
 801301a:	009b      	lsls	r3, r3, #2
 801301c:	4403      	add	r3, r0
 801301e:	3318      	adds	r3, #24
 8013020:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013022:	4b09      	ldr	r3, [pc, #36]	@ (8013048 <USBD_CDC_TransmitPacket+0x7c>)
 8013024:	7819      	ldrb	r1, [r3, #0]
 8013026:	68bb      	ldr	r3, [r7, #8]
 8013028:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f002 f819 	bl	801506a <USBD_LL_Transmit>

    ret = USBD_OK;
 8013038:	2300      	movs	r3, #0
 801303a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801303c:	7bfb      	ldrb	r3, [r7, #15]
}
 801303e:	4618      	mov	r0, r3
 8013040:	3710      	adds	r7, #16
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}
 8013046:	bf00      	nop
 8013048:	24000097 	.word	0x24000097

0801304c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b084      	sub	sp, #16
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	32b0      	adds	r2, #176	@ 0xb0
 801305e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013062:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	32b0      	adds	r2, #176	@ 0xb0
 801306e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d101      	bne.n	801307a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013076:	2303      	movs	r3, #3
 8013078:	e018      	b.n	80130ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	7c1b      	ldrb	r3, [r3, #16]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d10a      	bne.n	8013098 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013082:	4b0c      	ldr	r3, [pc, #48]	@ (80130b4 <USBD_CDC_ReceivePacket+0x68>)
 8013084:	7819      	ldrb	r1, [r3, #0]
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801308c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f002 f80b 	bl	80150ac <USBD_LL_PrepareReceive>
 8013096:	e008      	b.n	80130aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013098:	4b06      	ldr	r3, [pc, #24]	@ (80130b4 <USBD_CDC_ReceivePacket+0x68>)
 801309a:	7819      	ldrb	r1, [r3, #0]
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80130a2:	2340      	movs	r3, #64	@ 0x40
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f002 f801 	bl	80150ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80130aa:	2300      	movs	r3, #0
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3710      	adds	r7, #16
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}
 80130b4:	24000098 	.word	0x24000098

080130b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b086      	sub	sp, #24
 80130bc:	af00      	add	r7, sp, #0
 80130be:	60f8      	str	r0, [r7, #12]
 80130c0:	60b9      	str	r1, [r7, #8]
 80130c2:	4613      	mov	r3, r2
 80130c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d101      	bne.n	80130d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80130cc:	2303      	movs	r3, #3
 80130ce:	e01f      	b.n	8013110 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	2200      	movs	r2, #0
 80130d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	2200      	movs	r2, #0
 80130dc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	2200      	movs	r2, #0
 80130e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d003      	beq.n	80130f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	68ba      	ldr	r2, [r7, #8]
 80130f2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	2201      	movs	r2, #1
 80130fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	79fa      	ldrb	r2, [r7, #7]
 8013102:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013104:	68f8      	ldr	r0, [r7, #12]
 8013106:	f001 fe77 	bl	8014df8 <USBD_LL_Init>
 801310a:	4603      	mov	r3, r0
 801310c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801310e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013110:	4618      	mov	r0, r3
 8013112:	3718      	adds	r7, #24
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}

08013118 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b084      	sub	sp, #16
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013122:	2300      	movs	r3, #0
 8013124:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d101      	bne.n	8013130 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801312c:	2303      	movs	r3, #3
 801312e:	e025      	b.n	801317c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	683a      	ldr	r2, [r7, #0]
 8013134:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	32ae      	adds	r2, #174	@ 0xae
 8013142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013148:	2b00      	cmp	r3, #0
 801314a:	d00f      	beq.n	801316c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	32ae      	adds	r2, #174	@ 0xae
 8013156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801315c:	f107 020e 	add.w	r2, r7, #14
 8013160:	4610      	mov	r0, r2
 8013162:	4798      	blx	r3
 8013164:	4602      	mov	r2, r0
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013172:	1c5a      	adds	r2, r3, #1
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801317a:	2300      	movs	r3, #0
}
 801317c:	4618      	mov	r0, r3
 801317e:	3710      	adds	r7, #16
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}

08013184 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b082      	sub	sp, #8
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	f001 fe83 	bl	8014e98 <USBD_LL_Start>
 8013192:	4603      	mov	r3, r0
}
 8013194:	4618      	mov	r0, r3
 8013196:	3708      	adds	r7, #8
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}

0801319c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801319c:	b480      	push	{r7}
 801319e:	b083      	sub	sp, #12
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80131a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	370c      	adds	r7, #12
 80131aa:	46bd      	mov	sp, r7
 80131ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b0:	4770      	bx	lr

080131b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80131b2:	b580      	push	{r7, lr}
 80131b4:	b084      	sub	sp, #16
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	6078      	str	r0, [r7, #4]
 80131ba:	460b      	mov	r3, r1
 80131bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80131be:	2300      	movs	r3, #0
 80131c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d009      	beq.n	80131e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	78fa      	ldrb	r2, [r7, #3]
 80131d6:	4611      	mov	r1, r2
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	4798      	blx	r3
 80131dc:	4603      	mov	r3, r0
 80131de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80131e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80131e2:	4618      	mov	r0, r3
 80131e4:	3710      	adds	r7, #16
 80131e6:	46bd      	mov	sp, r7
 80131e8:	bd80      	pop	{r7, pc}

080131ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80131ea:	b580      	push	{r7, lr}
 80131ec:	b084      	sub	sp, #16
 80131ee:	af00      	add	r7, sp, #0
 80131f0:	6078      	str	r0, [r7, #4]
 80131f2:	460b      	mov	r3, r1
 80131f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80131f6:	2300      	movs	r3, #0
 80131f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	78fa      	ldrb	r2, [r7, #3]
 8013204:	4611      	mov	r1, r2
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	4798      	blx	r3
 801320a:	4603      	mov	r3, r0
 801320c:	2b00      	cmp	r3, #0
 801320e:	d001      	beq.n	8013214 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013210:	2303      	movs	r3, #3
 8013212:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013214:	7bfb      	ldrb	r3, [r7, #15]
}
 8013216:	4618      	mov	r0, r3
 8013218:	3710      	adds	r7, #16
 801321a:	46bd      	mov	sp, r7
 801321c:	bd80      	pop	{r7, pc}

0801321e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801321e:	b580      	push	{r7, lr}
 8013220:	b084      	sub	sp, #16
 8013222:	af00      	add	r7, sp, #0
 8013224:	6078      	str	r0, [r7, #4]
 8013226:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801322e:	6839      	ldr	r1, [r7, #0]
 8013230:	4618      	mov	r0, r3
 8013232:	f001 f936 	bl	80144a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	2201      	movs	r2, #1
 801323a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013244:	461a      	mov	r2, r3
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013252:	f003 031f 	and.w	r3, r3, #31
 8013256:	2b02      	cmp	r3, #2
 8013258:	d01a      	beq.n	8013290 <USBD_LL_SetupStage+0x72>
 801325a:	2b02      	cmp	r3, #2
 801325c:	d822      	bhi.n	80132a4 <USBD_LL_SetupStage+0x86>
 801325e:	2b00      	cmp	r3, #0
 8013260:	d002      	beq.n	8013268 <USBD_LL_SetupStage+0x4a>
 8013262:	2b01      	cmp	r3, #1
 8013264:	d00a      	beq.n	801327c <USBD_LL_SetupStage+0x5e>
 8013266:	e01d      	b.n	80132a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801326e:	4619      	mov	r1, r3
 8013270:	6878      	ldr	r0, [r7, #4]
 8013272:	f000 fb63 	bl	801393c <USBD_StdDevReq>
 8013276:	4603      	mov	r3, r0
 8013278:	73fb      	strb	r3, [r7, #15]
      break;
 801327a:	e020      	b.n	80132be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013282:	4619      	mov	r1, r3
 8013284:	6878      	ldr	r0, [r7, #4]
 8013286:	f000 fbcb 	bl	8013a20 <USBD_StdItfReq>
 801328a:	4603      	mov	r3, r0
 801328c:	73fb      	strb	r3, [r7, #15]
      break;
 801328e:	e016      	b.n	80132be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013296:	4619      	mov	r1, r3
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	f000 fc2d 	bl	8013af8 <USBD_StdEPReq>
 801329e:	4603      	mov	r3, r0
 80132a0:	73fb      	strb	r3, [r7, #15]
      break;
 80132a2:	e00c      	b.n	80132be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80132aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80132ae:	b2db      	uxtb	r3, r3
 80132b0:	4619      	mov	r1, r3
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f001 fe50 	bl	8014f58 <USBD_LL_StallEP>
 80132b8:	4603      	mov	r3, r0
 80132ba:	73fb      	strb	r3, [r7, #15]
      break;
 80132bc:	bf00      	nop
  }

  return ret;
 80132be:	7bfb      	ldrb	r3, [r7, #15]
}
 80132c0:	4618      	mov	r0, r3
 80132c2:	3710      	adds	r7, #16
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}

080132c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b086      	sub	sp, #24
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	460b      	mov	r3, r1
 80132d2:	607a      	str	r2, [r7, #4]
 80132d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80132d6:	2300      	movs	r3, #0
 80132d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80132da:	7afb      	ldrb	r3, [r7, #11]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d16e      	bne.n	80133be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80132e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80132ee:	2b03      	cmp	r3, #3
 80132f0:	f040 8098 	bne.w	8013424 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80132f4:	693b      	ldr	r3, [r7, #16]
 80132f6:	689a      	ldr	r2, [r3, #8]
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	68db      	ldr	r3, [r3, #12]
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d913      	bls.n	8013328 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	689a      	ldr	r2, [r3, #8]
 8013304:	693b      	ldr	r3, [r7, #16]
 8013306:	68db      	ldr	r3, [r3, #12]
 8013308:	1ad2      	subs	r2, r2, r3
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801330e:	693b      	ldr	r3, [r7, #16]
 8013310:	68da      	ldr	r2, [r3, #12]
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	689b      	ldr	r3, [r3, #8]
 8013316:	4293      	cmp	r3, r2
 8013318:	bf28      	it	cs
 801331a:	4613      	movcs	r3, r2
 801331c:	461a      	mov	r2, r3
 801331e:	6879      	ldr	r1, [r7, #4]
 8013320:	68f8      	ldr	r0, [r7, #12]
 8013322:	f001 f9be 	bl	80146a2 <USBD_CtlContinueRx>
 8013326:	e07d      	b.n	8013424 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801332e:	f003 031f 	and.w	r3, r3, #31
 8013332:	2b02      	cmp	r3, #2
 8013334:	d014      	beq.n	8013360 <USBD_LL_DataOutStage+0x98>
 8013336:	2b02      	cmp	r3, #2
 8013338:	d81d      	bhi.n	8013376 <USBD_LL_DataOutStage+0xae>
 801333a:	2b00      	cmp	r3, #0
 801333c:	d002      	beq.n	8013344 <USBD_LL_DataOutStage+0x7c>
 801333e:	2b01      	cmp	r3, #1
 8013340:	d003      	beq.n	801334a <USBD_LL_DataOutStage+0x82>
 8013342:	e018      	b.n	8013376 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013344:	2300      	movs	r3, #0
 8013346:	75bb      	strb	r3, [r7, #22]
            break;
 8013348:	e018      	b.n	801337c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013350:	b2db      	uxtb	r3, r3
 8013352:	4619      	mov	r1, r3
 8013354:	68f8      	ldr	r0, [r7, #12]
 8013356:	f000 fa64 	bl	8013822 <USBD_CoreFindIF>
 801335a:	4603      	mov	r3, r0
 801335c:	75bb      	strb	r3, [r7, #22]
            break;
 801335e:	e00d      	b.n	801337c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013366:	b2db      	uxtb	r3, r3
 8013368:	4619      	mov	r1, r3
 801336a:	68f8      	ldr	r0, [r7, #12]
 801336c:	f000 fa66 	bl	801383c <USBD_CoreFindEP>
 8013370:	4603      	mov	r3, r0
 8013372:	75bb      	strb	r3, [r7, #22]
            break;
 8013374:	e002      	b.n	801337c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013376:	2300      	movs	r3, #0
 8013378:	75bb      	strb	r3, [r7, #22]
            break;
 801337a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801337c:	7dbb      	ldrb	r3, [r7, #22]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d119      	bne.n	80133b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013388:	b2db      	uxtb	r3, r3
 801338a:	2b03      	cmp	r3, #3
 801338c:	d113      	bne.n	80133b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801338e:	7dba      	ldrb	r2, [r7, #22]
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	32ae      	adds	r2, #174	@ 0xae
 8013394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013398:	691b      	ldr	r3, [r3, #16]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d00b      	beq.n	80133b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801339e:	7dba      	ldrb	r2, [r7, #22]
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80133a6:	7dba      	ldrb	r2, [r7, #22]
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	32ae      	adds	r2, #174	@ 0xae
 80133ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133b0:	691b      	ldr	r3, [r3, #16]
 80133b2:	68f8      	ldr	r0, [r7, #12]
 80133b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80133b6:	68f8      	ldr	r0, [r7, #12]
 80133b8:	f001 f984 	bl	80146c4 <USBD_CtlSendStatus>
 80133bc:	e032      	b.n	8013424 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80133be:	7afb      	ldrb	r3, [r7, #11]
 80133c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80133c4:	b2db      	uxtb	r3, r3
 80133c6:	4619      	mov	r1, r3
 80133c8:	68f8      	ldr	r0, [r7, #12]
 80133ca:	f000 fa37 	bl	801383c <USBD_CoreFindEP>
 80133ce:	4603      	mov	r3, r0
 80133d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80133d2:	7dbb      	ldrb	r3, [r7, #22]
 80133d4:	2bff      	cmp	r3, #255	@ 0xff
 80133d6:	d025      	beq.n	8013424 <USBD_LL_DataOutStage+0x15c>
 80133d8:	7dbb      	ldrb	r3, [r7, #22]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d122      	bne.n	8013424 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80133e4:	b2db      	uxtb	r3, r3
 80133e6:	2b03      	cmp	r3, #3
 80133e8:	d117      	bne.n	801341a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80133ea:	7dba      	ldrb	r2, [r7, #22]
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	32ae      	adds	r2, #174	@ 0xae
 80133f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133f4:	699b      	ldr	r3, [r3, #24]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d00f      	beq.n	801341a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80133fa:	7dba      	ldrb	r2, [r7, #22]
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013402:	7dba      	ldrb	r2, [r7, #22]
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	32ae      	adds	r2, #174	@ 0xae
 8013408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801340c:	699b      	ldr	r3, [r3, #24]
 801340e:	7afa      	ldrb	r2, [r7, #11]
 8013410:	4611      	mov	r1, r2
 8013412:	68f8      	ldr	r0, [r7, #12]
 8013414:	4798      	blx	r3
 8013416:	4603      	mov	r3, r0
 8013418:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801341a:	7dfb      	ldrb	r3, [r7, #23]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d001      	beq.n	8013424 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013420:	7dfb      	ldrb	r3, [r7, #23]
 8013422:	e000      	b.n	8013426 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013424:	2300      	movs	r3, #0
}
 8013426:	4618      	mov	r0, r3
 8013428:	3718      	adds	r7, #24
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}

0801342e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801342e:	b580      	push	{r7, lr}
 8013430:	b086      	sub	sp, #24
 8013432:	af00      	add	r7, sp, #0
 8013434:	60f8      	str	r0, [r7, #12]
 8013436:	460b      	mov	r3, r1
 8013438:	607a      	str	r2, [r7, #4]
 801343a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801343c:	7afb      	ldrb	r3, [r7, #11]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d16f      	bne.n	8013522 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	3314      	adds	r3, #20
 8013446:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801344e:	2b02      	cmp	r3, #2
 8013450:	d15a      	bne.n	8013508 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	689a      	ldr	r2, [r3, #8]
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	68db      	ldr	r3, [r3, #12]
 801345a:	429a      	cmp	r2, r3
 801345c:	d914      	bls.n	8013488 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801345e:	693b      	ldr	r3, [r7, #16]
 8013460:	689a      	ldr	r2, [r3, #8]
 8013462:	693b      	ldr	r3, [r7, #16]
 8013464:	68db      	ldr	r3, [r3, #12]
 8013466:	1ad2      	subs	r2, r2, r3
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	689b      	ldr	r3, [r3, #8]
 8013470:	461a      	mov	r2, r3
 8013472:	6879      	ldr	r1, [r7, #4]
 8013474:	68f8      	ldr	r0, [r7, #12]
 8013476:	f001 f8e6 	bl	8014646 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801347a:	2300      	movs	r3, #0
 801347c:	2200      	movs	r2, #0
 801347e:	2100      	movs	r1, #0
 8013480:	68f8      	ldr	r0, [r7, #12]
 8013482:	f001 fe13 	bl	80150ac <USBD_LL_PrepareReceive>
 8013486:	e03f      	b.n	8013508 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013488:	693b      	ldr	r3, [r7, #16]
 801348a:	68da      	ldr	r2, [r3, #12]
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	689b      	ldr	r3, [r3, #8]
 8013490:	429a      	cmp	r2, r3
 8013492:	d11c      	bne.n	80134ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	685a      	ldr	r2, [r3, #4]
 8013498:	693b      	ldr	r3, [r7, #16]
 801349a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801349c:	429a      	cmp	r2, r3
 801349e:	d316      	bcc.n	80134ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	685a      	ldr	r2, [r3, #4]
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80134aa:	429a      	cmp	r2, r3
 80134ac:	d20f      	bcs.n	80134ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80134ae:	2200      	movs	r2, #0
 80134b0:	2100      	movs	r1, #0
 80134b2:	68f8      	ldr	r0, [r7, #12]
 80134b4:	f001 f8c7 	bl	8014646 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	2200      	movs	r2, #0
 80134bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80134c0:	2300      	movs	r3, #0
 80134c2:	2200      	movs	r2, #0
 80134c4:	2100      	movs	r1, #0
 80134c6:	68f8      	ldr	r0, [r7, #12]
 80134c8:	f001 fdf0 	bl	80150ac <USBD_LL_PrepareReceive>
 80134cc:	e01c      	b.n	8013508 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134d4:	b2db      	uxtb	r3, r3
 80134d6:	2b03      	cmp	r3, #3
 80134d8:	d10f      	bne.n	80134fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80134e0:	68db      	ldr	r3, [r3, #12]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d009      	beq.n	80134fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	2200      	movs	r2, #0
 80134ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80134f4:	68db      	ldr	r3, [r3, #12]
 80134f6:	68f8      	ldr	r0, [r7, #12]
 80134f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80134fa:	2180      	movs	r1, #128	@ 0x80
 80134fc:	68f8      	ldr	r0, [r7, #12]
 80134fe:	f001 fd2b 	bl	8014f58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013502:	68f8      	ldr	r0, [r7, #12]
 8013504:	f001 f8f1 	bl	80146ea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801350e:	2b00      	cmp	r3, #0
 8013510:	d03a      	beq.n	8013588 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013512:	68f8      	ldr	r0, [r7, #12]
 8013514:	f7ff fe42 	bl	801319c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	2200      	movs	r2, #0
 801351c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013520:	e032      	b.n	8013588 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013522:	7afb      	ldrb	r3, [r7, #11]
 8013524:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013528:	b2db      	uxtb	r3, r3
 801352a:	4619      	mov	r1, r3
 801352c:	68f8      	ldr	r0, [r7, #12]
 801352e:	f000 f985 	bl	801383c <USBD_CoreFindEP>
 8013532:	4603      	mov	r3, r0
 8013534:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013536:	7dfb      	ldrb	r3, [r7, #23]
 8013538:	2bff      	cmp	r3, #255	@ 0xff
 801353a:	d025      	beq.n	8013588 <USBD_LL_DataInStage+0x15a>
 801353c:	7dfb      	ldrb	r3, [r7, #23]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d122      	bne.n	8013588 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013548:	b2db      	uxtb	r3, r3
 801354a:	2b03      	cmp	r3, #3
 801354c:	d11c      	bne.n	8013588 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801354e:	7dfa      	ldrb	r2, [r7, #23]
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	32ae      	adds	r2, #174	@ 0xae
 8013554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013558:	695b      	ldr	r3, [r3, #20]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d014      	beq.n	8013588 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801355e:	7dfa      	ldrb	r2, [r7, #23]
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013566:	7dfa      	ldrb	r2, [r7, #23]
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	32ae      	adds	r2, #174	@ 0xae
 801356c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013570:	695b      	ldr	r3, [r3, #20]
 8013572:	7afa      	ldrb	r2, [r7, #11]
 8013574:	4611      	mov	r1, r2
 8013576:	68f8      	ldr	r0, [r7, #12]
 8013578:	4798      	blx	r3
 801357a:	4603      	mov	r3, r0
 801357c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801357e:	7dbb      	ldrb	r3, [r7, #22]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d001      	beq.n	8013588 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013584:	7dbb      	ldrb	r3, [r7, #22]
 8013586:	e000      	b.n	801358a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013588:	2300      	movs	r3, #0
}
 801358a:	4618      	mov	r0, r3
 801358c:	3718      	adds	r7, #24
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}

08013592 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013592:	b580      	push	{r7, lr}
 8013594:	b084      	sub	sp, #16
 8013596:	af00      	add	r7, sp, #0
 8013598:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801359a:	2300      	movs	r3, #0
 801359c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	2201      	movs	r2, #1
 80135a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	2200      	movs	r2, #0
 80135aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	2200      	movs	r2, #0
 80135b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	2200      	movs	r2, #0
 80135b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	2200      	movs	r2, #0
 80135c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d014      	beq.n	80135f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135d4:	685b      	ldr	r3, [r3, #4]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d00e      	beq.n	80135f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	687a      	ldr	r2, [r7, #4]
 80135e4:	6852      	ldr	r2, [r2, #4]
 80135e6:	b2d2      	uxtb	r2, r2
 80135e8:	4611      	mov	r1, r2
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	4798      	blx	r3
 80135ee:	4603      	mov	r3, r0
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d001      	beq.n	80135f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80135f4:	2303      	movs	r3, #3
 80135f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80135f8:	2340      	movs	r3, #64	@ 0x40
 80135fa:	2200      	movs	r2, #0
 80135fc:	2100      	movs	r1, #0
 80135fe:	6878      	ldr	r0, [r7, #4]
 8013600:	f001 fc65 	bl	8014ece <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2201      	movs	r2, #1
 8013608:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	2240      	movs	r2, #64	@ 0x40
 8013610:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013614:	2340      	movs	r3, #64	@ 0x40
 8013616:	2200      	movs	r2, #0
 8013618:	2180      	movs	r1, #128	@ 0x80
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f001 fc57 	bl	8014ece <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2201      	movs	r2, #1
 8013624:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	2240      	movs	r2, #64	@ 0x40
 801362a:	621a      	str	r2, [r3, #32]

  return ret;
 801362c:	7bfb      	ldrb	r3, [r7, #15]
}
 801362e:	4618      	mov	r0, r3
 8013630:	3710      	adds	r7, #16
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}

08013636 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013636:	b480      	push	{r7}
 8013638:	b083      	sub	sp, #12
 801363a:	af00      	add	r7, sp, #0
 801363c:	6078      	str	r0, [r7, #4]
 801363e:	460b      	mov	r3, r1
 8013640:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	78fa      	ldrb	r2, [r7, #3]
 8013646:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013648:	2300      	movs	r3, #0
}
 801364a:	4618      	mov	r0, r3
 801364c:	370c      	adds	r7, #12
 801364e:	46bd      	mov	sp, r7
 8013650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013654:	4770      	bx	lr

08013656 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013656:	b480      	push	{r7}
 8013658:	b083      	sub	sp, #12
 801365a:	af00      	add	r7, sp, #0
 801365c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013664:	b2db      	uxtb	r3, r3
 8013666:	2b04      	cmp	r3, #4
 8013668:	d006      	beq.n	8013678 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013670:	b2da      	uxtb	r2, r3
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2204      	movs	r2, #4
 801367c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013680:	2300      	movs	r3, #0
}
 8013682:	4618      	mov	r0, r3
 8013684:	370c      	adds	r7, #12
 8013686:	46bd      	mov	sp, r7
 8013688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368c:	4770      	bx	lr

0801368e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801368e:	b480      	push	{r7}
 8013690:	b083      	sub	sp, #12
 8013692:	af00      	add	r7, sp, #0
 8013694:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801369c:	b2db      	uxtb	r3, r3
 801369e:	2b04      	cmp	r3, #4
 80136a0:	d106      	bne.n	80136b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80136a8:	b2da      	uxtb	r2, r3
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80136b0:	2300      	movs	r3, #0
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	370c      	adds	r7, #12
 80136b6:	46bd      	mov	sp, r7
 80136b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136bc:	4770      	bx	lr

080136be <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80136be:	b580      	push	{r7, lr}
 80136c0:	b082      	sub	sp, #8
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80136cc:	b2db      	uxtb	r3, r3
 80136ce:	2b03      	cmp	r3, #3
 80136d0:	d110      	bne.n	80136f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d00b      	beq.n	80136f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80136e2:	69db      	ldr	r3, [r3, #28]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d005      	beq.n	80136f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80136ee:	69db      	ldr	r3, [r3, #28]
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80136f4:	2300      	movs	r3, #0
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	3708      	adds	r7, #8
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}

080136fe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80136fe:	b580      	push	{r7, lr}
 8013700:	b082      	sub	sp, #8
 8013702:	af00      	add	r7, sp, #0
 8013704:	6078      	str	r0, [r7, #4]
 8013706:	460b      	mov	r3, r1
 8013708:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	32ae      	adds	r2, #174	@ 0xae
 8013714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d101      	bne.n	8013720 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801371c:	2303      	movs	r3, #3
 801371e:	e01c      	b.n	801375a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013726:	b2db      	uxtb	r3, r3
 8013728:	2b03      	cmp	r3, #3
 801372a:	d115      	bne.n	8013758 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	32ae      	adds	r2, #174	@ 0xae
 8013736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801373a:	6a1b      	ldr	r3, [r3, #32]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d00b      	beq.n	8013758 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	32ae      	adds	r2, #174	@ 0xae
 801374a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801374e:	6a1b      	ldr	r3, [r3, #32]
 8013750:	78fa      	ldrb	r2, [r7, #3]
 8013752:	4611      	mov	r1, r2
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013758:	2300      	movs	r3, #0
}
 801375a:	4618      	mov	r0, r3
 801375c:	3708      	adds	r7, #8
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}

08013762 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013762:	b580      	push	{r7, lr}
 8013764:	b082      	sub	sp, #8
 8013766:	af00      	add	r7, sp, #0
 8013768:	6078      	str	r0, [r7, #4]
 801376a:	460b      	mov	r3, r1
 801376c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	32ae      	adds	r2, #174	@ 0xae
 8013778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d101      	bne.n	8013784 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013780:	2303      	movs	r3, #3
 8013782:	e01c      	b.n	80137be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801378a:	b2db      	uxtb	r3, r3
 801378c:	2b03      	cmp	r3, #3
 801378e:	d115      	bne.n	80137bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	32ae      	adds	r2, #174	@ 0xae
 801379a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d00b      	beq.n	80137bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	32ae      	adds	r2, #174	@ 0xae
 80137ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137b4:	78fa      	ldrb	r2, [r7, #3]
 80137b6:	4611      	mov	r1, r2
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80137bc:	2300      	movs	r3, #0
}
 80137be:	4618      	mov	r0, r3
 80137c0:	3708      	adds	r7, #8
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd80      	pop	{r7, pc}

080137c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80137c6:	b480      	push	{r7}
 80137c8:	b083      	sub	sp, #12
 80137ca:	af00      	add	r7, sp, #0
 80137cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80137ce:	2300      	movs	r3, #0
}
 80137d0:	4618      	mov	r0, r3
 80137d2:	370c      	adds	r7, #12
 80137d4:	46bd      	mov	sp, r7
 80137d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137da:	4770      	bx	lr

080137dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b084      	sub	sp, #16
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80137e4:	2300      	movs	r3, #0
 80137e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	2201      	movs	r2, #1
 80137ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d00e      	beq.n	8013818 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013800:	685b      	ldr	r3, [r3, #4]
 8013802:	687a      	ldr	r2, [r7, #4]
 8013804:	6852      	ldr	r2, [r2, #4]
 8013806:	b2d2      	uxtb	r2, r2
 8013808:	4611      	mov	r1, r2
 801380a:	6878      	ldr	r0, [r7, #4]
 801380c:	4798      	blx	r3
 801380e:	4603      	mov	r3, r0
 8013810:	2b00      	cmp	r3, #0
 8013812:	d001      	beq.n	8013818 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8013814:	2303      	movs	r3, #3
 8013816:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013818:	7bfb      	ldrb	r3, [r7, #15]
}
 801381a:	4618      	mov	r0, r3
 801381c:	3710      	adds	r7, #16
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}

08013822 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013822:	b480      	push	{r7}
 8013824:	b083      	sub	sp, #12
 8013826:	af00      	add	r7, sp, #0
 8013828:	6078      	str	r0, [r7, #4]
 801382a:	460b      	mov	r3, r1
 801382c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801382e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013830:	4618      	mov	r0, r3
 8013832:	370c      	adds	r7, #12
 8013834:	46bd      	mov	sp, r7
 8013836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383a:	4770      	bx	lr

0801383c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801383c:	b480      	push	{r7}
 801383e:	b083      	sub	sp, #12
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	460b      	mov	r3, r1
 8013846:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013848:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801384a:	4618      	mov	r0, r3
 801384c:	370c      	adds	r7, #12
 801384e:	46bd      	mov	sp, r7
 8013850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013854:	4770      	bx	lr

08013856 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013856:	b580      	push	{r7, lr}
 8013858:	b086      	sub	sp, #24
 801385a:	af00      	add	r7, sp, #0
 801385c:	6078      	str	r0, [r7, #4]
 801385e:	460b      	mov	r3, r1
 8013860:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801386a:	2300      	movs	r3, #0
 801386c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	885b      	ldrh	r3, [r3, #2]
 8013872:	b29b      	uxth	r3, r3
 8013874:	68fa      	ldr	r2, [r7, #12]
 8013876:	7812      	ldrb	r2, [r2, #0]
 8013878:	4293      	cmp	r3, r2
 801387a:	d91f      	bls.n	80138bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	781b      	ldrb	r3, [r3, #0]
 8013880:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013882:	e013      	b.n	80138ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013884:	f107 030a 	add.w	r3, r7, #10
 8013888:	4619      	mov	r1, r3
 801388a:	6978      	ldr	r0, [r7, #20]
 801388c:	f000 f81b 	bl	80138c6 <USBD_GetNextDesc>
 8013890:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	785b      	ldrb	r3, [r3, #1]
 8013896:	2b05      	cmp	r3, #5
 8013898:	d108      	bne.n	80138ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801389e:	693b      	ldr	r3, [r7, #16]
 80138a0:	789b      	ldrb	r3, [r3, #2]
 80138a2:	78fa      	ldrb	r2, [r7, #3]
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d008      	beq.n	80138ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80138a8:	2300      	movs	r3, #0
 80138aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	885b      	ldrh	r3, [r3, #2]
 80138b0:	b29a      	uxth	r2, r3
 80138b2:	897b      	ldrh	r3, [r7, #10]
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d8e5      	bhi.n	8013884 <USBD_GetEpDesc+0x2e>
 80138b8:	e000      	b.n	80138bc <USBD_GetEpDesc+0x66>
          break;
 80138ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80138bc:	693b      	ldr	r3, [r7, #16]
}
 80138be:	4618      	mov	r0, r3
 80138c0:	3718      	adds	r7, #24
 80138c2:	46bd      	mov	sp, r7
 80138c4:	bd80      	pop	{r7, pc}

080138c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80138c6:	b480      	push	{r7}
 80138c8:	b085      	sub	sp, #20
 80138ca:	af00      	add	r7, sp, #0
 80138cc:	6078      	str	r0, [r7, #4]
 80138ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80138d4:	683b      	ldr	r3, [r7, #0]
 80138d6:	881b      	ldrh	r3, [r3, #0]
 80138d8:	68fa      	ldr	r2, [r7, #12]
 80138da:	7812      	ldrb	r2, [r2, #0]
 80138dc:	4413      	add	r3, r2
 80138de:	b29a      	uxth	r2, r3
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	781b      	ldrb	r3, [r3, #0]
 80138e8:	461a      	mov	r2, r3
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	4413      	add	r3, r2
 80138ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80138f0:	68fb      	ldr	r3, [r7, #12]
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	3714      	adds	r7, #20
 80138f6:	46bd      	mov	sp, r7
 80138f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fc:	4770      	bx	lr

080138fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80138fe:	b480      	push	{r7}
 8013900:	b087      	sub	sp, #28
 8013902:	af00      	add	r7, sp, #0
 8013904:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	781b      	ldrb	r3, [r3, #0]
 801390e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013910:	697b      	ldr	r3, [r7, #20]
 8013912:	3301      	adds	r3, #1
 8013914:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013916:	697b      	ldr	r3, [r7, #20]
 8013918:	781b      	ldrb	r3, [r3, #0]
 801391a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801391c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8013920:	021b      	lsls	r3, r3, #8
 8013922:	b21a      	sxth	r2, r3
 8013924:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013928:	4313      	orrs	r3, r2
 801392a:	b21b      	sxth	r3, r3
 801392c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801392e:	89fb      	ldrh	r3, [r7, #14]
}
 8013930:	4618      	mov	r0, r3
 8013932:	371c      	adds	r7, #28
 8013934:	46bd      	mov	sp, r7
 8013936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393a:	4770      	bx	lr

0801393c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b084      	sub	sp, #16
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013946:	2300      	movs	r3, #0
 8013948:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	781b      	ldrb	r3, [r3, #0]
 801394e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013952:	2b40      	cmp	r3, #64	@ 0x40
 8013954:	d005      	beq.n	8013962 <USBD_StdDevReq+0x26>
 8013956:	2b40      	cmp	r3, #64	@ 0x40
 8013958:	d857      	bhi.n	8013a0a <USBD_StdDevReq+0xce>
 801395a:	2b00      	cmp	r3, #0
 801395c:	d00f      	beq.n	801397e <USBD_StdDevReq+0x42>
 801395e:	2b20      	cmp	r3, #32
 8013960:	d153      	bne.n	8013a0a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	32ae      	adds	r2, #174	@ 0xae
 801396c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013970:	689b      	ldr	r3, [r3, #8]
 8013972:	6839      	ldr	r1, [r7, #0]
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	4798      	blx	r3
 8013978:	4603      	mov	r3, r0
 801397a:	73fb      	strb	r3, [r7, #15]
      break;
 801397c:	e04a      	b.n	8013a14 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	785b      	ldrb	r3, [r3, #1]
 8013982:	2b09      	cmp	r3, #9
 8013984:	d83b      	bhi.n	80139fe <USBD_StdDevReq+0xc2>
 8013986:	a201      	add	r2, pc, #4	@ (adr r2, 801398c <USBD_StdDevReq+0x50>)
 8013988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801398c:	080139e1 	.word	0x080139e1
 8013990:	080139f5 	.word	0x080139f5
 8013994:	080139ff 	.word	0x080139ff
 8013998:	080139eb 	.word	0x080139eb
 801399c:	080139ff 	.word	0x080139ff
 80139a0:	080139bf 	.word	0x080139bf
 80139a4:	080139b5 	.word	0x080139b5
 80139a8:	080139ff 	.word	0x080139ff
 80139ac:	080139d7 	.word	0x080139d7
 80139b0:	080139c9 	.word	0x080139c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80139b4:	6839      	ldr	r1, [r7, #0]
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f000 fa3c 	bl	8013e34 <USBD_GetDescriptor>
          break;
 80139bc:	e024      	b.n	8013a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80139be:	6839      	ldr	r1, [r7, #0]
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f000 fbcb 	bl	801415c <USBD_SetAddress>
          break;
 80139c6:	e01f      	b.n	8013a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80139c8:	6839      	ldr	r1, [r7, #0]
 80139ca:	6878      	ldr	r0, [r7, #4]
 80139cc:	f000 fc0a 	bl	80141e4 <USBD_SetConfig>
 80139d0:	4603      	mov	r3, r0
 80139d2:	73fb      	strb	r3, [r7, #15]
          break;
 80139d4:	e018      	b.n	8013a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80139d6:	6839      	ldr	r1, [r7, #0]
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f000 fcad 	bl	8014338 <USBD_GetConfig>
          break;
 80139de:	e013      	b.n	8013a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80139e0:	6839      	ldr	r1, [r7, #0]
 80139e2:	6878      	ldr	r0, [r7, #4]
 80139e4:	f000 fcde 	bl	80143a4 <USBD_GetStatus>
          break;
 80139e8:	e00e      	b.n	8013a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80139ea:	6839      	ldr	r1, [r7, #0]
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f000 fd0d 	bl	801440c <USBD_SetFeature>
          break;
 80139f2:	e009      	b.n	8013a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80139f4:	6839      	ldr	r1, [r7, #0]
 80139f6:	6878      	ldr	r0, [r7, #4]
 80139f8:	f000 fd31 	bl	801445e <USBD_ClrFeature>
          break;
 80139fc:	e004      	b.n	8013a08 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80139fe:	6839      	ldr	r1, [r7, #0]
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f000 fd88 	bl	8014516 <USBD_CtlError>
          break;
 8013a06:	bf00      	nop
      }
      break;
 8013a08:	e004      	b.n	8013a14 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013a0a:	6839      	ldr	r1, [r7, #0]
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f000 fd82 	bl	8014516 <USBD_CtlError>
      break;
 8013a12:	bf00      	nop
  }

  return ret;
 8013a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3710      	adds	r7, #16
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
 8013a1e:	bf00      	nop

08013a20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b084      	sub	sp, #16
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
 8013a28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013a2e:	683b      	ldr	r3, [r7, #0]
 8013a30:	781b      	ldrb	r3, [r3, #0]
 8013a32:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013a36:	2b40      	cmp	r3, #64	@ 0x40
 8013a38:	d005      	beq.n	8013a46 <USBD_StdItfReq+0x26>
 8013a3a:	2b40      	cmp	r3, #64	@ 0x40
 8013a3c:	d852      	bhi.n	8013ae4 <USBD_StdItfReq+0xc4>
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d001      	beq.n	8013a46 <USBD_StdItfReq+0x26>
 8013a42:	2b20      	cmp	r3, #32
 8013a44:	d14e      	bne.n	8013ae4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a4c:	b2db      	uxtb	r3, r3
 8013a4e:	3b01      	subs	r3, #1
 8013a50:	2b02      	cmp	r3, #2
 8013a52:	d840      	bhi.n	8013ad6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013a54:	683b      	ldr	r3, [r7, #0]
 8013a56:	889b      	ldrh	r3, [r3, #4]
 8013a58:	b2db      	uxtb	r3, r3
 8013a5a:	2b01      	cmp	r3, #1
 8013a5c:	d836      	bhi.n	8013acc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	889b      	ldrh	r3, [r3, #4]
 8013a62:	b2db      	uxtb	r3, r3
 8013a64:	4619      	mov	r1, r3
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f7ff fedb 	bl	8013822 <USBD_CoreFindIF>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013a70:	7bbb      	ldrb	r3, [r7, #14]
 8013a72:	2bff      	cmp	r3, #255	@ 0xff
 8013a74:	d01d      	beq.n	8013ab2 <USBD_StdItfReq+0x92>
 8013a76:	7bbb      	ldrb	r3, [r7, #14]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d11a      	bne.n	8013ab2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013a7c:	7bba      	ldrb	r2, [r7, #14]
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	32ae      	adds	r2, #174	@ 0xae
 8013a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a86:	689b      	ldr	r3, [r3, #8]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d00f      	beq.n	8013aac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013a8c:	7bba      	ldrb	r2, [r7, #14]
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013a94:	7bba      	ldrb	r2, [r7, #14]
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	32ae      	adds	r2, #174	@ 0xae
 8013a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a9e:	689b      	ldr	r3, [r3, #8]
 8013aa0:	6839      	ldr	r1, [r7, #0]
 8013aa2:	6878      	ldr	r0, [r7, #4]
 8013aa4:	4798      	blx	r3
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013aaa:	e004      	b.n	8013ab6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013aac:	2303      	movs	r3, #3
 8013aae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013ab0:	e001      	b.n	8013ab6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013ab2:	2303      	movs	r3, #3
 8013ab4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	88db      	ldrh	r3, [r3, #6]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d110      	bne.n	8013ae0 <USBD_StdItfReq+0xc0>
 8013abe:	7bfb      	ldrb	r3, [r7, #15]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d10d      	bne.n	8013ae0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013ac4:	6878      	ldr	r0, [r7, #4]
 8013ac6:	f000 fdfd 	bl	80146c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013aca:	e009      	b.n	8013ae0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013acc:	6839      	ldr	r1, [r7, #0]
 8013ace:	6878      	ldr	r0, [r7, #4]
 8013ad0:	f000 fd21 	bl	8014516 <USBD_CtlError>
          break;
 8013ad4:	e004      	b.n	8013ae0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013ad6:	6839      	ldr	r1, [r7, #0]
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f000 fd1c 	bl	8014516 <USBD_CtlError>
          break;
 8013ade:	e000      	b.n	8013ae2 <USBD_StdItfReq+0xc2>
          break;
 8013ae0:	bf00      	nop
      }
      break;
 8013ae2:	e004      	b.n	8013aee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013ae4:	6839      	ldr	r1, [r7, #0]
 8013ae6:	6878      	ldr	r0, [r7, #4]
 8013ae8:	f000 fd15 	bl	8014516 <USBD_CtlError>
      break;
 8013aec:	bf00      	nop
  }

  return ret;
 8013aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3710      	adds	r7, #16
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}

08013af8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b084      	sub	sp, #16
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
 8013b00:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013b02:	2300      	movs	r3, #0
 8013b04:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013b06:	683b      	ldr	r3, [r7, #0]
 8013b08:	889b      	ldrh	r3, [r3, #4]
 8013b0a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013b14:	2b40      	cmp	r3, #64	@ 0x40
 8013b16:	d007      	beq.n	8013b28 <USBD_StdEPReq+0x30>
 8013b18:	2b40      	cmp	r3, #64	@ 0x40
 8013b1a:	f200 817f 	bhi.w	8013e1c <USBD_StdEPReq+0x324>
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d02a      	beq.n	8013b78 <USBD_StdEPReq+0x80>
 8013b22:	2b20      	cmp	r3, #32
 8013b24:	f040 817a 	bne.w	8013e1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013b28:	7bbb      	ldrb	r3, [r7, #14]
 8013b2a:	4619      	mov	r1, r3
 8013b2c:	6878      	ldr	r0, [r7, #4]
 8013b2e:	f7ff fe85 	bl	801383c <USBD_CoreFindEP>
 8013b32:	4603      	mov	r3, r0
 8013b34:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013b36:	7b7b      	ldrb	r3, [r7, #13]
 8013b38:	2bff      	cmp	r3, #255	@ 0xff
 8013b3a:	f000 8174 	beq.w	8013e26 <USBD_StdEPReq+0x32e>
 8013b3e:	7b7b      	ldrb	r3, [r7, #13]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	f040 8170 	bne.w	8013e26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013b46:	7b7a      	ldrb	r2, [r7, #13]
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013b4e:	7b7a      	ldrb	r2, [r7, #13]
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	32ae      	adds	r2, #174	@ 0xae
 8013b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b58:	689b      	ldr	r3, [r3, #8]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	f000 8163 	beq.w	8013e26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013b60:	7b7a      	ldrb	r2, [r7, #13]
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	32ae      	adds	r2, #174	@ 0xae
 8013b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b6a:	689b      	ldr	r3, [r3, #8]
 8013b6c:	6839      	ldr	r1, [r7, #0]
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	4798      	blx	r3
 8013b72:	4603      	mov	r3, r0
 8013b74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013b76:	e156      	b.n	8013e26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	785b      	ldrb	r3, [r3, #1]
 8013b7c:	2b03      	cmp	r3, #3
 8013b7e:	d008      	beq.n	8013b92 <USBD_StdEPReq+0x9a>
 8013b80:	2b03      	cmp	r3, #3
 8013b82:	f300 8145 	bgt.w	8013e10 <USBD_StdEPReq+0x318>
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	f000 809b 	beq.w	8013cc2 <USBD_StdEPReq+0x1ca>
 8013b8c:	2b01      	cmp	r3, #1
 8013b8e:	d03c      	beq.n	8013c0a <USBD_StdEPReq+0x112>
 8013b90:	e13e      	b.n	8013e10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b98:	b2db      	uxtb	r3, r3
 8013b9a:	2b02      	cmp	r3, #2
 8013b9c:	d002      	beq.n	8013ba4 <USBD_StdEPReq+0xac>
 8013b9e:	2b03      	cmp	r3, #3
 8013ba0:	d016      	beq.n	8013bd0 <USBD_StdEPReq+0xd8>
 8013ba2:	e02c      	b.n	8013bfe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013ba4:	7bbb      	ldrb	r3, [r7, #14]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d00d      	beq.n	8013bc6 <USBD_StdEPReq+0xce>
 8013baa:	7bbb      	ldrb	r3, [r7, #14]
 8013bac:	2b80      	cmp	r3, #128	@ 0x80
 8013bae:	d00a      	beq.n	8013bc6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013bb0:	7bbb      	ldrb	r3, [r7, #14]
 8013bb2:	4619      	mov	r1, r3
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	f001 f9cf 	bl	8014f58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013bba:	2180      	movs	r1, #128	@ 0x80
 8013bbc:	6878      	ldr	r0, [r7, #4]
 8013bbe:	f001 f9cb 	bl	8014f58 <USBD_LL_StallEP>
 8013bc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013bc4:	e020      	b.n	8013c08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013bc6:	6839      	ldr	r1, [r7, #0]
 8013bc8:	6878      	ldr	r0, [r7, #4]
 8013bca:	f000 fca4 	bl	8014516 <USBD_CtlError>
              break;
 8013bce:	e01b      	b.n	8013c08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	885b      	ldrh	r3, [r3, #2]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d10e      	bne.n	8013bf6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013bd8:	7bbb      	ldrb	r3, [r7, #14]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d00b      	beq.n	8013bf6 <USBD_StdEPReq+0xfe>
 8013bde:	7bbb      	ldrb	r3, [r7, #14]
 8013be0:	2b80      	cmp	r3, #128	@ 0x80
 8013be2:	d008      	beq.n	8013bf6 <USBD_StdEPReq+0xfe>
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	88db      	ldrh	r3, [r3, #6]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d104      	bne.n	8013bf6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013bec:	7bbb      	ldrb	r3, [r7, #14]
 8013bee:	4619      	mov	r1, r3
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f001 f9b1 	bl	8014f58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f000 fd64 	bl	80146c4 <USBD_CtlSendStatus>

              break;
 8013bfc:	e004      	b.n	8013c08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013bfe:	6839      	ldr	r1, [r7, #0]
 8013c00:	6878      	ldr	r0, [r7, #4]
 8013c02:	f000 fc88 	bl	8014516 <USBD_CtlError>
              break;
 8013c06:	bf00      	nop
          }
          break;
 8013c08:	e107      	b.n	8013e1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c10:	b2db      	uxtb	r3, r3
 8013c12:	2b02      	cmp	r3, #2
 8013c14:	d002      	beq.n	8013c1c <USBD_StdEPReq+0x124>
 8013c16:	2b03      	cmp	r3, #3
 8013c18:	d016      	beq.n	8013c48 <USBD_StdEPReq+0x150>
 8013c1a:	e04b      	b.n	8013cb4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013c1c:	7bbb      	ldrb	r3, [r7, #14]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d00d      	beq.n	8013c3e <USBD_StdEPReq+0x146>
 8013c22:	7bbb      	ldrb	r3, [r7, #14]
 8013c24:	2b80      	cmp	r3, #128	@ 0x80
 8013c26:	d00a      	beq.n	8013c3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013c28:	7bbb      	ldrb	r3, [r7, #14]
 8013c2a:	4619      	mov	r1, r3
 8013c2c:	6878      	ldr	r0, [r7, #4]
 8013c2e:	f001 f993 	bl	8014f58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013c32:	2180      	movs	r1, #128	@ 0x80
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	f001 f98f 	bl	8014f58 <USBD_LL_StallEP>
 8013c3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013c3c:	e040      	b.n	8013cc0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013c3e:	6839      	ldr	r1, [r7, #0]
 8013c40:	6878      	ldr	r0, [r7, #4]
 8013c42:	f000 fc68 	bl	8014516 <USBD_CtlError>
              break;
 8013c46:	e03b      	b.n	8013cc0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	885b      	ldrh	r3, [r3, #2]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d136      	bne.n	8013cbe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013c50:	7bbb      	ldrb	r3, [r7, #14]
 8013c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d004      	beq.n	8013c64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013c5a:	7bbb      	ldrb	r3, [r7, #14]
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	6878      	ldr	r0, [r7, #4]
 8013c60:	f001 f999 	bl	8014f96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f000 fd2d 	bl	80146c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013c6a:	7bbb      	ldrb	r3, [r7, #14]
 8013c6c:	4619      	mov	r1, r3
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f7ff fde4 	bl	801383c <USBD_CoreFindEP>
 8013c74:	4603      	mov	r3, r0
 8013c76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013c78:	7b7b      	ldrb	r3, [r7, #13]
 8013c7a:	2bff      	cmp	r3, #255	@ 0xff
 8013c7c:	d01f      	beq.n	8013cbe <USBD_StdEPReq+0x1c6>
 8013c7e:	7b7b      	ldrb	r3, [r7, #13]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d11c      	bne.n	8013cbe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013c84:	7b7a      	ldrb	r2, [r7, #13]
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013c8c:	7b7a      	ldrb	r2, [r7, #13]
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	32ae      	adds	r2, #174	@ 0xae
 8013c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c96:	689b      	ldr	r3, [r3, #8]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d010      	beq.n	8013cbe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013c9c:	7b7a      	ldrb	r2, [r7, #13]
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	32ae      	adds	r2, #174	@ 0xae
 8013ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ca6:	689b      	ldr	r3, [r3, #8]
 8013ca8:	6839      	ldr	r1, [r7, #0]
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	4798      	blx	r3
 8013cae:	4603      	mov	r3, r0
 8013cb0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013cb2:	e004      	b.n	8013cbe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013cb4:	6839      	ldr	r1, [r7, #0]
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f000 fc2d 	bl	8014516 <USBD_CtlError>
              break;
 8013cbc:	e000      	b.n	8013cc0 <USBD_StdEPReq+0x1c8>
              break;
 8013cbe:	bf00      	nop
          }
          break;
 8013cc0:	e0ab      	b.n	8013e1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013cc8:	b2db      	uxtb	r3, r3
 8013cca:	2b02      	cmp	r3, #2
 8013ccc:	d002      	beq.n	8013cd4 <USBD_StdEPReq+0x1dc>
 8013cce:	2b03      	cmp	r3, #3
 8013cd0:	d032      	beq.n	8013d38 <USBD_StdEPReq+0x240>
 8013cd2:	e097      	b.n	8013e04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013cd4:	7bbb      	ldrb	r3, [r7, #14]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d007      	beq.n	8013cea <USBD_StdEPReq+0x1f2>
 8013cda:	7bbb      	ldrb	r3, [r7, #14]
 8013cdc:	2b80      	cmp	r3, #128	@ 0x80
 8013cde:	d004      	beq.n	8013cea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013ce0:	6839      	ldr	r1, [r7, #0]
 8013ce2:	6878      	ldr	r0, [r7, #4]
 8013ce4:	f000 fc17 	bl	8014516 <USBD_CtlError>
                break;
 8013ce8:	e091      	b.n	8013e0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013cea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	da0b      	bge.n	8013d0a <USBD_StdEPReq+0x212>
 8013cf2:	7bbb      	ldrb	r3, [r7, #14]
 8013cf4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013cf8:	4613      	mov	r3, r2
 8013cfa:	009b      	lsls	r3, r3, #2
 8013cfc:	4413      	add	r3, r2
 8013cfe:	009b      	lsls	r3, r3, #2
 8013d00:	3310      	adds	r3, #16
 8013d02:	687a      	ldr	r2, [r7, #4]
 8013d04:	4413      	add	r3, r2
 8013d06:	3304      	adds	r3, #4
 8013d08:	e00b      	b.n	8013d22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013d0a:	7bbb      	ldrb	r3, [r7, #14]
 8013d0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013d10:	4613      	mov	r3, r2
 8013d12:	009b      	lsls	r3, r3, #2
 8013d14:	4413      	add	r3, r2
 8013d16:	009b      	lsls	r3, r3, #2
 8013d18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013d1c:	687a      	ldr	r2, [r7, #4]
 8013d1e:	4413      	add	r3, r2
 8013d20:	3304      	adds	r3, #4
 8013d22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	2200      	movs	r2, #0
 8013d28:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	2202      	movs	r2, #2
 8013d2e:	4619      	mov	r1, r3
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	f000 fc6d 	bl	8014610 <USBD_CtlSendData>
              break;
 8013d36:	e06a      	b.n	8013e0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	da11      	bge.n	8013d64 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013d40:	7bbb      	ldrb	r3, [r7, #14]
 8013d42:	f003 020f 	and.w	r2, r3, #15
 8013d46:	6879      	ldr	r1, [r7, #4]
 8013d48:	4613      	mov	r3, r2
 8013d4a:	009b      	lsls	r3, r3, #2
 8013d4c:	4413      	add	r3, r2
 8013d4e:	009b      	lsls	r3, r3, #2
 8013d50:	440b      	add	r3, r1
 8013d52:	3324      	adds	r3, #36	@ 0x24
 8013d54:	881b      	ldrh	r3, [r3, #0]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d117      	bne.n	8013d8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013d5a:	6839      	ldr	r1, [r7, #0]
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	f000 fbda 	bl	8014516 <USBD_CtlError>
                  break;
 8013d62:	e054      	b.n	8013e0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013d64:	7bbb      	ldrb	r3, [r7, #14]
 8013d66:	f003 020f 	and.w	r2, r3, #15
 8013d6a:	6879      	ldr	r1, [r7, #4]
 8013d6c:	4613      	mov	r3, r2
 8013d6e:	009b      	lsls	r3, r3, #2
 8013d70:	4413      	add	r3, r2
 8013d72:	009b      	lsls	r3, r3, #2
 8013d74:	440b      	add	r3, r1
 8013d76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013d7a:	881b      	ldrh	r3, [r3, #0]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d104      	bne.n	8013d8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013d80:	6839      	ldr	r1, [r7, #0]
 8013d82:	6878      	ldr	r0, [r7, #4]
 8013d84:	f000 fbc7 	bl	8014516 <USBD_CtlError>
                  break;
 8013d88:	e041      	b.n	8013e0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013d8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	da0b      	bge.n	8013daa <USBD_StdEPReq+0x2b2>
 8013d92:	7bbb      	ldrb	r3, [r7, #14]
 8013d94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013d98:	4613      	mov	r3, r2
 8013d9a:	009b      	lsls	r3, r3, #2
 8013d9c:	4413      	add	r3, r2
 8013d9e:	009b      	lsls	r3, r3, #2
 8013da0:	3310      	adds	r3, #16
 8013da2:	687a      	ldr	r2, [r7, #4]
 8013da4:	4413      	add	r3, r2
 8013da6:	3304      	adds	r3, #4
 8013da8:	e00b      	b.n	8013dc2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013daa:	7bbb      	ldrb	r3, [r7, #14]
 8013dac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013db0:	4613      	mov	r3, r2
 8013db2:	009b      	lsls	r3, r3, #2
 8013db4:	4413      	add	r3, r2
 8013db6:	009b      	lsls	r3, r3, #2
 8013db8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013dbc:	687a      	ldr	r2, [r7, #4]
 8013dbe:	4413      	add	r3, r2
 8013dc0:	3304      	adds	r3, #4
 8013dc2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013dc4:	7bbb      	ldrb	r3, [r7, #14]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d002      	beq.n	8013dd0 <USBD_StdEPReq+0x2d8>
 8013dca:	7bbb      	ldrb	r3, [r7, #14]
 8013dcc:	2b80      	cmp	r3, #128	@ 0x80
 8013dce:	d103      	bne.n	8013dd8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	601a      	str	r2, [r3, #0]
 8013dd6:	e00e      	b.n	8013df6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013dd8:	7bbb      	ldrb	r3, [r7, #14]
 8013dda:	4619      	mov	r1, r3
 8013ddc:	6878      	ldr	r0, [r7, #4]
 8013dde:	f001 f8f9 	bl	8014fd4 <USBD_LL_IsStallEP>
 8013de2:	4603      	mov	r3, r0
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d003      	beq.n	8013df0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	2201      	movs	r2, #1
 8013dec:	601a      	str	r2, [r3, #0]
 8013dee:	e002      	b.n	8013df6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013df0:	68bb      	ldr	r3, [r7, #8]
 8013df2:	2200      	movs	r2, #0
 8013df4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	2202      	movs	r2, #2
 8013dfa:	4619      	mov	r1, r3
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f000 fc07 	bl	8014610 <USBD_CtlSendData>
              break;
 8013e02:	e004      	b.n	8013e0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013e04:	6839      	ldr	r1, [r7, #0]
 8013e06:	6878      	ldr	r0, [r7, #4]
 8013e08:	f000 fb85 	bl	8014516 <USBD_CtlError>
              break;
 8013e0c:	bf00      	nop
          }
          break;
 8013e0e:	e004      	b.n	8013e1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013e10:	6839      	ldr	r1, [r7, #0]
 8013e12:	6878      	ldr	r0, [r7, #4]
 8013e14:	f000 fb7f 	bl	8014516 <USBD_CtlError>
          break;
 8013e18:	bf00      	nop
      }
      break;
 8013e1a:	e005      	b.n	8013e28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013e1c:	6839      	ldr	r1, [r7, #0]
 8013e1e:	6878      	ldr	r0, [r7, #4]
 8013e20:	f000 fb79 	bl	8014516 <USBD_CtlError>
      break;
 8013e24:	e000      	b.n	8013e28 <USBD_StdEPReq+0x330>
      break;
 8013e26:	bf00      	nop
  }

  return ret;
 8013e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3710      	adds	r7, #16
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}
	...

08013e34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b084      	sub	sp, #16
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
 8013e3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013e3e:	2300      	movs	r3, #0
 8013e40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013e42:	2300      	movs	r3, #0
 8013e44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013e46:	2300      	movs	r3, #0
 8013e48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	885b      	ldrh	r3, [r3, #2]
 8013e4e:	0a1b      	lsrs	r3, r3, #8
 8013e50:	b29b      	uxth	r3, r3
 8013e52:	3b01      	subs	r3, #1
 8013e54:	2b0e      	cmp	r3, #14
 8013e56:	f200 8152 	bhi.w	80140fe <USBD_GetDescriptor+0x2ca>
 8013e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8013e60 <USBD_GetDescriptor+0x2c>)
 8013e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e60:	08013ed1 	.word	0x08013ed1
 8013e64:	08013ee9 	.word	0x08013ee9
 8013e68:	08013f29 	.word	0x08013f29
 8013e6c:	080140ff 	.word	0x080140ff
 8013e70:	080140ff 	.word	0x080140ff
 8013e74:	0801409f 	.word	0x0801409f
 8013e78:	080140cb 	.word	0x080140cb
 8013e7c:	080140ff 	.word	0x080140ff
 8013e80:	080140ff 	.word	0x080140ff
 8013e84:	080140ff 	.word	0x080140ff
 8013e88:	080140ff 	.word	0x080140ff
 8013e8c:	080140ff 	.word	0x080140ff
 8013e90:	080140ff 	.word	0x080140ff
 8013e94:	080140ff 	.word	0x080140ff
 8013e98:	08013e9d 	.word	0x08013e9d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013ea2:	69db      	ldr	r3, [r3, #28]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d00b      	beq.n	8013ec0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013eae:	69db      	ldr	r3, [r3, #28]
 8013eb0:	687a      	ldr	r2, [r7, #4]
 8013eb2:	7c12      	ldrb	r2, [r2, #16]
 8013eb4:	f107 0108 	add.w	r1, r7, #8
 8013eb8:	4610      	mov	r0, r2
 8013eba:	4798      	blx	r3
 8013ebc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013ebe:	e126      	b.n	801410e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013ec0:	6839      	ldr	r1, [r7, #0]
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f000 fb27 	bl	8014516 <USBD_CtlError>
        err++;
 8013ec8:	7afb      	ldrb	r3, [r7, #11]
 8013eca:	3301      	adds	r3, #1
 8013ecc:	72fb      	strb	r3, [r7, #11]
      break;
 8013ece:	e11e      	b.n	801410e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	687a      	ldr	r2, [r7, #4]
 8013eda:	7c12      	ldrb	r2, [r2, #16]
 8013edc:	f107 0108 	add.w	r1, r7, #8
 8013ee0:	4610      	mov	r0, r2
 8013ee2:	4798      	blx	r3
 8013ee4:	60f8      	str	r0, [r7, #12]
      break;
 8013ee6:	e112      	b.n	801410e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	7c1b      	ldrb	r3, [r3, #16]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d10d      	bne.n	8013f0c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ef8:	f107 0208 	add.w	r2, r7, #8
 8013efc:	4610      	mov	r0, r2
 8013efe:	4798      	blx	r3
 8013f00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	3301      	adds	r3, #1
 8013f06:	2202      	movs	r2, #2
 8013f08:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013f0a:	e100      	b.n	801410e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f14:	f107 0208 	add.w	r2, r7, #8
 8013f18:	4610      	mov	r0, r2
 8013f1a:	4798      	blx	r3
 8013f1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	3301      	adds	r3, #1
 8013f22:	2202      	movs	r2, #2
 8013f24:	701a      	strb	r2, [r3, #0]
      break;
 8013f26:	e0f2      	b.n	801410e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013f28:	683b      	ldr	r3, [r7, #0]
 8013f2a:	885b      	ldrh	r3, [r3, #2]
 8013f2c:	b2db      	uxtb	r3, r3
 8013f2e:	2b05      	cmp	r3, #5
 8013f30:	f200 80ac 	bhi.w	801408c <USBD_GetDescriptor+0x258>
 8013f34:	a201      	add	r2, pc, #4	@ (adr r2, 8013f3c <USBD_GetDescriptor+0x108>)
 8013f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f3a:	bf00      	nop
 8013f3c:	08013f55 	.word	0x08013f55
 8013f40:	08013f89 	.word	0x08013f89
 8013f44:	08013fbd 	.word	0x08013fbd
 8013f48:	08013ff1 	.word	0x08013ff1
 8013f4c:	08014025 	.word	0x08014025
 8013f50:	08014059 	.word	0x08014059
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f5a:	685b      	ldr	r3, [r3, #4]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d00b      	beq.n	8013f78 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f66:	685b      	ldr	r3, [r3, #4]
 8013f68:	687a      	ldr	r2, [r7, #4]
 8013f6a:	7c12      	ldrb	r2, [r2, #16]
 8013f6c:	f107 0108 	add.w	r1, r7, #8
 8013f70:	4610      	mov	r0, r2
 8013f72:	4798      	blx	r3
 8013f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013f76:	e091      	b.n	801409c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013f78:	6839      	ldr	r1, [r7, #0]
 8013f7a:	6878      	ldr	r0, [r7, #4]
 8013f7c:	f000 facb 	bl	8014516 <USBD_CtlError>
            err++;
 8013f80:	7afb      	ldrb	r3, [r7, #11]
 8013f82:	3301      	adds	r3, #1
 8013f84:	72fb      	strb	r3, [r7, #11]
          break;
 8013f86:	e089      	b.n	801409c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f8e:	689b      	ldr	r3, [r3, #8]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d00b      	beq.n	8013fac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f9a:	689b      	ldr	r3, [r3, #8]
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	7c12      	ldrb	r2, [r2, #16]
 8013fa0:	f107 0108 	add.w	r1, r7, #8
 8013fa4:	4610      	mov	r0, r2
 8013fa6:	4798      	blx	r3
 8013fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013faa:	e077      	b.n	801409c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013fac:	6839      	ldr	r1, [r7, #0]
 8013fae:	6878      	ldr	r0, [r7, #4]
 8013fb0:	f000 fab1 	bl	8014516 <USBD_CtlError>
            err++;
 8013fb4:	7afb      	ldrb	r3, [r7, #11]
 8013fb6:	3301      	adds	r3, #1
 8013fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8013fba:	e06f      	b.n	801409c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013fc2:	68db      	ldr	r3, [r3, #12]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d00b      	beq.n	8013fe0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013fce:	68db      	ldr	r3, [r3, #12]
 8013fd0:	687a      	ldr	r2, [r7, #4]
 8013fd2:	7c12      	ldrb	r2, [r2, #16]
 8013fd4:	f107 0108 	add.w	r1, r7, #8
 8013fd8:	4610      	mov	r0, r2
 8013fda:	4798      	blx	r3
 8013fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013fde:	e05d      	b.n	801409c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013fe0:	6839      	ldr	r1, [r7, #0]
 8013fe2:	6878      	ldr	r0, [r7, #4]
 8013fe4:	f000 fa97 	bl	8014516 <USBD_CtlError>
            err++;
 8013fe8:	7afb      	ldrb	r3, [r7, #11]
 8013fea:	3301      	adds	r3, #1
 8013fec:	72fb      	strb	r3, [r7, #11]
          break;
 8013fee:	e055      	b.n	801409c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013ff6:	691b      	ldr	r3, [r3, #16]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d00b      	beq.n	8014014 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014002:	691b      	ldr	r3, [r3, #16]
 8014004:	687a      	ldr	r2, [r7, #4]
 8014006:	7c12      	ldrb	r2, [r2, #16]
 8014008:	f107 0108 	add.w	r1, r7, #8
 801400c:	4610      	mov	r0, r2
 801400e:	4798      	blx	r3
 8014010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014012:	e043      	b.n	801409c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014014:	6839      	ldr	r1, [r7, #0]
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	f000 fa7d 	bl	8014516 <USBD_CtlError>
            err++;
 801401c:	7afb      	ldrb	r3, [r7, #11]
 801401e:	3301      	adds	r3, #1
 8014020:	72fb      	strb	r3, [r7, #11]
          break;
 8014022:	e03b      	b.n	801409c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801402a:	695b      	ldr	r3, [r3, #20]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d00b      	beq.n	8014048 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014036:	695b      	ldr	r3, [r3, #20]
 8014038:	687a      	ldr	r2, [r7, #4]
 801403a:	7c12      	ldrb	r2, [r2, #16]
 801403c:	f107 0108 	add.w	r1, r7, #8
 8014040:	4610      	mov	r0, r2
 8014042:	4798      	blx	r3
 8014044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014046:	e029      	b.n	801409c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014048:	6839      	ldr	r1, [r7, #0]
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f000 fa63 	bl	8014516 <USBD_CtlError>
            err++;
 8014050:	7afb      	ldrb	r3, [r7, #11]
 8014052:	3301      	adds	r3, #1
 8014054:	72fb      	strb	r3, [r7, #11]
          break;
 8014056:	e021      	b.n	801409c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801405e:	699b      	ldr	r3, [r3, #24]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d00b      	beq.n	801407c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801406a:	699b      	ldr	r3, [r3, #24]
 801406c:	687a      	ldr	r2, [r7, #4]
 801406e:	7c12      	ldrb	r2, [r2, #16]
 8014070:	f107 0108 	add.w	r1, r7, #8
 8014074:	4610      	mov	r0, r2
 8014076:	4798      	blx	r3
 8014078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801407a:	e00f      	b.n	801409c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801407c:	6839      	ldr	r1, [r7, #0]
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f000 fa49 	bl	8014516 <USBD_CtlError>
            err++;
 8014084:	7afb      	ldrb	r3, [r7, #11]
 8014086:	3301      	adds	r3, #1
 8014088:	72fb      	strb	r3, [r7, #11]
          break;
 801408a:	e007      	b.n	801409c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801408c:	6839      	ldr	r1, [r7, #0]
 801408e:	6878      	ldr	r0, [r7, #4]
 8014090:	f000 fa41 	bl	8014516 <USBD_CtlError>
          err++;
 8014094:	7afb      	ldrb	r3, [r7, #11]
 8014096:	3301      	adds	r3, #1
 8014098:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801409a:	bf00      	nop
      }
      break;
 801409c:	e037      	b.n	801410e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	7c1b      	ldrb	r3, [r3, #16]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d109      	bne.n	80140ba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80140ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80140ae:	f107 0208 	add.w	r2, r7, #8
 80140b2:	4610      	mov	r0, r2
 80140b4:	4798      	blx	r3
 80140b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80140b8:	e029      	b.n	801410e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80140ba:	6839      	ldr	r1, [r7, #0]
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f000 fa2a 	bl	8014516 <USBD_CtlError>
        err++;
 80140c2:	7afb      	ldrb	r3, [r7, #11]
 80140c4:	3301      	adds	r3, #1
 80140c6:	72fb      	strb	r3, [r7, #11]
      break;
 80140c8:	e021      	b.n	801410e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	7c1b      	ldrb	r3, [r3, #16]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d10d      	bne.n	80140ee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80140d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140da:	f107 0208 	add.w	r2, r7, #8
 80140de:	4610      	mov	r0, r2
 80140e0:	4798      	blx	r3
 80140e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	3301      	adds	r3, #1
 80140e8:	2207      	movs	r2, #7
 80140ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80140ec:	e00f      	b.n	801410e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80140ee:	6839      	ldr	r1, [r7, #0]
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	f000 fa10 	bl	8014516 <USBD_CtlError>
        err++;
 80140f6:	7afb      	ldrb	r3, [r7, #11]
 80140f8:	3301      	adds	r3, #1
 80140fa:	72fb      	strb	r3, [r7, #11]
      break;
 80140fc:	e007      	b.n	801410e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80140fe:	6839      	ldr	r1, [r7, #0]
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	f000 fa08 	bl	8014516 <USBD_CtlError>
      err++;
 8014106:	7afb      	ldrb	r3, [r7, #11]
 8014108:	3301      	adds	r3, #1
 801410a:	72fb      	strb	r3, [r7, #11]
      break;
 801410c:	bf00      	nop
  }

  if (err != 0U)
 801410e:	7afb      	ldrb	r3, [r7, #11]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d11e      	bne.n	8014152 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014114:	683b      	ldr	r3, [r7, #0]
 8014116:	88db      	ldrh	r3, [r3, #6]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d016      	beq.n	801414a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801411c:	893b      	ldrh	r3, [r7, #8]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d00e      	beq.n	8014140 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014122:	683b      	ldr	r3, [r7, #0]
 8014124:	88da      	ldrh	r2, [r3, #6]
 8014126:	893b      	ldrh	r3, [r7, #8]
 8014128:	4293      	cmp	r3, r2
 801412a:	bf28      	it	cs
 801412c:	4613      	movcs	r3, r2
 801412e:	b29b      	uxth	r3, r3
 8014130:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014132:	893b      	ldrh	r3, [r7, #8]
 8014134:	461a      	mov	r2, r3
 8014136:	68f9      	ldr	r1, [r7, #12]
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	f000 fa69 	bl	8014610 <USBD_CtlSendData>
 801413e:	e009      	b.n	8014154 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014140:	6839      	ldr	r1, [r7, #0]
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f000 f9e7 	bl	8014516 <USBD_CtlError>
 8014148:	e004      	b.n	8014154 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f000 faba 	bl	80146c4 <USBD_CtlSendStatus>
 8014150:	e000      	b.n	8014154 <USBD_GetDescriptor+0x320>
    return;
 8014152:	bf00      	nop
  }
}
 8014154:	3710      	adds	r7, #16
 8014156:	46bd      	mov	sp, r7
 8014158:	bd80      	pop	{r7, pc}
 801415a:	bf00      	nop

0801415c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b084      	sub	sp, #16
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	889b      	ldrh	r3, [r3, #4]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d131      	bne.n	80141d2 <USBD_SetAddress+0x76>
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	88db      	ldrh	r3, [r3, #6]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d12d      	bne.n	80141d2 <USBD_SetAddress+0x76>
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	885b      	ldrh	r3, [r3, #2]
 801417a:	2b7f      	cmp	r3, #127	@ 0x7f
 801417c:	d829      	bhi.n	80141d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	885b      	ldrh	r3, [r3, #2]
 8014182:	b2db      	uxtb	r3, r3
 8014184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014188:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014190:	b2db      	uxtb	r3, r3
 8014192:	2b03      	cmp	r3, #3
 8014194:	d104      	bne.n	80141a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014196:	6839      	ldr	r1, [r7, #0]
 8014198:	6878      	ldr	r0, [r7, #4]
 801419a:	f000 f9bc 	bl	8014516 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801419e:	e01d      	b.n	80141dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	7bfa      	ldrb	r2, [r7, #15]
 80141a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80141a8:	7bfb      	ldrb	r3, [r7, #15]
 80141aa:	4619      	mov	r1, r3
 80141ac:	6878      	ldr	r0, [r7, #4]
 80141ae:	f000 ff3d 	bl	801502c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80141b2:	6878      	ldr	r0, [r7, #4]
 80141b4:	f000 fa86 	bl	80146c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80141b8:	7bfb      	ldrb	r3, [r7, #15]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d004      	beq.n	80141c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2202      	movs	r2, #2
 80141c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80141c6:	e009      	b.n	80141dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	2201      	movs	r2, #1
 80141cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80141d0:	e004      	b.n	80141dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80141d2:	6839      	ldr	r1, [r7, #0]
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f000 f99e 	bl	8014516 <USBD_CtlError>
  }
}
 80141da:	bf00      	nop
 80141dc:	bf00      	nop
 80141de:	3710      	adds	r7, #16
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bd80      	pop	{r7, pc}

080141e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b084      	sub	sp, #16
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
 80141ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80141ee:	2300      	movs	r3, #0
 80141f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	885b      	ldrh	r3, [r3, #2]
 80141f6:	b2da      	uxtb	r2, r3
 80141f8:	4b4e      	ldr	r3, [pc, #312]	@ (8014334 <USBD_SetConfig+0x150>)
 80141fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80141fc:	4b4d      	ldr	r3, [pc, #308]	@ (8014334 <USBD_SetConfig+0x150>)
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	2b01      	cmp	r3, #1
 8014202:	d905      	bls.n	8014210 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014204:	6839      	ldr	r1, [r7, #0]
 8014206:	6878      	ldr	r0, [r7, #4]
 8014208:	f000 f985 	bl	8014516 <USBD_CtlError>
    return USBD_FAIL;
 801420c:	2303      	movs	r3, #3
 801420e:	e08c      	b.n	801432a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014216:	b2db      	uxtb	r3, r3
 8014218:	2b02      	cmp	r3, #2
 801421a:	d002      	beq.n	8014222 <USBD_SetConfig+0x3e>
 801421c:	2b03      	cmp	r3, #3
 801421e:	d029      	beq.n	8014274 <USBD_SetConfig+0x90>
 8014220:	e075      	b.n	801430e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014222:	4b44      	ldr	r3, [pc, #272]	@ (8014334 <USBD_SetConfig+0x150>)
 8014224:	781b      	ldrb	r3, [r3, #0]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d020      	beq.n	801426c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801422a:	4b42      	ldr	r3, [pc, #264]	@ (8014334 <USBD_SetConfig+0x150>)
 801422c:	781b      	ldrb	r3, [r3, #0]
 801422e:	461a      	mov	r2, r3
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014234:	4b3f      	ldr	r3, [pc, #252]	@ (8014334 <USBD_SetConfig+0x150>)
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	4619      	mov	r1, r3
 801423a:	6878      	ldr	r0, [r7, #4]
 801423c:	f7fe ffb9 	bl	80131b2 <USBD_SetClassConfig>
 8014240:	4603      	mov	r3, r0
 8014242:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014244:	7bfb      	ldrb	r3, [r7, #15]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d008      	beq.n	801425c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801424a:	6839      	ldr	r1, [r7, #0]
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	f000 f962 	bl	8014516 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	2202      	movs	r2, #2
 8014256:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801425a:	e065      	b.n	8014328 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801425c:	6878      	ldr	r0, [r7, #4]
 801425e:	f000 fa31 	bl	80146c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	2203      	movs	r2, #3
 8014266:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801426a:	e05d      	b.n	8014328 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f000 fa29 	bl	80146c4 <USBD_CtlSendStatus>
      break;
 8014272:	e059      	b.n	8014328 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014274:	4b2f      	ldr	r3, [pc, #188]	@ (8014334 <USBD_SetConfig+0x150>)
 8014276:	781b      	ldrb	r3, [r3, #0]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d112      	bne.n	80142a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	2202      	movs	r2, #2
 8014280:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014284:	4b2b      	ldr	r3, [pc, #172]	@ (8014334 <USBD_SetConfig+0x150>)
 8014286:	781b      	ldrb	r3, [r3, #0]
 8014288:	461a      	mov	r2, r3
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801428e:	4b29      	ldr	r3, [pc, #164]	@ (8014334 <USBD_SetConfig+0x150>)
 8014290:	781b      	ldrb	r3, [r3, #0]
 8014292:	4619      	mov	r1, r3
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f7fe ffa8 	bl	80131ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801429a:	6878      	ldr	r0, [r7, #4]
 801429c:	f000 fa12 	bl	80146c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80142a0:	e042      	b.n	8014328 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80142a2:	4b24      	ldr	r3, [pc, #144]	@ (8014334 <USBD_SetConfig+0x150>)
 80142a4:	781b      	ldrb	r3, [r3, #0]
 80142a6:	461a      	mov	r2, r3
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	685b      	ldr	r3, [r3, #4]
 80142ac:	429a      	cmp	r2, r3
 80142ae:	d02a      	beq.n	8014306 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	685b      	ldr	r3, [r3, #4]
 80142b4:	b2db      	uxtb	r3, r3
 80142b6:	4619      	mov	r1, r3
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f7fe ff96 	bl	80131ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80142be:	4b1d      	ldr	r3, [pc, #116]	@ (8014334 <USBD_SetConfig+0x150>)
 80142c0:	781b      	ldrb	r3, [r3, #0]
 80142c2:	461a      	mov	r2, r3
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80142c8:	4b1a      	ldr	r3, [pc, #104]	@ (8014334 <USBD_SetConfig+0x150>)
 80142ca:	781b      	ldrb	r3, [r3, #0]
 80142cc:	4619      	mov	r1, r3
 80142ce:	6878      	ldr	r0, [r7, #4]
 80142d0:	f7fe ff6f 	bl	80131b2 <USBD_SetClassConfig>
 80142d4:	4603      	mov	r3, r0
 80142d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80142d8:	7bfb      	ldrb	r3, [r7, #15]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d00f      	beq.n	80142fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80142de:	6839      	ldr	r1, [r7, #0]
 80142e0:	6878      	ldr	r0, [r7, #4]
 80142e2:	f000 f918 	bl	8014516 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	b2db      	uxtb	r3, r3
 80142ec:	4619      	mov	r1, r3
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	f7fe ff7b 	bl	80131ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2202      	movs	r2, #2
 80142f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80142fc:	e014      	b.n	8014328 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80142fe:	6878      	ldr	r0, [r7, #4]
 8014300:	f000 f9e0 	bl	80146c4 <USBD_CtlSendStatus>
      break;
 8014304:	e010      	b.n	8014328 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014306:	6878      	ldr	r0, [r7, #4]
 8014308:	f000 f9dc 	bl	80146c4 <USBD_CtlSendStatus>
      break;
 801430c:	e00c      	b.n	8014328 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801430e:	6839      	ldr	r1, [r7, #0]
 8014310:	6878      	ldr	r0, [r7, #4]
 8014312:	f000 f900 	bl	8014516 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014316:	4b07      	ldr	r3, [pc, #28]	@ (8014334 <USBD_SetConfig+0x150>)
 8014318:	781b      	ldrb	r3, [r3, #0]
 801431a:	4619      	mov	r1, r3
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f7fe ff64 	bl	80131ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014322:	2303      	movs	r3, #3
 8014324:	73fb      	strb	r3, [r7, #15]
      break;
 8014326:	bf00      	nop
  }

  return ret;
 8014328:	7bfb      	ldrb	r3, [r7, #15]
}
 801432a:	4618      	mov	r0, r3
 801432c:	3710      	adds	r7, #16
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
 8014332:	bf00      	nop
 8014334:	240005a8 	.word	0x240005a8

08014338 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014342:	683b      	ldr	r3, [r7, #0]
 8014344:	88db      	ldrh	r3, [r3, #6]
 8014346:	2b01      	cmp	r3, #1
 8014348:	d004      	beq.n	8014354 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801434a:	6839      	ldr	r1, [r7, #0]
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	f000 f8e2 	bl	8014516 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014352:	e023      	b.n	801439c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801435a:	b2db      	uxtb	r3, r3
 801435c:	2b02      	cmp	r3, #2
 801435e:	dc02      	bgt.n	8014366 <USBD_GetConfig+0x2e>
 8014360:	2b00      	cmp	r3, #0
 8014362:	dc03      	bgt.n	801436c <USBD_GetConfig+0x34>
 8014364:	e015      	b.n	8014392 <USBD_GetConfig+0x5a>
 8014366:	2b03      	cmp	r3, #3
 8014368:	d00b      	beq.n	8014382 <USBD_GetConfig+0x4a>
 801436a:	e012      	b.n	8014392 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	2200      	movs	r2, #0
 8014370:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	3308      	adds	r3, #8
 8014376:	2201      	movs	r2, #1
 8014378:	4619      	mov	r1, r3
 801437a:	6878      	ldr	r0, [r7, #4]
 801437c:	f000 f948 	bl	8014610 <USBD_CtlSendData>
        break;
 8014380:	e00c      	b.n	801439c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	3304      	adds	r3, #4
 8014386:	2201      	movs	r2, #1
 8014388:	4619      	mov	r1, r3
 801438a:	6878      	ldr	r0, [r7, #4]
 801438c:	f000 f940 	bl	8014610 <USBD_CtlSendData>
        break;
 8014390:	e004      	b.n	801439c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014392:	6839      	ldr	r1, [r7, #0]
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	f000 f8be 	bl	8014516 <USBD_CtlError>
        break;
 801439a:	bf00      	nop
}
 801439c:	bf00      	nop
 801439e:	3708      	adds	r7, #8
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}

080143a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b082      	sub	sp, #8
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
 80143ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80143b4:	b2db      	uxtb	r3, r3
 80143b6:	3b01      	subs	r3, #1
 80143b8:	2b02      	cmp	r3, #2
 80143ba:	d81e      	bhi.n	80143fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	88db      	ldrh	r3, [r3, #6]
 80143c0:	2b02      	cmp	r3, #2
 80143c2:	d004      	beq.n	80143ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80143c4:	6839      	ldr	r1, [r7, #0]
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f000 f8a5 	bl	8014516 <USBD_CtlError>
        break;
 80143cc:	e01a      	b.n	8014404 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	2201      	movs	r2, #1
 80143d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d005      	beq.n	80143ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	68db      	ldr	r3, [r3, #12]
 80143e2:	f043 0202 	orr.w	r2, r3, #2
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	330c      	adds	r3, #12
 80143ee:	2202      	movs	r2, #2
 80143f0:	4619      	mov	r1, r3
 80143f2:	6878      	ldr	r0, [r7, #4]
 80143f4:	f000 f90c 	bl	8014610 <USBD_CtlSendData>
      break;
 80143f8:	e004      	b.n	8014404 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80143fa:	6839      	ldr	r1, [r7, #0]
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f000 f88a 	bl	8014516 <USBD_CtlError>
      break;
 8014402:	bf00      	nop
  }
}
 8014404:	bf00      	nop
 8014406:	3708      	adds	r7, #8
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}

0801440c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b082      	sub	sp, #8
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
 8014414:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	885b      	ldrh	r3, [r3, #2]
 801441a:	2b01      	cmp	r3, #1
 801441c:	d107      	bne.n	801442e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	2201      	movs	r2, #1
 8014422:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014426:	6878      	ldr	r0, [r7, #4]
 8014428:	f000 f94c 	bl	80146c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801442c:	e013      	b.n	8014456 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	885b      	ldrh	r3, [r3, #2]
 8014432:	2b02      	cmp	r3, #2
 8014434:	d10b      	bne.n	801444e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	889b      	ldrh	r3, [r3, #4]
 801443a:	0a1b      	lsrs	r3, r3, #8
 801443c:	b29b      	uxth	r3, r3
 801443e:	b2da      	uxtb	r2, r3
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014446:	6878      	ldr	r0, [r7, #4]
 8014448:	f000 f93c 	bl	80146c4 <USBD_CtlSendStatus>
}
 801444c:	e003      	b.n	8014456 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801444e:	6839      	ldr	r1, [r7, #0]
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f000 f860 	bl	8014516 <USBD_CtlError>
}
 8014456:	bf00      	nop
 8014458:	3708      	adds	r7, #8
 801445a:	46bd      	mov	sp, r7
 801445c:	bd80      	pop	{r7, pc}

0801445e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801445e:	b580      	push	{r7, lr}
 8014460:	b082      	sub	sp, #8
 8014462:	af00      	add	r7, sp, #0
 8014464:	6078      	str	r0, [r7, #4]
 8014466:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801446e:	b2db      	uxtb	r3, r3
 8014470:	3b01      	subs	r3, #1
 8014472:	2b02      	cmp	r3, #2
 8014474:	d80b      	bhi.n	801448e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014476:	683b      	ldr	r3, [r7, #0]
 8014478:	885b      	ldrh	r3, [r3, #2]
 801447a:	2b01      	cmp	r3, #1
 801447c:	d10c      	bne.n	8014498 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	2200      	movs	r2, #0
 8014482:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f000 f91c 	bl	80146c4 <USBD_CtlSendStatus>
      }
      break;
 801448c:	e004      	b.n	8014498 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801448e:	6839      	ldr	r1, [r7, #0]
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f000 f840 	bl	8014516 <USBD_CtlError>
      break;
 8014496:	e000      	b.n	801449a <USBD_ClrFeature+0x3c>
      break;
 8014498:	bf00      	nop
  }
}
 801449a:	bf00      	nop
 801449c:	3708      	adds	r7, #8
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}

080144a2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80144a2:	b580      	push	{r7, lr}
 80144a4:	b084      	sub	sp, #16
 80144a6:	af00      	add	r7, sp, #0
 80144a8:	6078      	str	r0, [r7, #4]
 80144aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	781a      	ldrb	r2, [r3, #0]
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	3301      	adds	r3, #1
 80144bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	781a      	ldrb	r2, [r3, #0]
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	3301      	adds	r3, #1
 80144ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80144cc:	68f8      	ldr	r0, [r7, #12]
 80144ce:	f7ff fa16 	bl	80138fe <SWAPBYTE>
 80144d2:	4603      	mov	r3, r0
 80144d4:	461a      	mov	r2, r3
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	3301      	adds	r3, #1
 80144de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	3301      	adds	r3, #1
 80144e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80144e6:	68f8      	ldr	r0, [r7, #12]
 80144e8:	f7ff fa09 	bl	80138fe <SWAPBYTE>
 80144ec:	4603      	mov	r3, r0
 80144ee:	461a      	mov	r2, r3
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	3301      	adds	r3, #1
 80144f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	3301      	adds	r3, #1
 80144fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014500:	68f8      	ldr	r0, [r7, #12]
 8014502:	f7ff f9fc 	bl	80138fe <SWAPBYTE>
 8014506:	4603      	mov	r3, r0
 8014508:	461a      	mov	r2, r3
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	80da      	strh	r2, [r3, #6]
}
 801450e:	bf00      	nop
 8014510:	3710      	adds	r7, #16
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}

08014516 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014516:	b580      	push	{r7, lr}
 8014518:	b082      	sub	sp, #8
 801451a:	af00      	add	r7, sp, #0
 801451c:	6078      	str	r0, [r7, #4]
 801451e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014520:	2180      	movs	r1, #128	@ 0x80
 8014522:	6878      	ldr	r0, [r7, #4]
 8014524:	f000 fd18 	bl	8014f58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014528:	2100      	movs	r1, #0
 801452a:	6878      	ldr	r0, [r7, #4]
 801452c:	f000 fd14 	bl	8014f58 <USBD_LL_StallEP>
}
 8014530:	bf00      	nop
 8014532:	3708      	adds	r7, #8
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}

08014538 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b086      	sub	sp, #24
 801453c:	af00      	add	r7, sp, #0
 801453e:	60f8      	str	r0, [r7, #12]
 8014540:	60b9      	str	r1, [r7, #8]
 8014542:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014544:	2300      	movs	r3, #0
 8014546:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d042      	beq.n	80145d4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014552:	6938      	ldr	r0, [r7, #16]
 8014554:	f000 f842 	bl	80145dc <USBD_GetLen>
 8014558:	4603      	mov	r3, r0
 801455a:	3301      	adds	r3, #1
 801455c:	005b      	lsls	r3, r3, #1
 801455e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014562:	d808      	bhi.n	8014576 <USBD_GetString+0x3e>
 8014564:	6938      	ldr	r0, [r7, #16]
 8014566:	f000 f839 	bl	80145dc <USBD_GetLen>
 801456a:	4603      	mov	r3, r0
 801456c:	3301      	adds	r3, #1
 801456e:	b29b      	uxth	r3, r3
 8014570:	005b      	lsls	r3, r3, #1
 8014572:	b29a      	uxth	r2, r3
 8014574:	e001      	b.n	801457a <USBD_GetString+0x42>
 8014576:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801457e:	7dfb      	ldrb	r3, [r7, #23]
 8014580:	68ba      	ldr	r2, [r7, #8]
 8014582:	4413      	add	r3, r2
 8014584:	687a      	ldr	r2, [r7, #4]
 8014586:	7812      	ldrb	r2, [r2, #0]
 8014588:	701a      	strb	r2, [r3, #0]
  idx++;
 801458a:	7dfb      	ldrb	r3, [r7, #23]
 801458c:	3301      	adds	r3, #1
 801458e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014590:	7dfb      	ldrb	r3, [r7, #23]
 8014592:	68ba      	ldr	r2, [r7, #8]
 8014594:	4413      	add	r3, r2
 8014596:	2203      	movs	r2, #3
 8014598:	701a      	strb	r2, [r3, #0]
  idx++;
 801459a:	7dfb      	ldrb	r3, [r7, #23]
 801459c:	3301      	adds	r3, #1
 801459e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80145a0:	e013      	b.n	80145ca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80145a2:	7dfb      	ldrb	r3, [r7, #23]
 80145a4:	68ba      	ldr	r2, [r7, #8]
 80145a6:	4413      	add	r3, r2
 80145a8:	693a      	ldr	r2, [r7, #16]
 80145aa:	7812      	ldrb	r2, [r2, #0]
 80145ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	3301      	adds	r3, #1
 80145b2:	613b      	str	r3, [r7, #16]
    idx++;
 80145b4:	7dfb      	ldrb	r3, [r7, #23]
 80145b6:	3301      	adds	r3, #1
 80145b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80145ba:	7dfb      	ldrb	r3, [r7, #23]
 80145bc:	68ba      	ldr	r2, [r7, #8]
 80145be:	4413      	add	r3, r2
 80145c0:	2200      	movs	r2, #0
 80145c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80145c4:	7dfb      	ldrb	r3, [r7, #23]
 80145c6:	3301      	adds	r3, #1
 80145c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80145ca:	693b      	ldr	r3, [r7, #16]
 80145cc:	781b      	ldrb	r3, [r3, #0]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d1e7      	bne.n	80145a2 <USBD_GetString+0x6a>
 80145d2:	e000      	b.n	80145d6 <USBD_GetString+0x9e>
    return;
 80145d4:	bf00      	nop
  }
}
 80145d6:	3718      	adds	r7, #24
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}

080145dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80145dc:	b480      	push	{r7}
 80145de:	b085      	sub	sp, #20
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80145e4:	2300      	movs	r3, #0
 80145e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80145ec:	e005      	b.n	80145fa <USBD_GetLen+0x1e>
  {
    len++;
 80145ee:	7bfb      	ldrb	r3, [r7, #15]
 80145f0:	3301      	adds	r3, #1
 80145f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80145f4:	68bb      	ldr	r3, [r7, #8]
 80145f6:	3301      	adds	r3, #1
 80145f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80145fa:	68bb      	ldr	r3, [r7, #8]
 80145fc:	781b      	ldrb	r3, [r3, #0]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d1f5      	bne.n	80145ee <USBD_GetLen+0x12>
  }

  return len;
 8014602:	7bfb      	ldrb	r3, [r7, #15]
}
 8014604:	4618      	mov	r0, r3
 8014606:	3714      	adds	r7, #20
 8014608:	46bd      	mov	sp, r7
 801460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460e:	4770      	bx	lr

08014610 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b084      	sub	sp, #16
 8014614:	af00      	add	r7, sp, #0
 8014616:	60f8      	str	r0, [r7, #12]
 8014618:	60b9      	str	r1, [r7, #8]
 801461a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	2202      	movs	r2, #2
 8014620:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	687a      	ldr	r2, [r7, #4]
 8014628:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	687a      	ldr	r2, [r7, #4]
 801462e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	68ba      	ldr	r2, [r7, #8]
 8014634:	2100      	movs	r1, #0
 8014636:	68f8      	ldr	r0, [r7, #12]
 8014638:	f000 fd17 	bl	801506a <USBD_LL_Transmit>

  return USBD_OK;
 801463c:	2300      	movs	r3, #0
}
 801463e:	4618      	mov	r0, r3
 8014640:	3710      	adds	r7, #16
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}

08014646 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014646:	b580      	push	{r7, lr}
 8014648:	b084      	sub	sp, #16
 801464a:	af00      	add	r7, sp, #0
 801464c:	60f8      	str	r0, [r7, #12]
 801464e:	60b9      	str	r1, [r7, #8]
 8014650:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	68ba      	ldr	r2, [r7, #8]
 8014656:	2100      	movs	r1, #0
 8014658:	68f8      	ldr	r0, [r7, #12]
 801465a:	f000 fd06 	bl	801506a <USBD_LL_Transmit>

  return USBD_OK;
 801465e:	2300      	movs	r3, #0
}
 8014660:	4618      	mov	r0, r3
 8014662:	3710      	adds	r7, #16
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}

08014668 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b084      	sub	sp, #16
 801466c:	af00      	add	r7, sp, #0
 801466e:	60f8      	str	r0, [r7, #12]
 8014670:	60b9      	str	r1, [r7, #8]
 8014672:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	2203      	movs	r2, #3
 8014678:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	687a      	ldr	r2, [r7, #4]
 8014680:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	687a      	ldr	r2, [r7, #4]
 8014688:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	68ba      	ldr	r2, [r7, #8]
 8014690:	2100      	movs	r1, #0
 8014692:	68f8      	ldr	r0, [r7, #12]
 8014694:	f000 fd0a 	bl	80150ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014698:	2300      	movs	r3, #0
}
 801469a:	4618      	mov	r0, r3
 801469c:	3710      	adds	r7, #16
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}

080146a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80146a2:	b580      	push	{r7, lr}
 80146a4:	b084      	sub	sp, #16
 80146a6:	af00      	add	r7, sp, #0
 80146a8:	60f8      	str	r0, [r7, #12]
 80146aa:	60b9      	str	r1, [r7, #8]
 80146ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	68ba      	ldr	r2, [r7, #8]
 80146b2:	2100      	movs	r1, #0
 80146b4:	68f8      	ldr	r0, [r7, #12]
 80146b6:	f000 fcf9 	bl	80150ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80146ba:	2300      	movs	r3, #0
}
 80146bc:	4618      	mov	r0, r3
 80146be:	3710      	adds	r7, #16
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd80      	pop	{r7, pc}

080146c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b082      	sub	sp, #8
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2204      	movs	r2, #4
 80146d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80146d4:	2300      	movs	r3, #0
 80146d6:	2200      	movs	r2, #0
 80146d8:	2100      	movs	r1, #0
 80146da:	6878      	ldr	r0, [r7, #4]
 80146dc:	f000 fcc5 	bl	801506a <USBD_LL_Transmit>

  return USBD_OK;
 80146e0:	2300      	movs	r3, #0
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3708      	adds	r7, #8
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}

080146ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80146ea:	b580      	push	{r7, lr}
 80146ec:	b082      	sub	sp, #8
 80146ee:	af00      	add	r7, sp, #0
 80146f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	2205      	movs	r2, #5
 80146f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80146fa:	2300      	movs	r3, #0
 80146fc:	2200      	movs	r2, #0
 80146fe:	2100      	movs	r1, #0
 8014700:	6878      	ldr	r0, [r7, #4]
 8014702:	f000 fcd3 	bl	80150ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014706:	2300      	movs	r3, #0
}
 8014708:	4618      	mov	r0, r3
 801470a:	3708      	adds	r7, #8
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}

08014710 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014714:	2200      	movs	r2, #0
 8014716:	4913      	ldr	r1, [pc, #76]	@ (8014764 <MX_USB_DEVICE_Init+0x54>)
 8014718:	4813      	ldr	r0, [pc, #76]	@ (8014768 <MX_USB_DEVICE_Init+0x58>)
 801471a:	f7fe fccd 	bl	80130b8 <USBD_Init>
 801471e:	4603      	mov	r3, r0
 8014720:	2b00      	cmp	r3, #0
 8014722:	d001      	beq.n	8014728 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014724:	f7ec ff86 	bl	8001634 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014728:	4910      	ldr	r1, [pc, #64]	@ (801476c <MX_USB_DEVICE_Init+0x5c>)
 801472a:	480f      	ldr	r0, [pc, #60]	@ (8014768 <MX_USB_DEVICE_Init+0x58>)
 801472c:	f7fe fcf4 	bl	8013118 <USBD_RegisterClass>
 8014730:	4603      	mov	r3, r0
 8014732:	2b00      	cmp	r3, #0
 8014734:	d001      	beq.n	801473a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014736:	f7ec ff7d 	bl	8001634 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801473a:	490d      	ldr	r1, [pc, #52]	@ (8014770 <MX_USB_DEVICE_Init+0x60>)
 801473c:	480a      	ldr	r0, [pc, #40]	@ (8014768 <MX_USB_DEVICE_Init+0x58>)
 801473e:	f7fe fbeb 	bl	8012f18 <USBD_CDC_RegisterInterface>
 8014742:	4603      	mov	r3, r0
 8014744:	2b00      	cmp	r3, #0
 8014746:	d001      	beq.n	801474c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014748:	f7ec ff74 	bl	8001634 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801474c:	4806      	ldr	r0, [pc, #24]	@ (8014768 <MX_USB_DEVICE_Init+0x58>)
 801474e:	f7fe fd19 	bl	8013184 <USBD_Start>
 8014752:	4603      	mov	r3, r0
 8014754:	2b00      	cmp	r3, #0
 8014756:	d001      	beq.n	801475c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014758:	f7ec ff6c 	bl	8001634 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801475c:	f7f4 ff48 	bl	80095f0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014760:	bf00      	nop
 8014762:	bd80      	pop	{r7, pc}
 8014764:	240000b0 	.word	0x240000b0
 8014768:	240005ac 	.word	0x240005ac
 801476c:	2400001c 	.word	0x2400001c
 8014770:	2400009c 	.word	0x2400009c

08014774 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014778:	2200      	movs	r2, #0
 801477a:	4905      	ldr	r1, [pc, #20]	@ (8014790 <CDC_Init_FS+0x1c>)
 801477c:	4805      	ldr	r0, [pc, #20]	@ (8014794 <CDC_Init_FS+0x20>)
 801477e:	f7fe fbe5 	bl	8012f4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014782:	4905      	ldr	r1, [pc, #20]	@ (8014798 <CDC_Init_FS+0x24>)
 8014784:	4803      	ldr	r0, [pc, #12]	@ (8014794 <CDC_Init_FS+0x20>)
 8014786:	f7fe fc03 	bl	8012f90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801478a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801478c:	4618      	mov	r0, r3
 801478e:	bd80      	pop	{r7, pc}
 8014790:	24001088 	.word	0x24001088
 8014794:	240005ac 	.word	0x240005ac
 8014798:	24000888 	.word	0x24000888

0801479c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801479c:	b480      	push	{r7}
 801479e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80147a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80147a2:	4618      	mov	r0, r3
 80147a4:	46bd      	mov	sp, r7
 80147a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147aa:	4770      	bx	lr

080147ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80147ac:	b480      	push	{r7}
 80147ae:	b083      	sub	sp, #12
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	4603      	mov	r3, r0
 80147b4:	6039      	str	r1, [r7, #0]
 80147b6:	71fb      	strb	r3, [r7, #7]
 80147b8:	4613      	mov	r3, r2
 80147ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80147bc:	79fb      	ldrb	r3, [r7, #7]
 80147be:	2b23      	cmp	r3, #35	@ 0x23
 80147c0:	d84a      	bhi.n	8014858 <CDC_Control_FS+0xac>
 80147c2:	a201      	add	r2, pc, #4	@ (adr r2, 80147c8 <CDC_Control_FS+0x1c>)
 80147c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147c8:	08014859 	.word	0x08014859
 80147cc:	08014859 	.word	0x08014859
 80147d0:	08014859 	.word	0x08014859
 80147d4:	08014859 	.word	0x08014859
 80147d8:	08014859 	.word	0x08014859
 80147dc:	08014859 	.word	0x08014859
 80147e0:	08014859 	.word	0x08014859
 80147e4:	08014859 	.word	0x08014859
 80147e8:	08014859 	.word	0x08014859
 80147ec:	08014859 	.word	0x08014859
 80147f0:	08014859 	.word	0x08014859
 80147f4:	08014859 	.word	0x08014859
 80147f8:	08014859 	.word	0x08014859
 80147fc:	08014859 	.word	0x08014859
 8014800:	08014859 	.word	0x08014859
 8014804:	08014859 	.word	0x08014859
 8014808:	08014859 	.word	0x08014859
 801480c:	08014859 	.word	0x08014859
 8014810:	08014859 	.word	0x08014859
 8014814:	08014859 	.word	0x08014859
 8014818:	08014859 	.word	0x08014859
 801481c:	08014859 	.word	0x08014859
 8014820:	08014859 	.word	0x08014859
 8014824:	08014859 	.word	0x08014859
 8014828:	08014859 	.word	0x08014859
 801482c:	08014859 	.word	0x08014859
 8014830:	08014859 	.word	0x08014859
 8014834:	08014859 	.word	0x08014859
 8014838:	08014859 	.word	0x08014859
 801483c:	08014859 	.word	0x08014859
 8014840:	08014859 	.word	0x08014859
 8014844:	08014859 	.word	0x08014859
 8014848:	08014859 	.word	0x08014859
 801484c:	08014859 	.word	0x08014859
 8014850:	08014859 	.word	0x08014859
 8014854:	08014859 	.word	0x08014859
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014858:	bf00      	nop
  }

  return (USBD_OK);
 801485a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801485c:	4618      	mov	r0, r3
 801485e:	370c      	adds	r7, #12
 8014860:	46bd      	mov	sp, r7
 8014862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014866:	4770      	bx	lr

08014868 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b082      	sub	sp, #8
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
 8014870:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014872:	6879      	ldr	r1, [r7, #4]
 8014874:	4808      	ldr	r0, [pc, #32]	@ (8014898 <CDC_Receive_FS+0x30>)
 8014876:	f7fe fb8b 	bl	8012f90 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801487a:	4807      	ldr	r0, [pc, #28]	@ (8014898 <CDC_Receive_FS+0x30>)
 801487c:	f7fe fbe6 	bl	801304c <USBD_CDC_ReceivePacket>
	CDC_Transmit_FS(Buf,*Len);
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	b29b      	uxth	r3, r3
 8014886:	4619      	mov	r1, r3
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f000 f807 	bl	801489c <CDC_Transmit_FS>
	return (USBD_OK);
 801488e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014890:	4618      	mov	r0, r3
 8014892:	3708      	adds	r7, #8
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}
 8014898:	240005ac 	.word	0x240005ac

0801489c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b084      	sub	sp, #16
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
 80148a4:	460b      	mov	r3, r1
 80148a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80148a8:	2300      	movs	r3, #0
 80148aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80148ac:	4b0d      	ldr	r3, [pc, #52]	@ (80148e4 <CDC_Transmit_FS+0x48>)
 80148ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80148b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80148b4:	68bb      	ldr	r3, [r7, #8]
 80148b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d001      	beq.n	80148c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80148be:	2301      	movs	r3, #1
 80148c0:	e00b      	b.n	80148da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80148c2:	887b      	ldrh	r3, [r7, #2]
 80148c4:	461a      	mov	r2, r3
 80148c6:	6879      	ldr	r1, [r7, #4]
 80148c8:	4806      	ldr	r0, [pc, #24]	@ (80148e4 <CDC_Transmit_FS+0x48>)
 80148ca:	f7fe fb3f 	bl	8012f4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80148ce:	4805      	ldr	r0, [pc, #20]	@ (80148e4 <CDC_Transmit_FS+0x48>)
 80148d0:	f7fe fb7c 	bl	8012fcc <USBD_CDC_TransmitPacket>
 80148d4:	4603      	mov	r3, r0
 80148d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80148d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3710      	adds	r7, #16
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}
 80148e2:	bf00      	nop
 80148e4:	240005ac 	.word	0x240005ac

080148e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80148e8:	b480      	push	{r7}
 80148ea:	b087      	sub	sp, #28
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	60f8      	str	r0, [r7, #12]
 80148f0:	60b9      	str	r1, [r7, #8]
 80148f2:	4613      	mov	r3, r2
 80148f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80148f6:	2300      	movs	r3, #0
 80148f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80148fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80148fe:	4618      	mov	r0, r3
 8014900:	371c      	adds	r7, #28
 8014902:	46bd      	mov	sp, r7
 8014904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014908:	4770      	bx	lr
	...

0801490c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801490c:	b480      	push	{r7}
 801490e:	b083      	sub	sp, #12
 8014910:	af00      	add	r7, sp, #0
 8014912:	4603      	mov	r3, r0
 8014914:	6039      	str	r1, [r7, #0]
 8014916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	2212      	movs	r2, #18
 801491c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801491e:	4b03      	ldr	r3, [pc, #12]	@ (801492c <USBD_FS_DeviceDescriptor+0x20>)
}
 8014920:	4618      	mov	r0, r3
 8014922:	370c      	adds	r7, #12
 8014924:	46bd      	mov	sp, r7
 8014926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492a:	4770      	bx	lr
 801492c:	240000d0 	.word	0x240000d0

08014930 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014930:	b480      	push	{r7}
 8014932:	b083      	sub	sp, #12
 8014934:	af00      	add	r7, sp, #0
 8014936:	4603      	mov	r3, r0
 8014938:	6039      	str	r1, [r7, #0]
 801493a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	2204      	movs	r2, #4
 8014940:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014942:	4b03      	ldr	r3, [pc, #12]	@ (8014950 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014944:	4618      	mov	r0, r3
 8014946:	370c      	adds	r7, #12
 8014948:	46bd      	mov	sp, r7
 801494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494e:	4770      	bx	lr
 8014950:	240000e4 	.word	0x240000e4

08014954 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014954:	b580      	push	{r7, lr}
 8014956:	b082      	sub	sp, #8
 8014958:	af00      	add	r7, sp, #0
 801495a:	4603      	mov	r3, r0
 801495c:	6039      	str	r1, [r7, #0]
 801495e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014960:	79fb      	ldrb	r3, [r7, #7]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d105      	bne.n	8014972 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014966:	683a      	ldr	r2, [r7, #0]
 8014968:	4907      	ldr	r1, [pc, #28]	@ (8014988 <USBD_FS_ProductStrDescriptor+0x34>)
 801496a:	4808      	ldr	r0, [pc, #32]	@ (801498c <USBD_FS_ProductStrDescriptor+0x38>)
 801496c:	f7ff fde4 	bl	8014538 <USBD_GetString>
 8014970:	e004      	b.n	801497c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014972:	683a      	ldr	r2, [r7, #0]
 8014974:	4904      	ldr	r1, [pc, #16]	@ (8014988 <USBD_FS_ProductStrDescriptor+0x34>)
 8014976:	4805      	ldr	r0, [pc, #20]	@ (801498c <USBD_FS_ProductStrDescriptor+0x38>)
 8014978:	f7ff fdde 	bl	8014538 <USBD_GetString>
  }
  return USBD_StrDesc;
 801497c:	4b02      	ldr	r3, [pc, #8]	@ (8014988 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801497e:	4618      	mov	r0, r3
 8014980:	3708      	adds	r7, #8
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}
 8014986:	bf00      	nop
 8014988:	24001888 	.word	0x24001888
 801498c:	08015c54 	.word	0x08015c54

08014990 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b082      	sub	sp, #8
 8014994:	af00      	add	r7, sp, #0
 8014996:	4603      	mov	r3, r0
 8014998:	6039      	str	r1, [r7, #0]
 801499a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801499c:	683a      	ldr	r2, [r7, #0]
 801499e:	4904      	ldr	r1, [pc, #16]	@ (80149b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80149a0:	4804      	ldr	r0, [pc, #16]	@ (80149b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80149a2:	f7ff fdc9 	bl	8014538 <USBD_GetString>
  return USBD_StrDesc;
 80149a6:	4b02      	ldr	r3, [pc, #8]	@ (80149b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80149a8:	4618      	mov	r0, r3
 80149aa:	3708      	adds	r7, #8
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}
 80149b0:	24001888 	.word	0x24001888
 80149b4:	08015c6c 	.word	0x08015c6c

080149b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b082      	sub	sp, #8
 80149bc:	af00      	add	r7, sp, #0
 80149be:	4603      	mov	r3, r0
 80149c0:	6039      	str	r1, [r7, #0]
 80149c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	221a      	movs	r2, #26
 80149c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80149ca:	f000 f843 	bl	8014a54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80149ce:	4b02      	ldr	r3, [pc, #8]	@ (80149d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80149d0:	4618      	mov	r0, r3
 80149d2:	3708      	adds	r7, #8
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bd80      	pop	{r7, pc}
 80149d8:	240000e8 	.word	0x240000e8

080149dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b082      	sub	sp, #8
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	4603      	mov	r3, r0
 80149e4:	6039      	str	r1, [r7, #0]
 80149e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80149e8:	79fb      	ldrb	r3, [r7, #7]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d105      	bne.n	80149fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80149ee:	683a      	ldr	r2, [r7, #0]
 80149f0:	4907      	ldr	r1, [pc, #28]	@ (8014a10 <USBD_FS_ConfigStrDescriptor+0x34>)
 80149f2:	4808      	ldr	r0, [pc, #32]	@ (8014a14 <USBD_FS_ConfigStrDescriptor+0x38>)
 80149f4:	f7ff fda0 	bl	8014538 <USBD_GetString>
 80149f8:	e004      	b.n	8014a04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80149fa:	683a      	ldr	r2, [r7, #0]
 80149fc:	4904      	ldr	r1, [pc, #16]	@ (8014a10 <USBD_FS_ConfigStrDescriptor+0x34>)
 80149fe:	4805      	ldr	r0, [pc, #20]	@ (8014a14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014a00:	f7ff fd9a 	bl	8014538 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014a04:	4b02      	ldr	r3, [pc, #8]	@ (8014a10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014a06:	4618      	mov	r0, r3
 8014a08:	3708      	adds	r7, #8
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd80      	pop	{r7, pc}
 8014a0e:	bf00      	nop
 8014a10:	24001888 	.word	0x24001888
 8014a14:	08015c80 	.word	0x08015c80

08014a18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b082      	sub	sp, #8
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	4603      	mov	r3, r0
 8014a20:	6039      	str	r1, [r7, #0]
 8014a22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014a24:	79fb      	ldrb	r3, [r7, #7]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d105      	bne.n	8014a36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014a2a:	683a      	ldr	r2, [r7, #0]
 8014a2c:	4907      	ldr	r1, [pc, #28]	@ (8014a4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014a2e:	4808      	ldr	r0, [pc, #32]	@ (8014a50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014a30:	f7ff fd82 	bl	8014538 <USBD_GetString>
 8014a34:	e004      	b.n	8014a40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014a36:	683a      	ldr	r2, [r7, #0]
 8014a38:	4904      	ldr	r1, [pc, #16]	@ (8014a4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014a3a:	4805      	ldr	r0, [pc, #20]	@ (8014a50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014a3c:	f7ff fd7c 	bl	8014538 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014a40:	4b02      	ldr	r3, [pc, #8]	@ (8014a4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014a42:	4618      	mov	r0, r3
 8014a44:	3708      	adds	r7, #8
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd80      	pop	{r7, pc}
 8014a4a:	bf00      	nop
 8014a4c:	24001888 	.word	0x24001888
 8014a50:	08015c8c 	.word	0x08015c8c

08014a54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b084      	sub	sp, #16
 8014a58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8014a98 <Get_SerialNum+0x44>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014a60:	4b0e      	ldr	r3, [pc, #56]	@ (8014a9c <Get_SerialNum+0x48>)
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014a66:	4b0e      	ldr	r3, [pc, #56]	@ (8014aa0 <Get_SerialNum+0x4c>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014a6c:	68fa      	ldr	r2, [r7, #12]
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	4413      	add	r3, r2
 8014a72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d009      	beq.n	8014a8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014a7a:	2208      	movs	r2, #8
 8014a7c:	4909      	ldr	r1, [pc, #36]	@ (8014aa4 <Get_SerialNum+0x50>)
 8014a7e:	68f8      	ldr	r0, [r7, #12]
 8014a80:	f000 f814 	bl	8014aac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014a84:	2204      	movs	r2, #4
 8014a86:	4908      	ldr	r1, [pc, #32]	@ (8014aa8 <Get_SerialNum+0x54>)
 8014a88:	68b8      	ldr	r0, [r7, #8]
 8014a8a:	f000 f80f 	bl	8014aac <IntToUnicode>
  }
}
 8014a8e:	bf00      	nop
 8014a90:	3710      	adds	r7, #16
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}
 8014a96:	bf00      	nop
 8014a98:	1ff1e800 	.word	0x1ff1e800
 8014a9c:	1ff1e804 	.word	0x1ff1e804
 8014aa0:	1ff1e808 	.word	0x1ff1e808
 8014aa4:	240000ea 	.word	0x240000ea
 8014aa8:	240000fa 	.word	0x240000fa

08014aac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014aac:	b480      	push	{r7}
 8014aae:	b087      	sub	sp, #28
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	60f8      	str	r0, [r7, #12]
 8014ab4:	60b9      	str	r1, [r7, #8]
 8014ab6:	4613      	mov	r3, r2
 8014ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014aba:	2300      	movs	r3, #0
 8014abc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014abe:	2300      	movs	r3, #0
 8014ac0:	75fb      	strb	r3, [r7, #23]
 8014ac2:	e027      	b.n	8014b14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	0f1b      	lsrs	r3, r3, #28
 8014ac8:	2b09      	cmp	r3, #9
 8014aca:	d80b      	bhi.n	8014ae4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	0f1b      	lsrs	r3, r3, #28
 8014ad0:	b2da      	uxtb	r2, r3
 8014ad2:	7dfb      	ldrb	r3, [r7, #23]
 8014ad4:	005b      	lsls	r3, r3, #1
 8014ad6:	4619      	mov	r1, r3
 8014ad8:	68bb      	ldr	r3, [r7, #8]
 8014ada:	440b      	add	r3, r1
 8014adc:	3230      	adds	r2, #48	@ 0x30
 8014ade:	b2d2      	uxtb	r2, r2
 8014ae0:	701a      	strb	r2, [r3, #0]
 8014ae2:	e00a      	b.n	8014afa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	0f1b      	lsrs	r3, r3, #28
 8014ae8:	b2da      	uxtb	r2, r3
 8014aea:	7dfb      	ldrb	r3, [r7, #23]
 8014aec:	005b      	lsls	r3, r3, #1
 8014aee:	4619      	mov	r1, r3
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	440b      	add	r3, r1
 8014af4:	3237      	adds	r2, #55	@ 0x37
 8014af6:	b2d2      	uxtb	r2, r2
 8014af8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	011b      	lsls	r3, r3, #4
 8014afe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014b00:	7dfb      	ldrb	r3, [r7, #23]
 8014b02:	005b      	lsls	r3, r3, #1
 8014b04:	3301      	adds	r3, #1
 8014b06:	68ba      	ldr	r2, [r7, #8]
 8014b08:	4413      	add	r3, r2
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014b0e:	7dfb      	ldrb	r3, [r7, #23]
 8014b10:	3301      	adds	r3, #1
 8014b12:	75fb      	strb	r3, [r7, #23]
 8014b14:	7dfa      	ldrb	r2, [r7, #23]
 8014b16:	79fb      	ldrb	r3, [r7, #7]
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d3d3      	bcc.n	8014ac4 <IntToUnicode+0x18>
  }
}
 8014b1c:	bf00      	nop
 8014b1e:	bf00      	nop
 8014b20:	371c      	adds	r7, #28
 8014b22:	46bd      	mov	sp, r7
 8014b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b28:	4770      	bx	lr
	...

08014b2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b0ba      	sub	sp, #232	@ 0xe8
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014b34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8014b38:	2200      	movs	r2, #0
 8014b3a:	601a      	str	r2, [r3, #0]
 8014b3c:	605a      	str	r2, [r3, #4]
 8014b3e:	609a      	str	r2, [r3, #8]
 8014b40:	60da      	str	r2, [r3, #12]
 8014b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014b44:	f107 0310 	add.w	r3, r7, #16
 8014b48:	22c0      	movs	r2, #192	@ 0xc0
 8014b4a:	2100      	movs	r1, #0
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f000 fb47 	bl	80151e0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	4a2c      	ldr	r2, [pc, #176]	@ (8014c08 <HAL_PCD_MspInit+0xdc>)
 8014b58:	4293      	cmp	r3, r2
 8014b5a:	d151      	bne.n	8014c00 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014b5c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8014b60:	f04f 0300 	mov.w	r3, #0
 8014b64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8014b68:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8014b6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014b70:	f107 0310 	add.w	r3, r7, #16
 8014b74:	4618      	mov	r0, r3
 8014b76:	f7f5 fd31 	bl	800a5dc <HAL_RCCEx_PeriphCLKConfig>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d001      	beq.n	8014b84 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8014b80:	f7ec fd58 	bl	8001634 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8014b84:	f7f4 fd34 	bl	80095f0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014b88:	4b20      	ldr	r3, [pc, #128]	@ (8014c0c <HAL_PCD_MspInit+0xe0>)
 8014b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8014c0c <HAL_PCD_MspInit+0xe0>)
 8014b90:	f043 0301 	orr.w	r3, r3, #1
 8014b94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8014b98:	4b1c      	ldr	r3, [pc, #112]	@ (8014c0c <HAL_PCD_MspInit+0xe0>)
 8014b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014b9e:	f003 0301 	and.w	r3, r3, #1
 8014ba2:	60fb      	str	r3, [r7, #12]
 8014ba4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014ba6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8014baa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014bae:	2302      	movs	r3, #2
 8014bb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014bba:	2300      	movs	r3, #0
 8014bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8014bc0:	230a      	movs	r3, #10
 8014bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014bc6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8014bca:	4619      	mov	r1, r3
 8014bcc:	4810      	ldr	r0, [pc, #64]	@ (8014c10 <HAL_PCD_MspInit+0xe4>)
 8014bce:	f7f1 fb9f 	bl	8006310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8014c0c <HAL_PCD_MspInit+0xe0>)
 8014bd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8014c0c <HAL_PCD_MspInit+0xe0>)
 8014bda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014bde:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8014be2:	4b0a      	ldr	r3, [pc, #40]	@ (8014c0c <HAL_PCD_MspInit+0xe0>)
 8014be4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014bec:	60bb      	str	r3, [r7, #8]
 8014bee:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	2100      	movs	r1, #0
 8014bf4:	2065      	movs	r0, #101	@ 0x65
 8014bf6:	f7ed fcee 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014bfa:	2065      	movs	r0, #101	@ 0x65
 8014bfc:	f7ed fd05 	bl	800260a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014c00:	bf00      	nop
 8014c02:	37e8      	adds	r7, #232	@ 0xe8
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}
 8014c08:	40080000 	.word	0x40080000
 8014c0c:	58024400 	.word	0x58024400
 8014c10:	58020000 	.word	0x58020000

08014c14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b082      	sub	sp, #8
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8014c28:	4619      	mov	r1, r3
 8014c2a:	4610      	mov	r0, r2
 8014c2c:	f7fe faf7 	bl	801321e <USBD_LL_SetupStage>
}
 8014c30:	bf00      	nop
 8014c32:	3708      	adds	r7, #8
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd80      	pop	{r7, pc}

08014c38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b082      	sub	sp, #8
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	460b      	mov	r3, r1
 8014c42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8014c4a:	78fa      	ldrb	r2, [r7, #3]
 8014c4c:	6879      	ldr	r1, [r7, #4]
 8014c4e:	4613      	mov	r3, r2
 8014c50:	00db      	lsls	r3, r3, #3
 8014c52:	4413      	add	r3, r2
 8014c54:	009b      	lsls	r3, r3, #2
 8014c56:	440b      	add	r3, r1
 8014c58:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014c5c:	681a      	ldr	r2, [r3, #0]
 8014c5e:	78fb      	ldrb	r3, [r7, #3]
 8014c60:	4619      	mov	r1, r3
 8014c62:	f7fe fb31 	bl	80132c8 <USBD_LL_DataOutStage>
}
 8014c66:	bf00      	nop
 8014c68:	3708      	adds	r7, #8
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}

08014c6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c6e:	b580      	push	{r7, lr}
 8014c70:	b082      	sub	sp, #8
 8014c72:	af00      	add	r7, sp, #0
 8014c74:	6078      	str	r0, [r7, #4]
 8014c76:	460b      	mov	r3, r1
 8014c78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8014c80:	78fa      	ldrb	r2, [r7, #3]
 8014c82:	6879      	ldr	r1, [r7, #4]
 8014c84:	4613      	mov	r3, r2
 8014c86:	00db      	lsls	r3, r3, #3
 8014c88:	4413      	add	r3, r2
 8014c8a:	009b      	lsls	r3, r3, #2
 8014c8c:	440b      	add	r3, r1
 8014c8e:	3320      	adds	r3, #32
 8014c90:	681a      	ldr	r2, [r3, #0]
 8014c92:	78fb      	ldrb	r3, [r7, #3]
 8014c94:	4619      	mov	r1, r3
 8014c96:	f7fe fbca 	bl	801342e <USBD_LL_DataInStage>
}
 8014c9a:	bf00      	nop
 8014c9c:	3708      	adds	r7, #8
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	bd80      	pop	{r7, pc}

08014ca2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ca2:	b580      	push	{r7, lr}
 8014ca4:	b082      	sub	sp, #8
 8014ca6:	af00      	add	r7, sp, #0
 8014ca8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7fe fd04 	bl	80136be <USBD_LL_SOF>
}
 8014cb6:	bf00      	nop
 8014cb8:	3708      	adds	r7, #8
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}

08014cbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014cbe:	b580      	push	{r7, lr}
 8014cc0:	b084      	sub	sp, #16
 8014cc2:	af00      	add	r7, sp, #0
 8014cc4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014cc6:	2301      	movs	r3, #1
 8014cc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	79db      	ldrb	r3, [r3, #7]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d102      	bne.n	8014cd8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	73fb      	strb	r3, [r7, #15]
 8014cd6:	e008      	b.n	8014cea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	79db      	ldrb	r3, [r3, #7]
 8014cdc:	2b02      	cmp	r3, #2
 8014cde:	d102      	bne.n	8014ce6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014ce0:	2301      	movs	r3, #1
 8014ce2:	73fb      	strb	r3, [r7, #15]
 8014ce4:	e001      	b.n	8014cea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014ce6:	f7ec fca5 	bl	8001634 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014cf0:	7bfa      	ldrb	r2, [r7, #15]
 8014cf2:	4611      	mov	r1, r2
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f7fe fc9e 	bl	8013636 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7fe fc46 	bl	8013592 <USBD_LL_Reset>
}
 8014d06:	bf00      	nop
 8014d08:	3710      	adds	r7, #16
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	bd80      	pop	{r7, pc}
	...

08014d10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b082      	sub	sp, #8
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014d1e:	4618      	mov	r0, r3
 8014d20:	f7fe fc99 	bl	8013656 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	687a      	ldr	r2, [r7, #4]
 8014d30:	6812      	ldr	r2, [r2, #0]
 8014d32:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8014d36:	f043 0301 	orr.w	r3, r3, #1
 8014d3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	7adb      	ldrb	r3, [r3, #11]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d005      	beq.n	8014d50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014d44:	4b04      	ldr	r3, [pc, #16]	@ (8014d58 <HAL_PCD_SuspendCallback+0x48>)
 8014d46:	691b      	ldr	r3, [r3, #16]
 8014d48:	4a03      	ldr	r2, [pc, #12]	@ (8014d58 <HAL_PCD_SuspendCallback+0x48>)
 8014d4a:	f043 0306 	orr.w	r3, r3, #6
 8014d4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014d50:	bf00      	nop
 8014d52:	3708      	adds	r7, #8
 8014d54:	46bd      	mov	sp, r7
 8014d56:	bd80      	pop	{r7, pc}
 8014d58:	e000ed00 	.word	0xe000ed00

08014d5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b082      	sub	sp, #8
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f7fe fc8f 	bl	801368e <USBD_LL_Resume>
}
 8014d70:	bf00      	nop
 8014d72:	3708      	adds	r7, #8
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}

08014d78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
 8014d80:	460b      	mov	r3, r1
 8014d82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014d8a:	78fa      	ldrb	r2, [r7, #3]
 8014d8c:	4611      	mov	r1, r2
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7fe fce7 	bl	8013762 <USBD_LL_IsoOUTIncomplete>
}
 8014d94:	bf00      	nop
 8014d96:	3708      	adds	r7, #8
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}

08014d9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b082      	sub	sp, #8
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
 8014da4:	460b      	mov	r3, r1
 8014da6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014dae:	78fa      	ldrb	r2, [r7, #3]
 8014db0:	4611      	mov	r1, r2
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7fe fca3 	bl	80136fe <USBD_LL_IsoINIncomplete>
}
 8014db8:	bf00      	nop
 8014dba:	3708      	adds	r7, #8
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bd80      	pop	{r7, pc}

08014dc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b082      	sub	sp, #8
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f7fe fcf9 	bl	80137c6 <USBD_LL_DevConnected>
}
 8014dd4:	bf00      	nop
 8014dd6:	3708      	adds	r7, #8
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b082      	sub	sp, #8
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7fe fcf6 	bl	80137dc <USBD_LL_DevDisconnected>
}
 8014df0:	bf00      	nop
 8014df2:	3708      	adds	r7, #8
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}

08014df8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b082      	sub	sp, #8
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	781b      	ldrb	r3, [r3, #0]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d13e      	bne.n	8014e86 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014e08:	4a21      	ldr	r2, [pc, #132]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	4a1f      	ldr	r2, [pc, #124]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e14:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014e18:	4b1d      	ldr	r3, [pc, #116]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8014e94 <USBD_LL_Init+0x9c>)
 8014e1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8014e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e20:	2209      	movs	r2, #9
 8014e22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014e24:	4b1a      	ldr	r3, [pc, #104]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e26:	2202      	movs	r2, #2
 8014e28:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014e2a:	4b19      	ldr	r3, [pc, #100]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014e30:	4b17      	ldr	r3, [pc, #92]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e32:	2202      	movs	r2, #2
 8014e34:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014e36:	4b16      	ldr	r3, [pc, #88]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e38:	2200      	movs	r2, #0
 8014e3a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014e3c:	4b14      	ldr	r3, [pc, #80]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e3e:	2200      	movs	r2, #0
 8014e40:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014e42:	4b13      	ldr	r3, [pc, #76]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e44:	2200      	movs	r2, #0
 8014e46:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8014e48:	4b11      	ldr	r3, [pc, #68]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014e4e:	4b10      	ldr	r3, [pc, #64]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e50:	2200      	movs	r2, #0
 8014e52:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014e54:	4b0e      	ldr	r3, [pc, #56]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e56:	2200      	movs	r2, #0
 8014e58:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014e5a:	480d      	ldr	r0, [pc, #52]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e5c:	f7f3 f8ed 	bl	800803a <HAL_PCD_Init>
 8014e60:	4603      	mov	r3, r0
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d001      	beq.n	8014e6a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8014e66:	f7ec fbe5 	bl	8001634 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014e6a:	2180      	movs	r1, #128	@ 0x80
 8014e6c:	4808      	ldr	r0, [pc, #32]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e6e:	f7f4 fb44 	bl	80094fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014e72:	2240      	movs	r2, #64	@ 0x40
 8014e74:	2100      	movs	r1, #0
 8014e76:	4806      	ldr	r0, [pc, #24]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e78:	f7f4 faf8 	bl	800946c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014e7c:	2280      	movs	r2, #128	@ 0x80
 8014e7e:	2101      	movs	r1, #1
 8014e80:	4803      	ldr	r0, [pc, #12]	@ (8014e90 <USBD_LL_Init+0x98>)
 8014e82:	f7f4 faf3 	bl	800946c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8014e86:	2300      	movs	r3, #0
}
 8014e88:	4618      	mov	r0, r3
 8014e8a:	3708      	adds	r7, #8
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}
 8014e90:	24001a88 	.word	0x24001a88
 8014e94:	40080000 	.word	0x40080000

08014e98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b084      	sub	sp, #16
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7f3 f9cf 	bl	8008252 <HAL_PCD_Start>
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014eb8:	7bfb      	ldrb	r3, [r7, #15]
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f000 f942 	bl	8015144 <USBD_Get_USB_Status>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ec4:	7bbb      	ldrb	r3, [r7, #14]
}
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	3710      	adds	r7, #16
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bd80      	pop	{r7, pc}

08014ece <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014ece:	b580      	push	{r7, lr}
 8014ed0:	b084      	sub	sp, #16
 8014ed2:	af00      	add	r7, sp, #0
 8014ed4:	6078      	str	r0, [r7, #4]
 8014ed6:	4608      	mov	r0, r1
 8014ed8:	4611      	mov	r1, r2
 8014eda:	461a      	mov	r2, r3
 8014edc:	4603      	mov	r3, r0
 8014ede:	70fb      	strb	r3, [r7, #3]
 8014ee0:	460b      	mov	r3, r1
 8014ee2:	70bb      	strb	r3, [r7, #2]
 8014ee4:	4613      	mov	r3, r2
 8014ee6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ee8:	2300      	movs	r3, #0
 8014eea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014eec:	2300      	movs	r3, #0
 8014eee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014ef6:	78bb      	ldrb	r3, [r7, #2]
 8014ef8:	883a      	ldrh	r2, [r7, #0]
 8014efa:	78f9      	ldrb	r1, [r7, #3]
 8014efc:	f7f3 fed0 	bl	8008ca0 <HAL_PCD_EP_Open>
 8014f00:	4603      	mov	r3, r0
 8014f02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f04:	7bfb      	ldrb	r3, [r7, #15]
 8014f06:	4618      	mov	r0, r3
 8014f08:	f000 f91c 	bl	8015144 <USBD_Get_USB_Status>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f10:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f12:	4618      	mov	r0, r3
 8014f14:	3710      	adds	r7, #16
 8014f16:	46bd      	mov	sp, r7
 8014f18:	bd80      	pop	{r7, pc}

08014f1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f1a:	b580      	push	{r7, lr}
 8014f1c:	b084      	sub	sp, #16
 8014f1e:	af00      	add	r7, sp, #0
 8014f20:	6078      	str	r0, [r7, #4]
 8014f22:	460b      	mov	r3, r1
 8014f24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f26:	2300      	movs	r3, #0
 8014f28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014f34:	78fa      	ldrb	r2, [r7, #3]
 8014f36:	4611      	mov	r1, r2
 8014f38:	4618      	mov	r0, r3
 8014f3a:	f7f3 ff1b 	bl	8008d74 <HAL_PCD_EP_Close>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f42:	7bfb      	ldrb	r3, [r7, #15]
 8014f44:	4618      	mov	r0, r3
 8014f46:	f000 f8fd 	bl	8015144 <USBD_Get_USB_Status>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	3710      	adds	r7, #16
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}

08014f58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b084      	sub	sp, #16
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
 8014f60:	460b      	mov	r3, r1
 8014f62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f64:	2300      	movs	r3, #0
 8014f66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f68:	2300      	movs	r3, #0
 8014f6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014f72:	78fa      	ldrb	r2, [r7, #3]
 8014f74:	4611      	mov	r1, r2
 8014f76:	4618      	mov	r0, r3
 8014f78:	f7f3 ffd3 	bl	8008f22 <HAL_PCD_EP_SetStall>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f80:	7bfb      	ldrb	r3, [r7, #15]
 8014f82:	4618      	mov	r0, r3
 8014f84:	f000 f8de 	bl	8015144 <USBD_Get_USB_Status>
 8014f88:	4603      	mov	r3, r0
 8014f8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f8e:	4618      	mov	r0, r3
 8014f90:	3710      	adds	r7, #16
 8014f92:	46bd      	mov	sp, r7
 8014f94:	bd80      	pop	{r7, pc}

08014f96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f96:	b580      	push	{r7, lr}
 8014f98:	b084      	sub	sp, #16
 8014f9a:	af00      	add	r7, sp, #0
 8014f9c:	6078      	str	r0, [r7, #4]
 8014f9e:	460b      	mov	r3, r1
 8014fa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014fb0:	78fa      	ldrb	r2, [r7, #3]
 8014fb2:	4611      	mov	r1, r2
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7f4 f817 	bl	8008fe8 <HAL_PCD_EP_ClrStall>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014fbe:	7bfb      	ldrb	r3, [r7, #15]
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f000 f8bf 	bl	8015144 <USBD_Get_USB_Status>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014fca:	7bbb      	ldrb	r3, [r7, #14]
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	3710      	adds	r7, #16
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}

08014fd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014fd4:	b480      	push	{r7}
 8014fd6:	b085      	sub	sp, #20
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
 8014fdc:	460b      	mov	r3, r1
 8014fde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014fe6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	da0b      	bge.n	8015008 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014ff0:	78fb      	ldrb	r3, [r7, #3]
 8014ff2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014ff6:	68f9      	ldr	r1, [r7, #12]
 8014ff8:	4613      	mov	r3, r2
 8014ffa:	00db      	lsls	r3, r3, #3
 8014ffc:	4413      	add	r3, r2
 8014ffe:	009b      	lsls	r3, r3, #2
 8015000:	440b      	add	r3, r1
 8015002:	3316      	adds	r3, #22
 8015004:	781b      	ldrb	r3, [r3, #0]
 8015006:	e00b      	b.n	8015020 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015008:	78fb      	ldrb	r3, [r7, #3]
 801500a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801500e:	68f9      	ldr	r1, [r7, #12]
 8015010:	4613      	mov	r3, r2
 8015012:	00db      	lsls	r3, r3, #3
 8015014:	4413      	add	r3, r2
 8015016:	009b      	lsls	r3, r3, #2
 8015018:	440b      	add	r3, r1
 801501a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801501e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015020:	4618      	mov	r0, r3
 8015022:	3714      	adds	r7, #20
 8015024:	46bd      	mov	sp, r7
 8015026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502a:	4770      	bx	lr

0801502c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b084      	sub	sp, #16
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
 8015034:	460b      	mov	r3, r1
 8015036:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015038:	2300      	movs	r3, #0
 801503a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801503c:	2300      	movs	r3, #0
 801503e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015046:	78fa      	ldrb	r2, [r7, #3]
 8015048:	4611      	mov	r1, r2
 801504a:	4618      	mov	r0, r3
 801504c:	f7f3 fe04 	bl	8008c58 <HAL_PCD_SetAddress>
 8015050:	4603      	mov	r3, r0
 8015052:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015054:	7bfb      	ldrb	r3, [r7, #15]
 8015056:	4618      	mov	r0, r3
 8015058:	f000 f874 	bl	8015144 <USBD_Get_USB_Status>
 801505c:	4603      	mov	r3, r0
 801505e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015060:	7bbb      	ldrb	r3, [r7, #14]
}
 8015062:	4618      	mov	r0, r3
 8015064:	3710      	adds	r7, #16
 8015066:	46bd      	mov	sp, r7
 8015068:	bd80      	pop	{r7, pc}

0801506a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801506a:	b580      	push	{r7, lr}
 801506c:	b086      	sub	sp, #24
 801506e:	af00      	add	r7, sp, #0
 8015070:	60f8      	str	r0, [r7, #12]
 8015072:	607a      	str	r2, [r7, #4]
 8015074:	603b      	str	r3, [r7, #0]
 8015076:	460b      	mov	r3, r1
 8015078:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801507a:	2300      	movs	r3, #0
 801507c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801507e:	2300      	movs	r3, #0
 8015080:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015088:	7af9      	ldrb	r1, [r7, #11]
 801508a:	683b      	ldr	r3, [r7, #0]
 801508c:	687a      	ldr	r2, [r7, #4]
 801508e:	f7f3 ff0e 	bl	8008eae <HAL_PCD_EP_Transmit>
 8015092:	4603      	mov	r3, r0
 8015094:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015096:	7dfb      	ldrb	r3, [r7, #23]
 8015098:	4618      	mov	r0, r3
 801509a:	f000 f853 	bl	8015144 <USBD_Get_USB_Status>
 801509e:	4603      	mov	r3, r0
 80150a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80150a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80150a4:	4618      	mov	r0, r3
 80150a6:	3718      	adds	r7, #24
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}

080150ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b086      	sub	sp, #24
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	60f8      	str	r0, [r7, #12]
 80150b4:	607a      	str	r2, [r7, #4]
 80150b6:	603b      	str	r3, [r7, #0]
 80150b8:	460b      	mov	r3, r1
 80150ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150bc:	2300      	movs	r3, #0
 80150be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80150c0:	2300      	movs	r3, #0
 80150c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80150ca:	7af9      	ldrb	r1, [r7, #11]
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	687a      	ldr	r2, [r7, #4]
 80150d0:	f7f3 fe9a 	bl	8008e08 <HAL_PCD_EP_Receive>
 80150d4:	4603      	mov	r3, r0
 80150d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80150d8:	7dfb      	ldrb	r3, [r7, #23]
 80150da:	4618      	mov	r0, r3
 80150dc:	f000 f832 	bl	8015144 <USBD_Get_USB_Status>
 80150e0:	4603      	mov	r3, r0
 80150e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80150e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80150e6:	4618      	mov	r0, r3
 80150e8:	3718      	adds	r7, #24
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd80      	pop	{r7, pc}

080150ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80150ee:	b580      	push	{r7, lr}
 80150f0:	b082      	sub	sp, #8
 80150f2:	af00      	add	r7, sp, #0
 80150f4:	6078      	str	r0, [r7, #4]
 80150f6:	460b      	mov	r3, r1
 80150f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015100:	78fa      	ldrb	r2, [r7, #3]
 8015102:	4611      	mov	r1, r2
 8015104:	4618      	mov	r0, r3
 8015106:	f7f3 feba 	bl	8008e7e <HAL_PCD_EP_GetRxCount>
 801510a:	4603      	mov	r3, r0
}
 801510c:	4618      	mov	r0, r3
 801510e:	3708      	adds	r7, #8
 8015110:	46bd      	mov	sp, r7
 8015112:	bd80      	pop	{r7, pc}

08015114 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015114:	b480      	push	{r7}
 8015116:	b083      	sub	sp, #12
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801511c:	4b03      	ldr	r3, [pc, #12]	@ (801512c <USBD_static_malloc+0x18>)
}
 801511e:	4618      	mov	r0, r3
 8015120:	370c      	adds	r7, #12
 8015122:	46bd      	mov	sp, r7
 8015124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015128:	4770      	bx	lr
 801512a:	bf00      	nop
 801512c:	24001f6c 	.word	0x24001f6c

08015130 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015130:	b480      	push	{r7}
 8015132:	b083      	sub	sp, #12
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015138:	bf00      	nop
 801513a:	370c      	adds	r7, #12
 801513c:	46bd      	mov	sp, r7
 801513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015142:	4770      	bx	lr

08015144 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015144:	b480      	push	{r7}
 8015146:	b085      	sub	sp, #20
 8015148:	af00      	add	r7, sp, #0
 801514a:	4603      	mov	r3, r0
 801514c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801514e:	2300      	movs	r3, #0
 8015150:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015152:	79fb      	ldrb	r3, [r7, #7]
 8015154:	2b03      	cmp	r3, #3
 8015156:	d817      	bhi.n	8015188 <USBD_Get_USB_Status+0x44>
 8015158:	a201      	add	r2, pc, #4	@ (adr r2, 8015160 <USBD_Get_USB_Status+0x1c>)
 801515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801515e:	bf00      	nop
 8015160:	08015171 	.word	0x08015171
 8015164:	08015177 	.word	0x08015177
 8015168:	0801517d 	.word	0x0801517d
 801516c:	08015183 	.word	0x08015183
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015170:	2300      	movs	r3, #0
 8015172:	73fb      	strb	r3, [r7, #15]
    break;
 8015174:	e00b      	b.n	801518e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015176:	2303      	movs	r3, #3
 8015178:	73fb      	strb	r3, [r7, #15]
    break;
 801517a:	e008      	b.n	801518e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801517c:	2301      	movs	r3, #1
 801517e:	73fb      	strb	r3, [r7, #15]
    break;
 8015180:	e005      	b.n	801518e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015182:	2303      	movs	r3, #3
 8015184:	73fb      	strb	r3, [r7, #15]
    break;
 8015186:	e002      	b.n	801518e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015188:	2303      	movs	r3, #3
 801518a:	73fb      	strb	r3, [r7, #15]
    break;
 801518c:	bf00      	nop
  }
  return usb_status;
 801518e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015190:	4618      	mov	r0, r3
 8015192:	3714      	adds	r7, #20
 8015194:	46bd      	mov	sp, r7
 8015196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519a:	4770      	bx	lr

0801519c <siprintf>:
 801519c:	b40e      	push	{r1, r2, r3}
 801519e:	b510      	push	{r4, lr}
 80151a0:	b09d      	sub	sp, #116	@ 0x74
 80151a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80151a4:	9002      	str	r0, [sp, #8]
 80151a6:	9006      	str	r0, [sp, #24]
 80151a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80151ac:	480a      	ldr	r0, [pc, #40]	@ (80151d8 <siprintf+0x3c>)
 80151ae:	9107      	str	r1, [sp, #28]
 80151b0:	9104      	str	r1, [sp, #16]
 80151b2:	490a      	ldr	r1, [pc, #40]	@ (80151dc <siprintf+0x40>)
 80151b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80151b8:	9105      	str	r1, [sp, #20]
 80151ba:	2400      	movs	r4, #0
 80151bc:	a902      	add	r1, sp, #8
 80151be:	6800      	ldr	r0, [r0, #0]
 80151c0:	9301      	str	r3, [sp, #4]
 80151c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80151c4:	f000 f994 	bl	80154f0 <_svfiprintf_r>
 80151c8:	9b02      	ldr	r3, [sp, #8]
 80151ca:	701c      	strb	r4, [r3, #0]
 80151cc:	b01d      	add	sp, #116	@ 0x74
 80151ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151d2:	b003      	add	sp, #12
 80151d4:	4770      	bx	lr
 80151d6:	bf00      	nop
 80151d8:	24000104 	.word	0x24000104
 80151dc:	ffff0208 	.word	0xffff0208

080151e0 <memset>:
 80151e0:	4402      	add	r2, r0
 80151e2:	4603      	mov	r3, r0
 80151e4:	4293      	cmp	r3, r2
 80151e6:	d100      	bne.n	80151ea <memset+0xa>
 80151e8:	4770      	bx	lr
 80151ea:	f803 1b01 	strb.w	r1, [r3], #1
 80151ee:	e7f9      	b.n	80151e4 <memset+0x4>

080151f0 <__errno>:
 80151f0:	4b01      	ldr	r3, [pc, #4]	@ (80151f8 <__errno+0x8>)
 80151f2:	6818      	ldr	r0, [r3, #0]
 80151f4:	4770      	bx	lr
 80151f6:	bf00      	nop
 80151f8:	24000104 	.word	0x24000104

080151fc <__libc_init_array>:
 80151fc:	b570      	push	{r4, r5, r6, lr}
 80151fe:	4d0d      	ldr	r5, [pc, #52]	@ (8015234 <__libc_init_array+0x38>)
 8015200:	4c0d      	ldr	r4, [pc, #52]	@ (8015238 <__libc_init_array+0x3c>)
 8015202:	1b64      	subs	r4, r4, r5
 8015204:	10a4      	asrs	r4, r4, #2
 8015206:	2600      	movs	r6, #0
 8015208:	42a6      	cmp	r6, r4
 801520a:	d109      	bne.n	8015220 <__libc_init_array+0x24>
 801520c:	4d0b      	ldr	r5, [pc, #44]	@ (801523c <__libc_init_array+0x40>)
 801520e:	4c0c      	ldr	r4, [pc, #48]	@ (8015240 <__libc_init_array+0x44>)
 8015210:	f000 fc64 	bl	8015adc <_init>
 8015214:	1b64      	subs	r4, r4, r5
 8015216:	10a4      	asrs	r4, r4, #2
 8015218:	2600      	movs	r6, #0
 801521a:	42a6      	cmp	r6, r4
 801521c:	d105      	bne.n	801522a <__libc_init_array+0x2e>
 801521e:	bd70      	pop	{r4, r5, r6, pc}
 8015220:	f855 3b04 	ldr.w	r3, [r5], #4
 8015224:	4798      	blx	r3
 8015226:	3601      	adds	r6, #1
 8015228:	e7ee      	b.n	8015208 <__libc_init_array+0xc>
 801522a:	f855 3b04 	ldr.w	r3, [r5], #4
 801522e:	4798      	blx	r3
 8015230:	3601      	adds	r6, #1
 8015232:	e7f2      	b.n	801521a <__libc_init_array+0x1e>
 8015234:	08015d18 	.word	0x08015d18
 8015238:	08015d18 	.word	0x08015d18
 801523c:	08015d18 	.word	0x08015d18
 8015240:	08015d1c 	.word	0x08015d1c

08015244 <__retarget_lock_acquire_recursive>:
 8015244:	4770      	bx	lr

08015246 <__retarget_lock_release_recursive>:
 8015246:	4770      	bx	lr

08015248 <_free_r>:
 8015248:	b538      	push	{r3, r4, r5, lr}
 801524a:	4605      	mov	r5, r0
 801524c:	2900      	cmp	r1, #0
 801524e:	d041      	beq.n	80152d4 <_free_r+0x8c>
 8015250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015254:	1f0c      	subs	r4, r1, #4
 8015256:	2b00      	cmp	r3, #0
 8015258:	bfb8      	it	lt
 801525a:	18e4      	addlt	r4, r4, r3
 801525c:	f000 f8e0 	bl	8015420 <__malloc_lock>
 8015260:	4a1d      	ldr	r2, [pc, #116]	@ (80152d8 <_free_r+0x90>)
 8015262:	6813      	ldr	r3, [r2, #0]
 8015264:	b933      	cbnz	r3, 8015274 <_free_r+0x2c>
 8015266:	6063      	str	r3, [r4, #4]
 8015268:	6014      	str	r4, [r2, #0]
 801526a:	4628      	mov	r0, r5
 801526c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015270:	f000 b8dc 	b.w	801542c <__malloc_unlock>
 8015274:	42a3      	cmp	r3, r4
 8015276:	d908      	bls.n	801528a <_free_r+0x42>
 8015278:	6820      	ldr	r0, [r4, #0]
 801527a:	1821      	adds	r1, r4, r0
 801527c:	428b      	cmp	r3, r1
 801527e:	bf01      	itttt	eq
 8015280:	6819      	ldreq	r1, [r3, #0]
 8015282:	685b      	ldreq	r3, [r3, #4]
 8015284:	1809      	addeq	r1, r1, r0
 8015286:	6021      	streq	r1, [r4, #0]
 8015288:	e7ed      	b.n	8015266 <_free_r+0x1e>
 801528a:	461a      	mov	r2, r3
 801528c:	685b      	ldr	r3, [r3, #4]
 801528e:	b10b      	cbz	r3, 8015294 <_free_r+0x4c>
 8015290:	42a3      	cmp	r3, r4
 8015292:	d9fa      	bls.n	801528a <_free_r+0x42>
 8015294:	6811      	ldr	r1, [r2, #0]
 8015296:	1850      	adds	r0, r2, r1
 8015298:	42a0      	cmp	r0, r4
 801529a:	d10b      	bne.n	80152b4 <_free_r+0x6c>
 801529c:	6820      	ldr	r0, [r4, #0]
 801529e:	4401      	add	r1, r0
 80152a0:	1850      	adds	r0, r2, r1
 80152a2:	4283      	cmp	r3, r0
 80152a4:	6011      	str	r1, [r2, #0]
 80152a6:	d1e0      	bne.n	801526a <_free_r+0x22>
 80152a8:	6818      	ldr	r0, [r3, #0]
 80152aa:	685b      	ldr	r3, [r3, #4]
 80152ac:	6053      	str	r3, [r2, #4]
 80152ae:	4408      	add	r0, r1
 80152b0:	6010      	str	r0, [r2, #0]
 80152b2:	e7da      	b.n	801526a <_free_r+0x22>
 80152b4:	d902      	bls.n	80152bc <_free_r+0x74>
 80152b6:	230c      	movs	r3, #12
 80152b8:	602b      	str	r3, [r5, #0]
 80152ba:	e7d6      	b.n	801526a <_free_r+0x22>
 80152bc:	6820      	ldr	r0, [r4, #0]
 80152be:	1821      	adds	r1, r4, r0
 80152c0:	428b      	cmp	r3, r1
 80152c2:	bf04      	itt	eq
 80152c4:	6819      	ldreq	r1, [r3, #0]
 80152c6:	685b      	ldreq	r3, [r3, #4]
 80152c8:	6063      	str	r3, [r4, #4]
 80152ca:	bf04      	itt	eq
 80152cc:	1809      	addeq	r1, r1, r0
 80152ce:	6021      	streq	r1, [r4, #0]
 80152d0:	6054      	str	r4, [r2, #4]
 80152d2:	e7ca      	b.n	801526a <_free_r+0x22>
 80152d4:	bd38      	pop	{r3, r4, r5, pc}
 80152d6:	bf00      	nop
 80152d8:	240022d0 	.word	0x240022d0

080152dc <sbrk_aligned>:
 80152dc:	b570      	push	{r4, r5, r6, lr}
 80152de:	4e0f      	ldr	r6, [pc, #60]	@ (801531c <sbrk_aligned+0x40>)
 80152e0:	460c      	mov	r4, r1
 80152e2:	6831      	ldr	r1, [r6, #0]
 80152e4:	4605      	mov	r5, r0
 80152e6:	b911      	cbnz	r1, 80152ee <sbrk_aligned+0x12>
 80152e8:	f000 fba4 	bl	8015a34 <_sbrk_r>
 80152ec:	6030      	str	r0, [r6, #0]
 80152ee:	4621      	mov	r1, r4
 80152f0:	4628      	mov	r0, r5
 80152f2:	f000 fb9f 	bl	8015a34 <_sbrk_r>
 80152f6:	1c43      	adds	r3, r0, #1
 80152f8:	d103      	bne.n	8015302 <sbrk_aligned+0x26>
 80152fa:	f04f 34ff 	mov.w	r4, #4294967295
 80152fe:	4620      	mov	r0, r4
 8015300:	bd70      	pop	{r4, r5, r6, pc}
 8015302:	1cc4      	adds	r4, r0, #3
 8015304:	f024 0403 	bic.w	r4, r4, #3
 8015308:	42a0      	cmp	r0, r4
 801530a:	d0f8      	beq.n	80152fe <sbrk_aligned+0x22>
 801530c:	1a21      	subs	r1, r4, r0
 801530e:	4628      	mov	r0, r5
 8015310:	f000 fb90 	bl	8015a34 <_sbrk_r>
 8015314:	3001      	adds	r0, #1
 8015316:	d1f2      	bne.n	80152fe <sbrk_aligned+0x22>
 8015318:	e7ef      	b.n	80152fa <sbrk_aligned+0x1e>
 801531a:	bf00      	nop
 801531c:	240022cc 	.word	0x240022cc

08015320 <_malloc_r>:
 8015320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015324:	1ccd      	adds	r5, r1, #3
 8015326:	f025 0503 	bic.w	r5, r5, #3
 801532a:	3508      	adds	r5, #8
 801532c:	2d0c      	cmp	r5, #12
 801532e:	bf38      	it	cc
 8015330:	250c      	movcc	r5, #12
 8015332:	2d00      	cmp	r5, #0
 8015334:	4606      	mov	r6, r0
 8015336:	db01      	blt.n	801533c <_malloc_r+0x1c>
 8015338:	42a9      	cmp	r1, r5
 801533a:	d904      	bls.n	8015346 <_malloc_r+0x26>
 801533c:	230c      	movs	r3, #12
 801533e:	6033      	str	r3, [r6, #0]
 8015340:	2000      	movs	r0, #0
 8015342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015346:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801541c <_malloc_r+0xfc>
 801534a:	f000 f869 	bl	8015420 <__malloc_lock>
 801534e:	f8d8 3000 	ldr.w	r3, [r8]
 8015352:	461c      	mov	r4, r3
 8015354:	bb44      	cbnz	r4, 80153a8 <_malloc_r+0x88>
 8015356:	4629      	mov	r1, r5
 8015358:	4630      	mov	r0, r6
 801535a:	f7ff ffbf 	bl	80152dc <sbrk_aligned>
 801535e:	1c43      	adds	r3, r0, #1
 8015360:	4604      	mov	r4, r0
 8015362:	d158      	bne.n	8015416 <_malloc_r+0xf6>
 8015364:	f8d8 4000 	ldr.w	r4, [r8]
 8015368:	4627      	mov	r7, r4
 801536a:	2f00      	cmp	r7, #0
 801536c:	d143      	bne.n	80153f6 <_malloc_r+0xd6>
 801536e:	2c00      	cmp	r4, #0
 8015370:	d04b      	beq.n	801540a <_malloc_r+0xea>
 8015372:	6823      	ldr	r3, [r4, #0]
 8015374:	4639      	mov	r1, r7
 8015376:	4630      	mov	r0, r6
 8015378:	eb04 0903 	add.w	r9, r4, r3
 801537c:	f000 fb5a 	bl	8015a34 <_sbrk_r>
 8015380:	4581      	cmp	r9, r0
 8015382:	d142      	bne.n	801540a <_malloc_r+0xea>
 8015384:	6821      	ldr	r1, [r4, #0]
 8015386:	1a6d      	subs	r5, r5, r1
 8015388:	4629      	mov	r1, r5
 801538a:	4630      	mov	r0, r6
 801538c:	f7ff ffa6 	bl	80152dc <sbrk_aligned>
 8015390:	3001      	adds	r0, #1
 8015392:	d03a      	beq.n	801540a <_malloc_r+0xea>
 8015394:	6823      	ldr	r3, [r4, #0]
 8015396:	442b      	add	r3, r5
 8015398:	6023      	str	r3, [r4, #0]
 801539a:	f8d8 3000 	ldr.w	r3, [r8]
 801539e:	685a      	ldr	r2, [r3, #4]
 80153a0:	bb62      	cbnz	r2, 80153fc <_malloc_r+0xdc>
 80153a2:	f8c8 7000 	str.w	r7, [r8]
 80153a6:	e00f      	b.n	80153c8 <_malloc_r+0xa8>
 80153a8:	6822      	ldr	r2, [r4, #0]
 80153aa:	1b52      	subs	r2, r2, r5
 80153ac:	d420      	bmi.n	80153f0 <_malloc_r+0xd0>
 80153ae:	2a0b      	cmp	r2, #11
 80153b0:	d917      	bls.n	80153e2 <_malloc_r+0xc2>
 80153b2:	1961      	adds	r1, r4, r5
 80153b4:	42a3      	cmp	r3, r4
 80153b6:	6025      	str	r5, [r4, #0]
 80153b8:	bf18      	it	ne
 80153ba:	6059      	strne	r1, [r3, #4]
 80153bc:	6863      	ldr	r3, [r4, #4]
 80153be:	bf08      	it	eq
 80153c0:	f8c8 1000 	streq.w	r1, [r8]
 80153c4:	5162      	str	r2, [r4, r5]
 80153c6:	604b      	str	r3, [r1, #4]
 80153c8:	4630      	mov	r0, r6
 80153ca:	f000 f82f 	bl	801542c <__malloc_unlock>
 80153ce:	f104 000b 	add.w	r0, r4, #11
 80153d2:	1d23      	adds	r3, r4, #4
 80153d4:	f020 0007 	bic.w	r0, r0, #7
 80153d8:	1ac2      	subs	r2, r0, r3
 80153da:	bf1c      	itt	ne
 80153dc:	1a1b      	subne	r3, r3, r0
 80153de:	50a3      	strne	r3, [r4, r2]
 80153e0:	e7af      	b.n	8015342 <_malloc_r+0x22>
 80153e2:	6862      	ldr	r2, [r4, #4]
 80153e4:	42a3      	cmp	r3, r4
 80153e6:	bf0c      	ite	eq
 80153e8:	f8c8 2000 	streq.w	r2, [r8]
 80153ec:	605a      	strne	r2, [r3, #4]
 80153ee:	e7eb      	b.n	80153c8 <_malloc_r+0xa8>
 80153f0:	4623      	mov	r3, r4
 80153f2:	6864      	ldr	r4, [r4, #4]
 80153f4:	e7ae      	b.n	8015354 <_malloc_r+0x34>
 80153f6:	463c      	mov	r4, r7
 80153f8:	687f      	ldr	r7, [r7, #4]
 80153fa:	e7b6      	b.n	801536a <_malloc_r+0x4a>
 80153fc:	461a      	mov	r2, r3
 80153fe:	685b      	ldr	r3, [r3, #4]
 8015400:	42a3      	cmp	r3, r4
 8015402:	d1fb      	bne.n	80153fc <_malloc_r+0xdc>
 8015404:	2300      	movs	r3, #0
 8015406:	6053      	str	r3, [r2, #4]
 8015408:	e7de      	b.n	80153c8 <_malloc_r+0xa8>
 801540a:	230c      	movs	r3, #12
 801540c:	6033      	str	r3, [r6, #0]
 801540e:	4630      	mov	r0, r6
 8015410:	f000 f80c 	bl	801542c <__malloc_unlock>
 8015414:	e794      	b.n	8015340 <_malloc_r+0x20>
 8015416:	6005      	str	r5, [r0, #0]
 8015418:	e7d6      	b.n	80153c8 <_malloc_r+0xa8>
 801541a:	bf00      	nop
 801541c:	240022d0 	.word	0x240022d0

08015420 <__malloc_lock>:
 8015420:	4801      	ldr	r0, [pc, #4]	@ (8015428 <__malloc_lock+0x8>)
 8015422:	f7ff bf0f 	b.w	8015244 <__retarget_lock_acquire_recursive>
 8015426:	bf00      	nop
 8015428:	240022c8 	.word	0x240022c8

0801542c <__malloc_unlock>:
 801542c:	4801      	ldr	r0, [pc, #4]	@ (8015434 <__malloc_unlock+0x8>)
 801542e:	f7ff bf0a 	b.w	8015246 <__retarget_lock_release_recursive>
 8015432:	bf00      	nop
 8015434:	240022c8 	.word	0x240022c8

08015438 <__ssputs_r>:
 8015438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801543c:	688e      	ldr	r6, [r1, #8]
 801543e:	461f      	mov	r7, r3
 8015440:	42be      	cmp	r6, r7
 8015442:	680b      	ldr	r3, [r1, #0]
 8015444:	4682      	mov	sl, r0
 8015446:	460c      	mov	r4, r1
 8015448:	4690      	mov	r8, r2
 801544a:	d82d      	bhi.n	80154a8 <__ssputs_r+0x70>
 801544c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015450:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015454:	d026      	beq.n	80154a4 <__ssputs_r+0x6c>
 8015456:	6965      	ldr	r5, [r4, #20]
 8015458:	6909      	ldr	r1, [r1, #16]
 801545a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801545e:	eba3 0901 	sub.w	r9, r3, r1
 8015462:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015466:	1c7b      	adds	r3, r7, #1
 8015468:	444b      	add	r3, r9
 801546a:	106d      	asrs	r5, r5, #1
 801546c:	429d      	cmp	r5, r3
 801546e:	bf38      	it	cc
 8015470:	461d      	movcc	r5, r3
 8015472:	0553      	lsls	r3, r2, #21
 8015474:	d527      	bpl.n	80154c6 <__ssputs_r+0x8e>
 8015476:	4629      	mov	r1, r5
 8015478:	f7ff ff52 	bl	8015320 <_malloc_r>
 801547c:	4606      	mov	r6, r0
 801547e:	b360      	cbz	r0, 80154da <__ssputs_r+0xa2>
 8015480:	6921      	ldr	r1, [r4, #16]
 8015482:	464a      	mov	r2, r9
 8015484:	f000 fae6 	bl	8015a54 <memcpy>
 8015488:	89a3      	ldrh	r3, [r4, #12]
 801548a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801548e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015492:	81a3      	strh	r3, [r4, #12]
 8015494:	6126      	str	r6, [r4, #16]
 8015496:	6165      	str	r5, [r4, #20]
 8015498:	444e      	add	r6, r9
 801549a:	eba5 0509 	sub.w	r5, r5, r9
 801549e:	6026      	str	r6, [r4, #0]
 80154a0:	60a5      	str	r5, [r4, #8]
 80154a2:	463e      	mov	r6, r7
 80154a4:	42be      	cmp	r6, r7
 80154a6:	d900      	bls.n	80154aa <__ssputs_r+0x72>
 80154a8:	463e      	mov	r6, r7
 80154aa:	6820      	ldr	r0, [r4, #0]
 80154ac:	4632      	mov	r2, r6
 80154ae:	4641      	mov	r1, r8
 80154b0:	f000 faa6 	bl	8015a00 <memmove>
 80154b4:	68a3      	ldr	r3, [r4, #8]
 80154b6:	1b9b      	subs	r3, r3, r6
 80154b8:	60a3      	str	r3, [r4, #8]
 80154ba:	6823      	ldr	r3, [r4, #0]
 80154bc:	4433      	add	r3, r6
 80154be:	6023      	str	r3, [r4, #0]
 80154c0:	2000      	movs	r0, #0
 80154c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154c6:	462a      	mov	r2, r5
 80154c8:	f000 fad2 	bl	8015a70 <_realloc_r>
 80154cc:	4606      	mov	r6, r0
 80154ce:	2800      	cmp	r0, #0
 80154d0:	d1e0      	bne.n	8015494 <__ssputs_r+0x5c>
 80154d2:	6921      	ldr	r1, [r4, #16]
 80154d4:	4650      	mov	r0, sl
 80154d6:	f7ff feb7 	bl	8015248 <_free_r>
 80154da:	230c      	movs	r3, #12
 80154dc:	f8ca 3000 	str.w	r3, [sl]
 80154e0:	89a3      	ldrh	r3, [r4, #12]
 80154e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80154e6:	81a3      	strh	r3, [r4, #12]
 80154e8:	f04f 30ff 	mov.w	r0, #4294967295
 80154ec:	e7e9      	b.n	80154c2 <__ssputs_r+0x8a>
	...

080154f0 <_svfiprintf_r>:
 80154f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154f4:	4698      	mov	r8, r3
 80154f6:	898b      	ldrh	r3, [r1, #12]
 80154f8:	061b      	lsls	r3, r3, #24
 80154fa:	b09d      	sub	sp, #116	@ 0x74
 80154fc:	4607      	mov	r7, r0
 80154fe:	460d      	mov	r5, r1
 8015500:	4614      	mov	r4, r2
 8015502:	d510      	bpl.n	8015526 <_svfiprintf_r+0x36>
 8015504:	690b      	ldr	r3, [r1, #16]
 8015506:	b973      	cbnz	r3, 8015526 <_svfiprintf_r+0x36>
 8015508:	2140      	movs	r1, #64	@ 0x40
 801550a:	f7ff ff09 	bl	8015320 <_malloc_r>
 801550e:	6028      	str	r0, [r5, #0]
 8015510:	6128      	str	r0, [r5, #16]
 8015512:	b930      	cbnz	r0, 8015522 <_svfiprintf_r+0x32>
 8015514:	230c      	movs	r3, #12
 8015516:	603b      	str	r3, [r7, #0]
 8015518:	f04f 30ff 	mov.w	r0, #4294967295
 801551c:	b01d      	add	sp, #116	@ 0x74
 801551e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015522:	2340      	movs	r3, #64	@ 0x40
 8015524:	616b      	str	r3, [r5, #20]
 8015526:	2300      	movs	r3, #0
 8015528:	9309      	str	r3, [sp, #36]	@ 0x24
 801552a:	2320      	movs	r3, #32
 801552c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015530:	f8cd 800c 	str.w	r8, [sp, #12]
 8015534:	2330      	movs	r3, #48	@ 0x30
 8015536:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80156d4 <_svfiprintf_r+0x1e4>
 801553a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801553e:	f04f 0901 	mov.w	r9, #1
 8015542:	4623      	mov	r3, r4
 8015544:	469a      	mov	sl, r3
 8015546:	f813 2b01 	ldrb.w	r2, [r3], #1
 801554a:	b10a      	cbz	r2, 8015550 <_svfiprintf_r+0x60>
 801554c:	2a25      	cmp	r2, #37	@ 0x25
 801554e:	d1f9      	bne.n	8015544 <_svfiprintf_r+0x54>
 8015550:	ebba 0b04 	subs.w	fp, sl, r4
 8015554:	d00b      	beq.n	801556e <_svfiprintf_r+0x7e>
 8015556:	465b      	mov	r3, fp
 8015558:	4622      	mov	r2, r4
 801555a:	4629      	mov	r1, r5
 801555c:	4638      	mov	r0, r7
 801555e:	f7ff ff6b 	bl	8015438 <__ssputs_r>
 8015562:	3001      	adds	r0, #1
 8015564:	f000 80a7 	beq.w	80156b6 <_svfiprintf_r+0x1c6>
 8015568:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801556a:	445a      	add	r2, fp
 801556c:	9209      	str	r2, [sp, #36]	@ 0x24
 801556e:	f89a 3000 	ldrb.w	r3, [sl]
 8015572:	2b00      	cmp	r3, #0
 8015574:	f000 809f 	beq.w	80156b6 <_svfiprintf_r+0x1c6>
 8015578:	2300      	movs	r3, #0
 801557a:	f04f 32ff 	mov.w	r2, #4294967295
 801557e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015582:	f10a 0a01 	add.w	sl, sl, #1
 8015586:	9304      	str	r3, [sp, #16]
 8015588:	9307      	str	r3, [sp, #28]
 801558a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801558e:	931a      	str	r3, [sp, #104]	@ 0x68
 8015590:	4654      	mov	r4, sl
 8015592:	2205      	movs	r2, #5
 8015594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015598:	484e      	ldr	r0, [pc, #312]	@ (80156d4 <_svfiprintf_r+0x1e4>)
 801559a:	f7ea fea9 	bl	80002f0 <memchr>
 801559e:	9a04      	ldr	r2, [sp, #16]
 80155a0:	b9d8      	cbnz	r0, 80155da <_svfiprintf_r+0xea>
 80155a2:	06d0      	lsls	r0, r2, #27
 80155a4:	bf44      	itt	mi
 80155a6:	2320      	movmi	r3, #32
 80155a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80155ac:	0711      	lsls	r1, r2, #28
 80155ae:	bf44      	itt	mi
 80155b0:	232b      	movmi	r3, #43	@ 0x2b
 80155b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80155b6:	f89a 3000 	ldrb.w	r3, [sl]
 80155ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80155bc:	d015      	beq.n	80155ea <_svfiprintf_r+0xfa>
 80155be:	9a07      	ldr	r2, [sp, #28]
 80155c0:	4654      	mov	r4, sl
 80155c2:	2000      	movs	r0, #0
 80155c4:	f04f 0c0a 	mov.w	ip, #10
 80155c8:	4621      	mov	r1, r4
 80155ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80155ce:	3b30      	subs	r3, #48	@ 0x30
 80155d0:	2b09      	cmp	r3, #9
 80155d2:	d94b      	bls.n	801566c <_svfiprintf_r+0x17c>
 80155d4:	b1b0      	cbz	r0, 8015604 <_svfiprintf_r+0x114>
 80155d6:	9207      	str	r2, [sp, #28]
 80155d8:	e014      	b.n	8015604 <_svfiprintf_r+0x114>
 80155da:	eba0 0308 	sub.w	r3, r0, r8
 80155de:	fa09 f303 	lsl.w	r3, r9, r3
 80155e2:	4313      	orrs	r3, r2
 80155e4:	9304      	str	r3, [sp, #16]
 80155e6:	46a2      	mov	sl, r4
 80155e8:	e7d2      	b.n	8015590 <_svfiprintf_r+0xa0>
 80155ea:	9b03      	ldr	r3, [sp, #12]
 80155ec:	1d19      	adds	r1, r3, #4
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	9103      	str	r1, [sp, #12]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	bfbb      	ittet	lt
 80155f6:	425b      	neglt	r3, r3
 80155f8:	f042 0202 	orrlt.w	r2, r2, #2
 80155fc:	9307      	strge	r3, [sp, #28]
 80155fe:	9307      	strlt	r3, [sp, #28]
 8015600:	bfb8      	it	lt
 8015602:	9204      	strlt	r2, [sp, #16]
 8015604:	7823      	ldrb	r3, [r4, #0]
 8015606:	2b2e      	cmp	r3, #46	@ 0x2e
 8015608:	d10a      	bne.n	8015620 <_svfiprintf_r+0x130>
 801560a:	7863      	ldrb	r3, [r4, #1]
 801560c:	2b2a      	cmp	r3, #42	@ 0x2a
 801560e:	d132      	bne.n	8015676 <_svfiprintf_r+0x186>
 8015610:	9b03      	ldr	r3, [sp, #12]
 8015612:	1d1a      	adds	r2, r3, #4
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	9203      	str	r2, [sp, #12]
 8015618:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801561c:	3402      	adds	r4, #2
 801561e:	9305      	str	r3, [sp, #20]
 8015620:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80156e4 <_svfiprintf_r+0x1f4>
 8015624:	7821      	ldrb	r1, [r4, #0]
 8015626:	2203      	movs	r2, #3
 8015628:	4650      	mov	r0, sl
 801562a:	f7ea fe61 	bl	80002f0 <memchr>
 801562e:	b138      	cbz	r0, 8015640 <_svfiprintf_r+0x150>
 8015630:	9b04      	ldr	r3, [sp, #16]
 8015632:	eba0 000a 	sub.w	r0, r0, sl
 8015636:	2240      	movs	r2, #64	@ 0x40
 8015638:	4082      	lsls	r2, r0
 801563a:	4313      	orrs	r3, r2
 801563c:	3401      	adds	r4, #1
 801563e:	9304      	str	r3, [sp, #16]
 8015640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015644:	4824      	ldr	r0, [pc, #144]	@ (80156d8 <_svfiprintf_r+0x1e8>)
 8015646:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801564a:	2206      	movs	r2, #6
 801564c:	f7ea fe50 	bl	80002f0 <memchr>
 8015650:	2800      	cmp	r0, #0
 8015652:	d036      	beq.n	80156c2 <_svfiprintf_r+0x1d2>
 8015654:	4b21      	ldr	r3, [pc, #132]	@ (80156dc <_svfiprintf_r+0x1ec>)
 8015656:	bb1b      	cbnz	r3, 80156a0 <_svfiprintf_r+0x1b0>
 8015658:	9b03      	ldr	r3, [sp, #12]
 801565a:	3307      	adds	r3, #7
 801565c:	f023 0307 	bic.w	r3, r3, #7
 8015660:	3308      	adds	r3, #8
 8015662:	9303      	str	r3, [sp, #12]
 8015664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015666:	4433      	add	r3, r6
 8015668:	9309      	str	r3, [sp, #36]	@ 0x24
 801566a:	e76a      	b.n	8015542 <_svfiprintf_r+0x52>
 801566c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015670:	460c      	mov	r4, r1
 8015672:	2001      	movs	r0, #1
 8015674:	e7a8      	b.n	80155c8 <_svfiprintf_r+0xd8>
 8015676:	2300      	movs	r3, #0
 8015678:	3401      	adds	r4, #1
 801567a:	9305      	str	r3, [sp, #20]
 801567c:	4619      	mov	r1, r3
 801567e:	f04f 0c0a 	mov.w	ip, #10
 8015682:	4620      	mov	r0, r4
 8015684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015688:	3a30      	subs	r2, #48	@ 0x30
 801568a:	2a09      	cmp	r2, #9
 801568c:	d903      	bls.n	8015696 <_svfiprintf_r+0x1a6>
 801568e:	2b00      	cmp	r3, #0
 8015690:	d0c6      	beq.n	8015620 <_svfiprintf_r+0x130>
 8015692:	9105      	str	r1, [sp, #20]
 8015694:	e7c4      	b.n	8015620 <_svfiprintf_r+0x130>
 8015696:	fb0c 2101 	mla	r1, ip, r1, r2
 801569a:	4604      	mov	r4, r0
 801569c:	2301      	movs	r3, #1
 801569e:	e7f0      	b.n	8015682 <_svfiprintf_r+0x192>
 80156a0:	ab03      	add	r3, sp, #12
 80156a2:	9300      	str	r3, [sp, #0]
 80156a4:	462a      	mov	r2, r5
 80156a6:	4b0e      	ldr	r3, [pc, #56]	@ (80156e0 <_svfiprintf_r+0x1f0>)
 80156a8:	a904      	add	r1, sp, #16
 80156aa:	4638      	mov	r0, r7
 80156ac:	f3af 8000 	nop.w
 80156b0:	1c42      	adds	r2, r0, #1
 80156b2:	4606      	mov	r6, r0
 80156b4:	d1d6      	bne.n	8015664 <_svfiprintf_r+0x174>
 80156b6:	89ab      	ldrh	r3, [r5, #12]
 80156b8:	065b      	lsls	r3, r3, #25
 80156ba:	f53f af2d 	bmi.w	8015518 <_svfiprintf_r+0x28>
 80156be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80156c0:	e72c      	b.n	801551c <_svfiprintf_r+0x2c>
 80156c2:	ab03      	add	r3, sp, #12
 80156c4:	9300      	str	r3, [sp, #0]
 80156c6:	462a      	mov	r2, r5
 80156c8:	4b05      	ldr	r3, [pc, #20]	@ (80156e0 <_svfiprintf_r+0x1f0>)
 80156ca:	a904      	add	r1, sp, #16
 80156cc:	4638      	mov	r0, r7
 80156ce:	f000 f879 	bl	80157c4 <_printf_i>
 80156d2:	e7ed      	b.n	80156b0 <_svfiprintf_r+0x1c0>
 80156d4:	08015cdc 	.word	0x08015cdc
 80156d8:	08015ce6 	.word	0x08015ce6
 80156dc:	00000000 	.word	0x00000000
 80156e0:	08015439 	.word	0x08015439
 80156e4:	08015ce2 	.word	0x08015ce2

080156e8 <_printf_common>:
 80156e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156ec:	4616      	mov	r6, r2
 80156ee:	4698      	mov	r8, r3
 80156f0:	688a      	ldr	r2, [r1, #8]
 80156f2:	690b      	ldr	r3, [r1, #16]
 80156f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80156f8:	4293      	cmp	r3, r2
 80156fa:	bfb8      	it	lt
 80156fc:	4613      	movlt	r3, r2
 80156fe:	6033      	str	r3, [r6, #0]
 8015700:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015704:	4607      	mov	r7, r0
 8015706:	460c      	mov	r4, r1
 8015708:	b10a      	cbz	r2, 801570e <_printf_common+0x26>
 801570a:	3301      	adds	r3, #1
 801570c:	6033      	str	r3, [r6, #0]
 801570e:	6823      	ldr	r3, [r4, #0]
 8015710:	0699      	lsls	r1, r3, #26
 8015712:	bf42      	ittt	mi
 8015714:	6833      	ldrmi	r3, [r6, #0]
 8015716:	3302      	addmi	r3, #2
 8015718:	6033      	strmi	r3, [r6, #0]
 801571a:	6825      	ldr	r5, [r4, #0]
 801571c:	f015 0506 	ands.w	r5, r5, #6
 8015720:	d106      	bne.n	8015730 <_printf_common+0x48>
 8015722:	f104 0a19 	add.w	sl, r4, #25
 8015726:	68e3      	ldr	r3, [r4, #12]
 8015728:	6832      	ldr	r2, [r6, #0]
 801572a:	1a9b      	subs	r3, r3, r2
 801572c:	42ab      	cmp	r3, r5
 801572e:	dc26      	bgt.n	801577e <_printf_common+0x96>
 8015730:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015734:	6822      	ldr	r2, [r4, #0]
 8015736:	3b00      	subs	r3, #0
 8015738:	bf18      	it	ne
 801573a:	2301      	movne	r3, #1
 801573c:	0692      	lsls	r2, r2, #26
 801573e:	d42b      	bmi.n	8015798 <_printf_common+0xb0>
 8015740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015744:	4641      	mov	r1, r8
 8015746:	4638      	mov	r0, r7
 8015748:	47c8      	blx	r9
 801574a:	3001      	adds	r0, #1
 801574c:	d01e      	beq.n	801578c <_printf_common+0xa4>
 801574e:	6823      	ldr	r3, [r4, #0]
 8015750:	6922      	ldr	r2, [r4, #16]
 8015752:	f003 0306 	and.w	r3, r3, #6
 8015756:	2b04      	cmp	r3, #4
 8015758:	bf02      	ittt	eq
 801575a:	68e5      	ldreq	r5, [r4, #12]
 801575c:	6833      	ldreq	r3, [r6, #0]
 801575e:	1aed      	subeq	r5, r5, r3
 8015760:	68a3      	ldr	r3, [r4, #8]
 8015762:	bf0c      	ite	eq
 8015764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015768:	2500      	movne	r5, #0
 801576a:	4293      	cmp	r3, r2
 801576c:	bfc4      	itt	gt
 801576e:	1a9b      	subgt	r3, r3, r2
 8015770:	18ed      	addgt	r5, r5, r3
 8015772:	2600      	movs	r6, #0
 8015774:	341a      	adds	r4, #26
 8015776:	42b5      	cmp	r5, r6
 8015778:	d11a      	bne.n	80157b0 <_printf_common+0xc8>
 801577a:	2000      	movs	r0, #0
 801577c:	e008      	b.n	8015790 <_printf_common+0xa8>
 801577e:	2301      	movs	r3, #1
 8015780:	4652      	mov	r2, sl
 8015782:	4641      	mov	r1, r8
 8015784:	4638      	mov	r0, r7
 8015786:	47c8      	blx	r9
 8015788:	3001      	adds	r0, #1
 801578a:	d103      	bne.n	8015794 <_printf_common+0xac>
 801578c:	f04f 30ff 	mov.w	r0, #4294967295
 8015790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015794:	3501      	adds	r5, #1
 8015796:	e7c6      	b.n	8015726 <_printf_common+0x3e>
 8015798:	18e1      	adds	r1, r4, r3
 801579a:	1c5a      	adds	r2, r3, #1
 801579c:	2030      	movs	r0, #48	@ 0x30
 801579e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80157a2:	4422      	add	r2, r4
 80157a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80157a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80157ac:	3302      	adds	r3, #2
 80157ae:	e7c7      	b.n	8015740 <_printf_common+0x58>
 80157b0:	2301      	movs	r3, #1
 80157b2:	4622      	mov	r2, r4
 80157b4:	4641      	mov	r1, r8
 80157b6:	4638      	mov	r0, r7
 80157b8:	47c8      	blx	r9
 80157ba:	3001      	adds	r0, #1
 80157bc:	d0e6      	beq.n	801578c <_printf_common+0xa4>
 80157be:	3601      	adds	r6, #1
 80157c0:	e7d9      	b.n	8015776 <_printf_common+0x8e>
	...

080157c4 <_printf_i>:
 80157c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80157c8:	7e0f      	ldrb	r7, [r1, #24]
 80157ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80157cc:	2f78      	cmp	r7, #120	@ 0x78
 80157ce:	4691      	mov	r9, r2
 80157d0:	4680      	mov	r8, r0
 80157d2:	460c      	mov	r4, r1
 80157d4:	469a      	mov	sl, r3
 80157d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80157da:	d807      	bhi.n	80157ec <_printf_i+0x28>
 80157dc:	2f62      	cmp	r7, #98	@ 0x62
 80157de:	d80a      	bhi.n	80157f6 <_printf_i+0x32>
 80157e0:	2f00      	cmp	r7, #0
 80157e2:	f000 80d1 	beq.w	8015988 <_printf_i+0x1c4>
 80157e6:	2f58      	cmp	r7, #88	@ 0x58
 80157e8:	f000 80b8 	beq.w	801595c <_printf_i+0x198>
 80157ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80157f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80157f4:	e03a      	b.n	801586c <_printf_i+0xa8>
 80157f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80157fa:	2b15      	cmp	r3, #21
 80157fc:	d8f6      	bhi.n	80157ec <_printf_i+0x28>
 80157fe:	a101      	add	r1, pc, #4	@ (adr r1, 8015804 <_printf_i+0x40>)
 8015800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015804:	0801585d 	.word	0x0801585d
 8015808:	08015871 	.word	0x08015871
 801580c:	080157ed 	.word	0x080157ed
 8015810:	080157ed 	.word	0x080157ed
 8015814:	080157ed 	.word	0x080157ed
 8015818:	080157ed 	.word	0x080157ed
 801581c:	08015871 	.word	0x08015871
 8015820:	080157ed 	.word	0x080157ed
 8015824:	080157ed 	.word	0x080157ed
 8015828:	080157ed 	.word	0x080157ed
 801582c:	080157ed 	.word	0x080157ed
 8015830:	0801596f 	.word	0x0801596f
 8015834:	0801589b 	.word	0x0801589b
 8015838:	08015929 	.word	0x08015929
 801583c:	080157ed 	.word	0x080157ed
 8015840:	080157ed 	.word	0x080157ed
 8015844:	08015991 	.word	0x08015991
 8015848:	080157ed 	.word	0x080157ed
 801584c:	0801589b 	.word	0x0801589b
 8015850:	080157ed 	.word	0x080157ed
 8015854:	080157ed 	.word	0x080157ed
 8015858:	08015931 	.word	0x08015931
 801585c:	6833      	ldr	r3, [r6, #0]
 801585e:	1d1a      	adds	r2, r3, #4
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	6032      	str	r2, [r6, #0]
 8015864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015868:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801586c:	2301      	movs	r3, #1
 801586e:	e09c      	b.n	80159aa <_printf_i+0x1e6>
 8015870:	6833      	ldr	r3, [r6, #0]
 8015872:	6820      	ldr	r0, [r4, #0]
 8015874:	1d19      	adds	r1, r3, #4
 8015876:	6031      	str	r1, [r6, #0]
 8015878:	0606      	lsls	r6, r0, #24
 801587a:	d501      	bpl.n	8015880 <_printf_i+0xbc>
 801587c:	681d      	ldr	r5, [r3, #0]
 801587e:	e003      	b.n	8015888 <_printf_i+0xc4>
 8015880:	0645      	lsls	r5, r0, #25
 8015882:	d5fb      	bpl.n	801587c <_printf_i+0xb8>
 8015884:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015888:	2d00      	cmp	r5, #0
 801588a:	da03      	bge.n	8015894 <_printf_i+0xd0>
 801588c:	232d      	movs	r3, #45	@ 0x2d
 801588e:	426d      	negs	r5, r5
 8015890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015894:	4858      	ldr	r0, [pc, #352]	@ (80159f8 <_printf_i+0x234>)
 8015896:	230a      	movs	r3, #10
 8015898:	e011      	b.n	80158be <_printf_i+0xfa>
 801589a:	6821      	ldr	r1, [r4, #0]
 801589c:	6833      	ldr	r3, [r6, #0]
 801589e:	0608      	lsls	r0, r1, #24
 80158a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80158a4:	d402      	bmi.n	80158ac <_printf_i+0xe8>
 80158a6:	0649      	lsls	r1, r1, #25
 80158a8:	bf48      	it	mi
 80158aa:	b2ad      	uxthmi	r5, r5
 80158ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80158ae:	4852      	ldr	r0, [pc, #328]	@ (80159f8 <_printf_i+0x234>)
 80158b0:	6033      	str	r3, [r6, #0]
 80158b2:	bf14      	ite	ne
 80158b4:	230a      	movne	r3, #10
 80158b6:	2308      	moveq	r3, #8
 80158b8:	2100      	movs	r1, #0
 80158ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80158be:	6866      	ldr	r6, [r4, #4]
 80158c0:	60a6      	str	r6, [r4, #8]
 80158c2:	2e00      	cmp	r6, #0
 80158c4:	db05      	blt.n	80158d2 <_printf_i+0x10e>
 80158c6:	6821      	ldr	r1, [r4, #0]
 80158c8:	432e      	orrs	r6, r5
 80158ca:	f021 0104 	bic.w	r1, r1, #4
 80158ce:	6021      	str	r1, [r4, #0]
 80158d0:	d04b      	beq.n	801596a <_printf_i+0x1a6>
 80158d2:	4616      	mov	r6, r2
 80158d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80158d8:	fb03 5711 	mls	r7, r3, r1, r5
 80158dc:	5dc7      	ldrb	r7, [r0, r7]
 80158de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80158e2:	462f      	mov	r7, r5
 80158e4:	42bb      	cmp	r3, r7
 80158e6:	460d      	mov	r5, r1
 80158e8:	d9f4      	bls.n	80158d4 <_printf_i+0x110>
 80158ea:	2b08      	cmp	r3, #8
 80158ec:	d10b      	bne.n	8015906 <_printf_i+0x142>
 80158ee:	6823      	ldr	r3, [r4, #0]
 80158f0:	07df      	lsls	r7, r3, #31
 80158f2:	d508      	bpl.n	8015906 <_printf_i+0x142>
 80158f4:	6923      	ldr	r3, [r4, #16]
 80158f6:	6861      	ldr	r1, [r4, #4]
 80158f8:	4299      	cmp	r1, r3
 80158fa:	bfde      	ittt	le
 80158fc:	2330      	movle	r3, #48	@ 0x30
 80158fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015902:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015906:	1b92      	subs	r2, r2, r6
 8015908:	6122      	str	r2, [r4, #16]
 801590a:	f8cd a000 	str.w	sl, [sp]
 801590e:	464b      	mov	r3, r9
 8015910:	aa03      	add	r2, sp, #12
 8015912:	4621      	mov	r1, r4
 8015914:	4640      	mov	r0, r8
 8015916:	f7ff fee7 	bl	80156e8 <_printf_common>
 801591a:	3001      	adds	r0, #1
 801591c:	d14a      	bne.n	80159b4 <_printf_i+0x1f0>
 801591e:	f04f 30ff 	mov.w	r0, #4294967295
 8015922:	b004      	add	sp, #16
 8015924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015928:	6823      	ldr	r3, [r4, #0]
 801592a:	f043 0320 	orr.w	r3, r3, #32
 801592e:	6023      	str	r3, [r4, #0]
 8015930:	4832      	ldr	r0, [pc, #200]	@ (80159fc <_printf_i+0x238>)
 8015932:	2778      	movs	r7, #120	@ 0x78
 8015934:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015938:	6823      	ldr	r3, [r4, #0]
 801593a:	6831      	ldr	r1, [r6, #0]
 801593c:	061f      	lsls	r7, r3, #24
 801593e:	f851 5b04 	ldr.w	r5, [r1], #4
 8015942:	d402      	bmi.n	801594a <_printf_i+0x186>
 8015944:	065f      	lsls	r7, r3, #25
 8015946:	bf48      	it	mi
 8015948:	b2ad      	uxthmi	r5, r5
 801594a:	6031      	str	r1, [r6, #0]
 801594c:	07d9      	lsls	r1, r3, #31
 801594e:	bf44      	itt	mi
 8015950:	f043 0320 	orrmi.w	r3, r3, #32
 8015954:	6023      	strmi	r3, [r4, #0]
 8015956:	b11d      	cbz	r5, 8015960 <_printf_i+0x19c>
 8015958:	2310      	movs	r3, #16
 801595a:	e7ad      	b.n	80158b8 <_printf_i+0xf4>
 801595c:	4826      	ldr	r0, [pc, #152]	@ (80159f8 <_printf_i+0x234>)
 801595e:	e7e9      	b.n	8015934 <_printf_i+0x170>
 8015960:	6823      	ldr	r3, [r4, #0]
 8015962:	f023 0320 	bic.w	r3, r3, #32
 8015966:	6023      	str	r3, [r4, #0]
 8015968:	e7f6      	b.n	8015958 <_printf_i+0x194>
 801596a:	4616      	mov	r6, r2
 801596c:	e7bd      	b.n	80158ea <_printf_i+0x126>
 801596e:	6833      	ldr	r3, [r6, #0]
 8015970:	6825      	ldr	r5, [r4, #0]
 8015972:	6961      	ldr	r1, [r4, #20]
 8015974:	1d18      	adds	r0, r3, #4
 8015976:	6030      	str	r0, [r6, #0]
 8015978:	062e      	lsls	r6, r5, #24
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	d501      	bpl.n	8015982 <_printf_i+0x1be>
 801597e:	6019      	str	r1, [r3, #0]
 8015980:	e002      	b.n	8015988 <_printf_i+0x1c4>
 8015982:	0668      	lsls	r0, r5, #25
 8015984:	d5fb      	bpl.n	801597e <_printf_i+0x1ba>
 8015986:	8019      	strh	r1, [r3, #0]
 8015988:	2300      	movs	r3, #0
 801598a:	6123      	str	r3, [r4, #16]
 801598c:	4616      	mov	r6, r2
 801598e:	e7bc      	b.n	801590a <_printf_i+0x146>
 8015990:	6833      	ldr	r3, [r6, #0]
 8015992:	1d1a      	adds	r2, r3, #4
 8015994:	6032      	str	r2, [r6, #0]
 8015996:	681e      	ldr	r6, [r3, #0]
 8015998:	6862      	ldr	r2, [r4, #4]
 801599a:	2100      	movs	r1, #0
 801599c:	4630      	mov	r0, r6
 801599e:	f7ea fca7 	bl	80002f0 <memchr>
 80159a2:	b108      	cbz	r0, 80159a8 <_printf_i+0x1e4>
 80159a4:	1b80      	subs	r0, r0, r6
 80159a6:	6060      	str	r0, [r4, #4]
 80159a8:	6863      	ldr	r3, [r4, #4]
 80159aa:	6123      	str	r3, [r4, #16]
 80159ac:	2300      	movs	r3, #0
 80159ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80159b2:	e7aa      	b.n	801590a <_printf_i+0x146>
 80159b4:	6923      	ldr	r3, [r4, #16]
 80159b6:	4632      	mov	r2, r6
 80159b8:	4649      	mov	r1, r9
 80159ba:	4640      	mov	r0, r8
 80159bc:	47d0      	blx	sl
 80159be:	3001      	adds	r0, #1
 80159c0:	d0ad      	beq.n	801591e <_printf_i+0x15a>
 80159c2:	6823      	ldr	r3, [r4, #0]
 80159c4:	079b      	lsls	r3, r3, #30
 80159c6:	d413      	bmi.n	80159f0 <_printf_i+0x22c>
 80159c8:	68e0      	ldr	r0, [r4, #12]
 80159ca:	9b03      	ldr	r3, [sp, #12]
 80159cc:	4298      	cmp	r0, r3
 80159ce:	bfb8      	it	lt
 80159d0:	4618      	movlt	r0, r3
 80159d2:	e7a6      	b.n	8015922 <_printf_i+0x15e>
 80159d4:	2301      	movs	r3, #1
 80159d6:	4632      	mov	r2, r6
 80159d8:	4649      	mov	r1, r9
 80159da:	4640      	mov	r0, r8
 80159dc:	47d0      	blx	sl
 80159de:	3001      	adds	r0, #1
 80159e0:	d09d      	beq.n	801591e <_printf_i+0x15a>
 80159e2:	3501      	adds	r5, #1
 80159e4:	68e3      	ldr	r3, [r4, #12]
 80159e6:	9903      	ldr	r1, [sp, #12]
 80159e8:	1a5b      	subs	r3, r3, r1
 80159ea:	42ab      	cmp	r3, r5
 80159ec:	dcf2      	bgt.n	80159d4 <_printf_i+0x210>
 80159ee:	e7eb      	b.n	80159c8 <_printf_i+0x204>
 80159f0:	2500      	movs	r5, #0
 80159f2:	f104 0619 	add.w	r6, r4, #25
 80159f6:	e7f5      	b.n	80159e4 <_printf_i+0x220>
 80159f8:	08015ced 	.word	0x08015ced
 80159fc:	08015cfe 	.word	0x08015cfe

08015a00 <memmove>:
 8015a00:	4288      	cmp	r0, r1
 8015a02:	b510      	push	{r4, lr}
 8015a04:	eb01 0402 	add.w	r4, r1, r2
 8015a08:	d902      	bls.n	8015a10 <memmove+0x10>
 8015a0a:	4284      	cmp	r4, r0
 8015a0c:	4623      	mov	r3, r4
 8015a0e:	d807      	bhi.n	8015a20 <memmove+0x20>
 8015a10:	1e43      	subs	r3, r0, #1
 8015a12:	42a1      	cmp	r1, r4
 8015a14:	d008      	beq.n	8015a28 <memmove+0x28>
 8015a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015a1e:	e7f8      	b.n	8015a12 <memmove+0x12>
 8015a20:	4402      	add	r2, r0
 8015a22:	4601      	mov	r1, r0
 8015a24:	428a      	cmp	r2, r1
 8015a26:	d100      	bne.n	8015a2a <memmove+0x2a>
 8015a28:	bd10      	pop	{r4, pc}
 8015a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015a32:	e7f7      	b.n	8015a24 <memmove+0x24>

08015a34 <_sbrk_r>:
 8015a34:	b538      	push	{r3, r4, r5, lr}
 8015a36:	4d06      	ldr	r5, [pc, #24]	@ (8015a50 <_sbrk_r+0x1c>)
 8015a38:	2300      	movs	r3, #0
 8015a3a:	4604      	mov	r4, r0
 8015a3c:	4608      	mov	r0, r1
 8015a3e:	602b      	str	r3, [r5, #0]
 8015a40:	f7ec fb12 	bl	8002068 <_sbrk>
 8015a44:	1c43      	adds	r3, r0, #1
 8015a46:	d102      	bne.n	8015a4e <_sbrk_r+0x1a>
 8015a48:	682b      	ldr	r3, [r5, #0]
 8015a4a:	b103      	cbz	r3, 8015a4e <_sbrk_r+0x1a>
 8015a4c:	6023      	str	r3, [r4, #0]
 8015a4e:	bd38      	pop	{r3, r4, r5, pc}
 8015a50:	240022c4 	.word	0x240022c4

08015a54 <memcpy>:
 8015a54:	440a      	add	r2, r1
 8015a56:	4291      	cmp	r1, r2
 8015a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8015a5c:	d100      	bne.n	8015a60 <memcpy+0xc>
 8015a5e:	4770      	bx	lr
 8015a60:	b510      	push	{r4, lr}
 8015a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a6a:	4291      	cmp	r1, r2
 8015a6c:	d1f9      	bne.n	8015a62 <memcpy+0xe>
 8015a6e:	bd10      	pop	{r4, pc}

08015a70 <_realloc_r>:
 8015a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a74:	4607      	mov	r7, r0
 8015a76:	4614      	mov	r4, r2
 8015a78:	460d      	mov	r5, r1
 8015a7a:	b921      	cbnz	r1, 8015a86 <_realloc_r+0x16>
 8015a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a80:	4611      	mov	r1, r2
 8015a82:	f7ff bc4d 	b.w	8015320 <_malloc_r>
 8015a86:	b92a      	cbnz	r2, 8015a94 <_realloc_r+0x24>
 8015a88:	f7ff fbde 	bl	8015248 <_free_r>
 8015a8c:	4625      	mov	r5, r4
 8015a8e:	4628      	mov	r0, r5
 8015a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a94:	f000 f81a 	bl	8015acc <_malloc_usable_size_r>
 8015a98:	4284      	cmp	r4, r0
 8015a9a:	4606      	mov	r6, r0
 8015a9c:	d802      	bhi.n	8015aa4 <_realloc_r+0x34>
 8015a9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015aa2:	d8f4      	bhi.n	8015a8e <_realloc_r+0x1e>
 8015aa4:	4621      	mov	r1, r4
 8015aa6:	4638      	mov	r0, r7
 8015aa8:	f7ff fc3a 	bl	8015320 <_malloc_r>
 8015aac:	4680      	mov	r8, r0
 8015aae:	b908      	cbnz	r0, 8015ab4 <_realloc_r+0x44>
 8015ab0:	4645      	mov	r5, r8
 8015ab2:	e7ec      	b.n	8015a8e <_realloc_r+0x1e>
 8015ab4:	42b4      	cmp	r4, r6
 8015ab6:	4622      	mov	r2, r4
 8015ab8:	4629      	mov	r1, r5
 8015aba:	bf28      	it	cs
 8015abc:	4632      	movcs	r2, r6
 8015abe:	f7ff ffc9 	bl	8015a54 <memcpy>
 8015ac2:	4629      	mov	r1, r5
 8015ac4:	4638      	mov	r0, r7
 8015ac6:	f7ff fbbf 	bl	8015248 <_free_r>
 8015aca:	e7f1      	b.n	8015ab0 <_realloc_r+0x40>

08015acc <_malloc_usable_size_r>:
 8015acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ad0:	1f18      	subs	r0, r3, #4
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	bfbc      	itt	lt
 8015ad6:	580b      	ldrlt	r3, [r1, r0]
 8015ad8:	18c0      	addlt	r0, r0, r3
 8015ada:	4770      	bx	lr

08015adc <_init>:
 8015adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ade:	bf00      	nop
 8015ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ae2:	bc08      	pop	{r3}
 8015ae4:	469e      	mov	lr, r3
 8015ae6:	4770      	bx	lr

08015ae8 <_fini>:
 8015ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aea:	bf00      	nop
 8015aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015aee:	bc08      	pop	{r3}
 8015af0:	469e      	mov	lr, r3
 8015af2:	4770      	bx	lr
