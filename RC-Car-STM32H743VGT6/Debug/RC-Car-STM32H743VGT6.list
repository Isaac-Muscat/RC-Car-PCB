
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016910  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  08016bb0  08016bb0  00017bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080173cc  080173cc  000183cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080173d4  080173d4  000183d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080173d8  080173d8  000183d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e4  24000000  080173dc  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0002775c  240002e4  080176c0  000192e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24027a40  080176c0  00019a40  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000192e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e514  00000000  00000000  00019312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000556b  00000000  00000000  00047826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002208  00000000  00000000  0004cd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a8b  00000000  00000000  0004efa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003da51  00000000  00000000  00050a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030191  00000000  00000000  0008e47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172b47  00000000  00000000  000be60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00231154  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a170  00000000  00000000  00231198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  0023b308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002e4 	.word	0x240002e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016b98 	.word	0x08016b98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002e8 	.word	0x240002e8
 80002dc:	08016b98 	.word	0x08016b98

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c0:	f3bf 8f4f 	dsb	sy
}
 80006c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006ce:	4904      	ldr	r1, [pc, #16]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__NVIC_SystemReset+0x28>)
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d6:	f3bf 8f4f 	dsb	sy
}
 80006da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <__NVIC_SystemReset+0x20>
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	05fa0004 	.word	0x05fa0004

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006ec:	f000 feb2 	bl	8001454 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f001 fece 	bl	8002490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f84c 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f000 fcb4 	bl	8001064 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fc:	f000 fc5a 	bl	8000fb4 <MX_DMA_Init>
  MX_MDMA_Init();
 8000700:	f000 fc90 	bl	8001024 <MX_MDMA_Init>
  MX_USART1_UART_Init();
 8000704:	f000 fc04 	bl	8000f10 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000708:	f012 ff24 	bl	8013554 <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 800070c:	f000 f8ba 	bl	8000884 <MX_DCMI_Init>
  MX_I2C2_Init();
 8000710:	f000 f8ee 	bl	80008f0 <MX_I2C2_Init>
  MX_TIM14_Init();
 8000714:	f000 fbb0 	bl	8000e78 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000718:	f000 fa22 	bl	8000b60 <MX_TIM2_Init>
  MX_TIM4_Init();
 800071c:	f000 faf6 	bl	8000d0c <MX_TIM4_Init>
  MX_TIM1_Init();
 8000720:	f000 f990 	bl	8000a44 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000724:	f000 fa8c 	bl	8000c40 <MX_TIM3_Init>
  MX_JPEG_Init();
 8000728:	f000 f922 	bl	8000970 <MX_JPEG_Init>
  MX_SPI2_Init();
 800072c:	f000 f934 	bl	8000998 <MX_SPI2_Init>
  MX_TIM5_Init();
 8000730:	f000 fb52 	bl	8000dd8 <MX_TIM5_Init>
//			  //HAL_UART_Transmit(&huart1, usb_msg, strlen(usb_msg), 1000);
//		  }
//	}

	// ------------------------------------------------------------ SETUP INA229 -- //
  	hina229.spi_handle = &hspi2;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <main+0x94>)
 8000736:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <main+0x98>)
 8000738:	601a      	str	r2, [r3, #0]
  	hina229.cs_gpio_handle = INA_CS_GPIO_Port;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <main+0x94>)
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <main+0x9c>)
 800073e:	605a      	str	r2, [r3, #4]
  	hina229.cs_gpio_pin = INA_CS_Pin;
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <main+0x94>)
 8000742:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000746:	811a      	strh	r2, [r3, #8]

  	while (1) {
		if (INA229_Init(&hina229)) {
 8000748:	480c      	ldr	r0, [pc, #48]	@ (800077c <main+0x94>)
 800074a:	f001 fe91 	bl	8002470 <INA229_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00e      	beq.n	8000772 <main+0x8a>
			sprintf(ssd_msg, " Failed to Init INA229");
 8000754:	490c      	ldr	r1, [pc, #48]	@ (8000788 <main+0xa0>)
 8000756:	480d      	ldr	r0, [pc, #52]	@ (800078c <main+0xa4>)
 8000758:	f014 fa12 	bl	8014b80 <siprintf>
			WriteDebug(ssd_msg, strlen(ssd_msg));
 800075c:	480b      	ldr	r0, [pc, #44]	@ (800078c <main+0xa4>)
 800075e:	f7ff fe0f 	bl	8000380 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4619      	mov	r1, r3
 8000768:	4808      	ldr	r0, [pc, #32]	@ (800078c <main+0xa4>)
 800076a:	f000 fdc1 	bl	80012f0 <WriteDebug>
			// This state is non-functional, reset
			NVIC_SystemReset();
 800076e:	f7ff ffa5 	bl	80006bc <__NVIC_SystemReset>
		}
		HAL_Delay(500);
 8000772:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000776:	f001 ff1d 	bl	80025b4 <HAL_Delay>
		if (INA229_Init(&hina229)) {
 800077a:	e7e5      	b.n	8000748 <main+0x60>
 800077c:	24000910 	.word	0x24000910
 8000780:	2400054c 	.word	0x2400054c
 8000784:	58020800 	.word	0x58020800
 8000788:	08016bb0 	.word	0x08016bb0
 800078c:	240008a8 	.word	0x240008a8

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b09c      	sub	sp, #112	@ 0x70
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079a:	224c      	movs	r2, #76	@ 0x4c
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f014 fa53 	bl	8014c4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2220      	movs	r2, #32
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f014 fa4d 	bl	8014c4a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007b0:	2002      	movs	r0, #2
 80007b2:	f008 ffc5 	bl	8009740 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b30      	ldr	r3, [pc, #192]	@ (800087c <SystemClock_Config+0xec>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007be:	4a2f      	ldr	r2, [pc, #188]	@ (800087c <SystemClock_Config+0xec>)
 80007c0:	f023 0301 	bic.w	r3, r3, #1
 80007c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007c6:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <SystemClock_Config+0xec>)
 80007c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000880 <SystemClock_Config+0xf0>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000880 <SystemClock_Config+0xf0>)
 80007d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <SystemClock_Config+0xf0>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007e8:	bf00      	nop
 80007ea:	4b25      	ldr	r3, [pc, #148]	@ (8000880 <SystemClock_Config+0xf0>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007f6:	d1f8      	bne.n	80007ea <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f8:	2301      	movs	r3, #1
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000802:	2302      	movs	r3, #2
 8000804:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000806:	2302      	movs	r3, #2
 8000808:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800080a:	2302      	movs	r3, #2
 800080c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800080e:	2318      	movs	r3, #24
 8000810:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000816:	2306      	movs	r3, #6
 8000818:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800081a:	2302      	movs	r3, #2
 800081c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800081e:	230c      	movs	r3, #12
 8000820:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000822:	2300      	movs	r3, #0
 8000824:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082e:	4618      	mov	r0, r3
 8000830:	f008 ffd0 	bl	80097d4 <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800083a:	f000 fe37 	bl	80014ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	233f      	movs	r3, #63	@ 0x3f
 8000840:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2303      	movs	r3, #3
 8000844:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800084e:	2340      	movs	r3, #64	@ 0x40
 8000850:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000852:	2340      	movs	r3, #64	@ 0x40
 8000854:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000856:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800085a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800085c:	2340      	movs	r3, #64	@ 0x40
 800085e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2102      	movs	r1, #2
 8000864:	4618      	mov	r0, r3
 8000866:	f009 fc0f 	bl	800a088 <HAL_RCC_ClockConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000870:	f000 fe1c 	bl	80014ac <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	3770      	adds	r7, #112	@ 0x70
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	58000400 	.word	0x58000400
 8000880:	58024800 	.word	0x58024800

08000884 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <MX_DCMI_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <MX_DCMI_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <MX_DCMI_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_DCMI_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <MX_DCMI_Init+0x64>)
 800089c:	2280      	movs	r2, #128	@ 0x80
 800089e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_DCMI_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <MX_DCMI_Init+0x64>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_DCMI_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <MX_DCMI_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_OTHER;
 80008b8:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_DCMI_Init+0x64>)
 80008ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008be:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_EVEN;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_DCMI_Init+0x64>)
 80008c2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <MX_DCMI_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_DCMI_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <MX_DCMI_Init+0x64>)
 80008d6:	f002 f825 	bl	8002924 <HAL_DCMI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_DCMI_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 fde4 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	24000300 	.word	0x24000300
 80008ec:	48020000 	.word	0x48020000

080008f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_I2C2_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000968 <MX_I2C2_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_I2C2_Init+0x74>)
 80008fc:	4a1b      	ldr	r2, [pc, #108]	@ (800096c <MX_I2C2_Init+0x7c>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000908:	2201      	movs	r2, #1
 800090a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_I2C2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_I2C2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800092a:	480e      	ldr	r0, [pc, #56]	@ (8000964 <MX_I2C2_Init+0x74>)
 800092c:	f004 fd90 	bl	8005450 <HAL_I2C_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000936:	f000 fdb9 	bl	80014ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4809      	ldr	r0, [pc, #36]	@ (8000964 <MX_I2C2_Init+0x74>)
 800093e:	f005 fd2c 	bl	800639a <HAL_I2CEx_ConfigAnalogFilter>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 fdb0 	bl	80014ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000950:	f005 fd6e 	bl	8006430 <HAL_I2CEx_ConfigDigitalFilter>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800095a:	f000 fda7 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	240003c8 	.word	0x240003c8
 8000968:	40005800 	.word	0x40005800
 800096c:	00c0eaff 	.word	0x00c0eaff

08000970 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_JPEG_Init+0x20>)
 8000976:	4a07      	ldr	r2, [pc, #28]	@ (8000994 <MX_JPEG_Init+0x24>)
 8000978:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_JPEG_Init+0x20>)
 800097c:	f005 fda4 	bl	80064c8 <HAL_JPEG_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000986:	f000 fd91 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2400041c 	.word	0x2400041c
 8000994:	52003000 	.word	0x52003000

08000998 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800099c:	4b27      	ldr	r3, [pc, #156]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 800099e:	4a28      	ldr	r2, [pc, #160]	@ (8000a40 <MX_SPI2_Init+0xa8>)
 80009a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009a2:	4b26      	ldr	r3, [pc, #152]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 80009a4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009aa:	4b24      	ldr	r3, [pc, #144]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b0:	4b22      	ldr	r3, [pc, #136]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 80009b2:	2207      	movs	r2, #7
 80009b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009b6:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 80009b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80009bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009be:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009c4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 80009c6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80009ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 80009ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d4:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009da:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e0:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009ec:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009f2:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009f8:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a04:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <MX_SPI2_Init+0xa4>)
 8000a2a:	f00b fce5 	bl	800c3f8 <HAL_SPI_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000a34:	f000 fd3a 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2400054c 	.word	0x2400054c
 8000a40:	40003800 	.word	0x40003800

08000a44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b096      	sub	sp, #88	@ 0x58
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
 8000a66:	615a      	str	r2, [r3, #20]
 8000a68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	222c      	movs	r2, #44	@ 0x2c
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f014 f8ea 	bl	8014c4a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a76:	4b38      	ldr	r3, [pc, #224]	@ (8000b58 <MX_TIM1_Init+0x114>)
 8000a78:	4a38      	ldr	r2, [pc, #224]	@ (8000b5c <MX_TIM1_Init+0x118>)
 8000a7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a7c:	4b36      	ldr	r3, [pc, #216]	@ (8000b58 <MX_TIM1_Init+0x114>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a82:	4b35      	ldr	r3, [pc, #212]	@ (8000b58 <MX_TIM1_Init+0x114>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000a88:	4b33      	ldr	r3, [pc, #204]	@ (8000b58 <MX_TIM1_Init+0x114>)
 8000a8a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000a8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a90:	4b31      	ldr	r3, [pc, #196]	@ (8000b58 <MX_TIM1_Init+0x114>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a96:	4b30      	ldr	r3, [pc, #192]	@ (8000b58 <MX_TIM1_Init+0x114>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b58 <MX_TIM1_Init+0x114>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aa2:	482d      	ldr	r0, [pc, #180]	@ (8000b58 <MX_TIM1_Init+0x114>)
 8000aa4:	f00c fb6c 	bl	800d180 <HAL_TIM_PWM_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000aae:	f000 fcfd 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000abe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4824      	ldr	r0, [pc, #144]	@ (8000b58 <MX_TIM1_Init+0x114>)
 8000ac6:	f00d fb0b 	bl	800e0e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ad0:	f000 fcec 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad4:	2360      	movs	r3, #96	@ 0x60
 8000ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000af0:	220c      	movs	r2, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	4818      	ldr	r0, [pc, #96]	@ (8000b58 <MX_TIM1_Init+0x114>)
 8000af6:	f00c fca1 	bl	800d43c <HAL_TIM_PWM_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000b00:	f000 fcd4 	bl	80014ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	4807      	ldr	r0, [pc, #28]	@ (8000b58 <MX_TIM1_Init+0x114>)
 8000b3a:	f00d fb5f 	bl	800e1fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000b44:	f000 fcb2 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b48:	4803      	ldr	r0, [pc, #12]	@ (8000b58 <MX_TIM1_Init+0x114>)
 8000b4a:	f001 f869 	bl	8001c20 <HAL_TIM_MspPostInit>

}
 8000b4e:	bf00      	nop
 8000b50:	3758      	adds	r7, #88	@ 0x58
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	240005d4 	.word	0x240005d4
 8000b5c:	40010000 	.word	0x40010000

08000b60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
 8000b80:	615a      	str	r2, [r3, #20]
 8000b82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b84:	4b2d      	ldr	r3, [pc, #180]	@ (8000c3c <MX_TIM2_Init+0xdc>)
 8000b86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c3c <MX_TIM2_Init+0xdc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b2a      	ldr	r3, [pc, #168]	@ (8000c3c <MX_TIM2_Init+0xdc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000b98:	4b28      	ldr	r3, [pc, #160]	@ (8000c3c <MX_TIM2_Init+0xdc>)
 8000b9a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000b9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba0:	4b26      	ldr	r3, [pc, #152]	@ (8000c3c <MX_TIM2_Init+0xdc>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba6:	4b25      	ldr	r3, [pc, #148]	@ (8000c3c <MX_TIM2_Init+0xdc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bac:	4823      	ldr	r0, [pc, #140]	@ (8000c3c <MX_TIM2_Init+0xdc>)
 8000bae:	f00c fae7 	bl	800d180 <HAL_TIM_PWM_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000bb8:	f000 fc78 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	481c      	ldr	r0, [pc, #112]	@ (8000c3c <MX_TIM2_Init+0xdc>)
 8000bcc:	f00d fa88 	bl	800e0e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000bd6:	f000 fc69 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bda:	2360      	movs	r3, #96	@ 0x60
 8000bdc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bea:	463b      	mov	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4812      	ldr	r0, [pc, #72]	@ (8000c3c <MX_TIM2_Init+0xdc>)
 8000bf2:	f00c fc23 	bl	800d43c <HAL_TIM_PWM_ConfigChannel>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000bfc:	f000 fc56 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c00:	463b      	mov	r3, r7
 8000c02:	2204      	movs	r2, #4
 8000c04:	4619      	mov	r1, r3
 8000c06:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <MX_TIM2_Init+0xdc>)
 8000c08:	f00c fc18 	bl	800d43c <HAL_TIM_PWM_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000c12:	f000 fc4b 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c16:	463b      	mov	r3, r7
 8000c18:	2208      	movs	r2, #8
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4807      	ldr	r0, [pc, #28]	@ (8000c3c <MX_TIM2_Init+0xdc>)
 8000c1e:	f00c fc0d 	bl	800d43c <HAL_TIM_PWM_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000c28:	f000 fc40 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c2c:	4803      	ldr	r0, [pc, #12]	@ (8000c3c <MX_TIM2_Init+0xdc>)
 8000c2e:	f000 fff7 	bl	8001c20 <HAL_TIM_MspPostInit>

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	@ 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	24000620 	.word	0x24000620

08000c40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c52:	463b      	mov	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]
 8000c62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c64:	4b27      	ldr	r3, [pc, #156]	@ (8000d04 <MX_TIM3_Init+0xc4>)
 8000c66:	4a28      	ldr	r2, [pc, #160]	@ (8000d08 <MX_TIM3_Init+0xc8>)
 8000c68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c6a:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <MX_TIM3_Init+0xc4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b24      	ldr	r3, [pc, #144]	@ (8000d04 <MX_TIM3_Init+0xc4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000c76:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <MX_TIM3_Init+0xc4>)
 8000c78:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <MX_TIM3_Init+0xc4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <MX_TIM3_Init+0xc4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c8a:	481e      	ldr	r0, [pc, #120]	@ (8000d04 <MX_TIM3_Init+0xc4>)
 8000c8c:	f00c fa78 	bl	800d180 <HAL_TIM_PWM_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000c96:	f000 fc09 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4816      	ldr	r0, [pc, #88]	@ (8000d04 <MX_TIM3_Init+0xc4>)
 8000caa:	f00d fa19 	bl	800e0e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000cb4:	f000 fbfa 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb8:	2360      	movs	r3, #96	@ 0x60
 8000cba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2208      	movs	r2, #8
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <MX_TIM3_Init+0xc4>)
 8000cd0:	f00c fbb4 	bl	800d43c <HAL_TIM_PWM_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000cda:	f000 fbe7 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	220c      	movs	r2, #12
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4807      	ldr	r0, [pc, #28]	@ (8000d04 <MX_TIM3_Init+0xc4>)
 8000ce6:	f00c fba9 	bl	800d43c <HAL_TIM_PWM_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000cf0:	f000 fbdc 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cf4:	4803      	ldr	r0, [pc, #12]	@ (8000d04 <MX_TIM3_Init+0xc4>)
 8000cf6:	f000 ff93 	bl	8001c20 <HAL_TIM_MspPostInit>

}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	@ 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2400066c 	.word	0x2400066c
 8000d08:	40000400 	.word	0x40000400

08000d0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d30:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <MX_TIM4_Init+0xc4>)
 8000d32:	4a28      	ldr	r2, [pc, #160]	@ (8000dd4 <MX_TIM4_Init+0xc8>)
 8000d34:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d36:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <MX_TIM4_Init+0xc4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <MX_TIM4_Init+0xc4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000d42:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <MX_TIM4_Init+0xc4>)
 8000d44:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d48:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_TIM4_Init+0xc4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <MX_TIM4_Init+0xc4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d56:	481e      	ldr	r0, [pc, #120]	@ (8000dd0 <MX_TIM4_Init+0xc4>)
 8000d58:	f00c fa12 	bl	800d180 <HAL_TIM_PWM_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000d62:	f000 fba3 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4816      	ldr	r0, [pc, #88]	@ (8000dd0 <MX_TIM4_Init+0xc4>)
 8000d76:	f00d f9b3 	bl	800e0e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000d80:	f000 fb94 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d84:	2360      	movs	r3, #96	@ 0x60
 8000d86:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d94:	463b      	mov	r3, r7
 8000d96:	2208      	movs	r2, #8
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480d      	ldr	r0, [pc, #52]	@ (8000dd0 <MX_TIM4_Init+0xc4>)
 8000d9c:	f00c fb4e 	bl	800d43c <HAL_TIM_PWM_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000da6:	f000 fb81 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000daa:	463b      	mov	r3, r7
 8000dac:	220c      	movs	r2, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	4807      	ldr	r0, [pc, #28]	@ (8000dd0 <MX_TIM4_Init+0xc4>)
 8000db2:	f00c fb43 	bl	800d43c <HAL_TIM_PWM_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000dbc:	f000 fb76 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dc0:	4803      	ldr	r0, [pc, #12]	@ (8000dd0 <MX_TIM4_Init+0xc4>)
 8000dc2:	f000 ff2d 	bl	8001c20 <HAL_TIM_MspPostInit>

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	@ 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	240006b8 	.word	0x240006b8
 8000dd4:	40000800 	.word	0x40000800

08000dd8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000df6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e6c <MX_TIM5_Init+0x94>)
 8000df8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e70 <MX_TIM5_Init+0x98>)
 8000dfa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e6c <MX_TIM5_Init+0x94>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e02:	4b1a      	ldr	r3, [pc, #104]	@ (8000e6c <MX_TIM5_Init+0x94>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 7499998;
 8000e08:	4b18      	ldr	r3, [pc, #96]	@ (8000e6c <MX_TIM5_Init+0x94>)
 8000e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8000e74 <MX_TIM5_Init+0x9c>)
 8000e0c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	@ (8000e6c <MX_TIM5_Init+0x94>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e14:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <MX_TIM5_Init+0x94>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e1a:	4814      	ldr	r0, [pc, #80]	@ (8000e6c <MX_TIM5_Init+0x94>)
 8000e1c:	f00c f959 	bl	800d0d2 <HAL_TIM_Base_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000e26:	f000 fb41 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	4619      	mov	r1, r3
 8000e36:	480d      	ldr	r0, [pc, #52]	@ (8000e6c <MX_TIM5_Init+0x94>)
 8000e38:	f00c fc14 	bl	800d664 <HAL_TIM_ConfigClockSource>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000e42:	f000 fb33 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	@ (8000e6c <MX_TIM5_Init+0x94>)
 8000e54:	f00d f944 	bl	800e0e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000e5e:	f000 fb25 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	3720      	adds	r7, #32
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	24000704 	.word	0x24000704
 8000e70:	40000c00 	.word	0x40000c00
 8000e74:	007270de 	.word	0x007270de

08000e78 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <MX_TIM14_Init+0x90>)
 8000e92:	4a1e      	ldr	r2, [pc, #120]	@ (8000f0c <MX_TIM14_Init+0x94>)
 8000e94:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <MX_TIM14_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <MX_TIM14_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8000ea2:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <MX_TIM14_Init+0x90>)
 8000ea4:	2205      	movs	r2, #5
 8000ea6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <MX_TIM14_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eae:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <MX_TIM14_Init+0x90>)
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000eb4:	4814      	ldr	r0, [pc, #80]	@ (8000f08 <MX_TIM14_Init+0x90>)
 8000eb6:	f00c f90c 	bl	800d0d2 <HAL_TIM_Base_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8000ec0:	f000 faf4 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000ec4:	4810      	ldr	r0, [pc, #64]	@ (8000f08 <MX_TIM14_Init+0x90>)
 8000ec6:	f00c f95b 	bl	800d180 <HAL_TIM_PWM_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8000ed0:	f000 faec 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed4:	2360      	movs	r3, #96	@ 0x60
 8000ed6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4807      	ldr	r0, [pc, #28]	@ (8000f08 <MX_TIM14_Init+0x90>)
 8000eec:	f00c faa6 	bl	800d43c <HAL_TIM_PWM_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8000ef6:	f000 fad9 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000efa:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <MX_TIM14_Init+0x90>)
 8000efc:	f000 fe90 	bl	8001c20 <HAL_TIM_MspPostInit>

}
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	24000750 	.word	0x24000750
 8000f0c:	40002000 	.word	0x40002000

08000f10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f14:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f16:	4a25      	ldr	r2, [pc, #148]	@ (8000fac <MX_USART1_UART_Init+0x9c>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 8000f1a:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f1c:	4a24      	ldr	r2, [pc, #144]	@ (8000fb0 <MX_USART1_UART_Init+0xa0>)
 8000f1e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f20:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f26:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f34:	220c      	movs	r2, #12
 8000f36:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000f50:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f52:	2220      	movs	r2, #32
 8000f54:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000f56:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f5c:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f5e:	4812      	ldr	r0, [pc, #72]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f60:	f00d f9e8 	bl	800e334 <HAL_UART_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000f6a:	f000 fa9f 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f72:	f00e fed1 	bl	800fd18 <HAL_UARTEx_SetTxFifoThreshold>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8000f7c:	f000 fa96 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f80:	2100      	movs	r1, #0
 8000f82:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f84:	f00e ff06 	bl	800fd94 <HAL_UARTEx_SetRxFifoThreshold>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8000f8e:	f000 fa8d 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <MX_USART1_UART_Init+0x98>)
 8000f94:	f00e fe85 	bl	800fca2 <HAL_UARTEx_EnableFifoMode>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8000f9e:	f000 fa85 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2400079c 	.word	0x2400079c
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	0001b207 	.word	0x0001b207

08000fb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fba:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <MX_DMA_Init+0x6c>)
 8000fbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fc0:	4a17      	ldr	r2, [pc, #92]	@ (8001020 <MX_DMA_Init+0x6c>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <MX_DMA_Init+0x6c>)
 8000fcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_DMA_Init+0x6c>)
 8000fda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fde:	4a10      	ldr	r2, [pc, #64]	@ (8001020 <MX_DMA_Init+0x6c>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <MX_DMA_Init+0x6c>)
 8000fea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	200b      	movs	r0, #11
 8000ffc:	f001 fbe5 	bl	80027ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001000:	200b      	movs	r0, #11
 8001002:	f001 fbfc 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	2038      	movs	r0, #56	@ 0x38
 800100c:	f001 fbdd 	bl	80027ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001010:	2038      	movs	r0, #56	@ 0x38
 8001012:	f001 fbf4 	bl	80027fe <HAL_NVIC_EnableIRQ>

}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	58024400 	.word	0x58024400

08001024 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800102a:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <MX_MDMA_Init+0x3c>)
 800102c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001030:	4a0b      	ldr	r2, [pc, #44]	@ (8001060 <MX_MDMA_Init+0x3c>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <MX_MDMA_Init+0x3c>)
 800103c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	207a      	movs	r0, #122	@ 0x7a
 800104e:	f001 fbbc 	bl	80027ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001052:	207a      	movs	r0, #122	@ 0x7a
 8001054:	f001 fbd3 	bl	80027fe <HAL_NVIC_EnableIRQ>

}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	58024400 	.word	0x58024400

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	@ 0x30
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800107a:	4b52      	ldr	r3, [pc, #328]	@ (80011c4 <MX_GPIO_Init+0x160>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001080:	4a50      	ldr	r2, [pc, #320]	@ (80011c4 <MX_GPIO_Init+0x160>)
 8001082:	f043 0310 	orr.w	r3, r3, #16
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108a:	4b4e      	ldr	r3, [pc, #312]	@ (80011c4 <MX_GPIO_Init+0x160>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	f003 0310 	and.w	r3, r3, #16
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001098:	4b4a      	ldr	r3, [pc, #296]	@ (80011c4 <MX_GPIO_Init+0x160>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109e:	4a49      	ldr	r2, [pc, #292]	@ (80011c4 <MX_GPIO_Init+0x160>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a8:	4b46      	ldr	r3, [pc, #280]	@ (80011c4 <MX_GPIO_Init+0x160>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	4b43      	ldr	r3, [pc, #268]	@ (80011c4 <MX_GPIO_Init+0x160>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010bc:	4a41      	ldr	r2, [pc, #260]	@ (80011c4 <MX_GPIO_Init+0x160>)
 80010be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c6:	4b3f      	ldr	r3, [pc, #252]	@ (80011c4 <MX_GPIO_Init+0x160>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b3b      	ldr	r3, [pc, #236]	@ (80011c4 <MX_GPIO_Init+0x160>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010da:	4a3a      	ldr	r2, [pc, #232]	@ (80011c4 <MX_GPIO_Init+0x160>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e4:	4b37      	ldr	r3, [pc, #220]	@ (80011c4 <MX_GPIO_Init+0x160>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	4b34      	ldr	r3, [pc, #208]	@ (80011c4 <MX_GPIO_Init+0x160>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f8:	4a32      	ldr	r2, [pc, #200]	@ (80011c4 <MX_GPIO_Init+0x160>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001102:	4b30      	ldr	r3, [pc, #192]	@ (80011c4 <MX_GPIO_Init+0x160>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001110:	4b2c      	ldr	r3, [pc, #176]	@ (80011c4 <MX_GPIO_Init+0x160>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001116:	4a2b      	ldr	r2, [pc, #172]	@ (80011c4 <MX_GPIO_Init+0x160>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001120:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <MX_GPIO_Init+0x160>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_CS_Pin|INA_CS_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001134:	4824      	ldr	r0, [pc, #144]	@ (80011c8 <MX_GPIO_Init+0x164>)
 8001136:	f004 f971 	bl	800541c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	2108      	movs	r1, #8
 800113e:	4823      	ldr	r0, [pc, #140]	@ (80011cc <MX_GPIO_Init+0x168>)
 8001140:	f004 f96c 	bl	800541c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2101      	movs	r1, #1
 8001148:	4821      	ldr	r0, [pc, #132]	@ (80011d0 <MX_GPIO_Init+0x16c>)
 800114a:	f004 f967 	bl	800541c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_CS_Pin INA_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|INA_CS_Pin;
 800114e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	4619      	mov	r1, r3
 8001166:	4818      	ldr	r0, [pc, #96]	@ (80011c8 <MX_GPIO_Init+0x164>)
 8001168:	f003 ffa8 	bl	80050bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800116c:	2301      	movs	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	4812      	ldr	r0, [pc, #72]	@ (80011c8 <MX_GPIO_Init+0x164>)
 8001180:	f003 ff9c 	bl	80050bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001184:	2308      	movs	r3, #8
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	480c      	ldr	r0, [pc, #48]	@ (80011cc <MX_GPIO_Init+0x168>)
 800119c:	f003 ff8e 	bl	80050bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	@ (80011d0 <MX_GPIO_Init+0x16c>)
 80011b8:	f003 ff80 	bl	80050bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011bc:	bf00      	nop
 80011be:	3730      	adds	r7, #48	@ 0x30
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	58024400 	.word	0x58024400
 80011c8:	58020800 	.word	0x58020800
 80011cc:	58020000 	.word	0x58020000
 80011d0:	58020c00 	.word	0x58020c00

080011d4 <NetworkTimeout>:

/* USER CODE BEGIN 4 */

// Watchdog Fucntions
void NetworkTimeout() {
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
	// TEMPORARY: DISABLE THIS FOR TESTING
	return;
 80011d8:	bf00      	nop
			// DEBUG
			sprintf(ssd_msg, "Network Dead!\n");
			WriteDebug(ssd_msg, strlen(ssd_msg));
		}
	}
}
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_DCMI_VsyncEventCallback>:
	sch_tim_debug = HAL_GetTick();
}

// ------------------------------------------------------------ OVERRIDE CALLBACKS -- //
// Frame captured event, called when the DMA buffer is full of new frame data
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 80011ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <HAL_DCMI_VsyncEventCallback+0x44>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d014      	beq.n	8001220 <HAL_DCMI_VsyncEventCallback+0x3c>

	if (camera_state == 1) {	// Transition flag to CAPTURING
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <HAL_DCMI_VsyncEventCallback+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d103      	bne.n	8001208 <HAL_DCMI_VsyncEventCallback+0x24>
		camera_state = 2;
 8001200:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <HAL_DCMI_VsyncEventCallback+0x44>)
 8001202:	2202      	movs	r2, #2
 8001204:	701a      	strb	r2, [r3, #0]
		return;
 8001206:	e00c      	b.n	8001222 <HAL_DCMI_VsyncEventCallback+0x3e>
	}

	if (camera_state == 2) {	// Transition flag to READY
 8001208:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <HAL_DCMI_VsyncEventCallback+0x44>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d107      	bne.n	8001222 <HAL_DCMI_VsyncEventCallback+0x3e>
		HAL_DCMI_Stop(hdcmi);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f001 fc00 	bl	8002a18 <HAL_DCMI_Stop>
		camera_state = 3;
 8001218:	4b03      	ldr	r3, [pc, #12]	@ (8001228 <HAL_DCMI_VsyncEventCallback+0x44>)
 800121a:	2203      	movs	r2, #3
 800121c:	701a      	strb	r2, [r3, #0]
		return;
 800121e:	e000      	b.n	8001222 <HAL_DCMI_VsyncEventCallback+0x3e>
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 8001220:	bf00      	nop
	}
}
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	240132ee 	.word	0x240132ee

0800122c <HAL_JPEG_GetDataCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	XBEE_RX_DMACallback(&hxbee);
}

// JPEG hardware is requesting the next MCU block
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]

	// Restock the input buffer with new MCU
	if (GenerateJPEGMCUBlock()) {
 8001236:	f000 f86b 	bl	8001310 <GenerateJPEGMCUBlock>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d013      	beq.n	8001268 <HAL_JPEG_GetDataCallback+0x3c>
		// ERROR while generating MCU, probable memory leak - recover JPEG peripheral by restarting
		jpeg_state = 0;	// Flag JPEG as idle
 8001240:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_JPEG_GetDataCallback+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
		jpeg_block = 0;	// Reset the JPEG block IDX
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <HAL_JPEG_GetDataCallback+0x54>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]

		sprintf(ssd_msg, "JPEG OVERRUN\n");
 800124c:	490d      	ldr	r1, [pc, #52]	@ (8001284 <HAL_JPEG_GetDataCallback+0x58>)
 800124e:	480e      	ldr	r0, [pc, #56]	@ (8001288 <HAL_JPEG_GetDataCallback+0x5c>)
 8001250:	f013 fc96 	bl	8014b80 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <HAL_JPEG_GetDataCallback+0x5c>)
 8001256:	f7ff f893 	bl	8000380 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4619      	mov	r1, r3
 8001260:	4809      	ldr	r0, [pc, #36]	@ (8001288 <HAL_JPEG_GetDataCallback+0x5c>)
 8001262:	f000 f845 	bl	80012f0 <WriteDebug>
	}
	else {
		// Configure the buffer to be the same as before, it's contents have changed
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
	}
}
 8001266:	e004      	b.n	8001272 <HAL_JPEG_GetDataCallback+0x46>
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
 8001268:	2240      	movs	r2, #64	@ 0x40
 800126a:	4908      	ldr	r1, [pc, #32]	@ (800128c <HAL_JPEG_GetDataCallback+0x60>)
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f005 fa9a 	bl	80067a6 <HAL_JPEG_ConfigInputBuffer>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	24025cfa 	.word	0x24025cfa
 8001280:	24013330 	.word	0x24013330
 8001284:	08016c0c 	.word	0x08016c0c
 8001288:	240008a8 	.word	0x240008a8
 800128c:	240132f0 	.word	0x240132f0

08001290 <HAL_JPEG_DataReadyCallback>:

// JPEG hardware is requesting a larger output buffer.
// This is done to manage JPEG output size, give it a buffer only as large as required
void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
	// Setup new output buffer location (part of contiguous super-buffer)
	jpeg_size += JPEG_OUTBUF_SIZE;
 800129c:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <HAL_JPEG_DataReadyCallback+0x30>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3340      	adds	r3, #64	@ 0x40
 80012a2:	4a07      	ldr	r2, [pc, #28]	@ (80012c0 <HAL_JPEG_DataReadyCallback+0x30>)
 80012a4:	6013      	str	r3, [r2, #0]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, jpeg_out + jpeg_size, JPEG_OUTBUF_SIZE);
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_JPEG_DataReadyCallback+0x30>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <HAL_JPEG_DataReadyCallback+0x34>)
 80012ac:	4413      	add	r3, r2
 80012ae:	2240      	movs	r2, #64	@ 0x40
 80012b0:	4619      	mov	r1, r3
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f005 fa89 	bl	80067ca <HAL_JPEG_ConfigOutputBuffer>
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	24025cfc 	.word	0x24025cfc
 80012c4:	24013334 	.word	0x24013334

080012c8 <HAL_JPEG_EncodeCpltCallback>:

// JPEG hardware has completed the current image
void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	jpeg_state = 2;	// Flag JPEG as ready
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <HAL_JPEG_EncodeCpltCallback+0x20>)
 80012d2:	2202      	movs	r2, #2
 80012d4:	701a      	strb	r2, [r3, #0]
	jpeg_block = 0;	// Reset the JPEG block IDX
 80012d6:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_JPEG_EncodeCpltCallback+0x24>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
//	sprintf(ssd_msg, "JPEG DONE\n");
//	WriteDebug(ssd_msg, strlen(ssd_msg));
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	24025cfa 	.word	0x24025cfa
 80012ec:	24013330 	.word	0x24013330

080012f0 <WriteDebug>:

	return now_t - start_t;
}

// Transmit wrapper, this is for continuity across Controller project which debugs by printing to OLEDs
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
	CDC_Transmit_FS(str_ptr, str_len);
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	4619      	mov	r1, r3
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f012 fa11 	bl	8013728 <CDC_Transmit_FS>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <GenerateJPEGMCUBlock>:

	return HAL_OK;
}

// GENERATE JPEG MCU BLOCK
uint8_t GenerateJPEGMCUBlock() {
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
	// Don't go over the bounds of the specified MCU area
	if (jpeg_block > jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality]) { return 1; }
 8001316:	4b47      	ldr	r3, [pc, #284]	@ (8001434 <GenerateJPEGMCUBlock+0x124>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	4b46      	ldr	r3, [pc, #280]	@ (8001438 <GenerateJPEGMCUBlock+0x128>)
 800131e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001322:	461a      	mov	r2, r3
 8001324:	4b43      	ldr	r3, [pc, #268]	@ (8001434 <GenerateJPEGMCUBlock+0x124>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	4b44      	ldr	r3, [pc, #272]	@ (800143c <GenerateJPEGMCUBlock+0x12c>)
 800132c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	461a      	mov	r2, r3
 8001336:	4b42      	ldr	r3, [pc, #264]	@ (8001440 <GenerateJPEGMCUBlock+0x130>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d201      	bcs.n	8001342 <GenerateJPEGMCUBlock+0x32>
 800133e:	2301      	movs	r3, #1
 8001340:	e072      	b.n	8001428 <GenerateJPEGMCUBlock+0x118>

	int xStart = (jpeg_block % jpeg_mcu_widths[jpeg_quality]) * 8;
 8001342:	4b3f      	ldr	r3, [pc, #252]	@ (8001440 <GenerateJPEGMCUBlock+0x130>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a3b      	ldr	r2, [pc, #236]	@ (8001434 <GenerateJPEGMCUBlock+0x124>)
 8001348:	7812      	ldrb	r2, [r2, #0]
 800134a:	4611      	mov	r1, r2
 800134c:	4a3a      	ldr	r2, [pc, #232]	@ (8001438 <GenerateJPEGMCUBlock+0x128>)
 800134e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001352:	fbb3 f1f2 	udiv	r1, r3, r2
 8001356:	fb01 f202 	mul.w	r2, r1, r2
 800135a:	1a9b      	subs	r3, r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	60bb      	str	r3, [r7, #8]
	int yStart = (jpeg_block / jpeg_mcu_widths[jpeg_quality]) * 8;
 8001360:	4b37      	ldr	r3, [pc, #220]	@ (8001440 <GenerateJPEGMCUBlock+0x130>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a33      	ldr	r2, [pc, #204]	@ (8001434 <GenerateJPEGMCUBlock+0x124>)
 8001366:	7812      	ldrb	r2, [r2, #0]
 8001368:	4611      	mov	r1, r2
 800136a:	4a33      	ldr	r2, [pc, #204]	@ (8001438 <GenerateJPEGMCUBlock+0x128>)
 800136c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001370:	fbb3 f3f2 	udiv	r3, r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	607b      	str	r3, [r7, #4]
	int i = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
	for (int y = yStart; y < yStart + 8; y++) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	e047      	b.n	8001412 <GenerateJPEGMCUBlock+0x102>
		uint16_t cached_y = y*jpeg_scaleFactors[jpeg_quality];
 8001382:	4b2c      	ldr	r3, [pc, #176]	@ (8001434 <GenerateJPEGMCUBlock+0x124>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <GenerateJPEGMCUBlock+0x134>)
 800138a:	5c9b      	ldrb	r3, [r3, r2]
 800138c:	461a      	mov	r2, r3
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	b29b      	uxth	r3, r3
 8001392:	fb12 f303 	smulbb	r3, r2, r3
 8001396:	807b      	strh	r3, [r7, #2]

		for (int x = xStart; x < xStart + 8; x++) {
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	e031      	b.n	8001402 <GenerateJPEGMCUBlock+0xf2>
			uint16_t cached_x = x*jpeg_scaleFactors[jpeg_quality] + camera_vshift;
 800139e:	4b25      	ldr	r3, [pc, #148]	@ (8001434 <GenerateJPEGMCUBlock+0x124>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <GenerateJPEGMCUBlock+0x134>)
 80013a6:	5c9b      	ldrb	r3, [r3, r2]
 80013a8:	461a      	mov	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	fb12 f303 	smulbb	r3, r2, r3
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b24      	ldr	r3, [pc, #144]	@ (8001448 <GenerateJPEGMCUBlock+0x138>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	803b      	strh	r3, [r7, #0]
			// Pad to 8x8
			if (cached_x >= CAM_WIDTH || cached_y >= CAM_HEIGHT) {
 80013be:	883b      	ldrh	r3, [r7, #0]
 80013c0:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80013c4:	d802      	bhi.n	80013cc <GenerateJPEGMCUBlock+0xbc>
 80013c6:	887b      	ldrh	r3, [r7, #2]
 80013c8:	2bf1      	cmp	r3, #241	@ 0xf1
 80013ca:	d905      	bls.n	80013d8 <GenerateJPEGMCUBlock+0xc8>
				jpeg_mcu[i] = 0x00;
 80013cc:	4a1f      	ldr	r2, [pc, #124]	@ (800144c <GenerateJPEGMCUBlock+0x13c>)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	4413      	add	r3, r2
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	e00e      	b.n	80013f6 <GenerateJPEGMCUBlock+0xe6>
			} else {
				jpeg_mcu[i] = camera_mem[cached_x + cached_y * CAM_WIDTH];
 80013d8:	8839      	ldrh	r1, [r7, #0]
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	019a      	lsls	r2, r3, #6
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	440b      	add	r3, r1
 80013e8:	4a19      	ldr	r2, [pc, #100]	@ (8001450 <GenerateJPEGMCUBlock+0x140>)
 80013ea:	5cd1      	ldrb	r1, [r2, r3]
 80013ec:	4a17      	ldr	r2, [pc, #92]	@ (800144c <GenerateJPEGMCUBlock+0x13c>)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	4413      	add	r3, r2
 80013f2:	460a      	mov	r2, r1
 80013f4:	701a      	strb	r2, [r3, #0]
			}
			i++;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
		for (int x = xStart; x < xStart + 8; x++) {
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3307      	adds	r3, #7
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	429a      	cmp	r2, r3
 800140a:	ddc8      	ble.n	800139e <GenerateJPEGMCUBlock+0x8e>
	for (int y = yStart; y < yStart + 8; y++) {
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	3301      	adds	r3, #1
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3307      	adds	r3, #7
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	ddb2      	ble.n	8001382 <GenerateJPEGMCUBlock+0x72>
		}
	}
	jpeg_block++;
 800141c:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <GenerateJPEGMCUBlock+0x130>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	4a07      	ldr	r2, [pc, #28]	@ (8001440 <GenerateJPEGMCUBlock+0x130>)
 8001424:	6013      	str	r3, [r2, #0]
	return 0;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	371c      	adds	r7, #28
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	24025d00 	.word	0x24025d00
 8001438:	24000004 	.word	0x24000004
 800143c:	2400000c 	.word	0x2400000c
 8001440:	24013330 	.word	0x24013330
 8001444:	24000014 	.word	0x24000014
 8001448:	24000000 	.word	0x24000000
 800144c:	240132f0 	.word	0x240132f0
 8001450:	24000928 	.word	0x24000928

08001454 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800145a:	463b      	mov	r3, r7
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001466:	f001 f9e5 	bl	8002834 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800146a:	2301      	movs	r3, #1
 800146c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800146e:	2300      	movs	r3, #0
 8001470:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001476:	231f      	movs	r3, #31
 8001478:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800147a:	2387      	movs	r3, #135	@ 0x87
 800147c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800147e:	2300      	movs	r3, #0
 8001480:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001482:	2300      	movs	r3, #0
 8001484:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001486:	2301      	movs	r3, #1
 8001488:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800148a:	2301      	movs	r3, #1
 800148c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001496:	463b      	mov	r3, r7
 8001498:	4618      	mov	r0, r3
 800149a:	f001 fa03 	bl	80028a4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800149e:	2004      	movs	r0, #4
 80014a0:	f001 f9e0 	bl	8002864 <HAL_MPU_Enable>

}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014b0:	b672      	cpsid	i
}
 80014b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <Error_Handler+0x8>

080014b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <HAL_MspInit+0x30>)
 80014c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014c4:	4a08      	ldr	r2, [pc, #32]	@ (80014e8 <HAL_MspInit+0x30>)
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_MspInit+0x30>)
 80014d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	58024400 	.word	0x58024400

080014ec <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08e      	sub	sp, #56	@ 0x38
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a79      	ldr	r2, [pc, #484]	@ (80016f0 <HAL_DCMI_MspInit+0x204>)
 800150a:	4293      	cmp	r3, r2
 800150c:	f040 80ec 	bne.w	80016e8 <HAL_DCMI_MspInit+0x1fc>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001510:	4b78      	ldr	r3, [pc, #480]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 8001512:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001516:	4a77      	ldr	r2, [pc, #476]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001520:	4b74      	ldr	r3, [pc, #464]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 8001522:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	623b      	str	r3, [r7, #32]
 800152c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800152e:	4b71      	ldr	r3, [pc, #452]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001534:	4a6f      	ldr	r2, [pc, #444]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 8001536:	f043 0310 	orr.w	r3, r3, #16
 800153a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800153e:	4b6d      	ldr	r3, [pc, #436]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	61fb      	str	r3, [r7, #28]
 800154a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b69      	ldr	r3, [pc, #420]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001552:	4a68      	ldr	r2, [pc, #416]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800155c:	4b65      	ldr	r3, [pc, #404]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	4b62      	ldr	r3, [pc, #392]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001570:	4a60      	ldr	r2, [pc, #384]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800157a:	4b5e      	ldr	r3, [pc, #376]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001588:	4b5a      	ldr	r3, [pc, #360]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158e:	4a59      	ldr	r2, [pc, #356]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001598:	4b56      	ldr	r3, [pc, #344]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 800159a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	4b53      	ldr	r3, [pc, #332]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 80015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ac:	4a51      	ldr	r2, [pc, #324]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015b6:	4b4f      	ldr	r3, [pc, #316]	@ (80016f4 <HAL_DCMI_MspInit+0x208>)
 80015b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 80015c4:	2373      	movs	r3, #115	@ 0x73
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015d4:	230d      	movs	r3, #13
 80015d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015dc:	4619      	mov	r1, r3
 80015de:	4846      	ldr	r0, [pc, #280]	@ (80016f8 <HAL_DCMI_MspInit+0x20c>)
 80015e0:	f003 fd6c 	bl	80050bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80015e4:	2350      	movs	r3, #80	@ 0x50
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015f4:	230d      	movs	r3, #13
 80015f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fc:	4619      	mov	r1, r3
 80015fe:	483f      	ldr	r0, [pc, #252]	@ (80016fc <HAL_DCMI_MspInit+0x210>)
 8001600:	f003 fd5c 	bl	80050bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001604:	23c0      	movs	r3, #192	@ 0xc0
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001614:	230d      	movs	r3, #13
 8001616:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	4838      	ldr	r0, [pc, #224]	@ (8001700 <HAL_DCMI_MspInit+0x214>)
 8001620:	f003 fd4c 	bl	80050bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001624:	2308      	movs	r3, #8
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001634:	230d      	movs	r3, #13
 8001636:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001638:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800163c:	4619      	mov	r1, r3
 800163e:	4831      	ldr	r0, [pc, #196]	@ (8001704 <HAL_DCMI_MspInit+0x218>)
 8001640:	f003 fd3c 	bl	80050bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001644:	2380      	movs	r3, #128	@ 0x80
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001654:	230d      	movs	r3, #13
 8001656:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800165c:	4619      	mov	r1, r3
 800165e:	482a      	ldr	r0, [pc, #168]	@ (8001708 <HAL_DCMI_MspInit+0x21c>)
 8001660:	f003 fd2c 	bl	80050bc <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8001664:	4b29      	ldr	r3, [pc, #164]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 8001666:	4a2a      	ldr	r2, [pc, #168]	@ (8001710 <HAL_DCMI_MspInit+0x224>)
 8001668:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 800166a:	4b28      	ldr	r3, [pc, #160]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 800166c:	224b      	movs	r2, #75	@ 0x4b
 800166e:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001670:	4b26      	ldr	r3, [pc, #152]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001676:	4b25      	ldr	r3, [pc, #148]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800167c:	4b23      	ldr	r3, [pc, #140]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 800167e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001682:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001684:	4b21      	ldr	r3, [pc, #132]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 8001686:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800168a:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800168c:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 800168e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001692:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001694:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 8001696:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800169a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 800169e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016a2:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016a4:	4b19      	ldr	r3, [pc, #100]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 80016a6:	2204      	movs	r2, #4
 80016a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 80016ac:	2203      	movs	r2, #3
 80016ae:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80016bc:	4813      	ldr	r0, [pc, #76]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 80016be:	f001 fac9 	bl	8002c54 <HAL_DMA_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 80016c8:	f7ff fef0 	bl	80014ac <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a0f      	ldr	r2, [pc, #60]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 80016d0:	649a      	str	r2, [r3, #72]	@ 0x48
 80016d2:	4a0e      	ldr	r2, [pc, #56]	@ (800170c <HAL_DCMI_MspInit+0x220>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	204e      	movs	r0, #78	@ 0x4e
 80016de:	f001 f874 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80016e2:	204e      	movs	r0, #78	@ 0x4e
 80016e4:	f001 f88b 	bl	80027fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80016e8:	bf00      	nop
 80016ea:	3738      	adds	r7, #56	@ 0x38
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	48020000 	.word	0x48020000
 80016f4:	58024400 	.word	0x58024400
 80016f8:	58021000 	.word	0x58021000
 80016fc:	58020000 	.word	0x58020000
 8001700:	58020800 	.word	0x58020800
 8001704:	58020c00 	.word	0x58020c00
 8001708:	58020400 	.word	0x58020400
 800170c:	24000350 	.word	0x24000350
 8001710:	40020010 	.word	0x40020010

08001714 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0ba      	sub	sp, #232	@ 0xe8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	22c0      	movs	r2, #192	@ 0xc0
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f013 fa88 	bl	8014c4a <memset>
  if(hi2c->Instance==I2C2)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a38      	ldr	r2, [pc, #224]	@ (8001820 <HAL_I2C_MspInit+0x10c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d169      	bne.n	8001818 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001744:	f04f 0208 	mov.w	r2, #8
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 8001750:	2302      	movs	r3, #2
 8001752:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001754:	230c      	movs	r3, #12
 8001756:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001758:	2302      	movs	r3, #2
 800175a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800175c:	2302      	movs	r3, #2
 800175e:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 8001760:	2303      	movs	r3, #3
 8001762:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001764:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001768:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800176a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800176e:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8001774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001778:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4618      	mov	r0, r3
 8001782:	f009 f80d 	bl	800a7a0 <HAL_RCCEx_PeriphCLKConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 800178c:	f7ff fe8e 	bl	80014ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001790:	4b24      	ldr	r3, [pc, #144]	@ (8001824 <HAL_I2C_MspInit+0x110>)
 8001792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001796:	4a23      	ldr	r2, [pc, #140]	@ (8001824 <HAL_I2C_MspInit+0x110>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a0:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <HAL_I2C_MspInit+0x110>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b6:	2312      	movs	r3, #18
 80017b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017bc:	2301      	movs	r3, #1
 80017be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017c8:	2304      	movs	r3, #4
 80017ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017d2:	4619      	mov	r1, r3
 80017d4:	4814      	ldr	r0, [pc, #80]	@ (8001828 <HAL_I2C_MspInit+0x114>)
 80017d6:	f003 fc71 	bl	80050bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017da:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_I2C_MspInit+0x110>)
 80017dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017e0:	4a10      	ldr	r2, [pc, #64]	@ (8001824 <HAL_I2C_MspInit+0x110>)
 80017e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_I2C_MspInit+0x110>)
 80017ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	2021      	movs	r0, #33	@ 0x21
 80017fe:	f000 ffe4 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001802:	2021      	movs	r0, #33	@ 0x21
 8001804:	f000 fffb 	bl	80027fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2022      	movs	r0, #34	@ 0x22
 800180e:	f000 ffdc 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001812:	2022      	movs	r0, #34	@ 0x22
 8001814:	f000 fff3 	bl	80027fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001818:	bf00      	nop
 800181a:	37e8      	adds	r7, #232	@ 0xe8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40005800 	.word	0x40005800
 8001824:	58024400 	.word	0x58024400
 8001828:	58020400 	.word	0x58020400

0800182c <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a55      	ldr	r2, [pc, #340]	@ (8001990 <HAL_JPEG_MspInit+0x164>)
 800183a:	4293      	cmp	r3, r2
 800183c:	f040 80a3 	bne.w	8001986 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001840:	4b54      	ldr	r3, [pc, #336]	@ (8001994 <HAL_JPEG_MspInit+0x168>)
 8001842:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001846:	4a53      	ldr	r2, [pc, #332]	@ (8001994 <HAL_JPEG_MspInit+0x168>)
 8001848:	f043 0320 	orr.w	r3, r3, #32
 800184c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001850:	4b50      	ldr	r3, [pc, #320]	@ (8001994 <HAL_JPEG_MspInit+0x168>)
 8001852:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 800185e:	4b4e      	ldr	r3, [pc, #312]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 8001860:	4a4e      	ldr	r2, [pc, #312]	@ (800199c <HAL_JPEG_MspInit+0x170>)
 8001862:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001864:	4b4c      	ldr	r3, [pc, #304]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 8001866:	2211      	movs	r2, #17
 8001868:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800186a:	4b4b      	ldr	r3, [pc, #300]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001870:	4b49      	ldr	r3, [pc, #292]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 8001872:	2240      	movs	r2, #64	@ 0x40
 8001874:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001876:	4b48      	ldr	r3, [pc, #288]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800187c:	4b46      	ldr	r3, [pc, #280]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 800187e:	2202      	movs	r2, #2
 8001880:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001882:	4b45      	ldr	r3, [pc, #276]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001888:	4b43      	ldr	r3, [pc, #268]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800188e:	4b42      	ldr	r3, [pc, #264]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 8001890:	2280      	movs	r2, #128	@ 0x80
 8001892:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001894:	4b40      	ldr	r3, [pc, #256]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 8001896:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800189a:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800189c:	4b3e      	ldr	r3, [pc, #248]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 800189e:	2220      	movs	r2, #32
 80018a0:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80018a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80018a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 80018ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80018b4:	4b38      	ldr	r3, [pc, #224]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80018ba:	4837      	ldr	r0, [pc, #220]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 80018bc:	f006 f9ee 	bl	8007c9c <HAL_MDMA_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 80018c6:	f7ff fdf1 	bl	80014ac <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	4832      	ldr	r0, [pc, #200]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 80018d0:	f006 fa30 	bl	8007d34 <HAL_MDMA_ConfigPostRequestMask>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 80018da:	f7ff fde7 	bl	80014ac <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a2d      	ldr	r2, [pc, #180]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 80018e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80018e4:	4a2c      	ldr	r2, [pc, #176]	@ (8001998 <HAL_JPEG_MspInit+0x16c>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 80018ea:	4b2d      	ldr	r3, [pc, #180]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 80018ec:	4a2d      	ldr	r2, [pc, #180]	@ (80019a4 <HAL_JPEG_MspInit+0x178>)
 80018ee:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 80018f0:	4b2b      	ldr	r3, [pc, #172]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 80018f2:	2214      	movs	r2, #20
 80018f4:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80018f6:	4b2a      	ldr	r3, [pc, #168]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 80018fc:	4b28      	ldr	r3, [pc, #160]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 80018fe:	2240      	movs	r2, #64	@ 0x40
 8001900:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001902:	4b27      	ldr	r3, [pc, #156]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001908:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 800190e:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 8001910:	2208      	movs	r2, #8
 8001912:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001914:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 8001916:	2220      	movs	r2, #32
 8001918:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800191a:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001920:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 8001922:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001926:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 800192a:	2204      	movs	r2, #4
 800192c:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800192e:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 8001930:	2200      	movs	r2, #0
 8001932:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001934:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 8001936:	2200      	movs	r2, #0
 8001938:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 800193c:	2200      	movs	r2, #0
 800193e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8001940:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 8001942:	2200      	movs	r2, #0
 8001944:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 8001946:	4816      	ldr	r0, [pc, #88]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 8001948:	f006 f9a8 	bl	8007c9c <HAL_MDMA_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8001952:	f7ff fdab 	bl	80014ac <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	4811      	ldr	r0, [pc, #68]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 800195c:	f006 f9ea 	bl	8007d34 <HAL_MDMA_ConfigPostRequestMask>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 8001966:	f7ff fda1 	bl	80014ac <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a0c      	ldr	r2, [pc, #48]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 800196e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001970:	4a0b      	ldr	r2, [pc, #44]	@ (80019a0 <HAL_JPEG_MspInit+0x174>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	2079      	movs	r0, #121	@ 0x79
 800197c:	f000 ff25 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001980:	2079      	movs	r0, #121	@ 0x79
 8001982:	f000 ff3c 	bl	80027fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	52003000 	.word	0x52003000
 8001994:	58024400 	.word	0x58024400
 8001998:	24000474 	.word	0x24000474
 800199c:	52000040 	.word	0x52000040
 80019a0:	240004e0 	.word	0x240004e0
 80019a4:	52000080 	.word	0x52000080

080019a8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b0bc      	sub	sp, #240	@ 0xf0
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c0:	f107 0318 	add.w	r3, r7, #24
 80019c4:	22c0      	movs	r2, #192	@ 0xc0
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f013 f93e 	bl	8014c4a <memset>
  if(hspi->Instance==SPI2)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a38      	ldr	r2, [pc, #224]	@ (8001ab4 <HAL_SPI_MspInit+0x10c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d169      	bne.n	8001aac <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80019d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e8:	f107 0318 	add.w	r3, r7, #24
 80019ec:	4618      	mov	r0, r3
 80019ee:	f008 fed7 	bl	800a7a0 <HAL_RCCEx_PeriphCLKConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80019f8:	f7ff fd58 	bl	80014ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019fc:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab8 <HAL_SPI_MspInit+0x110>)
 80019fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a02:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab8 <HAL_SPI_MspInit+0x110>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <HAL_SPI_MspInit+0x110>)
 8001a0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <HAL_SPI_MspInit+0x110>)
 8001a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a20:	4a25      	ldr	r2, [pc, #148]	@ (8001ab8 <HAL_SPI_MspInit+0x110>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a2a:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <HAL_SPI_MspInit+0x110>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <HAL_SPI_MspInit+0x110>)
 8001a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab8 <HAL_SPI_MspInit+0x110>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <HAL_SPI_MspInit+0x110>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001a56:	2306      	movs	r3, #6
 8001a58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a6e:	2305      	movs	r3, #5
 8001a70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a74:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4810      	ldr	r0, [pc, #64]	@ (8001abc <HAL_SPI_MspInit+0x114>)
 8001a7c:	f003 fb1e 	bl	80050bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a9a:	2305      	movs	r3, #5
 8001a9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	@ (8001ac0 <HAL_SPI_MspInit+0x118>)
 8001aa8:	f003 fb08 	bl	80050bc <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001aac:	bf00      	nop
 8001aae:	37f0      	adds	r7, #240	@ 0xf0
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40003800 	.word	0x40003800
 8001ab8:	58024400 	.word	0x58024400
 8001abc:	58020800 	.word	0x58020800
 8001ac0:	58020400 	.word	0x58020400

08001ac4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8001b80 <HAL_TIM_PWM_MspInit+0xbc>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d10f      	bne.n	8001af6 <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001adc:	4a29      	ldr	r2, [pc, #164]	@ (8001b84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ae6:	4b27      	ldr	r3, [pc, #156]	@ (8001b84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001af4:	e03d      	b.n	8001b72 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001afe:	d10f      	bne.n	8001b20 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b00:	4b20      	ldr	r3, [pc, #128]	@ (8001b84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b06:	4a1f      	ldr	r2, [pc, #124]	@ (8001b84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b10:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
}
 8001b1e:	e028      	b.n	8001b72 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a18      	ldr	r2, [pc, #96]	@ (8001b88 <HAL_TIM_PWM_MspInit+0xc4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d10f      	bne.n	8001b4a <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b2a:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b30:	4a14      	ldr	r2, [pc, #80]	@ (8001b84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b3a:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	e013      	b.n	8001b72 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b8c <HAL_TIM_PWM_MspInit+0xc8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d10e      	bne.n	8001b72 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b64:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <HAL_TIM_PWM_MspInit+0xc0>)
 8001b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
}
 8001b72:	bf00      	nop
 8001b74:	371c      	adds	r7, #28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40010000 	.word	0x40010000
 8001b84:	58024400 	.word	0x58024400
 8001b88:	40000400 	.word	0x40000400
 8001b8c:	40000800 	.word	0x40000800

08001b90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c14 <HAL_TIM_Base_MspInit+0x84>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d117      	bne.n	8001bd2 <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <HAL_TIM_Base_MspInit+0x88>)
 8001ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c18 <HAL_TIM_Base_MspInit+0x88>)
 8001baa:	f043 0308 	orr.w	r3, r3, #8
 8001bae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bb2:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_TIM_Base_MspInit+0x88>)
 8001bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2032      	movs	r0, #50	@ 0x32
 8001bc6:	f000 fe00 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001bca:	2032      	movs	r0, #50	@ 0x32
 8001bcc:	f000 fe17 	bl	80027fe <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001bd0:	e01b      	b.n	8001c0a <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM14)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a11      	ldr	r2, [pc, #68]	@ (8001c1c <HAL_TIM_Base_MspInit+0x8c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d116      	bne.n	8001c0a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c18 <HAL_TIM_Base_MspInit+0x88>)
 8001bde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001be2:	4a0d      	ldr	r2, [pc, #52]	@ (8001c18 <HAL_TIM_Base_MspInit+0x88>)
 8001be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bec:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_TIM_Base_MspInit+0x88>)
 8001bee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	202d      	movs	r0, #45	@ 0x2d
 8001c00:	f000 fde3 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001c04:	202d      	movs	r0, #45	@ 0x2d
 8001c06:	f000 fdfa 	bl	80027fe <HAL_NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40000c00 	.word	0x40000c00
 8001c18:	58024400 	.word	0x58024400
 8001c1c:	40002000 	.word	0x40002000

08001c20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08c      	sub	sp, #48	@ 0x30
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a5d      	ldr	r2, [pc, #372]	@ (8001db4 <HAL_TIM_MspPostInit+0x194>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d120      	bne.n	8001c84 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c42:	4b5d      	ldr	r3, [pc, #372]	@ (8001db8 <HAL_TIM_MspPostInit+0x198>)
 8001c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c48:	4a5b      	ldr	r2, [pc, #364]	@ (8001db8 <HAL_TIM_MspPostInit+0x198>)
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c52:	4b59      	ldr	r3, [pc, #356]	@ (8001db8 <HAL_TIM_MspPostInit+0x198>)
 8001c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c72:	2301      	movs	r3, #1
 8001c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	484f      	ldr	r0, [pc, #316]	@ (8001dbc <HAL_TIM_MspPostInit+0x19c>)
 8001c7e:	f003 fa1d 	bl	80050bc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001c82:	e093      	b.n	8001dac <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c8c:	d11f      	bne.n	8001cce <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001db8 <HAL_TIM_MspPostInit+0x198>)
 8001c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c94:	4a48      	ldr	r2, [pc, #288]	@ (8001db8 <HAL_TIM_MspPostInit+0x198>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c9e:	4b46      	ldr	r3, [pc, #280]	@ (8001db8 <HAL_TIM_MspPostInit+0x198>)
 8001ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001cac:	2307      	movs	r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 031c 	add.w	r3, r7, #28
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	483e      	ldr	r0, [pc, #248]	@ (8001dc0 <HAL_TIM_MspPostInit+0x1a0>)
 8001cc8:	f003 f9f8 	bl	80050bc <HAL_GPIO_Init>
}
 8001ccc:	e06e      	b.n	8001dac <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a3c      	ldr	r2, [pc, #240]	@ (8001dc4 <HAL_TIM_MspPostInit+0x1a4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d11f      	bne.n	8001d18 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd8:	4b37      	ldr	r3, [pc, #220]	@ (8001db8 <HAL_TIM_MspPostInit+0x198>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cde:	4a36      	ldr	r2, [pc, #216]	@ (8001db8 <HAL_TIM_MspPostInit+0x198>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ce8:	4b33      	ldr	r3, [pc, #204]	@ (8001db8 <HAL_TIM_MspPostInit+0x198>)
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d06:	2302      	movs	r3, #2
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0a:	f107 031c 	add.w	r3, r7, #28
 8001d0e:	4619      	mov	r1, r3
 8001d10:	482d      	ldr	r0, [pc, #180]	@ (8001dc8 <HAL_TIM_MspPostInit+0x1a8>)
 8001d12:	f003 f9d3 	bl	80050bc <HAL_GPIO_Init>
}
 8001d16:	e049      	b.n	8001dac <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8001dcc <HAL_TIM_MspPostInit+0x1ac>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d120      	bne.n	8001d64 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	4b25      	ldr	r3, [pc, #148]	@ (8001db8 <HAL_TIM_MspPostInit+0x198>)
 8001d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d28:	4a23      	ldr	r2, [pc, #140]	@ (8001db8 <HAL_TIM_MspPostInit+0x198>)
 8001d2a:	f043 0302 	orr.w	r3, r3, #2
 8001d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d32:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <HAL_TIM_MspPostInit+0x198>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d40:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d52:	2302      	movs	r3, #2
 8001d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	481a      	ldr	r0, [pc, #104]	@ (8001dc8 <HAL_TIM_MspPostInit+0x1a8>)
 8001d5e:	f003 f9ad 	bl	80050bc <HAL_GPIO_Init>
}
 8001d62:	e023      	b.n	8001dac <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a19      	ldr	r2, [pc, #100]	@ (8001dd0 <HAL_TIM_MspPostInit+0x1b0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d11e      	bne.n	8001dac <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <HAL_TIM_MspPostInit+0x198>)
 8001d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d74:	4a10      	ldr	r2, [pc, #64]	@ (8001db8 <HAL_TIM_MspPostInit+0x198>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <HAL_TIM_MspPostInit+0x198>)
 8001d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d8c:	2380      	movs	r3, #128	@ 0x80
 8001d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001d9c:	2309      	movs	r3, #9
 8001d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4619      	mov	r1, r3
 8001da6:	4806      	ldr	r0, [pc, #24]	@ (8001dc0 <HAL_TIM_MspPostInit+0x1a0>)
 8001da8:	f003 f988 	bl	80050bc <HAL_GPIO_Init>
}
 8001dac:	bf00      	nop
 8001dae:	3730      	adds	r7, #48	@ 0x30
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40010000 	.word	0x40010000
 8001db8:	58024400 	.word	0x58024400
 8001dbc:	58021000 	.word	0x58021000
 8001dc0:	58020000 	.word	0x58020000
 8001dc4:	40000400 	.word	0x40000400
 8001dc8:	58020400 	.word	0x58020400
 8001dcc:	40000800 	.word	0x40000800
 8001dd0:	40002000 	.word	0x40002000

08001dd4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b0ba      	sub	sp, #232	@ 0xe8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	22c0      	movs	r2, #192	@ 0xc0
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f012 ff28 	bl	8014c4a <memset>
  if(huart->Instance==USART1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a43      	ldr	r2, [pc, #268]	@ (8001f0c <HAL_UART_MspInit+0x138>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d17e      	bne.n	8001f02 <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e04:	f04f 0201 	mov.w	r2, #1
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f008 fcc0 	bl	800a7a0 <HAL_RCCEx_PeriphCLKConfig>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001e26:	f7ff fb41 	bl	80014ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e2a:	4b39      	ldr	r3, [pc, #228]	@ (8001f10 <HAL_UART_MspInit+0x13c>)
 8001e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e30:	4a37      	ldr	r2, [pc, #220]	@ (8001f10 <HAL_UART_MspInit+0x13c>)
 8001e32:	f043 0310 	orr.w	r3, r3, #16
 8001e36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e3a:	4b35      	ldr	r3, [pc, #212]	@ (8001f10 <HAL_UART_MspInit+0x13c>)
 8001e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e48:	4b31      	ldr	r3, [pc, #196]	@ (8001f10 <HAL_UART_MspInit+0x13c>)
 8001e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e4e:	4a30      	ldr	r2, [pc, #192]	@ (8001f10 <HAL_UART_MspInit+0x13c>)
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e58:	4b2d      	ldr	r3, [pc, #180]	@ (8001f10 <HAL_UART_MspInit+0x13c>)
 8001e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001e66:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001e80:	2304      	movs	r3, #4
 8001e82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e86:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4821      	ldr	r0, [pc, #132]	@ (8001f14 <HAL_UART_MspInit+0x140>)
 8001e8e:	f003 f915 	bl	80050bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 8001e92:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <HAL_UART_MspInit+0x144>)
 8001e94:	4a21      	ldr	r2, [pc, #132]	@ (8001f1c <HAL_UART_MspInit+0x148>)
 8001e96:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001e98:	4b1f      	ldr	r3, [pc, #124]	@ (8001f18 <HAL_UART_MspInit+0x144>)
 8001e9a:	2229      	movs	r2, #41	@ 0x29
 8001e9c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f18 <HAL_UART_MspInit+0x144>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f18 <HAL_UART_MspInit+0x144>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_UART_MspInit+0x144>)
 8001eac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <HAL_UART_MspInit+0x144>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eb8:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <HAL_UART_MspInit+0x144>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001ebe:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <HAL_UART_MspInit+0x144>)
 8001ec0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ec4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ec6:	4b14      	ldr	r3, [pc, #80]	@ (8001f18 <HAL_UART_MspInit+0x144>)
 8001ec8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ecc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ece:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <HAL_UART_MspInit+0x144>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ed4:	4810      	ldr	r0, [pc, #64]	@ (8001f18 <HAL_UART_MspInit+0x144>)
 8001ed6:	f000 febd 	bl	8002c54 <HAL_DMA_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001ee0:	f7ff fae4 	bl	80014ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8001f18 <HAL_UART_MspInit+0x144>)
 8001ee8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001eec:	4a0a      	ldr	r2, [pc, #40]	@ (8001f18 <HAL_UART_MspInit+0x144>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2025      	movs	r0, #37	@ 0x25
 8001ef8:	f000 fc67 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001efc:	2025      	movs	r0, #37	@ 0x25
 8001efe:	f000 fc7e 	bl	80027fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f02:	bf00      	nop
 8001f04:	37e8      	adds	r7, #232	@ 0xe8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	58024400 	.word	0x58024400
 8001f14:	58020400 	.word	0x58020400
 8001f18:	24000830 	.word	0x24000830
 8001f1c:	40020410 	.word	0x40020410

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <NMI_Handler+0x4>

08001f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <HardFault_Handler+0x4>

08001f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <MemManage_Handler+0x4>

08001f38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <BusFault_Handler+0x4>

08001f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <UsageFault_Handler+0x4>

08001f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f76:	f000 fafd 	bl	8002574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001f84:	4802      	ldr	r0, [pc, #8]	@ (8001f90 <DMA1_Stream0_IRQHandler+0x10>)
 8001f86:	f001 ff25 	bl	8003dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	24000350 	.word	0x24000350

08001f94 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001f98:	4802      	ldr	r0, [pc, #8]	@ (8001fa4 <I2C2_EV_IRQHandler+0x10>)
 8001f9a:	f003 faf5 	bl	8005588 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	240003c8 	.word	0x240003c8

08001fa8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001fac:	4802      	ldr	r0, [pc, #8]	@ (8001fb8 <I2C2_ER_IRQHandler+0x10>)
 8001fae:	f003 fb05 	bl	80055bc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	240003c8 	.word	0x240003c8

08001fbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fc0:	4802      	ldr	r0, [pc, #8]	@ (8001fcc <USART1_IRQHandler+0x10>)
 8001fc2:	f00c fa95 	bl	800e4f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2400079c 	.word	0x2400079c

08001fd0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001fd4:	4802      	ldr	r0, [pc, #8]	@ (8001fe0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001fd6:	f00b f92a 	bl	800d22e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	24000750 	.word	0x24000750

08001fe4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  NetworkTimeout();
 8001fe8:	f7ff f8f4 	bl	80011d4 <NetworkTimeout>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001fec:	4802      	ldr	r0, [pc, #8]	@ (8001ff8 <TIM5_IRQHandler+0x14>)
 8001fee:	f00b f91e 	bl	800d22e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	24000704 	.word	0x24000704

08001ffc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002000:	4802      	ldr	r0, [pc, #8]	@ (800200c <DMA2_Stream0_IRQHandler+0x10>)
 8002002:	f001 fee7 	bl	8003dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	24000830 	.word	0x24000830

08002010 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002014:	4802      	ldr	r0, [pc, #8]	@ (8002020 <DCMI_IRQHandler+0x10>)
 8002016:	f000 fd5f 	bl	8002ad8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	24000300 	.word	0x24000300

08002024 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <OTG_FS_IRQHandler+0x10>)
 800202a:	f006 fa2a 	bl	8008482 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	240271f0 	.word	0x240271f0

08002038 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 800203c:	4802      	ldr	r0, [pc, #8]	@ (8002048 <JPEG_IRQHandler+0x10>)
 800203e:	f004 fbeb 	bl	8006818 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2400041c 	.word	0x2400041c

0800204c <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8002050:	4803      	ldr	r0, [pc, #12]	@ (8002060 <MDMA_IRQHandler+0x14>)
 8002052:	f005 fee9 	bl	8007e28 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8002056:	4803      	ldr	r0, [pc, #12]	@ (8002064 <MDMA_IRQHandler+0x18>)
 8002058:	f005 fee6 	bl	8007e28 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	24000474 	.word	0x24000474
 8002064:	240004e0 	.word	0x240004e0

08002068 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return 1;
 800206c:	2301      	movs	r3, #1
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_kill>:

int _kill(int pid, int sig)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002082:	f012 fe45 	bl	8014d10 <__errno>
 8002086:	4603      	mov	r3, r0
 8002088:	2216      	movs	r2, #22
 800208a:	601a      	str	r2, [r3, #0]
  return -1;
 800208c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_exit>:

void _exit (int status)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ffe7 	bl	8002078 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020aa:	bf00      	nop
 80020ac:	e7fd      	b.n	80020aa <_exit+0x12>

080020ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e00a      	b.n	80020d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020c0:	f3af 8000 	nop.w
 80020c4:	4601      	mov	r1, r0
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	60ba      	str	r2, [r7, #8]
 80020cc:	b2ca      	uxtb	r2, r1
 80020ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	3301      	adds	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	429a      	cmp	r2, r3
 80020dc:	dbf0      	blt.n	80020c0 <_read+0x12>
  }

  return len;
 80020de:	687b      	ldr	r3, [r7, #4]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	e009      	b.n	800210e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	60ba      	str	r2, [r7, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	3301      	adds	r3, #1
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	429a      	cmp	r2, r3
 8002114:	dbf1      	blt.n	80020fa <_write+0x12>
  }
  return len;
 8002116:	687b      	ldr	r3, [r7, #4]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_close>:

int _close(int file)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002128:	f04f 33ff 	mov.w	r3, #4294967295
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002148:	605a      	str	r2, [r3, #4]
  return 0;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_isatty>:

int _isatty(int file)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002160:	2301      	movs	r3, #1
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002190:	4a14      	ldr	r2, [pc, #80]	@ (80021e4 <_sbrk+0x5c>)
 8002192:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <_sbrk+0x60>)
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800219c:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <_sbrk+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a4:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <_sbrk+0x64>)
 80021a6:	4a12      	ldr	r2, [pc, #72]	@ (80021f0 <_sbrk+0x68>)
 80021a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d207      	bcs.n	80021c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b8:	f012 fdaa 	bl	8014d10 <__errno>
 80021bc:	4603      	mov	r3, r0
 80021be:	220c      	movs	r2, #12
 80021c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	e009      	b.n	80021dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c8:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ce:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	4a05      	ldr	r2, [pc, #20]	@ (80021ec <_sbrk+0x64>)
 80021d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	24080000 	.word	0x24080000
 80021e8:	00000400 	.word	0x00000400
 80021ec:	24025d04 	.word	0x24025d04
 80021f0:	24027a40 	.word	0x24027a40

080021f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021f8:	4b43      	ldr	r3, [pc, #268]	@ (8002308 <SystemInit+0x114>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fe:	4a42      	ldr	r2, [pc, #264]	@ (8002308 <SystemInit+0x114>)
 8002200:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002204:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002208:	4b40      	ldr	r3, [pc, #256]	@ (800230c <SystemInit+0x118>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	2b06      	cmp	r3, #6
 8002212:	d807      	bhi.n	8002224 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002214:	4b3d      	ldr	r3, [pc, #244]	@ (800230c <SystemInit+0x118>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f023 030f 	bic.w	r3, r3, #15
 800221c:	4a3b      	ldr	r2, [pc, #236]	@ (800230c <SystemInit+0x118>)
 800221e:	f043 0307 	orr.w	r3, r3, #7
 8002222:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002224:	4b3a      	ldr	r3, [pc, #232]	@ (8002310 <SystemInit+0x11c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a39      	ldr	r2, [pc, #228]	@ (8002310 <SystemInit+0x11c>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002230:	4b37      	ldr	r3, [pc, #220]	@ (8002310 <SystemInit+0x11c>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002236:	4b36      	ldr	r3, [pc, #216]	@ (8002310 <SystemInit+0x11c>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4935      	ldr	r1, [pc, #212]	@ (8002310 <SystemInit+0x11c>)
 800223c:	4b35      	ldr	r3, [pc, #212]	@ (8002314 <SystemInit+0x120>)
 800223e:	4013      	ands	r3, r2
 8002240:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002242:	4b32      	ldr	r3, [pc, #200]	@ (800230c <SystemInit+0x118>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800224e:	4b2f      	ldr	r3, [pc, #188]	@ (800230c <SystemInit+0x118>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 030f 	bic.w	r3, r3, #15
 8002256:	4a2d      	ldr	r2, [pc, #180]	@ (800230c <SystemInit+0x118>)
 8002258:	f043 0307 	orr.w	r3, r3, #7
 800225c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800225e:	4b2c      	ldr	r3, [pc, #176]	@ (8002310 <SystemInit+0x11c>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002264:	4b2a      	ldr	r3, [pc, #168]	@ (8002310 <SystemInit+0x11c>)
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800226a:	4b29      	ldr	r3, [pc, #164]	@ (8002310 <SystemInit+0x11c>)
 800226c:	2200      	movs	r2, #0
 800226e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002270:	4b27      	ldr	r3, [pc, #156]	@ (8002310 <SystemInit+0x11c>)
 8002272:	4a29      	ldr	r2, [pc, #164]	@ (8002318 <SystemInit+0x124>)
 8002274:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002276:	4b26      	ldr	r3, [pc, #152]	@ (8002310 <SystemInit+0x11c>)
 8002278:	4a28      	ldr	r2, [pc, #160]	@ (800231c <SystemInit+0x128>)
 800227a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800227c:	4b24      	ldr	r3, [pc, #144]	@ (8002310 <SystemInit+0x11c>)
 800227e:	4a28      	ldr	r2, [pc, #160]	@ (8002320 <SystemInit+0x12c>)
 8002280:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002282:	4b23      	ldr	r3, [pc, #140]	@ (8002310 <SystemInit+0x11c>)
 8002284:	2200      	movs	r2, #0
 8002286:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002288:	4b21      	ldr	r3, [pc, #132]	@ (8002310 <SystemInit+0x11c>)
 800228a:	4a25      	ldr	r2, [pc, #148]	@ (8002320 <SystemInit+0x12c>)
 800228c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800228e:	4b20      	ldr	r3, [pc, #128]	@ (8002310 <SystemInit+0x11c>)
 8002290:	2200      	movs	r2, #0
 8002292:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002294:	4b1e      	ldr	r3, [pc, #120]	@ (8002310 <SystemInit+0x11c>)
 8002296:	4a22      	ldr	r2, [pc, #136]	@ (8002320 <SystemInit+0x12c>)
 8002298:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800229a:	4b1d      	ldr	r3, [pc, #116]	@ (8002310 <SystemInit+0x11c>)
 800229c:	2200      	movs	r2, #0
 800229e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <SystemInit+0x11c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002310 <SystemInit+0x11c>)
 80022a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022ac:	4b18      	ldr	r3, [pc, #96]	@ (8002310 <SystemInit+0x11c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002324 <SystemInit+0x130>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002328 <SystemInit+0x134>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022be:	d202      	bcs.n	80022c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022c0:	4b1a      	ldr	r3, [pc, #104]	@ (800232c <SystemInit+0x138>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80022c6:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <SystemInit+0x11c>)
 80022c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d113      	bne.n	80022fc <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80022d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002310 <SystemInit+0x11c>)
 80022d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022da:	4a0d      	ldr	r2, [pc, #52]	@ (8002310 <SystemInit+0x11c>)
 80022dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022e0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022e4:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <SystemInit+0x13c>)
 80022e6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80022ea:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80022ec:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <SystemInit+0x11c>)
 80022ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022f2:	4a07      	ldr	r2, [pc, #28]	@ (8002310 <SystemInit+0x11c>)
 80022f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00
 800230c:	52002000 	.word	0x52002000
 8002310:	58024400 	.word	0x58024400
 8002314:	eaf6ed7f 	.word	0xeaf6ed7f
 8002318:	02020200 	.word	0x02020200
 800231c:	01ff0000 	.word	0x01ff0000
 8002320:	01010280 	.word	0x01010280
 8002324:	5c001000 	.word	0x5c001000
 8002328:	ffff0000 	.word	0xffff0000
 800232c:	51008108 	.word	0x51008108
 8002330:	52004000 	.word	0x52004000

08002334 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002338:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <ExitRun0Mode+0x2c>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a08      	ldr	r2, [pc, #32]	@ (8002360 <ExitRun0Mode+0x2c>)
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002344:	bf00      	nop
 8002346:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <ExitRun0Mode+0x2c>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f9      	beq.n	8002346 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002352:	bf00      	nop
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	58024800 	.word	0x58024800

08002364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002364:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80023a0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002368:	f7ff ffe4 	bl	8002334 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800236c:	f7ff ff42 	bl	80021f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002370:	480c      	ldr	r0, [pc, #48]	@ (80023a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002372:	490d      	ldr	r1, [pc, #52]	@ (80023a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002374:	4a0d      	ldr	r2, [pc, #52]	@ (80023ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002378:	e002      	b.n	8002380 <LoopCopyDataInit>

0800237a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800237a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800237c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237e:	3304      	adds	r3, #4

08002380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002384:	d3f9      	bcc.n	800237a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002386:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002388:	4c0a      	ldr	r4, [pc, #40]	@ (80023b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800238c:	e001      	b.n	8002392 <LoopFillZerobss>

0800238e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002390:	3204      	adds	r2, #4

08002392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002394:	d3fb      	bcc.n	800238e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002396:	f012 fcc1 	bl	8014d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800239a:	f7fe f9a5 	bl	80006e8 <main>
  bx  lr
 800239e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023a8:	240002e4 	.word	0x240002e4
  ldr r2, =_sidata
 80023ac:	080173dc 	.word	0x080173dc
  ldr r2, =_sbss
 80023b0:	240002e4 	.word	0x240002e4
  ldr r4, =_ebss
 80023b4:	24027a40 	.word	0x24027a40

080023b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023b8:	e7fe      	b.n	80023b8 <ADC3_IRQHandler>

080023ba <INA229_ReadRegister>:
// ------------------------------------------------------------------------------------

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t INA229_ReadRegister(INA229_HandleTypeDef *ina229, uint8_t addr, uint8_t *pRead, uint8_t len) {
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	461a      	mov	r2, r3
 80023c6:	460b      	mov	r3, r1
 80023c8:	72fb      	strb	r3, [r7, #11]
 80023ca:	4613      	mov	r3, r2
 80023cc:	72bb      	strb	r3, [r7, #10]
	// A5 A4 A3 A2 A1 A0 XX RR
	uint8_t dataToWrite = (addr << 2) | 0b1;
 80023ce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	b25b      	sxtb	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	75bb      	strb	r3, [r7, #22]
	uint8_t ret = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	75fb      	strb	r3, [r7, #23]

	//uint8_t rVal[2] = {0, 0};

	// Assert the CS low
	HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_RESET);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6858      	ldr	r0, [r3, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	891b      	ldrh	r3, [r3, #8]
 80023ec:	2200      	movs	r2, #0
 80023ee:	4619      	mov	r1, r3
 80023f0:	f003 f814 	bl	800541c <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f000 f8dd 	bl	80025b4 <HAL_Delay>

	ret = HAL_SPI_Transmit(ina229->spi_handle, &dataToWrite, 1, 100);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	f107 0116 	add.w	r1, r7, #22
 8002402:	2364      	movs	r3, #100	@ 0x64
 8002404:	2201      	movs	r2, #1
 8002406:	f00a f91b 	bl	800c640 <HAL_SPI_Transmit>
 800240a:	4603      	mov	r3, r0
 800240c:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d009      	beq.n	8002428 <INA229_ReadRegister+0x6e>
		// Release the CS
		HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6858      	ldr	r0, [r3, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	891b      	ldrh	r3, [r3, #8]
 800241c:	2201      	movs	r2, #1
 800241e:	4619      	mov	r1, r3
 8002420:	f002 fffc 	bl	800541c <HAL_GPIO_WritePin>
		return ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e01f      	b.n	8002468 <INA229_ReadRegister+0xae>
	}

	ret = HAL_SPI_Receive(ina229->spi_handle, pRead, len, 100);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	7abb      	ldrb	r3, [r7, #10]
 800242e:	b29a      	uxth	r2, r3
 8002430:	2364      	movs	r3, #100	@ 0x64
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	f00a faf2 	bl	800ca1c <HAL_SPI_Receive>
 8002438:	4603      	mov	r3, r0
 800243a:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 800243c:	7dfb      	ldrb	r3, [r7, #23]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <INA229_ReadRegister+0x9c>
		// Release the CS
		HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6858      	ldr	r0, [r3, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	891b      	ldrh	r3, [r3, #8]
 800244a:	2201      	movs	r2, #1
 800244c:	4619      	mov	r1, r3
 800244e:	f002 ffe5 	bl	800541c <HAL_GPIO_WritePin>
		return  ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e008      	b.n	8002468 <INA229_ReadRegister+0xae>
//		HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
//		return ERROR;
//	}

	// Release the CS
	HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6858      	ldr	r0, [r3, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	891b      	ldrh	r3, [r3, #8]
 800245e:	2201      	movs	r2, #1
 8002460:	4619      	mov	r1, r3
 8002462:	f002 ffdb 	bl	800541c <HAL_GPIO_WritePin>

	return SUCCESS;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <INA229_Init>:
	HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);

	return SUCCESS;
}

uint8_t INA229_Init(INA229_HandleTypeDef *ina229) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
//	HAL_SPI_Transmit(ina229->spi_handle, &dummy, 1, 100);
//	HAL_Delay(10);

	// Let's just test to start
	uint8_t readVal[2];
	INA229_ReadRegister(ina229, 0x01, readVal, 2);
 8002478:	f107 020c 	add.w	r2, r7, #12
 800247c:	2302      	movs	r3, #2
 800247e:	2101      	movs	r1, #1
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ff9a 	bl	80023ba <INA229_ReadRegister>

	return SUCCESS;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002496:	2003      	movs	r0, #3
 8002498:	f000 f98c 	bl	80027b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800249c:	f007 ffaa 	bl	800a3f4 <HAL_RCC_GetSysClockFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <HAL_Init+0x68>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	4913      	ldr	r1, [pc, #76]	@ (80024fc <HAL_Init+0x6c>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
 80024b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024ba:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <HAL_Init+0x68>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	4a0e      	ldr	r2, [pc, #56]	@ (80024fc <HAL_Init+0x6c>)
 80024c4:	5cd3      	ldrb	r3, [r2, r3]
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002500 <HAL_Init+0x70>)
 80024d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002504 <HAL_Init+0x74>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024da:	200f      	movs	r0, #15
 80024dc:	f000 f814 	bl	8002508 <HAL_InitTick>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e002      	b.n	80024f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024ea:	f7fe ffe5 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	58024400 	.word	0x58024400
 80024fc:	08016db4 	.word	0x08016db4
 8002500:	2400001c 	.word	0x2400001c
 8002504:	24000018 	.word	0x24000018

08002508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002510:	4b15      	ldr	r3, [pc, #84]	@ (8002568 <HAL_InitTick+0x60>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e021      	b.n	8002560 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800251c:	4b13      	ldr	r3, [pc, #76]	@ (800256c <HAL_InitTick+0x64>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <HAL_InitTick+0x60>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800252a:	fbb3 f3f1 	udiv	r3, r3, r1
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f971 	bl	800281a <HAL_SYSTICK_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e00e      	b.n	8002560 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b0f      	cmp	r3, #15
 8002546:	d80a      	bhi.n	800255e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002548:	2200      	movs	r2, #0
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	f000 f93b 	bl	80027ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002554:	4a06      	ldr	r2, [pc, #24]	@ (8002570 <HAL_InitTick+0x68>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	24000024 	.word	0x24000024
 800256c:	24000018 	.word	0x24000018
 8002570:	24000020 	.word	0x24000020

08002574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002578:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_IncTick+0x20>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <HAL_IncTick+0x24>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4413      	add	r3, r2
 8002584:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <HAL_IncTick+0x24>)
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	24000024 	.word	0x24000024
 8002598:	24025d08 	.word	0x24025d08

0800259c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return uwTick;
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <HAL_GetTick+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	24025d08 	.word	0x24025d08

080025b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025bc:	f7ff ffee 	bl	800259c <HAL_GetTick>
 80025c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d005      	beq.n	80025da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <HAL_Delay+0x44>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025da:	bf00      	nop
 80025dc:	f7ff ffde 	bl	800259c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d8f7      	bhi.n	80025dc <HAL_Delay+0x28>
  {
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	24000024 	.word	0x24000024

080025fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002600:	4b03      	ldr	r3, [pc, #12]	@ (8002610 <HAL_GetREVID+0x14>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0c1b      	lsrs	r3, r3, #16
}
 8002606:	4618      	mov	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	5c001000 	.word	0x5c001000

08002614 <__NVIC_SetPriorityGrouping>:
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <__NVIC_SetPriorityGrouping+0x40>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800263c:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 800263e:	4313      	orrs	r3, r2
 8002640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002642:	4a04      	ldr	r2, [pc, #16]	@ (8002654 <__NVIC_SetPriorityGrouping+0x40>)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	60d3      	str	r3, [r2, #12]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00
 8002658:	05fa0000 	.word	0x05fa0000

0800265c <__NVIC_GetPriorityGrouping>:
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <__NVIC_GetPriorityGrouping+0x18>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	f003 0307 	and.w	r3, r3, #7
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_EnableIRQ>:
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002686:	2b00      	cmp	r3, #0
 8002688:	db0b      	blt.n	80026a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4907      	ldr	r1, [pc, #28]	@ (80026b0 <__NVIC_EnableIRQ+0x38>)
 8002692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2001      	movs	r0, #1
 800269a:	fa00 f202 	lsl.w	r2, r0, r2
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000e100 	.word	0xe000e100

080026b4 <__NVIC_SetPriority>:
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db0a      	blt.n	80026de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	490c      	ldr	r1, [pc, #48]	@ (8002700 <__NVIC_SetPriority+0x4c>)
 80026ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026d2:	0112      	lsls	r2, r2, #4
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	440b      	add	r3, r1
 80026d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026dc:	e00a      	b.n	80026f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4908      	ldr	r1, [pc, #32]	@ (8002704 <__NVIC_SetPriority+0x50>)
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	3b04      	subs	r3, #4
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	440b      	add	r3, r1
 80026f2:	761a      	strb	r2, [r3, #24]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000e100 	.word	0xe000e100
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <NVIC_EncodePriority>:
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	@ 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f1c3 0307 	rsb	r3, r3, #7
 8002722:	2b04      	cmp	r3, #4
 8002724:	bf28      	it	cs
 8002726:	2304      	movcs	r3, #4
 8002728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3304      	adds	r3, #4
 800272e:	2b06      	cmp	r3, #6
 8002730:	d902      	bls.n	8002738 <NVIC_EncodePriority+0x30>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3b03      	subs	r3, #3
 8002736:	e000      	b.n	800273a <NVIC_EncodePriority+0x32>
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	f04f 32ff 	mov.w	r2, #4294967295
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	401a      	ands	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002750:	f04f 31ff 	mov.w	r1, #4294967295
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	43d9      	mvns	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	4313      	orrs	r3, r2
}
 8002762:	4618      	mov	r0, r3
 8002764:	3724      	adds	r7, #36	@ 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002780:	d301      	bcc.n	8002786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002782:	2301      	movs	r3, #1
 8002784:	e00f      	b.n	80027a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002786:	4a0a      	ldr	r2, [pc, #40]	@ (80027b0 <SysTick_Config+0x40>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278e:	210f      	movs	r1, #15
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	f7ff ff8e 	bl	80026b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <SysTick_Config+0x40>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279e:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <SysTick_Config+0x40>)
 80027a0:	2207      	movs	r2, #7
 80027a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	e000e010 	.word	0xe000e010

080027b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff29 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027d8:	f7ff ff40 	bl	800265c <__NVIC_GetPriorityGrouping>
 80027dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f7ff ff90 	bl	8002708 <NVIC_EncodePriority>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff5f 	bl	80026b4 <__NVIC_SetPriority>
}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002808:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff33 	bl	8002678 <__NVIC_EnableIRQ>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ffa4 	bl	8002770 <SysTick_Config>
 8002828:	4603      	mov	r3, r0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002838:	f3bf 8f5f 	dmb	sy
}
 800283c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800283e:	4b07      	ldr	r3, [pc, #28]	@ (800285c <HAL_MPU_Disable+0x28>)
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	4a06      	ldr	r2, [pc, #24]	@ (800285c <HAL_MPU_Disable+0x28>)
 8002844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002848:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800284a:	4b05      	ldr	r3, [pc, #20]	@ (8002860 <HAL_MPU_Disable+0x2c>)
 800284c:	2200      	movs	r2, #0
 800284e:	605a      	str	r2, [r3, #4]
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000ed00 	.word	0xe000ed00
 8002860:	e000ed90 	.word	0xe000ed90

08002864 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800286c:	4a0b      	ldr	r2, [pc, #44]	@ (800289c <HAL_MPU_Enable+0x38>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002876:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <HAL_MPU_Enable+0x3c>)
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	4a09      	ldr	r2, [pc, #36]	@ (80028a0 <HAL_MPU_Enable+0x3c>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002880:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002882:	f3bf 8f4f 	dsb	sy
}
 8002886:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002888:	f3bf 8f6f 	isb	sy
}
 800288c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	e000ed90 	.word	0xe000ed90
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	785a      	ldrb	r2, [r3, #1]
 80028b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002920 <HAL_MPU_ConfigRegion+0x7c>)
 80028b2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80028b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002920 <HAL_MPU_ConfigRegion+0x7c>)
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	4a19      	ldr	r2, [pc, #100]	@ (8002920 <HAL_MPU_ConfigRegion+0x7c>)
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80028c0:	4a17      	ldr	r2, [pc, #92]	@ (8002920 <HAL_MPU_ConfigRegion+0x7c>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	7b1b      	ldrb	r3, [r3, #12]
 80028cc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7adb      	ldrb	r3, [r3, #11]
 80028d2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7a9b      	ldrb	r3, [r3, #10]
 80028da:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	7b5b      	ldrb	r3, [r3, #13]
 80028e2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80028e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7b9b      	ldrb	r3, [r3, #14]
 80028ea:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80028ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7bdb      	ldrb	r3, [r3, #15]
 80028f2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80028f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	7a5b      	ldrb	r3, [r3, #9]
 80028fa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7a1b      	ldrb	r3, [r3, #8]
 8002902:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002904:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800290c:	4a04      	ldr	r2, [pc, #16]	@ (8002920 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800290e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002910:	6113      	str	r3, [r2, #16]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000ed90 	.word	0xe000ed90

08002924 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e069      	b.n	8002a0a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fe fdd2 	bl	80014ec <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b2a      	ldr	r3, [pc, #168]	@ (8002a14 <HAL_DCMI_Init+0xf0>)
 800296a:	400b      	ands	r3, r1
 800296c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6819      	ldr	r1, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002982:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800298e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800299a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80029a6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80029b2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b10      	cmp	r3, #16
 80029c2:	d112      	bne.n	80029ea <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	7f1b      	ldrb	r3, [r3, #28]
 80029c8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7f5b      	ldrb	r3, [r3, #29]
 80029ce:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80029d0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7f9b      	ldrb	r3, [r3, #30]
 80029d6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80029d8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7fdb      	ldrb	r3, [r3, #31]
 80029e0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80029e6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80029e8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 021e 	orr.w	r2, r2, #30
 80029f8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	ffe0f007 	.word	0xffe0f007

08002a18 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8002a20:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad0 <HAL_DCMI_Stop+0xb8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a2b      	ldr	r2, [pc, #172]	@ (8002ad4 <HAL_DCMI_Stop+0xbc>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	0a5b      	lsrs	r3, r3, #9
 8002a2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a30:	fb02 f303 	mul.w	r3, r2, r3
 8002a34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_DCMI_Stop+0x30>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e03f      	b.n	8002ac8 <HAL_DCMI_Stop+0xb0>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d108      	bne.n	8002a86 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	72fb      	strb	r3, [r7, #11]
      break;
 8002a84:	e006      	b.n	8002a94 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1e9      	bne.n	8002a68 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fc2f 	bl	800330c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8002ac6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	24000018 	.word	0x24000018
 8002ad4:	10624dd3 	.word	0x10624dd3

08002ad8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d016      	beq.n	8002b20 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2204      	movs	r2, #4
 8002af8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afe:	f043 0202 	orr.w	r2, r3, #2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2204      	movs	r2, #4
 8002b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b12:	4a31      	ldr	r2, [pc, #196]	@ (8002bd8 <HAL_DCMI_IRQHandler+0x100>)
 8002b14:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 ff14 	bl	8003948 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d016      	beq.n	8002b58 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b36:	f043 0201 	orr.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2204      	movs	r2, #4
 8002b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b4a:	4a23      	ldr	r2, [pc, #140]	@ (8002bd8 <HAL_DCMI_IRQHandler+0x100>)
 8002b4c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fef8 	bl	8003948 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d006      	beq.n	8002b70 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2210      	movs	r2, #16
 8002b68:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f840 	bl	8002bf0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d006      	beq.n	8002b88 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2208      	movs	r2, #8
 8002b80:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe fb2e 	bl	80011e4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01d      	beq.n	8002bce <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d107      	bne.n	8002bb0 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 021e 	bic.w	r2, r2, #30
 8002bae:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f81b 	bl	8002c04 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	08002c19 	.word	0x08002c19

08002bdc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c24:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d009      	beq.n	8002c44 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f7ff ffc9 	bl	8002bdc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff fc9e 	bl	800259c <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e316      	b.n	800329a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a66      	ldr	r2, [pc, #408]	@ (8002e0c <HAL_DMA_Init+0x1b8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d04a      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a65      	ldr	r2, [pc, #404]	@ (8002e10 <HAL_DMA_Init+0x1bc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d045      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a63      	ldr	r2, [pc, #396]	@ (8002e14 <HAL_DMA_Init+0x1c0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d040      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a62      	ldr	r2, [pc, #392]	@ (8002e18 <HAL_DMA_Init+0x1c4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d03b      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a60      	ldr	r2, [pc, #384]	@ (8002e1c <HAL_DMA_Init+0x1c8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d036      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a5f      	ldr	r2, [pc, #380]	@ (8002e20 <HAL_DMA_Init+0x1cc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d031      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a5d      	ldr	r2, [pc, #372]	@ (8002e24 <HAL_DMA_Init+0x1d0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d02c      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a5c      	ldr	r2, [pc, #368]	@ (8002e28 <HAL_DMA_Init+0x1d4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d027      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a5a      	ldr	r2, [pc, #360]	@ (8002e2c <HAL_DMA_Init+0x1d8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d022      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a59      	ldr	r2, [pc, #356]	@ (8002e30 <HAL_DMA_Init+0x1dc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d01d      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a57      	ldr	r2, [pc, #348]	@ (8002e34 <HAL_DMA_Init+0x1e0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d018      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a56      	ldr	r2, [pc, #344]	@ (8002e38 <HAL_DMA_Init+0x1e4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d013      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a54      	ldr	r2, [pc, #336]	@ (8002e3c <HAL_DMA_Init+0x1e8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00e      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a53      	ldr	r2, [pc, #332]	@ (8002e40 <HAL_DMA_Init+0x1ec>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d009      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a51      	ldr	r2, [pc, #324]	@ (8002e44 <HAL_DMA_Init+0x1f0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d004      	beq.n	8002d0c <HAL_DMA_Init+0xb8>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a50      	ldr	r2, [pc, #320]	@ (8002e48 <HAL_DMA_Init+0x1f4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d101      	bne.n	8002d10 <HAL_DMA_Init+0xbc>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <HAL_DMA_Init+0xbe>
 8002d10:	2300      	movs	r3, #0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 813b 	beq.w	8002f8e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a37      	ldr	r2, [pc, #220]	@ (8002e0c <HAL_DMA_Init+0x1b8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d04a      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a36      	ldr	r2, [pc, #216]	@ (8002e10 <HAL_DMA_Init+0x1bc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d045      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a34      	ldr	r2, [pc, #208]	@ (8002e14 <HAL_DMA_Init+0x1c0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d040      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a33      	ldr	r2, [pc, #204]	@ (8002e18 <HAL_DMA_Init+0x1c4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d03b      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a31      	ldr	r2, [pc, #196]	@ (8002e1c <HAL_DMA_Init+0x1c8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d036      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a30      	ldr	r2, [pc, #192]	@ (8002e20 <HAL_DMA_Init+0x1cc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d031      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a2e      	ldr	r2, [pc, #184]	@ (8002e24 <HAL_DMA_Init+0x1d0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d02c      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2d      	ldr	r2, [pc, #180]	@ (8002e28 <HAL_DMA_Init+0x1d4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d027      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002e2c <HAL_DMA_Init+0x1d8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d022      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2a      	ldr	r2, [pc, #168]	@ (8002e30 <HAL_DMA_Init+0x1dc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d01d      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a28      	ldr	r2, [pc, #160]	@ (8002e34 <HAL_DMA_Init+0x1e0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d018      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a27      	ldr	r2, [pc, #156]	@ (8002e38 <HAL_DMA_Init+0x1e4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d013      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a25      	ldr	r2, [pc, #148]	@ (8002e3c <HAL_DMA_Init+0x1e8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00e      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a24      	ldr	r2, [pc, #144]	@ (8002e40 <HAL_DMA_Init+0x1ec>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d009      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a22      	ldr	r2, [pc, #136]	@ (8002e44 <HAL_DMA_Init+0x1f0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d004      	beq.n	8002dc8 <HAL_DMA_Init+0x174>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a21      	ldr	r2, [pc, #132]	@ (8002e48 <HAL_DMA_Init+0x1f4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d108      	bne.n	8002dda <HAL_DMA_Init+0x186>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e007      	b.n	8002dea <HAL_DMA_Init+0x196>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002dea:	e02f      	b.n	8002e4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dec:	f7ff fbd6 	bl	800259c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b05      	cmp	r3, #5
 8002df8:	d928      	bls.n	8002e4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2203      	movs	r2, #3
 8002e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e246      	b.n	800329a <HAL_DMA_Init+0x646>
 8002e0c:	40020010 	.word	0x40020010
 8002e10:	40020028 	.word	0x40020028
 8002e14:	40020040 	.word	0x40020040
 8002e18:	40020058 	.word	0x40020058
 8002e1c:	40020070 	.word	0x40020070
 8002e20:	40020088 	.word	0x40020088
 8002e24:	400200a0 	.word	0x400200a0
 8002e28:	400200b8 	.word	0x400200b8
 8002e2c:	40020410 	.word	0x40020410
 8002e30:	40020428 	.word	0x40020428
 8002e34:	40020440 	.word	0x40020440
 8002e38:	40020458 	.word	0x40020458
 8002e3c:	40020470 	.word	0x40020470
 8002e40:	40020488 	.word	0x40020488
 8002e44:	400204a0 	.word	0x400204a0
 8002e48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1c8      	bne.n	8002dec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4b83      	ldr	r3, [pc, #524]	@ (8003074 <HAL_DMA_Init+0x420>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d107      	bne.n	8002eb0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002eb0:	4b71      	ldr	r3, [pc, #452]	@ (8003078 <HAL_DMA_Init+0x424>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b71      	ldr	r3, [pc, #452]	@ (800307c <HAL_DMA_Init+0x428>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ebc:	d328      	bcc.n	8002f10 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b28      	cmp	r3, #40	@ 0x28
 8002ec4:	d903      	bls.n	8002ece <HAL_DMA_Init+0x27a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ecc:	d917      	bls.n	8002efe <HAL_DMA_Init+0x2aa>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ed4:	d903      	bls.n	8002ede <HAL_DMA_Init+0x28a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b42      	cmp	r3, #66	@ 0x42
 8002edc:	d90f      	bls.n	8002efe <HAL_DMA_Init+0x2aa>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b46      	cmp	r3, #70	@ 0x46
 8002ee4:	d903      	bls.n	8002eee <HAL_DMA_Init+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b48      	cmp	r3, #72	@ 0x48
 8002eec:	d907      	bls.n	8002efe <HAL_DMA_Init+0x2aa>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b4e      	cmp	r3, #78	@ 0x4e
 8002ef4:	d905      	bls.n	8002f02 <HAL_DMA_Init+0x2ae>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b52      	cmp	r3, #82	@ 0x52
 8002efc:	d801      	bhi.n	8002f02 <HAL_DMA_Init+0x2ae>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_DMA_Init+0x2b0>
 8002f02:	2300      	movs	r3, #0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f0e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f023 0307 	bic.w	r3, r3, #7
 8002f26:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d117      	bne.n	8002f6a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00e      	beq.n	8002f6a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f001 ff2b 	bl	8004da8 <DMA_CheckFifoParam>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2240      	movs	r2, #64	@ 0x40
 8002f5c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e197      	b.n	800329a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f001 fe66 	bl	8004c44 <DMA_CalcBaseAndBitshift>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	223f      	movs	r2, #63	@ 0x3f
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	e0cd      	b.n	800312a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a3b      	ldr	r2, [pc, #236]	@ (8003080 <HAL_DMA_Init+0x42c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <HAL_DMA_Init+0x38a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a39      	ldr	r2, [pc, #228]	@ (8003084 <HAL_DMA_Init+0x430>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01d      	beq.n	8002fde <HAL_DMA_Init+0x38a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a38      	ldr	r2, [pc, #224]	@ (8003088 <HAL_DMA_Init+0x434>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d018      	beq.n	8002fde <HAL_DMA_Init+0x38a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a36      	ldr	r2, [pc, #216]	@ (800308c <HAL_DMA_Init+0x438>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_DMA_Init+0x38a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a35      	ldr	r2, [pc, #212]	@ (8003090 <HAL_DMA_Init+0x43c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00e      	beq.n	8002fde <HAL_DMA_Init+0x38a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a33      	ldr	r2, [pc, #204]	@ (8003094 <HAL_DMA_Init+0x440>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_DMA_Init+0x38a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a32      	ldr	r2, [pc, #200]	@ (8003098 <HAL_DMA_Init+0x444>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_DMA_Init+0x38a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a30      	ldr	r2, [pc, #192]	@ (800309c <HAL_DMA_Init+0x448>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_DMA_Init+0x38e>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_DMA_Init+0x390>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8097 	beq.w	8003118 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a24      	ldr	r2, [pc, #144]	@ (8003080 <HAL_DMA_Init+0x42c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d021      	beq.n	8003038 <HAL_DMA_Init+0x3e4>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a22      	ldr	r2, [pc, #136]	@ (8003084 <HAL_DMA_Init+0x430>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d01c      	beq.n	8003038 <HAL_DMA_Init+0x3e4>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a21      	ldr	r2, [pc, #132]	@ (8003088 <HAL_DMA_Init+0x434>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d017      	beq.n	8003038 <HAL_DMA_Init+0x3e4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a1f      	ldr	r2, [pc, #124]	@ (800308c <HAL_DMA_Init+0x438>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d012      	beq.n	8003038 <HAL_DMA_Init+0x3e4>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1e      	ldr	r2, [pc, #120]	@ (8003090 <HAL_DMA_Init+0x43c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00d      	beq.n	8003038 <HAL_DMA_Init+0x3e4>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1c      	ldr	r2, [pc, #112]	@ (8003094 <HAL_DMA_Init+0x440>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d008      	beq.n	8003038 <HAL_DMA_Init+0x3e4>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1b      	ldr	r2, [pc, #108]	@ (8003098 <HAL_DMA_Init+0x444>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d003      	beq.n	8003038 <HAL_DMA_Init+0x3e4>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a19      	ldr	r2, [pc, #100]	@ (800309c <HAL_DMA_Init+0x448>)
 8003036:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4b13      	ldr	r3, [pc, #76]	@ (80030a0 <HAL_DMA_Init+0x44c>)
 8003054:	4013      	ands	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b40      	cmp	r3, #64	@ 0x40
 800305e:	d021      	beq.n	80030a4 <HAL_DMA_Init+0x450>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b80      	cmp	r3, #128	@ 0x80
 8003066:	d102      	bne.n	800306e <HAL_DMA_Init+0x41a>
 8003068:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800306c:	e01b      	b.n	80030a6 <HAL_DMA_Init+0x452>
 800306e:	2300      	movs	r3, #0
 8003070:	e019      	b.n	80030a6 <HAL_DMA_Init+0x452>
 8003072:	bf00      	nop
 8003074:	fe10803f 	.word	0xfe10803f
 8003078:	5c001000 	.word	0x5c001000
 800307c:	ffff0000 	.word	0xffff0000
 8003080:	58025408 	.word	0x58025408
 8003084:	5802541c 	.word	0x5802541c
 8003088:	58025430 	.word	0x58025430
 800308c:	58025444 	.word	0x58025444
 8003090:	58025458 	.word	0x58025458
 8003094:	5802546c 	.word	0x5802546c
 8003098:	58025480 	.word	0x58025480
 800309c:	58025494 	.word	0x58025494
 80030a0:	fffe000f 	.word	0xfffe000f
 80030a4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68d2      	ldr	r2, [r2, #12]
 80030aa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030d4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	4b6e      	ldr	r3, [pc, #440]	@ (80032a4 <HAL_DMA_Init+0x650>)
 80030ec:	4413      	add	r3, r2
 80030ee:	4a6e      	ldr	r2, [pc, #440]	@ (80032a8 <HAL_DMA_Init+0x654>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	009a      	lsls	r2, r3, #2
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f001 fda1 	bl	8004c44 <DMA_CalcBaseAndBitshift>
 8003102:	4603      	mov	r3, r0
 8003104:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	2201      	movs	r2, #1
 8003110:	409a      	lsls	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	e008      	b.n	800312a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2240      	movs	r2, #64	@ 0x40
 800311c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2203      	movs	r2, #3
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0b7      	b.n	800329a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a5f      	ldr	r2, [pc, #380]	@ (80032ac <HAL_DMA_Init+0x658>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d072      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a5d      	ldr	r2, [pc, #372]	@ (80032b0 <HAL_DMA_Init+0x65c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d06d      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5c      	ldr	r2, [pc, #368]	@ (80032b4 <HAL_DMA_Init+0x660>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d068      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a5a      	ldr	r2, [pc, #360]	@ (80032b8 <HAL_DMA_Init+0x664>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d063      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a59      	ldr	r2, [pc, #356]	@ (80032bc <HAL_DMA_Init+0x668>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d05e      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a57      	ldr	r2, [pc, #348]	@ (80032c0 <HAL_DMA_Init+0x66c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d059      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a56      	ldr	r2, [pc, #344]	@ (80032c4 <HAL_DMA_Init+0x670>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d054      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a54      	ldr	r2, [pc, #336]	@ (80032c8 <HAL_DMA_Init+0x674>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d04f      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a53      	ldr	r2, [pc, #332]	@ (80032cc <HAL_DMA_Init+0x678>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d04a      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a51      	ldr	r2, [pc, #324]	@ (80032d0 <HAL_DMA_Init+0x67c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d045      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a50      	ldr	r2, [pc, #320]	@ (80032d4 <HAL_DMA_Init+0x680>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d040      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a4e      	ldr	r2, [pc, #312]	@ (80032d8 <HAL_DMA_Init+0x684>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d03b      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a4d      	ldr	r2, [pc, #308]	@ (80032dc <HAL_DMA_Init+0x688>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d036      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a4b      	ldr	r2, [pc, #300]	@ (80032e0 <HAL_DMA_Init+0x68c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d031      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a4a      	ldr	r2, [pc, #296]	@ (80032e4 <HAL_DMA_Init+0x690>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d02c      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a48      	ldr	r2, [pc, #288]	@ (80032e8 <HAL_DMA_Init+0x694>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d027      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a47      	ldr	r2, [pc, #284]	@ (80032ec <HAL_DMA_Init+0x698>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d022      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a45      	ldr	r2, [pc, #276]	@ (80032f0 <HAL_DMA_Init+0x69c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01d      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a44      	ldr	r2, [pc, #272]	@ (80032f4 <HAL_DMA_Init+0x6a0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d018      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a42      	ldr	r2, [pc, #264]	@ (80032f8 <HAL_DMA_Init+0x6a4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a41      	ldr	r2, [pc, #260]	@ (80032fc <HAL_DMA_Init+0x6a8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00e      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a3f      	ldr	r2, [pc, #252]	@ (8003300 <HAL_DMA_Init+0x6ac>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a3e      	ldr	r2, [pc, #248]	@ (8003304 <HAL_DMA_Init+0x6b0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_DMA_Init+0x5c6>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a3c      	ldr	r2, [pc, #240]	@ (8003308 <HAL_DMA_Init+0x6b4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_DMA_Init+0x5ca>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <HAL_DMA_Init+0x5cc>
 800321e:	2300      	movs	r3, #0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d032      	beq.n	800328a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f001 fe3b 	bl	8004ea0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b80      	cmp	r3, #128	@ 0x80
 8003230:	d102      	bne.n	8003238 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800324c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d010      	beq.n	8003278 <HAL_DMA_Init+0x624>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b08      	cmp	r3, #8
 800325c:	d80c      	bhi.n	8003278 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f001 feb8 	bl	8004fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	e008      	b.n	800328a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	a7fdabf8 	.word	0xa7fdabf8
 80032a8:	cccccccd 	.word	0xcccccccd
 80032ac:	40020010 	.word	0x40020010
 80032b0:	40020028 	.word	0x40020028
 80032b4:	40020040 	.word	0x40020040
 80032b8:	40020058 	.word	0x40020058
 80032bc:	40020070 	.word	0x40020070
 80032c0:	40020088 	.word	0x40020088
 80032c4:	400200a0 	.word	0x400200a0
 80032c8:	400200b8 	.word	0x400200b8
 80032cc:	40020410 	.word	0x40020410
 80032d0:	40020428 	.word	0x40020428
 80032d4:	40020440 	.word	0x40020440
 80032d8:	40020458 	.word	0x40020458
 80032dc:	40020470 	.word	0x40020470
 80032e0:	40020488 	.word	0x40020488
 80032e4:	400204a0 	.word	0x400204a0
 80032e8:	400204b8 	.word	0x400204b8
 80032ec:	58025408 	.word	0x58025408
 80032f0:	5802541c 	.word	0x5802541c
 80032f4:	58025430 	.word	0x58025430
 80032f8:	58025444 	.word	0x58025444
 80032fc:	58025458 	.word	0x58025458
 8003300:	5802546c 	.word	0x5802546c
 8003304:	58025480 	.word	0x58025480
 8003308:	58025494 	.word	0x58025494

0800330c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003314:	f7ff f942 	bl	800259c <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e2dc      	b.n	80038de <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d008      	beq.n	8003342 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2280      	movs	r2, #128	@ 0x80
 8003334:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e2cd      	b.n	80038de <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a76      	ldr	r2, [pc, #472]	@ (8003520 <HAL_DMA_Abort+0x214>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d04a      	beq.n	80033e2 <HAL_DMA_Abort+0xd6>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a74      	ldr	r2, [pc, #464]	@ (8003524 <HAL_DMA_Abort+0x218>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d045      	beq.n	80033e2 <HAL_DMA_Abort+0xd6>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a73      	ldr	r2, [pc, #460]	@ (8003528 <HAL_DMA_Abort+0x21c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d040      	beq.n	80033e2 <HAL_DMA_Abort+0xd6>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a71      	ldr	r2, [pc, #452]	@ (800352c <HAL_DMA_Abort+0x220>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d03b      	beq.n	80033e2 <HAL_DMA_Abort+0xd6>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a70      	ldr	r2, [pc, #448]	@ (8003530 <HAL_DMA_Abort+0x224>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d036      	beq.n	80033e2 <HAL_DMA_Abort+0xd6>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a6e      	ldr	r2, [pc, #440]	@ (8003534 <HAL_DMA_Abort+0x228>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d031      	beq.n	80033e2 <HAL_DMA_Abort+0xd6>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6d      	ldr	r2, [pc, #436]	@ (8003538 <HAL_DMA_Abort+0x22c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d02c      	beq.n	80033e2 <HAL_DMA_Abort+0xd6>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a6b      	ldr	r2, [pc, #428]	@ (800353c <HAL_DMA_Abort+0x230>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d027      	beq.n	80033e2 <HAL_DMA_Abort+0xd6>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6a      	ldr	r2, [pc, #424]	@ (8003540 <HAL_DMA_Abort+0x234>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d022      	beq.n	80033e2 <HAL_DMA_Abort+0xd6>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a68      	ldr	r2, [pc, #416]	@ (8003544 <HAL_DMA_Abort+0x238>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01d      	beq.n	80033e2 <HAL_DMA_Abort+0xd6>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a67      	ldr	r2, [pc, #412]	@ (8003548 <HAL_DMA_Abort+0x23c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d018      	beq.n	80033e2 <HAL_DMA_Abort+0xd6>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a65      	ldr	r2, [pc, #404]	@ (800354c <HAL_DMA_Abort+0x240>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_DMA_Abort+0xd6>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a64      	ldr	r2, [pc, #400]	@ (8003550 <HAL_DMA_Abort+0x244>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_DMA_Abort+0xd6>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a62      	ldr	r2, [pc, #392]	@ (8003554 <HAL_DMA_Abort+0x248>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_DMA_Abort+0xd6>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a61      	ldr	r2, [pc, #388]	@ (8003558 <HAL_DMA_Abort+0x24c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_DMA_Abort+0xd6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a5f      	ldr	r2, [pc, #380]	@ (800355c <HAL_DMA_Abort+0x250>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <HAL_DMA_Abort+0xda>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_DMA_Abort+0xdc>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d013      	beq.n	8003414 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 021e 	bic.w	r2, r2, #30
 80033fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800340a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	e00a      	b.n	800342a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 020e 	bic.w	r2, r2, #14
 8003422:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a3c      	ldr	r2, [pc, #240]	@ (8003520 <HAL_DMA_Abort+0x214>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d072      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a3a      	ldr	r2, [pc, #232]	@ (8003524 <HAL_DMA_Abort+0x218>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d06d      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a39      	ldr	r2, [pc, #228]	@ (8003528 <HAL_DMA_Abort+0x21c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d068      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a37      	ldr	r2, [pc, #220]	@ (800352c <HAL_DMA_Abort+0x220>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d063      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a36      	ldr	r2, [pc, #216]	@ (8003530 <HAL_DMA_Abort+0x224>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d05e      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a34      	ldr	r2, [pc, #208]	@ (8003534 <HAL_DMA_Abort+0x228>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d059      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a33      	ldr	r2, [pc, #204]	@ (8003538 <HAL_DMA_Abort+0x22c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d054      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a31      	ldr	r2, [pc, #196]	@ (800353c <HAL_DMA_Abort+0x230>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d04f      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a30      	ldr	r2, [pc, #192]	@ (8003540 <HAL_DMA_Abort+0x234>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d04a      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a2e      	ldr	r2, [pc, #184]	@ (8003544 <HAL_DMA_Abort+0x238>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d045      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a2d      	ldr	r2, [pc, #180]	@ (8003548 <HAL_DMA_Abort+0x23c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d040      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a2b      	ldr	r2, [pc, #172]	@ (800354c <HAL_DMA_Abort+0x240>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d03b      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003550 <HAL_DMA_Abort+0x244>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d036      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a28      	ldr	r2, [pc, #160]	@ (8003554 <HAL_DMA_Abort+0x248>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d031      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a27      	ldr	r2, [pc, #156]	@ (8003558 <HAL_DMA_Abort+0x24c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d02c      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a25      	ldr	r2, [pc, #148]	@ (800355c <HAL_DMA_Abort+0x250>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d027      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a24      	ldr	r2, [pc, #144]	@ (8003560 <HAL_DMA_Abort+0x254>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d022      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a22      	ldr	r2, [pc, #136]	@ (8003564 <HAL_DMA_Abort+0x258>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01d      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a21      	ldr	r2, [pc, #132]	@ (8003568 <HAL_DMA_Abort+0x25c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d018      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1f      	ldr	r2, [pc, #124]	@ (800356c <HAL_DMA_Abort+0x260>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003570 <HAL_DMA_Abort+0x264>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00e      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1c      	ldr	r2, [pc, #112]	@ (8003574 <HAL_DMA_Abort+0x268>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d009      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1b      	ldr	r2, [pc, #108]	@ (8003578 <HAL_DMA_Abort+0x26c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d004      	beq.n	800351a <HAL_DMA_Abort+0x20e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a19      	ldr	r2, [pc, #100]	@ (800357c <HAL_DMA_Abort+0x270>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d132      	bne.n	8003580 <HAL_DMA_Abort+0x274>
 800351a:	2301      	movs	r3, #1
 800351c:	e031      	b.n	8003582 <HAL_DMA_Abort+0x276>
 800351e:	bf00      	nop
 8003520:	40020010 	.word	0x40020010
 8003524:	40020028 	.word	0x40020028
 8003528:	40020040 	.word	0x40020040
 800352c:	40020058 	.word	0x40020058
 8003530:	40020070 	.word	0x40020070
 8003534:	40020088 	.word	0x40020088
 8003538:	400200a0 	.word	0x400200a0
 800353c:	400200b8 	.word	0x400200b8
 8003540:	40020410 	.word	0x40020410
 8003544:	40020428 	.word	0x40020428
 8003548:	40020440 	.word	0x40020440
 800354c:	40020458 	.word	0x40020458
 8003550:	40020470 	.word	0x40020470
 8003554:	40020488 	.word	0x40020488
 8003558:	400204a0 	.word	0x400204a0
 800355c:	400204b8 	.word	0x400204b8
 8003560:	58025408 	.word	0x58025408
 8003564:	5802541c 	.word	0x5802541c
 8003568:	58025430 	.word	0x58025430
 800356c:	58025444 	.word	0x58025444
 8003570:	58025458 	.word	0x58025458
 8003574:	5802546c 	.word	0x5802546c
 8003578:	58025480 	.word	0x58025480
 800357c:	58025494 	.word	0x58025494
 8003580:	2300      	movs	r3, #0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003594:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6d      	ldr	r2, [pc, #436]	@ (8003750 <HAL_DMA_Abort+0x444>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d04a      	beq.n	8003636 <HAL_DMA_Abort+0x32a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a6b      	ldr	r2, [pc, #428]	@ (8003754 <HAL_DMA_Abort+0x448>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d045      	beq.n	8003636 <HAL_DMA_Abort+0x32a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6a      	ldr	r2, [pc, #424]	@ (8003758 <HAL_DMA_Abort+0x44c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d040      	beq.n	8003636 <HAL_DMA_Abort+0x32a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a68      	ldr	r2, [pc, #416]	@ (800375c <HAL_DMA_Abort+0x450>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d03b      	beq.n	8003636 <HAL_DMA_Abort+0x32a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a67      	ldr	r2, [pc, #412]	@ (8003760 <HAL_DMA_Abort+0x454>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d036      	beq.n	8003636 <HAL_DMA_Abort+0x32a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a65      	ldr	r2, [pc, #404]	@ (8003764 <HAL_DMA_Abort+0x458>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d031      	beq.n	8003636 <HAL_DMA_Abort+0x32a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a64      	ldr	r2, [pc, #400]	@ (8003768 <HAL_DMA_Abort+0x45c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d02c      	beq.n	8003636 <HAL_DMA_Abort+0x32a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a62      	ldr	r2, [pc, #392]	@ (800376c <HAL_DMA_Abort+0x460>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d027      	beq.n	8003636 <HAL_DMA_Abort+0x32a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a61      	ldr	r2, [pc, #388]	@ (8003770 <HAL_DMA_Abort+0x464>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d022      	beq.n	8003636 <HAL_DMA_Abort+0x32a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a5f      	ldr	r2, [pc, #380]	@ (8003774 <HAL_DMA_Abort+0x468>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01d      	beq.n	8003636 <HAL_DMA_Abort+0x32a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a5e      	ldr	r2, [pc, #376]	@ (8003778 <HAL_DMA_Abort+0x46c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d018      	beq.n	8003636 <HAL_DMA_Abort+0x32a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a5c      	ldr	r2, [pc, #368]	@ (800377c <HAL_DMA_Abort+0x470>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <HAL_DMA_Abort+0x32a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a5b      	ldr	r2, [pc, #364]	@ (8003780 <HAL_DMA_Abort+0x474>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00e      	beq.n	8003636 <HAL_DMA_Abort+0x32a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a59      	ldr	r2, [pc, #356]	@ (8003784 <HAL_DMA_Abort+0x478>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d009      	beq.n	8003636 <HAL_DMA_Abort+0x32a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a58      	ldr	r2, [pc, #352]	@ (8003788 <HAL_DMA_Abort+0x47c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <HAL_DMA_Abort+0x32a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a56      	ldr	r2, [pc, #344]	@ (800378c <HAL_DMA_Abort+0x480>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d108      	bne.n	8003648 <HAL_DMA_Abort+0x33c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	e007      	b.n	8003658 <HAL_DMA_Abort+0x34c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003658:	e013      	b.n	8003682 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800365a:	f7fe ff9f 	bl	800259c <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b05      	cmp	r3, #5
 8003666:	d90c      	bls.n	8003682 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2203      	movs	r2, #3
 8003672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e12d      	b.n	80038de <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e5      	bne.n	800365a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a2f      	ldr	r2, [pc, #188]	@ (8003750 <HAL_DMA_Abort+0x444>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d04a      	beq.n	800372e <HAL_DMA_Abort+0x422>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a2d      	ldr	r2, [pc, #180]	@ (8003754 <HAL_DMA_Abort+0x448>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d045      	beq.n	800372e <HAL_DMA_Abort+0x422>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003758 <HAL_DMA_Abort+0x44c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d040      	beq.n	800372e <HAL_DMA_Abort+0x422>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2a      	ldr	r2, [pc, #168]	@ (800375c <HAL_DMA_Abort+0x450>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d03b      	beq.n	800372e <HAL_DMA_Abort+0x422>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a29      	ldr	r2, [pc, #164]	@ (8003760 <HAL_DMA_Abort+0x454>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d036      	beq.n	800372e <HAL_DMA_Abort+0x422>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a27      	ldr	r2, [pc, #156]	@ (8003764 <HAL_DMA_Abort+0x458>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d031      	beq.n	800372e <HAL_DMA_Abort+0x422>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a26      	ldr	r2, [pc, #152]	@ (8003768 <HAL_DMA_Abort+0x45c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d02c      	beq.n	800372e <HAL_DMA_Abort+0x422>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a24      	ldr	r2, [pc, #144]	@ (800376c <HAL_DMA_Abort+0x460>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d027      	beq.n	800372e <HAL_DMA_Abort+0x422>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a23      	ldr	r2, [pc, #140]	@ (8003770 <HAL_DMA_Abort+0x464>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d022      	beq.n	800372e <HAL_DMA_Abort+0x422>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a21      	ldr	r2, [pc, #132]	@ (8003774 <HAL_DMA_Abort+0x468>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01d      	beq.n	800372e <HAL_DMA_Abort+0x422>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a20      	ldr	r2, [pc, #128]	@ (8003778 <HAL_DMA_Abort+0x46c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d018      	beq.n	800372e <HAL_DMA_Abort+0x422>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1e      	ldr	r2, [pc, #120]	@ (800377c <HAL_DMA_Abort+0x470>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <HAL_DMA_Abort+0x422>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1d      	ldr	r2, [pc, #116]	@ (8003780 <HAL_DMA_Abort+0x474>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00e      	beq.n	800372e <HAL_DMA_Abort+0x422>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1b      	ldr	r2, [pc, #108]	@ (8003784 <HAL_DMA_Abort+0x478>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d009      	beq.n	800372e <HAL_DMA_Abort+0x422>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1a      	ldr	r2, [pc, #104]	@ (8003788 <HAL_DMA_Abort+0x47c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d004      	beq.n	800372e <HAL_DMA_Abort+0x422>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a18      	ldr	r2, [pc, #96]	@ (800378c <HAL_DMA_Abort+0x480>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <HAL_DMA_Abort+0x426>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <HAL_DMA_Abort+0x428>
 8003732:	2300      	movs	r3, #0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d02b      	beq.n	8003790 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003742:	f003 031f 	and.w	r3, r3, #31
 8003746:	223f      	movs	r2, #63	@ 0x3f
 8003748:	409a      	lsls	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	609a      	str	r2, [r3, #8]
 800374e:	e02a      	b.n	80037a6 <HAL_DMA_Abort+0x49a>
 8003750:	40020010 	.word	0x40020010
 8003754:	40020028 	.word	0x40020028
 8003758:	40020040 	.word	0x40020040
 800375c:	40020058 	.word	0x40020058
 8003760:	40020070 	.word	0x40020070
 8003764:	40020088 	.word	0x40020088
 8003768:	400200a0 	.word	0x400200a0
 800376c:	400200b8 	.word	0x400200b8
 8003770:	40020410 	.word	0x40020410
 8003774:	40020428 	.word	0x40020428
 8003778:	40020440 	.word	0x40020440
 800377c:	40020458 	.word	0x40020458
 8003780:	40020470 	.word	0x40020470
 8003784:	40020488 	.word	0x40020488
 8003788:	400204a0 	.word	0x400204a0
 800378c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003794:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2201      	movs	r2, #1
 80037a0:	409a      	lsls	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a4f      	ldr	r2, [pc, #316]	@ (80038e8 <HAL_DMA_Abort+0x5dc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d072      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a4d      	ldr	r2, [pc, #308]	@ (80038ec <HAL_DMA_Abort+0x5e0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d06d      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a4c      	ldr	r2, [pc, #304]	@ (80038f0 <HAL_DMA_Abort+0x5e4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d068      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a4a      	ldr	r2, [pc, #296]	@ (80038f4 <HAL_DMA_Abort+0x5e8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d063      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a49      	ldr	r2, [pc, #292]	@ (80038f8 <HAL_DMA_Abort+0x5ec>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d05e      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a47      	ldr	r2, [pc, #284]	@ (80038fc <HAL_DMA_Abort+0x5f0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d059      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a46      	ldr	r2, [pc, #280]	@ (8003900 <HAL_DMA_Abort+0x5f4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d054      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a44      	ldr	r2, [pc, #272]	@ (8003904 <HAL_DMA_Abort+0x5f8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d04f      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a43      	ldr	r2, [pc, #268]	@ (8003908 <HAL_DMA_Abort+0x5fc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d04a      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a41      	ldr	r2, [pc, #260]	@ (800390c <HAL_DMA_Abort+0x600>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d045      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a40      	ldr	r2, [pc, #256]	@ (8003910 <HAL_DMA_Abort+0x604>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d040      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a3e      	ldr	r2, [pc, #248]	@ (8003914 <HAL_DMA_Abort+0x608>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d03b      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a3d      	ldr	r2, [pc, #244]	@ (8003918 <HAL_DMA_Abort+0x60c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d036      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a3b      	ldr	r2, [pc, #236]	@ (800391c <HAL_DMA_Abort+0x610>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d031      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a3a      	ldr	r2, [pc, #232]	@ (8003920 <HAL_DMA_Abort+0x614>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d02c      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a38      	ldr	r2, [pc, #224]	@ (8003924 <HAL_DMA_Abort+0x618>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d027      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a37      	ldr	r2, [pc, #220]	@ (8003928 <HAL_DMA_Abort+0x61c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d022      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a35      	ldr	r2, [pc, #212]	@ (800392c <HAL_DMA_Abort+0x620>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01d      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a34      	ldr	r2, [pc, #208]	@ (8003930 <HAL_DMA_Abort+0x624>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d018      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a32      	ldr	r2, [pc, #200]	@ (8003934 <HAL_DMA_Abort+0x628>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a31      	ldr	r2, [pc, #196]	@ (8003938 <HAL_DMA_Abort+0x62c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00e      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2f      	ldr	r2, [pc, #188]	@ (800393c <HAL_DMA_Abort+0x630>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d009      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a2e      	ldr	r2, [pc, #184]	@ (8003940 <HAL_DMA_Abort+0x634>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d004      	beq.n	8003896 <HAL_DMA_Abort+0x58a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2c      	ldr	r2, [pc, #176]	@ (8003944 <HAL_DMA_Abort+0x638>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_DMA_Abort+0x58e>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <HAL_DMA_Abort+0x590>
 800389a:	2300      	movs	r3, #0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d015      	beq.n	80038cc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80038a8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038c0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038ca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40020010 	.word	0x40020010
 80038ec:	40020028 	.word	0x40020028
 80038f0:	40020040 	.word	0x40020040
 80038f4:	40020058 	.word	0x40020058
 80038f8:	40020070 	.word	0x40020070
 80038fc:	40020088 	.word	0x40020088
 8003900:	400200a0 	.word	0x400200a0
 8003904:	400200b8 	.word	0x400200b8
 8003908:	40020410 	.word	0x40020410
 800390c:	40020428 	.word	0x40020428
 8003910:	40020440 	.word	0x40020440
 8003914:	40020458 	.word	0x40020458
 8003918:	40020470 	.word	0x40020470
 800391c:	40020488 	.word	0x40020488
 8003920:	400204a0 	.word	0x400204a0
 8003924:	400204b8 	.word	0x400204b8
 8003928:	58025408 	.word	0x58025408
 800392c:	5802541c 	.word	0x5802541c
 8003930:	58025430 	.word	0x58025430
 8003934:	58025444 	.word	0x58025444
 8003938:	58025458 	.word	0x58025458
 800393c:	5802546c 	.word	0x5802546c
 8003940:	58025480 	.word	0x58025480
 8003944:	58025494 	.word	0x58025494

08003948 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e237      	b.n	8003dca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d004      	beq.n	8003970 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2280      	movs	r2, #128	@ 0x80
 800396a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e22c      	b.n	8003dca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a5c      	ldr	r2, [pc, #368]	@ (8003ae8 <HAL_DMA_Abort_IT+0x1a0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d04a      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a5b      	ldr	r2, [pc, #364]	@ (8003aec <HAL_DMA_Abort_IT+0x1a4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d045      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a59      	ldr	r2, [pc, #356]	@ (8003af0 <HAL_DMA_Abort_IT+0x1a8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d040      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a58      	ldr	r2, [pc, #352]	@ (8003af4 <HAL_DMA_Abort_IT+0x1ac>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d03b      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a56      	ldr	r2, [pc, #344]	@ (8003af8 <HAL_DMA_Abort_IT+0x1b0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d036      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a55      	ldr	r2, [pc, #340]	@ (8003afc <HAL_DMA_Abort_IT+0x1b4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d031      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a53      	ldr	r2, [pc, #332]	@ (8003b00 <HAL_DMA_Abort_IT+0x1b8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d02c      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a52      	ldr	r2, [pc, #328]	@ (8003b04 <HAL_DMA_Abort_IT+0x1bc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d027      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a50      	ldr	r2, [pc, #320]	@ (8003b08 <HAL_DMA_Abort_IT+0x1c0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d022      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a4f      	ldr	r2, [pc, #316]	@ (8003b0c <HAL_DMA_Abort_IT+0x1c4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d01d      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003b10 <HAL_DMA_Abort_IT+0x1c8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d018      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a4c      	ldr	r2, [pc, #304]	@ (8003b14 <HAL_DMA_Abort_IT+0x1cc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d013      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003b18 <HAL_DMA_Abort_IT+0x1d0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00e      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a49      	ldr	r2, [pc, #292]	@ (8003b1c <HAL_DMA_Abort_IT+0x1d4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d009      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a47      	ldr	r2, [pc, #284]	@ (8003b20 <HAL_DMA_Abort_IT+0x1d8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d004      	beq.n	8003a10 <HAL_DMA_Abort_IT+0xc8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a46      	ldr	r2, [pc, #280]	@ (8003b24 <HAL_DMA_Abort_IT+0x1dc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d101      	bne.n	8003a14 <HAL_DMA_Abort_IT+0xcc>
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_DMA_Abort_IT+0xce>
 8003a14:	2300      	movs	r3, #0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8086 	beq.w	8003b28 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2204      	movs	r2, #4
 8003a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a2f      	ldr	r2, [pc, #188]	@ (8003ae8 <HAL_DMA_Abort_IT+0x1a0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d04a      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x17c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a2e      	ldr	r2, [pc, #184]	@ (8003aec <HAL_DMA_Abort_IT+0x1a4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d045      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x17c>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8003af0 <HAL_DMA_Abort_IT+0x1a8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d040      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x17c>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a2b      	ldr	r2, [pc, #172]	@ (8003af4 <HAL_DMA_Abort_IT+0x1ac>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d03b      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x17c>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a29      	ldr	r2, [pc, #164]	@ (8003af8 <HAL_DMA_Abort_IT+0x1b0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d036      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x17c>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a28      	ldr	r2, [pc, #160]	@ (8003afc <HAL_DMA_Abort_IT+0x1b4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d031      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x17c>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a26      	ldr	r2, [pc, #152]	@ (8003b00 <HAL_DMA_Abort_IT+0x1b8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d02c      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x17c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a25      	ldr	r2, [pc, #148]	@ (8003b04 <HAL_DMA_Abort_IT+0x1bc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d027      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x17c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a23      	ldr	r2, [pc, #140]	@ (8003b08 <HAL_DMA_Abort_IT+0x1c0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d022      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x17c>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a22      	ldr	r2, [pc, #136]	@ (8003b0c <HAL_DMA_Abort_IT+0x1c4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d01d      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x17c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a20      	ldr	r2, [pc, #128]	@ (8003b10 <HAL_DMA_Abort_IT+0x1c8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d018      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x17c>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1f      	ldr	r2, [pc, #124]	@ (8003b14 <HAL_DMA_Abort_IT+0x1cc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d013      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x17c>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b18 <HAL_DMA_Abort_IT+0x1d0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00e      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x17c>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8003b1c <HAL_DMA_Abort_IT+0x1d4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d009      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x17c>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8003b20 <HAL_DMA_Abort_IT+0x1d8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x17c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a19      	ldr	r2, [pc, #100]	@ (8003b24 <HAL_DMA_Abort_IT+0x1dc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d108      	bne.n	8003ad6 <HAL_DMA_Abort_IT+0x18e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	e178      	b.n	8003dc8 <HAL_DMA_Abort_IT+0x480>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e16f      	b.n	8003dc8 <HAL_DMA_Abort_IT+0x480>
 8003ae8:	40020010 	.word	0x40020010
 8003aec:	40020028 	.word	0x40020028
 8003af0:	40020040 	.word	0x40020040
 8003af4:	40020058 	.word	0x40020058
 8003af8:	40020070 	.word	0x40020070
 8003afc:	40020088 	.word	0x40020088
 8003b00:	400200a0 	.word	0x400200a0
 8003b04:	400200b8 	.word	0x400200b8
 8003b08:	40020410 	.word	0x40020410
 8003b0c:	40020428 	.word	0x40020428
 8003b10:	40020440 	.word	0x40020440
 8003b14:	40020458 	.word	0x40020458
 8003b18:	40020470 	.word	0x40020470
 8003b1c:	40020488 	.word	0x40020488
 8003b20:	400204a0 	.word	0x400204a0
 8003b24:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 020e 	bic.w	r2, r2, #14
 8003b36:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a6c      	ldr	r2, [pc, #432]	@ (8003cf0 <HAL_DMA_Abort_IT+0x3a8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d04a      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x290>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a6b      	ldr	r2, [pc, #428]	@ (8003cf4 <HAL_DMA_Abort_IT+0x3ac>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d045      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x290>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a69      	ldr	r2, [pc, #420]	@ (8003cf8 <HAL_DMA_Abort_IT+0x3b0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d040      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x290>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a68      	ldr	r2, [pc, #416]	@ (8003cfc <HAL_DMA_Abort_IT+0x3b4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d03b      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x290>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a66      	ldr	r2, [pc, #408]	@ (8003d00 <HAL_DMA_Abort_IT+0x3b8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d036      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x290>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a65      	ldr	r2, [pc, #404]	@ (8003d04 <HAL_DMA_Abort_IT+0x3bc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d031      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x290>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a63      	ldr	r2, [pc, #396]	@ (8003d08 <HAL_DMA_Abort_IT+0x3c0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d02c      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x290>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a62      	ldr	r2, [pc, #392]	@ (8003d0c <HAL_DMA_Abort_IT+0x3c4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d027      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x290>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a60      	ldr	r2, [pc, #384]	@ (8003d10 <HAL_DMA_Abort_IT+0x3c8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d022      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x290>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a5f      	ldr	r2, [pc, #380]	@ (8003d14 <HAL_DMA_Abort_IT+0x3cc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d01d      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x290>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a5d      	ldr	r2, [pc, #372]	@ (8003d18 <HAL_DMA_Abort_IT+0x3d0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d018      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x290>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a5c      	ldr	r2, [pc, #368]	@ (8003d1c <HAL_DMA_Abort_IT+0x3d4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d013      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x290>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a5a      	ldr	r2, [pc, #360]	@ (8003d20 <HAL_DMA_Abort_IT+0x3d8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00e      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x290>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a59      	ldr	r2, [pc, #356]	@ (8003d24 <HAL_DMA_Abort_IT+0x3dc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d009      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x290>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a57      	ldr	r2, [pc, #348]	@ (8003d28 <HAL_DMA_Abort_IT+0x3e0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d004      	beq.n	8003bd8 <HAL_DMA_Abort_IT+0x290>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a56      	ldr	r2, [pc, #344]	@ (8003d2c <HAL_DMA_Abort_IT+0x3e4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d108      	bne.n	8003bea <HAL_DMA_Abort_IT+0x2a2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	e007      	b.n	8003bfa <HAL_DMA_Abort_IT+0x2b2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0201 	bic.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a3c      	ldr	r2, [pc, #240]	@ (8003cf0 <HAL_DMA_Abort_IT+0x3a8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d072      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a3a      	ldr	r2, [pc, #232]	@ (8003cf4 <HAL_DMA_Abort_IT+0x3ac>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d06d      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a39      	ldr	r2, [pc, #228]	@ (8003cf8 <HAL_DMA_Abort_IT+0x3b0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d068      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a37      	ldr	r2, [pc, #220]	@ (8003cfc <HAL_DMA_Abort_IT+0x3b4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d063      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a36      	ldr	r2, [pc, #216]	@ (8003d00 <HAL_DMA_Abort_IT+0x3b8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d05e      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a34      	ldr	r2, [pc, #208]	@ (8003d04 <HAL_DMA_Abort_IT+0x3bc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d059      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a33      	ldr	r2, [pc, #204]	@ (8003d08 <HAL_DMA_Abort_IT+0x3c0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d054      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a31      	ldr	r2, [pc, #196]	@ (8003d0c <HAL_DMA_Abort_IT+0x3c4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d04f      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a30      	ldr	r2, [pc, #192]	@ (8003d10 <HAL_DMA_Abort_IT+0x3c8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d04a      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a2e      	ldr	r2, [pc, #184]	@ (8003d14 <HAL_DMA_Abort_IT+0x3cc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d045      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a2d      	ldr	r2, [pc, #180]	@ (8003d18 <HAL_DMA_Abort_IT+0x3d0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d040      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a2b      	ldr	r2, [pc, #172]	@ (8003d1c <HAL_DMA_Abort_IT+0x3d4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d03b      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a2a      	ldr	r2, [pc, #168]	@ (8003d20 <HAL_DMA_Abort_IT+0x3d8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d036      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a28      	ldr	r2, [pc, #160]	@ (8003d24 <HAL_DMA_Abort_IT+0x3dc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d031      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a27      	ldr	r2, [pc, #156]	@ (8003d28 <HAL_DMA_Abort_IT+0x3e0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d02c      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a25      	ldr	r2, [pc, #148]	@ (8003d2c <HAL_DMA_Abort_IT+0x3e4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d027      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a24      	ldr	r2, [pc, #144]	@ (8003d30 <HAL_DMA_Abort_IT+0x3e8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d022      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a22      	ldr	r2, [pc, #136]	@ (8003d34 <HAL_DMA_Abort_IT+0x3ec>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d01d      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a21      	ldr	r2, [pc, #132]	@ (8003d38 <HAL_DMA_Abort_IT+0x3f0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d018      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <HAL_DMA_Abort_IT+0x3f4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8003d40 <HAL_DMA_Abort_IT+0x3f8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00e      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d44 <HAL_DMA_Abort_IT+0x3fc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d009      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1b      	ldr	r2, [pc, #108]	@ (8003d48 <HAL_DMA_Abort_IT+0x400>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d004      	beq.n	8003cea <HAL_DMA_Abort_IT+0x3a2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a19      	ldr	r2, [pc, #100]	@ (8003d4c <HAL_DMA_Abort_IT+0x404>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d132      	bne.n	8003d50 <HAL_DMA_Abort_IT+0x408>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e031      	b.n	8003d52 <HAL_DMA_Abort_IT+0x40a>
 8003cee:	bf00      	nop
 8003cf0:	40020010 	.word	0x40020010
 8003cf4:	40020028 	.word	0x40020028
 8003cf8:	40020040 	.word	0x40020040
 8003cfc:	40020058 	.word	0x40020058
 8003d00:	40020070 	.word	0x40020070
 8003d04:	40020088 	.word	0x40020088
 8003d08:	400200a0 	.word	0x400200a0
 8003d0c:	400200b8 	.word	0x400200b8
 8003d10:	40020410 	.word	0x40020410
 8003d14:	40020428 	.word	0x40020428
 8003d18:	40020440 	.word	0x40020440
 8003d1c:	40020458 	.word	0x40020458
 8003d20:	40020470 	.word	0x40020470
 8003d24:	40020488 	.word	0x40020488
 8003d28:	400204a0 	.word	0x400204a0
 8003d2c:	400204b8 	.word	0x400204b8
 8003d30:	58025408 	.word	0x58025408
 8003d34:	5802541c 	.word	0x5802541c
 8003d38:	58025430 	.word	0x58025430
 8003d3c:	58025444 	.word	0x58025444
 8003d40:	58025458 	.word	0x58025458
 8003d44:	5802546c 	.word	0x5802546c
 8003d48:	58025480 	.word	0x58025480
 8003d4c:	58025494 	.word	0x58025494
 8003d50:	2300      	movs	r3, #0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d028      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d64:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	2201      	movs	r2, #1
 8003d76:	409a      	lsls	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d84:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00c      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d9c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003da6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop

08003dd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	@ 0x28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003de0:	4b67      	ldr	r3, [pc, #412]	@ (8003f80 <HAL_DMA_IRQHandler+0x1ac>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a67      	ldr	r2, [pc, #412]	@ (8003f84 <HAL_DMA_IRQHandler+0x1b0>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	0a9b      	lsrs	r3, r3, #10
 8003dec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a5f      	ldr	r2, [pc, #380]	@ (8003f88 <HAL_DMA_IRQHandler+0x1b4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d04a      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xd2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a5d      	ldr	r2, [pc, #372]	@ (8003f8c <HAL_DMA_IRQHandler+0x1b8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d045      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xd2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a5c      	ldr	r2, [pc, #368]	@ (8003f90 <HAL_DMA_IRQHandler+0x1bc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d040      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xd2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a5a      	ldr	r2, [pc, #360]	@ (8003f94 <HAL_DMA_IRQHandler+0x1c0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d03b      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xd2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a59      	ldr	r2, [pc, #356]	@ (8003f98 <HAL_DMA_IRQHandler+0x1c4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d036      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xd2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a57      	ldr	r2, [pc, #348]	@ (8003f9c <HAL_DMA_IRQHandler+0x1c8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d031      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xd2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a56      	ldr	r2, [pc, #344]	@ (8003fa0 <HAL_DMA_IRQHandler+0x1cc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d02c      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xd2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a54      	ldr	r2, [pc, #336]	@ (8003fa4 <HAL_DMA_IRQHandler+0x1d0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d027      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xd2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a53      	ldr	r2, [pc, #332]	@ (8003fa8 <HAL_DMA_IRQHandler+0x1d4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d022      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xd2>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a51      	ldr	r2, [pc, #324]	@ (8003fac <HAL_DMA_IRQHandler+0x1d8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d01d      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xd2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a50      	ldr	r2, [pc, #320]	@ (8003fb0 <HAL_DMA_IRQHandler+0x1dc>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d018      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xd2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a4e      	ldr	r2, [pc, #312]	@ (8003fb4 <HAL_DMA_IRQHandler+0x1e0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xd2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a4d      	ldr	r2, [pc, #308]	@ (8003fb8 <HAL_DMA_IRQHandler+0x1e4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00e      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xd2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a4b      	ldr	r2, [pc, #300]	@ (8003fbc <HAL_DMA_IRQHandler+0x1e8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d009      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xd2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a4a      	ldr	r2, [pc, #296]	@ (8003fc0 <HAL_DMA_IRQHandler+0x1ec>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d004      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xd2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a48      	ldr	r2, [pc, #288]	@ (8003fc4 <HAL_DMA_IRQHandler+0x1f0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d101      	bne.n	8003eaa <HAL_DMA_IRQHandler+0xd6>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <HAL_DMA_IRQHandler+0xd8>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 842b 	beq.w	8004708 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb6:	f003 031f 	and.w	r3, r3, #31
 8003eba:	2208      	movs	r2, #8
 8003ebc:	409a      	lsls	r2, r3
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 80a2 	beq.w	800400c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8003f88 <HAL_DMA_IRQHandler+0x1b4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d04a      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x194>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8003f8c <HAL_DMA_IRQHandler+0x1b8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d045      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x194>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f90 <HAL_DMA_IRQHandler+0x1bc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d040      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x194>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a2a      	ldr	r2, [pc, #168]	@ (8003f94 <HAL_DMA_IRQHandler+0x1c0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d03b      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x194>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a28      	ldr	r2, [pc, #160]	@ (8003f98 <HAL_DMA_IRQHandler+0x1c4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d036      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x194>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a27      	ldr	r2, [pc, #156]	@ (8003f9c <HAL_DMA_IRQHandler+0x1c8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d031      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x194>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a25      	ldr	r2, [pc, #148]	@ (8003fa0 <HAL_DMA_IRQHandler+0x1cc>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d02c      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x194>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a24      	ldr	r2, [pc, #144]	@ (8003fa4 <HAL_DMA_IRQHandler+0x1d0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d027      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x194>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a22      	ldr	r2, [pc, #136]	@ (8003fa8 <HAL_DMA_IRQHandler+0x1d4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d022      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x194>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a21      	ldr	r2, [pc, #132]	@ (8003fac <HAL_DMA_IRQHandler+0x1d8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d01d      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x194>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb0 <HAL_DMA_IRQHandler+0x1dc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d018      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x194>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb4 <HAL_DMA_IRQHandler+0x1e0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d013      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x194>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1c      	ldr	r2, [pc, #112]	@ (8003fb8 <HAL_DMA_IRQHandler+0x1e4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00e      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x194>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003fbc <HAL_DMA_IRQHandler+0x1e8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d009      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x194>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a19      	ldr	r2, [pc, #100]	@ (8003fc0 <HAL_DMA_IRQHandler+0x1ec>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d004      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x194>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a18      	ldr	r2, [pc, #96]	@ (8003fc4 <HAL_DMA_IRQHandler+0x1f0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d12f      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x1f4>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bf14      	ite	ne
 8003f76:	2301      	movne	r3, #1
 8003f78:	2300      	moveq	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	e02e      	b.n	8003fdc <HAL_DMA_IRQHandler+0x208>
 8003f7e:	bf00      	nop
 8003f80:	24000018 	.word	0x24000018
 8003f84:	1b4e81b5 	.word	0x1b4e81b5
 8003f88:	40020010 	.word	0x40020010
 8003f8c:	40020028 	.word	0x40020028
 8003f90:	40020040 	.word	0x40020040
 8003f94:	40020058 	.word	0x40020058
 8003f98:	40020070 	.word	0x40020070
 8003f9c:	40020088 	.word	0x40020088
 8003fa0:	400200a0 	.word	0x400200a0
 8003fa4:	400200b8 	.word	0x400200b8
 8003fa8:	40020410 	.word	0x40020410
 8003fac:	40020428 	.word	0x40020428
 8003fb0:	40020440 	.word	0x40020440
 8003fb4:	40020458 	.word	0x40020458
 8003fb8:	40020470 	.word	0x40020470
 8003fbc:	40020488 	.word	0x40020488
 8003fc0:	400204a0 	.word	0x400204a0
 8003fc4:	400204b8 	.word	0x400204b8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	bf14      	ite	ne
 8003fd6:	2301      	movne	r3, #1
 8003fd8:	2300      	moveq	r3, #0
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d015      	beq.n	800400c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0204 	bic.w	r2, r2, #4
 8003fee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004004:	f043 0201 	orr.w	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	fa22 f303 	lsr.w	r3, r2, r3
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d06e      	beq.n	8004100 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a69      	ldr	r2, [pc, #420]	@ (80041cc <HAL_DMA_IRQHandler+0x3f8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d04a      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2ee>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a67      	ldr	r2, [pc, #412]	@ (80041d0 <HAL_DMA_IRQHandler+0x3fc>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d045      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2ee>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a66      	ldr	r2, [pc, #408]	@ (80041d4 <HAL_DMA_IRQHandler+0x400>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d040      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2ee>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a64      	ldr	r2, [pc, #400]	@ (80041d8 <HAL_DMA_IRQHandler+0x404>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d03b      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2ee>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a63      	ldr	r2, [pc, #396]	@ (80041dc <HAL_DMA_IRQHandler+0x408>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d036      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2ee>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a61      	ldr	r2, [pc, #388]	@ (80041e0 <HAL_DMA_IRQHandler+0x40c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d031      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2ee>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a60      	ldr	r2, [pc, #384]	@ (80041e4 <HAL_DMA_IRQHandler+0x410>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d02c      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2ee>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a5e      	ldr	r2, [pc, #376]	@ (80041e8 <HAL_DMA_IRQHandler+0x414>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d027      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2ee>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a5d      	ldr	r2, [pc, #372]	@ (80041ec <HAL_DMA_IRQHandler+0x418>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d022      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2ee>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a5b      	ldr	r2, [pc, #364]	@ (80041f0 <HAL_DMA_IRQHandler+0x41c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01d      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2ee>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a5a      	ldr	r2, [pc, #360]	@ (80041f4 <HAL_DMA_IRQHandler+0x420>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d018      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2ee>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a58      	ldr	r2, [pc, #352]	@ (80041f8 <HAL_DMA_IRQHandler+0x424>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d013      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2ee>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a57      	ldr	r2, [pc, #348]	@ (80041fc <HAL_DMA_IRQHandler+0x428>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00e      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2ee>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a55      	ldr	r2, [pc, #340]	@ (8004200 <HAL_DMA_IRQHandler+0x42c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d009      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2ee>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a54      	ldr	r2, [pc, #336]	@ (8004204 <HAL_DMA_IRQHandler+0x430>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x2ee>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a52      	ldr	r2, [pc, #328]	@ (8004208 <HAL_DMA_IRQHandler+0x434>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d10a      	bne.n	80040d8 <HAL_DMA_IRQHandler+0x304>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	bf14      	ite	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	2300      	moveq	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	e003      	b.n	80040e0 <HAL_DMA_IRQHandler+0x30c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2300      	movs	r3, #0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00d      	beq.n	8004100 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e8:	f003 031f 	and.w	r3, r3, #31
 80040ec:	2201      	movs	r2, #1
 80040ee:	409a      	lsls	r2, r3
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f8:	f043 0202 	orr.w	r2, r3, #2
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	2204      	movs	r2, #4
 800410a:	409a      	lsls	r2, r3
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 808f 	beq.w	8004234 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a2c      	ldr	r2, [pc, #176]	@ (80041cc <HAL_DMA_IRQHandler+0x3f8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d04a      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x3e2>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2a      	ldr	r2, [pc, #168]	@ (80041d0 <HAL_DMA_IRQHandler+0x3fc>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d045      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x3e2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a29      	ldr	r2, [pc, #164]	@ (80041d4 <HAL_DMA_IRQHandler+0x400>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d040      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x3e2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a27      	ldr	r2, [pc, #156]	@ (80041d8 <HAL_DMA_IRQHandler+0x404>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d03b      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x3e2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a26      	ldr	r2, [pc, #152]	@ (80041dc <HAL_DMA_IRQHandler+0x408>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d036      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x3e2>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a24      	ldr	r2, [pc, #144]	@ (80041e0 <HAL_DMA_IRQHandler+0x40c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d031      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x3e2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a23      	ldr	r2, [pc, #140]	@ (80041e4 <HAL_DMA_IRQHandler+0x410>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d02c      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x3e2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a21      	ldr	r2, [pc, #132]	@ (80041e8 <HAL_DMA_IRQHandler+0x414>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d027      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x3e2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a20      	ldr	r2, [pc, #128]	@ (80041ec <HAL_DMA_IRQHandler+0x418>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d022      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x3e2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1e      	ldr	r2, [pc, #120]	@ (80041f0 <HAL_DMA_IRQHandler+0x41c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01d      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x3e2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1d      	ldr	r2, [pc, #116]	@ (80041f4 <HAL_DMA_IRQHandler+0x420>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d018      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x3e2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1b      	ldr	r2, [pc, #108]	@ (80041f8 <HAL_DMA_IRQHandler+0x424>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x3e2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1a      	ldr	r2, [pc, #104]	@ (80041fc <HAL_DMA_IRQHandler+0x428>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00e      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x3e2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a18      	ldr	r2, [pc, #96]	@ (8004200 <HAL_DMA_IRQHandler+0x42c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d009      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x3e2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a17      	ldr	r2, [pc, #92]	@ (8004204 <HAL_DMA_IRQHandler+0x430>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d004      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x3e2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a15      	ldr	r2, [pc, #84]	@ (8004208 <HAL_DMA_IRQHandler+0x434>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d12a      	bne.n	800420c <HAL_DMA_IRQHandler+0x438>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	e023      	b.n	8004214 <HAL_DMA_IRQHandler+0x440>
 80041cc:	40020010 	.word	0x40020010
 80041d0:	40020028 	.word	0x40020028
 80041d4:	40020040 	.word	0x40020040
 80041d8:	40020058 	.word	0x40020058
 80041dc:	40020070 	.word	0x40020070
 80041e0:	40020088 	.word	0x40020088
 80041e4:	400200a0 	.word	0x400200a0
 80041e8:	400200b8 	.word	0x400200b8
 80041ec:	40020410 	.word	0x40020410
 80041f0:	40020428 	.word	0x40020428
 80041f4:	40020440 	.word	0x40020440
 80041f8:	40020458 	.word	0x40020458
 80041fc:	40020470 	.word	0x40020470
 8004200:	40020488 	.word	0x40020488
 8004204:	400204a0 	.word	0x400204a0
 8004208:	400204b8 	.word	0x400204b8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2300      	movs	r3, #0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00d      	beq.n	8004234 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	2204      	movs	r2, #4
 8004222:	409a      	lsls	r2, r3
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422c:	f043 0204 	orr.w	r2, r3, #4
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	2210      	movs	r2, #16
 800423e:	409a      	lsls	r2, r3
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	4013      	ands	r3, r2
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80a6 	beq.w	8004396 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a85      	ldr	r2, [pc, #532]	@ (8004464 <HAL_DMA_IRQHandler+0x690>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d04a      	beq.n	80042ea <HAL_DMA_IRQHandler+0x516>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a83      	ldr	r2, [pc, #524]	@ (8004468 <HAL_DMA_IRQHandler+0x694>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d045      	beq.n	80042ea <HAL_DMA_IRQHandler+0x516>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a82      	ldr	r2, [pc, #520]	@ (800446c <HAL_DMA_IRQHandler+0x698>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d040      	beq.n	80042ea <HAL_DMA_IRQHandler+0x516>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a80      	ldr	r2, [pc, #512]	@ (8004470 <HAL_DMA_IRQHandler+0x69c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d03b      	beq.n	80042ea <HAL_DMA_IRQHandler+0x516>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a7f      	ldr	r2, [pc, #508]	@ (8004474 <HAL_DMA_IRQHandler+0x6a0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d036      	beq.n	80042ea <HAL_DMA_IRQHandler+0x516>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a7d      	ldr	r2, [pc, #500]	@ (8004478 <HAL_DMA_IRQHandler+0x6a4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d031      	beq.n	80042ea <HAL_DMA_IRQHandler+0x516>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a7c      	ldr	r2, [pc, #496]	@ (800447c <HAL_DMA_IRQHandler+0x6a8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d02c      	beq.n	80042ea <HAL_DMA_IRQHandler+0x516>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a7a      	ldr	r2, [pc, #488]	@ (8004480 <HAL_DMA_IRQHandler+0x6ac>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d027      	beq.n	80042ea <HAL_DMA_IRQHandler+0x516>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a79      	ldr	r2, [pc, #484]	@ (8004484 <HAL_DMA_IRQHandler+0x6b0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d022      	beq.n	80042ea <HAL_DMA_IRQHandler+0x516>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a77      	ldr	r2, [pc, #476]	@ (8004488 <HAL_DMA_IRQHandler+0x6b4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01d      	beq.n	80042ea <HAL_DMA_IRQHandler+0x516>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a76      	ldr	r2, [pc, #472]	@ (800448c <HAL_DMA_IRQHandler+0x6b8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d018      	beq.n	80042ea <HAL_DMA_IRQHandler+0x516>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a74      	ldr	r2, [pc, #464]	@ (8004490 <HAL_DMA_IRQHandler+0x6bc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d013      	beq.n	80042ea <HAL_DMA_IRQHandler+0x516>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a73      	ldr	r2, [pc, #460]	@ (8004494 <HAL_DMA_IRQHandler+0x6c0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00e      	beq.n	80042ea <HAL_DMA_IRQHandler+0x516>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a71      	ldr	r2, [pc, #452]	@ (8004498 <HAL_DMA_IRQHandler+0x6c4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d009      	beq.n	80042ea <HAL_DMA_IRQHandler+0x516>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a70      	ldr	r2, [pc, #448]	@ (800449c <HAL_DMA_IRQHandler+0x6c8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d004      	beq.n	80042ea <HAL_DMA_IRQHandler+0x516>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a6e      	ldr	r2, [pc, #440]	@ (80044a0 <HAL_DMA_IRQHandler+0x6cc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d10a      	bne.n	8004300 <HAL_DMA_IRQHandler+0x52c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bf14      	ite	ne
 80042f8:	2301      	movne	r3, #1
 80042fa:	2300      	moveq	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	e009      	b.n	8004314 <HAL_DMA_IRQHandler+0x540>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf14      	ite	ne
 800430e:	2301      	movne	r3, #1
 8004310:	2300      	moveq	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d03e      	beq.n	8004396 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	2210      	movs	r2, #16
 8004322:	409a      	lsls	r2, r3
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d018      	beq.n	8004368 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d108      	bne.n	8004356 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d024      	beq.n	8004396 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	4798      	blx	r3
 8004354:	e01f      	b.n	8004396 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01b      	beq.n	8004396 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	4798      	blx	r3
 8004366:	e016      	b.n	8004396 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d107      	bne.n	8004386 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0208 	bic.w	r2, r2, #8
 8004384:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	2220      	movs	r2, #32
 80043a0:	409a      	lsls	r2, r3
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 8110 	beq.w	80045cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004464 <HAL_DMA_IRQHandler+0x690>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d04a      	beq.n	800444c <HAL_DMA_IRQHandler+0x678>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2b      	ldr	r2, [pc, #172]	@ (8004468 <HAL_DMA_IRQHandler+0x694>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d045      	beq.n	800444c <HAL_DMA_IRQHandler+0x678>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a29      	ldr	r2, [pc, #164]	@ (800446c <HAL_DMA_IRQHandler+0x698>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d040      	beq.n	800444c <HAL_DMA_IRQHandler+0x678>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a28      	ldr	r2, [pc, #160]	@ (8004470 <HAL_DMA_IRQHandler+0x69c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d03b      	beq.n	800444c <HAL_DMA_IRQHandler+0x678>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a26      	ldr	r2, [pc, #152]	@ (8004474 <HAL_DMA_IRQHandler+0x6a0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d036      	beq.n	800444c <HAL_DMA_IRQHandler+0x678>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a25      	ldr	r2, [pc, #148]	@ (8004478 <HAL_DMA_IRQHandler+0x6a4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d031      	beq.n	800444c <HAL_DMA_IRQHandler+0x678>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a23      	ldr	r2, [pc, #140]	@ (800447c <HAL_DMA_IRQHandler+0x6a8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d02c      	beq.n	800444c <HAL_DMA_IRQHandler+0x678>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a22      	ldr	r2, [pc, #136]	@ (8004480 <HAL_DMA_IRQHandler+0x6ac>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d027      	beq.n	800444c <HAL_DMA_IRQHandler+0x678>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a20      	ldr	r2, [pc, #128]	@ (8004484 <HAL_DMA_IRQHandler+0x6b0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d022      	beq.n	800444c <HAL_DMA_IRQHandler+0x678>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1f      	ldr	r2, [pc, #124]	@ (8004488 <HAL_DMA_IRQHandler+0x6b4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d01d      	beq.n	800444c <HAL_DMA_IRQHandler+0x678>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1d      	ldr	r2, [pc, #116]	@ (800448c <HAL_DMA_IRQHandler+0x6b8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d018      	beq.n	800444c <HAL_DMA_IRQHandler+0x678>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1c      	ldr	r2, [pc, #112]	@ (8004490 <HAL_DMA_IRQHandler+0x6bc>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d013      	beq.n	800444c <HAL_DMA_IRQHandler+0x678>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a1a      	ldr	r2, [pc, #104]	@ (8004494 <HAL_DMA_IRQHandler+0x6c0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00e      	beq.n	800444c <HAL_DMA_IRQHandler+0x678>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a19      	ldr	r2, [pc, #100]	@ (8004498 <HAL_DMA_IRQHandler+0x6c4>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d009      	beq.n	800444c <HAL_DMA_IRQHandler+0x678>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a17      	ldr	r2, [pc, #92]	@ (800449c <HAL_DMA_IRQHandler+0x6c8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <HAL_DMA_IRQHandler+0x678>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a16      	ldr	r2, [pc, #88]	@ (80044a0 <HAL_DMA_IRQHandler+0x6cc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d12b      	bne.n	80044a4 <HAL_DMA_IRQHandler+0x6d0>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b00      	cmp	r3, #0
 8004458:	bf14      	ite	ne
 800445a:	2301      	movne	r3, #1
 800445c:	2300      	moveq	r3, #0
 800445e:	b2db      	uxtb	r3, r3
 8004460:	e02a      	b.n	80044b8 <HAL_DMA_IRQHandler+0x6e4>
 8004462:	bf00      	nop
 8004464:	40020010 	.word	0x40020010
 8004468:	40020028 	.word	0x40020028
 800446c:	40020040 	.word	0x40020040
 8004470:	40020058 	.word	0x40020058
 8004474:	40020070 	.word	0x40020070
 8004478:	40020088 	.word	0x40020088
 800447c:	400200a0 	.word	0x400200a0
 8004480:	400200b8 	.word	0x400200b8
 8004484:	40020410 	.word	0x40020410
 8004488:	40020428 	.word	0x40020428
 800448c:	40020440 	.word	0x40020440
 8004490:	40020458 	.word	0x40020458
 8004494:	40020470 	.word	0x40020470
 8004498:	40020488 	.word	0x40020488
 800449c:	400204a0 	.word	0x400204a0
 80044a0:	400204b8 	.word	0x400204b8
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	bf14      	ite	ne
 80044b2:	2301      	movne	r3, #1
 80044b4:	2300      	moveq	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8087 	beq.w	80045cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c2:	f003 031f 	and.w	r3, r3, #31
 80044c6:	2220      	movs	r2, #32
 80044c8:	409a      	lsls	r2, r3
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d139      	bne.n	800454e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0216 	bic.w	r2, r2, #22
 80044e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d103      	bne.n	800450a <HAL_DMA_IRQHandler+0x736>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004506:	2b00      	cmp	r3, #0
 8004508:	d007      	beq.n	800451a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0208 	bic.w	r2, r2, #8
 8004518:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451e:	f003 031f 	and.w	r3, r3, #31
 8004522:	223f      	movs	r2, #63	@ 0x3f
 8004524:	409a      	lsls	r2, r3
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 834a 	beq.w	8004bd8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	4798      	blx	r3
          }
          return;
 800454c:	e344      	b.n	8004bd8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d018      	beq.n	800458e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d108      	bne.n	800457c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456e:	2b00      	cmp	r3, #0
 8004570:	d02c      	beq.n	80045cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
 800457a:	e027      	b.n	80045cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004580:	2b00      	cmp	r3, #0
 8004582:	d023      	beq.n	80045cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	4798      	blx	r3
 800458c:	e01e      	b.n	80045cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10f      	bne.n	80045bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0210 	bic.w	r2, r2, #16
 80045aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 8306 	beq.w	8004be2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 8088 	beq.w	80046f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2204      	movs	r2, #4
 80045e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a7a      	ldr	r2, [pc, #488]	@ (80047dc <HAL_DMA_IRQHandler+0xa08>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d04a      	beq.n	800468c <HAL_DMA_IRQHandler+0x8b8>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a79      	ldr	r2, [pc, #484]	@ (80047e0 <HAL_DMA_IRQHandler+0xa0c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d045      	beq.n	800468c <HAL_DMA_IRQHandler+0x8b8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a77      	ldr	r2, [pc, #476]	@ (80047e4 <HAL_DMA_IRQHandler+0xa10>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d040      	beq.n	800468c <HAL_DMA_IRQHandler+0x8b8>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a76      	ldr	r2, [pc, #472]	@ (80047e8 <HAL_DMA_IRQHandler+0xa14>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d03b      	beq.n	800468c <HAL_DMA_IRQHandler+0x8b8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a74      	ldr	r2, [pc, #464]	@ (80047ec <HAL_DMA_IRQHandler+0xa18>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d036      	beq.n	800468c <HAL_DMA_IRQHandler+0x8b8>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a73      	ldr	r2, [pc, #460]	@ (80047f0 <HAL_DMA_IRQHandler+0xa1c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d031      	beq.n	800468c <HAL_DMA_IRQHandler+0x8b8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a71      	ldr	r2, [pc, #452]	@ (80047f4 <HAL_DMA_IRQHandler+0xa20>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d02c      	beq.n	800468c <HAL_DMA_IRQHandler+0x8b8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a70      	ldr	r2, [pc, #448]	@ (80047f8 <HAL_DMA_IRQHandler+0xa24>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d027      	beq.n	800468c <HAL_DMA_IRQHandler+0x8b8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a6e      	ldr	r2, [pc, #440]	@ (80047fc <HAL_DMA_IRQHandler+0xa28>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d022      	beq.n	800468c <HAL_DMA_IRQHandler+0x8b8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a6d      	ldr	r2, [pc, #436]	@ (8004800 <HAL_DMA_IRQHandler+0xa2c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d01d      	beq.n	800468c <HAL_DMA_IRQHandler+0x8b8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a6b      	ldr	r2, [pc, #428]	@ (8004804 <HAL_DMA_IRQHandler+0xa30>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d018      	beq.n	800468c <HAL_DMA_IRQHandler+0x8b8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a6a      	ldr	r2, [pc, #424]	@ (8004808 <HAL_DMA_IRQHandler+0xa34>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d013      	beq.n	800468c <HAL_DMA_IRQHandler+0x8b8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a68      	ldr	r2, [pc, #416]	@ (800480c <HAL_DMA_IRQHandler+0xa38>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00e      	beq.n	800468c <HAL_DMA_IRQHandler+0x8b8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a67      	ldr	r2, [pc, #412]	@ (8004810 <HAL_DMA_IRQHandler+0xa3c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d009      	beq.n	800468c <HAL_DMA_IRQHandler+0x8b8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a65      	ldr	r2, [pc, #404]	@ (8004814 <HAL_DMA_IRQHandler+0xa40>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d004      	beq.n	800468c <HAL_DMA_IRQHandler+0x8b8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a64      	ldr	r2, [pc, #400]	@ (8004818 <HAL_DMA_IRQHandler+0xa44>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d108      	bne.n	800469e <HAL_DMA_IRQHandler+0x8ca>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e007      	b.n	80046ae <HAL_DMA_IRQHandler+0x8da>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0201 	bic.w	r2, r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3301      	adds	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d307      	bcc.n	80046ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f2      	bne.n	80046ae <HAL_DMA_IRQHandler+0x8da>
 80046c8:	e000      	b.n	80046cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80046ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d004      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2203      	movs	r2, #3
 80046de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80046e2:	e003      	b.n	80046ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 8272 	beq.w	8004be2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	4798      	blx	r3
 8004706:	e26c      	b.n	8004be2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a43      	ldr	r2, [pc, #268]	@ (800481c <HAL_DMA_IRQHandler+0xa48>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d022      	beq.n	8004758 <HAL_DMA_IRQHandler+0x984>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a42      	ldr	r2, [pc, #264]	@ (8004820 <HAL_DMA_IRQHandler+0xa4c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d01d      	beq.n	8004758 <HAL_DMA_IRQHandler+0x984>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a40      	ldr	r2, [pc, #256]	@ (8004824 <HAL_DMA_IRQHandler+0xa50>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d018      	beq.n	8004758 <HAL_DMA_IRQHandler+0x984>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a3f      	ldr	r2, [pc, #252]	@ (8004828 <HAL_DMA_IRQHandler+0xa54>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d013      	beq.n	8004758 <HAL_DMA_IRQHandler+0x984>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a3d      	ldr	r2, [pc, #244]	@ (800482c <HAL_DMA_IRQHandler+0xa58>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00e      	beq.n	8004758 <HAL_DMA_IRQHandler+0x984>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a3c      	ldr	r2, [pc, #240]	@ (8004830 <HAL_DMA_IRQHandler+0xa5c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d009      	beq.n	8004758 <HAL_DMA_IRQHandler+0x984>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a3a      	ldr	r2, [pc, #232]	@ (8004834 <HAL_DMA_IRQHandler+0xa60>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_DMA_IRQHandler+0x984>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a39      	ldr	r2, [pc, #228]	@ (8004838 <HAL_DMA_IRQHandler+0xa64>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d101      	bne.n	800475c <HAL_DMA_IRQHandler+0x988>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <HAL_DMA_IRQHandler+0x98a>
 800475c:	2300      	movs	r3, #0
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 823f 	beq.w	8004be2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2204      	movs	r2, #4
 8004776:	409a      	lsls	r2, r3
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80cd 	beq.w	800491c <HAL_DMA_IRQHandler+0xb48>
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 80c7 	beq.w	800491c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	2204      	movs	r2, #4
 8004798:	409a      	lsls	r2, r3
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d049      	beq.n	800483c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8210 	beq.w	8004bdc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047c4:	e20a      	b.n	8004bdc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8206 	beq.w	8004bdc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047d8:	e200      	b.n	8004bdc <HAL_DMA_IRQHandler+0xe08>
 80047da:	bf00      	nop
 80047dc:	40020010 	.word	0x40020010
 80047e0:	40020028 	.word	0x40020028
 80047e4:	40020040 	.word	0x40020040
 80047e8:	40020058 	.word	0x40020058
 80047ec:	40020070 	.word	0x40020070
 80047f0:	40020088 	.word	0x40020088
 80047f4:	400200a0 	.word	0x400200a0
 80047f8:	400200b8 	.word	0x400200b8
 80047fc:	40020410 	.word	0x40020410
 8004800:	40020428 	.word	0x40020428
 8004804:	40020440 	.word	0x40020440
 8004808:	40020458 	.word	0x40020458
 800480c:	40020470 	.word	0x40020470
 8004810:	40020488 	.word	0x40020488
 8004814:	400204a0 	.word	0x400204a0
 8004818:	400204b8 	.word	0x400204b8
 800481c:	58025408 	.word	0x58025408
 8004820:	5802541c 	.word	0x5802541c
 8004824:	58025430 	.word	0x58025430
 8004828:	58025444 	.word	0x58025444
 800482c:	58025458 	.word	0x58025458
 8004830:	5802546c 	.word	0x5802546c
 8004834:	58025480 	.word	0x58025480
 8004838:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d160      	bne.n	8004908 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a7f      	ldr	r2, [pc, #508]	@ (8004a48 <HAL_DMA_IRQHandler+0xc74>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d04a      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xb12>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a7d      	ldr	r2, [pc, #500]	@ (8004a4c <HAL_DMA_IRQHandler+0xc78>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d045      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xb12>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a50 <HAL_DMA_IRQHandler+0xc7c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d040      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xb12>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a7a      	ldr	r2, [pc, #488]	@ (8004a54 <HAL_DMA_IRQHandler+0xc80>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d03b      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xb12>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a79      	ldr	r2, [pc, #484]	@ (8004a58 <HAL_DMA_IRQHandler+0xc84>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d036      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xb12>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a77      	ldr	r2, [pc, #476]	@ (8004a5c <HAL_DMA_IRQHandler+0xc88>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d031      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xb12>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a76      	ldr	r2, [pc, #472]	@ (8004a60 <HAL_DMA_IRQHandler+0xc8c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d02c      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xb12>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a74      	ldr	r2, [pc, #464]	@ (8004a64 <HAL_DMA_IRQHandler+0xc90>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d027      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xb12>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a73      	ldr	r2, [pc, #460]	@ (8004a68 <HAL_DMA_IRQHandler+0xc94>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d022      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xb12>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a71      	ldr	r2, [pc, #452]	@ (8004a6c <HAL_DMA_IRQHandler+0xc98>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d01d      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xb12>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a70      	ldr	r2, [pc, #448]	@ (8004a70 <HAL_DMA_IRQHandler+0xc9c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d018      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xb12>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004a74 <HAL_DMA_IRQHandler+0xca0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xb12>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004a78 <HAL_DMA_IRQHandler+0xca4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00e      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xb12>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a6b      	ldr	r2, [pc, #428]	@ (8004a7c <HAL_DMA_IRQHandler+0xca8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d009      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xb12>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004a80 <HAL_DMA_IRQHandler+0xcac>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d004      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xb12>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a68      	ldr	r2, [pc, #416]	@ (8004a84 <HAL_DMA_IRQHandler+0xcb0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d108      	bne.n	80048f8 <HAL_DMA_IRQHandler+0xb24>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0208 	bic.w	r2, r2, #8
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	e007      	b.n	8004908 <HAL_DMA_IRQHandler+0xb34>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0204 	bic.w	r2, r2, #4
 8004906:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8165 	beq.w	8004bdc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800491a:	e15f      	b.n	8004bdc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	2202      	movs	r2, #2
 8004926:	409a      	lsls	r2, r3
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	4013      	ands	r3, r2
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 80c5 	beq.w	8004abc <HAL_DMA_IRQHandler+0xce8>
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 80bf 	beq.w	8004abc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004942:	f003 031f 	and.w	r3, r3, #31
 8004946:	2202      	movs	r2, #2
 8004948:	409a      	lsls	r2, r3
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d018      	beq.n	800498a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 813a 	beq.w	8004be0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004974:	e134      	b.n	8004be0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 8130 	beq.w	8004be0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004988:	e12a      	b.n	8004be0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b00      	cmp	r3, #0
 8004992:	f040 8089 	bne.w	8004aa8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a2b      	ldr	r2, [pc, #172]	@ (8004a48 <HAL_DMA_IRQHandler+0xc74>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d04a      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xc62>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a29      	ldr	r2, [pc, #164]	@ (8004a4c <HAL_DMA_IRQHandler+0xc78>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d045      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xc62>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a28      	ldr	r2, [pc, #160]	@ (8004a50 <HAL_DMA_IRQHandler+0xc7c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d040      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xc62>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a26      	ldr	r2, [pc, #152]	@ (8004a54 <HAL_DMA_IRQHandler+0xc80>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d03b      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xc62>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a25      	ldr	r2, [pc, #148]	@ (8004a58 <HAL_DMA_IRQHandler+0xc84>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d036      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xc62>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a23      	ldr	r2, [pc, #140]	@ (8004a5c <HAL_DMA_IRQHandler+0xc88>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d031      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xc62>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a22      	ldr	r2, [pc, #136]	@ (8004a60 <HAL_DMA_IRQHandler+0xc8c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d02c      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xc62>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a20      	ldr	r2, [pc, #128]	@ (8004a64 <HAL_DMA_IRQHandler+0xc90>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d027      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xc62>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004a68 <HAL_DMA_IRQHandler+0xc94>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d022      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xc62>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a6c <HAL_DMA_IRQHandler+0xc98>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01d      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xc62>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004a70 <HAL_DMA_IRQHandler+0xc9c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d018      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xc62>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1a      	ldr	r2, [pc, #104]	@ (8004a74 <HAL_DMA_IRQHandler+0xca0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xc62>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a19      	ldr	r2, [pc, #100]	@ (8004a78 <HAL_DMA_IRQHandler+0xca4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xc62>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a17      	ldr	r2, [pc, #92]	@ (8004a7c <HAL_DMA_IRQHandler+0xca8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xc62>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a16      	ldr	r2, [pc, #88]	@ (8004a80 <HAL_DMA_IRQHandler+0xcac>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xc62>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a14      	ldr	r2, [pc, #80]	@ (8004a84 <HAL_DMA_IRQHandler+0xcb0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d128      	bne.n	8004a88 <HAL_DMA_IRQHandler+0xcb4>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0214 	bic.w	r2, r2, #20
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	e027      	b.n	8004a98 <HAL_DMA_IRQHandler+0xcc4>
 8004a48:	40020010 	.word	0x40020010
 8004a4c:	40020028 	.word	0x40020028
 8004a50:	40020040 	.word	0x40020040
 8004a54:	40020058 	.word	0x40020058
 8004a58:	40020070 	.word	0x40020070
 8004a5c:	40020088 	.word	0x40020088
 8004a60:	400200a0 	.word	0x400200a0
 8004a64:	400200b8 	.word	0x400200b8
 8004a68:	40020410 	.word	0x40020410
 8004a6c:	40020428 	.word	0x40020428
 8004a70:	40020440 	.word	0x40020440
 8004a74:	40020458 	.word	0x40020458
 8004a78:	40020470 	.word	0x40020470
 8004a7c:	40020488 	.word	0x40020488
 8004a80:	400204a0 	.word	0x400204a0
 8004a84:	400204b8 	.word	0x400204b8
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 020a 	bic.w	r2, r2, #10
 8004a96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8097 	beq.w	8004be0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aba:	e091      	b.n	8004be0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8088 	beq.w	8004be2 <HAL_DMA_IRQHandler+0xe0e>
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 8082 	beq.w	8004be2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a41      	ldr	r2, [pc, #260]	@ (8004be8 <HAL_DMA_IRQHandler+0xe14>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d04a      	beq.n	8004b7e <HAL_DMA_IRQHandler+0xdaa>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a3f      	ldr	r2, [pc, #252]	@ (8004bec <HAL_DMA_IRQHandler+0xe18>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d045      	beq.n	8004b7e <HAL_DMA_IRQHandler+0xdaa>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a3e      	ldr	r2, [pc, #248]	@ (8004bf0 <HAL_DMA_IRQHandler+0xe1c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d040      	beq.n	8004b7e <HAL_DMA_IRQHandler+0xdaa>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a3c      	ldr	r2, [pc, #240]	@ (8004bf4 <HAL_DMA_IRQHandler+0xe20>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d03b      	beq.n	8004b7e <HAL_DMA_IRQHandler+0xdaa>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a3b      	ldr	r2, [pc, #236]	@ (8004bf8 <HAL_DMA_IRQHandler+0xe24>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d036      	beq.n	8004b7e <HAL_DMA_IRQHandler+0xdaa>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a39      	ldr	r2, [pc, #228]	@ (8004bfc <HAL_DMA_IRQHandler+0xe28>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d031      	beq.n	8004b7e <HAL_DMA_IRQHandler+0xdaa>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a38      	ldr	r2, [pc, #224]	@ (8004c00 <HAL_DMA_IRQHandler+0xe2c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d02c      	beq.n	8004b7e <HAL_DMA_IRQHandler+0xdaa>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a36      	ldr	r2, [pc, #216]	@ (8004c04 <HAL_DMA_IRQHandler+0xe30>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d027      	beq.n	8004b7e <HAL_DMA_IRQHandler+0xdaa>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a35      	ldr	r2, [pc, #212]	@ (8004c08 <HAL_DMA_IRQHandler+0xe34>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d022      	beq.n	8004b7e <HAL_DMA_IRQHandler+0xdaa>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a33      	ldr	r2, [pc, #204]	@ (8004c0c <HAL_DMA_IRQHandler+0xe38>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d01d      	beq.n	8004b7e <HAL_DMA_IRQHandler+0xdaa>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a32      	ldr	r2, [pc, #200]	@ (8004c10 <HAL_DMA_IRQHandler+0xe3c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d018      	beq.n	8004b7e <HAL_DMA_IRQHandler+0xdaa>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a30      	ldr	r2, [pc, #192]	@ (8004c14 <HAL_DMA_IRQHandler+0xe40>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d013      	beq.n	8004b7e <HAL_DMA_IRQHandler+0xdaa>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8004c18 <HAL_DMA_IRQHandler+0xe44>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00e      	beq.n	8004b7e <HAL_DMA_IRQHandler+0xdaa>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a2d      	ldr	r2, [pc, #180]	@ (8004c1c <HAL_DMA_IRQHandler+0xe48>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d009      	beq.n	8004b7e <HAL_DMA_IRQHandler+0xdaa>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a2c      	ldr	r2, [pc, #176]	@ (8004c20 <HAL_DMA_IRQHandler+0xe4c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d004      	beq.n	8004b7e <HAL_DMA_IRQHandler+0xdaa>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a2a      	ldr	r2, [pc, #168]	@ (8004c24 <HAL_DMA_IRQHandler+0xe50>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d108      	bne.n	8004b90 <HAL_DMA_IRQHandler+0xdbc>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 021c 	bic.w	r2, r2, #28
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e007      	b.n	8004ba0 <HAL_DMA_IRQHandler+0xdcc>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 020e 	bic.w	r2, r2, #14
 8004b9e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	2201      	movs	r2, #1
 8004baa:	409a      	lsls	r2, r3
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	4798      	blx	r3
 8004bd6:	e004      	b.n	8004be2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004bd8:	bf00      	nop
 8004bda:	e002      	b.n	8004be2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bdc:	bf00      	nop
 8004bde:	e000      	b.n	8004be2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004be0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004be2:	3728      	adds	r7, #40	@ 0x28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40020010 	.word	0x40020010
 8004bec:	40020028 	.word	0x40020028
 8004bf0:	40020040 	.word	0x40020040
 8004bf4:	40020058 	.word	0x40020058
 8004bf8:	40020070 	.word	0x40020070
 8004bfc:	40020088 	.word	0x40020088
 8004c00:	400200a0 	.word	0x400200a0
 8004c04:	400200b8 	.word	0x400200b8
 8004c08:	40020410 	.word	0x40020410
 8004c0c:	40020428 	.word	0x40020428
 8004c10:	40020440 	.word	0x40020440
 8004c14:	40020458 	.word	0x40020458
 8004c18:	40020470 	.word	0x40020470
 8004c1c:	40020488 	.word	0x40020488
 8004c20:	400204a0 	.word	0x400204a0
 8004c24:	400204b8 	.word	0x400204b8

08004c28 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c36:	b2db      	uxtb	r3, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a42      	ldr	r2, [pc, #264]	@ (8004d5c <DMA_CalcBaseAndBitshift+0x118>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d04a      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xa8>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a41      	ldr	r2, [pc, #260]	@ (8004d60 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d045      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xa8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a3f      	ldr	r2, [pc, #252]	@ (8004d64 <DMA_CalcBaseAndBitshift+0x120>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d040      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xa8>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a3e      	ldr	r2, [pc, #248]	@ (8004d68 <DMA_CalcBaseAndBitshift+0x124>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d03b      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xa8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a3c      	ldr	r2, [pc, #240]	@ (8004d6c <DMA_CalcBaseAndBitshift+0x128>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d036      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xa8>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a3b      	ldr	r2, [pc, #236]	@ (8004d70 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d031      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xa8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a39      	ldr	r2, [pc, #228]	@ (8004d74 <DMA_CalcBaseAndBitshift+0x130>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d02c      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xa8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a38      	ldr	r2, [pc, #224]	@ (8004d78 <DMA_CalcBaseAndBitshift+0x134>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d027      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xa8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a36      	ldr	r2, [pc, #216]	@ (8004d7c <DMA_CalcBaseAndBitshift+0x138>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d022      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xa8>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a35      	ldr	r2, [pc, #212]	@ (8004d80 <DMA_CalcBaseAndBitshift+0x13c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d01d      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xa8>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a33      	ldr	r2, [pc, #204]	@ (8004d84 <DMA_CalcBaseAndBitshift+0x140>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d018      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xa8>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a32      	ldr	r2, [pc, #200]	@ (8004d88 <DMA_CalcBaseAndBitshift+0x144>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d013      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xa8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a30      	ldr	r2, [pc, #192]	@ (8004d8c <DMA_CalcBaseAndBitshift+0x148>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00e      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xa8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a2f      	ldr	r2, [pc, #188]	@ (8004d90 <DMA_CalcBaseAndBitshift+0x14c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d009      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xa8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8004d94 <DMA_CalcBaseAndBitshift+0x150>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d004      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xa8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8004d98 <DMA_CalcBaseAndBitshift+0x154>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d101      	bne.n	8004cf0 <DMA_CalcBaseAndBitshift+0xac>
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <DMA_CalcBaseAndBitshift+0xae>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d024      	beq.n	8004d40 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	3b10      	subs	r3, #16
 8004cfe:	4a27      	ldr	r2, [pc, #156]	@ (8004d9c <DMA_CalcBaseAndBitshift+0x158>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	091b      	lsrs	r3, r3, #4
 8004d06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	4a24      	ldr	r2, [pc, #144]	@ (8004da0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d10:	5cd3      	ldrb	r3, [r2, r3]
 8004d12:	461a      	mov	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d908      	bls.n	8004d30 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	4b1f      	ldr	r3, [pc, #124]	@ (8004da4 <DMA_CalcBaseAndBitshift+0x160>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	1d1a      	adds	r2, r3, #4
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d2e:	e00d      	b.n	8004d4c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	4b1b      	ldr	r3, [pc, #108]	@ (8004da4 <DMA_CalcBaseAndBitshift+0x160>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d3e:	e005      	b.n	8004d4c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	40020010 	.word	0x40020010
 8004d60:	40020028 	.word	0x40020028
 8004d64:	40020040 	.word	0x40020040
 8004d68:	40020058 	.word	0x40020058
 8004d6c:	40020070 	.word	0x40020070
 8004d70:	40020088 	.word	0x40020088
 8004d74:	400200a0 	.word	0x400200a0
 8004d78:	400200b8 	.word	0x400200b8
 8004d7c:	40020410 	.word	0x40020410
 8004d80:	40020428 	.word	0x40020428
 8004d84:	40020440 	.word	0x40020440
 8004d88:	40020458 	.word	0x40020458
 8004d8c:	40020470 	.word	0x40020470
 8004d90:	40020488 	.word	0x40020488
 8004d94:	400204a0 	.word	0x400204a0
 8004d98:	400204b8 	.word	0x400204b8
 8004d9c:	aaaaaaab 	.word	0xaaaaaaab
 8004da0:	08016dc4 	.word	0x08016dc4
 8004da4:	fffffc00 	.word	0xfffffc00

08004da8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d120      	bne.n	8004dfe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d858      	bhi.n	8004e76 <DMA_CheckFifoParam+0xce>
 8004dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dcc <DMA_CheckFifoParam+0x24>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004ddd 	.word	0x08004ddd
 8004dd0:	08004def 	.word	0x08004def
 8004dd4:	08004ddd 	.word	0x08004ddd
 8004dd8:	08004e77 	.word	0x08004e77
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d048      	beq.n	8004e7a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dec:	e045      	b.n	8004e7a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004df6:	d142      	bne.n	8004e7e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dfc:	e03f      	b.n	8004e7e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e06:	d123      	bne.n	8004e50 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d838      	bhi.n	8004e82 <DMA_CheckFifoParam+0xda>
 8004e10:	a201      	add	r2, pc, #4	@ (adr r2, 8004e18 <DMA_CheckFifoParam+0x70>)
 8004e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e16:	bf00      	nop
 8004e18:	08004e29 	.word	0x08004e29
 8004e1c:	08004e2f 	.word	0x08004e2f
 8004e20:	08004e29 	.word	0x08004e29
 8004e24:	08004e41 	.word	0x08004e41
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
        break;
 8004e2c:	e030      	b.n	8004e90 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d025      	beq.n	8004e86 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e3e:	e022      	b.n	8004e86 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e44:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e48:	d11f      	bne.n	8004e8a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e4e:	e01c      	b.n	8004e8a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d902      	bls.n	8004e5e <DMA_CheckFifoParam+0xb6>
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d003      	beq.n	8004e64 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e5c:	e018      	b.n	8004e90 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	73fb      	strb	r3, [r7, #15]
        break;
 8004e62:	e015      	b.n	8004e90 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00e      	beq.n	8004e8e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
    break;
 8004e74:	e00b      	b.n	8004e8e <DMA_CheckFifoParam+0xe6>
        break;
 8004e76:	bf00      	nop
 8004e78:	e00a      	b.n	8004e90 <DMA_CheckFifoParam+0xe8>
        break;
 8004e7a:	bf00      	nop
 8004e7c:	e008      	b.n	8004e90 <DMA_CheckFifoParam+0xe8>
        break;
 8004e7e:	bf00      	nop
 8004e80:	e006      	b.n	8004e90 <DMA_CheckFifoParam+0xe8>
        break;
 8004e82:	bf00      	nop
 8004e84:	e004      	b.n	8004e90 <DMA_CheckFifoParam+0xe8>
        break;
 8004e86:	bf00      	nop
 8004e88:	e002      	b.n	8004e90 <DMA_CheckFifoParam+0xe8>
        break;
 8004e8a:	bf00      	nop
 8004e8c:	e000      	b.n	8004e90 <DMA_CheckFifoParam+0xe8>
    break;
 8004e8e:	bf00      	nop
    }
  }

  return status;
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop

08004ea0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a38      	ldr	r2, [pc, #224]	@ (8004f94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d022      	beq.n	8004efe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a36      	ldr	r2, [pc, #216]	@ (8004f98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01d      	beq.n	8004efe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a35      	ldr	r2, [pc, #212]	@ (8004f9c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d018      	beq.n	8004efe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a33      	ldr	r2, [pc, #204]	@ (8004fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d013      	beq.n	8004efe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a32      	ldr	r2, [pc, #200]	@ (8004fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00e      	beq.n	8004efe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a30      	ldr	r2, [pc, #192]	@ (8004fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d009      	beq.n	8004efe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a2f      	ldr	r2, [pc, #188]	@ (8004fac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d004      	beq.n	8004efe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8004fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d101      	bne.n	8004f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f02:	2300      	movs	r3, #0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01a      	beq.n	8004f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	3b08      	subs	r3, #8
 8004f10:	4a28      	ldr	r2, [pc, #160]	@ (8004fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	091b      	lsrs	r3, r3, #4
 8004f18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4b26      	ldr	r3, [pc, #152]	@ (8004fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f1e:	4413      	add	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	461a      	mov	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a24      	ldr	r2, [pc, #144]	@ (8004fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f2c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f003 031f 	and.w	r3, r3, #31
 8004f34:	2201      	movs	r2, #1
 8004f36:	409a      	lsls	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f3c:	e024      	b.n	8004f88 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	3b10      	subs	r3, #16
 8004f46:	4a1e      	ldr	r2, [pc, #120]	@ (8004fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d806      	bhi.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d902      	bls.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3308      	adds	r3, #8
 8004f64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4b18      	ldr	r3, [pc, #96]	@ (8004fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	461a      	mov	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a16      	ldr	r2, [pc, #88]	@ (8004fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f78:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	2201      	movs	r2, #1
 8004f82:	409a      	lsls	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f88:	bf00      	nop
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	58025408 	.word	0x58025408
 8004f98:	5802541c 	.word	0x5802541c
 8004f9c:	58025430 	.word	0x58025430
 8004fa0:	58025444 	.word	0x58025444
 8004fa4:	58025458 	.word	0x58025458
 8004fa8:	5802546c 	.word	0x5802546c
 8004fac:	58025480 	.word	0x58025480
 8004fb0:	58025494 	.word	0x58025494
 8004fb4:	cccccccd 	.word	0xcccccccd
 8004fb8:	16009600 	.word	0x16009600
 8004fbc:	58025880 	.word	0x58025880
 8004fc0:	aaaaaaab 	.word	0xaaaaaaab
 8004fc4:	400204b8 	.word	0x400204b8
 8004fc8:	4002040f 	.word	0x4002040f
 8004fcc:	10008200 	.word	0x10008200
 8004fd0:	40020880 	.word	0x40020880

08004fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d04a      	beq.n	8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d847      	bhi.n	8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a25      	ldr	r2, [pc, #148]	@ (800508c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d022      	beq.n	8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a24      	ldr	r2, [pc, #144]	@ (8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d01d      	beq.n	8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a22      	ldr	r2, [pc, #136]	@ (8005094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d018      	beq.n	8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a21      	ldr	r2, [pc, #132]	@ (8005098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d013      	beq.n	8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1f      	ldr	r2, [pc, #124]	@ (800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00e      	beq.n	8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a1e      	ldr	r2, [pc, #120]	@ (80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d009      	beq.n	8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1c      	ldr	r2, [pc, #112]	@ (80050a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d004      	beq.n	8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1b      	ldr	r2, [pc, #108]	@ (80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d101      	bne.n	8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005040:	2301      	movs	r3, #1
 8005042:	e000      	b.n	8005046 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005044:	2300      	movs	r3, #0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4b17      	ldr	r3, [pc, #92]	@ (80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	461a      	mov	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a15      	ldr	r2, [pc, #84]	@ (80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800505c:	671a      	str	r2, [r3, #112]	@ 0x70
 800505e:	e009      	b.n	8005074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4b14      	ldr	r3, [pc, #80]	@ (80050b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	461a      	mov	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a11      	ldr	r2, [pc, #68]	@ (80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005072:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3b01      	subs	r3, #1
 8005078:	2201      	movs	r2, #1
 800507a:	409a      	lsls	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005080:	bf00      	nop
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	58025408 	.word	0x58025408
 8005090:	5802541c 	.word	0x5802541c
 8005094:	58025430 	.word	0x58025430
 8005098:	58025444 	.word	0x58025444
 800509c:	58025458 	.word	0x58025458
 80050a0:	5802546c 	.word	0x5802546c
 80050a4:	58025480 	.word	0x58025480
 80050a8:	58025494 	.word	0x58025494
 80050ac:	1600963f 	.word	0x1600963f
 80050b0:	58025940 	.word	0x58025940
 80050b4:	1000823f 	.word	0x1000823f
 80050b8:	40020940 	.word	0x40020940

080050bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80050bc:	b480      	push	{r7}
 80050be:	b089      	sub	sp, #36	@ 0x24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050ca:	4b89      	ldr	r3, [pc, #548]	@ (80052f0 <HAL_GPIO_Init+0x234>)
 80050cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050ce:	e194      	b.n	80053fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	2101      	movs	r1, #1
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	fa01 f303 	lsl.w	r3, r1, r3
 80050dc:	4013      	ands	r3, r2
 80050de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 8186 	beq.w	80053f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d005      	beq.n	8005100 <HAL_GPIO_Init+0x44>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d130      	bne.n	8005162 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	2203      	movs	r2, #3
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	43db      	mvns	r3, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4013      	ands	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	4313      	orrs	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005136:	2201      	movs	r2, #1
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	43db      	mvns	r3, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4013      	ands	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	091b      	lsrs	r3, r3, #4
 800514c:	f003 0201 	and.w	r2, r3, #1
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4313      	orrs	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b03      	cmp	r3, #3
 800516c:	d017      	beq.n	800519e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	2203      	movs	r2, #3
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43db      	mvns	r3, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4013      	ands	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4313      	orrs	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d123      	bne.n	80051f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	08da      	lsrs	r2, r3, #3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3208      	adds	r2, #8
 80051b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	220f      	movs	r2, #15
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	43db      	mvns	r3, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4013      	ands	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	08da      	lsrs	r2, r3, #3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3208      	adds	r2, #8
 80051ec:	69b9      	ldr	r1, [r7, #24]
 80051ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	2203      	movs	r2, #3
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	43db      	mvns	r3, r3
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4013      	ands	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f003 0203 	and.w	r2, r3, #3
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4313      	orrs	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 80e0 	beq.w	80053f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005234:	4b2f      	ldr	r3, [pc, #188]	@ (80052f4 <HAL_GPIO_Init+0x238>)
 8005236:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800523a:	4a2e      	ldr	r2, [pc, #184]	@ (80052f4 <HAL_GPIO_Init+0x238>)
 800523c:	f043 0302 	orr.w	r3, r3, #2
 8005240:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005244:	4b2b      	ldr	r3, [pc, #172]	@ (80052f4 <HAL_GPIO_Init+0x238>)
 8005246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005252:	4a29      	ldr	r2, [pc, #164]	@ (80052f8 <HAL_GPIO_Init+0x23c>)
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	089b      	lsrs	r3, r3, #2
 8005258:	3302      	adds	r3, #2
 800525a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	220f      	movs	r2, #15
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	43db      	mvns	r3, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4013      	ands	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a20      	ldr	r2, [pc, #128]	@ (80052fc <HAL_GPIO_Init+0x240>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d052      	beq.n	8005324 <HAL_GPIO_Init+0x268>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a1f      	ldr	r2, [pc, #124]	@ (8005300 <HAL_GPIO_Init+0x244>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d031      	beq.n	80052ea <HAL_GPIO_Init+0x22e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a1e      	ldr	r2, [pc, #120]	@ (8005304 <HAL_GPIO_Init+0x248>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d02b      	beq.n	80052e6 <HAL_GPIO_Init+0x22a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a1d      	ldr	r2, [pc, #116]	@ (8005308 <HAL_GPIO_Init+0x24c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d025      	beq.n	80052e2 <HAL_GPIO_Init+0x226>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a1c      	ldr	r2, [pc, #112]	@ (800530c <HAL_GPIO_Init+0x250>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d01f      	beq.n	80052de <HAL_GPIO_Init+0x222>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005310 <HAL_GPIO_Init+0x254>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d019      	beq.n	80052da <HAL_GPIO_Init+0x21e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005314 <HAL_GPIO_Init+0x258>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d013      	beq.n	80052d6 <HAL_GPIO_Init+0x21a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a19      	ldr	r2, [pc, #100]	@ (8005318 <HAL_GPIO_Init+0x25c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00d      	beq.n	80052d2 <HAL_GPIO_Init+0x216>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a18      	ldr	r2, [pc, #96]	@ (800531c <HAL_GPIO_Init+0x260>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d007      	beq.n	80052ce <HAL_GPIO_Init+0x212>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a17      	ldr	r2, [pc, #92]	@ (8005320 <HAL_GPIO_Init+0x264>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d101      	bne.n	80052ca <HAL_GPIO_Init+0x20e>
 80052c6:	2309      	movs	r3, #9
 80052c8:	e02d      	b.n	8005326 <HAL_GPIO_Init+0x26a>
 80052ca:	230a      	movs	r3, #10
 80052cc:	e02b      	b.n	8005326 <HAL_GPIO_Init+0x26a>
 80052ce:	2308      	movs	r3, #8
 80052d0:	e029      	b.n	8005326 <HAL_GPIO_Init+0x26a>
 80052d2:	2307      	movs	r3, #7
 80052d4:	e027      	b.n	8005326 <HAL_GPIO_Init+0x26a>
 80052d6:	2306      	movs	r3, #6
 80052d8:	e025      	b.n	8005326 <HAL_GPIO_Init+0x26a>
 80052da:	2305      	movs	r3, #5
 80052dc:	e023      	b.n	8005326 <HAL_GPIO_Init+0x26a>
 80052de:	2304      	movs	r3, #4
 80052e0:	e021      	b.n	8005326 <HAL_GPIO_Init+0x26a>
 80052e2:	2303      	movs	r3, #3
 80052e4:	e01f      	b.n	8005326 <HAL_GPIO_Init+0x26a>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e01d      	b.n	8005326 <HAL_GPIO_Init+0x26a>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e01b      	b.n	8005326 <HAL_GPIO_Init+0x26a>
 80052ee:	bf00      	nop
 80052f0:	58000080 	.word	0x58000080
 80052f4:	58024400 	.word	0x58024400
 80052f8:	58000400 	.word	0x58000400
 80052fc:	58020000 	.word	0x58020000
 8005300:	58020400 	.word	0x58020400
 8005304:	58020800 	.word	0x58020800
 8005308:	58020c00 	.word	0x58020c00
 800530c:	58021000 	.word	0x58021000
 8005310:	58021400 	.word	0x58021400
 8005314:	58021800 	.word	0x58021800
 8005318:	58021c00 	.word	0x58021c00
 800531c:	58022000 	.word	0x58022000
 8005320:	58022400 	.word	0x58022400
 8005324:	2300      	movs	r3, #0
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	f002 0203 	and.w	r2, r2, #3
 800532c:	0092      	lsls	r2, r2, #2
 800532e:	4093      	lsls	r3, r2
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005336:	4938      	ldr	r1, [pc, #224]	@ (8005418 <HAL_GPIO_Init+0x35c>)
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	089b      	lsrs	r3, r3, #2
 800533c:	3302      	adds	r3, #2
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	43db      	mvns	r3, r3
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4013      	ands	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800536a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	43db      	mvns	r3, r3
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	4013      	ands	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005398:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	43db      	mvns	r3, r3
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	4013      	ands	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	43db      	mvns	r3, r3
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	4013      	ands	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	3301      	adds	r3, #1
 80053f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	f47f ae63 	bne.w	80050d0 <HAL_GPIO_Init+0x14>
  }
}
 800540a:	bf00      	nop
 800540c:	bf00      	nop
 800540e:	3724      	adds	r7, #36	@ 0x24
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	58000400 	.word	0x58000400

0800541c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	807b      	strh	r3, [r7, #2]
 8005428:	4613      	mov	r3, r2
 800542a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800542c:	787b      	ldrb	r3, [r7, #1]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005432:	887a      	ldrh	r2, [r7, #2]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005438:	e003      	b.n	8005442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800543a:	887b      	ldrh	r3, [r7, #2]
 800543c:	041a      	lsls	r2, r3, #16
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	619a      	str	r2, [r3, #24]
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
	...

08005450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e08b      	b.n	800557a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fc f94c 	bl	8001714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2224      	movs	r2, #36	@ 0x24
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0201 	bic.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80054a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d107      	bne.n	80054ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054c6:	609a      	str	r2, [r3, #8]
 80054c8:	e006      	b.n	80054d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80054d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d108      	bne.n	80054f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ee:	605a      	str	r2, [r3, #4]
 80054f0:	e007      	b.n	8005502 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005500:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6859      	ldr	r1, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4b1d      	ldr	r3, [pc, #116]	@ (8005584 <HAL_I2C_Init+0x134>)
 800550e:	430b      	orrs	r3, r1
 8005510:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005520:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	69d9      	ldr	r1, [r3, #28]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1a      	ldr	r2, [r3, #32]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2220      	movs	r2, #32
 8005566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	02008000 	.word	0x02008000

08005588 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	4798      	blx	r3
  }
}
 80055b4:	bf00      	nop
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	0a1b      	lsrs	r3, r3, #8
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d010      	beq.n	8005602 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	09db      	lsrs	r3, r3, #7
 80055e4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f0:	f043 0201 	orr.w	r2, r3, #1
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005600:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	0a9b      	lsrs	r3, r3, #10
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d010      	beq.n	8005630 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	09db      	lsrs	r3, r3, #7
 8005612:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561e:	f043 0208 	orr.w	r2, r3, #8
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800562e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	0a5b      	lsrs	r3, r3, #9
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	09db      	lsrs	r3, r3, #7
 8005640:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564c:	f043 0202 	orr.w	r2, r3, #2
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800565c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005662:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 030b 	and.w	r3, r3, #11
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800566e:	68f9      	ldr	r1, [r7, #12]
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fcdb 	bl	800602c <I2C_ITError>
  }
}
 8005676:	bf00      	nop
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	460b      	mov	r3, r1
 80056b0:	70fb      	strb	r3, [r7, #3]
 80056b2:	4613      	mov	r3, r2
 80056b4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b086      	sub	sp, #24
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <I2C_Slave_ISR_IT+0x24>
 800571e:	2302      	movs	r3, #2
 8005720:	e0ed      	b.n	80058fe <I2C_Slave_ISR_IT+0x200>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	095b      	lsrs	r3, r3, #5
 800573a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800573e:	2b00      	cmp	r3, #0
 8005740:	d004      	beq.n	800574c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005742:	6939      	ldr	r1, [r7, #16]
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f9c1 	bl	8005acc <I2C_ITSlaveCplt>
 800574a:	e0d3      	b.n	80058f4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	091b      	lsrs	r3, r3, #4
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d04d      	beq.n	80057f4 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	091b      	lsrs	r3, r3, #4
 800575c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005760:	2b00      	cmp	r3, #0
 8005762:	d047      	beq.n	80057f4 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d128      	bne.n	80057c0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b28      	cmp	r3, #40	@ 0x28
 8005778:	d108      	bne.n	800578c <I2C_Slave_ISR_IT+0x8e>
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005780:	d104      	bne.n	800578c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005782:	6939      	ldr	r1, [r7, #16]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 fbfb 	bl	8005f80 <I2C_ITListenCplt>
 800578a:	e032      	b.n	80057f2 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b29      	cmp	r3, #41	@ 0x29
 8005796:	d10e      	bne.n	80057b6 <I2C_Slave_ISR_IT+0xb8>
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800579e:	d00a      	beq.n	80057b6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2210      	movs	r2, #16
 80057a6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 fd56 	bl	800625a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 f92d 	bl	8005a0e <I2C_ITSlaveSeqCplt>
 80057b4:	e01d      	b.n	80057f2 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2210      	movs	r2, #16
 80057bc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80057be:	e096      	b.n	80058ee <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2210      	movs	r2, #16
 80057c6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057cc:	f043 0204 	orr.w	r2, r3, #4
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d004      	beq.n	80057e4 <I2C_Slave_ISR_IT+0xe6>
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057e0:	f040 8085 	bne.w	80058ee <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e8:	4619      	mov	r1, r3
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 fc1e 	bl	800602c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80057f0:	e07d      	b.n	80058ee <I2C_Slave_ISR_IT+0x1f0>
 80057f2:	e07c      	b.n	80058ee <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	089b      	lsrs	r3, r3, #2
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d030      	beq.n	8005862 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	089b      	lsrs	r3, r3, #2
 8005804:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005808:	2b00      	cmp	r3, #0
 800580a:	d02a      	beq.n	8005862 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d018      	beq.n	8005848 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d14f      	bne.n	80058f2 <I2C_Slave_ISR_IT+0x1f4>
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005858:	d04b      	beq.n	80058f2 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 f8d7 	bl	8005a0e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005860:	e047      	b.n	80058f2 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	08db      	lsrs	r3, r3, #3
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	08db      	lsrs	r3, r3, #3
 8005872:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005876:	2b00      	cmp	r3, #0
 8005878:	d004      	beq.n	8005884 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800587a:	6939      	ldr	r1, [r7, #16]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 f842 	bl	8005906 <I2C_ITAddrCplt>
 8005882:	e037      	b.n	80058f4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	085b      	lsrs	r3, r3, #1
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d031      	beq.n	80058f4 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	085b      	lsrs	r3, r3, #1
 8005894:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005898:	2b00      	cmp	r3, #0
 800589a:	d02b      	beq.n	80058f4 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d018      	beq.n	80058d8 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058aa:	781a      	ldrb	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80058d6:	e00d      	b.n	80058f4 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058de:	d002      	beq.n	80058e6 <I2C_Slave_ISR_IT+0x1e8>
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 f891 	bl	8005a0e <I2C_ITSlaveSeqCplt>
 80058ec:	e002      	b.n	80058f4 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80058ee:	bf00      	nop
 80058f0:	e000      	b.n	80058f4 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80058f2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800591c:	2b28      	cmp	r3, #40	@ 0x28
 800591e:	d16a      	bne.n	80059f6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	0c1b      	lsrs	r3, r3, #16
 8005928:	b2db      	uxtb	r3, r3
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	b29b      	uxth	r3, r3
 800593a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800593e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	b29b      	uxth	r3, r3
 8005948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800594c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	b29b      	uxth	r3, r3
 8005956:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800595a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	2b02      	cmp	r3, #2
 8005962:	d138      	bne.n	80059d6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005964:	897b      	ldrh	r3, [r7, #10]
 8005966:	09db      	lsrs	r3, r3, #7
 8005968:	b29a      	uxth	r2, r3
 800596a:	89bb      	ldrh	r3, [r7, #12]
 800596c:	4053      	eors	r3, r2
 800596e:	b29b      	uxth	r3, r3
 8005970:	f003 0306 	and.w	r3, r3, #6
 8005974:	2b00      	cmp	r3, #0
 8005976:	d11c      	bne.n	80059b2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005978:	897b      	ldrh	r3, [r7, #10]
 800597a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800598a:	2b02      	cmp	r3, #2
 800598c:	d13b      	bne.n	8005a06 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2208      	movs	r2, #8
 800599a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80059a4:	89ba      	ldrh	r2, [r7, #12]
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	4619      	mov	r1, r3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff fe7b 	bl	80056a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80059b0:	e029      	b.n	8005a06 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80059b2:	893b      	ldrh	r3, [r7, #8]
 80059b4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80059b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fc8f 	bl	80062de <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80059c8:	89ba      	ldrh	r2, [r7, #12]
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff fe69 	bl	80056a6 <HAL_I2C_AddrCallback>
}
 80059d4:	e017      	b.n	8005a06 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80059d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fc7f 	bl	80062de <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80059e8:	89ba      	ldrh	r2, [r7, #12]
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	4619      	mov	r1, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff fe59 	bl	80056a6 <HAL_I2C_AddrCallback>
}
 80059f4:	e007      	b.n	8005a06 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2208      	movs	r2, #8
 80059fc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005a06:	bf00      	nop
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	0b9b      	lsrs	r3, r3, #14
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d008      	beq.n	8005a44 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	e00d      	b.n	8005a60 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	0bdb      	lsrs	r3, r3, #15
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a5e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b29      	cmp	r3, #41	@ 0x29
 8005a6a:	d112      	bne.n	8005a92 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2228      	movs	r2, #40	@ 0x28
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2221      	movs	r2, #33	@ 0x21
 8005a78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fc2e 	bl	80062de <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff fdf7 	bl	800567e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a90:	e017      	b.n	8005ac2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a9c:	d111      	bne.n	8005ac2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2228      	movs	r2, #40	@ 0x28
 8005aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2222      	movs	r2, #34	@ 0x22
 8005aaa:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005aac:	2102      	movs	r1, #2
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fc15 	bl	80062de <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff fde8 	bl	8005692 <HAL_I2C_SlaveRxCpltCallback>
}
 8005ac2:	bf00      	nop
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aee:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2220      	movs	r2, #32
 8005af6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005af8:	7afb      	ldrb	r3, [r7, #11]
 8005afa:	2b21      	cmp	r3, #33	@ 0x21
 8005afc:	d002      	beq.n	8005b04 <I2C_ITSlaveCplt+0x38>
 8005afe:	7afb      	ldrb	r3, [r7, #11]
 8005b00:	2b29      	cmp	r3, #41	@ 0x29
 8005b02:	d108      	bne.n	8005b16 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005b04:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fbe8 	bl	80062de <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2221      	movs	r2, #33	@ 0x21
 8005b12:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b14:	e019      	b.n	8005b4a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b16:	7afb      	ldrb	r3, [r7, #11]
 8005b18:	2b22      	cmp	r3, #34	@ 0x22
 8005b1a:	d002      	beq.n	8005b22 <I2C_ITSlaveCplt+0x56>
 8005b1c:	7afb      	ldrb	r3, [r7, #11]
 8005b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b20:	d108      	bne.n	8005b34 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005b22:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fbd9 	bl	80062de <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2222      	movs	r2, #34	@ 0x22
 8005b30:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b32:	e00a      	b.n	8005b4a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005b34:	7afb      	ldrb	r3, [r7, #11]
 8005b36:	2b28      	cmp	r3, #40	@ 0x28
 8005b38:	d107      	bne.n	8005b4a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005b3a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fbcd 	bl	80062de <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b58:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6859      	ldr	r1, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	4b80      	ldr	r3, [pc, #512]	@ (8005d68 <I2C_ITSlaveCplt+0x29c>)
 8005b66:	400b      	ands	r3, r1
 8005b68:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fb75 	bl	800625a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	0b9b      	lsrs	r3, r3, #14
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d07a      	beq.n	8005c72 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b8a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 8112 	beq.w	8005dba <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a73      	ldr	r2, [pc, #460]	@ (8005d6c <I2C_ITSlaveCplt+0x2a0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d059      	beq.n	8005c56 <I2C_ITSlaveCplt+0x18a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a71      	ldr	r2, [pc, #452]	@ (8005d70 <I2C_ITSlaveCplt+0x2a4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d053      	beq.n	8005c56 <I2C_ITSlaveCplt+0x18a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a6f      	ldr	r2, [pc, #444]	@ (8005d74 <I2C_ITSlaveCplt+0x2a8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d04d      	beq.n	8005c56 <I2C_ITSlaveCplt+0x18a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a6d      	ldr	r2, [pc, #436]	@ (8005d78 <I2C_ITSlaveCplt+0x2ac>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d047      	beq.n	8005c56 <I2C_ITSlaveCplt+0x18a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a6b      	ldr	r2, [pc, #428]	@ (8005d7c <I2C_ITSlaveCplt+0x2b0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d041      	beq.n	8005c56 <I2C_ITSlaveCplt+0x18a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a69      	ldr	r2, [pc, #420]	@ (8005d80 <I2C_ITSlaveCplt+0x2b4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d03b      	beq.n	8005c56 <I2C_ITSlaveCplt+0x18a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a67      	ldr	r2, [pc, #412]	@ (8005d84 <I2C_ITSlaveCplt+0x2b8>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d035      	beq.n	8005c56 <I2C_ITSlaveCplt+0x18a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a65      	ldr	r2, [pc, #404]	@ (8005d88 <I2C_ITSlaveCplt+0x2bc>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d02f      	beq.n	8005c56 <I2C_ITSlaveCplt+0x18a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a63      	ldr	r2, [pc, #396]	@ (8005d8c <I2C_ITSlaveCplt+0x2c0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d029      	beq.n	8005c56 <I2C_ITSlaveCplt+0x18a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a61      	ldr	r2, [pc, #388]	@ (8005d90 <I2C_ITSlaveCplt+0x2c4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d023      	beq.n	8005c56 <I2C_ITSlaveCplt+0x18a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a5f      	ldr	r2, [pc, #380]	@ (8005d94 <I2C_ITSlaveCplt+0x2c8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d01d      	beq.n	8005c56 <I2C_ITSlaveCplt+0x18a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a5d      	ldr	r2, [pc, #372]	@ (8005d98 <I2C_ITSlaveCplt+0x2cc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d017      	beq.n	8005c56 <I2C_ITSlaveCplt+0x18a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a5b      	ldr	r2, [pc, #364]	@ (8005d9c <I2C_ITSlaveCplt+0x2d0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d011      	beq.n	8005c56 <I2C_ITSlaveCplt+0x18a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a59      	ldr	r2, [pc, #356]	@ (8005da0 <I2C_ITSlaveCplt+0x2d4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00b      	beq.n	8005c56 <I2C_ITSlaveCplt+0x18a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a57      	ldr	r2, [pc, #348]	@ (8005da4 <I2C_ITSlaveCplt+0x2d8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d005      	beq.n	8005c56 <I2C_ITSlaveCplt+0x18a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a55      	ldr	r2, [pc, #340]	@ (8005da8 <I2C_ITSlaveCplt+0x2dc>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d105      	bne.n	8005c62 <I2C_ITSlaveCplt+0x196>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	e004      	b.n	8005c6c <I2C_ITSlaveCplt+0x1a0>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8005c70:	e0a3      	b.n	8005dba <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	0bdb      	lsrs	r3, r3, #15
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 809d 	beq.w	8005dba <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c8e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 8090 	beq.w	8005dba <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a32      	ldr	r2, [pc, #200]	@ (8005d6c <I2C_ITSlaveCplt+0x2a0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d059      	beq.n	8005d5a <I2C_ITSlaveCplt+0x28e>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a30      	ldr	r2, [pc, #192]	@ (8005d70 <I2C_ITSlaveCplt+0x2a4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d053      	beq.n	8005d5a <I2C_ITSlaveCplt+0x28e>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a2e      	ldr	r2, [pc, #184]	@ (8005d74 <I2C_ITSlaveCplt+0x2a8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d04d      	beq.n	8005d5a <I2C_ITSlaveCplt+0x28e>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8005d78 <I2C_ITSlaveCplt+0x2ac>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d047      	beq.n	8005d5a <I2C_ITSlaveCplt+0x28e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a2a      	ldr	r2, [pc, #168]	@ (8005d7c <I2C_ITSlaveCplt+0x2b0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d041      	beq.n	8005d5a <I2C_ITSlaveCplt+0x28e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a28      	ldr	r2, [pc, #160]	@ (8005d80 <I2C_ITSlaveCplt+0x2b4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d03b      	beq.n	8005d5a <I2C_ITSlaveCplt+0x28e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a26      	ldr	r2, [pc, #152]	@ (8005d84 <I2C_ITSlaveCplt+0x2b8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d035      	beq.n	8005d5a <I2C_ITSlaveCplt+0x28e>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a24      	ldr	r2, [pc, #144]	@ (8005d88 <I2C_ITSlaveCplt+0x2bc>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d02f      	beq.n	8005d5a <I2C_ITSlaveCplt+0x28e>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a22      	ldr	r2, [pc, #136]	@ (8005d8c <I2C_ITSlaveCplt+0x2c0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d029      	beq.n	8005d5a <I2C_ITSlaveCplt+0x28e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a20      	ldr	r2, [pc, #128]	@ (8005d90 <I2C_ITSlaveCplt+0x2c4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d023      	beq.n	8005d5a <I2C_ITSlaveCplt+0x28e>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1e      	ldr	r2, [pc, #120]	@ (8005d94 <I2C_ITSlaveCplt+0x2c8>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d01d      	beq.n	8005d5a <I2C_ITSlaveCplt+0x28e>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1c      	ldr	r2, [pc, #112]	@ (8005d98 <I2C_ITSlaveCplt+0x2cc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d017      	beq.n	8005d5a <I2C_ITSlaveCplt+0x28e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1a      	ldr	r2, [pc, #104]	@ (8005d9c <I2C_ITSlaveCplt+0x2d0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d011      	beq.n	8005d5a <I2C_ITSlaveCplt+0x28e>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a18      	ldr	r2, [pc, #96]	@ (8005da0 <I2C_ITSlaveCplt+0x2d4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00b      	beq.n	8005d5a <I2C_ITSlaveCplt+0x28e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a16      	ldr	r2, [pc, #88]	@ (8005da4 <I2C_ITSlaveCplt+0x2d8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d005      	beq.n	8005d5a <I2C_ITSlaveCplt+0x28e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a14      	ldr	r2, [pc, #80]	@ (8005da8 <I2C_ITSlaveCplt+0x2dc>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d128      	bne.n	8005dac <I2C_ITSlaveCplt+0x2e0>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	e027      	b.n	8005db6 <I2C_ITSlaveCplt+0x2ea>
 8005d66:	bf00      	nop
 8005d68:	fe00e800 	.word	0xfe00e800
 8005d6c:	40020010 	.word	0x40020010
 8005d70:	40020028 	.word	0x40020028
 8005d74:	40020040 	.word	0x40020040
 8005d78:	40020058 	.word	0x40020058
 8005d7c:	40020070 	.word	0x40020070
 8005d80:	40020088 	.word	0x40020088
 8005d84:	400200a0 	.word	0x400200a0
 8005d88:	400200b8 	.word	0x400200b8
 8005d8c:	40020410 	.word	0x40020410
 8005d90:	40020428 	.word	0x40020428
 8005d94:	40020440 	.word	0x40020440
 8005d98:	40020458 	.word	0x40020458
 8005d9c:	40020470 	.word	0x40020470
 8005da0:	40020488 	.word	0x40020488
 8005da4:	400204a0 	.word	0x400204a0
 8005da8:	400204b8 	.word	0x400204b8
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	089b      	lsrs	r3, r3, #2
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d020      	beq.n	8005e08 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f023 0304 	bic.w	r3, r3, #4
 8005dcc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00c      	beq.n	8005e08 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d005      	beq.n	8005e1e <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e16:	f043 0204 	orr.w	r2, r3, #4
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d04a      	beq.n	8005ec0 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	091b      	lsrs	r3, r3, #4
 8005e2e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d044      	beq.n	8005ec0 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d128      	bne.n	8005e92 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b28      	cmp	r3, #40	@ 0x28
 8005e4a:	d108      	bne.n	8005e5e <I2C_ITSlaveCplt+0x392>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e52:	d104      	bne.n	8005e5e <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e54:	6979      	ldr	r1, [r7, #20]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f892 	bl	8005f80 <I2C_ITListenCplt>
 8005e5c:	e030      	b.n	8005ec0 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b29      	cmp	r3, #41	@ 0x29
 8005e68:	d10e      	bne.n	8005e88 <I2C_ITSlaveCplt+0x3bc>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e70:	d00a      	beq.n	8005e88 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2210      	movs	r2, #16
 8005e78:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f9ed 	bl	800625a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff fdc4 	bl	8005a0e <I2C_ITSlaveSeqCplt>
 8005e86:	e01b      	b.n	8005ec0 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2210      	movs	r2, #16
 8005e8e:	61da      	str	r2, [r3, #28]
 8005e90:	e016      	b.n	8005ec0 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2210      	movs	r2, #16
 8005e98:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9e:	f043 0204 	orr.w	r2, r3, #4
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <I2C_ITSlaveCplt+0x3e8>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005eb2:	d105      	bne.n	8005ec0 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f8b6 	bl	800602c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d010      	beq.n	8005ef8 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f8a5 	bl	800602c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b28      	cmp	r3, #40	@ 0x28
 8005eec:	d141      	bne.n	8005f72 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005eee:	6979      	ldr	r1, [r7, #20]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f845 	bl	8005f80 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ef6:	e03c      	b.n	8005f72 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005efc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f00:	d014      	beq.n	8005f2c <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff fd83 	bl	8005a0e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005f7c <I2C_ITSlaveCplt+0x4b0>)
 8005f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2220      	movs	r2, #32
 8005f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7ff fbcc 	bl	80056c2 <HAL_I2C_ListenCpltCallback>
}
 8005f2a:	e022      	b.n	8005f72 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b22      	cmp	r3, #34	@ 0x22
 8005f36:	d10e      	bne.n	8005f56 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7ff fb9f 	bl	8005692 <HAL_I2C_SlaveRxCpltCallback>
}
 8005f54:	e00d      	b.n	8005f72 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff fb86 	bl	800567e <HAL_I2C_SlaveTxCpltCallback>
}
 8005f72:	bf00      	nop
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	ffff0000 	.word	0xffff0000

08005f80 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a26      	ldr	r2, [pc, #152]	@ (8006028 <I2C_ITListenCplt+0xa8>)
 8005f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	089b      	lsrs	r3, r3, #2
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d022      	beq.n	8005ffe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d012      	beq.n	8005ffe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff6:	f043 0204 	orr.w	r2, r3, #4
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ffe:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f96b 	bl	80062de <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2210      	movs	r2, #16
 800600e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7ff fb52 	bl	80056c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800601e:	bf00      	nop
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	ffff0000 	.word	0xffff0000

0800602c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800603c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a6d      	ldr	r2, [pc, #436]	@ (8006200 <I2C_ITError+0x1d4>)
 800604a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	2b28      	cmp	r3, #40	@ 0x28
 8006062:	d005      	beq.n	8006070 <I2C_ITError+0x44>
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	2b29      	cmp	r3, #41	@ 0x29
 8006068:	d002      	beq.n	8006070 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b2a      	cmp	r3, #42	@ 0x2a
 800606e:	d10b      	bne.n	8006088 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006070:	2103      	movs	r1, #3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f933 	bl	80062de <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2228      	movs	r2, #40	@ 0x28
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a60      	ldr	r2, [pc, #384]	@ (8006204 <I2C_ITError+0x1d8>)
 8006084:	635a      	str	r2, [r3, #52]	@ 0x34
 8006086:	e030      	b.n	80060ea <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006088:	f248 0103 	movw	r1, #32771	@ 0x8003
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f926 	bl	80062de <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f8e1 	bl	800625a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b60      	cmp	r3, #96	@ 0x60
 80060a2:	d01f      	beq.n	80060e4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d114      	bne.n	80060e4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b10      	cmp	r3, #16
 80060c6:	d109      	bne.n	80060dc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2210      	movs	r2, #16
 80060ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d4:	f043 0204 	orr.w	r2, r3, #4
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2220      	movs	r2, #32
 80060e2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d039      	beq.n	800616c <I2C_ITError+0x140>
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b11      	cmp	r3, #17
 80060fc:	d002      	beq.n	8006104 <I2C_ITError+0xd8>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b21      	cmp	r3, #33	@ 0x21
 8006102:	d133      	bne.n	800616c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800610e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006112:	d107      	bne.n	8006124 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006122:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006128:	4618      	mov	r0, r3
 800612a:	f7fe fd7d 	bl	8004c28 <HAL_DMA_GetState>
 800612e:	4603      	mov	r3, r0
 8006130:	2b01      	cmp	r3, #1
 8006132:	d017      	beq.n	8006164 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006138:	4a33      	ldr	r2, [pc, #204]	@ (8006208 <I2C_ITError+0x1dc>)
 800613a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006148:	4618      	mov	r0, r3
 800614a:	f7fd fbfd 	bl	8003948 <HAL_DMA_Abort_IT>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d04d      	beq.n	80061f0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800615e:	4610      	mov	r0, r2
 8006160:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006162:	e045      	b.n	80061f0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f851 	bl	800620c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800616a:	e041      	b.n	80061f0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d039      	beq.n	80061e8 <I2C_ITError+0x1bc>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b12      	cmp	r3, #18
 8006178:	d002      	beq.n	8006180 <I2C_ITError+0x154>
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2b22      	cmp	r3, #34	@ 0x22
 800617e:	d133      	bne.n	80061e8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800618a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800618e:	d107      	bne.n	80061a0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800619e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fe fd3f 	bl	8004c28 <HAL_DMA_GetState>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d017      	beq.n	80061e0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b4:	4a14      	ldr	r2, [pc, #80]	@ (8006208 <I2C_ITError+0x1dc>)
 80061b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fd fbbf 	bl	8003948 <HAL_DMA_Abort_IT>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d011      	beq.n	80061f4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80061da:	4610      	mov	r0, r2
 80061dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061de:	e009      	b.n	80061f4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f813 	bl	800620c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061e6:	e005      	b.n	80061f4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f80f 	bl	800620c <I2C_TreatErrorCallback>
  }
}
 80061ee:	e002      	b.n	80061f6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80061f0:	bf00      	nop
 80061f2:	e000      	b.n	80061f6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061f4:	bf00      	nop
}
 80061f6:	bf00      	nop
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	ffff0000 	.word	0xffff0000
 8006204:	080056ff 	.word	0x080056ff
 8006208:	080062a3 	.word	0x080062a3

0800620c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b60      	cmp	r3, #96	@ 0x60
 800621e:	d10e      	bne.n	800623e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff fa57 	bl	80056ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800623c:	e009      	b.n	8006252 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff fa42 	bl	80056d6 <HAL_I2C_ErrorCallback>
}
 8006252:	bf00      	nop
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b02      	cmp	r3, #2
 800626e:	d103      	bne.n	8006278 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2200      	movs	r2, #0
 8006276:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b01      	cmp	r3, #1
 8006284:	d007      	beq.n	8006296 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	699a      	ldr	r2, [r3, #24]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f042 0201 	orr.w	r2, r2, #1
 8006294:	619a      	str	r2, [r3, #24]
  }
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062bc:	2200      	movs	r2, #0
 80062be:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062cc:	2200      	movs	r2, #0
 80062ce:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f7ff ff9b 	bl	800620c <I2C_TreatErrorCallback>
}
 80062d6:	bf00      	nop
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80062de:	b480      	push	{r7}
 80062e0:	b085      	sub	sp, #20
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	460b      	mov	r3, r1
 80062e8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80062ee:	887b      	ldrh	r3, [r7, #2]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00f      	beq.n	8006318 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80062fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006306:	b2db      	uxtb	r3, r3
 8006308:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800630c:	2b28      	cmp	r3, #40	@ 0x28
 800630e:	d003      	beq.n	8006318 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006316:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006318:	887b      	ldrh	r3, [r7, #2]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00f      	beq.n	8006342 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006328:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006336:	2b28      	cmp	r3, #40	@ 0x28
 8006338:	d003      	beq.n	8006342 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006340:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006342:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006346:	2b00      	cmp	r3, #0
 8006348:	da03      	bge.n	8006352 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006350:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006352:	887b      	ldrh	r3, [r7, #2]
 8006354:	2b10      	cmp	r3, #16
 8006356:	d103      	bne.n	8006360 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800635e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006360:	887b      	ldrh	r3, [r7, #2]
 8006362:	2b20      	cmp	r3, #32
 8006364:	d103      	bne.n	800636e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f043 0320 	orr.w	r3, r3, #32
 800636c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800636e:	887b      	ldrh	r3, [r7, #2]
 8006370:	2b40      	cmp	r3, #64	@ 0x40
 8006372:	d103      	bne.n	800637c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800637a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6819      	ldr	r1, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	43da      	mvns	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	400a      	ands	r2, r1
 800638c:	601a      	str	r2, [r3, #0]
}
 800638e:	bf00      	nop
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d138      	bne.n	8006422 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e032      	b.n	8006424 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2224      	movs	r2, #36	@ 0x24
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063ec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6819      	ldr	r1, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0201 	orr.w	r2, r2, #1
 800640c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	e000      	b.n	8006424 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006422:	2302      	movs	r3, #2
  }
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b20      	cmp	r3, #32
 8006444:	d139      	bne.n	80064ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006450:	2302      	movs	r3, #2
 8006452:	e033      	b.n	80064bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2224      	movs	r2, #36	@ 0x24
 8006460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0201 	bic.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006482:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0201 	orr.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e000      	b.n	80064bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80064ba:	2302      	movs	r3, #2
  }
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e070      	b.n	80065bc <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fb f99c 	bl	800182c <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0201 	bic.w	r2, r2, #1
 800651a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800652a:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800653a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800654a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800655a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a19      	ldr	r2, [pc, #100]	@ (80065c4 <HAL_JPEG_Init+0xfc>)
 8006560:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a18      	ldr	r2, [pc, #96]	@ (80065c8 <HAL_JPEG_Init+0x100>)
 8006566:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fc83 	bl	8006e80 <JPEG_Set_HuffEnc_Mem>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d004      	beq.n	800658a <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e018      	b.n	80065bc <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006598:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	08016fac 	.word	0x08016fac
 80065c8:	08016fec 	.word	0x08016fec

080065cc <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <HAL_JPEG_GetInfo+0x16>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e083      	b.n	80066ee <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f003 0303 	and.w	r3, r3, #3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d103      	bne.n	80065fc <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2210      	movs	r2, #16
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	e017      	b.n	800662c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d103      	bne.n	8006612 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	e00c      	b.n	800662c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f003 0303 	and.w	r3, r3, #3
 800661c:	2b03      	cmp	r3, #3
 800661e:	d103      	bne.n	8006628 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2230      	movs	r2, #48	@ 0x30
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	e001      	b.n	800662c <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e060      	b.n	80066ee <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	0c1b      	lsrs	r3, r3, #16
 8006634:	b29a      	uxth	r2, r3
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	0c1b      	lsrs	r3, r3, #16
 8006642:	b29a      	uxth	r2, r3
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b10      	cmp	r3, #16
 800664e:	d003      	beq.n	8006658 <HAL_JPEG_GetInfo+0x8c>
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b30      	cmp	r3, #48	@ 0x30
 8006656:	d140      	bne.n	80066da <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	091b      	lsrs	r3, r3, #4
 8006660:	f003 030f 	and.w	r3, r3, #15
 8006664:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	091b      	lsrs	r3, r3, #4
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	091b      	lsrs	r3, r3, #4
 800667c:	f003 030f 	and.w	r3, r3, #15
 8006680:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d109      	bne.n	800669c <HAL_JPEG_GetInfo+0xd0>
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <HAL_JPEG_GetInfo+0xd0>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d103      	bne.n	800669c <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2202      	movs	r2, #2
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	e01d      	b.n	80066d8 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d109      	bne.n	80066b6 <HAL_JPEG_GetInfo+0xea>
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d106      	bne.n	80066b6 <HAL_JPEG_GetInfo+0xea>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2200      	movs	r2, #0
 80066b2:	605a      	str	r2, [r3, #4]
 80066b4:	e010      	b.n	80066d8 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d109      	bne.n	80066d0 <HAL_JPEG_GetInfo+0x104>
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d106      	bne.n	80066d0 <HAL_JPEG_GetInfo+0x104>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d103      	bne.n	80066d0 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2201      	movs	r2, #1
 80066cc:	605a      	str	r2, [r3, #4]
 80066ce:	e003      	b.n	80066d8 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2200      	movs	r2, #0
 80066d4:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80066d6:	e003      	b.n	80066e0 <HAL_JPEG_GetInfo+0x114>
 80066d8:	e002      	b.n	80066e0 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2200      	movs	r2, #0
 80066de:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 fa7d 	bl	8007be0 <JPEG_GetQuality>
 80066e6:	4602      	mov	r2, r0
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b085      	sub	sp, #20
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8006700:	2300      	movs	r3, #0
 8006702:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006708:	f003 030c 	and.w	r3, r3, #12
 800670c:	2b0c      	cmp	r3, #12
 800670e:	d116      	bne.n	800673e <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d033      	beq.n	8006798 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006734:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	655a      	str	r2, [r3, #84]	@ 0x54
 800673c:	e02c      	b.n	8006798 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006742:	f003 030c 	and.w	r3, r3, #12
 8006746:	2b08      	cmp	r3, #8
 8006748:	d126      	bne.n	8006798 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d009      	beq.n	8006768 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006758:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f043 0306 	orr.w	r3, r3, #6
 8006766:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d009      	beq.n	8006786 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006776:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8006784:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	43da      	mvns	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	400a      	ands	r2, r1
 8006796:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80067be:	bf00      	nop
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	60f8      	str	r0, [r7, #12]
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80067e2:	bf00      	nop
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006826:	b2db      	uxtb	r3, r3
 8006828:	3b03      	subs	r3, #3
 800682a:	2b01      	cmp	r3, #1
 800682c:	d813      	bhi.n	8006856 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006832:	f003 030c 	and.w	r3, r3, #12
 8006836:	2b08      	cmp	r3, #8
 8006838:	d103      	bne.n	8006842 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fda2 	bl	8007384 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8006840:	e00b      	b.n	800685a <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006846:	f003 030c 	and.w	r3, r3, #12
 800684a:	2b0c      	cmp	r3, #12
 800684c:	d105      	bne.n	800685a <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 f847 	bl	80078e2 <JPEG_DMA_ContinueProcess>
      break;
 8006854:	e001      	b.n	800685a <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8006856:	bf00      	nop
 8006858:	e000      	b.n	800685c <HAL_JPEG_IRQHandler+0x44>
      break;
 800685a:	bf00      	nop
  }
}
 800685c:	bf00      	nop
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8006864:	b480      	push	{r7}
 8006866:	b08b      	sub	sp, #44	@ 0x2c
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
 8006870:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8006876:	2300      	movs	r3, #0
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	e020      	b.n	80068be <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	4413      	add	r3, r2
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8006886:	6a3a      	ldr	r2, [r7, #32]
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	4413      	add	r3, r2
 800688c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006890:	d90f      	bls.n	80068b2 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e055      	b.n	8006942 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	b2da      	uxtb	r2, r3
 800689a:	68b9      	ldr	r1, [r7, #8]
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	440b      	add	r3, r1
 80068a0:	3201      	adds	r2, #1
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]
      p++;
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	3301      	adds	r3, #1
 80068aa:	623b      	str	r3, [r7, #32]
      i--;
 80068ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ae:	3b01      	subs	r3, #1
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1ee      	bne.n	8006896 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	3301      	adds	r3, #1
 80068bc:	61fb      	str	r3, [r7, #28]
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	2b0f      	cmp	r3, #15
 80068c2:	d9db      	bls.n	800687c <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	4413      	add	r3, r2
 80068ca:	2200      	movs	r2, #0
 80068cc:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	6a3a      	ldr	r2, [r7, #32]
 80068d2:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80068d4:	2300      	movs	r3, #0
 80068d6:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	617b      	str	r3, [r7, #20]
  p = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80068e2:	e027      	b.n	8006934 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	4413      	add	r3, r2
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	601a      	str	r2, [r3, #0]
      p++;
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	3301      	adds	r3, #1
 80068f4:	623b      	str	r3, [r7, #32]
      code++;
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	3301      	adds	r3, #1
 80068fa:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	4413      	add	r3, r2
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	4293      	cmp	r3, r2
 800690a:	d0eb      	beq.n	80068e4 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	2b1f      	cmp	r3, #31
 8006910:	d901      	bls.n	8006916 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e015      	b.n	8006942 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8006916:	2201      	movs	r2, #1
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	fa02 f303 	lsl.w	r3, r2, r3
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	429a      	cmp	r2, r3
 8006922:	d301      	bcc.n	8006928 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e00c      	b.n	8006942 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	61bb      	str	r3, [r7, #24]
    si++;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	3301      	adds	r3, #1
 8006932:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	4413      	add	r3, r2
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1dd      	bne.n	80068fc <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	372c      	adds	r7, #44	@ 0x2c
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8006954:	af00      	add	r7, sp, #0
 8006956:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800695a:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800695e:	6018      	str	r0, [r3, #0]
 8006960:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8006964:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8006968:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800696a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800696e:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8006972:	6818      	ldr	r0, [r3, #0]
 8006974:	f107 0308 	add.w	r3, r7, #8
 8006978:	f107 020c 	add.w	r2, r7, #12
 800697c:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8006980:	f7ff ff70 	bl	8006864 <JPEG_Bits_To_SizeCodes>
 8006984:	4603      	mov	r3, r0
 8006986:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 800698a:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8006992:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8006996:	e075      	b.n	8006a84 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 800699e:	e067      	b.n	8006a70 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80069a0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80069a4:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80069ae:	4413      	add	r3, r2
 80069b0:	3310      	adds	r3, #16
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 80069b8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d103      	bne.n	80069c8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 80069c0:	23a0      	movs	r3, #160	@ 0xa0
 80069c2:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80069c6:	e021      	b.n	8006a0c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80069c8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80069cc:	2bf0      	cmp	r3, #240	@ 0xf0
 80069ce:	d103      	bne.n	80069d8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 80069d0:	23a1      	movs	r3, #161	@ 0xa1
 80069d2:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80069d6:	e019      	b.n	8006a0c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80069d8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80069dc:	091b      	lsrs	r3, r3, #4
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 80069e6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80069ea:	f003 030f 	and.w	r3, r3, #15
 80069ee:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80069f2:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	461a      	mov	r2, r3
 8006a00:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8006a04:	4413      	add	r3, r2
 8006a06:	3b01      	subs	r3, #1
 8006a08:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8006a0c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8006a10:	2ba1      	cmp	r3, #161	@ 0xa1
 8006a12:	d901      	bls.n	8006a18 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8006a14:	2301      	movs	r3, #1
 8006a16:	e035      	b.n	8006a84 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8006a18:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8006a1c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8006a20:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8006a24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a28:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8006a2c:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8006a30:	6819      	ldr	r1, [r3, #0]
 8006a32:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8006a36:	3328      	adds	r3, #40	@ 0x28
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8006a3e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8006a42:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8006a46:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8006a4a:	4413      	add	r3, r2
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b2d9      	uxtb	r1, r3
 8006a52:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8006a56:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8006a60:	4413      	add	r3, r2
 8006a62:	460a      	mov	r2, r1
 8006a64:	701a      	strb	r2, [r3, #0]
      k++;
 8006a66:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8006a70:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8006a74:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d38e      	bcc.n	80069a0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006a9a:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8006a9e:	6018      	str	r0, [r3, #0]
 8006aa0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006aa4:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8006aa8:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8006aaa:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006aae:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8006ab2:	6818      	ldr	r0, [r3, #0]
 8006ab4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006ab8:	f107 0208 	add.w	r2, r7, #8
 8006abc:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8006ac0:	f7ff fed0 	bl	8006864 <JPEG_Bits_To_SizeCodes>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8006aca:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8006ad2:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8006ad6:	e048      	b.n	8006b6a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8006ade:	e03d      	b.n	8006b5c <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8006ae0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006ae4:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8006aee:	4413      	add	r3, r2
 8006af0:	3310      	adds	r3, #16
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8006af8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8006afc:	2b0b      	cmp	r3, #11
 8006afe:	d901      	bls.n	8006b04 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8006b00:	2301      	movs	r3, #1
 8006b02:	e032      	b.n	8006b6a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8006b04:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006b08:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8006b0c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8006b10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b14:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006b18:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8006b1c:	6819      	ldr	r1, [r3, #0]
 8006b1e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8006b22:	3302      	adds	r3, #2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8006b2a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006b2e:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8006b32:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8006b36:	4413      	add	r3, r2
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b2d9      	uxtb	r1, r3
 8006b3e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006b42:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8006b4c:	4413      	add	r3, r2
 8006b4e:	460a      	mov	r2, r1
 8006b50:	701a      	strb	r2, [r3, #0]
      k++;
 8006b52:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8006b56:	3301      	adds	r3, #1
 8006b58:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8006b5c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8006b60:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d3bb      	bcc.n	8006ae0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b09a      	sub	sp, #104	@ 0x68
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d106      	bne.n	8006b9c <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8006b96:	3318      	adds	r3, #24
 8006b98:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b9a:	e00f      	b.n	8006bbc <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d106      	bne.n	8006bb8 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8006bb2:	3318      	adds	r3, #24
 8006bb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bb6:	e001      	b.n	8006bbc <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e059      	b.n	8006c70 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d055      	beq.n	8006c6e <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8006bc2:	f107 0314 	add.w	r3, r7, #20
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	68b8      	ldr	r0, [r7, #8]
 8006bca:	f7ff ff60 	bl	8006a8e <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8006bd4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8006bdc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006be0:	e046      	b.n	8006c70 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8006be2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006be4:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8006be6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006be8:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8006bec:	601a      	str	r2, [r3, #0]
    addressDef++;
 8006bee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8006bf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006bf6:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8006bfa:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8006bfc:	230c      	movs	r3, #12
 8006bfe:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8006c00:	e032      	b.n	8006c68 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8006c02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c04:	3b01      	subs	r3, #1
 8006c06:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8006c08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c0a:	3b04      	subs	r3, #4
 8006c0c:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8006c0e:	f107 0214 	add.w	r2, r7, #20
 8006c12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c14:	4413      	add	r3, r2
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	021b      	lsls	r3, r3, #8
 8006c1a:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006c1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c20:	3302      	adds	r3, #2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	3368      	adds	r3, #104	@ 0x68
 8006c26:	443b      	add	r3, r7
 8006c28:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8006c32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c34:	3b01      	subs	r3, #1
 8006c36:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8006c38:	f107 0214 	add.w	r2, r7, #20
 8006c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c3e:	4413      	add	r3, r2
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	021b      	lsls	r3, r3, #8
 8006c44:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006c48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c4a:	3302      	adds	r3, #2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	3368      	adds	r3, #104	@ 0x68
 8006c50:	443b      	add	r3, r7
 8006c52:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8006c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c5e:	041a      	lsls	r2, r3, #16
 8006c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c62:	431a      	orrs	r2, r3
 8006c64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c66:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8006c68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d8c9      	bhi.n	8006c02 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3768      	adds	r7, #104	@ 0x68
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006c84:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8006c88:	6018      	str	r0, [r3, #0]
 8006c8a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006c8e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8006c92:	6019      	str	r1, [r3, #0]
 8006c94:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006c98:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8006c9c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8006c9e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006ca2:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cae:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8006cb2:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8006cb6:	6812      	ldr	r2, [r2, #0]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d10c      	bne.n	8006cd6 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8006cbc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006cc0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ccc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8006cd0:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8006cd4:	e01d      	b.n	8006d12 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8006cd6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006cda:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8006ce6:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8006cea:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8006cee:	6812      	ldr	r2, [r2, #0]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d10c      	bne.n	8006d0e <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8006cf4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006cf8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8006d04:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8006d08:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8006d0c:	e001      	b.n	8006d12 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e0a8      	b.n	8006e64 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8006d12:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006d16:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 80a0 	beq.w	8006e62 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8006d22:	f107 0214 	add.w	r2, r7, #20
 8006d26:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006d2a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8006d2e:	4611      	mov	r1, r2
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	f7ff fe0c 	bl	800694e <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8006d3c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8006d44:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8006d48:	e08c      	b.n	8006e64 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8006d4a:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8006d4e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8006d52:	2300      	movs	r3, #0
 8006d54:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8006d58:	e00e      	b.n	8006d78 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8006d5a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006d5e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8006d62:	601a      	str	r2, [r3, #0]
      addressDef++;
 8006d64:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006d68:	3304      	adds	r3, #4
 8006d6a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8006d6e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006d72:	3301      	adds	r3, #1
 8006d74:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8006d78:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d9ec      	bls.n	8006d5a <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8006d80:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006d84:	4a3a      	ldr	r2, [pc, #232]	@ (8006e70 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8006d86:	601a      	str	r2, [r3, #0]
    addressDef++;
 8006d88:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8006d92:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006d96:	4a37      	ldr	r2, [pc, #220]	@ (8006e74 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8006d98:	601a      	str	r2, [r3, #0]
    addressDef++;
 8006d9a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006d9e:	3304      	adds	r3, #4
 8006da0:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8006da4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006da8:	4a33      	ldr	r2, [pc, #204]	@ (8006e78 <JPEG_Set_HuffAC_Mem+0x200>)
 8006daa:	601a      	str	r2, [r3, #0]
    addressDef++;
 8006dac:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006db0:	3304      	adds	r3, #4
 8006db2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8006db6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006dba:	4a30      	ldr	r2, [pc, #192]	@ (8006e7c <JPEG_Set_HuffAC_Mem+0x204>)
 8006dbc:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8006dbe:	23a2      	movs	r3, #162	@ 0xa2
 8006dc0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8006dc4:	e049      	b.n	8006e5a <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8006dc6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8006dd0:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8006dd4:	3b04      	subs	r3, #4
 8006dd6:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8006dda:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006dde:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8006de2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006de6:	4413      	add	r3, r2
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006df0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006df4:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8006df8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006dfc:	3328      	adds	r3, #40	@ 0x28
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	440b      	add	r3, r1
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	4313      	orrs	r3, r2
 8006e08:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8006e0c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006e10:	3b01      	subs	r3, #1
 8006e12:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8006e16:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006e1a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8006e1e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006e22:	4413      	add	r3, r2
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	021b      	lsls	r3, r3, #8
 8006e28:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006e2c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006e30:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8006e34:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006e38:	3328      	adds	r3, #40	@ 0x28
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	440b      	add	r3, r1
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8006e48:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8006e4c:	041a      	lsls	r2, r3, #16
 8006e4e:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8006e52:	431a      	orrs	r2, r3
 8006e54:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8006e58:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8006e5a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d8b1      	bhi.n	8006dc6 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	0fd10fd0 	.word	0x0fd10fd0
 8006e74:	0fd30fd2 	.word	0x0fd30fd2
 8006e78:	0fd50fd4 	.word	0x0fd50fd4
 8006e7c:	0fd70fd6 	.word	0x0fd70fd6

08006e80 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f84d 	bl	8006f28 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8006e96:	461a      	mov	r2, r3
 8006e98:	491f      	ldr	r1, [pc, #124]	@ (8006f18 <JPEG_Set_HuffEnc_Mem+0x98>)
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff feec 	bl	8006c78 <JPEG_Set_HuffAC_Mem>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	e030      	b.n	8006f10 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	4918      	ldr	r1, [pc, #96]	@ (8006f1c <JPEG_Set_HuffEnc_Mem+0x9c>)
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff fedc 	bl	8006c78 <JPEG_Set_HuffAC_Mem>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	e020      	b.n	8006f10 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	4911      	ldr	r1, [pc, #68]	@ (8006f20 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff fe4a 	bl	8006b74 <JPEG_Set_HuffDC_Mem>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	e010      	b.n	8006f10 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	490a      	ldr	r1, [pc, #40]	@ (8006f24 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff fe3a 	bl	8006b74 <JPEG_Set_HuffDC_Mem>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	e000      	b.n	8006f10 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	08016e04 	.word	0x08016e04
 8006f1c:	08016eb8 	.word	0x08016eb8
 8006f20:	08016dcc 	.word	0x08016dcc
 8006f24:	08016de8 	.word	0x08016de8

08006f28 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b08b      	sub	sp, #44	@ 0x2c
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8006f30:	4b80      	ldr	r3, [pc, #512]	@ (8007134 <JPEG_Set_Huff_DHTMem+0x20c>)
 8006f32:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8006f34:	4b80      	ldr	r3, [pc, #512]	@ (8007138 <JPEG_Set_Huff_DHTMem+0x210>)
 8006f36:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8006f38:	4b80      	ldr	r3, [pc, #512]	@ (800713c <JPEG_Set_Huff_DHTMem+0x214>)
 8006f3a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8006f3c:	4b80      	ldr	r3, [pc, #512]	@ (8007140 <JPEG_Set_Huff_DHTMem+0x218>)
 8006f3e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006f48:	330c      	adds	r3, #12
 8006f4a:	623b      	str	r3, [r7, #32]
  index = 16;
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006f50:	e01d      	b.n	8006f8e <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	3b01      	subs	r3, #1
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	5cd3      	ldrb	r3, [r2, r3]
 8006f5a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	3b02      	subs	r3, #2
 8006f60:	6979      	ldr	r1, [r7, #20]
 8006f62:	5ccb      	ldrb	r3, [r1, r3]
 8006f64:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006f66:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6a:	3b03      	subs	r3, #3
 8006f6c:	6979      	ldr	r1, [r7, #20]
 8006f6e:	5ccb      	ldrb	r3, [r1, r3]
 8006f70:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006f72:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8006f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f76:	3a04      	subs	r2, #4
 8006f78:	6979      	ldr	r1, [r7, #20]
 8006f7a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006f7c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	601a      	str	r2, [r3, #0]
    address--;
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	3b04      	subs	r3, #4
 8006f86:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8a:	3b04      	subs	r3, #4
 8006f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d8de      	bhi.n	8006f52 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006f9c:	3318      	adds	r3, #24
 8006f9e:	623b      	str	r3, [r7, #32]
  index = 12;
 8006fa0:	230c      	movs	r3, #12
 8006fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006fa4:	e021      	b.n	8006fea <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4413      	add	r3, r2
 8006fae:	7c1b      	ldrb	r3, [r3, #16]
 8006fb0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	3b02      	subs	r3, #2
 8006fb6:	6979      	ldr	r1, [r7, #20]
 8006fb8:	440b      	add	r3, r1
 8006fba:	7c1b      	ldrb	r3, [r3, #16]
 8006fbc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006fbe:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc2:	3b03      	subs	r3, #3
 8006fc4:	6979      	ldr	r1, [r7, #20]
 8006fc6:	440b      	add	r3, r1
 8006fc8:	7c1b      	ldrb	r3, [r3, #16]
 8006fca:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006fcc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8006fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fd0:	3a04      	subs	r2, #4
 8006fd2:	6979      	ldr	r1, [r7, #20]
 8006fd4:	440a      	add	r2, r1
 8006fd6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006fd8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	601a      	str	r2, [r3, #0]
    address--;
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	3b04      	subs	r3, #4
 8006fe2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	3b04      	subs	r3, #4
 8006fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d8da      	bhi.n	8006fa6 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006ff8:	3328      	adds	r3, #40	@ 0x28
 8006ffa:	623b      	str	r3, [r7, #32]
  index = 16;
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8007000:	e01d      	b.n	800703e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007004:	3b01      	subs	r3, #1
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	5cd3      	ldrb	r3, [r2, r3]
 800700a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	3b02      	subs	r3, #2
 8007010:	69f9      	ldr	r1, [r7, #28]
 8007012:	5ccb      	ldrb	r3, [r1, r3]
 8007014:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007016:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8007018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701a:	3b03      	subs	r3, #3
 800701c:	69f9      	ldr	r1, [r7, #28]
 800701e:	5ccb      	ldrb	r3, [r1, r3]
 8007020:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007022:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8007024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007026:	3a04      	subs	r2, #4
 8007028:	69f9      	ldr	r1, [r7, #28]
 800702a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800702c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	601a      	str	r2, [r3, #0]
    address--;
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	3b04      	subs	r3, #4
 8007036:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8007038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703a:	3b04      	subs	r3, #4
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007040:	2b03      	cmp	r3, #3
 8007042:	d8de      	bhi.n	8007002 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800704c:	33cc      	adds	r3, #204	@ 0xcc
 800704e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	4b3b      	ldr	r3, [pc, #236]	@ (8007144 <JPEG_Set_Huff_DHTMem+0x21c>)
 8007056:	4013      	ands	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8007060:	021a      	lsls	r2, r3, #8
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4313      	orrs	r3, r2
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	3b04      	subs	r3, #4
 800707a:	623b      	str	r3, [r7, #32]
  index = 160;
 800707c:	23a0      	movs	r3, #160	@ 0xa0
 800707e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8007080:	e021      	b.n	80070c6 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007084:	3b01      	subs	r3, #1
 8007086:	69fa      	ldr	r2, [r7, #28]
 8007088:	4413      	add	r3, r2
 800708a:	7c1b      	ldrb	r3, [r3, #16]
 800708c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007090:	3b02      	subs	r3, #2
 8007092:	69f9      	ldr	r1, [r7, #28]
 8007094:	440b      	add	r3, r1
 8007096:	7c1b      	ldrb	r3, [r3, #16]
 8007098:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800709a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800709c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709e:	3b03      	subs	r3, #3
 80070a0:	69f9      	ldr	r1, [r7, #28]
 80070a2:	440b      	add	r3, r1
 80070a4:	7c1b      	ldrb	r3, [r3, #16]
 80070a6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80070a8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80070aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ac:	3a04      	subs	r2, #4
 80070ae:	69f9      	ldr	r1, [r7, #28]
 80070b0:	440a      	add	r2, r1
 80070b2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80070b4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	601a      	str	r2, [r3, #0]
    address--;
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	3b04      	subs	r3, #4
 80070be:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80070c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c2:	3b04      	subs	r3, #4
 80070c4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d8da      	bhi.n	8007082 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80070d4:	33cc      	adds	r3, #204	@ 0xcc
 80070d6:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	785b      	ldrb	r3, [r3, #1]
 80070e4:	061a      	lsls	r2, r3, #24
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	431a      	orrs	r2, r3
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	041b      	lsls	r3, r3, #16
 80070f0:	4313      	orrs	r3, r2
 80070f2:	60fb      	str	r3, [r7, #12]
  *address = value;
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8007102:	33dc      	adds	r3, #220	@ 0xdc
 8007104:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	4b0e      	ldr	r3, [pc, #56]	@ (8007144 <JPEG_Set_Huff_DHTMem+0x21c>)
 800710c:	4013      	ands	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	7bdb      	ldrb	r3, [r3, #15]
 8007114:	021a      	lsls	r2, r3, #8
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4313      	orrs	r3, r2
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	7b92      	ldrb	r2, [r2, #14]
 800711e:	4313      	orrs	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]
  *address = value;
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	3b04      	subs	r3, #4
 800712c:	623b      	str	r3, [r7, #32]
  index = 12;
 800712e:	230c      	movs	r3, #12
 8007130:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8007132:	e027      	b.n	8007184 <JPEG_Set_Huff_DHTMem+0x25c>
 8007134:	08016e04 	.word	0x08016e04
 8007138:	08016eb8 	.word	0x08016eb8
 800713c:	08016dcc 	.word	0x08016dcc
 8007140:	08016de8 	.word	0x08016de8
 8007144:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714a:	3301      	adds	r3, #1
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	5cd3      	ldrb	r3, [r2, r3]
 8007150:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8007152:	6939      	ldr	r1, [r7, #16]
 8007154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007156:	440b      	add	r3, r1
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800715c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007160:	3b01      	subs	r3, #1
 8007162:	6939      	ldr	r1, [r7, #16]
 8007164:	5ccb      	ldrb	r3, [r1, r3]
 8007166:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8007168:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800716a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800716c:	3a02      	subs	r2, #2
 800716e:	6939      	ldr	r1, [r7, #16]
 8007170:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8007172:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	601a      	str	r2, [r3, #0]
    address--;
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	3b04      	subs	r3, #4
 800717c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007180:	3b04      	subs	r3, #4
 8007182:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	2b03      	cmp	r3, #3
 8007188:	d8de      	bhi.n	8007148 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8007192:	33dc      	adds	r3, #220	@ 0xdc
 8007194:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	b29b      	uxth	r3, r3
 800719c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	7c5b      	ldrb	r3, [r3, #17]
 80071a2:	061a      	lsls	r2, r3, #24
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	431a      	orrs	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	7c1b      	ldrb	r3, [r3, #16]
 80071ac:	041b      	lsls	r3, r3, #16
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80071c0:	33e8      	adds	r3, #232	@ 0xe8
 80071c2:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	4b6d      	ldr	r3, [pc, #436]	@ (8007380 <JPEG_Set_Huff_DHTMem+0x458>)
 80071ca:	4013      	ands	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	7edb      	ldrb	r3, [r3, #27]
 80071d2:	021a      	lsls	r2, r3, #8
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	7e92      	ldrb	r2, [r2, #26]
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
  *address = value;
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	3b04      	subs	r3, #4
 80071ea:	623b      	str	r3, [r7, #32]
  index = 8;
 80071ec:	2308      	movs	r3, #8
 80071ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80071f0:	e021      	b.n	8007236 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	3301      	adds	r3, #1
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	4413      	add	r3, r2
 80071fa:	7c1b      	ldrb	r3, [r3, #16]
 80071fc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80071fe:	6939      	ldr	r1, [r7, #16]
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	440b      	add	r3, r1
 8007204:	3310      	adds	r3, #16
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800720a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800720c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720e:	3b01      	subs	r3, #1
 8007210:	6939      	ldr	r1, [r7, #16]
 8007212:	440b      	add	r3, r1
 8007214:	7c1b      	ldrb	r3, [r3, #16]
 8007216:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8007218:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800721a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800721c:	3a02      	subs	r2, #2
 800721e:	6939      	ldr	r1, [r7, #16]
 8007220:	440a      	add	r2, r1
 8007222:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007224:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	601a      	str	r2, [r3, #0]
    address--;
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	3b04      	subs	r3, #4
 800722e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8007230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007232:	3b04      	subs	r3, #4
 8007234:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	2b03      	cmp	r3, #3
 800723a:	d8da      	bhi.n	80071f2 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8007244:	33e8      	adds	r3, #232	@ 0xe8
 8007246:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	b29b      	uxth	r3, r3
 800724e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	785b      	ldrb	r3, [r3, #1]
 8007254:	061a      	lsls	r2, r3, #24
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	431a      	orrs	r2, r3
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	041b      	lsls	r3, r3, #16
 8007260:	4313      	orrs	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]
  *address = value;
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8007272:	33f8      	adds	r3, #248	@ 0xf8
 8007274:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	4b41      	ldr	r3, [pc, #260]	@ (8007380 <JPEG_Set_Huff_DHTMem+0x458>)
 800727c:	4013      	ands	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	7bdb      	ldrb	r3, [r3, #15]
 8007284:	021a      	lsls	r2, r3, #8
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	7b92      	ldrb	r2, [r2, #14]
 800728e:	4313      	orrs	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]
  *address = value;
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	3b04      	subs	r3, #4
 800729c:	623b      	str	r3, [r7, #32]
  index = 12;
 800729e:	230c      	movs	r3, #12
 80072a0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80072a2:	e01d      	b.n	80072e0 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80072a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a6:	3301      	adds	r3, #1
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	5cd3      	ldrb	r3, [r2, r3]
 80072ac:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80072ae:	69b9      	ldr	r1, [r7, #24]
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	440b      	add	r3, r1
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80072b8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80072ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072bc:	3b01      	subs	r3, #1
 80072be:	69b9      	ldr	r1, [r7, #24]
 80072c0:	5ccb      	ldrb	r3, [r1, r3]
 80072c2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80072c4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 80072c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072c8:	3a02      	subs	r2, #2
 80072ca:	69b9      	ldr	r1, [r7, #24]
 80072cc:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80072ce:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	601a      	str	r2, [r3, #0]
    address--;
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	3b04      	subs	r3, #4
 80072d8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	3b04      	subs	r3, #4
 80072de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d8de      	bhi.n	80072a4 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80072ee:	33f8      	adds	r3, #248	@ 0xf8
 80072f0:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	7c5b      	ldrb	r3, [r3, #17]
 80072fe:	061a      	lsls	r2, r3, #24
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	431a      	orrs	r2, r3
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	7c1b      	ldrb	r3, [r3, #16]
 8007308:	041b      	lsls	r3, r3, #16
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800731c:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8007320:	623b      	str	r3, [r7, #32]
  index = 160;
 8007322:	23a0      	movs	r3, #160	@ 0xa0
 8007324:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8007326:	e021      	b.n	800736c <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732a:	3301      	adds	r3, #1
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	4413      	add	r3, r2
 8007330:	7c1b      	ldrb	r3, [r3, #16]
 8007332:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007334:	69b9      	ldr	r1, [r7, #24]
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	440b      	add	r3, r1
 800733a:	3310      	adds	r3, #16
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007340:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007344:	3b01      	subs	r3, #1
 8007346:	69b9      	ldr	r1, [r7, #24]
 8007348:	440b      	add	r3, r1
 800734a:	7c1b      	ldrb	r3, [r3, #16]
 800734c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800734e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8007350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007352:	3a02      	subs	r2, #2
 8007354:	69b9      	ldr	r1, [r7, #24]
 8007356:	440a      	add	r2, r1
 8007358:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800735a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	601a      	str	r2, [r3, #0]
    address--;
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	3b04      	subs	r3, #4
 8007364:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	3b04      	subs	r3, #4
 800736a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736e:	2b03      	cmp	r3, #3
 8007370:	d8da      	bhi.n	8007328 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8007372:	bf00      	nop
 8007374:	bf00      	nop
 8007376:	372c      	adds	r7, #44	@ 0x2c
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	ffff0000 	.word	0xffff0000

08007384 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d125      	bne.n	80073e4 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800739e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d01e      	beq.n	80073e4 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3304      	adds	r3, #4
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff f90d 	bl	80065cc <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fa15 	bl	80067ee <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073e2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d116      	bne.n	800741e <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d004      	beq.n	8007408 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80073fe:	2108      	movs	r1, #8
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f988 	bl	8007716 <JPEG_ReadInputData>
 8007406:	e00a      	b.n	800741e <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800740e:	f003 0304 	and.w	r3, r3, #4
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8007416:	2101      	movs	r1, #1
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f97c 	bl	8007716 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d116      	bne.n	8007458 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007430:	f003 0308 	and.w	r3, r3, #8
 8007434:	2b00      	cmp	r3, #0
 8007436:	d004      	beq.n	8007442 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8007438:	2108      	movs	r1, #8
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f864 	bl	8007508 <JPEG_StoreOutputData>
 8007440:	e00a      	b.n	8007458 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8007450:	2101      	movs	r1, #1
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f858 	bl	8007508 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800745e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007462:	2b20      	cmp	r3, #32
 8007464:	d14b      	bne.n	80074fe <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 0201 	bic.w	r2, r2, #1
 8007474:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747a:	f003 030c 	and.w	r3, r3, #12
 800747e:	2b08      	cmp	r3, #8
 8007480:	d107      	bne.n	8007492 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007490:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80074a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	69d9      	ldr	r1, [r3, #28]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b2:	461a      	mov	r2, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7f9 feeb 	bl	8001290 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c4:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ca:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f003 0303 	and.w	r3, r3, #3
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d103      	bne.n	80074f4 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff f989 	bl	8006804 <HAL_JPEG_DecodeCpltCallback>
 80074f2:	e002      	b.n	80074fa <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7f9 fee7 	bl	80012c8 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e000      	b.n	8007500 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	440b      	add	r3, r1
 8007520:	429a      	cmp	r2, r3
 8007522:	d34b      	bcc.n	80075bc <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	e031      	b.n	800758e <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007530:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	69da      	ldr	r2, [r3, #28]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753a:	4413      	add	r3, r2
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	b2d2      	uxtb	r2, r2
 8007540:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	0a19      	lsrs	r1, r3, #8
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	69da      	ldr	r2, [r3, #28]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754e:	3301      	adds	r3, #1
 8007550:	4413      	add	r3, r2
 8007552:	b2ca      	uxtb	r2, r1
 8007554:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	0c19      	lsrs	r1, r3, #16
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69da      	ldr	r2, [r3, #28]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007562:	3302      	adds	r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	b2ca      	uxtb	r2, r1
 8007568:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	0e19      	lsrs	r1, r3, #24
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	69da      	ldr	r2, [r3, #28]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007576:	3303      	adds	r3, #3
 8007578:	4413      	add	r3, r2
 800757a:	b2ca      	uxtb	r2, r1
 800757c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007582:	1d1a      	adds	r2, r3, #4
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	3301      	adds	r3, #1
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	429a      	cmp	r2, r3
 8007594:	d3c9      	bcc.n	800752a <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759e:	429a      	cmp	r2, r3
 80075a0:	f040 80b5 	bne.w	800770e <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	69d9      	ldr	r1, [r3, #28]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ac:	461a      	mov	r2, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7f9 fe6e 	bl	8001290 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 80075ba:	e0a8      	b.n	800770e <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c4:	429a      	cmp	r2, r3
 80075c6:	f240 80a2 	bls.w	800770e <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	089b      	lsrs	r3, r3, #2
 80075d6:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 80075d8:	2300      	movs	r3, #0
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	e031      	b.n	8007642 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075e4:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69da      	ldr	r2, [r3, #28]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ee:	4413      	add	r3, r2
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	b2d2      	uxtb	r2, r2
 80075f4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	0a19      	lsrs	r1, r3, #8
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	69da      	ldr	r2, [r3, #28]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007602:	3301      	adds	r3, #1
 8007604:	4413      	add	r3, r2
 8007606:	b2ca      	uxtb	r2, r1
 8007608:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	0c19      	lsrs	r1, r3, #16
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	69da      	ldr	r2, [r3, #28]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007616:	3302      	adds	r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	b2ca      	uxtb	r2, r1
 800761c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	0e19      	lsrs	r1, r3, #24
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	69da      	ldr	r2, [r3, #28]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762a:	3303      	adds	r3, #3
 800762c:	4413      	add	r3, r2
 800762e:	b2ca      	uxtb	r2, r1
 8007630:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007636:	1d1a      	adds	r2, r3, #4
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	3301      	adds	r3, #1
 8007640:	617b      	str	r3, [r7, #20]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	429a      	cmp	r2, r3
 8007648:	d3c9      	bcc.n	80075de <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007652:	429a      	cmp	r2, r3
 8007654:	d10b      	bne.n	800766e <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69d9      	ldr	r1, [r3, #28]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765e:	461a      	mov	r2, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7f9 fe15 	bl	8001290 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800766c:	e04f      	b.n	800770e <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007680:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8007682:	2300      	movs	r3, #0
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	e015      	b.n	80076b4 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f003 0303 	and.w	r3, r3, #3
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	fa22 f103 	lsr.w	r1, r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	69da      	ldr	r2, [r3, #28]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769e:	4413      	add	r3, r2
 80076a0:	b2ca      	uxtb	r2, r1
 80076a2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	3301      	adds	r3, #1
 80076b2:	617b      	str	r3, [r7, #20]
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d3e5      	bcc.n	8007688 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	69d9      	ldr	r1, [r3, #28]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c4:	461a      	mov	r2, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7f9 fde2 	bl	8001290 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f1c3 0304 	rsb	r3, r3, #4
 80076d8:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	e013      	b.n	8007708 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	fa22 f103 	lsr.w	r1, r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69da      	ldr	r2, [r3, #28]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f2:	4413      	add	r3, r2
 80076f4:	b2ca      	uxtb	r2, r1
 80076f6:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fc:	1c5a      	adds	r2, r3, #1
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	3301      	adds	r3, #1
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2b03      	cmp	r3, #3
 800770c:	d9e8      	bls.n	80076e0 <JPEG_StoreOutputData+0x1d8>
}
 800770e:	bf00      	nop
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b088      	sub	sp, #32
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <JPEG_ReadInputData+0x1c>
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d104      	bne.n	800773c <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8007732:	2101      	movs	r1, #1
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7fe ffde 	bl	80066f6 <HAL_JPEG_Pause>
 800773a:	e028      	b.n	800778e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a1b      	ldr	r3, [r3, #32]
 8007744:	429a      	cmp	r2, r3
 8007746:	d906      	bls.n	8007756 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	e01b      	b.n	800778e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	429a      	cmp	r2, r3
 8007760:	d115      	bne.n	800778e <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7f9 fd5f 	bl	800122c <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007772:	2b04      	cmp	r3, #4
 8007774:	d905      	bls.n	8007782 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800777a:	f023 0203 	bic.w	r2, r3, #3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800778c:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007792:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007796:	2b00      	cmp	r3, #0
 8007798:	f040 809f 	bne.w	80078da <JPEG_ReadInputData+0x1c4>
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 809b 	beq.w	80078da <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	089b      	lsrs	r3, r3, #2
 80077a8:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d335      	bcc.n	800781e <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 80077b2:	2300      	movs	r3, #0
 80077b4:	61bb      	str	r3, [r7, #24]
 80077b6:	e02d      	b.n	8007814 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a1b      	ldr	r3, [r3, #32]
 80077bc:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	699a      	ldr	r2, [r3, #24]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	4413      	add	r3, r2
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	4413      	add	r3, r2
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80077d8:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6999      	ldr	r1, [r3, #24]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3302      	adds	r3, #2
 80077e4:	440b      	add	r3, r1
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80077ea:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	699a      	ldr	r2, [r3, #24]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3303      	adds	r3, #3
 80077f6:	4413      	add	r3, r2
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007800:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007802:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	1d1a      	adds	r2, r3, #4
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	3301      	adds	r3, #1
 8007812:	61bb      	str	r3, [r7, #24]
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d3cd      	bcc.n	80077b8 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800781c:	e05d      	b.n	80078da <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d035      	beq.n	8007890 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8007824:	2300      	movs	r3, #0
 8007826:	61bb      	str	r3, [r7, #24]
 8007828:	e02d      	b.n	8007886 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	699a      	ldr	r2, [r3, #24]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4413      	add	r3, r2
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	699a      	ldr	r2, [r3, #24]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	3301      	adds	r3, #1
 8007844:	4413      	add	r3, r2
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800784a:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6999      	ldr	r1, [r3, #24]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3302      	adds	r3, #2
 8007856:	440b      	add	r3, r1
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800785c:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	699a      	ldr	r2, [r3, #24]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3303      	adds	r3, #3
 8007868:	4413      	add	r3, r2
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007872:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007874:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	1d1a      	adds	r2, r3, #4
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	3301      	adds	r3, #1
 8007884:	61bb      	str	r3, [r7, #24]
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	429a      	cmp	r2, r3
 800788c:	d3cd      	bcc.n	800782a <JPEG_ReadInputData+0x114>
}
 800788e:	e024      	b.n	80078da <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8007890:	2300      	movs	r3, #0
 8007892:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8007894:	2300      	movs	r3, #0
 8007896:	61bb      	str	r3, [r7, #24]
 8007898:	e017      	b.n	80078ca <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	699a      	ldr	r2, [r3, #24]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	4413      	add	r3, r2
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	fa02 f303 	lsl.w	r3, r2, r3
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	1c5a      	adds	r2, r3, #1
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	3301      	adds	r3, #1
 80078c8:	61bb      	str	r3, [r7, #24]
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d3e3      	bcc.n	800789a <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80078da:	bf00      	nop
 80078dc:	3720      	adds	r7, #32
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b082      	sub	sp, #8
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ee:	f003 0303 	and.w	r3, r3, #3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d125      	bne.n	8007942 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007900:	2b00      	cmp	r3, #0
 8007902:	d01e      	beq.n	8007942 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3304      	adds	r3, #4
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7fe fe5e 	bl	80065cc <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3304      	adds	r3, #4
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7fe ff66 	bl	80067ee <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007930:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007940:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b00      	cmp	r3, #0
 800794e:	d039      	beq.n	80079c4 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007954:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0201 	bic.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800797a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800798a:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d104      	bne.n	80079a4 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fa1a 	bl	8007dd8 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d105      	bne.n	80079be <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fa0e 	bl	8007dd8 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 80079bc:	e002      	b.n	80079c4 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f804 	bl	80079cc <JPEG_DMA_EndProcess>
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80079e4:	1ad2      	subs	r2, r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d10a      	bne.n	8007a0c <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	69d9      	ldr	r1, [r3, #28]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fe:	461a      	mov	r2, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7f9 fc45 	bl	8001290 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d134      	bne.n	8007a84 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	69d9      	ldr	r1, [r3, #28]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7f9 fc2f 	bl	8001290 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 0201 	bic.w	r2, r2, #1
 8007a46:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4c:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a52:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f003 0303 	and.w	r3, r3, #3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d103      	bne.n	8007a7c <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7fe fec5 	bl	8006804 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8007a7a:	e00c      	b.n	8007a96 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7f9 fc23 	bl	80012c8 <HAL_JPEG_EncodeCpltCallback>
}
 8007a82:	e008      	b.n	8007a96 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d102      	bne.n	8007a96 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f804 	bl	8007a9e <JPEG_DMA_PollResidualData>
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b086      	sub	sp, #24
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8007aa6:	2310      	movs	r3, #16
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	e04f      	b.n	8007b4c <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d146      	bne.n	8007b46 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007abe:	f003 0310 	and.w	r3, r3, #16
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d03f      	beq.n	8007b46 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007acc:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	69da      	ldr	r2, [r3, #28]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad6:	4413      	add	r3, r2
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	b2d2      	uxtb	r2, r2
 8007adc:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	0a19      	lsrs	r1, r3, #8
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	69da      	ldr	r2, [r3, #28]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aea:	3301      	adds	r3, #1
 8007aec:	4413      	add	r3, r2
 8007aee:	b2ca      	uxtb	r2, r1
 8007af0:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	0c19      	lsrs	r1, r3, #16
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	69da      	ldr	r2, [r3, #28]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afe:	3302      	adds	r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	b2ca      	uxtb	r2, r1
 8007b04:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	0e19      	lsrs	r1, r3, #24
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	69da      	ldr	r2, [r3, #28]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b12:	3303      	adds	r3, #3
 8007b14:	4413      	add	r3, r2
 8007b16:	b2ca      	uxtb	r2, r1
 8007b18:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1e:	1d1a      	adds	r2, r3, #4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d10a      	bne.n	8007b46 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	69d9      	ldr	r1, [r3, #28]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b38:	461a      	mov	r2, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7f9 fba8 	bl	8001290 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	617b      	str	r3, [r7, #20]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1ac      	bne.n	8007aac <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b56:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b5e:	f003 0310 	and.w	r3, r3, #16
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d004      	beq.n	8007b70 <JPEG_DMA_PollResidualData+0xd2>
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d133      	bne.n	8007bd8 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0201 	bic.w	r2, r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	69d9      	ldr	r1, [r3, #28]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b90:	461a      	mov	r2, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7f9 fb7c 	bl	8001290 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba2:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba8:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d103      	bne.n	8007bd2 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7fe fe1a 	bl	8006804 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8007bd0:	e002      	b.n	8007bd8 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7f9 fb78 	bl	80012c8 <HAL_JPEG_EncodeCpltCallback>
}
 8007bd8:	bf00      	nop
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b08b      	sub	sp, #44	@ 0x2c
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3350      	adds	r3, #80	@ 0x50
 8007bf2:	61bb      	str	r3, [r7, #24]

  i = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007bf8:	e042      	b.n	8007c80 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8007c00:	2300      	movs	r3, #0
 8007c02:	61fb      	str	r3, [r7, #28]
 8007c04:	e033      	b.n	8007c6e <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	00db      	lsls	r3, r3, #3
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d103      	bne.n	8007c22 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1c:	3364      	adds	r3, #100	@ 0x64
 8007c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c20:	e022      	b.n	8007c68 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	2264      	movs	r2, #100	@ 0x64
 8007c26:	fb02 f303 	mul.w	r3, r2, r3
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007c2e:	6a38      	ldr	r0, [r7, #32]
 8007c30:	69f9      	ldr	r1, [r7, #28]
 8007c32:	4401      	add	r1, r0
 8007c34:	4818      	ldr	r0, [pc, #96]	@ (8007c98 <JPEG_GetQuality+0xb8>)
 8007c36:	5c41      	ldrb	r1, [r0, r1]
 8007c38:	440a      	add	r2, r1
 8007c3a:	7812      	ldrb	r2, [r2, #0]
 8007c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2b64      	cmp	r3, #100	@ 0x64
 8007c46:	d807      	bhi.n	8007c58 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8007c4e:	085b      	lsrs	r3, r3, #1
 8007c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c52:	4413      	add	r3, r2
 8007c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c56:	e007      	b.n	8007c68 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8007c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c64:	4413      	add	r3, r2
 8007c66:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	61fb      	str	r3, [r7, #28]
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	2b03      	cmp	r3, #3
 8007c72:	d9c8      	bls.n	8007c06 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	3304      	adds	r3, #4
 8007c78:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	2b3c      	cmp	r3, #60	@ 0x3c
 8007c84:	d9b9      	bls.n	8007bfa <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8007c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c88:	099b      	lsrs	r3, r3, #6
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	372c      	adds	r7, #44	@ 0x2c
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	08016f6c 	.word	0x08016f6c

08007c9c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ca4:	f7fa fc7a 	bl	800259c <HAL_GetTick>
 8007ca8:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e03b      	b.n	8007d2c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0201 	bic.w	r2, r2, #1
 8007cd2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007cd4:	e00f      	b.n	8007cf6 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8007cd6:	f7fa fc61 	bl	800259c <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b05      	cmp	r3, #5
 8007ce2:	d908      	bls.n	8007cf6 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2240      	movs	r2, #64	@ 0x40
 8007ce8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2203      	movs	r2, #3
 8007cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e01a      	b.n	8007d2c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1e8      	bne.n	8007cd6 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f9e3 	bl	80080d0 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e03e      	b.n	8007dcc <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d101      	bne.n	8007d5c <HAL_MDMA_ConfigPostRequestMask+0x28>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e037      	b.n	8007dcc <HAL_MDMA_ConfigPostRequestMask+0x98>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d126      	bne.n	8007dbe <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d11c      	bne.n	8007db8 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d108      	bne.n	8007da6 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	691a      	ldr	r2, [r3, #16]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007da2:	611a      	str	r2, [r3, #16]
 8007da4:	e00d      	b.n	8007dc2 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	691a      	ldr	r2, [r3, #16]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007db4:	611a      	str	r2, [r3, #16]
 8007db6:	e004      	b.n	8007dc2 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	75fb      	strb	r3, [r7, #23]
 8007dbc:	e001      	b.n	8007dc2 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	371c      	adds	r7, #28
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e017      	b.n	8007e1a <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d004      	beq.n	8007e00 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2280      	movs	r2, #128	@ 0x80
 8007dfa:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e00c      	b.n	8007e1a <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2204      	movs	r2, #4
 8007e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 0201 	bic.w	r2, r2, #1
 8007e16:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
	...

08007e28 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e34:	4b91      	ldr	r3, [pc, #580]	@ (800807c <HAL_MDMA_IRQHandler+0x254>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a91      	ldr	r2, [pc, #580]	@ (8008080 <HAL_MDMA_IRQHandler+0x258>)
 8007e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3e:	0a9b      	lsrs	r3, r3, #10
 8007e40:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	4b8e      	ldr	r3, [pc, #568]	@ (8008084 <HAL_MDMA_IRQHandler+0x25c>)
 8007e4a:	4413      	add	r3, r2
 8007e4c:	099b      	lsrs	r3, r3, #6
 8007e4e:	f003 031f 	and.w	r3, r3, #31
 8007e52:	2201      	movs	r2, #1
 8007e54:	fa02 f303 	lsl.w	r3, r2, r3
 8007e58:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8007e5a:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	4013      	ands	r3, r2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 812d 	beq.w	80080c4 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d054      	beq.n	8007f22 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d04d      	beq.n	8007f22 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f022 0202 	bic.w	r2, r2, #2
 8007e94:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d106      	bne.n	8007eb6 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007eac:	f043 0201 	orr.w	r2, r3, #1
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	669a      	str	r2, [r3, #104]	@ 0x68
 8007eb4:	e005      	b.n	8007ec2 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007eba:	f043 0202 	orr.w	r2, r3, #2
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d005      	beq.n	8007ed8 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ed0:	f043 0204 	orr.w	r2, r3, #4
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ee6:	f043 0208 	orr.w	r2, r3, #8
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d005      	beq.n	8007f04 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007efc:	f043 0210 	orr.w	r2, r3, #16
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d005      	beq.n	8007f1a <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f12:	f043 0220 	orr.w	r2, r3, #32
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0310 	and.w	r3, r3, #16
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d012      	beq.n	8007f56 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00b      	beq.n	8007f56 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2210      	movs	r2, #16
 8007f44:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0308 	and.w	r3, r3, #8
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d012      	beq.n	8007f8a <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	f003 0310 	and.w	r3, r3, #16
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00b      	beq.n	8007f8a <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2208      	movs	r2, #8
 8007f78:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d012      	beq.n	8007fbe <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	f003 0308 	and.w	r3, r3, #8
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00b      	beq.n	8007fbe <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2204      	movs	r2, #4
 8007fac:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0302 	and.w	r3, r3, #2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d039      	beq.n	8008040 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	f003 0304 	and.w	r3, r3, #4
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d032      	beq.n	8008040 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68da      	ldr	r2, [r3, #12]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8007fe8:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	d110      	bne.n	8008018 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800800a:	2b00      	cmp	r3, #0
 800800c:	d05c      	beq.n	80080c8 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	4798      	blx	r3
        }
        return;
 8008016:	e057      	b.n	80080c8 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2202      	movs	r2, #2
 800801e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008034:	2b00      	cmp	r3, #0
 8008036:	d003      	beq.n	8008040 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008044:	2b00      	cmp	r3, #0
 8008046:	d040      	beq.n	80080ca <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2204      	movs	r2, #4
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0201 	bic.w	r2, r2, #1
 800805e:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	3301      	adds	r3, #1
 8008064:	60bb      	str	r3, [r7, #8]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	429a      	cmp	r2, r3
 800806a:	d30d      	bcc.n	8008088 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1f2      	bne.n	8008060 <HAL_MDMA_IRQHandler+0x238>
 800807a:	e006      	b.n	800808a <HAL_MDMA_IRQHandler+0x262>
 800807c:	24000018 	.word	0x24000018
 8008080:	1b4e81b5 	.word	0x1b4e81b5
 8008084:	adffffc0 	.word	0xadffffc0
        break;
 8008088:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	d004      	beq.n	80080aa <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2203      	movs	r2, #3
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80080a8:	e003      	b.n	80080b2 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d007      	beq.n	80080ca <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	4798      	blx	r3
 80080c2:	e002      	b.n	80080ca <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80080c4:	bf00      	nop
 80080c6:	e000      	b.n	80080ca <HAL_MDMA_IRQHandler+0x2a2>
        return;
 80080c8:	bf00      	nop
    }
  }
}
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68d9      	ldr	r1, [r3, #12]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	691a      	ldr	r2, [r3, #16]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	695a      	ldr	r2, [r3, #20]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80080f6:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a1b      	ldr	r3, [r3, #32]
 80080fc:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008102:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008108:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800810e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008114:	3b01      	subs	r3, #1
 8008116:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8008118:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008124:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008126:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008130:	d107      	bne.n	8008142 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	691a      	ldr	r2, [r3, #16]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8008140:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2200      	movs	r2, #0
 8008148:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800814e:	2b00      	cmp	r3, #0
 8008150:	da11      	bge.n	8008176 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	695a      	ldr	r2, [r3, #20]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008160:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008166:	425b      	negs	r3, r3
 8008168:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	b292      	uxth	r2, r2
 8008172:	621a      	str	r2, [r3, #32]
 8008174:	e006      	b.n	8008184 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800817a:	461a      	mov	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	b292      	uxth	r2, r2
 8008182:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008188:	2b00      	cmp	r3, #0
 800818a:	da15      	bge.n	80081b8 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	695a      	ldr	r2, [r3, #20]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800819a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a0:	425b      	negs	r3, r3
 80081a2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6a19      	ldr	r1, [r3, #32]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	041a      	lsls	r2, r3, #16
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	621a      	str	r2, [r3, #32]
 80081b6:	e009      	b.n	80081cc <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6a19      	ldr	r1, [r3, #32]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c2:	041a      	lsls	r2, r3, #16
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081d4:	d006      	beq.n	80081e4 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	b2d2      	uxtb	r2, r2
 80081e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80081e2:	e003      	b.n	80081ec <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2200      	movs	r2, #0
 80081ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2200      	movs	r2, #0
 80081f2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af02      	add	r7, sp, #8
 8008206:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e0fe      	b.n	8008410 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d106      	bne.n	800822c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f00b fbc6 	bl	80139b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2203      	movs	r2, #3
 8008230:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4618      	mov	r0, r3
 800823a:	f007 ff5c 	bl	80100f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6818      	ldr	r0, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	7c1a      	ldrb	r2, [r3, #16]
 8008246:	f88d 2000 	strb.w	r2, [sp]
 800824a:	3304      	adds	r3, #4
 800824c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800824e:	f007 fe2d 	bl	800feac <USB_CoreInit>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d005      	beq.n	8008264 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e0d5      	b.n	8008410 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2100      	movs	r1, #0
 800826a:	4618      	mov	r0, r3
 800826c:	f007 ff54 	bl	8010118 <USB_SetCurrentMode>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2202      	movs	r2, #2
 800827a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e0c6      	b.n	8008410 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008282:	2300      	movs	r3, #0
 8008284:	73fb      	strb	r3, [r7, #15]
 8008286:	e04a      	b.n	800831e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008288:	7bfa      	ldrb	r2, [r7, #15]
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	4613      	mov	r3, r2
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	4413      	add	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	3315      	adds	r3, #21
 8008298:	2201      	movs	r2, #1
 800829a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800829c:	7bfa      	ldrb	r2, [r7, #15]
 800829e:	6879      	ldr	r1, [r7, #4]
 80082a0:	4613      	mov	r3, r2
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	3314      	adds	r3, #20
 80082ac:	7bfa      	ldrb	r2, [r7, #15]
 80082ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80082b0:	7bfa      	ldrb	r2, [r7, #15]
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
 80082b4:	b298      	uxth	r0, r3
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4613      	mov	r3, r2
 80082ba:	00db      	lsls	r3, r3, #3
 80082bc:	4413      	add	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	440b      	add	r3, r1
 80082c2:	332e      	adds	r3, #46	@ 0x2e
 80082c4:	4602      	mov	r2, r0
 80082c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80082c8:	7bfa      	ldrb	r2, [r7, #15]
 80082ca:	6879      	ldr	r1, [r7, #4]
 80082cc:	4613      	mov	r3, r2
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	440b      	add	r3, r1
 80082d6:	3318      	adds	r3, #24
 80082d8:	2200      	movs	r2, #0
 80082da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80082dc:	7bfa      	ldrb	r2, [r7, #15]
 80082de:	6879      	ldr	r1, [r7, #4]
 80082e0:	4613      	mov	r3, r2
 80082e2:	00db      	lsls	r3, r3, #3
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	440b      	add	r3, r1
 80082ea:	331c      	adds	r3, #28
 80082ec:	2200      	movs	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80082f0:	7bfa      	ldrb	r2, [r7, #15]
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	4613      	mov	r3, r2
 80082f6:	00db      	lsls	r3, r3, #3
 80082f8:	4413      	add	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	440b      	add	r3, r1
 80082fe:	3320      	adds	r3, #32
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008304:	7bfa      	ldrb	r2, [r7, #15]
 8008306:	6879      	ldr	r1, [r7, #4]
 8008308:	4613      	mov	r3, r2
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	4413      	add	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	440b      	add	r3, r1
 8008312:	3324      	adds	r3, #36	@ 0x24
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	3301      	adds	r3, #1
 800831c:	73fb      	strb	r3, [r7, #15]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	791b      	ldrb	r3, [r3, #4]
 8008322:	7bfa      	ldrb	r2, [r7, #15]
 8008324:	429a      	cmp	r2, r3
 8008326:	d3af      	bcc.n	8008288 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008328:	2300      	movs	r3, #0
 800832a:	73fb      	strb	r3, [r7, #15]
 800832c:	e044      	b.n	80083b8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800832e:	7bfa      	ldrb	r2, [r7, #15]
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	4613      	mov	r3, r2
 8008334:	00db      	lsls	r3, r3, #3
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	440b      	add	r3, r1
 800833c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008340:	2200      	movs	r2, #0
 8008342:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008344:	7bfa      	ldrb	r2, [r7, #15]
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	4613      	mov	r3, r2
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	440b      	add	r3, r1
 8008352:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008356:	7bfa      	ldrb	r2, [r7, #15]
 8008358:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800835a:	7bfa      	ldrb	r2, [r7, #15]
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	4613      	mov	r3, r2
 8008360:	00db      	lsls	r3, r3, #3
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	440b      	add	r3, r1
 8008368:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800836c:	2200      	movs	r2, #0
 800836e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008370:	7bfa      	ldrb	r2, [r7, #15]
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	4613      	mov	r3, r2
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008386:	7bfa      	ldrb	r2, [r7, #15]
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	4613      	mov	r3, r2
 800838c:	00db      	lsls	r3, r3, #3
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	440b      	add	r3, r1
 8008394:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800839c:	7bfa      	ldrb	r2, [r7, #15]
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4613      	mov	r3, r2
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	4413      	add	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80083ae:	2200      	movs	r2, #0
 80083b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	3301      	adds	r3, #1
 80083b6:	73fb      	strb	r3, [r7, #15]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	791b      	ldrb	r3, [r3, #4]
 80083bc:	7bfa      	ldrb	r2, [r7, #15]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d3b5      	bcc.n	800832e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	7c1a      	ldrb	r2, [r3, #16]
 80083ca:	f88d 2000 	strb.w	r2, [sp]
 80083ce:	3304      	adds	r3, #4
 80083d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083d2:	f007 feed 	bl	80101b0 <USB_DevInit>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d005      	beq.n	80083e8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2202      	movs	r2, #2
 80083e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e013      	b.n	8008410 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	7b1b      	ldrb	r3, [r3, #12]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d102      	bne.n	8008404 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f001 f96e 	bl	80096e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4618      	mov	r0, r3
 800840a:	f008 ff30 	bl	801126e <USB_DevDisconnect>

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800842c:	2b01      	cmp	r3, #1
 800842e:	d101      	bne.n	8008434 <HAL_PCD_Start+0x1c>
 8008430:	2302      	movs	r3, #2
 8008432:	e022      	b.n	800847a <HAL_PCD_Start+0x62>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008444:	2b00      	cmp	r3, #0
 8008446:	d009      	beq.n	800845c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800844c:	2b01      	cmp	r3, #1
 800844e:	d105      	bne.n	800845c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008454:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f007 fe37 	bl	80100d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4618      	mov	r0, r3
 800846c:	f008 fede 	bl	801122c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008482:	b590      	push	{r4, r7, lr}
 8008484:	b08d      	sub	sp, #52	@ 0x34
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4618      	mov	r0, r3
 800849a:	f008 ff9c 	bl	80113d6 <USB_GetMode>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f040 84b9 	bne.w	8008e18 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f008 ff00 	bl	80112b0 <USB_ReadInterrupts>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 84af 	beq.w	8008e16 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	0a1b      	lsrs	r3, r3, #8
 80084c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f008 feed 	bl	80112b0 <USB_ReadInterrupts>
 80084d6:	4603      	mov	r3, r0
 80084d8:	f003 0302 	and.w	r3, r3, #2
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d107      	bne.n	80084f0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	695a      	ldr	r2, [r3, #20]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f002 0202 	and.w	r2, r2, #2
 80084ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f008 fedb 	bl	80112b0 <USB_ReadInterrupts>
 80084fa:	4603      	mov	r3, r0
 80084fc:	f003 0310 	and.w	r3, r3, #16
 8008500:	2b10      	cmp	r3, #16
 8008502:	d161      	bne.n	80085c8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	699a      	ldr	r2, [r3, #24]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0210 	bic.w	r2, r2, #16
 8008512:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	6a1b      	ldr	r3, [r3, #32]
 8008518:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	f003 020f 	and.w	r2, r3, #15
 8008520:	4613      	mov	r3, r2
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	4413      	add	r3, r2
 8008530:	3304      	adds	r3, #4
 8008532:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800853a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800853e:	d124      	bne.n	800858a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008546:	4013      	ands	r3, r2
 8008548:	2b00      	cmp	r3, #0
 800854a:	d035      	beq.n	80085b8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	091b      	lsrs	r3, r3, #4
 8008554:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800855a:	b29b      	uxth	r3, r3
 800855c:	461a      	mov	r2, r3
 800855e:	6a38      	ldr	r0, [r7, #32]
 8008560:	f008 fd12 	bl	8010f88 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	091b      	lsrs	r3, r3, #4
 800856c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008570:	441a      	add	r2, r3
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	695a      	ldr	r2, [r3, #20]
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	091b      	lsrs	r3, r3, #4
 800857e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008582:	441a      	add	r2, r3
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	615a      	str	r2, [r3, #20]
 8008588:	e016      	b.n	80085b8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008590:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008594:	d110      	bne.n	80085b8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800859c:	2208      	movs	r2, #8
 800859e:	4619      	mov	r1, r3
 80085a0:	6a38      	ldr	r0, [r7, #32]
 80085a2:	f008 fcf1 	bl	8010f88 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	695a      	ldr	r2, [r3, #20]
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	091b      	lsrs	r3, r3, #4
 80085ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085b2:	441a      	add	r2, r3
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	699a      	ldr	r2, [r3, #24]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0210 	orr.w	r2, r2, #16
 80085c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f008 fe6f 	bl	80112b0 <USB_ReadInterrupts>
 80085d2:	4603      	mov	r3, r0
 80085d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80085d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80085dc:	f040 80a7 	bne.w	800872e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f008 fe74 	bl	80112d6 <USB_ReadDevAllOutEpInterrupt>
 80085ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80085f0:	e099      	b.n	8008726 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80085f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 808e 	beq.w	800871a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008604:	b2d2      	uxtb	r2, r2
 8008606:	4611      	mov	r1, r2
 8008608:	4618      	mov	r0, r3
 800860a:	f008 fe98 	bl	801133e <USB_ReadDevOutEPInterrupt>
 800860e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00c      	beq.n	8008634 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800861a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861c:	015a      	lsls	r2, r3, #5
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	4413      	add	r3, r2
 8008622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008626:	461a      	mov	r2, r3
 8008628:	2301      	movs	r3, #1
 800862a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800862c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fed0 	bl	80093d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f003 0308 	and.w	r3, r3, #8
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00c      	beq.n	8008658 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800863e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	4413      	add	r3, r2
 8008646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800864a:	461a      	mov	r2, r3
 800864c:	2308      	movs	r3, #8
 800864e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008650:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 ffa6 	bl	80095a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f003 0310 	and.w	r3, r3, #16
 800865e:	2b00      	cmp	r3, #0
 8008660:	d008      	beq.n	8008674 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	4413      	add	r3, r2
 800866a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800866e:	461a      	mov	r2, r3
 8008670:	2310      	movs	r3, #16
 8008672:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d030      	beq.n	80086e0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800867e:	6a3b      	ldr	r3, [r7, #32]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008686:	2b80      	cmp	r3, #128	@ 0x80
 8008688:	d109      	bne.n	800869e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	69fa      	ldr	r2, [r7, #28]
 8008694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008698:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800869c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800869e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086a0:	4613      	mov	r3, r2
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	4413      	add	r3, r2
 80086b0:	3304      	adds	r3, #4
 80086b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	78db      	ldrb	r3, [r3, #3]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d108      	bne.n	80086ce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	2200      	movs	r2, #0
 80086c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80086c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f00b fa9b 	bl	8013c04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086da:	461a      	mov	r2, r3
 80086dc:	2302      	movs	r3, #2
 80086de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f003 0320 	and.w	r3, r3, #32
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d008      	beq.n	80086fc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80086ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ec:	015a      	lsls	r2, r3, #5
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	4413      	add	r3, r2
 80086f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086f6:	461a      	mov	r2, r3
 80086f8:	2320      	movs	r3, #32
 80086fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d009      	beq.n	800871a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008712:	461a      	mov	r2, r3
 8008714:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008718:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800871a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871c:	3301      	adds	r3, #1
 800871e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008722:	085b      	lsrs	r3, r3, #1
 8008724:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008728:	2b00      	cmp	r3, #0
 800872a:	f47f af62 	bne.w	80085f2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4618      	mov	r0, r3
 8008734:	f008 fdbc 	bl	80112b0 <USB_ReadInterrupts>
 8008738:	4603      	mov	r3, r0
 800873a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800873e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008742:	f040 80db 	bne.w	80088fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4618      	mov	r0, r3
 800874c:	f008 fddd 	bl	801130a <USB_ReadDevAllInEpInterrupt>
 8008750:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8008752:	2300      	movs	r3, #0
 8008754:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8008756:	e0cd      	b.n	80088f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 80c2 	beq.w	80088e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	4611      	mov	r1, r2
 800876e:	4618      	mov	r0, r3
 8008770:	f008 fe03 	bl	801137a <USB_ReadDevInEPInterrupt>
 8008774:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	d057      	beq.n	8008830 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	2201      	movs	r2, #1
 8008788:	fa02 f303 	lsl.w	r3, r2, r3
 800878c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	43db      	mvns	r3, r3
 800879a:	69f9      	ldr	r1, [r7, #28]
 800879c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087a0:	4013      	ands	r3, r2
 80087a2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80087a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a6:	015a      	lsls	r2, r3, #5
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	4413      	add	r3, r2
 80087ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087b0:	461a      	mov	r2, r3
 80087b2:	2301      	movs	r3, #1
 80087b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	799b      	ldrb	r3, [r3, #6]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d132      	bne.n	8008824 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80087be:	6879      	ldr	r1, [r7, #4]
 80087c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087c2:	4613      	mov	r3, r2
 80087c4:	00db      	lsls	r3, r3, #3
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	440b      	add	r3, r1
 80087cc:	3320      	adds	r3, #32
 80087ce:	6819      	ldr	r1, [r3, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087d4:	4613      	mov	r3, r2
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4403      	add	r3, r0
 80087de:	331c      	adds	r3, #28
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4419      	add	r1, r3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087e8:	4613      	mov	r3, r2
 80087ea:	00db      	lsls	r3, r3, #3
 80087ec:	4413      	add	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4403      	add	r3, r0
 80087f2:	3320      	adds	r3, #32
 80087f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80087f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d113      	bne.n	8008824 <HAL_PCD_IRQHandler+0x3a2>
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008800:	4613      	mov	r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	4413      	add	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	440b      	add	r3, r1
 800880a:	3324      	adds	r3, #36	@ 0x24
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d108      	bne.n	8008824 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6818      	ldr	r0, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800881c:	461a      	mov	r2, r3
 800881e:	2101      	movs	r1, #1
 8008820:	f008 fe0c 	bl	801143c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008826:	b2db      	uxtb	r3, r3
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f00b f965 	bl	8013afa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	f003 0308 	and.w	r3, r3, #8
 8008836:	2b00      	cmp	r3, #0
 8008838:	d008      	beq.n	800884c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800883a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	4413      	add	r3, r2
 8008842:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008846:	461a      	mov	r2, r3
 8008848:	2308      	movs	r3, #8
 800884a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f003 0310 	and.w	r3, r3, #16
 8008852:	2b00      	cmp	r3, #0
 8008854:	d008      	beq.n	8008868 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008862:	461a      	mov	r2, r3
 8008864:	2310      	movs	r3, #16
 8008866:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800886e:	2b00      	cmp	r3, #0
 8008870:	d008      	beq.n	8008884 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008874:	015a      	lsls	r2, r3, #5
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	4413      	add	r3, r2
 800887a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800887e:	461a      	mov	r2, r3
 8008880:	2340      	movs	r3, #64	@ 0x40
 8008882:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	2b00      	cmp	r3, #0
 800888c:	d023      	beq.n	80088d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800888e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008890:	6a38      	ldr	r0, [r7, #32]
 8008892:	f007 fdeb 	bl	801046c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008898:	4613      	mov	r3, r2
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	4413      	add	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	3310      	adds	r3, #16
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	4413      	add	r3, r2
 80088a6:	3304      	adds	r3, #4
 80088a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	78db      	ldrb	r3, [r3, #3]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d108      	bne.n	80088c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	2200      	movs	r2, #0
 80088b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80088b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f00b f9b2 	bl	8013c28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80088c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088d0:	461a      	mov	r2, r3
 80088d2:	2302      	movs	r3, #2
 80088d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d003      	beq.n	80088e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80088e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fcea 	bl	80092bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80088e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ea:	3301      	adds	r3, #1
 80088ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80088ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f0:	085b      	lsrs	r3, r3, #1
 80088f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80088f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f47f af2e 	bne.w	8008758 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4618      	mov	r0, r3
 8008902:	f008 fcd5 	bl	80112b0 <USB_ReadInterrupts>
 8008906:	4603      	mov	r3, r0
 8008908:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800890c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008910:	d122      	bne.n	8008958 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	69fa      	ldr	r2, [r7, #28]
 800891c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008920:	f023 0301 	bic.w	r3, r3, #1
 8008924:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800892c:	2b01      	cmp	r3, #1
 800892e:	d108      	bne.n	8008942 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008938:	2100      	movs	r1, #0
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fef4 	bl	8009728 <HAL_PCDEx_LPM_Callback>
 8008940:	e002      	b.n	8008948 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f00b f950 	bl	8013be8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695a      	ldr	r2, [r3, #20]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8008956:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4618      	mov	r0, r3
 800895e:	f008 fca7 	bl	80112b0 <USB_ReadInterrupts>
 8008962:	4603      	mov	r3, r0
 8008964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800896c:	d112      	bne.n	8008994 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b01      	cmp	r3, #1
 800897c:	d102      	bne.n	8008984 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f00b f90c 	bl	8013b9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	695a      	ldr	r2, [r3, #20]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8008992:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f008 fc89 	bl	80112b0 <USB_ReadInterrupts>
 800899e:	4603      	mov	r3, r0
 80089a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089a8:	d121      	bne.n	80089ee <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	695a      	ldr	r2, [r3, #20]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80089b8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d111      	bne.n	80089e8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089d2:	089b      	lsrs	r3, r3, #2
 80089d4:	f003 020f 	and.w	r2, r3, #15
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80089de:	2101      	movs	r1, #1
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fea1 	bl	8009728 <HAL_PCDEx_LPM_Callback>
 80089e6:	e002      	b.n	80089ee <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f00b f8d7 	bl	8013b9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f008 fc5c 	bl	80112b0 <USB_ReadInterrupts>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80089fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a02:	f040 80b7 	bne.w	8008b74 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	69fa      	ldr	r2, [r7, #28]
 8008a10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a14:	f023 0301 	bic.w	r3, r3, #1
 8008a18:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2110      	movs	r1, #16
 8008a20:	4618      	mov	r0, r3
 8008a22:	f007 fd23 	bl	801046c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a26:	2300      	movs	r3, #0
 8008a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a2a:	e046      	b.n	8008aba <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a2e:	015a      	lsls	r2, r3, #5
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a38:	461a      	mov	r2, r3
 8008a3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008a3e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a50:	0151      	lsls	r1, r2, #5
 8008a52:	69fa      	ldr	r2, [r7, #28]
 8008a54:	440a      	add	r2, r1
 8008a56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008a72:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a84:	0151      	lsls	r1, r2, #5
 8008a86:	69fa      	ldr	r2, [r7, #28]
 8008a88:	440a      	add	r2, r1
 8008a8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aa4:	0151      	lsls	r1, r2, #5
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	440a      	add	r2, r1
 8008aaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008ab2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	791b      	ldrb	r3, [r3, #4]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d3b2      	bcc.n	8008a2c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	69fa      	ldr	r2, [r7, #28]
 8008ad0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ad4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008ad8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	7bdb      	ldrb	r3, [r3, #15]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d016      	beq.n	8008b10 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008aec:	69fa      	ldr	r2, [r7, #28]
 8008aee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008af2:	f043 030b 	orr.w	r3, r3, #11
 8008af6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b02:	69fa      	ldr	r2, [r7, #28]
 8008b04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b08:	f043 030b 	orr.w	r3, r3, #11
 8008b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8008b0e:	e015      	b.n	8008b3c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b16:	695a      	ldr	r2, [r3, #20]
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b1e:	4619      	mov	r1, r3
 8008b20:	f242 032b 	movw	r3, #8235	@ 0x202b
 8008b24:	4313      	orrs	r3, r2
 8008b26:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	69fa      	ldr	r2, [r7, #28]
 8008b32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b36:	f043 030b 	orr.w	r3, r3, #11
 8008b3a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	69fa      	ldr	r2, [r7, #28]
 8008b46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b4a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008b4e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6818      	ldr	r0, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f008 fc6c 	bl	801143c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	695a      	ldr	r2, [r3, #20]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f008 fb99 	bl	80112b0 <USB_ReadInterrupts>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b88:	d123      	bne.n	8008bd2 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f008 fc30 	bl	80113f4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f007 fce0 	bl	801055e <USB_GetDevSpeed>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681c      	ldr	r4, [r3, #0]
 8008baa:	f001 fd9d 	bl	800a6e8 <HAL_RCC_GetHCLKFreq>
 8008bae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f007 f9ea 	bl	800ff90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f00a ffc4 	bl	8013b4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	695a      	ldr	r2, [r3, #20]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008bd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f008 fb6a 	bl	80112b0 <USB_ReadInterrupts>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f003 0308 	and.w	r3, r3, #8
 8008be2:	2b08      	cmp	r3, #8
 8008be4:	d10a      	bne.n	8008bfc <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f00a ffa1 	bl	8013b2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	695a      	ldr	r2, [r3, #20]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f002 0208 	and.w	r2, r2, #8
 8008bfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f008 fb55 	bl	80112b0 <USB_ReadInterrupts>
 8008c06:	4603      	mov	r3, r0
 8008c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c0c:	2b80      	cmp	r3, #128	@ 0x80
 8008c0e:	d123      	bne.n	8008c58 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008c10:	6a3b      	ldr	r3, [r7, #32]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c20:	e014      	b.n	8008c4c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008c22:	6879      	ldr	r1, [r7, #4]
 8008c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c26:	4613      	mov	r3, r2
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	440b      	add	r3, r1
 8008c30:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d105      	bne.n	8008c46 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fb0a 	bl	800925a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c48:	3301      	adds	r3, #1
 8008c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	791b      	ldrb	r3, [r3, #4]
 8008c50:	461a      	mov	r2, r3
 8008c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d3e4      	bcc.n	8008c22 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f008 fb27 	bl	80112b0 <USB_ReadInterrupts>
 8008c62:	4603      	mov	r3, r0
 8008c64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c6c:	d13c      	bne.n	8008ce8 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c6e:	2301      	movs	r3, #1
 8008c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c72:	e02b      	b.n	8008ccc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c76:	015a      	lsls	r2, r3, #5
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c84:	6879      	ldr	r1, [r7, #4]
 8008c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c88:	4613      	mov	r3, r2
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	440b      	add	r3, r1
 8008c92:	3318      	adds	r3, #24
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d115      	bne.n	8008cc6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008c9a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	da12      	bge.n	8008cc6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	440b      	add	r3, r1
 8008cae:	3317      	adds	r3, #23
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 faca 	bl	800925a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	3301      	adds	r3, #1
 8008cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	791b      	ldrb	r3, [r3, #4]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d3cd      	bcc.n	8008c74 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	695a      	ldr	r2, [r3, #20]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f008 fadf 	bl	80112b0 <USB_ReadInterrupts>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008cf8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cfc:	d156      	bne.n	8008dac <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cfe:	2301      	movs	r3, #1
 8008d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d02:	e045      	b.n	8008d90 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d14:	6879      	ldr	r1, [r7, #4]
 8008d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d18:	4613      	mov	r3, r2
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	4413      	add	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	440b      	add	r3, r1
 8008d22:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d12e      	bne.n	8008d8a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008d2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	da2b      	bge.n	8008d8a <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	0c1a      	lsrs	r2, r3, #16
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008d3c:	4053      	eors	r3, r2
 8008d3e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d121      	bne.n	8008d8a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008d46:	6879      	ldr	r1, [r7, #4]
 8008d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008d58:	2201      	movs	r2, #1
 8008d5a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008d5c:	6a3b      	ldr	r3, [r7, #32]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10a      	bne.n	8008d8a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	69fa      	ldr	r2, [r7, #28]
 8008d7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008d86:	6053      	str	r3, [r2, #4]
            break;
 8008d88:	e008      	b.n	8008d9c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	791b      	ldrb	r3, [r3, #4]
 8008d94:	461a      	mov	r2, r3
 8008d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d3b3      	bcc.n	8008d04 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695a      	ldr	r2, [r3, #20]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f008 fa7d 	bl	80112b0 <USB_ReadInterrupts>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dc0:	d10a      	bne.n	8008dd8 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f00a ff42 	bl	8013c4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	695a      	ldr	r2, [r3, #20]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f008 fa67 	bl	80112b0 <USB_ReadInterrupts>
 8008de2:	4603      	mov	r3, r0
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b04      	cmp	r3, #4
 8008dea:	d115      	bne.n	8008e18 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	f003 0304 	and.w	r3, r3, #4
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f00a ff32 	bl	8013c68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6859      	ldr	r1, [r3, #4]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	69ba      	ldr	r2, [r7, #24]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	605a      	str	r2, [r3, #4]
 8008e14:	e000      	b.n	8008e18 <HAL_PCD_IRQHandler+0x996>
      return;
 8008e16:	bf00      	nop
    }
  }
}
 8008e18:	3734      	adds	r7, #52	@ 0x34
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd90      	pop	{r4, r7, pc}

08008e1e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d101      	bne.n	8008e38 <HAL_PCD_SetAddress+0x1a>
 8008e34:	2302      	movs	r3, #2
 8008e36:	e012      	b.n	8008e5e <HAL_PCD_SetAddress+0x40>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	78fa      	ldrb	r2, [r7, #3]
 8008e44:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	78fa      	ldrb	r2, [r7, #3]
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f008 f9c6 	bl	80111e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b084      	sub	sp, #16
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	4608      	mov	r0, r1
 8008e70:	4611      	mov	r1, r2
 8008e72:	461a      	mov	r2, r3
 8008e74:	4603      	mov	r3, r0
 8008e76:	70fb      	strb	r3, [r7, #3]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	803b      	strh	r3, [r7, #0]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008e84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	da0f      	bge.n	8008eac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e8c:	78fb      	ldrb	r3, [r7, #3]
 8008e8e:	f003 020f 	and.w	r2, r3, #15
 8008e92:	4613      	mov	r3, r2
 8008e94:	00db      	lsls	r3, r3, #3
 8008e96:	4413      	add	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	3310      	adds	r3, #16
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	705a      	strb	r2, [r3, #1]
 8008eaa:	e00f      	b.n	8008ecc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008eac:	78fb      	ldrb	r3, [r7, #3]
 8008eae:	f003 020f 	and.w	r2, r3, #15
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	00db      	lsls	r3, r3, #3
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008ecc:	78fb      	ldrb	r3, [r7, #3]
 8008ece:	f003 030f 	and.w	r3, r3, #15
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008ed8:	883b      	ldrh	r3, [r7, #0]
 8008eda:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	78ba      	ldrb	r2, [r7, #2]
 8008ee6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	785b      	ldrb	r3, [r3, #1]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d004      	beq.n	8008efa <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008efa:	78bb      	ldrb	r3, [r7, #2]
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d102      	bne.n	8008f06 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d101      	bne.n	8008f14 <HAL_PCD_EP_Open+0xae>
 8008f10:	2302      	movs	r3, #2
 8008f12:	e00e      	b.n	8008f32 <HAL_PCD_EP_Open+0xcc>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68f9      	ldr	r1, [r7, #12]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f007 fb40 	bl	80105a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008f30:	7afb      	ldrb	r3, [r7, #11]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	da0f      	bge.n	8008f6e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f4e:	78fb      	ldrb	r3, [r7, #3]
 8008f50:	f003 020f 	and.w	r2, r3, #15
 8008f54:	4613      	mov	r3, r2
 8008f56:	00db      	lsls	r3, r3, #3
 8008f58:	4413      	add	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	3310      	adds	r3, #16
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	4413      	add	r3, r2
 8008f62:	3304      	adds	r3, #4
 8008f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	705a      	strb	r2, [r3, #1]
 8008f6c:	e00f      	b.n	8008f8e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	f003 020f 	and.w	r2, r3, #15
 8008f74:	4613      	mov	r3, r2
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	4413      	add	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	4413      	add	r3, r2
 8008f84:	3304      	adds	r3, #4
 8008f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f8e:	78fb      	ldrb	r3, [r7, #3]
 8008f90:	f003 030f 	and.w	r3, r3, #15
 8008f94:	b2da      	uxtb	r2, r3
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d101      	bne.n	8008fa8 <HAL_PCD_EP_Close+0x6e>
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	e00e      	b.n	8008fc6 <HAL_PCD_EP_Close+0x8c>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68f9      	ldr	r1, [r7, #12]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f007 fb7e 	bl	80106b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b086      	sub	sp, #24
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	60f8      	str	r0, [r7, #12]
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	603b      	str	r3, [r7, #0]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fde:	7afb      	ldrb	r3, [r7, #11]
 8008fe0:	f003 020f 	and.w	r2, r3, #15
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	00db      	lsls	r3, r3, #3
 8008fe8:	4413      	add	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	683a      	ldr	r2, [r7, #0]
 8009002:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	2200      	movs	r2, #0
 8009008:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2200      	movs	r2, #0
 800900e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009010:	7afb      	ldrb	r3, [r7, #11]
 8009012:	f003 030f 	and.w	r3, r3, #15
 8009016:	b2da      	uxtb	r2, r3
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	799b      	ldrb	r3, [r3, #6]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d102      	bne.n	800902a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6818      	ldr	r0, [r3, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	799b      	ldrb	r3, [r3, #6]
 8009032:	461a      	mov	r2, r3
 8009034:	6979      	ldr	r1, [r7, #20]
 8009036:	f007 fc1b 	bl	8010870 <USB_EPStartXfer>

  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3718      	adds	r7, #24
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009050:	78fb      	ldrb	r3, [r7, #3]
 8009052:	f003 020f 	and.w	r2, r3, #15
 8009056:	6879      	ldr	r1, [r7, #4]
 8009058:	4613      	mov	r3, r2
 800905a:	00db      	lsls	r3, r3, #3
 800905c:	4413      	add	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	440b      	add	r3, r1
 8009062:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8009066:	681b      	ldr	r3, [r3, #0]
}
 8009068:	4618      	mov	r0, r3
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	607a      	str	r2, [r7, #4]
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	460b      	mov	r3, r1
 8009082:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009084:	7afb      	ldrb	r3, [r7, #11]
 8009086:	f003 020f 	and.w	r2, r3, #15
 800908a:	4613      	mov	r3, r2
 800908c:	00db      	lsls	r3, r3, #3
 800908e:	4413      	add	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	3310      	adds	r3, #16
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	4413      	add	r3, r2
 8009098:	3304      	adds	r3, #4
 800909a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	2200      	movs	r2, #0
 80090ac:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2201      	movs	r2, #1
 80090b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090b4:	7afb      	ldrb	r3, [r7, #11]
 80090b6:	f003 030f 	and.w	r3, r3, #15
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	799b      	ldrb	r3, [r3, #6]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d102      	bne.n	80090ce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6818      	ldr	r0, [r3, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	799b      	ldrb	r3, [r3, #6]
 80090d6:	461a      	mov	r2, r3
 80090d8:	6979      	ldr	r1, [r7, #20]
 80090da:	f007 fbc9 	bl	8010870 <USB_EPStartXfer>

  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3718      	adds	r7, #24
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80090f4:	78fb      	ldrb	r3, [r7, #3]
 80090f6:	f003 030f 	and.w	r3, r3, #15
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	7912      	ldrb	r2, [r2, #4]
 80090fe:	4293      	cmp	r3, r2
 8009100:	d901      	bls.n	8009106 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e04f      	b.n	80091a6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009106:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800910a:	2b00      	cmp	r3, #0
 800910c:	da0f      	bge.n	800912e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	f003 020f 	and.w	r2, r3, #15
 8009114:	4613      	mov	r3, r2
 8009116:	00db      	lsls	r3, r3, #3
 8009118:	4413      	add	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	3310      	adds	r3, #16
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	4413      	add	r3, r2
 8009122:	3304      	adds	r3, #4
 8009124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2201      	movs	r2, #1
 800912a:	705a      	strb	r2, [r3, #1]
 800912c:	e00d      	b.n	800914a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800912e:	78fa      	ldrb	r2, [r7, #3]
 8009130:	4613      	mov	r3, r2
 8009132:	00db      	lsls	r3, r3, #3
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	4413      	add	r3, r2
 8009140:	3304      	adds	r3, #4
 8009142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2200      	movs	r2, #0
 8009148:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2201      	movs	r2, #1
 800914e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	f003 030f 	and.w	r3, r3, #15
 8009156:	b2da      	uxtb	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009162:	2b01      	cmp	r3, #1
 8009164:	d101      	bne.n	800916a <HAL_PCD_EP_SetStall+0x82>
 8009166:	2302      	movs	r3, #2
 8009168:	e01d      	b.n	80091a6 <HAL_PCD_EP_SetStall+0xbe>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68f9      	ldr	r1, [r7, #12]
 8009178:	4618      	mov	r0, r3
 800917a:	f007 ff5d 	bl	8011038 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800917e:	78fb      	ldrb	r3, [r7, #3]
 8009180:	f003 030f 	and.w	r3, r3, #15
 8009184:	2b00      	cmp	r3, #0
 8009186:	d109      	bne.n	800919c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6818      	ldr	r0, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	7999      	ldrb	r1, [r3, #6]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009196:	461a      	mov	r2, r3
 8009198:	f008 f950 	bl	801143c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	460b      	mov	r3, r1
 80091b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80091ba:	78fb      	ldrb	r3, [r7, #3]
 80091bc:	f003 030f 	and.w	r3, r3, #15
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	7912      	ldrb	r2, [r2, #4]
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d901      	bls.n	80091cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80091c8:	2301      	movs	r3, #1
 80091ca:	e042      	b.n	8009252 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	da0f      	bge.n	80091f4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091d4:	78fb      	ldrb	r3, [r7, #3]
 80091d6:	f003 020f 	and.w	r2, r3, #15
 80091da:	4613      	mov	r3, r2
 80091dc:	00db      	lsls	r3, r3, #3
 80091de:	4413      	add	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	3310      	adds	r3, #16
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	4413      	add	r3, r2
 80091e8:	3304      	adds	r3, #4
 80091ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2201      	movs	r2, #1
 80091f0:	705a      	strb	r2, [r3, #1]
 80091f2:	e00f      	b.n	8009214 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091f4:	78fb      	ldrb	r3, [r7, #3]
 80091f6:	f003 020f 	and.w	r2, r3, #15
 80091fa:	4613      	mov	r3, r2
 80091fc:	00db      	lsls	r3, r3, #3
 80091fe:	4413      	add	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	4413      	add	r3, r2
 800920a:	3304      	adds	r3, #4
 800920c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800921a:	78fb      	ldrb	r3, [r7, #3]
 800921c:	f003 030f 	and.w	r3, r3, #15
 8009220:	b2da      	uxtb	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800922c:	2b01      	cmp	r3, #1
 800922e:	d101      	bne.n	8009234 <HAL_PCD_EP_ClrStall+0x86>
 8009230:	2302      	movs	r3, #2
 8009232:	e00e      	b.n	8009252 <HAL_PCD_EP_ClrStall+0xa4>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68f9      	ldr	r1, [r7, #12]
 8009242:	4618      	mov	r0, r3
 8009244:	f007 ff66 	bl	8011114 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b084      	sub	sp, #16
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	460b      	mov	r3, r1
 8009264:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800926a:	2b00      	cmp	r3, #0
 800926c:	da0c      	bge.n	8009288 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800926e:	78fb      	ldrb	r3, [r7, #3]
 8009270:	f003 020f 	and.w	r2, r3, #15
 8009274:	4613      	mov	r3, r2
 8009276:	00db      	lsls	r3, r3, #3
 8009278:	4413      	add	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	3310      	adds	r3, #16
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	4413      	add	r3, r2
 8009282:	3304      	adds	r3, #4
 8009284:	60fb      	str	r3, [r7, #12]
 8009286:	e00c      	b.n	80092a2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009288:	78fb      	ldrb	r3, [r7, #3]
 800928a:	f003 020f 	and.w	r2, r3, #15
 800928e:	4613      	mov	r3, r2
 8009290:	00db      	lsls	r3, r3, #3
 8009292:	4413      	add	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	4413      	add	r3, r2
 800929e:	3304      	adds	r3, #4
 80092a0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68f9      	ldr	r1, [r7, #12]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f007 fd85 	bl	8010db8 <USB_EPStopXfer>
 80092ae:	4603      	mov	r3, r0
 80092b0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80092b2:	7afb      	ldrb	r3, [r7, #11]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b08a      	sub	sp, #40	@ 0x28
 80092c0:	af02      	add	r7, sp, #8
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	4613      	mov	r3, r2
 80092d4:	00db      	lsls	r3, r3, #3
 80092d6:	4413      	add	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	3310      	adds	r3, #16
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	4413      	add	r3, r2
 80092e0:	3304      	adds	r3, #4
 80092e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	695a      	ldr	r2, [r3, #20]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d901      	bls.n	80092f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e06b      	b.n	80093cc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	691a      	ldr	r2, [r3, #16]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	695b      	ldr	r3, [r3, #20]
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	69fa      	ldr	r2, [r7, #28]
 8009306:	429a      	cmp	r2, r3
 8009308:	d902      	bls.n	8009310 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	3303      	adds	r3, #3
 8009314:	089b      	lsrs	r3, r3, #2
 8009316:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009318:	e02a      	b.n	8009370 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	691a      	ldr	r2, [r3, #16]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	69fa      	ldr	r2, [r7, #28]
 800932c:	429a      	cmp	r2, r3
 800932e:	d902      	bls.n	8009336 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	3303      	adds	r3, #3
 800933a:	089b      	lsrs	r3, r3, #2
 800933c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	68d9      	ldr	r1, [r3, #12]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	b2da      	uxtb	r2, r3
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	4603      	mov	r3, r0
 8009352:	6978      	ldr	r0, [r7, #20]
 8009354:	f007 fdda 	bl	8010f0c <USB_WritePacket>

    ep->xfer_buff  += len;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	68da      	ldr	r2, [r3, #12]
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	441a      	add	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	695a      	ldr	r2, [r3, #20]
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	441a      	add	r2, r3
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009380:	69ba      	ldr	r2, [r7, #24]
 8009382:	429a      	cmp	r2, r3
 8009384:	d809      	bhi.n	800939a <PCD_WriteEmptyTxFifo+0xde>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	695a      	ldr	r2, [r3, #20]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800938e:	429a      	cmp	r2, r3
 8009390:	d203      	bcs.n	800939a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1bf      	bne.n	800931a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	691a      	ldr	r2, [r3, #16]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d811      	bhi.n	80093ca <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	f003 030f 	and.w	r3, r3, #15
 80093ac:	2201      	movs	r2, #1
 80093ae:	fa02 f303 	lsl.w	r3, r2, r3
 80093b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	43db      	mvns	r3, r3
 80093c0:	6939      	ldr	r1, [r7, #16]
 80093c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093c6:	4013      	ands	r3, r2
 80093c8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3720      	adds	r7, #32
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	333c      	adds	r3, #60	@ 0x3c
 80093ec:	3304      	adds	r3, #4
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	015a      	lsls	r2, r3, #5
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	4413      	add	r3, r2
 80093fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	799b      	ldrb	r3, [r3, #6]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d17b      	bne.n	8009502 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	f003 0308 	and.w	r3, r3, #8
 8009410:	2b00      	cmp	r3, #0
 8009412:	d015      	beq.n	8009440 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	4a61      	ldr	r2, [pc, #388]	@ (800959c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009418:	4293      	cmp	r3, r2
 800941a:	f240 80b9 	bls.w	8009590 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009424:	2b00      	cmp	r3, #0
 8009426:	f000 80b3 	beq.w	8009590 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009436:	461a      	mov	r2, r3
 8009438:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800943c:	6093      	str	r3, [r2, #8]
 800943e:	e0a7      	b.n	8009590 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	f003 0320 	and.w	r3, r3, #32
 8009446:	2b00      	cmp	r3, #0
 8009448:	d009      	beq.n	800945e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	4413      	add	r3, r2
 8009452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009456:	461a      	mov	r2, r3
 8009458:	2320      	movs	r3, #32
 800945a:	6093      	str	r3, [r2, #8]
 800945c:	e098      	b.n	8009590 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009464:	2b00      	cmp	r3, #0
 8009466:	f040 8093 	bne.w	8009590 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	4a4b      	ldr	r2, [pc, #300]	@ (800959c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d90f      	bls.n	8009492 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00a      	beq.n	8009492 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	015a      	lsls	r2, r3, #5
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	4413      	add	r3, r2
 8009484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009488:	461a      	mov	r2, r3
 800948a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800948e:	6093      	str	r3, [r2, #8]
 8009490:	e07e      	b.n	8009590 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	4613      	mov	r3, r2
 8009496:	00db      	lsls	r3, r3, #3
 8009498:	4413      	add	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	4413      	add	r3, r2
 80094a4:	3304      	adds	r3, #4
 80094a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6a1a      	ldr	r2, [r3, #32]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	0159      	lsls	r1, r3, #5
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	440b      	add	r3, r1
 80094b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094be:	1ad2      	subs	r2, r2, r3
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d114      	bne.n	80094f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d109      	bne.n	80094e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80094dc:	461a      	mov	r2, r3
 80094de:	2101      	movs	r1, #1
 80094e0:	f007 ffac 	bl	801143c <USB_EP0_OutStart>
 80094e4:	e006      	b.n	80094f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	441a      	add	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f00a fae2 	bl	8013ac4 <HAL_PCD_DataOutStageCallback>
 8009500:	e046      	b.n	8009590 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	4a26      	ldr	r2, [pc, #152]	@ (80095a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d124      	bne.n	8009554 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00a      	beq.n	800952a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009520:	461a      	mov	r2, r3
 8009522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009526:	6093      	str	r3, [r2, #8]
 8009528:	e032      	b.n	8009590 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	f003 0320 	and.w	r3, r3, #32
 8009530:	2b00      	cmp	r3, #0
 8009532:	d008      	beq.n	8009546 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	4413      	add	r3, r2
 800953c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009540:	461a      	mov	r2, r3
 8009542:	2320      	movs	r3, #32
 8009544:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	b2db      	uxtb	r3, r3
 800954a:	4619      	mov	r1, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f00a fab9 	bl	8013ac4 <HAL_PCD_DataOutStageCallback>
 8009552:	e01d      	b.n	8009590 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d114      	bne.n	8009584 <PCD_EP_OutXfrComplete_int+0x1b0>
 800955a:	6879      	ldr	r1, [r7, #4]
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	4613      	mov	r3, r2
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	4413      	add	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	440b      	add	r3, r1
 8009568:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d108      	bne.n	8009584 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6818      	ldr	r0, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800957c:	461a      	mov	r2, r3
 800957e:	2100      	movs	r1, #0
 8009580:	f007 ff5c 	bl	801143c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	b2db      	uxtb	r3, r3
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f00a fa9a 	bl	8013ac4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3720      	adds	r7, #32
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	4f54300a 	.word	0x4f54300a
 80095a0:	4f54310a 	.word	0x4f54310a

080095a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	333c      	adds	r3, #60	@ 0x3c
 80095bc:	3304      	adds	r3, #4
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	015a      	lsls	r2, r3, #5
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	4413      	add	r3, r2
 80095ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	4a15      	ldr	r2, [pc, #84]	@ (800962c <PCD_EP_OutSetupPacket_int+0x88>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d90e      	bls.n	80095f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d009      	beq.n	80095f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	015a      	lsls	r2, r3, #5
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095f0:	461a      	mov	r2, r3
 80095f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f00a fa51 	bl	8013aa0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	4a0a      	ldr	r2, [pc, #40]	@ (800962c <PCD_EP_OutSetupPacket_int+0x88>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d90c      	bls.n	8009620 <PCD_EP_OutSetupPacket_int+0x7c>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	799b      	ldrb	r3, [r3, #6]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d108      	bne.n	8009620 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009618:	461a      	mov	r2, r3
 800961a:	2101      	movs	r1, #1
 800961c:	f007 ff0e 	bl	801143c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	4f54300a 	.word	0x4f54300a

08009630 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
 800963c:	4613      	mov	r3, r2
 800963e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009646:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009648:	78fb      	ldrb	r3, [r7, #3]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d107      	bne.n	800965e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800964e:	883b      	ldrh	r3, [r7, #0]
 8009650:	0419      	lsls	r1, r3, #16
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	430a      	orrs	r2, r1
 800965a:	629a      	str	r2, [r3, #40]	@ 0x28
 800965c:	e028      	b.n	80096b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009664:	0c1b      	lsrs	r3, r3, #16
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	4413      	add	r3, r2
 800966a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800966c:	2300      	movs	r3, #0
 800966e:	73fb      	strb	r3, [r7, #15]
 8009670:	e00d      	b.n	800968e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	3340      	adds	r3, #64	@ 0x40
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	0c1b      	lsrs	r3, r3, #16
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	4413      	add	r3, r2
 8009686:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	3301      	adds	r3, #1
 800968c:	73fb      	strb	r3, [r7, #15]
 800968e:	7bfa      	ldrb	r2, [r7, #15]
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	3b01      	subs	r3, #1
 8009694:	429a      	cmp	r2, r3
 8009696:	d3ec      	bcc.n	8009672 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009698:	883b      	ldrh	r3, [r7, #0]
 800969a:	0418      	lsls	r0, r3, #16
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6819      	ldr	r1, [r3, #0]
 80096a0:	78fb      	ldrb	r3, [r7, #3]
 80096a2:	3b01      	subs	r3, #1
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	4302      	orrs	r2, r0
 80096a8:	3340      	adds	r3, #64	@ 0x40
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	440b      	add	r3, r1
 80096ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80096be:	b480      	push	{r7}
 80096c0:	b083      	sub	sp, #12
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	460b      	mov	r3, r1
 80096c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	887a      	ldrh	r2, [r7, #2]
 80096d0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800970e:	4b05      	ldr	r3, [pc, #20]	@ (8009724 <HAL_PCDEx_ActivateLPM+0x44>)
 8009710:	4313      	orrs	r3, r2
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	10000003 	.word	0x10000003

08009728 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009748:	4b19      	ldr	r3, [pc, #100]	@ (80097b0 <HAL_PWREx_ConfigSupply+0x70>)
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	f003 0304 	and.w	r3, r3, #4
 8009750:	2b04      	cmp	r3, #4
 8009752:	d00a      	beq.n	800976a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009754:	4b16      	ldr	r3, [pc, #88]	@ (80097b0 <HAL_PWREx_ConfigSupply+0x70>)
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	f003 0307 	and.w	r3, r3, #7
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	429a      	cmp	r2, r3
 8009760:	d001      	beq.n	8009766 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e01f      	b.n	80097a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	e01d      	b.n	80097a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800976a:	4b11      	ldr	r3, [pc, #68]	@ (80097b0 <HAL_PWREx_ConfigSupply+0x70>)
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f023 0207 	bic.w	r2, r3, #7
 8009772:	490f      	ldr	r1, [pc, #60]	@ (80097b0 <HAL_PWREx_ConfigSupply+0x70>)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4313      	orrs	r3, r2
 8009778:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800977a:	f7f8 ff0f 	bl	800259c <HAL_GetTick>
 800977e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009780:	e009      	b.n	8009796 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009782:	f7f8 ff0b 	bl	800259c <HAL_GetTick>
 8009786:	4602      	mov	r2, r0
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009790:	d901      	bls.n	8009796 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e007      	b.n	80097a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009796:	4b06      	ldr	r3, [pc, #24]	@ (80097b0 <HAL_PWREx_ConfigSupply+0x70>)
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800979e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097a2:	d1ee      	bne.n	8009782 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	58024800 	.word	0x58024800

080097b4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80097b4:	b480      	push	{r7}
 80097b6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80097b8:	4b05      	ldr	r3, [pc, #20]	@ (80097d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	4a04      	ldr	r2, [pc, #16]	@ (80097d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80097be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80097c2:	60d3      	str	r3, [r2, #12]
}
 80097c4:	bf00      	nop
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	58024800 	.word	0x58024800

080097d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b08c      	sub	sp, #48	@ 0x30
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d102      	bne.n	80097e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	f000 bc48 	b.w	800a078 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0301 	and.w	r3, r3, #1
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 8088 	beq.w	8009906 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097f6:	4b99      	ldr	r3, [pc, #612]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009800:	4b96      	ldr	r3, [pc, #600]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009804:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009808:	2b10      	cmp	r3, #16
 800980a:	d007      	beq.n	800981c <HAL_RCC_OscConfig+0x48>
 800980c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980e:	2b18      	cmp	r3, #24
 8009810:	d111      	bne.n	8009836 <HAL_RCC_OscConfig+0x62>
 8009812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009814:	f003 0303 	and.w	r3, r3, #3
 8009818:	2b02      	cmp	r3, #2
 800981a:	d10c      	bne.n	8009836 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800981c:	4b8f      	ldr	r3, [pc, #572]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d06d      	beq.n	8009904 <HAL_RCC_OscConfig+0x130>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d169      	bne.n	8009904 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	f000 bc21 	b.w	800a078 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800983e:	d106      	bne.n	800984e <HAL_RCC_OscConfig+0x7a>
 8009840:	4b86      	ldr	r3, [pc, #536]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a85      	ldr	r2, [pc, #532]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009846:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800984a:	6013      	str	r3, [r2, #0]
 800984c:	e02e      	b.n	80098ac <HAL_RCC_OscConfig+0xd8>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10c      	bne.n	8009870 <HAL_RCC_OscConfig+0x9c>
 8009856:	4b81      	ldr	r3, [pc, #516]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a80      	ldr	r2, [pc, #512]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 800985c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009860:	6013      	str	r3, [r2, #0]
 8009862:	4b7e      	ldr	r3, [pc, #504]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a7d      	ldr	r2, [pc, #500]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009868:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800986c:	6013      	str	r3, [r2, #0]
 800986e:	e01d      	b.n	80098ac <HAL_RCC_OscConfig+0xd8>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009878:	d10c      	bne.n	8009894 <HAL_RCC_OscConfig+0xc0>
 800987a:	4b78      	ldr	r3, [pc, #480]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a77      	ldr	r2, [pc, #476]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009880:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	4b75      	ldr	r3, [pc, #468]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a74      	ldr	r2, [pc, #464]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 800988c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009890:	6013      	str	r3, [r2, #0]
 8009892:	e00b      	b.n	80098ac <HAL_RCC_OscConfig+0xd8>
 8009894:	4b71      	ldr	r3, [pc, #452]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a70      	ldr	r2, [pc, #448]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 800989a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800989e:	6013      	str	r3, [r2, #0]
 80098a0:	4b6e      	ldr	r3, [pc, #440]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a6d      	ldr	r2, [pc, #436]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 80098a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80098aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d013      	beq.n	80098dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098b4:	f7f8 fe72 	bl	800259c <HAL_GetTick>
 80098b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098ba:	e008      	b.n	80098ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098bc:	f7f8 fe6e 	bl	800259c <HAL_GetTick>
 80098c0:	4602      	mov	r2, r0
 80098c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c4:	1ad3      	subs	r3, r2, r3
 80098c6:	2b64      	cmp	r3, #100	@ 0x64
 80098c8:	d901      	bls.n	80098ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e3d4      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098ce:	4b63      	ldr	r3, [pc, #396]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0f0      	beq.n	80098bc <HAL_RCC_OscConfig+0xe8>
 80098da:	e014      	b.n	8009906 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098dc:	f7f8 fe5e 	bl	800259c <HAL_GetTick>
 80098e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80098e2:	e008      	b.n	80098f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098e4:	f7f8 fe5a 	bl	800259c <HAL_GetTick>
 80098e8:	4602      	mov	r2, r0
 80098ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	2b64      	cmp	r3, #100	@ 0x64
 80098f0:	d901      	bls.n	80098f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e3c0      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80098f6:	4b59      	ldr	r3, [pc, #356]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1f0      	bne.n	80098e4 <HAL_RCC_OscConfig+0x110>
 8009902:	e000      	b.n	8009906 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 0302 	and.w	r3, r3, #2
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 80ca 	beq.w	8009aa8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009914:	4b51      	ldr	r3, [pc, #324]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800991c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800991e:	4b4f      	ldr	r3, [pc, #316]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009922:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d007      	beq.n	800993a <HAL_RCC_OscConfig+0x166>
 800992a:	6a3b      	ldr	r3, [r7, #32]
 800992c:	2b18      	cmp	r3, #24
 800992e:	d156      	bne.n	80099de <HAL_RCC_OscConfig+0x20a>
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	f003 0303 	and.w	r3, r3, #3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d151      	bne.n	80099de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800993a:	4b48      	ldr	r3, [pc, #288]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0304 	and.w	r3, r3, #4
 8009942:	2b00      	cmp	r3, #0
 8009944:	d005      	beq.n	8009952 <HAL_RCC_OscConfig+0x17e>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d101      	bne.n	8009952 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e392      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009952:	4b42      	ldr	r3, [pc, #264]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f023 0219 	bic.w	r2, r3, #25
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	493f      	ldr	r1, [pc, #252]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009960:	4313      	orrs	r3, r2
 8009962:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009964:	f7f8 fe1a 	bl	800259c <HAL_GetTick>
 8009968:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800996a:	e008      	b.n	800997e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800996c:	f7f8 fe16 	bl	800259c <HAL_GetTick>
 8009970:	4602      	mov	r2, r0
 8009972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	2b02      	cmp	r3, #2
 8009978:	d901      	bls.n	800997e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	e37c      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800997e:	4b37      	ldr	r3, [pc, #220]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0304 	and.w	r3, r3, #4
 8009986:	2b00      	cmp	r3, #0
 8009988:	d0f0      	beq.n	800996c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800998a:	f7f8 fe37 	bl	80025fc <HAL_GetREVID>
 800998e:	4603      	mov	r3, r0
 8009990:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009994:	4293      	cmp	r3, r2
 8009996:	d817      	bhi.n	80099c8 <HAL_RCC_OscConfig+0x1f4>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	2b40      	cmp	r3, #64	@ 0x40
 800999e:	d108      	bne.n	80099b2 <HAL_RCC_OscConfig+0x1de>
 80099a0:	4b2e      	ldr	r3, [pc, #184]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80099a8:	4a2c      	ldr	r2, [pc, #176]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 80099aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099b0:	e07a      	b.n	8009aa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099b2:	4b2a      	ldr	r3, [pc, #168]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	031b      	lsls	r3, r3, #12
 80099c0:	4926      	ldr	r1, [pc, #152]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099c6:	e06f      	b.n	8009aa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099c8:	4b24      	ldr	r3, [pc, #144]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	061b      	lsls	r3, r3, #24
 80099d6:	4921      	ldr	r1, [pc, #132]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099dc:	e064      	b.n	8009aa8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d047      	beq.n	8009a76 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80099e6:	4b1d      	ldr	r3, [pc, #116]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f023 0219 	bic.w	r2, r3, #25
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	491a      	ldr	r1, [pc, #104]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 80099f4:	4313      	orrs	r3, r2
 80099f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f8:	f7f8 fdd0 	bl	800259c <HAL_GetTick>
 80099fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099fe:	e008      	b.n	8009a12 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a00:	f7f8 fdcc 	bl	800259c <HAL_GetTick>
 8009a04:	4602      	mov	r2, r0
 8009a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d901      	bls.n	8009a12 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	e332      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a12:	4b12      	ldr	r3, [pc, #72]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0304 	and.w	r3, r3, #4
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d0f0      	beq.n	8009a00 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a1e:	f7f8 fded 	bl	80025fc <HAL_GetREVID>
 8009a22:	4603      	mov	r3, r0
 8009a24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d819      	bhi.n	8009a60 <HAL_RCC_OscConfig+0x28c>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	2b40      	cmp	r3, #64	@ 0x40
 8009a32:	d108      	bne.n	8009a46 <HAL_RCC_OscConfig+0x272>
 8009a34:	4b09      	ldr	r3, [pc, #36]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009a3c:	4a07      	ldr	r2, [pc, #28]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a42:	6053      	str	r3, [r2, #4]
 8009a44:	e030      	b.n	8009aa8 <HAL_RCC_OscConfig+0x2d4>
 8009a46:	4b05      	ldr	r3, [pc, #20]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	031b      	lsls	r3, r3, #12
 8009a54:	4901      	ldr	r1, [pc, #4]	@ (8009a5c <HAL_RCC_OscConfig+0x288>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	604b      	str	r3, [r1, #4]
 8009a5a:	e025      	b.n	8009aa8 <HAL_RCC_OscConfig+0x2d4>
 8009a5c:	58024400 	.word	0x58024400
 8009a60:	4b9a      	ldr	r3, [pc, #616]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	061b      	lsls	r3, r3, #24
 8009a6e:	4997      	ldr	r1, [pc, #604]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009a70:	4313      	orrs	r3, r2
 8009a72:	604b      	str	r3, [r1, #4]
 8009a74:	e018      	b.n	8009aa8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a76:	4b95      	ldr	r3, [pc, #596]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a94      	ldr	r2, [pc, #592]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009a7c:	f023 0301 	bic.w	r3, r3, #1
 8009a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a82:	f7f8 fd8b 	bl	800259c <HAL_GetTick>
 8009a86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a88:	e008      	b.n	8009a9c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a8a:	f7f8 fd87 	bl	800259c <HAL_GetTick>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d901      	bls.n	8009a9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e2ed      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a9c:	4b8b      	ldr	r3, [pc, #556]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 0304 	and.w	r3, r3, #4
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1f0      	bne.n	8009a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 0310 	and.w	r3, r3, #16
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 80a9 	beq.w	8009c08 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ab6:	4b85      	ldr	r3, [pc, #532]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009abe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ac0:	4b82      	ldr	r3, [pc, #520]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	2b08      	cmp	r3, #8
 8009aca:	d007      	beq.n	8009adc <HAL_RCC_OscConfig+0x308>
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	2b18      	cmp	r3, #24
 8009ad0:	d13a      	bne.n	8009b48 <HAL_RCC_OscConfig+0x374>
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f003 0303 	and.w	r3, r3, #3
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d135      	bne.n	8009b48 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009adc:	4b7b      	ldr	r3, [pc, #492]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d005      	beq.n	8009af4 <HAL_RCC_OscConfig+0x320>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	69db      	ldr	r3, [r3, #28]
 8009aec:	2b80      	cmp	r3, #128	@ 0x80
 8009aee:	d001      	beq.n	8009af4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e2c1      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009af4:	f7f8 fd82 	bl	80025fc <HAL_GetREVID>
 8009af8:	4603      	mov	r3, r0
 8009afa:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d817      	bhi.n	8009b32 <HAL_RCC_OscConfig+0x35e>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a1b      	ldr	r3, [r3, #32]
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	d108      	bne.n	8009b1c <HAL_RCC_OscConfig+0x348>
 8009b0a:	4b70      	ldr	r3, [pc, #448]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009b12:	4a6e      	ldr	r2, [pc, #440]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009b14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b18:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b1a:	e075      	b.n	8009c08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b1c:	4b6b      	ldr	r3, [pc, #428]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a1b      	ldr	r3, [r3, #32]
 8009b28:	069b      	lsls	r3, r3, #26
 8009b2a:	4968      	ldr	r1, [pc, #416]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b30:	e06a      	b.n	8009c08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b32:	4b66      	ldr	r3, [pc, #408]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	061b      	lsls	r3, r3, #24
 8009b40:	4962      	ldr	r1, [pc, #392]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009b42:	4313      	orrs	r3, r2
 8009b44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b46:	e05f      	b.n	8009c08 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	69db      	ldr	r3, [r3, #28]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d042      	beq.n	8009bd6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009b50:	4b5e      	ldr	r3, [pc, #376]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a5d      	ldr	r2, [pc, #372]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b5c:	f7f8 fd1e 	bl	800259c <HAL_GetTick>
 8009b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b62:	e008      	b.n	8009b76 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009b64:	f7f8 fd1a 	bl	800259c <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d901      	bls.n	8009b76 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e280      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b76:	4b55      	ldr	r3, [pc, #340]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0f0      	beq.n	8009b64 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b82:	f7f8 fd3b 	bl	80025fc <HAL_GetREVID>
 8009b86:	4603      	mov	r3, r0
 8009b88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d817      	bhi.n	8009bc0 <HAL_RCC_OscConfig+0x3ec>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a1b      	ldr	r3, [r3, #32]
 8009b94:	2b20      	cmp	r3, #32
 8009b96:	d108      	bne.n	8009baa <HAL_RCC_OscConfig+0x3d6>
 8009b98:	4b4c      	ldr	r3, [pc, #304]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009ba2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ba6:	6053      	str	r3, [r2, #4]
 8009ba8:	e02e      	b.n	8009c08 <HAL_RCC_OscConfig+0x434>
 8009baa:	4b48      	ldr	r3, [pc, #288]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	069b      	lsls	r3, r3, #26
 8009bb8:	4944      	ldr	r1, [pc, #272]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	604b      	str	r3, [r1, #4]
 8009bbe:	e023      	b.n	8009c08 <HAL_RCC_OscConfig+0x434>
 8009bc0:	4b42      	ldr	r3, [pc, #264]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	061b      	lsls	r3, r3, #24
 8009bce:	493f      	ldr	r1, [pc, #252]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	60cb      	str	r3, [r1, #12]
 8009bd4:	e018      	b.n	8009c08 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a3c      	ldr	r2, [pc, #240]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009bdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009be2:	f7f8 fcdb 	bl	800259c <HAL_GetTick>
 8009be6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009be8:	e008      	b.n	8009bfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009bea:	f7f8 fcd7 	bl	800259c <HAL_GetTick>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d901      	bls.n	8009bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	e23d      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009bfc:	4b33      	ldr	r3, [pc, #204]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1f0      	bne.n	8009bea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0308 	and.w	r3, r3, #8
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d036      	beq.n	8009c82 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d019      	beq.n	8009c50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c20:	4a2a      	ldr	r2, [pc, #168]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009c22:	f043 0301 	orr.w	r3, r3, #1
 8009c26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c28:	f7f8 fcb8 	bl	800259c <HAL_GetTick>
 8009c2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c2e:	e008      	b.n	8009c42 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c30:	f7f8 fcb4 	bl	800259c <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d901      	bls.n	8009c42 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e21a      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c42:	4b22      	ldr	r3, [pc, #136]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c46:	f003 0302 	and.w	r3, r3, #2
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d0f0      	beq.n	8009c30 <HAL_RCC_OscConfig+0x45c>
 8009c4e:	e018      	b.n	8009c82 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c50:	4b1e      	ldr	r3, [pc, #120]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c54:	4a1d      	ldr	r2, [pc, #116]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009c56:	f023 0301 	bic.w	r3, r3, #1
 8009c5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c5c:	f7f8 fc9e 	bl	800259c <HAL_GetTick>
 8009c60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c62:	e008      	b.n	8009c76 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c64:	f7f8 fc9a 	bl	800259c <HAL_GetTick>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d901      	bls.n	8009c76 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e200      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c76:	4b15      	ldr	r3, [pc, #84]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c7a:	f003 0302 	and.w	r3, r3, #2
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1f0      	bne.n	8009c64 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 0320 	and.w	r3, r3, #32
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d039      	beq.n	8009d02 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d01c      	beq.n	8009cd0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c96:	4b0d      	ldr	r3, [pc, #52]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009c9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009ca0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009ca2:	f7f8 fc7b 	bl	800259c <HAL_GetTick>
 8009ca6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009ca8:	e008      	b.n	8009cbc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009caa:	f7f8 fc77 	bl	800259c <HAL_GetTick>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d901      	bls.n	8009cbc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e1dd      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009cbc:	4b03      	ldr	r3, [pc, #12]	@ (8009ccc <HAL_RCC_OscConfig+0x4f8>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d0f0      	beq.n	8009caa <HAL_RCC_OscConfig+0x4d6>
 8009cc8:	e01b      	b.n	8009d02 <HAL_RCC_OscConfig+0x52e>
 8009cca:	bf00      	nop
 8009ccc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009cd0:	4b9b      	ldr	r3, [pc, #620]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a9a      	ldr	r2, [pc, #616]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009cd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009cda:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009cdc:	f7f8 fc5e 	bl	800259c <HAL_GetTick>
 8009ce0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009ce2:	e008      	b.n	8009cf6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ce4:	f7f8 fc5a 	bl	800259c <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d901      	bls.n	8009cf6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e1c0      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009cf6:	4b92      	ldr	r3, [pc, #584]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1f0      	bne.n	8009ce4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 0304 	and.w	r3, r3, #4
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 8081 	beq.w	8009e12 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009d10:	4b8c      	ldr	r3, [pc, #560]	@ (8009f44 <HAL_RCC_OscConfig+0x770>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a8b      	ldr	r2, [pc, #556]	@ (8009f44 <HAL_RCC_OscConfig+0x770>)
 8009d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d1c:	f7f8 fc3e 	bl	800259c <HAL_GetTick>
 8009d20:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d22:	e008      	b.n	8009d36 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d24:	f7f8 fc3a 	bl	800259c <HAL_GetTick>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2c:	1ad3      	subs	r3, r2, r3
 8009d2e:	2b64      	cmp	r3, #100	@ 0x64
 8009d30:	d901      	bls.n	8009d36 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e1a0      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d36:	4b83      	ldr	r3, [pc, #524]	@ (8009f44 <HAL_RCC_OscConfig+0x770>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d0f0      	beq.n	8009d24 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d106      	bne.n	8009d58 <HAL_RCC_OscConfig+0x584>
 8009d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d4e:	4a7c      	ldr	r2, [pc, #496]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009d50:	f043 0301 	orr.w	r3, r3, #1
 8009d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d56:	e02d      	b.n	8009db4 <HAL_RCC_OscConfig+0x5e0>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d10c      	bne.n	8009d7a <HAL_RCC_OscConfig+0x5a6>
 8009d60:	4b77      	ldr	r3, [pc, #476]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d64:	4a76      	ldr	r2, [pc, #472]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009d66:	f023 0301 	bic.w	r3, r3, #1
 8009d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d6c:	4b74      	ldr	r3, [pc, #464]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d70:	4a73      	ldr	r2, [pc, #460]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009d72:	f023 0304 	bic.w	r3, r3, #4
 8009d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d78:	e01c      	b.n	8009db4 <HAL_RCC_OscConfig+0x5e0>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	2b05      	cmp	r3, #5
 8009d80:	d10c      	bne.n	8009d9c <HAL_RCC_OscConfig+0x5c8>
 8009d82:	4b6f      	ldr	r3, [pc, #444]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d86:	4a6e      	ldr	r2, [pc, #440]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009d88:	f043 0304 	orr.w	r3, r3, #4
 8009d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d92:	4a6b      	ldr	r2, [pc, #428]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009d94:	f043 0301 	orr.w	r3, r3, #1
 8009d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d9a:	e00b      	b.n	8009db4 <HAL_RCC_OscConfig+0x5e0>
 8009d9c:	4b68      	ldr	r3, [pc, #416]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009da0:	4a67      	ldr	r2, [pc, #412]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009da2:	f023 0301 	bic.w	r3, r3, #1
 8009da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8009da8:	4b65      	ldr	r3, [pc, #404]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dac:	4a64      	ldr	r2, [pc, #400]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009dae:	f023 0304 	bic.w	r3, r3, #4
 8009db2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d015      	beq.n	8009de8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dbc:	f7f8 fbee 	bl	800259c <HAL_GetTick>
 8009dc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dc2:	e00a      	b.n	8009dda <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dc4:	f7f8 fbea 	bl	800259c <HAL_GetTick>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d901      	bls.n	8009dda <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e14e      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dda:	4b59      	ldr	r3, [pc, #356]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d0ee      	beq.n	8009dc4 <HAL_RCC_OscConfig+0x5f0>
 8009de6:	e014      	b.n	8009e12 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009de8:	f7f8 fbd8 	bl	800259c <HAL_GetTick>
 8009dec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009dee:	e00a      	b.n	8009e06 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009df0:	f7f8 fbd4 	bl	800259c <HAL_GetTick>
 8009df4:	4602      	mov	r2, r0
 8009df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d901      	bls.n	8009e06 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e138      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e06:	4b4e      	ldr	r3, [pc, #312]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e0a:	f003 0302 	and.w	r3, r3, #2
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1ee      	bne.n	8009df0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 812d 	beq.w	800a076 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009e1c:	4b48      	ldr	r3, [pc, #288]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e24:	2b18      	cmp	r3, #24
 8009e26:	f000 80bd 	beq.w	8009fa4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	f040 809e 	bne.w	8009f70 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e34:	4b42      	ldr	r3, [pc, #264]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a41      	ldr	r2, [pc, #260]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009e3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e40:	f7f8 fbac 	bl	800259c <HAL_GetTick>
 8009e44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e46:	e008      	b.n	8009e5a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e48:	f7f8 fba8 	bl	800259c <HAL_GetTick>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d901      	bls.n	8009e5a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009e56:	2303      	movs	r3, #3
 8009e58:	e10e      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e5a:	4b39      	ldr	r3, [pc, #228]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1f0      	bne.n	8009e48 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e66:	4b36      	ldr	r3, [pc, #216]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009e68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e6a:	4b37      	ldr	r3, [pc, #220]	@ (8009f48 <HAL_RCC_OscConfig+0x774>)
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009e76:	0112      	lsls	r2, r2, #4
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	4931      	ldr	r1, [pc, #196]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e84:	3b01      	subs	r3, #1
 8009e86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	025b      	lsls	r3, r3, #9
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	431a      	orrs	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	041b      	lsls	r3, r3, #16
 8009e9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	061b      	lsls	r3, r3, #24
 8009eac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009eb0:	4923      	ldr	r1, [pc, #140]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009eb6:	4b22      	ldr	r3, [pc, #136]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eba:	4a21      	ldr	r2, [pc, #132]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009ebc:	f023 0301 	bic.w	r3, r3, #1
 8009ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009ec4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ec6:	4b21      	ldr	r3, [pc, #132]	@ (8009f4c <HAL_RCC_OscConfig+0x778>)
 8009ec8:	4013      	ands	r3, r2
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009ece:	00d2      	lsls	r2, r2, #3
 8009ed0:	491b      	ldr	r1, [pc, #108]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eda:	f023 020c 	bic.w	r2, r3, #12
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee2:	4917      	ldr	r1, [pc, #92]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ee8:	4b15      	ldr	r3, [pc, #84]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eec:	f023 0202 	bic.w	r2, r3, #2
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ef4:	4912      	ldr	r1, [pc, #72]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009efa:	4b11      	ldr	r3, [pc, #68]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efe:	4a10      	ldr	r2, [pc, #64]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f06:	4b0e      	ldr	r3, [pc, #56]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009f12:	4b0b      	ldr	r3, [pc, #44]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f16:	4a0a      	ldr	r2, [pc, #40]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009f1e:	4b08      	ldr	r3, [pc, #32]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f22:	4a07      	ldr	r2, [pc, #28]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009f24:	f043 0301 	orr.w	r3, r3, #1
 8009f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f2a:	4b05      	ldr	r3, [pc, #20]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a04      	ldr	r2, [pc, #16]	@ (8009f40 <HAL_RCC_OscConfig+0x76c>)
 8009f30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f36:	f7f8 fb31 	bl	800259c <HAL_GetTick>
 8009f3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f3c:	e011      	b.n	8009f62 <HAL_RCC_OscConfig+0x78e>
 8009f3e:	bf00      	nop
 8009f40:	58024400 	.word	0x58024400
 8009f44:	58024800 	.word	0x58024800
 8009f48:	fffffc0c 	.word	0xfffffc0c
 8009f4c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f50:	f7f8 fb24 	bl	800259c <HAL_GetTick>
 8009f54:	4602      	mov	r2, r0
 8009f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d901      	bls.n	8009f62 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	e08a      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f62:	4b47      	ldr	r3, [pc, #284]	@ (800a080 <HAL_RCC_OscConfig+0x8ac>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d0f0      	beq.n	8009f50 <HAL_RCC_OscConfig+0x77c>
 8009f6e:	e082      	b.n	800a076 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f70:	4b43      	ldr	r3, [pc, #268]	@ (800a080 <HAL_RCC_OscConfig+0x8ac>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a42      	ldr	r2, [pc, #264]	@ (800a080 <HAL_RCC_OscConfig+0x8ac>)
 8009f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f7c:	f7f8 fb0e 	bl	800259c <HAL_GetTick>
 8009f80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f82:	e008      	b.n	8009f96 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f84:	f7f8 fb0a 	bl	800259c <HAL_GetTick>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d901      	bls.n	8009f96 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e070      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f96:	4b3a      	ldr	r3, [pc, #232]	@ (800a080 <HAL_RCC_OscConfig+0x8ac>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1f0      	bne.n	8009f84 <HAL_RCC_OscConfig+0x7b0>
 8009fa2:	e068      	b.n	800a076 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009fa4:	4b36      	ldr	r3, [pc, #216]	@ (800a080 <HAL_RCC_OscConfig+0x8ac>)
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009faa:	4b35      	ldr	r3, [pc, #212]	@ (800a080 <HAL_RCC_OscConfig+0x8ac>)
 8009fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d031      	beq.n	800a01c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	f003 0203 	and.w	r2, r3, #3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d12a      	bne.n	800a01c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	091b      	lsrs	r3, r3, #4
 8009fca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d122      	bne.n	800a01c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fe0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d11a      	bne.n	800a01c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	0a5b      	lsrs	r3, r3, #9
 8009fea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ff2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d111      	bne.n	800a01c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	0c1b      	lsrs	r3, r3, #16
 8009ffc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a004:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a006:	429a      	cmp	r2, r3
 800a008:	d108      	bne.n	800a01c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	0e1b      	lsrs	r3, r3, #24
 800a00e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a016:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a018:	429a      	cmp	r2, r3
 800a01a:	d001      	beq.n	800a020 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e02b      	b.n	800a078 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a020:	4b17      	ldr	r3, [pc, #92]	@ (800a080 <HAL_RCC_OscConfig+0x8ac>)
 800a022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a024:	08db      	lsrs	r3, r3, #3
 800a026:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a02a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a030:	693a      	ldr	r2, [r7, #16]
 800a032:	429a      	cmp	r2, r3
 800a034:	d01f      	beq.n	800a076 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a036:	4b12      	ldr	r3, [pc, #72]	@ (800a080 <HAL_RCC_OscConfig+0x8ac>)
 800a038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a03a:	4a11      	ldr	r2, [pc, #68]	@ (800a080 <HAL_RCC_OscConfig+0x8ac>)
 800a03c:	f023 0301 	bic.w	r3, r3, #1
 800a040:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a042:	f7f8 faab 	bl	800259c <HAL_GetTick>
 800a046:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a048:	bf00      	nop
 800a04a:	f7f8 faa7 	bl	800259c <HAL_GetTick>
 800a04e:	4602      	mov	r2, r0
 800a050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a052:	4293      	cmp	r3, r2
 800a054:	d0f9      	beq.n	800a04a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a056:	4b0a      	ldr	r3, [pc, #40]	@ (800a080 <HAL_RCC_OscConfig+0x8ac>)
 800a058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a05a:	4b0a      	ldr	r3, [pc, #40]	@ (800a084 <HAL_RCC_OscConfig+0x8b0>)
 800a05c:	4013      	ands	r3, r2
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a062:	00d2      	lsls	r2, r2, #3
 800a064:	4906      	ldr	r1, [pc, #24]	@ (800a080 <HAL_RCC_OscConfig+0x8ac>)
 800a066:	4313      	orrs	r3, r2
 800a068:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a06a:	4b05      	ldr	r3, [pc, #20]	@ (800a080 <HAL_RCC_OscConfig+0x8ac>)
 800a06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a06e:	4a04      	ldr	r2, [pc, #16]	@ (800a080 <HAL_RCC_OscConfig+0x8ac>)
 800a070:	f043 0301 	orr.w	r3, r3, #1
 800a074:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3730      	adds	r7, #48	@ 0x30
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	58024400 	.word	0x58024400
 800a084:	ffff0007 	.word	0xffff0007

0800a088 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d101      	bne.n	800a09c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e19c      	b.n	800a3d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a09c:	4b8a      	ldr	r3, [pc, #552]	@ (800a2c8 <HAL_RCC_ClockConfig+0x240>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 030f 	and.w	r3, r3, #15
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d910      	bls.n	800a0cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0aa:	4b87      	ldr	r3, [pc, #540]	@ (800a2c8 <HAL_RCC_ClockConfig+0x240>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f023 020f 	bic.w	r2, r3, #15
 800a0b2:	4985      	ldr	r1, [pc, #532]	@ (800a2c8 <HAL_RCC_ClockConfig+0x240>)
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0ba:	4b83      	ldr	r3, [pc, #524]	@ (800a2c8 <HAL_RCC_ClockConfig+0x240>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 030f 	and.w	r3, r3, #15
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d001      	beq.n	800a0cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e184      	b.n	800a3d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 0304 	and.w	r3, r3, #4
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d010      	beq.n	800a0fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	691a      	ldr	r2, [r3, #16]
 800a0dc:	4b7b      	ldr	r3, [pc, #492]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d908      	bls.n	800a0fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a0e8:	4b78      	ldr	r3, [pc, #480]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a0ea:	699b      	ldr	r3, [r3, #24]
 800a0ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	4975      	ldr	r1, [pc, #468]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 0308 	and.w	r3, r3, #8
 800a102:	2b00      	cmp	r3, #0
 800a104:	d010      	beq.n	800a128 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	695a      	ldr	r2, [r3, #20]
 800a10a:	4b70      	ldr	r3, [pc, #448]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a10c:	69db      	ldr	r3, [r3, #28]
 800a10e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a112:	429a      	cmp	r2, r3
 800a114:	d908      	bls.n	800a128 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a116:	4b6d      	ldr	r3, [pc, #436]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a118:	69db      	ldr	r3, [r3, #28]
 800a11a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	496a      	ldr	r1, [pc, #424]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a124:	4313      	orrs	r3, r2
 800a126:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 0310 	and.w	r3, r3, #16
 800a130:	2b00      	cmp	r3, #0
 800a132:	d010      	beq.n	800a156 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	699a      	ldr	r2, [r3, #24]
 800a138:	4b64      	ldr	r3, [pc, #400]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a13a:	69db      	ldr	r3, [r3, #28]
 800a13c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a140:	429a      	cmp	r2, r3
 800a142:	d908      	bls.n	800a156 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a144:	4b61      	ldr	r3, [pc, #388]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a146:	69db      	ldr	r3, [r3, #28]
 800a148:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	495e      	ldr	r1, [pc, #376]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a152:	4313      	orrs	r3, r2
 800a154:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 0320 	and.w	r3, r3, #32
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d010      	beq.n	800a184 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	69da      	ldr	r2, [r3, #28]
 800a166:	4b59      	ldr	r3, [pc, #356]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a16e:	429a      	cmp	r2, r3
 800a170:	d908      	bls.n	800a184 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a172:	4b56      	ldr	r3, [pc, #344]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	4953      	ldr	r1, [pc, #332]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a180:	4313      	orrs	r3, r2
 800a182:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 0302 	and.w	r3, r3, #2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d010      	beq.n	800a1b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68da      	ldr	r2, [r3, #12]
 800a194:	4b4d      	ldr	r3, [pc, #308]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	f003 030f 	and.w	r3, r3, #15
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d908      	bls.n	800a1b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1a0:	4b4a      	ldr	r3, [pc, #296]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	f023 020f 	bic.w	r2, r3, #15
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	4947      	ldr	r1, [pc, #284]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d055      	beq.n	800a26a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a1be:	4b43      	ldr	r3, [pc, #268]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	4940      	ldr	r1, [pc, #256]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d107      	bne.n	800a1e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1d8:	4b3c      	ldr	r3, [pc, #240]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d121      	bne.n	800a228 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e0f6      	b.n	800a3d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	2b03      	cmp	r3, #3
 800a1ee:	d107      	bne.n	800a200 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1f0:	4b36      	ldr	r3, [pc, #216]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d115      	bne.n	800a228 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e0ea      	b.n	800a3d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d107      	bne.n	800a218 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a208:	4b30      	ldr	r3, [pc, #192]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a210:	2b00      	cmp	r3, #0
 800a212:	d109      	bne.n	800a228 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e0de      	b.n	800a3d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a218:	4b2c      	ldr	r3, [pc, #176]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 0304 	and.w	r3, r3, #4
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	e0d6      	b.n	800a3d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a228:	4b28      	ldr	r3, [pc, #160]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	f023 0207 	bic.w	r2, r3, #7
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	4925      	ldr	r1, [pc, #148]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a236:	4313      	orrs	r3, r2
 800a238:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a23a:	f7f8 f9af 	bl	800259c <HAL_GetTick>
 800a23e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a240:	e00a      	b.n	800a258 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a242:	f7f8 f9ab 	bl	800259c <HAL_GetTick>
 800a246:	4602      	mov	r2, r0
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a250:	4293      	cmp	r3, r2
 800a252:	d901      	bls.n	800a258 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a254:	2303      	movs	r3, #3
 800a256:	e0be      	b.n	800a3d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a258:	4b1c      	ldr	r3, [pc, #112]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	00db      	lsls	r3, r3, #3
 800a266:	429a      	cmp	r2, r3
 800a268:	d1eb      	bne.n	800a242 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 0302 	and.w	r3, r3, #2
 800a272:	2b00      	cmp	r3, #0
 800a274:	d010      	beq.n	800a298 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68da      	ldr	r2, [r3, #12]
 800a27a:	4b14      	ldr	r3, [pc, #80]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	f003 030f 	and.w	r3, r3, #15
 800a282:	429a      	cmp	r2, r3
 800a284:	d208      	bcs.n	800a298 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a286:	4b11      	ldr	r3, [pc, #68]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a288:	699b      	ldr	r3, [r3, #24]
 800a28a:	f023 020f 	bic.w	r2, r3, #15
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	490e      	ldr	r1, [pc, #56]	@ (800a2cc <HAL_RCC_ClockConfig+0x244>)
 800a294:	4313      	orrs	r3, r2
 800a296:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a298:	4b0b      	ldr	r3, [pc, #44]	@ (800a2c8 <HAL_RCC_ClockConfig+0x240>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f003 030f 	and.w	r3, r3, #15
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d214      	bcs.n	800a2d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2a6:	4b08      	ldr	r3, [pc, #32]	@ (800a2c8 <HAL_RCC_ClockConfig+0x240>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f023 020f 	bic.w	r2, r3, #15
 800a2ae:	4906      	ldr	r1, [pc, #24]	@ (800a2c8 <HAL_RCC_ClockConfig+0x240>)
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2b6:	4b04      	ldr	r3, [pc, #16]	@ (800a2c8 <HAL_RCC_ClockConfig+0x240>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 030f 	and.w	r3, r3, #15
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d005      	beq.n	800a2d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e086      	b.n	800a3d6 <HAL_RCC_ClockConfig+0x34e>
 800a2c8:	52002000 	.word	0x52002000
 800a2cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 0304 	and.w	r3, r3, #4
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d010      	beq.n	800a2fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	691a      	ldr	r2, [r3, #16]
 800a2e0:	4b3f      	ldr	r3, [pc, #252]	@ (800a3e0 <HAL_RCC_ClockConfig+0x358>)
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d208      	bcs.n	800a2fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a2ec:	4b3c      	ldr	r3, [pc, #240]	@ (800a3e0 <HAL_RCC_ClockConfig+0x358>)
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	4939      	ldr	r1, [pc, #228]	@ (800a3e0 <HAL_RCC_ClockConfig+0x358>)
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f003 0308 	and.w	r3, r3, #8
 800a306:	2b00      	cmp	r3, #0
 800a308:	d010      	beq.n	800a32c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	695a      	ldr	r2, [r3, #20]
 800a30e:	4b34      	ldr	r3, [pc, #208]	@ (800a3e0 <HAL_RCC_ClockConfig+0x358>)
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a316:	429a      	cmp	r2, r3
 800a318:	d208      	bcs.n	800a32c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a31a:	4b31      	ldr	r3, [pc, #196]	@ (800a3e0 <HAL_RCC_ClockConfig+0x358>)
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	695b      	ldr	r3, [r3, #20]
 800a326:	492e      	ldr	r1, [pc, #184]	@ (800a3e0 <HAL_RCC_ClockConfig+0x358>)
 800a328:	4313      	orrs	r3, r2
 800a32a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0310 	and.w	r3, r3, #16
 800a334:	2b00      	cmp	r3, #0
 800a336:	d010      	beq.n	800a35a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	699a      	ldr	r2, [r3, #24]
 800a33c:	4b28      	ldr	r3, [pc, #160]	@ (800a3e0 <HAL_RCC_ClockConfig+0x358>)
 800a33e:	69db      	ldr	r3, [r3, #28]
 800a340:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a344:	429a      	cmp	r2, r3
 800a346:	d208      	bcs.n	800a35a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a348:	4b25      	ldr	r3, [pc, #148]	@ (800a3e0 <HAL_RCC_ClockConfig+0x358>)
 800a34a:	69db      	ldr	r3, [r3, #28]
 800a34c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	4922      	ldr	r1, [pc, #136]	@ (800a3e0 <HAL_RCC_ClockConfig+0x358>)
 800a356:	4313      	orrs	r3, r2
 800a358:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f003 0320 	and.w	r3, r3, #32
 800a362:	2b00      	cmp	r3, #0
 800a364:	d010      	beq.n	800a388 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	69da      	ldr	r2, [r3, #28]
 800a36a:	4b1d      	ldr	r3, [pc, #116]	@ (800a3e0 <HAL_RCC_ClockConfig+0x358>)
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a372:	429a      	cmp	r2, r3
 800a374:	d208      	bcs.n	800a388 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a376:	4b1a      	ldr	r3, [pc, #104]	@ (800a3e0 <HAL_RCC_ClockConfig+0x358>)
 800a378:	6a1b      	ldr	r3, [r3, #32]
 800a37a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	4917      	ldr	r1, [pc, #92]	@ (800a3e0 <HAL_RCC_ClockConfig+0x358>)
 800a384:	4313      	orrs	r3, r2
 800a386:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a388:	f000 f834 	bl	800a3f4 <HAL_RCC_GetSysClockFreq>
 800a38c:	4602      	mov	r2, r0
 800a38e:	4b14      	ldr	r3, [pc, #80]	@ (800a3e0 <HAL_RCC_ClockConfig+0x358>)
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	0a1b      	lsrs	r3, r3, #8
 800a394:	f003 030f 	and.w	r3, r3, #15
 800a398:	4912      	ldr	r1, [pc, #72]	@ (800a3e4 <HAL_RCC_ClockConfig+0x35c>)
 800a39a:	5ccb      	ldrb	r3, [r1, r3]
 800a39c:	f003 031f 	and.w	r3, r3, #31
 800a3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a3a6:	4b0e      	ldr	r3, [pc, #56]	@ (800a3e0 <HAL_RCC_ClockConfig+0x358>)
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	f003 030f 	and.w	r3, r3, #15
 800a3ae:	4a0d      	ldr	r2, [pc, #52]	@ (800a3e4 <HAL_RCC_ClockConfig+0x35c>)
 800a3b0:	5cd3      	ldrb	r3, [r2, r3]
 800a3b2:	f003 031f 	and.w	r3, r3, #31
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3bc:	4a0a      	ldr	r2, [pc, #40]	@ (800a3e8 <HAL_RCC_ClockConfig+0x360>)
 800a3be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a3c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a3ec <HAL_RCC_ClockConfig+0x364>)
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a3c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a3f0 <HAL_RCC_ClockConfig+0x368>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7f8 f89c 	bl	8002508 <HAL_InitTick>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3718      	adds	r7, #24
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	58024400 	.word	0x58024400
 800a3e4:	08016db4 	.word	0x08016db4
 800a3e8:	2400001c 	.word	0x2400001c
 800a3ec:	24000018 	.word	0x24000018
 800a3f0:	24000020 	.word	0x24000020

0800a3f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b089      	sub	sp, #36	@ 0x24
 800a3f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a3fa:	4bb3      	ldr	r3, [pc, #716]	@ (800a6c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a402:	2b18      	cmp	r3, #24
 800a404:	f200 8155 	bhi.w	800a6b2 <HAL_RCC_GetSysClockFreq+0x2be>
 800a408:	a201      	add	r2, pc, #4	@ (adr r2, 800a410 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40e:	bf00      	nop
 800a410:	0800a475 	.word	0x0800a475
 800a414:	0800a6b3 	.word	0x0800a6b3
 800a418:	0800a6b3 	.word	0x0800a6b3
 800a41c:	0800a6b3 	.word	0x0800a6b3
 800a420:	0800a6b3 	.word	0x0800a6b3
 800a424:	0800a6b3 	.word	0x0800a6b3
 800a428:	0800a6b3 	.word	0x0800a6b3
 800a42c:	0800a6b3 	.word	0x0800a6b3
 800a430:	0800a49b 	.word	0x0800a49b
 800a434:	0800a6b3 	.word	0x0800a6b3
 800a438:	0800a6b3 	.word	0x0800a6b3
 800a43c:	0800a6b3 	.word	0x0800a6b3
 800a440:	0800a6b3 	.word	0x0800a6b3
 800a444:	0800a6b3 	.word	0x0800a6b3
 800a448:	0800a6b3 	.word	0x0800a6b3
 800a44c:	0800a6b3 	.word	0x0800a6b3
 800a450:	0800a4a1 	.word	0x0800a4a1
 800a454:	0800a6b3 	.word	0x0800a6b3
 800a458:	0800a6b3 	.word	0x0800a6b3
 800a45c:	0800a6b3 	.word	0x0800a6b3
 800a460:	0800a6b3 	.word	0x0800a6b3
 800a464:	0800a6b3 	.word	0x0800a6b3
 800a468:	0800a6b3 	.word	0x0800a6b3
 800a46c:	0800a6b3 	.word	0x0800a6b3
 800a470:	0800a4a7 	.word	0x0800a4a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a474:	4b94      	ldr	r3, [pc, #592]	@ (800a6c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 0320 	and.w	r3, r3, #32
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d009      	beq.n	800a494 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a480:	4b91      	ldr	r3, [pc, #580]	@ (800a6c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	08db      	lsrs	r3, r3, #3
 800a486:	f003 0303 	and.w	r3, r3, #3
 800a48a:	4a90      	ldr	r2, [pc, #576]	@ (800a6cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a48c:	fa22 f303 	lsr.w	r3, r2, r3
 800a490:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a492:	e111      	b.n	800a6b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a494:	4b8d      	ldr	r3, [pc, #564]	@ (800a6cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a496:	61bb      	str	r3, [r7, #24]
      break;
 800a498:	e10e      	b.n	800a6b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a49a:	4b8d      	ldr	r3, [pc, #564]	@ (800a6d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a49c:	61bb      	str	r3, [r7, #24]
      break;
 800a49e:	e10b      	b.n	800a6b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a4a0:	4b8c      	ldr	r3, [pc, #560]	@ (800a6d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a4a2:	61bb      	str	r3, [r7, #24]
      break;
 800a4a4:	e108      	b.n	800a6b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4a6:	4b88      	ldr	r3, [pc, #544]	@ (800a6c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4aa:	f003 0303 	and.w	r3, r3, #3
 800a4ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a4b0:	4b85      	ldr	r3, [pc, #532]	@ (800a6c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b4:	091b      	lsrs	r3, r3, #4
 800a4b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a4bc:	4b82      	ldr	r3, [pc, #520]	@ (800a6c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c0:	f003 0301 	and.w	r3, r3, #1
 800a4c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a4c6:	4b80      	ldr	r3, [pc, #512]	@ (800a6c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ca:	08db      	lsrs	r3, r3, #3
 800a4cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	fb02 f303 	mul.w	r3, r2, r3
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 80e1 	beq.w	800a6ac <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	f000 8083 	beq.w	800a5f8 <HAL_RCC_GetSysClockFreq+0x204>
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	f200 80a1 	bhi.w	800a63c <HAL_RCC_GetSysClockFreq+0x248>
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d003      	beq.n	800a508 <HAL_RCC_GetSysClockFreq+0x114>
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d056      	beq.n	800a5b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a506:	e099      	b.n	800a63c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a508:	4b6f      	ldr	r3, [pc, #444]	@ (800a6c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0320 	and.w	r3, r3, #32
 800a510:	2b00      	cmp	r3, #0
 800a512:	d02d      	beq.n	800a570 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a514:	4b6c      	ldr	r3, [pc, #432]	@ (800a6c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	08db      	lsrs	r3, r3, #3
 800a51a:	f003 0303 	and.w	r3, r3, #3
 800a51e:	4a6b      	ldr	r2, [pc, #428]	@ (800a6cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a520:	fa22 f303 	lsr.w	r3, r2, r3
 800a524:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	ee07 3a90 	vmov	s15, r3
 800a52c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	ee07 3a90 	vmov	s15, r3
 800a536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a53a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a53e:	4b62      	ldr	r3, [pc, #392]	@ (800a6c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a546:	ee07 3a90 	vmov	s15, r3
 800a54a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a54e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a552:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a6d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a55a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a55e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a56e:	e087      	b.n	800a680 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	ee07 3a90 	vmov	s15, r3
 800a576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a6dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800a57e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a582:	4b51      	ldr	r3, [pc, #324]	@ (800a6c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a58a:	ee07 3a90 	vmov	s15, r3
 800a58e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a592:	ed97 6a02 	vldr	s12, [r7, #8]
 800a596:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a6d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a59a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a59e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a5b2:	e065      	b.n	800a680 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	ee07 3a90 	vmov	s15, r3
 800a5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a6e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a5c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5c6:	4b40      	ldr	r3, [pc, #256]	@ (800a6c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ce:	ee07 3a90 	vmov	s15, r3
 800a5d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a6d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a5f6:	e043      	b.n	800a680 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	ee07 3a90 	vmov	s15, r3
 800a5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a602:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a6e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a60a:	4b2f      	ldr	r3, [pc, #188]	@ (800a6c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a60c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a61a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a61e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a6d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a62a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a62e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a632:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a636:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a63a:	e021      	b.n	800a680 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	ee07 3a90 	vmov	s15, r3
 800a642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a646:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a6e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a64a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a64e:	4b1e      	ldr	r3, [pc, #120]	@ (800a6c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a656:	ee07 3a90 	vmov	s15, r3
 800a65a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a65e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a662:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a6d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a66a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a66e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a67a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a67e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a680:	4b11      	ldr	r3, [pc, #68]	@ (800a6c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a684:	0a5b      	lsrs	r3, r3, #9
 800a686:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a68a:	3301      	adds	r3, #1
 800a68c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	ee07 3a90 	vmov	s15, r3
 800a694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a698:	edd7 6a07 	vldr	s13, [r7, #28]
 800a69c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6a4:	ee17 3a90 	vmov	r3, s15
 800a6a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a6aa:	e005      	b.n	800a6b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	61bb      	str	r3, [r7, #24]
      break;
 800a6b0:	e002      	b.n	800a6b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a6b2:	4b07      	ldr	r3, [pc, #28]	@ (800a6d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a6b4:	61bb      	str	r3, [r7, #24]
      break;
 800a6b6:	bf00      	nop
  }

  return sysclockfreq;
 800a6b8:	69bb      	ldr	r3, [r7, #24]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3724      	adds	r7, #36	@ 0x24
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	58024400 	.word	0x58024400
 800a6cc:	03d09000 	.word	0x03d09000
 800a6d0:	003d0900 	.word	0x003d0900
 800a6d4:	017d7840 	.word	0x017d7840
 800a6d8:	46000000 	.word	0x46000000
 800a6dc:	4c742400 	.word	0x4c742400
 800a6e0:	4a742400 	.word	0x4a742400
 800a6e4:	4bbebc20 	.word	0x4bbebc20

0800a6e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a6ee:	f7ff fe81 	bl	800a3f4 <HAL_RCC_GetSysClockFreq>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	4b10      	ldr	r3, [pc, #64]	@ (800a738 <HAL_RCC_GetHCLKFreq+0x50>)
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	0a1b      	lsrs	r3, r3, #8
 800a6fa:	f003 030f 	and.w	r3, r3, #15
 800a6fe:	490f      	ldr	r1, [pc, #60]	@ (800a73c <HAL_RCC_GetHCLKFreq+0x54>)
 800a700:	5ccb      	ldrb	r3, [r1, r3]
 800a702:	f003 031f 	and.w	r3, r3, #31
 800a706:	fa22 f303 	lsr.w	r3, r2, r3
 800a70a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a70c:	4b0a      	ldr	r3, [pc, #40]	@ (800a738 <HAL_RCC_GetHCLKFreq+0x50>)
 800a70e:	699b      	ldr	r3, [r3, #24]
 800a710:	f003 030f 	and.w	r3, r3, #15
 800a714:	4a09      	ldr	r2, [pc, #36]	@ (800a73c <HAL_RCC_GetHCLKFreq+0x54>)
 800a716:	5cd3      	ldrb	r3, [r2, r3]
 800a718:	f003 031f 	and.w	r3, r3, #31
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	fa22 f303 	lsr.w	r3, r2, r3
 800a722:	4a07      	ldr	r2, [pc, #28]	@ (800a740 <HAL_RCC_GetHCLKFreq+0x58>)
 800a724:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a726:	4a07      	ldr	r2, [pc, #28]	@ (800a744 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a72c:	4b04      	ldr	r3, [pc, #16]	@ (800a740 <HAL_RCC_GetHCLKFreq+0x58>)
 800a72e:	681b      	ldr	r3, [r3, #0]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	58024400 	.word	0x58024400
 800a73c:	08016db4 	.word	0x08016db4
 800a740:	2400001c 	.word	0x2400001c
 800a744:	24000018 	.word	0x24000018

0800a748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a74c:	f7ff ffcc 	bl	800a6e8 <HAL_RCC_GetHCLKFreq>
 800a750:	4602      	mov	r2, r0
 800a752:	4b06      	ldr	r3, [pc, #24]	@ (800a76c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	091b      	lsrs	r3, r3, #4
 800a758:	f003 0307 	and.w	r3, r3, #7
 800a75c:	4904      	ldr	r1, [pc, #16]	@ (800a770 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a75e:	5ccb      	ldrb	r3, [r1, r3]
 800a760:	f003 031f 	and.w	r3, r3, #31
 800a764:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a768:	4618      	mov	r0, r3
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	58024400 	.word	0x58024400
 800a770:	08016db4 	.word	0x08016db4

0800a774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a778:	f7ff ffb6 	bl	800a6e8 <HAL_RCC_GetHCLKFreq>
 800a77c:	4602      	mov	r2, r0
 800a77e:	4b06      	ldr	r3, [pc, #24]	@ (800a798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a780:	69db      	ldr	r3, [r3, #28]
 800a782:	0a1b      	lsrs	r3, r3, #8
 800a784:	f003 0307 	and.w	r3, r3, #7
 800a788:	4904      	ldr	r1, [pc, #16]	@ (800a79c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a78a:	5ccb      	ldrb	r3, [r1, r3]
 800a78c:	f003 031f 	and.w	r3, r3, #31
 800a790:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a794:	4618      	mov	r0, r3
 800a796:	bd80      	pop	{r7, pc}
 800a798:	58024400 	.word	0x58024400
 800a79c:	08016db4 	.word	0x08016db4

0800a7a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7a4:	b0ca      	sub	sp, #296	@ 0x128
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a7b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a7c4:	2500      	movs	r5, #0
 800a7c6:	ea54 0305 	orrs.w	r3, r4, r5
 800a7ca:	d049      	beq.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a7d6:	d02f      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a7d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a7dc:	d828      	bhi.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a7de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a7e2:	d01a      	beq.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a7e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a7e8:	d822      	bhi.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d003      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a7ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7f2:	d007      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a7f4:	e01c      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7f6:	4bb8      	ldr	r3, [pc, #736]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7fa:	4ab7      	ldr	r2, [pc, #732]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a800:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a802:	e01a      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a808:	3308      	adds	r3, #8
 800a80a:	2102      	movs	r1, #2
 800a80c:	4618      	mov	r0, r3
 800a80e:	f001 fc8f 	bl	800c130 <RCCEx_PLL2_Config>
 800a812:	4603      	mov	r3, r0
 800a814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a818:	e00f      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a81a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a81e:	3328      	adds	r3, #40	@ 0x28
 800a820:	2102      	movs	r1, #2
 800a822:	4618      	mov	r0, r3
 800a824:	f001 fd36 	bl	800c294 <RCCEx_PLL3_Config>
 800a828:	4603      	mov	r3, r0
 800a82a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a82e:	e004      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a836:	e000      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a83a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10a      	bne.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a842:	4ba5      	ldr	r3, [pc, #660]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a846:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a84a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a84e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a850:	4aa1      	ldr	r2, [pc, #644]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a852:	430b      	orrs	r3, r1
 800a854:	6513      	str	r3, [r2, #80]	@ 0x50
 800a856:	e003      	b.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a858:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a85c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a86c:	f04f 0900 	mov.w	r9, #0
 800a870:	ea58 0309 	orrs.w	r3, r8, r9
 800a874:	d047      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a87a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a87c:	2b04      	cmp	r3, #4
 800a87e:	d82a      	bhi.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a880:	a201      	add	r2, pc, #4	@ (adr r2, 800a888 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a886:	bf00      	nop
 800a888:	0800a89d 	.word	0x0800a89d
 800a88c:	0800a8ab 	.word	0x0800a8ab
 800a890:	0800a8c1 	.word	0x0800a8c1
 800a894:	0800a8df 	.word	0x0800a8df
 800a898:	0800a8df 	.word	0x0800a8df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a89c:	4b8e      	ldr	r3, [pc, #568]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a0:	4a8d      	ldr	r2, [pc, #564]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a8a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8a8:	e01a      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ae:	3308      	adds	r3, #8
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f001 fc3c 	bl	800c130 <RCCEx_PLL2_Config>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8be:	e00f      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8c4:	3328      	adds	r3, #40	@ 0x28
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f001 fce3 	bl	800c294 <RCCEx_PLL3_Config>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8d4:	e004      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a8dc:	e000      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a8de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10a      	bne.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8e8:	4b7b      	ldr	r3, [pc, #492]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8ec:	f023 0107 	bic.w	r1, r3, #7
 800a8f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8f6:	4a78      	ldr	r2, [pc, #480]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8f8:	430b      	orrs	r3, r1
 800a8fa:	6513      	str	r3, [r2, #80]	@ 0x50
 800a8fc:	e003      	b.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a912:	f04f 0b00 	mov.w	fp, #0
 800a916:	ea5a 030b 	orrs.w	r3, sl, fp
 800a91a:	d04c      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a926:	d030      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a92c:	d829      	bhi.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a92e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a930:	d02d      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a932:	2bc0      	cmp	r3, #192	@ 0xc0
 800a934:	d825      	bhi.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a936:	2b80      	cmp	r3, #128	@ 0x80
 800a938:	d018      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a93a:	2b80      	cmp	r3, #128	@ 0x80
 800a93c:	d821      	bhi.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d002      	beq.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a942:	2b40      	cmp	r3, #64	@ 0x40
 800a944:	d007      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a946:	e01c      	b.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a948:	4b63      	ldr	r3, [pc, #396]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a94c:	4a62      	ldr	r2, [pc, #392]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a94e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a954:	e01c      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a95a:	3308      	adds	r3, #8
 800a95c:	2100      	movs	r1, #0
 800a95e:	4618      	mov	r0, r3
 800a960:	f001 fbe6 	bl	800c130 <RCCEx_PLL2_Config>
 800a964:	4603      	mov	r3, r0
 800a966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a96a:	e011      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a96c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a970:	3328      	adds	r3, #40	@ 0x28
 800a972:	2100      	movs	r1, #0
 800a974:	4618      	mov	r0, r3
 800a976:	f001 fc8d 	bl	800c294 <RCCEx_PLL3_Config>
 800a97a:	4603      	mov	r3, r0
 800a97c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a980:	e006      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a988:	e002      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a98a:	bf00      	nop
 800a98c:	e000      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a98e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10a      	bne.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a998:	4b4f      	ldr	r3, [pc, #316]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a99a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a99c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a9a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9a6:	4a4c      	ldr	r2, [pc, #304]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9a8:	430b      	orrs	r3, r1
 800a9aa:	6513      	str	r3, [r2, #80]	@ 0x50
 800a9ac:	e003      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a9c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800a9cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	d053      	beq.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a9d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a9de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a9e2:	d035      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a9e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a9e8:	d82e      	bhi.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a9ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a9ee:	d031      	beq.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a9f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a9f4:	d828      	bhi.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a9f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a9fa:	d01a      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a9fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa00:	d822      	bhi.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d003      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800aa06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa0a:	d007      	beq.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800aa0c:	e01c      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa0e:	4b32      	ldr	r3, [pc, #200]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa12:	4a31      	ldr	r2, [pc, #196]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa1a:	e01c      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa20:	3308      	adds	r3, #8
 800aa22:	2100      	movs	r1, #0
 800aa24:	4618      	mov	r0, r3
 800aa26:	f001 fb83 	bl	800c130 <RCCEx_PLL2_Config>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa30:	e011      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa36:	3328      	adds	r3, #40	@ 0x28
 800aa38:	2100      	movs	r1, #0
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f001 fc2a 	bl	800c294 <RCCEx_PLL3_Config>
 800aa40:	4603      	mov	r3, r0
 800aa42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa46:	e006      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aa4e:	e002      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800aa50:	bf00      	nop
 800aa52:	e000      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800aa54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10b      	bne.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aa5e:	4b1e      	ldr	r3, [pc, #120]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa62:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800aa66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800aa6e:	4a1a      	ldr	r2, [pc, #104]	@ (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa70:	430b      	orrs	r3, r1
 800aa72:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa74:	e003      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aa7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa86:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800aa8a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800aa8e:	2300      	movs	r3, #0
 800aa90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800aa94:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800aa98:	460b      	mov	r3, r1
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	d056      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aa9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaa2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800aaa6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aaaa:	d038      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800aaac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aab0:	d831      	bhi.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aab2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aab6:	d034      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800aab8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aabc:	d82b      	bhi.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aabe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aac2:	d01d      	beq.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800aac4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aac8:	d825      	bhi.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d006      	beq.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800aace:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aad2:	d00a      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800aad4:	e01f      	b.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aad6:	bf00      	nop
 800aad8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aadc:	4ba2      	ldr	r3, [pc, #648]	@ (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae0:	4aa1      	ldr	r2, [pc, #644]	@ (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aae8:	e01c      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aaea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaee:	3308      	adds	r3, #8
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f001 fb1c 	bl	800c130 <RCCEx_PLL2_Config>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aafe:	e011      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab04:	3328      	adds	r3, #40	@ 0x28
 800ab06:	2100      	movs	r1, #0
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f001 fbc3 	bl	800c294 <RCCEx_PLL3_Config>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab14:	e006      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab1c:	e002      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ab1e:	bf00      	nop
 800ab20:	e000      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ab22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10b      	bne.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab2c:	4b8e      	ldr	r3, [pc, #568]	@ (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab30:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800ab34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ab3c:	4a8a      	ldr	r2, [pc, #552]	@ (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab3e:	430b      	orrs	r3, r1
 800ab40:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab42:	e003      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ab4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab54:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800ab58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ab62:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ab66:	460b      	mov	r3, r1
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	d03a      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ab6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab72:	2b30      	cmp	r3, #48	@ 0x30
 800ab74:	d01f      	beq.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ab76:	2b30      	cmp	r3, #48	@ 0x30
 800ab78:	d819      	bhi.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ab7a:	2b20      	cmp	r3, #32
 800ab7c:	d00c      	beq.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ab7e:	2b20      	cmp	r3, #32
 800ab80:	d815      	bhi.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d019      	beq.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ab86:	2b10      	cmp	r3, #16
 800ab88:	d111      	bne.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab8a:	4b77      	ldr	r3, [pc, #476]	@ (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab8e:	4a76      	ldr	r2, [pc, #472]	@ (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ab96:	e011      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab9c:	3308      	adds	r3, #8
 800ab9e:	2102      	movs	r1, #2
 800aba0:	4618      	mov	r0, r3
 800aba2:	f001 fac5 	bl	800c130 <RCCEx_PLL2_Config>
 800aba6:	4603      	mov	r3, r0
 800aba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800abac:	e006      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800abb4:	e002      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800abb6:	bf00      	nop
 800abb8:	e000      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800abba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10a      	bne.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800abc4:	4b68      	ldr	r3, [pc, #416]	@ (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abc8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800abcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abd2:	4a65      	ldr	r2, [pc, #404]	@ (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abd4:	430b      	orrs	r3, r1
 800abd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800abd8:	e003      	b.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800abe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800abee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800abf2:	2300      	movs	r3, #0
 800abf4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800abf8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800abfc:	460b      	mov	r3, r1
 800abfe:	4313      	orrs	r3, r2
 800ac00:	d051      	beq.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ac02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac0c:	d035      	beq.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ac0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac12:	d82e      	bhi.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ac14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac18:	d031      	beq.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ac1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac1e:	d828      	bhi.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ac20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac24:	d01a      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ac26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac2a:	d822      	bhi.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d003      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ac30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac34:	d007      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ac36:	e01c      	b.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac38:	4b4b      	ldr	r3, [pc, #300]	@ (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac3c:	4a4a      	ldr	r2, [pc, #296]	@ (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac44:	e01c      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac4a:	3308      	adds	r3, #8
 800ac4c:	2100      	movs	r1, #0
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f001 fa6e 	bl	800c130 <RCCEx_PLL2_Config>
 800ac54:	4603      	mov	r3, r0
 800ac56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac5a:	e011      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac60:	3328      	adds	r3, #40	@ 0x28
 800ac62:	2100      	movs	r1, #0
 800ac64:	4618      	mov	r0, r3
 800ac66:	f001 fb15 	bl	800c294 <RCCEx_PLL3_Config>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac70:	e006      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac78:	e002      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ac7a:	bf00      	nop
 800ac7c:	e000      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ac7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ac88:	4b37      	ldr	r3, [pc, #220]	@ (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac8c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ac90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac96:	4a34      	ldr	r2, [pc, #208]	@ (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac98:	430b      	orrs	r3, r1
 800ac9a:	6513      	str	r3, [r2, #80]	@ 0x50
 800ac9c:	e003      	b.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aca2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800acb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800acb6:	2300      	movs	r3, #0
 800acb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800acbc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800acc0:	460b      	mov	r3, r1
 800acc2:	4313      	orrs	r3, r2
 800acc4:	d056      	beq.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800acc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800accc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800acd0:	d033      	beq.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800acd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800acd6:	d82c      	bhi.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800acd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800acdc:	d02f      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800acde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ace2:	d826      	bhi.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ace4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ace8:	d02b      	beq.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800acea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800acee:	d820      	bhi.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800acf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acf4:	d012      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800acf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acfa:	d81a      	bhi.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d022      	beq.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ad00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad04:	d115      	bne.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad0a:	3308      	adds	r3, #8
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f001 fa0e 	bl	800c130 <RCCEx_PLL2_Config>
 800ad14:	4603      	mov	r3, r0
 800ad16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad1a:	e015      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad20:	3328      	adds	r3, #40	@ 0x28
 800ad22:	2101      	movs	r1, #1
 800ad24:	4618      	mov	r0, r3
 800ad26:	f001 fab5 	bl	800c294 <RCCEx_PLL3_Config>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad30:	e00a      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ad38:	e006      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad3a:	bf00      	nop
 800ad3c:	e004      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad3e:	bf00      	nop
 800ad40:	e002      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad42:	bf00      	nop
 800ad44:	e000      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10d      	bne.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ad50:	4b05      	ldr	r3, [pc, #20]	@ (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad54:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800ad58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad5e:	4a02      	ldr	r2, [pc, #8]	@ (800ad68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad60:	430b      	orrs	r3, r1
 800ad62:	6513      	str	r3, [r2, #80]	@ 0x50
 800ad64:	e006      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ad66:	bf00      	nop
 800ad68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ad74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800ad80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ad84:	2300      	movs	r3, #0
 800ad86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ad8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	4313      	orrs	r3, r2
 800ad92:	d055      	beq.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ad94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ad9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ada0:	d033      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ada2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ada6:	d82c      	bhi.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ada8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adac:	d02f      	beq.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800adae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adb2:	d826      	bhi.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800adb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800adb8:	d02b      	beq.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800adba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800adbe:	d820      	bhi.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800adc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adc4:	d012      	beq.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800adc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adca:	d81a      	bhi.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d022      	beq.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800add0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800add4:	d115      	bne.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800add6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adda:	3308      	adds	r3, #8
 800addc:	2101      	movs	r1, #1
 800adde:	4618      	mov	r0, r3
 800ade0:	f001 f9a6 	bl	800c130 <RCCEx_PLL2_Config>
 800ade4:	4603      	mov	r3, r0
 800ade6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800adea:	e015      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800adec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adf0:	3328      	adds	r3, #40	@ 0x28
 800adf2:	2101      	movs	r1, #1
 800adf4:	4618      	mov	r0, r3
 800adf6:	f001 fa4d 	bl	800c294 <RCCEx_PLL3_Config>
 800adfa:	4603      	mov	r3, r0
 800adfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae00:	e00a      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ae08:	e006      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ae0a:	bf00      	nop
 800ae0c:	e004      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ae0e:	bf00      	nop
 800ae10:	e002      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ae12:	bf00      	nop
 800ae14:	e000      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ae16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d10b      	bne.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ae20:	4ba3      	ldr	r3, [pc, #652]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae24:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ae28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ae30:	4a9f      	ldr	r2, [pc, #636]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae32:	430b      	orrs	r3, r1
 800ae34:	6593      	str	r3, [r2, #88]	@ 0x58
 800ae36:	e003      	b.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae48:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ae4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ae50:	2300      	movs	r3, #0
 800ae52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	d037      	beq.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ae60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae6a:	d00e      	beq.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800ae6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae70:	d816      	bhi.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d018      	beq.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800ae76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae7a:	d111      	bne.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae7c:	4b8c      	ldr	r3, [pc, #560]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae80:	4a8b      	ldr	r2, [pc, #556]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae88:	e00f      	b.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae8e:	3308      	adds	r3, #8
 800ae90:	2101      	movs	r1, #1
 800ae92:	4618      	mov	r0, r3
 800ae94:	f001 f94c 	bl	800c130 <RCCEx_PLL2_Config>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae9e:	e004      	b.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aea6:	e000      	b.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800aea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10a      	bne.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aeb2:	4b7f      	ldr	r3, [pc, #508]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aeb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeb6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800aeba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aec0:	4a7b      	ldr	r2, [pc, #492]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aec2:	430b      	orrs	r3, r1
 800aec4:	6513      	str	r3, [r2, #80]	@ 0x50
 800aec6:	e003      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aecc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800aedc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aee0:	2300      	movs	r3, #0
 800aee2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aee6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800aeea:	460b      	mov	r3, r1
 800aeec:	4313      	orrs	r3, r2
 800aeee:	d039      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800aef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aef6:	2b03      	cmp	r3, #3
 800aef8:	d81c      	bhi.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800aefa:	a201      	add	r2, pc, #4	@ (adr r2, 800af00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800aefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af00:	0800af3d 	.word	0x0800af3d
 800af04:	0800af11 	.word	0x0800af11
 800af08:	0800af1f 	.word	0x0800af1f
 800af0c:	0800af3d 	.word	0x0800af3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af10:	4b67      	ldr	r3, [pc, #412]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af14:	4a66      	ldr	r2, [pc, #408]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af1c:	e00f      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af22:	3308      	adds	r3, #8
 800af24:	2102      	movs	r1, #2
 800af26:	4618      	mov	r0, r3
 800af28:	f001 f902 	bl	800c130 <RCCEx_PLL2_Config>
 800af2c:	4603      	mov	r3, r0
 800af2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af32:	e004      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800af3a:	e000      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800af3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af42:	2b00      	cmp	r3, #0
 800af44:	d10a      	bne.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800af46:	4b5a      	ldr	r3, [pc, #360]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af4a:	f023 0103 	bic.w	r1, r3, #3
 800af4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af54:	4a56      	ldr	r2, [pc, #344]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af56:	430b      	orrs	r3, r1
 800af58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800af5a:	e003      	b.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800af70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800af74:	2300      	movs	r3, #0
 800af76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800af7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800af7e:	460b      	mov	r3, r1
 800af80:	4313      	orrs	r3, r2
 800af82:	f000 809f 	beq.w	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af86:	4b4b      	ldr	r3, [pc, #300]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a4a      	ldr	r2, [pc, #296]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800af8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af92:	f7f7 fb03 	bl	800259c <HAL_GetTick>
 800af96:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af9a:	e00b      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af9c:	f7f7 fafe 	bl	800259c <HAL_GetTick>
 800afa0:	4602      	mov	r2, r0
 800afa2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	2b64      	cmp	r3, #100	@ 0x64
 800afaa:	d903      	bls.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800afac:	2303      	movs	r3, #3
 800afae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800afb2:	e005      	b.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afb4:	4b3f      	ldr	r3, [pc, #252]	@ (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d0ed      	beq.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800afc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d179      	bne.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800afc8:	4b39      	ldr	r3, [pc, #228]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800afcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800afd4:	4053      	eors	r3, r2
 800afd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d015      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800afde:	4b34      	ldr	r3, [pc, #208]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afe6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800afea:	4b31      	ldr	r3, [pc, #196]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afee:	4a30      	ldr	r2, [pc, #192]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aff4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aff6:	4b2e      	ldr	r3, [pc, #184]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800affa:	4a2d      	ldr	r2, [pc, #180]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800affc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b000:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b002:	4a2b      	ldr	r2, [pc, #172]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b008:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b00e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b016:	d118      	bne.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b018:	f7f7 fac0 	bl	800259c <HAL_GetTick>
 800b01c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b020:	e00d      	b.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b022:	f7f7 fabb 	bl	800259c <HAL_GetTick>
 800b026:	4602      	mov	r2, r0
 800b028:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b02c:	1ad2      	subs	r2, r2, r3
 800b02e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b032:	429a      	cmp	r2, r3
 800b034:	d903      	bls.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b036:	2303      	movs	r3, #3
 800b038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800b03c:	e005      	b.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b03e:	4b1c      	ldr	r3, [pc, #112]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b042:	f003 0302 	and.w	r3, r3, #2
 800b046:	2b00      	cmp	r3, #0
 800b048:	d0eb      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b04a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d129      	bne.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b056:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b05a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b05e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b062:	d10e      	bne.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b064:	4b12      	ldr	r3, [pc, #72]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b070:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b074:	091a      	lsrs	r2, r3, #4
 800b076:	4b10      	ldr	r3, [pc, #64]	@ (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b078:	4013      	ands	r3, r2
 800b07a:	4a0d      	ldr	r2, [pc, #52]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b07c:	430b      	orrs	r3, r1
 800b07e:	6113      	str	r3, [r2, #16]
 800b080:	e005      	b.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b082:	4b0b      	ldr	r3, [pc, #44]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	4a0a      	ldr	r2, [pc, #40]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b088:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b08c:	6113      	str	r3, [r2, #16]
 800b08e:	4b08      	ldr	r3, [pc, #32]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b090:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b096:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b09a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b09e:	4a04      	ldr	r2, [pc, #16]	@ (800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0a0:	430b      	orrs	r3, r1
 800b0a2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b0a4:	e00e      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b0a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800b0ae:	e009      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b0b0:	58024400 	.word	0x58024400
 800b0b4:	58024800 	.word	0x58024800
 800b0b8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f002 0301 	and.w	r3, r2, #1
 800b0d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b0da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	f000 8089 	beq.w	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0ec:	2b28      	cmp	r3, #40	@ 0x28
 800b0ee:	d86b      	bhi.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b0f0:	a201      	add	r2, pc, #4	@ (adr r2, 800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f6:	bf00      	nop
 800b0f8:	0800b1d1 	.word	0x0800b1d1
 800b0fc:	0800b1c9 	.word	0x0800b1c9
 800b100:	0800b1c9 	.word	0x0800b1c9
 800b104:	0800b1c9 	.word	0x0800b1c9
 800b108:	0800b1c9 	.word	0x0800b1c9
 800b10c:	0800b1c9 	.word	0x0800b1c9
 800b110:	0800b1c9 	.word	0x0800b1c9
 800b114:	0800b1c9 	.word	0x0800b1c9
 800b118:	0800b19d 	.word	0x0800b19d
 800b11c:	0800b1c9 	.word	0x0800b1c9
 800b120:	0800b1c9 	.word	0x0800b1c9
 800b124:	0800b1c9 	.word	0x0800b1c9
 800b128:	0800b1c9 	.word	0x0800b1c9
 800b12c:	0800b1c9 	.word	0x0800b1c9
 800b130:	0800b1c9 	.word	0x0800b1c9
 800b134:	0800b1c9 	.word	0x0800b1c9
 800b138:	0800b1b3 	.word	0x0800b1b3
 800b13c:	0800b1c9 	.word	0x0800b1c9
 800b140:	0800b1c9 	.word	0x0800b1c9
 800b144:	0800b1c9 	.word	0x0800b1c9
 800b148:	0800b1c9 	.word	0x0800b1c9
 800b14c:	0800b1c9 	.word	0x0800b1c9
 800b150:	0800b1c9 	.word	0x0800b1c9
 800b154:	0800b1c9 	.word	0x0800b1c9
 800b158:	0800b1d1 	.word	0x0800b1d1
 800b15c:	0800b1c9 	.word	0x0800b1c9
 800b160:	0800b1c9 	.word	0x0800b1c9
 800b164:	0800b1c9 	.word	0x0800b1c9
 800b168:	0800b1c9 	.word	0x0800b1c9
 800b16c:	0800b1c9 	.word	0x0800b1c9
 800b170:	0800b1c9 	.word	0x0800b1c9
 800b174:	0800b1c9 	.word	0x0800b1c9
 800b178:	0800b1d1 	.word	0x0800b1d1
 800b17c:	0800b1c9 	.word	0x0800b1c9
 800b180:	0800b1c9 	.word	0x0800b1c9
 800b184:	0800b1c9 	.word	0x0800b1c9
 800b188:	0800b1c9 	.word	0x0800b1c9
 800b18c:	0800b1c9 	.word	0x0800b1c9
 800b190:	0800b1c9 	.word	0x0800b1c9
 800b194:	0800b1c9 	.word	0x0800b1c9
 800b198:	0800b1d1 	.word	0x0800b1d1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1a0:	3308      	adds	r3, #8
 800b1a2:	2101      	movs	r1, #1
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f000 ffc3 	bl	800c130 <RCCEx_PLL2_Config>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1b0:	e00f      	b.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1b6:	3328      	adds	r3, #40	@ 0x28
 800b1b8:	2101      	movs	r1, #1
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f001 f86a 	bl	800c294 <RCCEx_PLL3_Config>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1c6:	e004      	b.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b1ce:	e000      	b.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b1d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10a      	bne.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b1da:	4bbf      	ldr	r3, [pc, #764]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b1dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1de:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1e8:	4abb      	ldr	r2, [pc, #748]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b1ea:	430b      	orrs	r3, r1
 800b1ec:	6553      	str	r3, [r2, #84]	@ 0x54
 800b1ee:	e003      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b1f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b200:	f002 0302 	and.w	r3, r2, #2
 800b204:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b208:	2300      	movs	r3, #0
 800b20a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b20e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b212:	460b      	mov	r3, r1
 800b214:	4313      	orrs	r3, r2
 800b216:	d041      	beq.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b21c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b21e:	2b05      	cmp	r3, #5
 800b220:	d824      	bhi.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b222:	a201      	add	r2, pc, #4	@ (adr r2, 800b228 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b228:	0800b275 	.word	0x0800b275
 800b22c:	0800b241 	.word	0x0800b241
 800b230:	0800b257 	.word	0x0800b257
 800b234:	0800b275 	.word	0x0800b275
 800b238:	0800b275 	.word	0x0800b275
 800b23c:	0800b275 	.word	0x0800b275
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b244:	3308      	adds	r3, #8
 800b246:	2101      	movs	r1, #1
 800b248:	4618      	mov	r0, r3
 800b24a:	f000 ff71 	bl	800c130 <RCCEx_PLL2_Config>
 800b24e:	4603      	mov	r3, r0
 800b250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b254:	e00f      	b.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b25a:	3328      	adds	r3, #40	@ 0x28
 800b25c:	2101      	movs	r1, #1
 800b25e:	4618      	mov	r0, r3
 800b260:	f001 f818 	bl	800c294 <RCCEx_PLL3_Config>
 800b264:	4603      	mov	r3, r0
 800b266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b26a:	e004      	b.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b272:	e000      	b.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b274:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d10a      	bne.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b27e:	4b96      	ldr	r3, [pc, #600]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b282:	f023 0107 	bic.w	r1, r3, #7
 800b286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b28a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b28c:	4a92      	ldr	r2, [pc, #584]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b28e:	430b      	orrs	r3, r1
 800b290:	6553      	str	r3, [r2, #84]	@ 0x54
 800b292:	e003      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a4:	f002 0304 	and.w	r3, r2, #4
 800b2a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b2b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	d044      	beq.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b2bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b2c4:	2b05      	cmp	r3, #5
 800b2c6:	d825      	bhi.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b2c8:	a201      	add	r2, pc, #4	@ (adr r2, 800b2d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ce:	bf00      	nop
 800b2d0:	0800b31d 	.word	0x0800b31d
 800b2d4:	0800b2e9 	.word	0x0800b2e9
 800b2d8:	0800b2ff 	.word	0x0800b2ff
 800b2dc:	0800b31d 	.word	0x0800b31d
 800b2e0:	0800b31d 	.word	0x0800b31d
 800b2e4:	0800b31d 	.word	0x0800b31d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2ec:	3308      	adds	r3, #8
 800b2ee:	2101      	movs	r1, #1
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f000 ff1d 	bl	800c130 <RCCEx_PLL2_Config>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b2fc:	e00f      	b.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b302:	3328      	adds	r3, #40	@ 0x28
 800b304:	2101      	movs	r1, #1
 800b306:	4618      	mov	r0, r3
 800b308:	f000 ffc4 	bl	800c294 <RCCEx_PLL3_Config>
 800b30c:	4603      	mov	r3, r0
 800b30e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b312:	e004      	b.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b31a:	e000      	b.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b31c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b31e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10b      	bne.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b326:	4b6c      	ldr	r3, [pc, #432]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b32a:	f023 0107 	bic.w	r1, r3, #7
 800b32e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b336:	4a68      	ldr	r2, [pc, #416]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b338:	430b      	orrs	r3, r1
 800b33a:	6593      	str	r3, [r2, #88]	@ 0x58
 800b33c:	e003      	b.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b33e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34e:	f002 0320 	and.w	r3, r2, #32
 800b352:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b356:	2300      	movs	r3, #0
 800b358:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b35c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b360:	460b      	mov	r3, r1
 800b362:	4313      	orrs	r3, r2
 800b364:	d055      	beq.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b36e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b372:	d033      	beq.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b374:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b378:	d82c      	bhi.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b37a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b37e:	d02f      	beq.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b384:	d826      	bhi.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b386:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b38a:	d02b      	beq.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b38c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b390:	d820      	bhi.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b396:	d012      	beq.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b39c:	d81a      	bhi.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d022      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b3a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3a6:	d115      	bne.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f000 febd 	bl	800c130 <RCCEx_PLL2_Config>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3bc:	e015      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3c2:	3328      	adds	r3, #40	@ 0x28
 800b3c4:	2102      	movs	r1, #2
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f000 ff64 	bl	800c294 <RCCEx_PLL3_Config>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3d2:	e00a      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b3da:	e006      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b3dc:	bf00      	nop
 800b3de:	e004      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b3e0:	bf00      	nop
 800b3e2:	e002      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b3e4:	bf00      	nop
 800b3e6:	e000      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b3e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10b      	bne.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b3f2:	4b39      	ldr	r3, [pc, #228]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b402:	4a35      	ldr	r2, [pc, #212]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b404:	430b      	orrs	r3, r1
 800b406:	6553      	str	r3, [r2, #84]	@ 0x54
 800b408:	e003      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b40a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b40e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b41e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b422:	2300      	movs	r3, #0
 800b424:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b428:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b42c:	460b      	mov	r3, r1
 800b42e:	4313      	orrs	r3, r2
 800b430:	d058      	beq.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b436:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b43a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b43e:	d033      	beq.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b440:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b444:	d82c      	bhi.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b44a:	d02f      	beq.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b44c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b450:	d826      	bhi.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b452:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b456:	d02b      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b458:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b45c:	d820      	bhi.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b45e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b462:	d012      	beq.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b468:	d81a      	bhi.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d022      	beq.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b46e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b472:	d115      	bne.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b478:	3308      	adds	r3, #8
 800b47a:	2100      	movs	r1, #0
 800b47c:	4618      	mov	r0, r3
 800b47e:	f000 fe57 	bl	800c130 <RCCEx_PLL2_Config>
 800b482:	4603      	mov	r3, r0
 800b484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b488:	e015      	b.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b48e:	3328      	adds	r3, #40	@ 0x28
 800b490:	2102      	movs	r1, #2
 800b492:	4618      	mov	r0, r3
 800b494:	f000 fefe 	bl	800c294 <RCCEx_PLL3_Config>
 800b498:	4603      	mov	r3, r0
 800b49a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b49e:	e00a      	b.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b4a6:	e006      	b.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b4a8:	bf00      	nop
 800b4aa:	e004      	b.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b4ac:	bf00      	nop
 800b4ae:	e002      	b.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b4b0:	bf00      	nop
 800b4b2:	e000      	b.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b4b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d10e      	bne.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b4be:	4b06      	ldr	r3, [pc, #24]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b4c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b4ce:	4a02      	ldr	r2, [pc, #8]	@ (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b4d0:	430b      	orrs	r3, r1
 800b4d2:	6593      	str	r3, [r2, #88]	@ 0x58
 800b4d4:	e006      	b.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b4d6:	bf00      	nop
 800b4d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b4e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b4f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b4fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b4fe:	460b      	mov	r3, r1
 800b500:	4313      	orrs	r3, r2
 800b502:	d055      	beq.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b508:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b50c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b510:	d033      	beq.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b512:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b516:	d82c      	bhi.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b51c:	d02f      	beq.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b51e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b522:	d826      	bhi.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b524:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b528:	d02b      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b52a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b52e:	d820      	bhi.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b530:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b534:	d012      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b536:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b53a:	d81a      	bhi.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d022      	beq.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b544:	d115      	bne.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b54a:	3308      	adds	r3, #8
 800b54c:	2100      	movs	r1, #0
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 fdee 	bl	800c130 <RCCEx_PLL2_Config>
 800b554:	4603      	mov	r3, r0
 800b556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b55a:	e015      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b560:	3328      	adds	r3, #40	@ 0x28
 800b562:	2102      	movs	r1, #2
 800b564:	4618      	mov	r0, r3
 800b566:	f000 fe95 	bl	800c294 <RCCEx_PLL3_Config>
 800b56a:	4603      	mov	r3, r0
 800b56c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b570:	e00a      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b578:	e006      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b57a:	bf00      	nop
 800b57c:	e004      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b57e:	bf00      	nop
 800b580:	e002      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b582:	bf00      	nop
 800b584:	e000      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b586:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10b      	bne.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b590:	4ba1      	ldr	r3, [pc, #644]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b594:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b59c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b5a0:	4a9d      	ldr	r2, [pc, #628]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5a2:	430b      	orrs	r3, r1
 800b5a4:	6593      	str	r3, [r2, #88]	@ 0x58
 800b5a6:	e003      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b5b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	f002 0308 	and.w	r3, r2, #8
 800b5bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b5c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	d01e      	beq.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b5d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5dc:	d10c      	bne.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5e2:	3328      	adds	r3, #40	@ 0x28
 800b5e4:	2102      	movs	r1, #2
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f000 fe54 	bl	800c294 <RCCEx_PLL3_Config>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d002      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b5f8:	4b87      	ldr	r3, [pc, #540]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b604:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b608:	4a83      	ldr	r2, [pc, #524]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b60a:	430b      	orrs	r3, r1
 800b60c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b616:	f002 0310 	and.w	r3, r2, #16
 800b61a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b61e:	2300      	movs	r3, #0
 800b620:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b624:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b628:	460b      	mov	r3, r1
 800b62a:	4313      	orrs	r3, r2
 800b62c:	d01e      	beq.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b632:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b63a:	d10c      	bne.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b63c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b640:	3328      	adds	r3, #40	@ 0x28
 800b642:	2102      	movs	r1, #2
 800b644:	4618      	mov	r0, r3
 800b646:	f000 fe25 	bl	800c294 <RCCEx_PLL3_Config>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b656:	4b70      	ldr	r3, [pc, #448]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b65a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b662:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b666:	4a6c      	ldr	r2, [pc, #432]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b668:	430b      	orrs	r3, r1
 800b66a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b678:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b67c:	2300      	movs	r3, #0
 800b67e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b682:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b686:	460b      	mov	r3, r1
 800b688:	4313      	orrs	r3, r2
 800b68a:	d03e      	beq.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b690:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b698:	d022      	beq.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b69a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b69e:	d81b      	bhi.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d003      	beq.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b6a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6a8:	d00b      	beq.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b6aa:	e015      	b.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6b0:	3308      	adds	r3, #8
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f000 fd3b 	bl	800c130 <RCCEx_PLL2_Config>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6c0:	e00f      	b.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6c6:	3328      	adds	r3, #40	@ 0x28
 800b6c8:	2102      	movs	r1, #2
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f000 fde2 	bl	800c294 <RCCEx_PLL3_Config>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6d6:	e004      	b.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b6de:	e000      	b.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b6e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10b      	bne.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b6ea:	4b4b      	ldr	r3, [pc, #300]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b6fa:	4a47      	ldr	r2, [pc, #284]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6fc:	430b      	orrs	r3, r1
 800b6fe:	6593      	str	r3, [r2, #88]	@ 0x58
 800b700:	e003      	b.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b712:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b716:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b718:	2300      	movs	r3, #0
 800b71a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b71c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b720:	460b      	mov	r3, r1
 800b722:	4313      	orrs	r3, r2
 800b724:	d03b      	beq.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b72e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b732:	d01f      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b734:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b738:	d818      	bhi.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b73a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b73e:	d003      	beq.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b740:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b744:	d007      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b746:	e011      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b748:	4b33      	ldr	r3, [pc, #204]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b74a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b74c:	4a32      	ldr	r2, [pc, #200]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b74e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b754:	e00f      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b75a:	3328      	adds	r3, #40	@ 0x28
 800b75c:	2101      	movs	r1, #1
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 fd98 	bl	800c294 <RCCEx_PLL3_Config>
 800b764:	4603      	mov	r3, r0
 800b766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b76a:	e004      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b772:	e000      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b774:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d10b      	bne.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b77e:	4b26      	ldr	r3, [pc, #152]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b782:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b78a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b78e:	4a22      	ldr	r2, [pc, #136]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b790:	430b      	orrs	r3, r1
 800b792:	6553      	str	r3, [r2, #84]	@ 0x54
 800b794:	e003      	b.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b79a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b79e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b7aa:	673b      	str	r3, [r7, #112]	@ 0x70
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	677b      	str	r3, [r7, #116]	@ 0x74
 800b7b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	d034      	beq.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b7ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d003      	beq.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b7c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7c8:	d007      	beq.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b7ca:	e011      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7cc:	4b12      	ldr	r3, [pc, #72]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d0:	4a11      	ldr	r2, [pc, #68]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7d8:	e00e      	b.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7de:	3308      	adds	r3, #8
 800b7e0:	2102      	movs	r1, #2
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f000 fca4 	bl	800c130 <RCCEx_PLL2_Config>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7ee:	e003      	b.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b7f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10d      	bne.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b800:	4b05      	ldr	r3, [pc, #20]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b804:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b80c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b80e:	4a02      	ldr	r2, [pc, #8]	@ (800b818 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b810:	430b      	orrs	r3, r1
 800b812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b814:	e006      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b816:	bf00      	nop
 800b818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b81c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b830:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b832:	2300      	movs	r3, #0
 800b834:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b836:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b83a:	460b      	mov	r3, r1
 800b83c:	4313      	orrs	r3, r2
 800b83e:	d00c      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b844:	3328      	adds	r3, #40	@ 0x28
 800b846:	2102      	movs	r1, #2
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 fd23 	bl	800c294 <RCCEx_PLL3_Config>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b00      	cmp	r3, #0
 800b852:	d002      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b854:	2301      	movs	r3, #1
 800b856:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b862:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b866:	663b      	str	r3, [r7, #96]	@ 0x60
 800b868:	2300      	movs	r3, #0
 800b86a:	667b      	str	r3, [r7, #100]	@ 0x64
 800b86c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b870:	460b      	mov	r3, r1
 800b872:	4313      	orrs	r3, r2
 800b874:	d038      	beq.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b87a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b87e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b882:	d018      	beq.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b884:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b888:	d811      	bhi.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b88a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b88e:	d014      	beq.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b894:	d80b      	bhi.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b896:	2b00      	cmp	r3, #0
 800b898:	d011      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b89a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b89e:	d106      	bne.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8a0:	4bc3      	ldr	r3, [pc, #780]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a4:	4ac2      	ldr	r2, [pc, #776]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b8ac:	e008      	b.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b8b4:	e004      	b.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b8b6:	bf00      	nop
 800b8b8:	e002      	b.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b8ba:	bf00      	nop
 800b8bc:	e000      	b.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b8be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d10b      	bne.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b8c8:	4bb9      	ldr	r3, [pc, #740]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8d8:	4ab5      	ldr	r2, [pc, #724]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8da:	430b      	orrs	r3, r1
 800b8dc:	6553      	str	r3, [r2, #84]	@ 0x54
 800b8de:	e003      	b.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b8e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b8f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b8fe:	460b      	mov	r3, r1
 800b900:	4313      	orrs	r3, r2
 800b902:	d009      	beq.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b904:	4baa      	ldr	r3, [pc, #680]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b908:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b912:	4aa7      	ldr	r2, [pc, #668]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b914:	430b      	orrs	r3, r1
 800b916:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b920:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b924:	653b      	str	r3, [r7, #80]	@ 0x50
 800b926:	2300      	movs	r3, #0
 800b928:	657b      	str	r3, [r7, #84]	@ 0x54
 800b92a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b92e:	460b      	mov	r3, r1
 800b930:	4313      	orrs	r3, r2
 800b932:	d00a      	beq.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b934:	4b9e      	ldr	r3, [pc, #632]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b936:	691b      	ldr	r3, [r3, #16]
 800b938:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b93c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b940:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b944:	4a9a      	ldr	r2, [pc, #616]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b946:	430b      	orrs	r3, r1
 800b948:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b952:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b956:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b958:	2300      	movs	r3, #0
 800b95a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b95c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b960:	460b      	mov	r3, r1
 800b962:	4313      	orrs	r3, r2
 800b964:	d009      	beq.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b966:	4b92      	ldr	r3, [pc, #584]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b96a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b974:	4a8e      	ldr	r2, [pc, #568]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b976:	430b      	orrs	r3, r1
 800b978:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b97a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b986:	643b      	str	r3, [r7, #64]	@ 0x40
 800b988:	2300      	movs	r3, #0
 800b98a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b98c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b990:	460b      	mov	r3, r1
 800b992:	4313      	orrs	r3, r2
 800b994:	d00e      	beq.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b996:	4b86      	ldr	r3, [pc, #536]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	4a85      	ldr	r2, [pc, #532]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b99c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b9a0:	6113      	str	r3, [r2, #16]
 800b9a2:	4b83      	ldr	r3, [pc, #524]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9a4:	6919      	ldr	r1, [r3, #16]
 800b9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b9ae:	4a80      	ldr	r2, [pc, #512]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9b0:	430b      	orrs	r3, r1
 800b9b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b9b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b9c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	d009      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b9d0:	4b77      	ldr	r3, [pc, #476]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9de:	4a74      	ldr	r2, [pc, #464]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9e0:	430b      	orrs	r3, r1
 800b9e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b9f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	d00a      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ba00:	4b6b      	ldr	r3, [pc, #428]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba04:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ba08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba10:	4a67      	ldr	r2, [pc, #412]	@ (800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba12:	430b      	orrs	r3, r1
 800ba14:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ba16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1e:	2100      	movs	r1, #0
 800ba20:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba28:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	d011      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba36:	3308      	adds	r3, #8
 800ba38:	2100      	movs	r1, #0
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f000 fb78 	bl	800c130 <RCCEx_PLL2_Config>
 800ba40:	4603      	mov	r3, r0
 800ba42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ba46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d003      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ba52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ba56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5e:	2100      	movs	r1, #0
 800ba60:	6239      	str	r1, [r7, #32]
 800ba62:	f003 0302 	and.w	r3, r3, #2
 800ba66:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba68:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	d011      	beq.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba76:	3308      	adds	r3, #8
 800ba78:	2101      	movs	r1, #1
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f000 fb58 	bl	800c130 <RCCEx_PLL2_Config>
 800ba80:	4603      	mov	r3, r0
 800ba82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ba86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d003      	beq.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ba92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ba96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9e:	2100      	movs	r1, #0
 800baa0:	61b9      	str	r1, [r7, #24]
 800baa2:	f003 0304 	and.w	r3, r3, #4
 800baa6:	61fb      	str	r3, [r7, #28]
 800baa8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800baac:	460b      	mov	r3, r1
 800baae:	4313      	orrs	r3, r2
 800bab0:	d011      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bab6:	3308      	adds	r3, #8
 800bab8:	2102      	movs	r1, #2
 800baba:	4618      	mov	r0, r3
 800babc:	f000 fb38 	bl	800c130 <RCCEx_PLL2_Config>
 800bac0:	4603      	mov	r3, r0
 800bac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800bac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d003      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bade:	2100      	movs	r1, #0
 800bae0:	6139      	str	r1, [r7, #16]
 800bae2:	f003 0308 	and.w	r3, r3, #8
 800bae6:	617b      	str	r3, [r7, #20]
 800bae8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800baec:	460b      	mov	r3, r1
 800baee:	4313      	orrs	r3, r2
 800baf0:	d011      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800baf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800baf6:	3328      	adds	r3, #40	@ 0x28
 800baf8:	2100      	movs	r1, #0
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 fbca 	bl	800c294 <RCCEx_PLL3_Config>
 800bb00:	4603      	mov	r3, r0
 800bb02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800bb06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d003      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bb12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bb16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1e:	2100      	movs	r1, #0
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	f003 0310 	and.w	r3, r3, #16
 800bb26:	60fb      	str	r3, [r7, #12]
 800bb28:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	d011      	beq.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb36:	3328      	adds	r3, #40	@ 0x28
 800bb38:	2101      	movs	r1, #1
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 fbaa 	bl	800c294 <RCCEx_PLL3_Config>
 800bb40:	4603      	mov	r3, r0
 800bb42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800bb46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d003      	beq.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bb52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bb56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5e:	2100      	movs	r1, #0
 800bb60:	6039      	str	r1, [r7, #0]
 800bb62:	f003 0320 	and.w	r3, r3, #32
 800bb66:	607b      	str	r3, [r7, #4]
 800bb68:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	d011      	beq.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb76:	3328      	adds	r3, #40	@ 0x28
 800bb78:	2102      	movs	r1, #2
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f000 fb8a 	bl	800c294 <RCCEx_PLL3_Config>
 800bb80:	4603      	mov	r3, r0
 800bb82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800bb86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d003      	beq.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bb92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800bb96:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d101      	bne.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	e000      	b.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bbb0:	58024400 	.word	0x58024400

0800bbb4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bbb8:	f7fe fd96 	bl	800a6e8 <HAL_RCC_GetHCLKFreq>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	4b06      	ldr	r3, [pc, #24]	@ (800bbd8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bbc0:	6a1b      	ldr	r3, [r3, #32]
 800bbc2:	091b      	lsrs	r3, r3, #4
 800bbc4:	f003 0307 	and.w	r3, r3, #7
 800bbc8:	4904      	ldr	r1, [pc, #16]	@ (800bbdc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bbca:	5ccb      	ldrb	r3, [r1, r3]
 800bbcc:	f003 031f 	and.w	r3, r3, #31
 800bbd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	58024400 	.word	0x58024400
 800bbdc:	08016db4 	.word	0x08016db4

0800bbe0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b089      	sub	sp, #36	@ 0x24
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbe8:	4ba1      	ldr	r3, [pc, #644]	@ (800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbec:	f003 0303 	and.w	r3, r3, #3
 800bbf0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bbf2:	4b9f      	ldr	r3, [pc, #636]	@ (800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbf6:	0b1b      	lsrs	r3, r3, #12
 800bbf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bbfc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bbfe:	4b9c      	ldr	r3, [pc, #624]	@ (800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc02:	091b      	lsrs	r3, r3, #4
 800bc04:	f003 0301 	and.w	r3, r3, #1
 800bc08:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bc0a:	4b99      	ldr	r3, [pc, #612]	@ (800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc0e:	08db      	lsrs	r3, r3, #3
 800bc10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	fb02 f303 	mul.w	r3, r2, r3
 800bc1a:	ee07 3a90 	vmov	s15, r3
 800bc1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 8111 	beq.w	800be50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	2b02      	cmp	r3, #2
 800bc32:	f000 8083 	beq.w	800bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	f200 80a1 	bhi.w	800bd80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d003      	beq.n	800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d056      	beq.n	800bcf8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bc4a:	e099      	b.n	800bd80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc4c:	4b88      	ldr	r3, [pc, #544]	@ (800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 0320 	and.w	r3, r3, #32
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d02d      	beq.n	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc58:	4b85      	ldr	r3, [pc, #532]	@ (800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	08db      	lsrs	r3, r3, #3
 800bc5e:	f003 0303 	and.w	r3, r3, #3
 800bc62:	4a84      	ldr	r2, [pc, #528]	@ (800be74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bc64:	fa22 f303 	lsr.w	r3, r2, r3
 800bc68:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	ee07 3a90 	vmov	s15, r3
 800bc70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	ee07 3a90 	vmov	s15, r3
 800bc7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc82:	4b7b      	ldr	r3, [pc, #492]	@ (800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc8a:	ee07 3a90 	vmov	s15, r3
 800bc8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc92:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800be78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bcb2:	e087      	b.n	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	ee07 3a90 	vmov	s15, r3
 800bcba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcbe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800be7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bcc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcc6:	4b6a      	ldr	r3, [pc, #424]	@ (800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcce:	ee07 3a90 	vmov	s15, r3
 800bcd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcda:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800be78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcf6:	e065      	b.n	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	ee07 3a90 	vmov	s15, r3
 800bcfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd0a:	4b59      	ldr	r3, [pc, #356]	@ (800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd12:	ee07 3a90 	vmov	s15, r3
 800bd16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800be78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd3a:	e043      	b.n	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	ee07 3a90 	vmov	s15, r3
 800bd42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bd4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd4e:	4b48      	ldr	r3, [pc, #288]	@ (800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd56:	ee07 3a90 	vmov	s15, r3
 800bd5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800be78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd7e:	e021      	b.n	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	ee07 3a90 	vmov	s15, r3
 800bd86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd92:	4b37      	ldr	r3, [pc, #220]	@ (800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd9a:	ee07 3a90 	vmov	s15, r3
 800bd9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bda2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bda6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800be78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bdc4:	4b2a      	ldr	r3, [pc, #168]	@ (800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdc8:	0a5b      	lsrs	r3, r3, #9
 800bdca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdce:	ee07 3a90 	vmov	s15, r3
 800bdd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bdda:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdde:	edd7 6a07 	vldr	s13, [r7, #28]
 800bde2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bde6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdea:	ee17 2a90 	vmov	r2, s15
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bdf2:	4b1f      	ldr	r3, [pc, #124]	@ (800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdf6:	0c1b      	lsrs	r3, r3, #16
 800bdf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdfc:	ee07 3a90 	vmov	s15, r3
 800be00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be08:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be0c:	edd7 6a07 	vldr	s13, [r7, #28]
 800be10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be18:	ee17 2a90 	vmov	r2, s15
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800be20:	4b13      	ldr	r3, [pc, #76]	@ (800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be24:	0e1b      	lsrs	r3, r3, #24
 800be26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be2a:	ee07 3a90 	vmov	s15, r3
 800be2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be36:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800be3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be46:	ee17 2a90 	vmov	r2, s15
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800be4e:	e008      	b.n	800be62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	609a      	str	r2, [r3, #8]
}
 800be62:	bf00      	nop
 800be64:	3724      	adds	r7, #36	@ 0x24
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	58024400 	.word	0x58024400
 800be74:	03d09000 	.word	0x03d09000
 800be78:	46000000 	.word	0x46000000
 800be7c:	4c742400 	.word	0x4c742400
 800be80:	4a742400 	.word	0x4a742400
 800be84:	4bbebc20 	.word	0x4bbebc20

0800be88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800be88:	b480      	push	{r7}
 800be8a:	b089      	sub	sp, #36	@ 0x24
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be90:	4ba1      	ldr	r3, [pc, #644]	@ (800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be94:	f003 0303 	and.w	r3, r3, #3
 800be98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800be9a:	4b9f      	ldr	r3, [pc, #636]	@ (800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be9e:	0d1b      	lsrs	r3, r3, #20
 800bea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bea4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bea6:	4b9c      	ldr	r3, [pc, #624]	@ (800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beaa:	0a1b      	lsrs	r3, r3, #8
 800beac:	f003 0301 	and.w	r3, r3, #1
 800beb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800beb2:	4b99      	ldr	r3, [pc, #612]	@ (800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beb6:	08db      	lsrs	r3, r3, #3
 800beb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	fb02 f303 	mul.w	r3, r2, r3
 800bec2:	ee07 3a90 	vmov	s15, r3
 800bec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f000 8111 	beq.w	800c0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	2b02      	cmp	r3, #2
 800beda:	f000 8083 	beq.w	800bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	f200 80a1 	bhi.w	800c028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d003      	beq.n	800bef4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d056      	beq.n	800bfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bef2:	e099      	b.n	800c028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bef4:	4b88      	ldr	r3, [pc, #544]	@ (800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f003 0320 	and.w	r3, r3, #32
 800befc:	2b00      	cmp	r3, #0
 800befe:	d02d      	beq.n	800bf5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf00:	4b85      	ldr	r3, [pc, #532]	@ (800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	08db      	lsrs	r3, r3, #3
 800bf06:	f003 0303 	and.w	r3, r3, #3
 800bf0a:	4a84      	ldr	r2, [pc, #528]	@ (800c11c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bf0c:	fa22 f303 	lsr.w	r3, r2, r3
 800bf10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	ee07 3a90 	vmov	s15, r3
 800bf18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	ee07 3a90 	vmov	s15, r3
 800bf22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf2a:	4b7b      	ldr	r3, [pc, #492]	@ (800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf32:	ee07 3a90 	vmov	s15, r3
 800bf36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bf5a:	e087      	b.n	800c06c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c124 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bf6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf6e:	4b6a      	ldr	r3, [pc, #424]	@ (800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf76:	ee07 3a90 	vmov	s15, r3
 800bf7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf9e:	e065      	b.n	800c06c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	ee07 3a90 	vmov	s15, r3
 800bfa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfaa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bfae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfb2:	4b59      	ldr	r3, [pc, #356]	@ (800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfba:	ee07 3a90 	vmov	s15, r3
 800bfbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfe2:	e043      	b.n	800c06c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	ee07 3a90 	vmov	s15, r3
 800bfea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bff6:	4b48      	ldr	r3, [pc, #288]	@ (800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bffe:	ee07 3a90 	vmov	s15, r3
 800c002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c006:	ed97 6a03 	vldr	s12, [r7, #12]
 800c00a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c00e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c026:	e021      	b.n	800c06c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	ee07 3a90 	vmov	s15, r3
 800c02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c032:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c03a:	4b37      	ldr	r3, [pc, #220]	@ (800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c03c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c042:	ee07 3a90 	vmov	s15, r3
 800c046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c04a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c04e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c05a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c05e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c062:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c06a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c06c:	4b2a      	ldr	r3, [pc, #168]	@ (800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c06e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c070:	0a5b      	lsrs	r3, r3, #9
 800c072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c076:	ee07 3a90 	vmov	s15, r3
 800c07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c07e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c082:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c086:	edd7 6a07 	vldr	s13, [r7, #28]
 800c08a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c08e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c092:	ee17 2a90 	vmov	r2, s15
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c09a:	4b1f      	ldr	r3, [pc, #124]	@ (800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c09c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c09e:	0c1b      	lsrs	r3, r3, #16
 800c0a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0a4:	ee07 3a90 	vmov	s15, r3
 800c0a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0c0:	ee17 2a90 	vmov	r2, s15
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c0c8:	4b13      	ldr	r3, [pc, #76]	@ (800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0cc:	0e1b      	lsrs	r3, r3, #24
 800c0ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0d2:	ee07 3a90 	vmov	s15, r3
 800c0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0ee:	ee17 2a90 	vmov	r2, s15
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c0f6:	e008      	b.n	800c10a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	609a      	str	r2, [r3, #8]
}
 800c10a:	bf00      	nop
 800c10c:	3724      	adds	r7, #36	@ 0x24
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	58024400 	.word	0x58024400
 800c11c:	03d09000 	.word	0x03d09000
 800c120:	46000000 	.word	0x46000000
 800c124:	4c742400 	.word	0x4c742400
 800c128:	4a742400 	.word	0x4a742400
 800c12c:	4bbebc20 	.word	0x4bbebc20

0800c130 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c13e:	4b53      	ldr	r3, [pc, #332]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c142:	f003 0303 	and.w	r3, r3, #3
 800c146:	2b03      	cmp	r3, #3
 800c148:	d101      	bne.n	800c14e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	e099      	b.n	800c282 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c14e:	4b4f      	ldr	r3, [pc, #316]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a4e      	ldr	r2, [pc, #312]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c154:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c15a:	f7f6 fa1f 	bl	800259c <HAL_GetTick>
 800c15e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c160:	e008      	b.n	800c174 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c162:	f7f6 fa1b 	bl	800259c <HAL_GetTick>
 800c166:	4602      	mov	r2, r0
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	1ad3      	subs	r3, r2, r3
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d901      	bls.n	800c174 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c170:	2303      	movs	r3, #3
 800c172:	e086      	b.n	800c282 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c174:	4b45      	ldr	r3, [pc, #276]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1f0      	bne.n	800c162 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c180:	4b42      	ldr	r3, [pc, #264]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c184:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	031b      	lsls	r3, r3, #12
 800c18e:	493f      	ldr	r1, [pc, #252]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c190:	4313      	orrs	r3, r2
 800c192:	628b      	str	r3, [r1, #40]	@ 0x28
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	3b01      	subs	r3, #1
 800c19a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	025b      	lsls	r3, r3, #9
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	431a      	orrs	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	3b01      	subs	r3, #1
 800c1b0:	041b      	lsls	r3, r3, #16
 800c1b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c1b6:	431a      	orrs	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	691b      	ldr	r3, [r3, #16]
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	061b      	lsls	r3, r3, #24
 800c1c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c1c4:	4931      	ldr	r1, [pc, #196]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c1ca:	4b30      	ldr	r3, [pc, #192]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	492d      	ldr	r1, [pc, #180]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c1dc:	4b2b      	ldr	r3, [pc, #172]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1e0:	f023 0220 	bic.w	r2, r3, #32
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	699b      	ldr	r3, [r3, #24]
 800c1e8:	4928      	ldr	r1, [pc, #160]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c1ee:	4b27      	ldr	r3, [pc, #156]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1f2:	4a26      	ldr	r2, [pc, #152]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c1f4:	f023 0310 	bic.w	r3, r3, #16
 800c1f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c1fa:	4b24      	ldr	r3, [pc, #144]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c1fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c1fe:	4b24      	ldr	r3, [pc, #144]	@ (800c290 <RCCEx_PLL2_Config+0x160>)
 800c200:	4013      	ands	r3, r2
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	69d2      	ldr	r2, [r2, #28]
 800c206:	00d2      	lsls	r2, r2, #3
 800c208:	4920      	ldr	r1, [pc, #128]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c20a:	4313      	orrs	r3, r2
 800c20c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c20e:	4b1f      	ldr	r3, [pc, #124]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c212:	4a1e      	ldr	r2, [pc, #120]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c214:	f043 0310 	orr.w	r3, r3, #16
 800c218:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d106      	bne.n	800c22e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c220:	4b1a      	ldr	r3, [pc, #104]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c224:	4a19      	ldr	r2, [pc, #100]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c226:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c22a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c22c:	e00f      	b.n	800c24e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2b01      	cmp	r3, #1
 800c232:	d106      	bne.n	800c242 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c234:	4b15      	ldr	r3, [pc, #84]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c238:	4a14      	ldr	r2, [pc, #80]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c23a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c23e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c240:	e005      	b.n	800c24e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c242:	4b12      	ldr	r3, [pc, #72]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c246:	4a11      	ldr	r2, [pc, #68]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c248:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c24c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c24e:	4b0f      	ldr	r3, [pc, #60]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a0e      	ldr	r2, [pc, #56]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c254:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c25a:	f7f6 f99f 	bl	800259c <HAL_GetTick>
 800c25e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c260:	e008      	b.n	800c274 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c262:	f7f6 f99b 	bl	800259c <HAL_GetTick>
 800c266:	4602      	mov	r2, r0
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	1ad3      	subs	r3, r2, r3
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d901      	bls.n	800c274 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c270:	2303      	movs	r3, #3
 800c272:	e006      	b.n	800c282 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c274:	4b05      	ldr	r3, [pc, #20]	@ (800c28c <RCCEx_PLL2_Config+0x15c>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d0f0      	beq.n	800c262 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c280:	7bfb      	ldrb	r3, [r7, #15]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	58024400 	.word	0x58024400
 800c290:	ffff0007 	.word	0xffff0007

0800c294 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c2a2:	4b53      	ldr	r3, [pc, #332]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c2a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2a6:	f003 0303 	and.w	r3, r3, #3
 800c2aa:	2b03      	cmp	r3, #3
 800c2ac:	d101      	bne.n	800c2b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e099      	b.n	800c3e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c2b2:	4b4f      	ldr	r3, [pc, #316]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4a4e      	ldr	r2, [pc, #312]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c2b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c2bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2be:	f7f6 f96d 	bl	800259c <HAL_GetTick>
 800c2c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2c4:	e008      	b.n	800c2d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c2c6:	f7f6 f969 	bl	800259c <HAL_GetTick>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	1ad3      	subs	r3, r2, r3
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	d901      	bls.n	800c2d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2d4:	2303      	movs	r3, #3
 800c2d6:	e086      	b.n	800c3e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2d8:	4b45      	ldr	r3, [pc, #276]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1f0      	bne.n	800c2c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c2e4:	4b42      	ldr	r3, [pc, #264]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2e8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	051b      	lsls	r3, r3, #20
 800c2f2:	493f      	ldr	r1, [pc, #252]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	628b      	str	r3, [r1, #40]	@ 0x28
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	3b01      	subs	r3, #1
 800c308:	025b      	lsls	r3, r3, #9
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	431a      	orrs	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	3b01      	subs	r3, #1
 800c314:	041b      	lsls	r3, r3, #16
 800c316:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c31a:	431a      	orrs	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	691b      	ldr	r3, [r3, #16]
 800c320:	3b01      	subs	r3, #1
 800c322:	061b      	lsls	r3, r3, #24
 800c324:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c328:	4931      	ldr	r1, [pc, #196]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c32a:	4313      	orrs	r3, r2
 800c32c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c32e:	4b30      	ldr	r3, [pc, #192]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c332:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	695b      	ldr	r3, [r3, #20]
 800c33a:	492d      	ldr	r1, [pc, #180]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c33c:	4313      	orrs	r3, r2
 800c33e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c340:	4b2b      	ldr	r3, [pc, #172]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c344:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	699b      	ldr	r3, [r3, #24]
 800c34c:	4928      	ldr	r1, [pc, #160]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c34e:	4313      	orrs	r3, r2
 800c350:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c352:	4b27      	ldr	r3, [pc, #156]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c356:	4a26      	ldr	r2, [pc, #152]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c35c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c35e:	4b24      	ldr	r3, [pc, #144]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c362:	4b24      	ldr	r3, [pc, #144]	@ (800c3f4 <RCCEx_PLL3_Config+0x160>)
 800c364:	4013      	ands	r3, r2
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	69d2      	ldr	r2, [r2, #28]
 800c36a:	00d2      	lsls	r2, r2, #3
 800c36c:	4920      	ldr	r1, [pc, #128]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c36e:	4313      	orrs	r3, r2
 800c370:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c372:	4b1f      	ldr	r3, [pc, #124]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c376:	4a1e      	ldr	r2, [pc, #120]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c37c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d106      	bne.n	800c392 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c384:	4b1a      	ldr	r3, [pc, #104]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c388:	4a19      	ldr	r2, [pc, #100]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c38a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c38e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c390:	e00f      	b.n	800c3b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	2b01      	cmp	r3, #1
 800c396:	d106      	bne.n	800c3a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c398:	4b15      	ldr	r3, [pc, #84]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c39c:	4a14      	ldr	r2, [pc, #80]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c39e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c3a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c3a4:	e005      	b.n	800c3b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c3a6:	4b12      	ldr	r3, [pc, #72]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3aa:	4a11      	ldr	r2, [pc, #68]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c3ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c3b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c3b2:	4b0f      	ldr	r3, [pc, #60]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a0e      	ldr	r2, [pc, #56]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c3b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c3bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3be:	f7f6 f8ed 	bl	800259c <HAL_GetTick>
 800c3c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3c4:	e008      	b.n	800c3d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c3c6:	f7f6 f8e9 	bl	800259c <HAL_GetTick>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	d901      	bls.n	800c3d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3d4:	2303      	movs	r3, #3
 800c3d6:	e006      	b.n	800c3e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3d8:	4b05      	ldr	r3, [pc, #20]	@ (800c3f0 <RCCEx_PLL3_Config+0x15c>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d0f0      	beq.n	800c3c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3710      	adds	r7, #16
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	58024400 	.word	0x58024400
 800c3f4:	ffff0007 	.word	0xffff0007

0800c3f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d101      	bne.n	800c40a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	e10f      	b.n	800c62a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a87      	ldr	r2, [pc, #540]	@ (800c634 <HAL_SPI_Init+0x23c>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d00f      	beq.n	800c43a <HAL_SPI_Init+0x42>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a86      	ldr	r2, [pc, #536]	@ (800c638 <HAL_SPI_Init+0x240>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d00a      	beq.n	800c43a <HAL_SPI_Init+0x42>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a84      	ldr	r2, [pc, #528]	@ (800c63c <HAL_SPI_Init+0x244>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d005      	beq.n	800c43a <HAL_SPI_Init+0x42>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	2b0f      	cmp	r3, #15
 800c434:	d901      	bls.n	800c43a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c436:	2301      	movs	r3, #1
 800c438:	e0f7      	b.n	800c62a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fe2e 	bl	800d09c <SPI_GetPacketSize>
 800c440:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a7b      	ldr	r2, [pc, #492]	@ (800c634 <HAL_SPI_Init+0x23c>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d00c      	beq.n	800c466 <HAL_SPI_Init+0x6e>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a79      	ldr	r2, [pc, #484]	@ (800c638 <HAL_SPI_Init+0x240>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d007      	beq.n	800c466 <HAL_SPI_Init+0x6e>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a78      	ldr	r2, [pc, #480]	@ (800c63c <HAL_SPI_Init+0x244>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d002      	beq.n	800c466 <HAL_SPI_Init+0x6e>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2b08      	cmp	r3, #8
 800c464:	d811      	bhi.n	800c48a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c46a:	4a72      	ldr	r2, [pc, #456]	@ (800c634 <HAL_SPI_Init+0x23c>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d009      	beq.n	800c484 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a70      	ldr	r2, [pc, #448]	@ (800c638 <HAL_SPI_Init+0x240>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d004      	beq.n	800c484 <HAL_SPI_Init+0x8c>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a6f      	ldr	r2, [pc, #444]	@ (800c63c <HAL_SPI_Init+0x244>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d104      	bne.n	800c48e <HAL_SPI_Init+0x96>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2b10      	cmp	r3, #16
 800c488:	d901      	bls.n	800c48e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e0cd      	b.n	800c62a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c494:	b2db      	uxtb	r3, r3
 800c496:	2b00      	cmp	r3, #0
 800c498:	d106      	bne.n	800c4a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7f5 fa80 	bl	80019a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2202      	movs	r2, #2
 800c4ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f022 0201 	bic.w	r2, r2, #1
 800c4be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c4ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	699b      	ldr	r3, [r3, #24]
 800c4d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c4d4:	d119      	bne.n	800c50a <HAL_SPI_Init+0x112>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c4de:	d103      	bne.n	800c4e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d008      	beq.n	800c4fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10c      	bne.n	800c50a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c4f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4f8:	d107      	bne.n	800c50a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c508:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00f      	beq.n	800c536 <HAL_SPI_Init+0x13e>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	2b06      	cmp	r3, #6
 800c51c:	d90b      	bls.n	800c536 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	430a      	orrs	r2, r1
 800c532:	601a      	str	r2, [r3, #0]
 800c534:	e007      	b.n	800c546 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c544:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	69da      	ldr	r2, [r3, #28]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c54e:	431a      	orrs	r2, r3
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	431a      	orrs	r2, r3
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c558:	ea42 0103 	orr.w	r1, r2, r3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	68da      	ldr	r2, [r3, #12]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	430a      	orrs	r2, r1
 800c566:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c570:	431a      	orrs	r2, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c576:	431a      	orrs	r2, r3
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	699b      	ldr	r3, [r3, #24]
 800c57c:	431a      	orrs	r2, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	431a      	orrs	r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	695b      	ldr	r3, [r3, #20]
 800c588:	431a      	orrs	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6a1b      	ldr	r3, [r3, #32]
 800c58e:	431a      	orrs	r2, r3
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	431a      	orrs	r2, r3
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c59a:	431a      	orrs	r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	689b      	ldr	r3, [r3, #8]
 800c5a0:	431a      	orrs	r2, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5a6:	ea42 0103 	orr.w	r1, r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	430a      	orrs	r2, r1
 800c5b4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d113      	bne.n	800c5e6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c5d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c5e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f022 0201 	bic.w	r2, r2, #1
 800c5f4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00a      	beq.n	800c618 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	430a      	orrs	r2, r1
 800c616:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3710      	adds	r7, #16
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	40013000 	.word	0x40013000
 800c638:	40003800 	.word	0x40003800
 800c63c:	40003c00 	.word	0x40003c00

0800c640 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b088      	sub	sp, #32
 800c644:	af02      	add	r7, sp, #8
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	603b      	str	r3, [r7, #0]
 800c64c:	4613      	mov	r3, r2
 800c64e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	3320      	adds	r3, #32
 800c656:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c658:	f7f5 ffa0 	bl	800259c <HAL_GetTick>
 800c65c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c664:	b2db      	uxtb	r3, r3
 800c666:	2b01      	cmp	r3, #1
 800c668:	d001      	beq.n	800c66e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c66a:	2302      	movs	r3, #2
 800c66c:	e1d1      	b.n	800ca12 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d002      	beq.n	800c67a <HAL_SPI_Transmit+0x3a>
 800c674:	88fb      	ldrh	r3, [r7, #6]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c67a:	2301      	movs	r3, #1
 800c67c:	e1c9      	b.n	800ca12 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c684:	2b01      	cmp	r3, #1
 800c686:	d101      	bne.n	800c68c <HAL_SPI_Transmit+0x4c>
 800c688:	2302      	movs	r3, #2
 800c68a:	e1c2      	b.n	800ca12 <HAL_SPI_Transmit+0x3d2>
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2201      	movs	r2, #1
 800c690:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2203      	movs	r2, #3
 800c698:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	68ba      	ldr	r2, [r7, #8]
 800c6a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	88fa      	ldrh	r2, [r7, #6]
 800c6ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	88fa      	ldrh	r2, [r7, #6]
 800c6b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c6e4:	d108      	bne.n	800c6f8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c6f4:	601a      	str	r2, [r3, #0]
 800c6f6:	e009      	b.n	800c70c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c70a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	685a      	ldr	r2, [r3, #4]
 800c712:	4b96      	ldr	r3, [pc, #600]	@ (800c96c <HAL_SPI_Transmit+0x32c>)
 800c714:	4013      	ands	r3, r2
 800c716:	88f9      	ldrh	r1, [r7, #6]
 800c718:	68fa      	ldr	r2, [r7, #12]
 800c71a:	6812      	ldr	r2, [r2, #0]
 800c71c:	430b      	orrs	r3, r1
 800c71e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f042 0201 	orr.w	r2, r2, #1
 800c72e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c738:	d107      	bne.n	800c74a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c748:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	2b0f      	cmp	r3, #15
 800c750:	d947      	bls.n	800c7e2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c752:	e03f      	b.n	800c7d4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	695b      	ldr	r3, [r3, #20]
 800c75a:	f003 0302 	and.w	r3, r3, #2
 800c75e:	2b02      	cmp	r3, #2
 800c760:	d114      	bne.n	800c78c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	6812      	ldr	r2, [r2, #0]
 800c76c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c772:	1d1a      	adds	r2, r3, #4
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c77e:	b29b      	uxth	r3, r3
 800c780:	3b01      	subs	r3, #1
 800c782:	b29a      	uxth	r2, r3
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c78a:	e023      	b.n	800c7d4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c78c:	f7f5 ff06 	bl	800259c <HAL_GetTick>
 800c790:	4602      	mov	r2, r0
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d803      	bhi.n	800c7a4 <HAL_SPI_Transmit+0x164>
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7a2:	d102      	bne.n	800c7aa <HAL_SPI_Transmit+0x16a>
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d114      	bne.n	800c7d4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f000 fba8 	bl	800cf00 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c7b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c7d0:	2303      	movs	r3, #3
 800c7d2:	e11e      	b.n	800ca12 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1b9      	bne.n	800c754 <HAL_SPI_Transmit+0x114>
 800c7e0:	e0f1      	b.n	800c9c6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	2b07      	cmp	r3, #7
 800c7e8:	f240 80e6 	bls.w	800c9b8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c7ec:	e05d      	b.n	800c8aa <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	695b      	ldr	r3, [r3, #20]
 800c7f4:	f003 0302 	and.w	r3, r3, #2
 800c7f8:	2b02      	cmp	r3, #2
 800c7fa:	d132      	bne.n	800c862 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c802:	b29b      	uxth	r3, r3
 800c804:	2b01      	cmp	r3, #1
 800c806:	d918      	bls.n	800c83a <HAL_SPI_Transmit+0x1fa>
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d014      	beq.n	800c83a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	6812      	ldr	r2, [r2, #0]
 800c81a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c820:	1d1a      	adds	r2, r3, #4
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	3b02      	subs	r3, #2
 800c830:	b29a      	uxth	r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c838:	e037      	b.n	800c8aa <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c83e:	881a      	ldrh	r2, [r3, #0]
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c848:	1c9a      	adds	r2, r3, #2
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c854:	b29b      	uxth	r3, r3
 800c856:	3b01      	subs	r3, #1
 800c858:	b29a      	uxth	r2, r3
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c860:	e023      	b.n	800c8aa <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c862:	f7f5 fe9b 	bl	800259c <HAL_GetTick>
 800c866:	4602      	mov	r2, r0
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	1ad3      	subs	r3, r2, r3
 800c86c:	683a      	ldr	r2, [r7, #0]
 800c86e:	429a      	cmp	r2, r3
 800c870:	d803      	bhi.n	800c87a <HAL_SPI_Transmit+0x23a>
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c878:	d102      	bne.n	800c880 <HAL_SPI_Transmit+0x240>
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d114      	bne.n	800c8aa <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c880:	68f8      	ldr	r0, [r7, #12]
 800c882:	f000 fb3d 	bl	800cf00 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c88c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c8a6:	2303      	movs	r3, #3
 800c8a8:	e0b3      	b.n	800ca12 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d19b      	bne.n	800c7ee <HAL_SPI_Transmit+0x1ae>
 800c8b6:	e086      	b.n	800c9c6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	695b      	ldr	r3, [r3, #20]
 800c8be:	f003 0302 	and.w	r3, r3, #2
 800c8c2:	2b02      	cmp	r3, #2
 800c8c4:	d154      	bne.n	800c970 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d918      	bls.n	800c904 <HAL_SPI_Transmit+0x2c4>
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8d6:	2b40      	cmp	r3, #64	@ 0x40
 800c8d8:	d914      	bls.n	800c904 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	6812      	ldr	r2, [r2, #0]
 800c8e4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8ea:	1d1a      	adds	r2, r3, #4
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	3b04      	subs	r3, #4
 800c8fa:	b29a      	uxth	r2, r3
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c902:	e059      	b.n	800c9b8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d917      	bls.n	800c940 <HAL_SPI_Transmit+0x300>
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c914:	2b00      	cmp	r3, #0
 800c916:	d013      	beq.n	800c940 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c91c:	881a      	ldrh	r2, [r3, #0]
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c926:	1c9a      	adds	r2, r3, #2
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c932:	b29b      	uxth	r3, r3
 800c934:	3b02      	subs	r3, #2
 800c936:	b29a      	uxth	r2, r3
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c93e:	e03b      	b.n	800c9b8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	3320      	adds	r3, #32
 800c94a:	7812      	ldrb	r2, [r2, #0]
 800c94c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c952:	1c5a      	adds	r2, r3, #1
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c95e:	b29b      	uxth	r3, r3
 800c960:	3b01      	subs	r3, #1
 800c962:	b29a      	uxth	r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c96a:	e025      	b.n	800c9b8 <HAL_SPI_Transmit+0x378>
 800c96c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c970:	f7f5 fe14 	bl	800259c <HAL_GetTick>
 800c974:	4602      	mov	r2, r0
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	1ad3      	subs	r3, r2, r3
 800c97a:	683a      	ldr	r2, [r7, #0]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d803      	bhi.n	800c988 <HAL_SPI_Transmit+0x348>
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c986:	d102      	bne.n	800c98e <HAL_SPI_Transmit+0x34e>
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d114      	bne.n	800c9b8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f000 fab6 	bl	800cf00 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c99a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c9b4:	2303      	movs	r3, #3
 800c9b6:	e02c      	b.n	800ca12 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	f47f af79 	bne.w	800c8b8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	2108      	movs	r1, #8
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f000 fb35 	bl	800d040 <SPI_WaitOnFlagUntilTimeout>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d007      	beq.n	800c9ec <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9e2:	f043 0220 	orr.w	r2, r3, #32
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f000 fa87 	bl	800cf00 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d001      	beq.n	800ca10 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e000      	b.n	800ca12 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800ca10:	2300      	movs	r3, #0
  }
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3718      	adds	r7, #24
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop

0800ca1c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b088      	sub	sp, #32
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	603b      	str	r3, [r7, #0]
 800ca28:	4613      	mov	r3, r2
 800ca2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca30:	095b      	lsrs	r3, r3, #5
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	3301      	adds	r3, #1
 800ca36:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	3330      	adds	r3, #48	@ 0x30
 800ca3e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca40:	f7f5 fdac 	bl	800259c <HAL_GetTick>
 800ca44:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d001      	beq.n	800ca56 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800ca52:	2302      	movs	r3, #2
 800ca54:	e250      	b.n	800cef8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <HAL_SPI_Receive+0x46>
 800ca5c:	88fb      	ldrh	r3, [r7, #6]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d101      	bne.n	800ca66 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800ca62:	2301      	movs	r3, #1
 800ca64:	e248      	b.n	800cef8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d101      	bne.n	800ca74 <HAL_SPI_Receive+0x58>
 800ca70:	2302      	movs	r3, #2
 800ca72:	e241      	b.n	800cef8 <HAL_SPI_Receive+0x4dc>
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2204      	movs	r2, #4
 800ca80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2200      	movs	r2, #0
 800ca88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	68ba      	ldr	r2, [r7, #8]
 800ca90:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	88fa      	ldrh	r2, [r7, #6]
 800ca96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	88fa      	ldrh	r2, [r7, #6]
 800ca9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2200      	movs	r2, #0
 800caa6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2200      	movs	r2, #0
 800caac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2200      	movs	r2, #0
 800cabc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2200      	movs	r2, #0
 800cac2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800cacc:	d108      	bne.n	800cae0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cadc:	601a      	str	r2, [r3, #0]
 800cade:	e009      	b.n	800caf4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800caf2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	685a      	ldr	r2, [r3, #4]
 800cafa:	4b95      	ldr	r3, [pc, #596]	@ (800cd50 <HAL_SPI_Receive+0x334>)
 800cafc:	4013      	ands	r3, r2
 800cafe:	88f9      	ldrh	r1, [r7, #6]
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	6812      	ldr	r2, [r2, #0]
 800cb04:	430b      	orrs	r3, r1
 800cb06:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f042 0201 	orr.w	r2, r2, #1
 800cb16:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cb20:	d107      	bne.n	800cb32 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cb30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	2b0f      	cmp	r3, #15
 800cb38:	d96c      	bls.n	800cc14 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cb3a:	e064      	b.n	800cc06 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	695b      	ldr	r3, [r3, #20]
 800cb42:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	695b      	ldr	r3, [r3, #20]
 800cb4a:	f003 0301 	and.w	r3, r3, #1
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d114      	bne.n	800cb7c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb5a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cb5c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb62:	1d1a      	adds	r2, r3, #4
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	3b01      	subs	r3, #1
 800cb72:	b29a      	uxth	r2, r3
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cb7a:	e044      	b.n	800cc06 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	8bfa      	ldrh	r2, [r7, #30]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d919      	bls.n	800cbbe <HAL_SPI_Receive+0x1a2>
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d014      	beq.n	800cbbe <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cb9e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cba4:	1d1a      	adds	r2, r3, #4
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cbbc:	e023      	b.n	800cc06 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cbbe:	f7f5 fced 	bl	800259c <HAL_GetTick>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	1ad3      	subs	r3, r2, r3
 800cbc8:	683a      	ldr	r2, [r7, #0]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d803      	bhi.n	800cbd6 <HAL_SPI_Receive+0x1ba>
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbd4:	d102      	bne.n	800cbdc <HAL_SPI_Receive+0x1c0>
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d114      	bne.n	800cc06 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f000 f98f 	bl	800cf00 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbe8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cc02:	2303      	movs	r3, #3
 800cc04:	e178      	b.n	800cef8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d194      	bne.n	800cb3c <HAL_SPI_Receive+0x120>
 800cc12:	e15e      	b.n	800ced2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	2b07      	cmp	r3, #7
 800cc1a:	f240 8153 	bls.w	800cec4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cc1e:	e08f      	b.n	800cd40 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	695b      	ldr	r3, [r3, #20]
 800cc26:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	695b      	ldr	r3, [r3, #20]
 800cc2e:	f003 0301 	and.w	r3, r3, #1
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d114      	bne.n	800cc60 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc3a:	69ba      	ldr	r2, [r7, #24]
 800cc3c:	8812      	ldrh	r2, [r2, #0]
 800cc3e:	b292      	uxth	r2, r2
 800cc40:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc46:	1c9a      	adds	r2, r3, #2
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	3b01      	subs	r3, #1
 800cc56:	b29a      	uxth	r2, r3
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cc5e:	e06f      	b.n	800cd40 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	8bfa      	ldrh	r2, [r7, #30]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d924      	bls.n	800ccb8 <HAL_SPI_Receive+0x29c>
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d01f      	beq.n	800ccb8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc7c:	69ba      	ldr	r2, [r7, #24]
 800cc7e:	8812      	ldrh	r2, [r2, #0]
 800cc80:	b292      	uxth	r2, r2
 800cc82:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc88:	1c9a      	adds	r2, r3, #2
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc92:	69ba      	ldr	r2, [r7, #24]
 800cc94:	8812      	ldrh	r2, [r2, #0]
 800cc96:	b292      	uxth	r2, r2
 800cc98:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc9e:	1c9a      	adds	r2, r3, #2
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	3b02      	subs	r3, #2
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ccb6:	e043      	b.n	800cd40 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d119      	bne.n	800ccf8 <HAL_SPI_Receive+0x2dc>
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d014      	beq.n	800ccf8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccd2:	69ba      	ldr	r2, [r7, #24]
 800ccd4:	8812      	ldrh	r2, [r2, #0]
 800ccd6:	b292      	uxth	r2, r2
 800ccd8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccde:	1c9a      	adds	r2, r3, #2
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	3b01      	subs	r3, #1
 800ccee:	b29a      	uxth	r2, r3
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ccf6:	e023      	b.n	800cd40 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ccf8:	f7f5 fc50 	bl	800259c <HAL_GetTick>
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	683a      	ldr	r2, [r7, #0]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d803      	bhi.n	800cd10 <HAL_SPI_Receive+0x2f4>
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd0e:	d102      	bne.n	800cd16 <HAL_SPI_Receive+0x2fa>
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d114      	bne.n	800cd40 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f000 f8f2 	bl	800cf00 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cd3c:	2303      	movs	r3, #3
 800cd3e:	e0db      	b.n	800cef8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f47f af69 	bne.w	800cc20 <HAL_SPI_Receive+0x204>
 800cd4e:	e0c0      	b.n	800ced2 <HAL_SPI_Receive+0x4b6>
 800cd50:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	695b      	ldr	r3, [r3, #20]
 800cd5a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	695b      	ldr	r3, [r3, #20]
 800cd62:	f003 0301 	and.w	r3, r3, #1
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d117      	bne.n	800cd9a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd76:	7812      	ldrb	r2, [r2, #0]
 800cd78:	b2d2      	uxtb	r2, r2
 800cd7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd80:	1c5a      	adds	r2, r3, #1
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cd98:	e094      	b.n	800cec4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	8bfa      	ldrh	r2, [r7, #30]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d946      	bls.n	800ce36 <HAL_SPI_Receive+0x41a>
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d041      	beq.n	800ce36 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdbe:	7812      	ldrb	r2, [r2, #0]
 800cdc0:	b2d2      	uxtb	r2, r2
 800cdc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdc8:	1c5a      	adds	r2, r3, #1
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdda:	7812      	ldrb	r2, [r2, #0]
 800cddc:	b2d2      	uxtb	r2, r2
 800cdde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cde4:	1c5a      	adds	r2, r3, #1
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdf6:	7812      	ldrb	r2, [r2, #0]
 800cdf8:	b2d2      	uxtb	r2, r2
 800cdfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce00:	1c5a      	adds	r2, r3, #1
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce12:	7812      	ldrb	r2, [r2, #0]
 800ce14:	b2d2      	uxtb	r2, r2
 800ce16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce1c:	1c5a      	adds	r2, r3, #1
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	3b04      	subs	r3, #4
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ce34:	e046      	b.n	800cec4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	2b03      	cmp	r3, #3
 800ce40:	d81c      	bhi.n	800ce7c <HAL_SPI_Receive+0x460>
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d017      	beq.n	800ce7c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce58:	7812      	ldrb	r2, [r2, #0]
 800ce5a:	b2d2      	uxtb	r2, r2
 800ce5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce62:	1c5a      	adds	r2, r3, #1
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	3b01      	subs	r3, #1
 800ce72:	b29a      	uxth	r2, r3
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ce7a:	e023      	b.n	800cec4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce7c:	f7f5 fb8e 	bl	800259c <HAL_GetTick>
 800ce80:	4602      	mov	r2, r0
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	683a      	ldr	r2, [r7, #0]
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d803      	bhi.n	800ce94 <HAL_SPI_Receive+0x478>
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce92:	d102      	bne.n	800ce9a <HAL_SPI_Receive+0x47e>
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d114      	bne.n	800cec4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f000 f830 	bl	800cf00 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cea6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cec0:	2303      	movs	r3, #3
 800cec2:	e019      	b.n	800cef8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f47f af41 	bne.w	800cd54 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ced2:	68f8      	ldr	r0, [r7, #12]
 800ced4:	f000 f814 	bl	800cf00 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2201      	movs	r2, #1
 800cedc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d001      	beq.n	800cef6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800cef2:	2301      	movs	r3, #1
 800cef4:	e000      	b.n	800cef8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800cef6:	2300      	movs	r3, #0
  }
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3720      	adds	r7, #32
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	695b      	ldr	r3, [r3, #20]
 800cf0e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	699a      	ldr	r2, [r3, #24]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f042 0208 	orr.w	r2, r2, #8
 800cf1e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	699a      	ldr	r2, [r3, #24]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f042 0210 	orr.w	r2, r2, #16
 800cf2e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f022 0201 	bic.w	r2, r2, #1
 800cf3e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	6919      	ldr	r1, [r3, #16]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	4b3c      	ldr	r3, [pc, #240]	@ (800d03c <SPI_CloseTransfer+0x13c>)
 800cf4c:	400b      	ands	r3, r1
 800cf4e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	689a      	ldr	r2, [r3, #8]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800cf5e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cf66:	b2db      	uxtb	r3, r3
 800cf68:	2b04      	cmp	r3, #4
 800cf6a:	d014      	beq.n	800cf96 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f003 0320 	and.w	r3, r3, #32
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00f      	beq.n	800cf96 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf7c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	699a      	ldr	r2, [r3, #24]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f042 0220 	orr.w	r2, r2, #32
 800cf94:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	2b03      	cmp	r3, #3
 800cfa0:	d014      	beq.n	800cfcc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00f      	beq.n	800cfcc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cfb2:	f043 0204 	orr.w	r2, r3, #4
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	699a      	ldr	r2, [r3, #24]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cfca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d00f      	beq.n	800cff6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cfdc:	f043 0201 	orr.w	r2, r3, #1
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	699a      	ldr	r2, [r3, #24]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cff4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00f      	beq.n	800d020 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d006:	f043 0208 	orr.w	r2, r3, #8
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	699a      	ldr	r2, [r3, #24]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d01e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d030:	bf00      	nop
 800d032:	3714      	adds	r7, #20
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr
 800d03c:	fffffc90 	.word	0xfffffc90

0800d040 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	603b      	str	r3, [r7, #0]
 800d04c:	4613      	mov	r3, r2
 800d04e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d050:	e010      	b.n	800d074 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d052:	f7f5 faa3 	bl	800259c <HAL_GetTick>
 800d056:	4602      	mov	r2, r0
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	1ad3      	subs	r3, r2, r3
 800d05c:	683a      	ldr	r2, [r7, #0]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d803      	bhi.n	800d06a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d068:	d102      	bne.n	800d070 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d101      	bne.n	800d074 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d070:	2303      	movs	r3, #3
 800d072:	e00f      	b.n	800d094 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	695a      	ldr	r2, [r3, #20]
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	4013      	ands	r3, r2
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	429a      	cmp	r2, r3
 800d082:	bf0c      	ite	eq
 800d084:	2301      	moveq	r3, #1
 800d086:	2300      	movne	r3, #0
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	461a      	mov	r2, r3
 800d08c:	79fb      	ldrb	r3, [r7, #7]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d0df      	beq.n	800d052 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d092:	2300      	movs	r3, #0
}
 800d094:	4618      	mov	r0, r3
 800d096:	3710      	adds	r7, #16
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0a8:	095b      	lsrs	r3, r3, #5
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	68db      	ldr	r3, [r3, #12]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	3307      	adds	r3, #7
 800d0ba:	08db      	lsrs	r3, r3, #3
 800d0bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	fb02 f303 	mul.w	r3, r2, r3
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3714      	adds	r7, #20
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr

0800d0d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b082      	sub	sp, #8
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d101      	bne.n	800d0e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e049      	b.n	800d178 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d106      	bne.n	800d0fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f7f4 fd49 	bl	8001b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2202      	movs	r2, #2
 800d102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	3304      	adds	r3, #4
 800d10e:	4619      	mov	r1, r3
 800d110:	4610      	mov	r0, r2
 800d112:	f000 fbd1 	bl	800d8b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2201      	movs	r2, #1
 800d11a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2201      	movs	r2, #1
 800d122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2201      	movs	r2, #1
 800d12a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2201      	movs	r2, #1
 800d132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2201      	movs	r2, #1
 800d13a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2201      	movs	r2, #1
 800d142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2201      	movs	r2, #1
 800d14a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2201      	movs	r2, #1
 800d152:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2201      	movs	r2, #1
 800d15a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2201      	movs	r2, #1
 800d162:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2201      	movs	r2, #1
 800d16a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2201      	movs	r2, #1
 800d172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d176:	2300      	movs	r3, #0
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3708      	adds	r7, #8
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d101      	bne.n	800d192 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d18e:	2301      	movs	r3, #1
 800d190:	e049      	b.n	800d226 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d106      	bne.n	800d1ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f7f4 fc8c 	bl	8001ac4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2202      	movs	r2, #2
 800d1b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681a      	ldr	r2, [r3, #0]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	3304      	adds	r3, #4
 800d1bc:	4619      	mov	r1, r3
 800d1be:	4610      	mov	r0, r2
 800d1c0:	f000 fb7a 	bl	800d8b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2201      	movs	r2, #1
 800d200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2201      	movs	r2, #1
 800d208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2201      	movs	r2, #1
 800d210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2201      	movs	r2, #1
 800d218:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2201      	movs	r2, #1
 800d220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d224:	2300      	movs	r3, #0
}
 800d226:	4618      	mov	r0, r3
 800d228:	3708      	adds	r7, #8
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d22e:	b580      	push	{r7, lr}
 800d230:	b084      	sub	sp, #16
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	f003 0302 	and.w	r3, r3, #2
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d020      	beq.n	800d292 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f003 0302 	and.w	r3, r3, #2
 800d256:	2b00      	cmp	r3, #0
 800d258:	d01b      	beq.n	800d292 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f06f 0202 	mvn.w	r2, #2
 800d262:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2201      	movs	r2, #1
 800d268:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	699b      	ldr	r3, [r3, #24]
 800d270:	f003 0303 	and.w	r3, r3, #3
 800d274:	2b00      	cmp	r3, #0
 800d276:	d003      	beq.n	800d280 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 faff 	bl	800d87c <HAL_TIM_IC_CaptureCallback>
 800d27e:	e005      	b.n	800d28c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 faf1 	bl	800d868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 fb02 	bl	800d890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	f003 0304 	and.w	r3, r3, #4
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d020      	beq.n	800d2de <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f003 0304 	and.w	r3, r3, #4
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d01b      	beq.n	800d2de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f06f 0204 	mvn.w	r2, #4
 800d2ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2202      	movs	r2, #2
 800d2b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	699b      	ldr	r3, [r3, #24]
 800d2bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d003      	beq.n	800d2cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 fad9 	bl	800d87c <HAL_TIM_IC_CaptureCallback>
 800d2ca:	e005      	b.n	800d2d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 facb 	bl	800d868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 fadc 	bl	800d890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	f003 0308 	and.w	r3, r3, #8
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d020      	beq.n	800d32a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f003 0308 	and.w	r3, r3, #8
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d01b      	beq.n	800d32a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f06f 0208 	mvn.w	r2, #8
 800d2fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2204      	movs	r2, #4
 800d300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	69db      	ldr	r3, [r3, #28]
 800d308:	f003 0303 	and.w	r3, r3, #3
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d003      	beq.n	800d318 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 fab3 	bl	800d87c <HAL_TIM_IC_CaptureCallback>
 800d316:	e005      	b.n	800d324 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 faa5 	bl	800d868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 fab6 	bl	800d890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2200      	movs	r2, #0
 800d328:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	f003 0310 	and.w	r3, r3, #16
 800d330:	2b00      	cmp	r3, #0
 800d332:	d020      	beq.n	800d376 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f003 0310 	and.w	r3, r3, #16
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d01b      	beq.n	800d376 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f06f 0210 	mvn.w	r2, #16
 800d346:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2208      	movs	r2, #8
 800d34c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	69db      	ldr	r3, [r3, #28]
 800d354:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d003      	beq.n	800d364 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 fa8d 	bl	800d87c <HAL_TIM_IC_CaptureCallback>
 800d362:	e005      	b.n	800d370 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 fa7f 	bl	800d868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 fa90 	bl	800d890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	f003 0301 	and.w	r3, r3, #1
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00c      	beq.n	800d39a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f003 0301 	and.w	r3, r3, #1
 800d386:	2b00      	cmp	r3, #0
 800d388:	d007      	beq.n	800d39a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f06f 0201 	mvn.w	r2, #1
 800d392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 fa5d 	bl	800d854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d104      	bne.n	800d3ae <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00c      	beq.n	800d3c8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d007      	beq.n	800d3c8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d3c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 ffa2 	bl	800e30c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d00c      	beq.n	800d3ec <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d007      	beq.n	800d3ec <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d3e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 ff9a 	bl	800e320 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00c      	beq.n	800d410 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d007      	beq.n	800d410 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f000 fa4a 	bl	800d8a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	f003 0320 	and.w	r3, r3, #32
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00c      	beq.n	800d434 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f003 0320 	and.w	r3, r3, #32
 800d420:	2b00      	cmp	r3, #0
 800d422:	d007      	beq.n	800d434 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f06f 0220 	mvn.w	r2, #32
 800d42c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 ff62 	bl	800e2f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d434:	bf00      	nop
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b086      	sub	sp, #24
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d448:	2300      	movs	r3, #0
 800d44a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d452:	2b01      	cmp	r3, #1
 800d454:	d101      	bne.n	800d45a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d456:	2302      	movs	r3, #2
 800d458:	e0ff      	b.n	800d65a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2201      	movs	r2, #1
 800d45e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2b14      	cmp	r3, #20
 800d466:	f200 80f0 	bhi.w	800d64a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d46a:	a201      	add	r2, pc, #4	@ (adr r2, 800d470 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d470:	0800d4c5 	.word	0x0800d4c5
 800d474:	0800d64b 	.word	0x0800d64b
 800d478:	0800d64b 	.word	0x0800d64b
 800d47c:	0800d64b 	.word	0x0800d64b
 800d480:	0800d505 	.word	0x0800d505
 800d484:	0800d64b 	.word	0x0800d64b
 800d488:	0800d64b 	.word	0x0800d64b
 800d48c:	0800d64b 	.word	0x0800d64b
 800d490:	0800d547 	.word	0x0800d547
 800d494:	0800d64b 	.word	0x0800d64b
 800d498:	0800d64b 	.word	0x0800d64b
 800d49c:	0800d64b 	.word	0x0800d64b
 800d4a0:	0800d587 	.word	0x0800d587
 800d4a4:	0800d64b 	.word	0x0800d64b
 800d4a8:	0800d64b 	.word	0x0800d64b
 800d4ac:	0800d64b 	.word	0x0800d64b
 800d4b0:	0800d5c9 	.word	0x0800d5c9
 800d4b4:	0800d64b 	.word	0x0800d64b
 800d4b8:	0800d64b 	.word	0x0800d64b
 800d4bc:	0800d64b 	.word	0x0800d64b
 800d4c0:	0800d609 	.word	0x0800d609
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	68b9      	ldr	r1, [r7, #8]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f000 fa94 	bl	800d9f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	699a      	ldr	r2, [r3, #24]
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f042 0208 	orr.w	r2, r2, #8
 800d4de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	699a      	ldr	r2, [r3, #24]
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f022 0204 	bic.w	r2, r2, #4
 800d4ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	6999      	ldr	r1, [r3, #24]
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	691a      	ldr	r2, [r3, #16]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	430a      	orrs	r2, r1
 800d500:	619a      	str	r2, [r3, #24]
      break;
 800d502:	e0a5      	b.n	800d650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	68b9      	ldr	r1, [r7, #8]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f000 fb04 	bl	800db18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	699a      	ldr	r2, [r3, #24]
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d51e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	699a      	ldr	r2, [r3, #24]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d52e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	6999      	ldr	r1, [r3, #24]
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	691b      	ldr	r3, [r3, #16]
 800d53a:	021a      	lsls	r2, r3, #8
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	430a      	orrs	r2, r1
 800d542:	619a      	str	r2, [r3, #24]
      break;
 800d544:	e084      	b.n	800d650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	68b9      	ldr	r1, [r7, #8]
 800d54c:	4618      	mov	r0, r3
 800d54e:	f000 fb6d 	bl	800dc2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	69da      	ldr	r2, [r3, #28]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f042 0208 	orr.w	r2, r2, #8
 800d560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	69da      	ldr	r2, [r3, #28]
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f022 0204 	bic.w	r2, r2, #4
 800d570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	69d9      	ldr	r1, [r3, #28]
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	691a      	ldr	r2, [r3, #16]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	430a      	orrs	r2, r1
 800d582:	61da      	str	r2, [r3, #28]
      break;
 800d584:	e064      	b.n	800d650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	68b9      	ldr	r1, [r7, #8]
 800d58c:	4618      	mov	r0, r3
 800d58e:	f000 fbd5 	bl	800dd3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	69da      	ldr	r2, [r3, #28]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d5a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	69da      	ldr	r2, [r3, #28]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d5b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	69d9      	ldr	r1, [r3, #28]
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	691b      	ldr	r3, [r3, #16]
 800d5bc:	021a      	lsls	r2, r3, #8
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	430a      	orrs	r2, r1
 800d5c4:	61da      	str	r2, [r3, #28]
      break;
 800d5c6:	e043      	b.n	800d650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	68b9      	ldr	r1, [r7, #8]
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f000 fc1e 	bl	800de10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f042 0208 	orr.w	r2, r2, #8
 800d5e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f022 0204 	bic.w	r2, r2, #4
 800d5f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	691a      	ldr	r2, [r3, #16]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	430a      	orrs	r2, r1
 800d604:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d606:	e023      	b.n	800d650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	68b9      	ldr	r1, [r7, #8]
 800d60e:	4618      	mov	r0, r3
 800d610:	f000 fc62 	bl	800ded8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d622:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d632:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	691b      	ldr	r3, [r3, #16]
 800d63e:	021a      	lsls	r2, r3, #8
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	430a      	orrs	r2, r1
 800d646:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d648:	e002      	b.n	800d650 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d64a:	2301      	movs	r3, #1
 800d64c:	75fb      	strb	r3, [r7, #23]
      break;
 800d64e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2200      	movs	r2, #0
 800d654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d658:	7dfb      	ldrb	r3, [r7, #23]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3718      	adds	r7, #24
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop

0800d664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d66e:	2300      	movs	r3, #0
 800d670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d101      	bne.n	800d680 <HAL_TIM_ConfigClockSource+0x1c>
 800d67c:	2302      	movs	r3, #2
 800d67e:	e0dc      	b.n	800d83a <HAL_TIM_ConfigClockSource+0x1d6>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2201      	movs	r2, #1
 800d684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2202      	movs	r2, #2
 800d68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d698:	68ba      	ldr	r2, [r7, #8]
 800d69a:	4b6a      	ldr	r3, [pc, #424]	@ (800d844 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d69c:	4013      	ands	r3, r2
 800d69e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d6a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	68ba      	ldr	r2, [r7, #8]
 800d6ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4a64      	ldr	r2, [pc, #400]	@ (800d848 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	f000 80a9 	beq.w	800d80e <HAL_TIM_ConfigClockSource+0x1aa>
 800d6bc:	4a62      	ldr	r2, [pc, #392]	@ (800d848 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	f200 80ae 	bhi.w	800d820 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6c4:	4a61      	ldr	r2, [pc, #388]	@ (800d84c <HAL_TIM_ConfigClockSource+0x1e8>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	f000 80a1 	beq.w	800d80e <HAL_TIM_ConfigClockSource+0x1aa>
 800d6cc:	4a5f      	ldr	r2, [pc, #380]	@ (800d84c <HAL_TIM_ConfigClockSource+0x1e8>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	f200 80a6 	bhi.w	800d820 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6d4:	4a5e      	ldr	r2, [pc, #376]	@ (800d850 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	f000 8099 	beq.w	800d80e <HAL_TIM_ConfigClockSource+0x1aa>
 800d6dc:	4a5c      	ldr	r2, [pc, #368]	@ (800d850 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	f200 809e 	bhi.w	800d820 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d6e8:	f000 8091 	beq.w	800d80e <HAL_TIM_ConfigClockSource+0x1aa>
 800d6ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d6f0:	f200 8096 	bhi.w	800d820 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d6f8:	f000 8089 	beq.w	800d80e <HAL_TIM_ConfigClockSource+0x1aa>
 800d6fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d700:	f200 808e 	bhi.w	800d820 <HAL_TIM_ConfigClockSource+0x1bc>
 800d704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d708:	d03e      	beq.n	800d788 <HAL_TIM_ConfigClockSource+0x124>
 800d70a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d70e:	f200 8087 	bhi.w	800d820 <HAL_TIM_ConfigClockSource+0x1bc>
 800d712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d716:	f000 8086 	beq.w	800d826 <HAL_TIM_ConfigClockSource+0x1c2>
 800d71a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d71e:	d87f      	bhi.n	800d820 <HAL_TIM_ConfigClockSource+0x1bc>
 800d720:	2b70      	cmp	r3, #112	@ 0x70
 800d722:	d01a      	beq.n	800d75a <HAL_TIM_ConfigClockSource+0xf6>
 800d724:	2b70      	cmp	r3, #112	@ 0x70
 800d726:	d87b      	bhi.n	800d820 <HAL_TIM_ConfigClockSource+0x1bc>
 800d728:	2b60      	cmp	r3, #96	@ 0x60
 800d72a:	d050      	beq.n	800d7ce <HAL_TIM_ConfigClockSource+0x16a>
 800d72c:	2b60      	cmp	r3, #96	@ 0x60
 800d72e:	d877      	bhi.n	800d820 <HAL_TIM_ConfigClockSource+0x1bc>
 800d730:	2b50      	cmp	r3, #80	@ 0x50
 800d732:	d03c      	beq.n	800d7ae <HAL_TIM_ConfigClockSource+0x14a>
 800d734:	2b50      	cmp	r3, #80	@ 0x50
 800d736:	d873      	bhi.n	800d820 <HAL_TIM_ConfigClockSource+0x1bc>
 800d738:	2b40      	cmp	r3, #64	@ 0x40
 800d73a:	d058      	beq.n	800d7ee <HAL_TIM_ConfigClockSource+0x18a>
 800d73c:	2b40      	cmp	r3, #64	@ 0x40
 800d73e:	d86f      	bhi.n	800d820 <HAL_TIM_ConfigClockSource+0x1bc>
 800d740:	2b30      	cmp	r3, #48	@ 0x30
 800d742:	d064      	beq.n	800d80e <HAL_TIM_ConfigClockSource+0x1aa>
 800d744:	2b30      	cmp	r3, #48	@ 0x30
 800d746:	d86b      	bhi.n	800d820 <HAL_TIM_ConfigClockSource+0x1bc>
 800d748:	2b20      	cmp	r3, #32
 800d74a:	d060      	beq.n	800d80e <HAL_TIM_ConfigClockSource+0x1aa>
 800d74c:	2b20      	cmp	r3, #32
 800d74e:	d867      	bhi.n	800d820 <HAL_TIM_ConfigClockSource+0x1bc>
 800d750:	2b00      	cmp	r3, #0
 800d752:	d05c      	beq.n	800d80e <HAL_TIM_ConfigClockSource+0x1aa>
 800d754:	2b10      	cmp	r3, #16
 800d756:	d05a      	beq.n	800d80e <HAL_TIM_ConfigClockSource+0x1aa>
 800d758:	e062      	b.n	800d820 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d76a:	f000 fc99 	bl	800e0a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d77c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	68ba      	ldr	r2, [r7, #8]
 800d784:	609a      	str	r2, [r3, #8]
      break;
 800d786:	e04f      	b.n	800d828 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d798:	f000 fc82 	bl	800e0a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	689a      	ldr	r2, [r3, #8]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d7aa:	609a      	str	r2, [r3, #8]
      break;
 800d7ac:	e03c      	b.n	800d828 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	f000 fbf2 	bl	800dfa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	2150      	movs	r1, #80	@ 0x50
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f000 fc4c 	bl	800e064 <TIM_ITRx_SetConfig>
      break;
 800d7cc:	e02c      	b.n	800d828 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d7da:	461a      	mov	r2, r3
 800d7dc:	f000 fc11 	bl	800e002 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2160      	movs	r1, #96	@ 0x60
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f000 fc3c 	bl	800e064 <TIM_ITRx_SetConfig>
      break;
 800d7ec:	e01c      	b.n	800d828 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	f000 fbd2 	bl	800dfa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2140      	movs	r1, #64	@ 0x40
 800d806:	4618      	mov	r0, r3
 800d808:	f000 fc2c 	bl	800e064 <TIM_ITRx_SetConfig>
      break;
 800d80c:	e00c      	b.n	800d828 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4619      	mov	r1, r3
 800d818:	4610      	mov	r0, r2
 800d81a:	f000 fc23 	bl	800e064 <TIM_ITRx_SetConfig>
      break;
 800d81e:	e003      	b.n	800d828 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d820:	2301      	movs	r3, #1
 800d822:	73fb      	strb	r3, [r7, #15]
      break;
 800d824:	e000      	b.n	800d828 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2201      	movs	r2, #1
 800d82c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d838:	7bfb      	ldrb	r3, [r7, #15]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3710      	adds	r7, #16
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	ffceff88 	.word	0xffceff88
 800d848:	00100040 	.word	0x00100040
 800d84c:	00100030 	.word	0x00100030
 800d850:	00100020 	.word	0x00100020

0800d854 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d85c:	bf00      	nop
 800d85e:	370c      	adds	r7, #12
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr

0800d868 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d868:	b480      	push	{r7}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d870:	bf00      	nop
 800d872:	370c      	adds	r7, #12
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr

0800d87c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b083      	sub	sp, #12
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d884:	bf00      	nop
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr

0800d890 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d898:	bf00      	nop
 800d89a:	370c      	adds	r7, #12
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr

0800d8a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d8ac:	bf00      	nop
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4a43      	ldr	r2, [pc, #268]	@ (800d9d8 <TIM_Base_SetConfig+0x120>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d013      	beq.n	800d8f8 <TIM_Base_SetConfig+0x40>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8d6:	d00f      	beq.n	800d8f8 <TIM_Base_SetConfig+0x40>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	4a40      	ldr	r2, [pc, #256]	@ (800d9dc <TIM_Base_SetConfig+0x124>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d00b      	beq.n	800d8f8 <TIM_Base_SetConfig+0x40>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a3f      	ldr	r2, [pc, #252]	@ (800d9e0 <TIM_Base_SetConfig+0x128>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d007      	beq.n	800d8f8 <TIM_Base_SetConfig+0x40>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a3e      	ldr	r2, [pc, #248]	@ (800d9e4 <TIM_Base_SetConfig+0x12c>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d003      	beq.n	800d8f8 <TIM_Base_SetConfig+0x40>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	4a3d      	ldr	r2, [pc, #244]	@ (800d9e8 <TIM_Base_SetConfig+0x130>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d108      	bne.n	800d90a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	4313      	orrs	r3, r2
 800d908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	4a32      	ldr	r2, [pc, #200]	@ (800d9d8 <TIM_Base_SetConfig+0x120>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d01f      	beq.n	800d952 <TIM_Base_SetConfig+0x9a>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d918:	d01b      	beq.n	800d952 <TIM_Base_SetConfig+0x9a>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	4a2f      	ldr	r2, [pc, #188]	@ (800d9dc <TIM_Base_SetConfig+0x124>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d017      	beq.n	800d952 <TIM_Base_SetConfig+0x9a>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	4a2e      	ldr	r2, [pc, #184]	@ (800d9e0 <TIM_Base_SetConfig+0x128>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d013      	beq.n	800d952 <TIM_Base_SetConfig+0x9a>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	4a2d      	ldr	r2, [pc, #180]	@ (800d9e4 <TIM_Base_SetConfig+0x12c>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d00f      	beq.n	800d952 <TIM_Base_SetConfig+0x9a>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	4a2c      	ldr	r2, [pc, #176]	@ (800d9e8 <TIM_Base_SetConfig+0x130>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d00b      	beq.n	800d952 <TIM_Base_SetConfig+0x9a>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4a2b      	ldr	r2, [pc, #172]	@ (800d9ec <TIM_Base_SetConfig+0x134>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d007      	beq.n	800d952 <TIM_Base_SetConfig+0x9a>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	4a2a      	ldr	r2, [pc, #168]	@ (800d9f0 <TIM_Base_SetConfig+0x138>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d003      	beq.n	800d952 <TIM_Base_SetConfig+0x9a>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	4a29      	ldr	r2, [pc, #164]	@ (800d9f4 <TIM_Base_SetConfig+0x13c>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d108      	bne.n	800d964 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	68db      	ldr	r3, [r3, #12]
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	4313      	orrs	r3, r2
 800d962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	695b      	ldr	r3, [r3, #20]
 800d96e:	4313      	orrs	r3, r2
 800d970:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	689a      	ldr	r2, [r3, #8]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	4a14      	ldr	r2, [pc, #80]	@ (800d9d8 <TIM_Base_SetConfig+0x120>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d00f      	beq.n	800d9aa <TIM_Base_SetConfig+0xf2>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	4a16      	ldr	r2, [pc, #88]	@ (800d9e8 <TIM_Base_SetConfig+0x130>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d00b      	beq.n	800d9aa <TIM_Base_SetConfig+0xf2>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	4a15      	ldr	r2, [pc, #84]	@ (800d9ec <TIM_Base_SetConfig+0x134>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d007      	beq.n	800d9aa <TIM_Base_SetConfig+0xf2>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	4a14      	ldr	r2, [pc, #80]	@ (800d9f0 <TIM_Base_SetConfig+0x138>)
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d003      	beq.n	800d9aa <TIM_Base_SetConfig+0xf2>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	4a13      	ldr	r2, [pc, #76]	@ (800d9f4 <TIM_Base_SetConfig+0x13c>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d103      	bne.n	800d9b2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	691a      	ldr	r2, [r3, #16]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f043 0204 	orr.w	r2, r3, #4
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	68fa      	ldr	r2, [r7, #12]
 800d9c8:	601a      	str	r2, [r3, #0]
}
 800d9ca:	bf00      	nop
 800d9cc:	3714      	adds	r7, #20
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr
 800d9d6:	bf00      	nop
 800d9d8:	40010000 	.word	0x40010000
 800d9dc:	40000400 	.word	0x40000400
 800d9e0:	40000800 	.word	0x40000800
 800d9e4:	40000c00 	.word	0x40000c00
 800d9e8:	40010400 	.word	0x40010400
 800d9ec:	40014000 	.word	0x40014000
 800d9f0:	40014400 	.word	0x40014400
 800d9f4:	40014800 	.word	0x40014800

0800d9f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b087      	sub	sp, #28
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a1b      	ldr	r3, [r3, #32]
 800da06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6a1b      	ldr	r3, [r3, #32]
 800da0c:	f023 0201 	bic.w	r2, r3, #1
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	699b      	ldr	r3, [r3, #24]
 800da1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800da20:	68fa      	ldr	r2, [r7, #12]
 800da22:	4b37      	ldr	r3, [pc, #220]	@ (800db00 <TIM_OC1_SetConfig+0x108>)
 800da24:	4013      	ands	r3, r2
 800da26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f023 0303 	bic.w	r3, r3, #3
 800da2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	68fa      	ldr	r2, [r7, #12]
 800da36:	4313      	orrs	r3, r2
 800da38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f023 0302 	bic.w	r3, r3, #2
 800da40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	697a      	ldr	r2, [r7, #20]
 800da48:	4313      	orrs	r3, r2
 800da4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4a2d      	ldr	r2, [pc, #180]	@ (800db04 <TIM_OC1_SetConfig+0x10c>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d00f      	beq.n	800da74 <TIM_OC1_SetConfig+0x7c>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	4a2c      	ldr	r2, [pc, #176]	@ (800db08 <TIM_OC1_SetConfig+0x110>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d00b      	beq.n	800da74 <TIM_OC1_SetConfig+0x7c>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	4a2b      	ldr	r2, [pc, #172]	@ (800db0c <TIM_OC1_SetConfig+0x114>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d007      	beq.n	800da74 <TIM_OC1_SetConfig+0x7c>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	4a2a      	ldr	r2, [pc, #168]	@ (800db10 <TIM_OC1_SetConfig+0x118>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d003      	beq.n	800da74 <TIM_OC1_SetConfig+0x7c>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	4a29      	ldr	r2, [pc, #164]	@ (800db14 <TIM_OC1_SetConfig+0x11c>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d10c      	bne.n	800da8e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	f023 0308 	bic.w	r3, r3, #8
 800da7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	697a      	ldr	r2, [r7, #20]
 800da82:	4313      	orrs	r3, r2
 800da84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	f023 0304 	bic.w	r3, r3, #4
 800da8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	4a1c      	ldr	r2, [pc, #112]	@ (800db04 <TIM_OC1_SetConfig+0x10c>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d00f      	beq.n	800dab6 <TIM_OC1_SetConfig+0xbe>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	4a1b      	ldr	r2, [pc, #108]	@ (800db08 <TIM_OC1_SetConfig+0x110>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d00b      	beq.n	800dab6 <TIM_OC1_SetConfig+0xbe>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	4a1a      	ldr	r2, [pc, #104]	@ (800db0c <TIM_OC1_SetConfig+0x114>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d007      	beq.n	800dab6 <TIM_OC1_SetConfig+0xbe>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	4a19      	ldr	r2, [pc, #100]	@ (800db10 <TIM_OC1_SetConfig+0x118>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d003      	beq.n	800dab6 <TIM_OC1_SetConfig+0xbe>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	4a18      	ldr	r2, [pc, #96]	@ (800db14 <TIM_OC1_SetConfig+0x11c>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d111      	bne.n	800dada <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dabc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	695b      	ldr	r3, [r3, #20]
 800daca:	693a      	ldr	r2, [r7, #16]
 800dacc:	4313      	orrs	r3, r2
 800dace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	699b      	ldr	r3, [r3, #24]
 800dad4:	693a      	ldr	r2, [r7, #16]
 800dad6:	4313      	orrs	r3, r2
 800dad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	693a      	ldr	r2, [r7, #16]
 800dade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	68fa      	ldr	r2, [r7, #12]
 800dae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	685a      	ldr	r2, [r3, #4]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	697a      	ldr	r2, [r7, #20]
 800daf2:	621a      	str	r2, [r3, #32]
}
 800daf4:	bf00      	nop
 800daf6:	371c      	adds	r7, #28
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr
 800db00:	fffeff8f 	.word	0xfffeff8f
 800db04:	40010000 	.word	0x40010000
 800db08:	40010400 	.word	0x40010400
 800db0c:	40014000 	.word	0x40014000
 800db10:	40014400 	.word	0x40014400
 800db14:	40014800 	.word	0x40014800

0800db18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db18:	b480      	push	{r7}
 800db1a:	b087      	sub	sp, #28
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a1b      	ldr	r3, [r3, #32]
 800db26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6a1b      	ldr	r3, [r3, #32]
 800db2c:	f023 0210 	bic.w	r2, r3, #16
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	699b      	ldr	r3, [r3, #24]
 800db3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	4b34      	ldr	r3, [pc, #208]	@ (800dc14 <TIM_OC2_SetConfig+0xfc>)
 800db44:	4013      	ands	r3, r2
 800db46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	021b      	lsls	r3, r3, #8
 800db56:	68fa      	ldr	r2, [r7, #12]
 800db58:	4313      	orrs	r3, r2
 800db5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	f023 0320 	bic.w	r3, r3, #32
 800db62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	011b      	lsls	r3, r3, #4
 800db6a:	697a      	ldr	r2, [r7, #20]
 800db6c:	4313      	orrs	r3, r2
 800db6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4a29      	ldr	r2, [pc, #164]	@ (800dc18 <TIM_OC2_SetConfig+0x100>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d003      	beq.n	800db80 <TIM_OC2_SetConfig+0x68>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	4a28      	ldr	r2, [pc, #160]	@ (800dc1c <TIM_OC2_SetConfig+0x104>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d10d      	bne.n	800db9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800db86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	011b      	lsls	r3, r3, #4
 800db8e:	697a      	ldr	r2, [r7, #20]
 800db90:	4313      	orrs	r3, r2
 800db92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4a1e      	ldr	r2, [pc, #120]	@ (800dc18 <TIM_OC2_SetConfig+0x100>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d00f      	beq.n	800dbc4 <TIM_OC2_SetConfig+0xac>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	4a1d      	ldr	r2, [pc, #116]	@ (800dc1c <TIM_OC2_SetConfig+0x104>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d00b      	beq.n	800dbc4 <TIM_OC2_SetConfig+0xac>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	4a1c      	ldr	r2, [pc, #112]	@ (800dc20 <TIM_OC2_SetConfig+0x108>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d007      	beq.n	800dbc4 <TIM_OC2_SetConfig+0xac>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	4a1b      	ldr	r2, [pc, #108]	@ (800dc24 <TIM_OC2_SetConfig+0x10c>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d003      	beq.n	800dbc4 <TIM_OC2_SetConfig+0xac>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	4a1a      	ldr	r2, [pc, #104]	@ (800dc28 <TIM_OC2_SetConfig+0x110>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d113      	bne.n	800dbec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dbca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dbd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	695b      	ldr	r3, [r3, #20]
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	693a      	ldr	r2, [r7, #16]
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	699b      	ldr	r3, [r3, #24]
 800dbe4:	009b      	lsls	r3, r3, #2
 800dbe6:	693a      	ldr	r2, [r7, #16]
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	693a      	ldr	r2, [r7, #16]
 800dbf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	68fa      	ldr	r2, [r7, #12]
 800dbf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	685a      	ldr	r2, [r3, #4]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	697a      	ldr	r2, [r7, #20]
 800dc04:	621a      	str	r2, [r3, #32]
}
 800dc06:	bf00      	nop
 800dc08:	371c      	adds	r7, #28
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	feff8fff 	.word	0xfeff8fff
 800dc18:	40010000 	.word	0x40010000
 800dc1c:	40010400 	.word	0x40010400
 800dc20:	40014000 	.word	0x40014000
 800dc24:	40014400 	.word	0x40014400
 800dc28:	40014800 	.word	0x40014800

0800dc2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b087      	sub	sp, #28
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6a1b      	ldr	r3, [r3, #32]
 800dc3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6a1b      	ldr	r3, [r3, #32]
 800dc40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	69db      	ldr	r3, [r3, #28]
 800dc52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	4b33      	ldr	r3, [pc, #204]	@ (800dd24 <TIM_OC3_SetConfig+0xf8>)
 800dc58:	4013      	ands	r3, r2
 800dc5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f023 0303 	bic.w	r3, r3, #3
 800dc62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dc74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	021b      	lsls	r3, r3, #8
 800dc7c:	697a      	ldr	r2, [r7, #20]
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	4a28      	ldr	r2, [pc, #160]	@ (800dd28 <TIM_OC3_SetConfig+0xfc>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d003      	beq.n	800dc92 <TIM_OC3_SetConfig+0x66>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	4a27      	ldr	r2, [pc, #156]	@ (800dd2c <TIM_OC3_SetConfig+0x100>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d10d      	bne.n	800dcae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dc98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	021b      	lsls	r3, r3, #8
 800dca0:	697a      	ldr	r2, [r7, #20]
 800dca2:	4313      	orrs	r3, r2
 800dca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dcac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4a1d      	ldr	r2, [pc, #116]	@ (800dd28 <TIM_OC3_SetConfig+0xfc>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d00f      	beq.n	800dcd6 <TIM_OC3_SetConfig+0xaa>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4a1c      	ldr	r2, [pc, #112]	@ (800dd2c <TIM_OC3_SetConfig+0x100>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d00b      	beq.n	800dcd6 <TIM_OC3_SetConfig+0xaa>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4a1b      	ldr	r2, [pc, #108]	@ (800dd30 <TIM_OC3_SetConfig+0x104>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d007      	beq.n	800dcd6 <TIM_OC3_SetConfig+0xaa>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	4a1a      	ldr	r2, [pc, #104]	@ (800dd34 <TIM_OC3_SetConfig+0x108>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d003      	beq.n	800dcd6 <TIM_OC3_SetConfig+0xaa>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4a19      	ldr	r2, [pc, #100]	@ (800dd38 <TIM_OC3_SetConfig+0x10c>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d113      	bne.n	800dcfe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dcdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	695b      	ldr	r3, [r3, #20]
 800dcea:	011b      	lsls	r3, r3, #4
 800dcec:	693a      	ldr	r2, [r7, #16]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	699b      	ldr	r3, [r3, #24]
 800dcf6:	011b      	lsls	r3, r3, #4
 800dcf8:	693a      	ldr	r2, [r7, #16]
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	693a      	ldr	r2, [r7, #16]
 800dd02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	685a      	ldr	r2, [r3, #4]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	697a      	ldr	r2, [r7, #20]
 800dd16:	621a      	str	r2, [r3, #32]
}
 800dd18:	bf00      	nop
 800dd1a:	371c      	adds	r7, #28
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr
 800dd24:	fffeff8f 	.word	0xfffeff8f
 800dd28:	40010000 	.word	0x40010000
 800dd2c:	40010400 	.word	0x40010400
 800dd30:	40014000 	.word	0x40014000
 800dd34:	40014400 	.word	0x40014400
 800dd38:	40014800 	.word	0x40014800

0800dd3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b087      	sub	sp, #28
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6a1b      	ldr	r3, [r3, #32]
 800dd4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6a1b      	ldr	r3, [r3, #32]
 800dd50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	69db      	ldr	r3, [r3, #28]
 800dd62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	4b24      	ldr	r3, [pc, #144]	@ (800ddf8 <TIM_OC4_SetConfig+0xbc>)
 800dd68:	4013      	ands	r3, r2
 800dd6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	021b      	lsls	r3, r3, #8
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dd86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	031b      	lsls	r3, r3, #12
 800dd8e:	693a      	ldr	r2, [r7, #16]
 800dd90:	4313      	orrs	r3, r2
 800dd92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	4a19      	ldr	r2, [pc, #100]	@ (800ddfc <TIM_OC4_SetConfig+0xc0>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d00f      	beq.n	800ddbc <TIM_OC4_SetConfig+0x80>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4a18      	ldr	r2, [pc, #96]	@ (800de00 <TIM_OC4_SetConfig+0xc4>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d00b      	beq.n	800ddbc <TIM_OC4_SetConfig+0x80>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	4a17      	ldr	r2, [pc, #92]	@ (800de04 <TIM_OC4_SetConfig+0xc8>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d007      	beq.n	800ddbc <TIM_OC4_SetConfig+0x80>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4a16      	ldr	r2, [pc, #88]	@ (800de08 <TIM_OC4_SetConfig+0xcc>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d003      	beq.n	800ddbc <TIM_OC4_SetConfig+0x80>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	4a15      	ldr	r2, [pc, #84]	@ (800de0c <TIM_OC4_SetConfig+0xd0>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d109      	bne.n	800ddd0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ddc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	695b      	ldr	r3, [r3, #20]
 800ddc8:	019b      	lsls	r3, r3, #6
 800ddca:	697a      	ldr	r2, [r7, #20]
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	697a      	ldr	r2, [r7, #20]
 800ddd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	68fa      	ldr	r2, [r7, #12]
 800ddda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	685a      	ldr	r2, [r3, #4]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	693a      	ldr	r2, [r7, #16]
 800dde8:	621a      	str	r2, [r3, #32]
}
 800ddea:	bf00      	nop
 800ddec:	371c      	adds	r7, #28
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	feff8fff 	.word	0xfeff8fff
 800ddfc:	40010000 	.word	0x40010000
 800de00:	40010400 	.word	0x40010400
 800de04:	40014000 	.word	0x40014000
 800de08:	40014400 	.word	0x40014400
 800de0c:	40014800 	.word	0x40014800

0800de10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800de10:	b480      	push	{r7}
 800de12:	b087      	sub	sp, #28
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6a1b      	ldr	r3, [r3, #32]
 800de1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6a1b      	ldr	r3, [r3, #32]
 800de24:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	4b21      	ldr	r3, [pc, #132]	@ (800dec0 <TIM_OC5_SetConfig+0xb0>)
 800de3c:	4013      	ands	r3, r2
 800de3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	68fa      	ldr	r2, [r7, #12]
 800de46:	4313      	orrs	r3, r2
 800de48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800de50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	689b      	ldr	r3, [r3, #8]
 800de56:	041b      	lsls	r3, r3, #16
 800de58:	693a      	ldr	r2, [r7, #16]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4a18      	ldr	r2, [pc, #96]	@ (800dec4 <TIM_OC5_SetConfig+0xb4>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d00f      	beq.n	800de86 <TIM_OC5_SetConfig+0x76>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a17      	ldr	r2, [pc, #92]	@ (800dec8 <TIM_OC5_SetConfig+0xb8>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d00b      	beq.n	800de86 <TIM_OC5_SetConfig+0x76>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a16      	ldr	r2, [pc, #88]	@ (800decc <TIM_OC5_SetConfig+0xbc>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d007      	beq.n	800de86 <TIM_OC5_SetConfig+0x76>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a15      	ldr	r2, [pc, #84]	@ (800ded0 <TIM_OC5_SetConfig+0xc0>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d003      	beq.n	800de86 <TIM_OC5_SetConfig+0x76>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4a14      	ldr	r2, [pc, #80]	@ (800ded4 <TIM_OC5_SetConfig+0xc4>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d109      	bne.n	800de9a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800de8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	695b      	ldr	r3, [r3, #20]
 800de92:	021b      	lsls	r3, r3, #8
 800de94:	697a      	ldr	r2, [r7, #20]
 800de96:	4313      	orrs	r3, r2
 800de98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	697a      	ldr	r2, [r7, #20]
 800de9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	68fa      	ldr	r2, [r7, #12]
 800dea4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	685a      	ldr	r2, [r3, #4]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	693a      	ldr	r2, [r7, #16]
 800deb2:	621a      	str	r2, [r3, #32]
}
 800deb4:	bf00      	nop
 800deb6:	371c      	adds	r7, #28
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr
 800dec0:	fffeff8f 	.word	0xfffeff8f
 800dec4:	40010000 	.word	0x40010000
 800dec8:	40010400 	.word	0x40010400
 800decc:	40014000 	.word	0x40014000
 800ded0:	40014400 	.word	0x40014400
 800ded4:	40014800 	.word	0x40014800

0800ded8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ded8:	b480      	push	{r7}
 800deda:	b087      	sub	sp, #28
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6a1b      	ldr	r3, [r3, #32]
 800dee6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6a1b      	ldr	r3, [r3, #32]
 800deec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800defe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800df00:	68fa      	ldr	r2, [r7, #12]
 800df02:	4b22      	ldr	r3, [pc, #136]	@ (800df8c <TIM_OC6_SetConfig+0xb4>)
 800df04:	4013      	ands	r3, r2
 800df06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	021b      	lsls	r3, r3, #8
 800df0e:	68fa      	ldr	r2, [r7, #12]
 800df10:	4313      	orrs	r3, r2
 800df12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800df1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	051b      	lsls	r3, r3, #20
 800df22:	693a      	ldr	r2, [r7, #16]
 800df24:	4313      	orrs	r3, r2
 800df26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	4a19      	ldr	r2, [pc, #100]	@ (800df90 <TIM_OC6_SetConfig+0xb8>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d00f      	beq.n	800df50 <TIM_OC6_SetConfig+0x78>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	4a18      	ldr	r2, [pc, #96]	@ (800df94 <TIM_OC6_SetConfig+0xbc>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d00b      	beq.n	800df50 <TIM_OC6_SetConfig+0x78>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	4a17      	ldr	r2, [pc, #92]	@ (800df98 <TIM_OC6_SetConfig+0xc0>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d007      	beq.n	800df50 <TIM_OC6_SetConfig+0x78>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	4a16      	ldr	r2, [pc, #88]	@ (800df9c <TIM_OC6_SetConfig+0xc4>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d003      	beq.n	800df50 <TIM_OC6_SetConfig+0x78>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	4a15      	ldr	r2, [pc, #84]	@ (800dfa0 <TIM_OC6_SetConfig+0xc8>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d109      	bne.n	800df64 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800df56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	695b      	ldr	r3, [r3, #20]
 800df5c:	029b      	lsls	r3, r3, #10
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	4313      	orrs	r3, r2
 800df62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	697a      	ldr	r2, [r7, #20]
 800df68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	68fa      	ldr	r2, [r7, #12]
 800df6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	685a      	ldr	r2, [r3, #4]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	693a      	ldr	r2, [r7, #16]
 800df7c:	621a      	str	r2, [r3, #32]
}
 800df7e:	bf00      	nop
 800df80:	371c      	adds	r7, #28
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr
 800df8a:	bf00      	nop
 800df8c:	feff8fff 	.word	0xfeff8fff
 800df90:	40010000 	.word	0x40010000
 800df94:	40010400 	.word	0x40010400
 800df98:	40014000 	.word	0x40014000
 800df9c:	40014400 	.word	0x40014400
 800dfa0:	40014800 	.word	0x40014800

0800dfa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b087      	sub	sp, #28
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	60b9      	str	r1, [r7, #8]
 800dfae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6a1b      	ldr	r3, [r3, #32]
 800dfb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	6a1b      	ldr	r3, [r3, #32]
 800dfba:	f023 0201 	bic.w	r2, r3, #1
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	699b      	ldr	r3, [r3, #24]
 800dfc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dfce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	011b      	lsls	r3, r3, #4
 800dfd4:	693a      	ldr	r2, [r7, #16]
 800dfd6:	4313      	orrs	r3, r2
 800dfd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	f023 030a 	bic.w	r3, r3, #10
 800dfe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dfe2:	697a      	ldr	r2, [r7, #20]
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	4313      	orrs	r3, r2
 800dfe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	693a      	ldr	r2, [r7, #16]
 800dfee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	697a      	ldr	r2, [r7, #20]
 800dff4:	621a      	str	r2, [r3, #32]
}
 800dff6:	bf00      	nop
 800dff8:	371c      	adds	r7, #28
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr

0800e002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e002:	b480      	push	{r7}
 800e004:	b087      	sub	sp, #28
 800e006:	af00      	add	r7, sp, #0
 800e008:	60f8      	str	r0, [r7, #12]
 800e00a:	60b9      	str	r1, [r7, #8]
 800e00c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	6a1b      	ldr	r3, [r3, #32]
 800e012:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	6a1b      	ldr	r3, [r3, #32]
 800e018:	f023 0210 	bic.w	r2, r3, #16
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	699b      	ldr	r3, [r3, #24]
 800e024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e02c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	031b      	lsls	r3, r3, #12
 800e032:	693a      	ldr	r2, [r7, #16]
 800e034:	4313      	orrs	r3, r2
 800e036:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e03e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	011b      	lsls	r3, r3, #4
 800e044:	697a      	ldr	r2, [r7, #20]
 800e046:	4313      	orrs	r3, r2
 800e048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	693a      	ldr	r2, [r7, #16]
 800e04e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	697a      	ldr	r2, [r7, #20]
 800e054:	621a      	str	r2, [r3, #32]
}
 800e056:	bf00      	nop
 800e058:	371c      	adds	r7, #28
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr
	...

0800e064 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e064:	b480      	push	{r7}
 800e066:	b085      	sub	sp, #20
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	689b      	ldr	r3, [r3, #8]
 800e072:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e074:	68fa      	ldr	r2, [r7, #12]
 800e076:	4b09      	ldr	r3, [pc, #36]	@ (800e09c <TIM_ITRx_SetConfig+0x38>)
 800e078:	4013      	ands	r3, r2
 800e07a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e07c:	683a      	ldr	r2, [r7, #0]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	4313      	orrs	r3, r2
 800e082:	f043 0307 	orr.w	r3, r3, #7
 800e086:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	68fa      	ldr	r2, [r7, #12]
 800e08c:	609a      	str	r2, [r3, #8]
}
 800e08e:	bf00      	nop
 800e090:	3714      	adds	r7, #20
 800e092:	46bd      	mov	sp, r7
 800e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e098:	4770      	bx	lr
 800e09a:	bf00      	nop
 800e09c:	ffcfff8f 	.word	0xffcfff8f

0800e0a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b087      	sub	sp, #28
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	607a      	str	r2, [r7, #4]
 800e0ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	689b      	ldr	r3, [r3, #8]
 800e0b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e0ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	021a      	lsls	r2, r3, #8
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	431a      	orrs	r2, r3
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	697a      	ldr	r2, [r7, #20]
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	697a      	ldr	r2, [r7, #20]
 800e0d2:	609a      	str	r2, [r3, #8]
}
 800e0d4:	bf00      	nop
 800e0d6:	371c      	adds	r7, #28
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr

0800e0e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d101      	bne.n	800e0f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e0f4:	2302      	movs	r3, #2
 800e0f6:	e06d      	b.n	800e1d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2202      	movs	r2, #2
 800e104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a30      	ldr	r2, [pc, #192]	@ (800e1e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d004      	beq.n	800e12c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4a2f      	ldr	r2, [pc, #188]	@ (800e1e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d108      	bne.n	800e13e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e132:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	68fa      	ldr	r2, [r7, #12]
 800e13a:	4313      	orrs	r3, r2
 800e13c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e144:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	68fa      	ldr	r2, [r7, #12]
 800e14c:	4313      	orrs	r3, r2
 800e14e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	68fa      	ldr	r2, [r7, #12]
 800e156:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4a20      	ldr	r2, [pc, #128]	@ (800e1e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e15e:	4293      	cmp	r3, r2
 800e160:	d022      	beq.n	800e1a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e16a:	d01d      	beq.n	800e1a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4a1d      	ldr	r2, [pc, #116]	@ (800e1e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d018      	beq.n	800e1a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a1c      	ldr	r2, [pc, #112]	@ (800e1ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d013      	beq.n	800e1a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a1a      	ldr	r2, [pc, #104]	@ (800e1f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e186:	4293      	cmp	r3, r2
 800e188:	d00e      	beq.n	800e1a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	4a15      	ldr	r2, [pc, #84]	@ (800e1e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e190:	4293      	cmp	r3, r2
 800e192:	d009      	beq.n	800e1a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4a16      	ldr	r2, [pc, #88]	@ (800e1f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d004      	beq.n	800e1a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	4a15      	ldr	r2, [pc, #84]	@ (800e1f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d10c      	bne.n	800e1c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e1ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	68ba      	ldr	r2, [r7, #8]
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	68ba      	ldr	r2, [r7, #8]
 800e1c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e1d2:	2300      	movs	r3, #0
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3714      	adds	r7, #20
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr
 800e1e0:	40010000 	.word	0x40010000
 800e1e4:	40010400 	.word	0x40010400
 800e1e8:	40000400 	.word	0x40000400
 800e1ec:	40000800 	.word	0x40000800
 800e1f0:	40000c00 	.word	0x40000c00
 800e1f4:	40001800 	.word	0x40001800
 800e1f8:	40014000 	.word	0x40014000

0800e1fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b085      	sub	sp, #20
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e206:	2300      	movs	r3, #0
 800e208:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e210:	2b01      	cmp	r3, #1
 800e212:	d101      	bne.n	800e218 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e214:	2302      	movs	r3, #2
 800e216:	e065      	b.n	800e2e4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2201      	movs	r2, #1
 800e21c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	68db      	ldr	r3, [r3, #12]
 800e22a:	4313      	orrs	r3, r2
 800e22c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	4313      	orrs	r3, r2
 800e23a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	4313      	orrs	r3, r2
 800e248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4313      	orrs	r3, r2
 800e256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	691b      	ldr	r3, [r3, #16]
 800e262:	4313      	orrs	r3, r2
 800e264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	695b      	ldr	r3, [r3, #20]
 800e270:	4313      	orrs	r3, r2
 800e272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e27e:	4313      	orrs	r3, r2
 800e280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	699b      	ldr	r3, [r3, #24]
 800e28c:	041b      	lsls	r3, r3, #16
 800e28e:	4313      	orrs	r3, r2
 800e290:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4a16      	ldr	r2, [pc, #88]	@ (800e2f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	d004      	beq.n	800e2a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a14      	ldr	r2, [pc, #80]	@ (800e2f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d115      	bne.n	800e2d2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2b0:	051b      	lsls	r3, r3, #20
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	69db      	ldr	r3, [r3, #28]
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	6a1b      	ldr	r3, [r3, #32]
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	68fa      	ldr	r2, [r7, #12]
 800e2d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e2e2:	2300      	movs	r3, #0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3714      	adds	r7, #20
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr
 800e2f0:	40010000 	.word	0x40010000
 800e2f4:	40010400 	.word	0x40010400

0800e2f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b083      	sub	sp, #12
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e300:	bf00      	nop
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr

0800e30c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e314:	bf00      	nop
 800e316:	370c      	adds	r7, #12
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e320:	b480      	push	{r7}
 800e322:	b083      	sub	sp, #12
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e328:	bf00      	nop
 800e32a:	370c      	adds	r7, #12
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr

0800e334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d101      	bne.n	800e346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e342:	2301      	movs	r3, #1
 800e344:	e042      	b.n	800e3cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d106      	bne.n	800e35e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2200      	movs	r2, #0
 800e354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f7f3 fd3b 	bl	8001dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2224      	movs	r2, #36	@ 0x24
 800e362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f022 0201 	bic.w	r2, r2, #1
 800e374:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d002      	beq.n	800e384 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f001 fa14 	bl	800f7ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f000 fca9 	bl	800ecdc <UART_SetConfig>
 800e38a:	4603      	mov	r3, r0
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	d101      	bne.n	800e394 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e390:	2301      	movs	r3, #1
 800e392:	e01b      	b.n	800e3cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	685a      	ldr	r2, [r3, #4]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e3a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	689a      	ldr	r2, [r3, #8]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e3b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f042 0201 	orr.w	r2, r2, #1
 800e3c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f001 fa93 	bl	800f8f0 <UART_CheckIdleState>
 800e3ca:	4603      	mov	r3, r0
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3708      	adds	r7, #8
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b08a      	sub	sp, #40	@ 0x28
 800e3d8:	af02      	add	r7, sp, #8
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	603b      	str	r3, [r7, #0]
 800e3e0:	4613      	mov	r3, r2
 800e3e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3ea:	2b20      	cmp	r3, #32
 800e3ec:	d17b      	bne.n	800e4e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d002      	beq.n	800e3fa <HAL_UART_Transmit+0x26>
 800e3f4:	88fb      	ldrh	r3, [r7, #6]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d101      	bne.n	800e3fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e074      	b.n	800e4e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2200      	movs	r2, #0
 800e402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2221      	movs	r2, #33	@ 0x21
 800e40a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e40e:	f7f4 f8c5 	bl	800259c <HAL_GetTick>
 800e412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	88fa      	ldrh	r2, [r7, #6]
 800e418:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	88fa      	ldrh	r2, [r7, #6]
 800e420:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e42c:	d108      	bne.n	800e440 <HAL_UART_Transmit+0x6c>
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	691b      	ldr	r3, [r3, #16]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d104      	bne.n	800e440 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e436:	2300      	movs	r3, #0
 800e438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	61bb      	str	r3, [r7, #24]
 800e43e:	e003      	b.n	800e448 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e444:	2300      	movs	r3, #0
 800e446:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e448:	e030      	b.n	800e4ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	9300      	str	r3, [sp, #0]
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	2200      	movs	r2, #0
 800e452:	2180      	movs	r1, #128	@ 0x80
 800e454:	68f8      	ldr	r0, [r7, #12]
 800e456:	f001 faf5 	bl	800fa44 <UART_WaitOnFlagUntilTimeout>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d005      	beq.n	800e46c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2220      	movs	r2, #32
 800e464:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e468:	2303      	movs	r3, #3
 800e46a:	e03d      	b.n	800e4e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d10b      	bne.n	800e48a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e472:	69bb      	ldr	r3, [r7, #24]
 800e474:	881b      	ldrh	r3, [r3, #0]
 800e476:	461a      	mov	r2, r3
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e480:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e482:	69bb      	ldr	r3, [r7, #24]
 800e484:	3302      	adds	r3, #2
 800e486:	61bb      	str	r3, [r7, #24]
 800e488:	e007      	b.n	800e49a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	781a      	ldrb	r2, [r3, #0]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e494:	69fb      	ldr	r3, [r7, #28]
 800e496:	3301      	adds	r3, #1
 800e498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	3b01      	subs	r3, #1
 800e4a4:	b29a      	uxth	r2, r3
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d1c8      	bne.n	800e44a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	9300      	str	r3, [sp, #0]
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	2140      	movs	r1, #64	@ 0x40
 800e4c2:	68f8      	ldr	r0, [r7, #12]
 800e4c4:	f001 fabe 	bl	800fa44 <UART_WaitOnFlagUntilTimeout>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d005      	beq.n	800e4da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2220      	movs	r2, #32
 800e4d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e4d6:	2303      	movs	r3, #3
 800e4d8:	e006      	b.n	800e4e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2220      	movs	r2, #32
 800e4de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	e000      	b.n	800e4e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e4e6:	2302      	movs	r3, #2
  }
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3720      	adds	r7, #32
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b0ba      	sub	sp, #232	@ 0xe8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	69db      	ldr	r3, [r3, #28]
 800e4fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	689b      	ldr	r3, [r3, #8]
 800e512:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e516:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e51a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e51e:	4013      	ands	r3, r2
 800e520:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d11b      	bne.n	800e564 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e52c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e530:	f003 0320 	and.w	r3, r3, #32
 800e534:	2b00      	cmp	r3, #0
 800e536:	d015      	beq.n	800e564 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e53c:	f003 0320 	and.w	r3, r3, #32
 800e540:	2b00      	cmp	r3, #0
 800e542:	d105      	bne.n	800e550 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d009      	beq.n	800e564 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e554:	2b00      	cmp	r3, #0
 800e556:	f000 8393 	beq.w	800ec80 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	4798      	blx	r3
      }
      return;
 800e562:	e38d      	b.n	800ec80 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e568:	2b00      	cmp	r3, #0
 800e56a:	f000 8123 	beq.w	800e7b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e56e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e572:	4b8d      	ldr	r3, [pc, #564]	@ (800e7a8 <HAL_UART_IRQHandler+0x2b8>)
 800e574:	4013      	ands	r3, r2
 800e576:	2b00      	cmp	r3, #0
 800e578:	d106      	bne.n	800e588 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e57a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e57e:	4b8b      	ldr	r3, [pc, #556]	@ (800e7ac <HAL_UART_IRQHandler+0x2bc>)
 800e580:	4013      	ands	r3, r2
 800e582:	2b00      	cmp	r3, #0
 800e584:	f000 8116 	beq.w	800e7b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e58c:	f003 0301 	and.w	r3, r3, #1
 800e590:	2b00      	cmp	r3, #0
 800e592:	d011      	beq.n	800e5b8 <HAL_UART_IRQHandler+0xc8>
 800e594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d00b      	beq.n	800e5b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5ae:	f043 0201 	orr.w	r2, r3, #1
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5bc:	f003 0302 	and.w	r3, r3, #2
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d011      	beq.n	800e5e8 <HAL_UART_IRQHandler+0xf8>
 800e5c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e5c8:	f003 0301 	and.w	r3, r3, #1
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d00b      	beq.n	800e5e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2202      	movs	r2, #2
 800e5d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5de:	f043 0204 	orr.w	r2, r3, #4
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5ec:	f003 0304 	and.w	r3, r3, #4
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d011      	beq.n	800e618 <HAL_UART_IRQHandler+0x128>
 800e5f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e5f8:	f003 0301 	and.w	r3, r3, #1
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d00b      	beq.n	800e618 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2204      	movs	r2, #4
 800e606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e60e:	f043 0202 	orr.w	r2, r3, #2
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e61c:	f003 0308 	and.w	r3, r3, #8
 800e620:	2b00      	cmp	r3, #0
 800e622:	d017      	beq.n	800e654 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e628:	f003 0320 	and.w	r3, r3, #32
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d105      	bne.n	800e63c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e630:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e634:	4b5c      	ldr	r3, [pc, #368]	@ (800e7a8 <HAL_UART_IRQHandler+0x2b8>)
 800e636:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d00b      	beq.n	800e654 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2208      	movs	r2, #8
 800e642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e64a:	f043 0208 	orr.w	r2, r3, #8
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e658:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d012      	beq.n	800e686 <HAL_UART_IRQHandler+0x196>
 800e660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e664:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d00c      	beq.n	800e686 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e67c:	f043 0220 	orr.w	r2, r3, #32
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f000 82f9 	beq.w	800ec84 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e696:	f003 0320 	and.w	r3, r3, #32
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d013      	beq.n	800e6c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e69e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6a2:	f003 0320 	and.w	r3, r3, #32
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d105      	bne.n	800e6b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e6aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d007      	beq.n	800e6c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d003      	beq.n	800e6c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	689b      	ldr	r3, [r3, #8]
 800e6d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6da:	2b40      	cmp	r3, #64	@ 0x40
 800e6dc:	d005      	beq.n	800e6ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e6de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e6e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d054      	beq.n	800e794 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f001 fa18 	bl	800fb20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	689b      	ldr	r3, [r3, #8]
 800e6f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6fa:	2b40      	cmp	r3, #64	@ 0x40
 800e6fc:	d146      	bne.n	800e78c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	3308      	adds	r3, #8
 800e704:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e708:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e70c:	e853 3f00 	ldrex	r3, [r3]
 800e710:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e714:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e71c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	3308      	adds	r3, #8
 800e726:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e72a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e72e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e732:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e736:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e73a:	e841 2300 	strex	r3, r2, [r1]
 800e73e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e746:	2b00      	cmp	r3, #0
 800e748:	d1d9      	bne.n	800e6fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e750:	2b00      	cmp	r3, #0
 800e752:	d017      	beq.n	800e784 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e75a:	4a15      	ldr	r2, [pc, #84]	@ (800e7b0 <HAL_UART_IRQHandler+0x2c0>)
 800e75c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e764:	4618      	mov	r0, r3
 800e766:	f7f5 f8ef 	bl	8003948 <HAL_DMA_Abort_IT>
 800e76a:	4603      	mov	r3, r0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d019      	beq.n	800e7a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e77e:	4610      	mov	r0, r2
 800e780:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e782:	e00f      	b.n	800e7a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f000 fa93 	bl	800ecb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e78a:	e00b      	b.n	800e7a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f000 fa8f 	bl	800ecb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e792:	e007      	b.n	800e7a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f000 fa8b 	bl	800ecb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e7a2:	e26f      	b.n	800ec84 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7a4:	bf00      	nop
    return;
 800e7a6:	e26d      	b.n	800ec84 <HAL_UART_IRQHandler+0x794>
 800e7a8:	10000001 	.word	0x10000001
 800e7ac:	04000120 	.word	0x04000120
 800e7b0:	0800fbed 	.word	0x0800fbed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	f040 8203 	bne.w	800ebc4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7c2:	f003 0310 	and.w	r3, r3, #16
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	f000 81fc 	beq.w	800ebc4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e7cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7d0:	f003 0310 	and.w	r3, r3, #16
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	f000 81f5 	beq.w	800ebc4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2210      	movs	r2, #16
 800e7e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	689b      	ldr	r3, [r3, #8]
 800e7e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7ec:	2b40      	cmp	r3, #64	@ 0x40
 800e7ee:	f040 816d 	bne.w	800eacc <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4aa4      	ldr	r2, [pc, #656]	@ (800ea8c <HAL_UART_IRQHandler+0x59c>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d068      	beq.n	800e8d2 <HAL_UART_IRQHandler+0x3e2>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	4aa1      	ldr	r2, [pc, #644]	@ (800ea90 <HAL_UART_IRQHandler+0x5a0>)
 800e80a:	4293      	cmp	r3, r2
 800e80c:	d061      	beq.n	800e8d2 <HAL_UART_IRQHandler+0x3e2>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	4a9f      	ldr	r2, [pc, #636]	@ (800ea94 <HAL_UART_IRQHandler+0x5a4>)
 800e818:	4293      	cmp	r3, r2
 800e81a:	d05a      	beq.n	800e8d2 <HAL_UART_IRQHandler+0x3e2>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a9c      	ldr	r2, [pc, #624]	@ (800ea98 <HAL_UART_IRQHandler+0x5a8>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d053      	beq.n	800e8d2 <HAL_UART_IRQHandler+0x3e2>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4a9a      	ldr	r2, [pc, #616]	@ (800ea9c <HAL_UART_IRQHandler+0x5ac>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d04c      	beq.n	800e8d2 <HAL_UART_IRQHandler+0x3e2>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a97      	ldr	r2, [pc, #604]	@ (800eaa0 <HAL_UART_IRQHandler+0x5b0>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d045      	beq.n	800e8d2 <HAL_UART_IRQHandler+0x3e2>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4a95      	ldr	r2, [pc, #596]	@ (800eaa4 <HAL_UART_IRQHandler+0x5b4>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d03e      	beq.n	800e8d2 <HAL_UART_IRQHandler+0x3e2>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a92      	ldr	r2, [pc, #584]	@ (800eaa8 <HAL_UART_IRQHandler+0x5b8>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d037      	beq.n	800e8d2 <HAL_UART_IRQHandler+0x3e2>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4a90      	ldr	r2, [pc, #576]	@ (800eaac <HAL_UART_IRQHandler+0x5bc>)
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d030      	beq.n	800e8d2 <HAL_UART_IRQHandler+0x3e2>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4a8d      	ldr	r2, [pc, #564]	@ (800eab0 <HAL_UART_IRQHandler+0x5c0>)
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d029      	beq.n	800e8d2 <HAL_UART_IRQHandler+0x3e2>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4a8b      	ldr	r2, [pc, #556]	@ (800eab4 <HAL_UART_IRQHandler+0x5c4>)
 800e888:	4293      	cmp	r3, r2
 800e88a:	d022      	beq.n	800e8d2 <HAL_UART_IRQHandler+0x3e2>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a88      	ldr	r2, [pc, #544]	@ (800eab8 <HAL_UART_IRQHandler+0x5c8>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d01b      	beq.n	800e8d2 <HAL_UART_IRQHandler+0x3e2>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a86      	ldr	r2, [pc, #536]	@ (800eabc <HAL_UART_IRQHandler+0x5cc>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d014      	beq.n	800e8d2 <HAL_UART_IRQHandler+0x3e2>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4a83      	ldr	r2, [pc, #524]	@ (800eac0 <HAL_UART_IRQHandler+0x5d0>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d00d      	beq.n	800e8d2 <HAL_UART_IRQHandler+0x3e2>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	4a81      	ldr	r2, [pc, #516]	@ (800eac4 <HAL_UART_IRQHandler+0x5d4>)
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	d006      	beq.n	800e8d2 <HAL_UART_IRQHandler+0x3e2>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	4a7e      	ldr	r2, [pc, #504]	@ (800eac8 <HAL_UART_IRQHandler+0x5d8>)
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d106      	bne.n	800e8e0 <HAL_UART_IRQHandler+0x3f0>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	e005      	b.n	800e8ec <HAL_UART_IRQHandler+0x3fc>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	b29b      	uxth	r3, r3
 800e8ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e8f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	f000 80ad 	beq.w	800ea54 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e900:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e904:	429a      	cmp	r2, r3
 800e906:	f080 80a5 	bcs.w	800ea54 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e910:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e91a:	69db      	ldr	r3, [r3, #28]
 800e91c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e920:	f000 8087 	beq.w	800ea32 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e92c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e930:	e853 3f00 	ldrex	r3, [r3]
 800e934:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e938:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e93c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e940:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	461a      	mov	r2, r3
 800e94a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e94e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e952:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e956:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e95a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e95e:	e841 2300 	strex	r3, r2, [r1]
 800e962:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e966:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d1da      	bne.n	800e924 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	3308      	adds	r3, #8
 800e974:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e976:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e978:	e853 3f00 	ldrex	r3, [r3]
 800e97c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e97e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e980:	f023 0301 	bic.w	r3, r3, #1
 800e984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	3308      	adds	r3, #8
 800e98e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e992:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e996:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e998:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e99a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e99e:	e841 2300 	strex	r3, r2, [r1]
 800e9a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e9a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d1e1      	bne.n	800e96e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	3308      	adds	r3, #8
 800e9b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9b4:	e853 3f00 	ldrex	r3, [r3]
 800e9b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e9ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	3308      	adds	r3, #8
 800e9ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e9ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e9d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e9d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e9d6:	e841 2300 	strex	r3, r2, [r1]
 800e9da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e9dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1e3      	bne.n	800e9aa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2220      	movs	r2, #32
 800e9e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9f8:	e853 3f00 	ldrex	r3, [r3]
 800e9fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e9fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea00:	f023 0310 	bic.w	r3, r3, #16
 800ea04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea12:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ea14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ea18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ea1a:	e841 2300 	strex	r3, r2, [r1]
 800ea1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ea20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d1e4      	bne.n	800e9f0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7f4 fc6d 	bl	800330c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2202      	movs	r2, #2
 800ea36:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea44:	b29b      	uxth	r3, r3
 800ea46:	1ad3      	subs	r3, r2, r3
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f000 f939 	bl	800ecc4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ea52:	e119      	b.n	800ec88 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ea5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	f040 8112 	bne.w	800ec88 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea6a:	69db      	ldr	r3, [r3, #28]
 800ea6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea70:	f040 810a 	bne.w	800ec88 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2202      	movs	r2, #2
 800ea78:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ea80:	4619      	mov	r1, r3
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 f91e 	bl	800ecc4 <HAL_UARTEx_RxEventCallback>
      return;
 800ea88:	e0fe      	b.n	800ec88 <HAL_UART_IRQHandler+0x798>
 800ea8a:	bf00      	nop
 800ea8c:	40020010 	.word	0x40020010
 800ea90:	40020028 	.word	0x40020028
 800ea94:	40020040 	.word	0x40020040
 800ea98:	40020058 	.word	0x40020058
 800ea9c:	40020070 	.word	0x40020070
 800eaa0:	40020088 	.word	0x40020088
 800eaa4:	400200a0 	.word	0x400200a0
 800eaa8:	400200b8 	.word	0x400200b8
 800eaac:	40020410 	.word	0x40020410
 800eab0:	40020428 	.word	0x40020428
 800eab4:	40020440 	.word	0x40020440
 800eab8:	40020458 	.word	0x40020458
 800eabc:	40020470 	.word	0x40020470
 800eac0:	40020488 	.word	0x40020488
 800eac4:	400204a0 	.word	0x400204a0
 800eac8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ead8:	b29b      	uxth	r3, r3
 800eada:	1ad3      	subs	r3, r2, r3
 800eadc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	f000 80cf 	beq.w	800ec8c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800eaee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f000 80ca 	beq.w	800ec8c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb00:	e853 3f00 	ldrex	r3, [r3]
 800eb04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eb06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eb0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	461a      	mov	r2, r3
 800eb16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eb1a:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb1c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eb20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb22:	e841 2300 	strex	r3, r2, [r1]
 800eb26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eb28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1e4      	bne.n	800eaf8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	3308      	adds	r3, #8
 800eb34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb38:	e853 3f00 	ldrex	r3, [r3]
 800eb3c:	623b      	str	r3, [r7, #32]
   return(result);
 800eb3e:	6a3a      	ldr	r2, [r7, #32]
 800eb40:	4b55      	ldr	r3, [pc, #340]	@ (800ec98 <HAL_UART_IRQHandler+0x7a8>)
 800eb42:	4013      	ands	r3, r2
 800eb44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	3308      	adds	r3, #8
 800eb4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800eb52:	633a      	str	r2, [r7, #48]	@ 0x30
 800eb54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eb58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb5a:	e841 2300 	strex	r3, r2, [r1]
 800eb5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eb60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d1e3      	bne.n	800eb2e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2220      	movs	r2, #32
 800eb6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2200      	movs	r2, #0
 800eb72:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2200      	movs	r2, #0
 800eb78:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	e853 3f00 	ldrex	r3, [r3]
 800eb86:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	f023 0310 	bic.w	r3, r3, #16
 800eb8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	461a      	mov	r2, r3
 800eb98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800eb9c:	61fb      	str	r3, [r7, #28]
 800eb9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba0:	69b9      	ldr	r1, [r7, #24]
 800eba2:	69fa      	ldr	r2, [r7, #28]
 800eba4:	e841 2300 	strex	r3, r2, [r1]
 800eba8:	617b      	str	r3, [r7, #20]
   return(result);
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d1e4      	bne.n	800eb7a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2202      	movs	r2, #2
 800ebb4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ebb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ebba:	4619      	mov	r1, r3
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f000 f881 	bl	800ecc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ebc2:	e063      	b.n	800ec8c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ebc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d00e      	beq.n	800ebee <HAL_UART_IRQHandler+0x6fe>
 800ebd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ebd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d008      	beq.n	800ebee <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ebe4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f001 f83d 	bl	800fc66 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ebec:	e051      	b.n	800ec92 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ebee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d014      	beq.n	800ec24 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ebfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ebfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d105      	bne.n	800ec12 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ec06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d008      	beq.n	800ec24 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d03a      	beq.n	800ec90 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	4798      	blx	r3
    }
    return;
 800ec22:	e035      	b.n	800ec90 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ec24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d009      	beq.n	800ec44 <HAL_UART_IRQHandler+0x754>
 800ec30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d003      	beq.n	800ec44 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f000 ffe7 	bl	800fc10 <UART_EndTransmit_IT>
    return;
 800ec42:	e026      	b.n	800ec92 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ec44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d009      	beq.n	800ec64 <HAL_UART_IRQHandler+0x774>
 800ec50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d003      	beq.n	800ec64 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f001 f816 	bl	800fc8e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec62:	e016      	b.n	800ec92 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ec64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d010      	beq.n	800ec92 <HAL_UART_IRQHandler+0x7a2>
 800ec70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	da0c      	bge.n	800ec92 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f000 fffe 	bl	800fc7a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec7e:	e008      	b.n	800ec92 <HAL_UART_IRQHandler+0x7a2>
      return;
 800ec80:	bf00      	nop
 800ec82:	e006      	b.n	800ec92 <HAL_UART_IRQHandler+0x7a2>
    return;
 800ec84:	bf00      	nop
 800ec86:	e004      	b.n	800ec92 <HAL_UART_IRQHandler+0x7a2>
      return;
 800ec88:	bf00      	nop
 800ec8a:	e002      	b.n	800ec92 <HAL_UART_IRQHandler+0x7a2>
      return;
 800ec8c:	bf00      	nop
 800ec8e:	e000      	b.n	800ec92 <HAL_UART_IRQHandler+0x7a2>
    return;
 800ec90:	bf00      	nop
  }
}
 800ec92:	37e8      	adds	r7, #232	@ 0xe8
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	effffffe 	.word	0xeffffffe

0800ec9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800eca4:	bf00      	nop
 800eca6:	370c      	adds	r7, #12
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr

0800ecb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ecb8:	bf00      	nop
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	460b      	mov	r3, r1
 800ecce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ecd0:	bf00      	nop
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ecdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ece0:	b092      	sub	sp, #72	@ 0x48
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ece6:	2300      	movs	r3, #0
 800ece8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	689a      	ldr	r2, [r3, #8]
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	691b      	ldr	r3, [r3, #16]
 800ecf4:	431a      	orrs	r2, r3
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	695b      	ldr	r3, [r3, #20]
 800ecfa:	431a      	orrs	r2, r3
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	69db      	ldr	r3, [r3, #28]
 800ed00:	4313      	orrs	r3, r2
 800ed02:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	4bbe      	ldr	r3, [pc, #760]	@ (800f004 <UART_SetConfig+0x328>)
 800ed0c:	4013      	ands	r3, r2
 800ed0e:	697a      	ldr	r2, [r7, #20]
 800ed10:	6812      	ldr	r2, [r2, #0]
 800ed12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ed14:	430b      	orrs	r3, r1
 800ed16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	68da      	ldr	r2, [r3, #12]
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	430a      	orrs	r2, r1
 800ed2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	699b      	ldr	r3, [r3, #24]
 800ed32:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4ab3      	ldr	r2, [pc, #716]	@ (800f008 <UART_SetConfig+0x32c>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d004      	beq.n	800ed48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	6a1b      	ldr	r3, [r3, #32]
 800ed42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed44:	4313      	orrs	r3, r2
 800ed46:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	689a      	ldr	r2, [r3, #8]
 800ed4e:	4baf      	ldr	r3, [pc, #700]	@ (800f00c <UART_SetConfig+0x330>)
 800ed50:	4013      	ands	r3, r2
 800ed52:	697a      	ldr	r2, [r7, #20]
 800ed54:	6812      	ldr	r2, [r2, #0]
 800ed56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ed58:	430b      	orrs	r3, r1
 800ed5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed62:	f023 010f 	bic.w	r1, r3, #15
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	430a      	orrs	r2, r1
 800ed70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	4aa6      	ldr	r2, [pc, #664]	@ (800f010 <UART_SetConfig+0x334>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d177      	bne.n	800ee6c <UART_SetConfig+0x190>
 800ed7c:	4ba5      	ldr	r3, [pc, #660]	@ (800f014 <UART_SetConfig+0x338>)
 800ed7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ed84:	2b28      	cmp	r3, #40	@ 0x28
 800ed86:	d86d      	bhi.n	800ee64 <UART_SetConfig+0x188>
 800ed88:	a201      	add	r2, pc, #4	@ (adr r2, 800ed90 <UART_SetConfig+0xb4>)
 800ed8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed8e:	bf00      	nop
 800ed90:	0800ee35 	.word	0x0800ee35
 800ed94:	0800ee65 	.word	0x0800ee65
 800ed98:	0800ee65 	.word	0x0800ee65
 800ed9c:	0800ee65 	.word	0x0800ee65
 800eda0:	0800ee65 	.word	0x0800ee65
 800eda4:	0800ee65 	.word	0x0800ee65
 800eda8:	0800ee65 	.word	0x0800ee65
 800edac:	0800ee65 	.word	0x0800ee65
 800edb0:	0800ee3d 	.word	0x0800ee3d
 800edb4:	0800ee65 	.word	0x0800ee65
 800edb8:	0800ee65 	.word	0x0800ee65
 800edbc:	0800ee65 	.word	0x0800ee65
 800edc0:	0800ee65 	.word	0x0800ee65
 800edc4:	0800ee65 	.word	0x0800ee65
 800edc8:	0800ee65 	.word	0x0800ee65
 800edcc:	0800ee65 	.word	0x0800ee65
 800edd0:	0800ee45 	.word	0x0800ee45
 800edd4:	0800ee65 	.word	0x0800ee65
 800edd8:	0800ee65 	.word	0x0800ee65
 800eddc:	0800ee65 	.word	0x0800ee65
 800ede0:	0800ee65 	.word	0x0800ee65
 800ede4:	0800ee65 	.word	0x0800ee65
 800ede8:	0800ee65 	.word	0x0800ee65
 800edec:	0800ee65 	.word	0x0800ee65
 800edf0:	0800ee4d 	.word	0x0800ee4d
 800edf4:	0800ee65 	.word	0x0800ee65
 800edf8:	0800ee65 	.word	0x0800ee65
 800edfc:	0800ee65 	.word	0x0800ee65
 800ee00:	0800ee65 	.word	0x0800ee65
 800ee04:	0800ee65 	.word	0x0800ee65
 800ee08:	0800ee65 	.word	0x0800ee65
 800ee0c:	0800ee65 	.word	0x0800ee65
 800ee10:	0800ee55 	.word	0x0800ee55
 800ee14:	0800ee65 	.word	0x0800ee65
 800ee18:	0800ee65 	.word	0x0800ee65
 800ee1c:	0800ee65 	.word	0x0800ee65
 800ee20:	0800ee65 	.word	0x0800ee65
 800ee24:	0800ee65 	.word	0x0800ee65
 800ee28:	0800ee65 	.word	0x0800ee65
 800ee2c:	0800ee65 	.word	0x0800ee65
 800ee30:	0800ee5d 	.word	0x0800ee5d
 800ee34:	2301      	movs	r3, #1
 800ee36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee3a:	e222      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ee3c:	2304      	movs	r3, #4
 800ee3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee42:	e21e      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ee44:	2308      	movs	r3, #8
 800ee46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee4a:	e21a      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ee4c:	2310      	movs	r3, #16
 800ee4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee52:	e216      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ee54:	2320      	movs	r3, #32
 800ee56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee5a:	e212      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ee5c:	2340      	movs	r3, #64	@ 0x40
 800ee5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee62:	e20e      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ee64:	2380      	movs	r3, #128	@ 0x80
 800ee66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee6a:	e20a      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a69      	ldr	r2, [pc, #420]	@ (800f018 <UART_SetConfig+0x33c>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d130      	bne.n	800eed8 <UART_SetConfig+0x1fc>
 800ee76:	4b67      	ldr	r3, [pc, #412]	@ (800f014 <UART_SetConfig+0x338>)
 800ee78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee7a:	f003 0307 	and.w	r3, r3, #7
 800ee7e:	2b05      	cmp	r3, #5
 800ee80:	d826      	bhi.n	800eed0 <UART_SetConfig+0x1f4>
 800ee82:	a201      	add	r2, pc, #4	@ (adr r2, 800ee88 <UART_SetConfig+0x1ac>)
 800ee84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee88:	0800eea1 	.word	0x0800eea1
 800ee8c:	0800eea9 	.word	0x0800eea9
 800ee90:	0800eeb1 	.word	0x0800eeb1
 800ee94:	0800eeb9 	.word	0x0800eeb9
 800ee98:	0800eec1 	.word	0x0800eec1
 800ee9c:	0800eec9 	.word	0x0800eec9
 800eea0:	2300      	movs	r3, #0
 800eea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eea6:	e1ec      	b.n	800f282 <UART_SetConfig+0x5a6>
 800eea8:	2304      	movs	r3, #4
 800eeaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeae:	e1e8      	b.n	800f282 <UART_SetConfig+0x5a6>
 800eeb0:	2308      	movs	r3, #8
 800eeb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeb6:	e1e4      	b.n	800f282 <UART_SetConfig+0x5a6>
 800eeb8:	2310      	movs	r3, #16
 800eeba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eebe:	e1e0      	b.n	800f282 <UART_SetConfig+0x5a6>
 800eec0:	2320      	movs	r3, #32
 800eec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eec6:	e1dc      	b.n	800f282 <UART_SetConfig+0x5a6>
 800eec8:	2340      	movs	r3, #64	@ 0x40
 800eeca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eece:	e1d8      	b.n	800f282 <UART_SetConfig+0x5a6>
 800eed0:	2380      	movs	r3, #128	@ 0x80
 800eed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eed6:	e1d4      	b.n	800f282 <UART_SetConfig+0x5a6>
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a4f      	ldr	r2, [pc, #316]	@ (800f01c <UART_SetConfig+0x340>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d130      	bne.n	800ef44 <UART_SetConfig+0x268>
 800eee2:	4b4c      	ldr	r3, [pc, #304]	@ (800f014 <UART_SetConfig+0x338>)
 800eee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eee6:	f003 0307 	and.w	r3, r3, #7
 800eeea:	2b05      	cmp	r3, #5
 800eeec:	d826      	bhi.n	800ef3c <UART_SetConfig+0x260>
 800eeee:	a201      	add	r2, pc, #4	@ (adr r2, 800eef4 <UART_SetConfig+0x218>)
 800eef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eef4:	0800ef0d 	.word	0x0800ef0d
 800eef8:	0800ef15 	.word	0x0800ef15
 800eefc:	0800ef1d 	.word	0x0800ef1d
 800ef00:	0800ef25 	.word	0x0800ef25
 800ef04:	0800ef2d 	.word	0x0800ef2d
 800ef08:	0800ef35 	.word	0x0800ef35
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef12:	e1b6      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ef14:	2304      	movs	r3, #4
 800ef16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef1a:	e1b2      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ef1c:	2308      	movs	r3, #8
 800ef1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef22:	e1ae      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ef24:	2310      	movs	r3, #16
 800ef26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef2a:	e1aa      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ef2c:	2320      	movs	r3, #32
 800ef2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef32:	e1a6      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ef34:	2340      	movs	r3, #64	@ 0x40
 800ef36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef3a:	e1a2      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ef3c:	2380      	movs	r3, #128	@ 0x80
 800ef3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef42:	e19e      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	4a35      	ldr	r2, [pc, #212]	@ (800f020 <UART_SetConfig+0x344>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d130      	bne.n	800efb0 <UART_SetConfig+0x2d4>
 800ef4e:	4b31      	ldr	r3, [pc, #196]	@ (800f014 <UART_SetConfig+0x338>)
 800ef50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef52:	f003 0307 	and.w	r3, r3, #7
 800ef56:	2b05      	cmp	r3, #5
 800ef58:	d826      	bhi.n	800efa8 <UART_SetConfig+0x2cc>
 800ef5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ef60 <UART_SetConfig+0x284>)
 800ef5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef60:	0800ef79 	.word	0x0800ef79
 800ef64:	0800ef81 	.word	0x0800ef81
 800ef68:	0800ef89 	.word	0x0800ef89
 800ef6c:	0800ef91 	.word	0x0800ef91
 800ef70:	0800ef99 	.word	0x0800ef99
 800ef74:	0800efa1 	.word	0x0800efa1
 800ef78:	2300      	movs	r3, #0
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef7e:	e180      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ef80:	2304      	movs	r3, #4
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef86:	e17c      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ef88:	2308      	movs	r3, #8
 800ef8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef8e:	e178      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ef90:	2310      	movs	r3, #16
 800ef92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef96:	e174      	b.n	800f282 <UART_SetConfig+0x5a6>
 800ef98:	2320      	movs	r3, #32
 800ef9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef9e:	e170      	b.n	800f282 <UART_SetConfig+0x5a6>
 800efa0:	2340      	movs	r3, #64	@ 0x40
 800efa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efa6:	e16c      	b.n	800f282 <UART_SetConfig+0x5a6>
 800efa8:	2380      	movs	r3, #128	@ 0x80
 800efaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efae:	e168      	b.n	800f282 <UART_SetConfig+0x5a6>
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4a1b      	ldr	r2, [pc, #108]	@ (800f024 <UART_SetConfig+0x348>)
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d142      	bne.n	800f040 <UART_SetConfig+0x364>
 800efba:	4b16      	ldr	r3, [pc, #88]	@ (800f014 <UART_SetConfig+0x338>)
 800efbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efbe:	f003 0307 	and.w	r3, r3, #7
 800efc2:	2b05      	cmp	r3, #5
 800efc4:	d838      	bhi.n	800f038 <UART_SetConfig+0x35c>
 800efc6:	a201      	add	r2, pc, #4	@ (adr r2, 800efcc <UART_SetConfig+0x2f0>)
 800efc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efcc:	0800efe5 	.word	0x0800efe5
 800efd0:	0800efed 	.word	0x0800efed
 800efd4:	0800eff5 	.word	0x0800eff5
 800efd8:	0800effd 	.word	0x0800effd
 800efdc:	0800f029 	.word	0x0800f029
 800efe0:	0800f031 	.word	0x0800f031
 800efe4:	2300      	movs	r3, #0
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efea:	e14a      	b.n	800f282 <UART_SetConfig+0x5a6>
 800efec:	2304      	movs	r3, #4
 800efee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eff2:	e146      	b.n	800f282 <UART_SetConfig+0x5a6>
 800eff4:	2308      	movs	r3, #8
 800eff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800effa:	e142      	b.n	800f282 <UART_SetConfig+0x5a6>
 800effc:	2310      	movs	r3, #16
 800effe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f002:	e13e      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f004:	cfff69f3 	.word	0xcfff69f3
 800f008:	58000c00 	.word	0x58000c00
 800f00c:	11fff4ff 	.word	0x11fff4ff
 800f010:	40011000 	.word	0x40011000
 800f014:	58024400 	.word	0x58024400
 800f018:	40004400 	.word	0x40004400
 800f01c:	40004800 	.word	0x40004800
 800f020:	40004c00 	.word	0x40004c00
 800f024:	40005000 	.word	0x40005000
 800f028:	2320      	movs	r3, #32
 800f02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f02e:	e128      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f030:	2340      	movs	r3, #64	@ 0x40
 800f032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f036:	e124      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f038:	2380      	movs	r3, #128	@ 0x80
 800f03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f03e:	e120      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4acb      	ldr	r2, [pc, #812]	@ (800f374 <UART_SetConfig+0x698>)
 800f046:	4293      	cmp	r3, r2
 800f048:	d176      	bne.n	800f138 <UART_SetConfig+0x45c>
 800f04a:	4bcb      	ldr	r3, [pc, #812]	@ (800f378 <UART_SetConfig+0x69c>)
 800f04c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f04e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f052:	2b28      	cmp	r3, #40	@ 0x28
 800f054:	d86c      	bhi.n	800f130 <UART_SetConfig+0x454>
 800f056:	a201      	add	r2, pc, #4	@ (adr r2, 800f05c <UART_SetConfig+0x380>)
 800f058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f05c:	0800f101 	.word	0x0800f101
 800f060:	0800f131 	.word	0x0800f131
 800f064:	0800f131 	.word	0x0800f131
 800f068:	0800f131 	.word	0x0800f131
 800f06c:	0800f131 	.word	0x0800f131
 800f070:	0800f131 	.word	0x0800f131
 800f074:	0800f131 	.word	0x0800f131
 800f078:	0800f131 	.word	0x0800f131
 800f07c:	0800f109 	.word	0x0800f109
 800f080:	0800f131 	.word	0x0800f131
 800f084:	0800f131 	.word	0x0800f131
 800f088:	0800f131 	.word	0x0800f131
 800f08c:	0800f131 	.word	0x0800f131
 800f090:	0800f131 	.word	0x0800f131
 800f094:	0800f131 	.word	0x0800f131
 800f098:	0800f131 	.word	0x0800f131
 800f09c:	0800f111 	.word	0x0800f111
 800f0a0:	0800f131 	.word	0x0800f131
 800f0a4:	0800f131 	.word	0x0800f131
 800f0a8:	0800f131 	.word	0x0800f131
 800f0ac:	0800f131 	.word	0x0800f131
 800f0b0:	0800f131 	.word	0x0800f131
 800f0b4:	0800f131 	.word	0x0800f131
 800f0b8:	0800f131 	.word	0x0800f131
 800f0bc:	0800f119 	.word	0x0800f119
 800f0c0:	0800f131 	.word	0x0800f131
 800f0c4:	0800f131 	.word	0x0800f131
 800f0c8:	0800f131 	.word	0x0800f131
 800f0cc:	0800f131 	.word	0x0800f131
 800f0d0:	0800f131 	.word	0x0800f131
 800f0d4:	0800f131 	.word	0x0800f131
 800f0d8:	0800f131 	.word	0x0800f131
 800f0dc:	0800f121 	.word	0x0800f121
 800f0e0:	0800f131 	.word	0x0800f131
 800f0e4:	0800f131 	.word	0x0800f131
 800f0e8:	0800f131 	.word	0x0800f131
 800f0ec:	0800f131 	.word	0x0800f131
 800f0f0:	0800f131 	.word	0x0800f131
 800f0f4:	0800f131 	.word	0x0800f131
 800f0f8:	0800f131 	.word	0x0800f131
 800f0fc:	0800f129 	.word	0x0800f129
 800f100:	2301      	movs	r3, #1
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f106:	e0bc      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f108:	2304      	movs	r3, #4
 800f10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f10e:	e0b8      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f110:	2308      	movs	r3, #8
 800f112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f116:	e0b4      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f118:	2310      	movs	r3, #16
 800f11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f11e:	e0b0      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f120:	2320      	movs	r3, #32
 800f122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f126:	e0ac      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f128:	2340      	movs	r3, #64	@ 0x40
 800f12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f12e:	e0a8      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f130:	2380      	movs	r3, #128	@ 0x80
 800f132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f136:	e0a4      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4a8f      	ldr	r2, [pc, #572]	@ (800f37c <UART_SetConfig+0x6a0>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	d130      	bne.n	800f1a4 <UART_SetConfig+0x4c8>
 800f142:	4b8d      	ldr	r3, [pc, #564]	@ (800f378 <UART_SetConfig+0x69c>)
 800f144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f146:	f003 0307 	and.w	r3, r3, #7
 800f14a:	2b05      	cmp	r3, #5
 800f14c:	d826      	bhi.n	800f19c <UART_SetConfig+0x4c0>
 800f14e:	a201      	add	r2, pc, #4	@ (adr r2, 800f154 <UART_SetConfig+0x478>)
 800f150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f154:	0800f16d 	.word	0x0800f16d
 800f158:	0800f175 	.word	0x0800f175
 800f15c:	0800f17d 	.word	0x0800f17d
 800f160:	0800f185 	.word	0x0800f185
 800f164:	0800f18d 	.word	0x0800f18d
 800f168:	0800f195 	.word	0x0800f195
 800f16c:	2300      	movs	r3, #0
 800f16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f172:	e086      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f174:	2304      	movs	r3, #4
 800f176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f17a:	e082      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f17c:	2308      	movs	r3, #8
 800f17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f182:	e07e      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f184:	2310      	movs	r3, #16
 800f186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f18a:	e07a      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f18c:	2320      	movs	r3, #32
 800f18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f192:	e076      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f194:	2340      	movs	r3, #64	@ 0x40
 800f196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f19a:	e072      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f19c:	2380      	movs	r3, #128	@ 0x80
 800f19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1a2:	e06e      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	4a75      	ldr	r2, [pc, #468]	@ (800f380 <UART_SetConfig+0x6a4>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d130      	bne.n	800f210 <UART_SetConfig+0x534>
 800f1ae:	4b72      	ldr	r3, [pc, #456]	@ (800f378 <UART_SetConfig+0x69c>)
 800f1b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1b2:	f003 0307 	and.w	r3, r3, #7
 800f1b6:	2b05      	cmp	r3, #5
 800f1b8:	d826      	bhi.n	800f208 <UART_SetConfig+0x52c>
 800f1ba:	a201      	add	r2, pc, #4	@ (adr r2, 800f1c0 <UART_SetConfig+0x4e4>)
 800f1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c0:	0800f1d9 	.word	0x0800f1d9
 800f1c4:	0800f1e1 	.word	0x0800f1e1
 800f1c8:	0800f1e9 	.word	0x0800f1e9
 800f1cc:	0800f1f1 	.word	0x0800f1f1
 800f1d0:	0800f1f9 	.word	0x0800f1f9
 800f1d4:	0800f201 	.word	0x0800f201
 800f1d8:	2300      	movs	r3, #0
 800f1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1de:	e050      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f1e0:	2304      	movs	r3, #4
 800f1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1e6:	e04c      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f1e8:	2308      	movs	r3, #8
 800f1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1ee:	e048      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f1f0:	2310      	movs	r3, #16
 800f1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1f6:	e044      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f1f8:	2320      	movs	r3, #32
 800f1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1fe:	e040      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f200:	2340      	movs	r3, #64	@ 0x40
 800f202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f206:	e03c      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f208:	2380      	movs	r3, #128	@ 0x80
 800f20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f20e:	e038      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	4a5b      	ldr	r2, [pc, #364]	@ (800f384 <UART_SetConfig+0x6a8>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d130      	bne.n	800f27c <UART_SetConfig+0x5a0>
 800f21a:	4b57      	ldr	r3, [pc, #348]	@ (800f378 <UART_SetConfig+0x69c>)
 800f21c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f21e:	f003 0307 	and.w	r3, r3, #7
 800f222:	2b05      	cmp	r3, #5
 800f224:	d826      	bhi.n	800f274 <UART_SetConfig+0x598>
 800f226:	a201      	add	r2, pc, #4	@ (adr r2, 800f22c <UART_SetConfig+0x550>)
 800f228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f22c:	0800f245 	.word	0x0800f245
 800f230:	0800f24d 	.word	0x0800f24d
 800f234:	0800f255 	.word	0x0800f255
 800f238:	0800f25d 	.word	0x0800f25d
 800f23c:	0800f265 	.word	0x0800f265
 800f240:	0800f26d 	.word	0x0800f26d
 800f244:	2302      	movs	r3, #2
 800f246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f24a:	e01a      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f24c:	2304      	movs	r3, #4
 800f24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f252:	e016      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f254:	2308      	movs	r3, #8
 800f256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f25a:	e012      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f25c:	2310      	movs	r3, #16
 800f25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f262:	e00e      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f264:	2320      	movs	r3, #32
 800f266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f26a:	e00a      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f26c:	2340      	movs	r3, #64	@ 0x40
 800f26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f272:	e006      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f274:	2380      	movs	r3, #128	@ 0x80
 800f276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f27a:	e002      	b.n	800f282 <UART_SetConfig+0x5a6>
 800f27c:	2380      	movs	r3, #128	@ 0x80
 800f27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	4a3f      	ldr	r2, [pc, #252]	@ (800f384 <UART_SetConfig+0x6a8>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	f040 80f8 	bne.w	800f47e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f28e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f292:	2b20      	cmp	r3, #32
 800f294:	dc46      	bgt.n	800f324 <UART_SetConfig+0x648>
 800f296:	2b02      	cmp	r3, #2
 800f298:	f2c0 8082 	blt.w	800f3a0 <UART_SetConfig+0x6c4>
 800f29c:	3b02      	subs	r3, #2
 800f29e:	2b1e      	cmp	r3, #30
 800f2a0:	d87e      	bhi.n	800f3a0 <UART_SetConfig+0x6c4>
 800f2a2:	a201      	add	r2, pc, #4	@ (adr r2, 800f2a8 <UART_SetConfig+0x5cc>)
 800f2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2a8:	0800f32b 	.word	0x0800f32b
 800f2ac:	0800f3a1 	.word	0x0800f3a1
 800f2b0:	0800f333 	.word	0x0800f333
 800f2b4:	0800f3a1 	.word	0x0800f3a1
 800f2b8:	0800f3a1 	.word	0x0800f3a1
 800f2bc:	0800f3a1 	.word	0x0800f3a1
 800f2c0:	0800f343 	.word	0x0800f343
 800f2c4:	0800f3a1 	.word	0x0800f3a1
 800f2c8:	0800f3a1 	.word	0x0800f3a1
 800f2cc:	0800f3a1 	.word	0x0800f3a1
 800f2d0:	0800f3a1 	.word	0x0800f3a1
 800f2d4:	0800f3a1 	.word	0x0800f3a1
 800f2d8:	0800f3a1 	.word	0x0800f3a1
 800f2dc:	0800f3a1 	.word	0x0800f3a1
 800f2e0:	0800f353 	.word	0x0800f353
 800f2e4:	0800f3a1 	.word	0x0800f3a1
 800f2e8:	0800f3a1 	.word	0x0800f3a1
 800f2ec:	0800f3a1 	.word	0x0800f3a1
 800f2f0:	0800f3a1 	.word	0x0800f3a1
 800f2f4:	0800f3a1 	.word	0x0800f3a1
 800f2f8:	0800f3a1 	.word	0x0800f3a1
 800f2fc:	0800f3a1 	.word	0x0800f3a1
 800f300:	0800f3a1 	.word	0x0800f3a1
 800f304:	0800f3a1 	.word	0x0800f3a1
 800f308:	0800f3a1 	.word	0x0800f3a1
 800f30c:	0800f3a1 	.word	0x0800f3a1
 800f310:	0800f3a1 	.word	0x0800f3a1
 800f314:	0800f3a1 	.word	0x0800f3a1
 800f318:	0800f3a1 	.word	0x0800f3a1
 800f31c:	0800f3a1 	.word	0x0800f3a1
 800f320:	0800f393 	.word	0x0800f393
 800f324:	2b40      	cmp	r3, #64	@ 0x40
 800f326:	d037      	beq.n	800f398 <UART_SetConfig+0x6bc>
 800f328:	e03a      	b.n	800f3a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f32a:	f7fc fc43 	bl	800bbb4 <HAL_RCCEx_GetD3PCLK1Freq>
 800f32e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f330:	e03c      	b.n	800f3ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f336:	4618      	mov	r0, r3
 800f338:	f7fc fc52 	bl	800bbe0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f340:	e034      	b.n	800f3ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f342:	f107 0318 	add.w	r3, r7, #24
 800f346:	4618      	mov	r0, r3
 800f348:	f7fc fd9e 	bl	800be88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f350:	e02c      	b.n	800f3ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f352:	4b09      	ldr	r3, [pc, #36]	@ (800f378 <UART_SetConfig+0x69c>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f003 0320 	and.w	r3, r3, #32
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d016      	beq.n	800f38c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f35e:	4b06      	ldr	r3, [pc, #24]	@ (800f378 <UART_SetConfig+0x69c>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	08db      	lsrs	r3, r3, #3
 800f364:	f003 0303 	and.w	r3, r3, #3
 800f368:	4a07      	ldr	r2, [pc, #28]	@ (800f388 <UART_SetConfig+0x6ac>)
 800f36a:	fa22 f303 	lsr.w	r3, r2, r3
 800f36e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f370:	e01c      	b.n	800f3ac <UART_SetConfig+0x6d0>
 800f372:	bf00      	nop
 800f374:	40011400 	.word	0x40011400
 800f378:	58024400 	.word	0x58024400
 800f37c:	40007800 	.word	0x40007800
 800f380:	40007c00 	.word	0x40007c00
 800f384:	58000c00 	.word	0x58000c00
 800f388:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f38c:	4b9d      	ldr	r3, [pc, #628]	@ (800f604 <UART_SetConfig+0x928>)
 800f38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f390:	e00c      	b.n	800f3ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f392:	4b9d      	ldr	r3, [pc, #628]	@ (800f608 <UART_SetConfig+0x92c>)
 800f394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f396:	e009      	b.n	800f3ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f398:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f39e:	e005      	b.n	800f3ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f3aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f3ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	f000 81de 	beq.w	800f770 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3b8:	4a94      	ldr	r2, [pc, #592]	@ (800f60c <UART_SetConfig+0x930>)
 800f3ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3be:	461a      	mov	r2, r3
 800f3c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3c6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	685a      	ldr	r2, [r3, #4]
 800f3cc:	4613      	mov	r3, r2
 800f3ce:	005b      	lsls	r3, r3, #1
 800f3d0:	4413      	add	r3, r2
 800f3d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d305      	bcc.n	800f3e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f3de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d903      	bls.n	800f3ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f3ea:	e1c1      	b.n	800f770 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	60bb      	str	r3, [r7, #8]
 800f3f2:	60fa      	str	r2, [r7, #12]
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3f8:	4a84      	ldr	r2, [pc, #528]	@ (800f60c <UART_SetConfig+0x930>)
 800f3fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	2200      	movs	r2, #0
 800f402:	603b      	str	r3, [r7, #0]
 800f404:	607a      	str	r2, [r7, #4]
 800f406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f40a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f40e:	f7f0 ffbf 	bl	8000390 <__aeabi_uldivmod>
 800f412:	4602      	mov	r2, r0
 800f414:	460b      	mov	r3, r1
 800f416:	4610      	mov	r0, r2
 800f418:	4619      	mov	r1, r3
 800f41a:	f04f 0200 	mov.w	r2, #0
 800f41e:	f04f 0300 	mov.w	r3, #0
 800f422:	020b      	lsls	r3, r1, #8
 800f424:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f428:	0202      	lsls	r2, r0, #8
 800f42a:	6979      	ldr	r1, [r7, #20]
 800f42c:	6849      	ldr	r1, [r1, #4]
 800f42e:	0849      	lsrs	r1, r1, #1
 800f430:	2000      	movs	r0, #0
 800f432:	460c      	mov	r4, r1
 800f434:	4605      	mov	r5, r0
 800f436:	eb12 0804 	adds.w	r8, r2, r4
 800f43a:	eb43 0905 	adc.w	r9, r3, r5
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	469a      	mov	sl, r3
 800f446:	4693      	mov	fp, r2
 800f448:	4652      	mov	r2, sl
 800f44a:	465b      	mov	r3, fp
 800f44c:	4640      	mov	r0, r8
 800f44e:	4649      	mov	r1, r9
 800f450:	f7f0 ff9e 	bl	8000390 <__aeabi_uldivmod>
 800f454:	4602      	mov	r2, r0
 800f456:	460b      	mov	r3, r1
 800f458:	4613      	mov	r3, r2
 800f45a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f45e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f462:	d308      	bcc.n	800f476 <UART_SetConfig+0x79a>
 800f464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f466:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f46a:	d204      	bcs.n	800f476 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f472:	60da      	str	r2, [r3, #12]
 800f474:	e17c      	b.n	800f770 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f476:	2301      	movs	r3, #1
 800f478:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f47c:	e178      	b.n	800f770 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	69db      	ldr	r3, [r3, #28]
 800f482:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f486:	f040 80c5 	bne.w	800f614 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f48a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f48e:	2b20      	cmp	r3, #32
 800f490:	dc48      	bgt.n	800f524 <UART_SetConfig+0x848>
 800f492:	2b00      	cmp	r3, #0
 800f494:	db7b      	blt.n	800f58e <UART_SetConfig+0x8b2>
 800f496:	2b20      	cmp	r3, #32
 800f498:	d879      	bhi.n	800f58e <UART_SetConfig+0x8b2>
 800f49a:	a201      	add	r2, pc, #4	@ (adr r2, 800f4a0 <UART_SetConfig+0x7c4>)
 800f49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4a0:	0800f52b 	.word	0x0800f52b
 800f4a4:	0800f533 	.word	0x0800f533
 800f4a8:	0800f58f 	.word	0x0800f58f
 800f4ac:	0800f58f 	.word	0x0800f58f
 800f4b0:	0800f53b 	.word	0x0800f53b
 800f4b4:	0800f58f 	.word	0x0800f58f
 800f4b8:	0800f58f 	.word	0x0800f58f
 800f4bc:	0800f58f 	.word	0x0800f58f
 800f4c0:	0800f54b 	.word	0x0800f54b
 800f4c4:	0800f58f 	.word	0x0800f58f
 800f4c8:	0800f58f 	.word	0x0800f58f
 800f4cc:	0800f58f 	.word	0x0800f58f
 800f4d0:	0800f58f 	.word	0x0800f58f
 800f4d4:	0800f58f 	.word	0x0800f58f
 800f4d8:	0800f58f 	.word	0x0800f58f
 800f4dc:	0800f58f 	.word	0x0800f58f
 800f4e0:	0800f55b 	.word	0x0800f55b
 800f4e4:	0800f58f 	.word	0x0800f58f
 800f4e8:	0800f58f 	.word	0x0800f58f
 800f4ec:	0800f58f 	.word	0x0800f58f
 800f4f0:	0800f58f 	.word	0x0800f58f
 800f4f4:	0800f58f 	.word	0x0800f58f
 800f4f8:	0800f58f 	.word	0x0800f58f
 800f4fc:	0800f58f 	.word	0x0800f58f
 800f500:	0800f58f 	.word	0x0800f58f
 800f504:	0800f58f 	.word	0x0800f58f
 800f508:	0800f58f 	.word	0x0800f58f
 800f50c:	0800f58f 	.word	0x0800f58f
 800f510:	0800f58f 	.word	0x0800f58f
 800f514:	0800f58f 	.word	0x0800f58f
 800f518:	0800f58f 	.word	0x0800f58f
 800f51c:	0800f58f 	.word	0x0800f58f
 800f520:	0800f581 	.word	0x0800f581
 800f524:	2b40      	cmp	r3, #64	@ 0x40
 800f526:	d02e      	beq.n	800f586 <UART_SetConfig+0x8aa>
 800f528:	e031      	b.n	800f58e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f52a:	f7fb f90d 	bl	800a748 <HAL_RCC_GetPCLK1Freq>
 800f52e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f530:	e033      	b.n	800f59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f532:	f7fb f91f 	bl	800a774 <HAL_RCC_GetPCLK2Freq>
 800f536:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f538:	e02f      	b.n	800f59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f53a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fc fb4e 	bl	800bbe0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f548:	e027      	b.n	800f59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f54a:	f107 0318 	add.w	r3, r7, #24
 800f54e:	4618      	mov	r0, r3
 800f550:	f7fc fc9a 	bl	800be88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f554:	69fb      	ldr	r3, [r7, #28]
 800f556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f558:	e01f      	b.n	800f59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f55a:	4b2d      	ldr	r3, [pc, #180]	@ (800f610 <UART_SetConfig+0x934>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	f003 0320 	and.w	r3, r3, #32
 800f562:	2b00      	cmp	r3, #0
 800f564:	d009      	beq.n	800f57a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f566:	4b2a      	ldr	r3, [pc, #168]	@ (800f610 <UART_SetConfig+0x934>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	08db      	lsrs	r3, r3, #3
 800f56c:	f003 0303 	and.w	r3, r3, #3
 800f570:	4a24      	ldr	r2, [pc, #144]	@ (800f604 <UART_SetConfig+0x928>)
 800f572:	fa22 f303 	lsr.w	r3, r2, r3
 800f576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f578:	e00f      	b.n	800f59a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f57a:	4b22      	ldr	r3, [pc, #136]	@ (800f604 <UART_SetConfig+0x928>)
 800f57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f57e:	e00c      	b.n	800f59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f580:	4b21      	ldr	r3, [pc, #132]	@ (800f608 <UART_SetConfig+0x92c>)
 800f582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f584:	e009      	b.n	800f59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f58c:	e005      	b.n	800f59a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f58e:	2300      	movs	r3, #0
 800f590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f592:	2301      	movs	r3, #1
 800f594:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f598:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f000 80e7 	beq.w	800f770 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5a6:	4a19      	ldr	r2, [pc, #100]	@ (800f60c <UART_SetConfig+0x930>)
 800f5a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5b4:	005a      	lsls	r2, r3, #1
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	085b      	lsrs	r3, r3, #1
 800f5bc:	441a      	add	r2, r3
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ca:	2b0f      	cmp	r3, #15
 800f5cc:	d916      	bls.n	800f5fc <UART_SetConfig+0x920>
 800f5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f5d4:	d212      	bcs.n	800f5fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d8:	b29b      	uxth	r3, r3
 800f5da:	f023 030f 	bic.w	r3, r3, #15
 800f5de:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e2:	085b      	lsrs	r3, r3, #1
 800f5e4:	b29b      	uxth	r3, r3
 800f5e6:	f003 0307 	and.w	r3, r3, #7
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f5f8:	60da      	str	r2, [r3, #12]
 800f5fa:	e0b9      	b.n	800f770 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f602:	e0b5      	b.n	800f770 <UART_SetConfig+0xa94>
 800f604:	03d09000 	.word	0x03d09000
 800f608:	003d0900 	.word	0x003d0900
 800f60c:	0801702c 	.word	0x0801702c
 800f610:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f614:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f618:	2b20      	cmp	r3, #32
 800f61a:	dc49      	bgt.n	800f6b0 <UART_SetConfig+0x9d4>
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	db7c      	blt.n	800f71a <UART_SetConfig+0xa3e>
 800f620:	2b20      	cmp	r3, #32
 800f622:	d87a      	bhi.n	800f71a <UART_SetConfig+0xa3e>
 800f624:	a201      	add	r2, pc, #4	@ (adr r2, 800f62c <UART_SetConfig+0x950>)
 800f626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f62a:	bf00      	nop
 800f62c:	0800f6b7 	.word	0x0800f6b7
 800f630:	0800f6bf 	.word	0x0800f6bf
 800f634:	0800f71b 	.word	0x0800f71b
 800f638:	0800f71b 	.word	0x0800f71b
 800f63c:	0800f6c7 	.word	0x0800f6c7
 800f640:	0800f71b 	.word	0x0800f71b
 800f644:	0800f71b 	.word	0x0800f71b
 800f648:	0800f71b 	.word	0x0800f71b
 800f64c:	0800f6d7 	.word	0x0800f6d7
 800f650:	0800f71b 	.word	0x0800f71b
 800f654:	0800f71b 	.word	0x0800f71b
 800f658:	0800f71b 	.word	0x0800f71b
 800f65c:	0800f71b 	.word	0x0800f71b
 800f660:	0800f71b 	.word	0x0800f71b
 800f664:	0800f71b 	.word	0x0800f71b
 800f668:	0800f71b 	.word	0x0800f71b
 800f66c:	0800f6e7 	.word	0x0800f6e7
 800f670:	0800f71b 	.word	0x0800f71b
 800f674:	0800f71b 	.word	0x0800f71b
 800f678:	0800f71b 	.word	0x0800f71b
 800f67c:	0800f71b 	.word	0x0800f71b
 800f680:	0800f71b 	.word	0x0800f71b
 800f684:	0800f71b 	.word	0x0800f71b
 800f688:	0800f71b 	.word	0x0800f71b
 800f68c:	0800f71b 	.word	0x0800f71b
 800f690:	0800f71b 	.word	0x0800f71b
 800f694:	0800f71b 	.word	0x0800f71b
 800f698:	0800f71b 	.word	0x0800f71b
 800f69c:	0800f71b 	.word	0x0800f71b
 800f6a0:	0800f71b 	.word	0x0800f71b
 800f6a4:	0800f71b 	.word	0x0800f71b
 800f6a8:	0800f71b 	.word	0x0800f71b
 800f6ac:	0800f70d 	.word	0x0800f70d
 800f6b0:	2b40      	cmp	r3, #64	@ 0x40
 800f6b2:	d02e      	beq.n	800f712 <UART_SetConfig+0xa36>
 800f6b4:	e031      	b.n	800f71a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f6b6:	f7fb f847 	bl	800a748 <HAL_RCC_GetPCLK1Freq>
 800f6ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f6bc:	e033      	b.n	800f726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f6be:	f7fb f859 	bl	800a774 <HAL_RCC_GetPCLK2Freq>
 800f6c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f6c4:	e02f      	b.n	800f726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fc fa88 	bl	800bbe0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6d4:	e027      	b.n	800f726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6d6:	f107 0318 	add.w	r3, r7, #24
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7fc fbd4 	bl	800be88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6e4:	e01f      	b.n	800f726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6e6:	4b2d      	ldr	r3, [pc, #180]	@ (800f79c <UART_SetConfig+0xac0>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f003 0320 	and.w	r3, r3, #32
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d009      	beq.n	800f706 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f6f2:	4b2a      	ldr	r3, [pc, #168]	@ (800f79c <UART_SetConfig+0xac0>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	08db      	lsrs	r3, r3, #3
 800f6f8:	f003 0303 	and.w	r3, r3, #3
 800f6fc:	4a28      	ldr	r2, [pc, #160]	@ (800f7a0 <UART_SetConfig+0xac4>)
 800f6fe:	fa22 f303 	lsr.w	r3, r2, r3
 800f702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f704:	e00f      	b.n	800f726 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f706:	4b26      	ldr	r3, [pc, #152]	@ (800f7a0 <UART_SetConfig+0xac4>)
 800f708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f70a:	e00c      	b.n	800f726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f70c:	4b25      	ldr	r3, [pc, #148]	@ (800f7a4 <UART_SetConfig+0xac8>)
 800f70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f710:	e009      	b.n	800f726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f718:	e005      	b.n	800f726 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f71a:	2300      	movs	r3, #0
 800f71c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f71e:	2301      	movs	r3, #1
 800f720:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f724:	bf00      	nop
    }

    if (pclk != 0U)
 800f726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d021      	beq.n	800f770 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f730:	4a1d      	ldr	r2, [pc, #116]	@ (800f7a8 <UART_SetConfig+0xacc>)
 800f732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f736:	461a      	mov	r2, r3
 800f738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f73a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	085b      	lsrs	r3, r3, #1
 800f744:	441a      	add	r2, r3
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f74e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f752:	2b0f      	cmp	r3, #15
 800f754:	d909      	bls.n	800f76a <UART_SetConfig+0xa8e>
 800f756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f75c:	d205      	bcs.n	800f76a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f760:	b29a      	uxth	r2, r3
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	60da      	str	r2, [r3, #12]
 800f768:	e002      	b.n	800f770 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f76a:	2301      	movs	r3, #1
 800f76c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	2201      	movs	r2, #1
 800f774:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	2201      	movs	r2, #1
 800f77c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	2200      	movs	r2, #0
 800f784:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	2200      	movs	r2, #0
 800f78a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f78c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f790:	4618      	mov	r0, r3
 800f792:	3748      	adds	r7, #72	@ 0x48
 800f794:	46bd      	mov	sp, r7
 800f796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f79a:	bf00      	nop
 800f79c:	58024400 	.word	0x58024400
 800f7a0:	03d09000 	.word	0x03d09000
 800f7a4:	003d0900 	.word	0x003d0900
 800f7a8:	0801702c 	.word	0x0801702c

0800f7ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b083      	sub	sp, #12
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7b8:	f003 0308 	and.w	r3, r3, #8
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d00a      	beq.n	800f7d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	430a      	orrs	r2, r1
 800f7d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7da:	f003 0301 	and.w	r3, r3, #1
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d00a      	beq.n	800f7f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	430a      	orrs	r2, r1
 800f7f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7fc:	f003 0302 	and.w	r3, r3, #2
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00a      	beq.n	800f81a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	430a      	orrs	r2, r1
 800f818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f81e:	f003 0304 	and.w	r3, r3, #4
 800f822:	2b00      	cmp	r3, #0
 800f824:	d00a      	beq.n	800f83c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	430a      	orrs	r2, r1
 800f83a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f840:	f003 0310 	and.w	r3, r3, #16
 800f844:	2b00      	cmp	r3, #0
 800f846:	d00a      	beq.n	800f85e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	689b      	ldr	r3, [r3, #8]
 800f84e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	430a      	orrs	r2, r1
 800f85c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f862:	f003 0320 	and.w	r3, r3, #32
 800f866:	2b00      	cmp	r3, #0
 800f868:	d00a      	beq.n	800f880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	689b      	ldr	r3, [r3, #8]
 800f870:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	430a      	orrs	r2, r1
 800f87e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d01a      	beq.n	800f8c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	430a      	orrs	r2, r1
 800f8a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f8aa:	d10a      	bne.n	800f8c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	430a      	orrs	r2, r1
 800f8c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00a      	beq.n	800f8e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	685b      	ldr	r3, [r3, #4]
 800f8d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	430a      	orrs	r2, r1
 800f8e2:	605a      	str	r2, [r3, #4]
  }
}
 800f8e4:	bf00      	nop
 800f8e6:	370c      	adds	r7, #12
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr

0800f8f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b098      	sub	sp, #96	@ 0x60
 800f8f4:	af02      	add	r7, sp, #8
 800f8f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f900:	f7f2 fe4c 	bl	800259c <HAL_GetTick>
 800f904:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f003 0308 	and.w	r3, r3, #8
 800f910:	2b08      	cmp	r3, #8
 800f912:	d12f      	bne.n	800f974 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f914:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f918:	9300      	str	r3, [sp, #0]
 800f91a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f91c:	2200      	movs	r2, #0
 800f91e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f000 f88e 	bl	800fa44 <UART_WaitOnFlagUntilTimeout>
 800f928:	4603      	mov	r3, r0
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d022      	beq.n	800f974 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f936:	e853 3f00 	ldrex	r3, [r3]
 800f93a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f93c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f93e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f942:	653b      	str	r3, [r7, #80]	@ 0x50
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	461a      	mov	r2, r3
 800f94a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f94c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f94e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f950:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f954:	e841 2300 	strex	r3, r2, [r1]
 800f958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f95a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d1e6      	bne.n	800f92e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2220      	movs	r2, #32
 800f964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2200      	movs	r2, #0
 800f96c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f970:	2303      	movs	r3, #3
 800f972:	e063      	b.n	800fa3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f003 0304 	and.w	r3, r3, #4
 800f97e:	2b04      	cmp	r3, #4
 800f980:	d149      	bne.n	800fa16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f982:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f986:	9300      	str	r3, [sp, #0]
 800f988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f98a:	2200      	movs	r2, #0
 800f98c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f000 f857 	bl	800fa44 <UART_WaitOnFlagUntilTimeout>
 800f996:	4603      	mov	r3, r0
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d03c      	beq.n	800fa16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9a4:	e853 3f00 	ldrex	r3, [r3]
 800f9a8:	623b      	str	r3, [r7, #32]
   return(result);
 800f9aa:	6a3b      	ldr	r3, [r7, #32]
 800f9ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f9b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800f9bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f9c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f9c2:	e841 2300 	strex	r3, r2, [r1]
 800f9c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d1e6      	bne.n	800f99c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	3308      	adds	r3, #8
 800f9d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9d6:	693b      	ldr	r3, [r7, #16]
 800f9d8:	e853 3f00 	ldrex	r3, [r3]
 800f9dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f023 0301 	bic.w	r3, r3, #1
 800f9e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	3308      	adds	r3, #8
 800f9ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f9ee:	61fa      	str	r2, [r7, #28]
 800f9f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9f2:	69b9      	ldr	r1, [r7, #24]
 800f9f4:	69fa      	ldr	r2, [r7, #28]
 800f9f6:	e841 2300 	strex	r3, r2, [r1]
 800f9fa:	617b      	str	r3, [r7, #20]
   return(result);
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d1e5      	bne.n	800f9ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2220      	movs	r2, #32
 800fa06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa12:	2303      	movs	r3, #3
 800fa14:	e012      	b.n	800fa3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2220      	movs	r2, #32
 800fa1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2220      	movs	r2, #32
 800fa22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2200      	movs	r2, #0
 800fa36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa3a:	2300      	movs	r3, #0
}
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3758      	adds	r7, #88	@ 0x58
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}

0800fa44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b084      	sub	sp, #16
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	60f8      	str	r0, [r7, #12]
 800fa4c:	60b9      	str	r1, [r7, #8]
 800fa4e:	603b      	str	r3, [r7, #0]
 800fa50:	4613      	mov	r3, r2
 800fa52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa54:	e04f      	b.n	800faf6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fa56:	69bb      	ldr	r3, [r7, #24]
 800fa58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa5c:	d04b      	beq.n	800faf6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fa5e:	f7f2 fd9d 	bl	800259c <HAL_GetTick>
 800fa62:	4602      	mov	r2, r0
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	1ad3      	subs	r3, r2, r3
 800fa68:	69ba      	ldr	r2, [r7, #24]
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d302      	bcc.n	800fa74 <UART_WaitOnFlagUntilTimeout+0x30>
 800fa6e:	69bb      	ldr	r3, [r7, #24]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d101      	bne.n	800fa78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fa74:	2303      	movs	r3, #3
 800fa76:	e04e      	b.n	800fb16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	f003 0304 	and.w	r3, r3, #4
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d037      	beq.n	800faf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	2b80      	cmp	r3, #128	@ 0x80
 800fa8a:	d034      	beq.n	800faf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	2b40      	cmp	r3, #64	@ 0x40
 800fa90:	d031      	beq.n	800faf6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	69db      	ldr	r3, [r3, #28]
 800fa98:	f003 0308 	and.w	r3, r3, #8
 800fa9c:	2b08      	cmp	r3, #8
 800fa9e:	d110      	bne.n	800fac2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	2208      	movs	r2, #8
 800faa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800faa8:	68f8      	ldr	r0, [r7, #12]
 800faaa:	f000 f839 	bl	800fb20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2208      	movs	r2, #8
 800fab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2200      	movs	r2, #0
 800faba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fabe:	2301      	movs	r3, #1
 800fac0:	e029      	b.n	800fb16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	69db      	ldr	r3, [r3, #28]
 800fac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800facc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fad0:	d111      	bne.n	800faf6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fadc:	68f8      	ldr	r0, [r7, #12]
 800fade:	f000 f81f 	bl	800fb20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2220      	movs	r2, #32
 800fae6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	2200      	movs	r2, #0
 800faee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800faf2:	2303      	movs	r3, #3
 800faf4:	e00f      	b.n	800fb16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	69da      	ldr	r2, [r3, #28]
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	4013      	ands	r3, r2
 800fb00:	68ba      	ldr	r2, [r7, #8]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	bf0c      	ite	eq
 800fb06:	2301      	moveq	r3, #1
 800fb08:	2300      	movne	r3, #0
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	79fb      	ldrb	r3, [r7, #7]
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d0a0      	beq.n	800fa56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fb14:	2300      	movs	r3, #0
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3710      	adds	r7, #16
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
	...

0800fb20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fb20:	b480      	push	{r7}
 800fb22:	b095      	sub	sp, #84	@ 0x54
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb30:	e853 3f00 	ldrex	r3, [r3]
 800fb34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fb36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fb3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	461a      	mov	r2, r3
 800fb44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb46:	643b      	str	r3, [r7, #64]	@ 0x40
 800fb48:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fb4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fb4e:	e841 2300 	strex	r3, r2, [r1]
 800fb52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d1e6      	bne.n	800fb28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	3308      	adds	r3, #8
 800fb60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb62:	6a3b      	ldr	r3, [r7, #32]
 800fb64:	e853 3f00 	ldrex	r3, [r3]
 800fb68:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb6a:	69fa      	ldr	r2, [r7, #28]
 800fb6c:	4b1e      	ldr	r3, [pc, #120]	@ (800fbe8 <UART_EndRxTransfer+0xc8>)
 800fb6e:	4013      	ands	r3, r2
 800fb70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	3308      	adds	r3, #8
 800fb78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fb7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fb7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb82:	e841 2300 	strex	r3, r2, [r1]
 800fb86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d1e5      	bne.n	800fb5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	d118      	bne.n	800fbc8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	e853 3f00 	ldrex	r3, [r3]
 800fba2:	60bb      	str	r3, [r7, #8]
   return(result);
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	f023 0310 	bic.w	r3, r3, #16
 800fbaa:	647b      	str	r3, [r7, #68]	@ 0x44
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fbb4:	61bb      	str	r3, [r7, #24]
 800fbb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb8:	6979      	ldr	r1, [r7, #20]
 800fbba:	69ba      	ldr	r2, [r7, #24]
 800fbbc:	e841 2300 	strex	r3, r2, [r1]
 800fbc0:	613b      	str	r3, [r7, #16]
   return(result);
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d1e6      	bne.n	800fb96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2220      	movs	r2, #32
 800fbcc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fbdc:	bf00      	nop
 800fbde:	3754      	adds	r7, #84	@ 0x54
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe6:	4770      	bx	lr
 800fbe8:	effffffe 	.word	0xeffffffe

0800fbec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fc02:	68f8      	ldr	r0, [r7, #12]
 800fc04:	f7ff f854 	bl	800ecb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc08:	bf00      	nop
 800fc0a:	3710      	adds	r7, #16
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b088      	sub	sp, #32
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	e853 3f00 	ldrex	r3, [r3]
 800fc24:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fc2c:	61fb      	str	r3, [r7, #28]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	461a      	mov	r2, r3
 800fc34:	69fb      	ldr	r3, [r7, #28]
 800fc36:	61bb      	str	r3, [r7, #24]
 800fc38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc3a:	6979      	ldr	r1, [r7, #20]
 800fc3c:	69ba      	ldr	r2, [r7, #24]
 800fc3e:	e841 2300 	strex	r3, r2, [r1]
 800fc42:	613b      	str	r3, [r7, #16]
   return(result);
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d1e6      	bne.n	800fc18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2220      	movs	r2, #32
 800fc4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2200      	movs	r2, #0
 800fc56:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f7ff f81f 	bl	800ec9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc5e:	bf00      	nop
 800fc60:	3720      	adds	r7, #32
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}

0800fc66 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fc66:	b480      	push	{r7}
 800fc68:	b083      	sub	sp, #12
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fc6e:	bf00      	nop
 800fc70:	370c      	adds	r7, #12
 800fc72:	46bd      	mov	sp, r7
 800fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc78:	4770      	bx	lr

0800fc7a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fc7a:	b480      	push	{r7}
 800fc7c:	b083      	sub	sp, #12
 800fc7e:	af00      	add	r7, sp, #0
 800fc80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fc82:	bf00      	nop
 800fc84:	370c      	adds	r7, #12
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr

0800fc8e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fc8e:	b480      	push	{r7}
 800fc90:	b083      	sub	sp, #12
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fc96:	bf00      	nop
 800fc98:	370c      	adds	r7, #12
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca0:	4770      	bx	lr

0800fca2 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b084      	sub	sp, #16
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d101      	bne.n	800fcb8 <HAL_UARTEx_EnableFifoMode+0x16>
 800fcb4:	2302      	movs	r3, #2
 800fcb6:	e02b      	b.n	800fd10 <HAL_UARTEx_EnableFifoMode+0x6e>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2201      	movs	r2, #1
 800fcbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2224      	movs	r2, #36	@ 0x24
 800fcc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	681a      	ldr	r2, [r3, #0]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	f022 0201 	bic.w	r2, r2, #1
 800fcde:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fce6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800fcee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	68fa      	ldr	r2, [r7, #12]
 800fcf6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f000 f889 	bl	800fe10 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2220      	movs	r2, #32
 800fd02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2200      	movs	r2, #0
 800fd0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd0e:	2300      	movs	r3, #0
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3710      	adds	r7, #16
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b084      	sub	sp, #16
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	d101      	bne.n	800fd30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fd2c:	2302      	movs	r3, #2
 800fd2e:	e02d      	b.n	800fd8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2201      	movs	r2, #1
 800fd34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2224      	movs	r2, #36	@ 0x24
 800fd3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f022 0201 	bic.w	r2, r2, #1
 800fd56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	689b      	ldr	r3, [r3, #8]
 800fd5e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	683a      	ldr	r2, [r7, #0]
 800fd68:	430a      	orrs	r2, r1
 800fd6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 f84f 	bl	800fe10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2220      	movs	r2, #32
 800fd7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2200      	movs	r2, #0
 800fd86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd8a:	2300      	movs	r3, #0
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3710      	adds	r7, #16
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d101      	bne.n	800fdac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fda8:	2302      	movs	r3, #2
 800fdaa:	e02d      	b.n	800fe08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2201      	movs	r2, #1
 800fdb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2224      	movs	r2, #36	@ 0x24
 800fdb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	681a      	ldr	r2, [r3, #0]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f022 0201 	bic.w	r2, r2, #1
 800fdd2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	689b      	ldr	r3, [r3, #8]
 800fdda:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	683a      	ldr	r2, [r7, #0]
 800fde4:	430a      	orrs	r2, r1
 800fde6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f000 f811 	bl	800fe10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	68fa      	ldr	r2, [r7, #12]
 800fdf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2220      	movs	r2, #32
 800fdfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2200      	movs	r2, #0
 800fe02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fe06:	2300      	movs	r3, #0
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3710      	adds	r7, #16
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b085      	sub	sp, #20
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d108      	bne.n	800fe32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2201      	movs	r2, #1
 800fe24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2201      	movs	r2, #1
 800fe2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fe30:	e031      	b.n	800fe96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fe32:	2310      	movs	r3, #16
 800fe34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fe36:	2310      	movs	r3, #16
 800fe38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	689b      	ldr	r3, [r3, #8]
 800fe40:	0e5b      	lsrs	r3, r3, #25
 800fe42:	b2db      	uxtb	r3, r3
 800fe44:	f003 0307 	and.w	r3, r3, #7
 800fe48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	689b      	ldr	r3, [r3, #8]
 800fe50:	0f5b      	lsrs	r3, r3, #29
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	f003 0307 	and.w	r3, r3, #7
 800fe58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fe5a:	7bbb      	ldrb	r3, [r7, #14]
 800fe5c:	7b3a      	ldrb	r2, [r7, #12]
 800fe5e:	4911      	ldr	r1, [pc, #68]	@ (800fea4 <UARTEx_SetNbDataToProcess+0x94>)
 800fe60:	5c8a      	ldrb	r2, [r1, r2]
 800fe62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fe66:	7b3a      	ldrb	r2, [r7, #12]
 800fe68:	490f      	ldr	r1, [pc, #60]	@ (800fea8 <UARTEx_SetNbDataToProcess+0x98>)
 800fe6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fe6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe70:	b29a      	uxth	r2, r3
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fe78:	7bfb      	ldrb	r3, [r7, #15]
 800fe7a:	7b7a      	ldrb	r2, [r7, #13]
 800fe7c:	4909      	ldr	r1, [pc, #36]	@ (800fea4 <UARTEx_SetNbDataToProcess+0x94>)
 800fe7e:	5c8a      	ldrb	r2, [r1, r2]
 800fe80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fe84:	7b7a      	ldrb	r2, [r7, #13]
 800fe86:	4908      	ldr	r1, [pc, #32]	@ (800fea8 <UARTEx_SetNbDataToProcess+0x98>)
 800fe88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fe8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe8e:	b29a      	uxth	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fe96:	bf00      	nop
 800fe98:	3714      	adds	r7, #20
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea0:	4770      	bx	lr
 800fea2:	bf00      	nop
 800fea4:	08017044 	.word	0x08017044
 800fea8:	0801704c 	.word	0x0801704c

0800feac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800feac:	b084      	sub	sp, #16
 800feae:	b580      	push	{r7, lr}
 800feb0:	b084      	sub	sp, #16
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	6078      	str	r0, [r7, #4]
 800feb6:	f107 001c 	add.w	r0, r7, #28
 800feba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800febe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d121      	bne.n	800ff0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	68da      	ldr	r2, [r3, #12]
 800fed6:	4b2c      	ldr	r3, [pc, #176]	@ (800ff88 <USB_CoreInit+0xdc>)
 800fed8:	4013      	ands	r3, r2
 800feda:	687a      	ldr	r2, [r7, #4]
 800fedc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	68db      	ldr	r3, [r3, #12]
 800fee2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800feea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800feee:	2b01      	cmp	r3, #1
 800fef0:	d105      	bne.n	800fefe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	68db      	ldr	r3, [r3, #12]
 800fef6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f001 fafa 	bl	80114f8 <USB_CoreReset>
 800ff04:	4603      	mov	r3, r0
 800ff06:	73fb      	strb	r3, [r7, #15]
 800ff08:	e01b      	b.n	800ff42 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	68db      	ldr	r3, [r3, #12]
 800ff0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f001 faee 	bl	80114f8 <USB_CoreReset>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ff20:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d106      	bne.n	800ff36 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	639a      	str	r2, [r3, #56]	@ 0x38
 800ff34:	e005      	b.n	800ff42 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff3a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ff42:	7fbb      	ldrb	r3, [r7, #30]
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d116      	bne.n	800ff76 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ff4c:	b29a      	uxth	r2, r3
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ff56:	4b0d      	ldr	r3, [pc, #52]	@ (800ff8c <USB_CoreInit+0xe0>)
 800ff58:	4313      	orrs	r3, r2
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	689b      	ldr	r3, [r3, #8]
 800ff62:	f043 0206 	orr.w	r2, r3, #6
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	689b      	ldr	r3, [r3, #8]
 800ff6e:	f043 0220 	orr.w	r2, r3, #32
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ff76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3710      	adds	r7, #16
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ff82:	b004      	add	sp, #16
 800ff84:	4770      	bx	lr
 800ff86:	bf00      	nop
 800ff88:	ffbdffbf 	.word	0xffbdffbf
 800ff8c:	03ee0000 	.word	0x03ee0000

0800ff90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ff90:	b480      	push	{r7}
 800ff92:	b087      	sub	sp, #28
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	60f8      	str	r0, [r7, #12]
 800ff98:	60b9      	str	r1, [r7, #8]
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ff9e:	79fb      	ldrb	r3, [r7, #7]
 800ffa0:	2b02      	cmp	r3, #2
 800ffa2:	d165      	bne.n	8010070 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	4a41      	ldr	r2, [pc, #260]	@ (80100ac <USB_SetTurnaroundTime+0x11c>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d906      	bls.n	800ffba <USB_SetTurnaroundTime+0x2a>
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	4a40      	ldr	r2, [pc, #256]	@ (80100b0 <USB_SetTurnaroundTime+0x120>)
 800ffb0:	4293      	cmp	r3, r2
 800ffb2:	d202      	bcs.n	800ffba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ffb4:	230f      	movs	r3, #15
 800ffb6:	617b      	str	r3, [r7, #20]
 800ffb8:	e062      	b.n	8010080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	4a3c      	ldr	r2, [pc, #240]	@ (80100b0 <USB_SetTurnaroundTime+0x120>)
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	d306      	bcc.n	800ffd0 <USB_SetTurnaroundTime+0x40>
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	4a3b      	ldr	r2, [pc, #236]	@ (80100b4 <USB_SetTurnaroundTime+0x124>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d202      	bcs.n	800ffd0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ffca:	230e      	movs	r3, #14
 800ffcc:	617b      	str	r3, [r7, #20]
 800ffce:	e057      	b.n	8010080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	4a38      	ldr	r2, [pc, #224]	@ (80100b4 <USB_SetTurnaroundTime+0x124>)
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	d306      	bcc.n	800ffe6 <USB_SetTurnaroundTime+0x56>
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	4a37      	ldr	r2, [pc, #220]	@ (80100b8 <USB_SetTurnaroundTime+0x128>)
 800ffdc:	4293      	cmp	r3, r2
 800ffde:	d202      	bcs.n	800ffe6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ffe0:	230d      	movs	r3, #13
 800ffe2:	617b      	str	r3, [r7, #20]
 800ffe4:	e04c      	b.n	8010080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	4a33      	ldr	r2, [pc, #204]	@ (80100b8 <USB_SetTurnaroundTime+0x128>)
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d306      	bcc.n	800fffc <USB_SetTurnaroundTime+0x6c>
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	4a32      	ldr	r2, [pc, #200]	@ (80100bc <USB_SetTurnaroundTime+0x12c>)
 800fff2:	4293      	cmp	r3, r2
 800fff4:	d802      	bhi.n	800fffc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fff6:	230c      	movs	r3, #12
 800fff8:	617b      	str	r3, [r7, #20]
 800fffa:	e041      	b.n	8010080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	4a2f      	ldr	r2, [pc, #188]	@ (80100bc <USB_SetTurnaroundTime+0x12c>)
 8010000:	4293      	cmp	r3, r2
 8010002:	d906      	bls.n	8010012 <USB_SetTurnaroundTime+0x82>
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	4a2e      	ldr	r2, [pc, #184]	@ (80100c0 <USB_SetTurnaroundTime+0x130>)
 8010008:	4293      	cmp	r3, r2
 801000a:	d802      	bhi.n	8010012 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801000c:	230b      	movs	r3, #11
 801000e:	617b      	str	r3, [r7, #20]
 8010010:	e036      	b.n	8010080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	4a2a      	ldr	r2, [pc, #168]	@ (80100c0 <USB_SetTurnaroundTime+0x130>)
 8010016:	4293      	cmp	r3, r2
 8010018:	d906      	bls.n	8010028 <USB_SetTurnaroundTime+0x98>
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	4a29      	ldr	r2, [pc, #164]	@ (80100c4 <USB_SetTurnaroundTime+0x134>)
 801001e:	4293      	cmp	r3, r2
 8010020:	d802      	bhi.n	8010028 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010022:	230a      	movs	r3, #10
 8010024:	617b      	str	r3, [r7, #20]
 8010026:	e02b      	b.n	8010080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	4a26      	ldr	r2, [pc, #152]	@ (80100c4 <USB_SetTurnaroundTime+0x134>)
 801002c:	4293      	cmp	r3, r2
 801002e:	d906      	bls.n	801003e <USB_SetTurnaroundTime+0xae>
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	4a25      	ldr	r2, [pc, #148]	@ (80100c8 <USB_SetTurnaroundTime+0x138>)
 8010034:	4293      	cmp	r3, r2
 8010036:	d202      	bcs.n	801003e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010038:	2309      	movs	r3, #9
 801003a:	617b      	str	r3, [r7, #20]
 801003c:	e020      	b.n	8010080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	4a21      	ldr	r2, [pc, #132]	@ (80100c8 <USB_SetTurnaroundTime+0x138>)
 8010042:	4293      	cmp	r3, r2
 8010044:	d306      	bcc.n	8010054 <USB_SetTurnaroundTime+0xc4>
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	4a20      	ldr	r2, [pc, #128]	@ (80100cc <USB_SetTurnaroundTime+0x13c>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d802      	bhi.n	8010054 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801004e:	2308      	movs	r3, #8
 8010050:	617b      	str	r3, [r7, #20]
 8010052:	e015      	b.n	8010080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	4a1d      	ldr	r2, [pc, #116]	@ (80100cc <USB_SetTurnaroundTime+0x13c>)
 8010058:	4293      	cmp	r3, r2
 801005a:	d906      	bls.n	801006a <USB_SetTurnaroundTime+0xda>
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	4a1c      	ldr	r2, [pc, #112]	@ (80100d0 <USB_SetTurnaroundTime+0x140>)
 8010060:	4293      	cmp	r3, r2
 8010062:	d202      	bcs.n	801006a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010064:	2307      	movs	r3, #7
 8010066:	617b      	str	r3, [r7, #20]
 8010068:	e00a      	b.n	8010080 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801006a:	2306      	movs	r3, #6
 801006c:	617b      	str	r3, [r7, #20]
 801006e:	e007      	b.n	8010080 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010070:	79fb      	ldrb	r3, [r7, #7]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d102      	bne.n	801007c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010076:	2309      	movs	r3, #9
 8010078:	617b      	str	r3, [r7, #20]
 801007a:	e001      	b.n	8010080 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801007c:	2309      	movs	r3, #9
 801007e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	68db      	ldr	r3, [r3, #12]
 8010084:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	68da      	ldr	r2, [r3, #12]
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	029b      	lsls	r3, r3, #10
 8010094:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8010098:	431a      	orrs	r2, r3
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801009e:	2300      	movs	r3, #0
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	371c      	adds	r7, #28
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr
 80100ac:	00d8acbf 	.word	0x00d8acbf
 80100b0:	00e4e1c0 	.word	0x00e4e1c0
 80100b4:	00f42400 	.word	0x00f42400
 80100b8:	01067380 	.word	0x01067380
 80100bc:	011a499f 	.word	0x011a499f
 80100c0:	01312cff 	.word	0x01312cff
 80100c4:	014ca43f 	.word	0x014ca43f
 80100c8:	016e3600 	.word	0x016e3600
 80100cc:	01a6ab1f 	.word	0x01a6ab1f
 80100d0:	01e84800 	.word	0x01e84800

080100d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80100d4:	b480      	push	{r7}
 80100d6:	b083      	sub	sp, #12
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	689b      	ldr	r3, [r3, #8]
 80100e0:	f043 0201 	orr.w	r2, r3, #1
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80100e8:	2300      	movs	r3, #0
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	370c      	adds	r7, #12
 80100ee:	46bd      	mov	sp, r7
 80100f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f4:	4770      	bx	lr

080100f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80100f6:	b480      	push	{r7}
 80100f8:	b083      	sub	sp, #12
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	689b      	ldr	r3, [r3, #8]
 8010102:	f023 0201 	bic.w	r2, r3, #1
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801010a:	2300      	movs	r3, #0
}
 801010c:	4618      	mov	r0, r3
 801010e:	370c      	adds	r7, #12
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr

08010118 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	460b      	mov	r3, r1
 8010122:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010124:	2300      	movs	r3, #0
 8010126:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	68db      	ldr	r3, [r3, #12]
 801012c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010134:	78fb      	ldrb	r3, [r7, #3]
 8010136:	2b01      	cmp	r3, #1
 8010138:	d115      	bne.n	8010166 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	68db      	ldr	r3, [r3, #12]
 801013e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010146:	200a      	movs	r0, #10
 8010148:	f7f2 fa34 	bl	80025b4 <HAL_Delay>
      ms += 10U;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	330a      	adds	r3, #10
 8010150:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f001 f93f 	bl	80113d6 <USB_GetMode>
 8010158:	4603      	mov	r3, r0
 801015a:	2b01      	cmp	r3, #1
 801015c:	d01e      	beq.n	801019c <USB_SetCurrentMode+0x84>
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	2bc7      	cmp	r3, #199	@ 0xc7
 8010162:	d9f0      	bls.n	8010146 <USB_SetCurrentMode+0x2e>
 8010164:	e01a      	b.n	801019c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010166:	78fb      	ldrb	r3, [r7, #3]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d115      	bne.n	8010198 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	68db      	ldr	r3, [r3, #12]
 8010170:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010178:	200a      	movs	r0, #10
 801017a:	f7f2 fa1b 	bl	80025b4 <HAL_Delay>
      ms += 10U;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	330a      	adds	r3, #10
 8010182:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f001 f926 	bl	80113d6 <USB_GetMode>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d005      	beq.n	801019c <USB_SetCurrentMode+0x84>
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2bc7      	cmp	r3, #199	@ 0xc7
 8010194:	d9f0      	bls.n	8010178 <USB_SetCurrentMode+0x60>
 8010196:	e001      	b.n	801019c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010198:	2301      	movs	r3, #1
 801019a:	e005      	b.n	80101a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	2bc8      	cmp	r3, #200	@ 0xc8
 80101a0:	d101      	bne.n	80101a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80101a2:	2301      	movs	r3, #1
 80101a4:	e000      	b.n	80101a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80101a6:	2300      	movs	r3, #0
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3710      	adds	r7, #16
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80101b0:	b084      	sub	sp, #16
 80101b2:	b580      	push	{r7, lr}
 80101b4:	b086      	sub	sp, #24
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	6078      	str	r0, [r7, #4]
 80101ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80101be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80101c2:	2300      	movs	r3, #0
 80101c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80101ca:	2300      	movs	r3, #0
 80101cc:	613b      	str	r3, [r7, #16]
 80101ce:	e009      	b.n	80101e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80101d0:	687a      	ldr	r2, [r7, #4]
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	3340      	adds	r3, #64	@ 0x40
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	4413      	add	r3, r2
 80101da:	2200      	movs	r2, #0
 80101dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	3301      	adds	r3, #1
 80101e2:	613b      	str	r3, [r7, #16]
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	2b0e      	cmp	r3, #14
 80101e8:	d9f2      	bls.n	80101d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80101ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d11c      	bne.n	801022c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010200:	f043 0302 	orr.w	r3, r3, #2
 8010204:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801020a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	601a      	str	r2, [r3, #0]
 801022a:	e005      	b.n	8010238 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010230:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801023e:	461a      	mov	r2, r3
 8010240:	2300      	movs	r3, #0
 8010242:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010244:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010248:	2b01      	cmp	r3, #1
 801024a:	d10d      	bne.n	8010268 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801024c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010250:	2b00      	cmp	r3, #0
 8010252:	d104      	bne.n	801025e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010254:	2100      	movs	r1, #0
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f000 f968 	bl	801052c <USB_SetDevSpeed>
 801025c:	e008      	b.n	8010270 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801025e:	2101      	movs	r1, #1
 8010260:	6878      	ldr	r0, [r7, #4]
 8010262:	f000 f963 	bl	801052c <USB_SetDevSpeed>
 8010266:	e003      	b.n	8010270 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010268:	2103      	movs	r1, #3
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f000 f95e 	bl	801052c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010270:	2110      	movs	r1, #16
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f000 f8fa 	bl	801046c <USB_FlushTxFifo>
 8010278:	4603      	mov	r3, r0
 801027a:	2b00      	cmp	r3, #0
 801027c:	d001      	beq.n	8010282 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801027e:	2301      	movs	r3, #1
 8010280:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f000 f924 	bl	80104d0 <USB_FlushRxFifo>
 8010288:	4603      	mov	r3, r0
 801028a:	2b00      	cmp	r3, #0
 801028c:	d001      	beq.n	8010292 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801028e:	2301      	movs	r3, #1
 8010290:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010298:	461a      	mov	r2, r3
 801029a:	2300      	movs	r3, #0
 801029c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80102a4:	461a      	mov	r2, r3
 80102a6:	2300      	movs	r3, #0
 80102a8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80102b0:	461a      	mov	r2, r3
 80102b2:	2300      	movs	r3, #0
 80102b4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80102b6:	2300      	movs	r3, #0
 80102b8:	613b      	str	r3, [r7, #16]
 80102ba:	e043      	b.n	8010344 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	015a      	lsls	r2, r3, #5
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	4413      	add	r3, r2
 80102c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80102ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80102d2:	d118      	bne.n	8010306 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d10a      	bne.n	80102f0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	015a      	lsls	r2, r3, #5
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	4413      	add	r3, r2
 80102e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102e6:	461a      	mov	r2, r3
 80102e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80102ec:	6013      	str	r3, [r2, #0]
 80102ee:	e013      	b.n	8010318 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	015a      	lsls	r2, r3, #5
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	4413      	add	r3, r2
 80102f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102fc:	461a      	mov	r2, r3
 80102fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010302:	6013      	str	r3, [r2, #0]
 8010304:	e008      	b.n	8010318 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	015a      	lsls	r2, r3, #5
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	4413      	add	r3, r2
 801030e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010312:	461a      	mov	r2, r3
 8010314:	2300      	movs	r3, #0
 8010316:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	015a      	lsls	r2, r3, #5
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	4413      	add	r3, r2
 8010320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010324:	461a      	mov	r2, r3
 8010326:	2300      	movs	r3, #0
 8010328:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	015a      	lsls	r2, r3, #5
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	4413      	add	r3, r2
 8010332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010336:	461a      	mov	r2, r3
 8010338:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801033c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	3301      	adds	r3, #1
 8010342:	613b      	str	r3, [r7, #16]
 8010344:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010348:	461a      	mov	r2, r3
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	4293      	cmp	r3, r2
 801034e:	d3b5      	bcc.n	80102bc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010350:	2300      	movs	r3, #0
 8010352:	613b      	str	r3, [r7, #16]
 8010354:	e043      	b.n	80103de <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	015a      	lsls	r2, r3, #5
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	4413      	add	r3, r2
 801035e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010368:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801036c:	d118      	bne.n	80103a0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d10a      	bne.n	801038a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	015a      	lsls	r2, r3, #5
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	4413      	add	r3, r2
 801037c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010380:	461a      	mov	r2, r3
 8010382:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010386:	6013      	str	r3, [r2, #0]
 8010388:	e013      	b.n	80103b2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	015a      	lsls	r2, r3, #5
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	4413      	add	r3, r2
 8010392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010396:	461a      	mov	r2, r3
 8010398:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801039c:	6013      	str	r3, [r2, #0]
 801039e:	e008      	b.n	80103b2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	015a      	lsls	r2, r3, #5
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	4413      	add	r3, r2
 80103a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103ac:	461a      	mov	r2, r3
 80103ae:	2300      	movs	r3, #0
 80103b0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	015a      	lsls	r2, r3, #5
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	4413      	add	r3, r2
 80103ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103be:	461a      	mov	r2, r3
 80103c0:	2300      	movs	r3, #0
 80103c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	015a      	lsls	r2, r3, #5
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	4413      	add	r3, r2
 80103cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103d0:	461a      	mov	r2, r3
 80103d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80103d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	3301      	adds	r3, #1
 80103dc:	613b      	str	r3, [r7, #16]
 80103de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80103e2:	461a      	mov	r2, r3
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d3b5      	bcc.n	8010356 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80103f0:	691b      	ldr	r3, [r3, #16]
 80103f2:	68fa      	ldr	r2, [r7, #12]
 80103f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80103f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80103fc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2200      	movs	r2, #0
 8010402:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801040a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801040c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010410:	2b00      	cmp	r3, #0
 8010412:	d105      	bne.n	8010420 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	699b      	ldr	r3, [r3, #24]
 8010418:	f043 0210 	orr.w	r2, r3, #16
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	699a      	ldr	r2, [r3, #24]
 8010424:	4b0f      	ldr	r3, [pc, #60]	@ (8010464 <USB_DevInit+0x2b4>)
 8010426:	4313      	orrs	r3, r2
 8010428:	687a      	ldr	r2, [r7, #4]
 801042a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801042c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010430:	2b00      	cmp	r3, #0
 8010432:	d005      	beq.n	8010440 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	699b      	ldr	r3, [r3, #24]
 8010438:	f043 0208 	orr.w	r2, r3, #8
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010440:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010444:	2b01      	cmp	r3, #1
 8010446:	d105      	bne.n	8010454 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	699a      	ldr	r2, [r3, #24]
 801044c:	4b06      	ldr	r3, [pc, #24]	@ (8010468 <USB_DevInit+0x2b8>)
 801044e:	4313      	orrs	r3, r2
 8010450:	687a      	ldr	r2, [r7, #4]
 8010452:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010454:	7dfb      	ldrb	r3, [r7, #23]
}
 8010456:	4618      	mov	r0, r3
 8010458:	3718      	adds	r7, #24
 801045a:	46bd      	mov	sp, r7
 801045c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010460:	b004      	add	sp, #16
 8010462:	4770      	bx	lr
 8010464:	803c3800 	.word	0x803c3800
 8010468:	40000004 	.word	0x40000004

0801046c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801046c:	b480      	push	{r7}
 801046e:	b085      	sub	sp, #20
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010476:	2300      	movs	r3, #0
 8010478:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	3301      	adds	r3, #1
 801047e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010486:	d901      	bls.n	801048c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010488:	2303      	movs	r3, #3
 801048a:	e01b      	b.n	80104c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	691b      	ldr	r3, [r3, #16]
 8010490:	2b00      	cmp	r3, #0
 8010492:	daf2      	bge.n	801047a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010494:	2300      	movs	r3, #0
 8010496:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	019b      	lsls	r3, r3, #6
 801049c:	f043 0220 	orr.w	r2, r3, #32
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	3301      	adds	r3, #1
 80104a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80104b0:	d901      	bls.n	80104b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80104b2:	2303      	movs	r3, #3
 80104b4:	e006      	b.n	80104c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	691b      	ldr	r3, [r3, #16]
 80104ba:	f003 0320 	and.w	r3, r3, #32
 80104be:	2b20      	cmp	r3, #32
 80104c0:	d0f0      	beq.n	80104a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80104c2:	2300      	movs	r3, #0
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3714      	adds	r7, #20
 80104c8:	46bd      	mov	sp, r7
 80104ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ce:	4770      	bx	lr

080104d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80104d0:	b480      	push	{r7}
 80104d2:	b085      	sub	sp, #20
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80104d8:	2300      	movs	r3, #0
 80104da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	3301      	adds	r3, #1
 80104e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80104e8:	d901      	bls.n	80104ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80104ea:	2303      	movs	r3, #3
 80104ec:	e018      	b.n	8010520 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	691b      	ldr	r3, [r3, #16]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	daf2      	bge.n	80104dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80104f6:	2300      	movs	r3, #0
 80104f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2210      	movs	r2, #16
 80104fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	3301      	adds	r3, #1
 8010504:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801050c:	d901      	bls.n	8010512 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801050e:	2303      	movs	r3, #3
 8010510:	e006      	b.n	8010520 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	691b      	ldr	r3, [r3, #16]
 8010516:	f003 0310 	and.w	r3, r3, #16
 801051a:	2b10      	cmp	r3, #16
 801051c:	d0f0      	beq.n	8010500 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801051e:	2300      	movs	r3, #0
}
 8010520:	4618      	mov	r0, r3
 8010522:	3714      	adds	r7, #20
 8010524:	46bd      	mov	sp, r7
 8010526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052a:	4770      	bx	lr

0801052c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801052c:	b480      	push	{r7}
 801052e:	b085      	sub	sp, #20
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	460b      	mov	r3, r1
 8010536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010542:	681a      	ldr	r2, [r3, #0]
 8010544:	78fb      	ldrb	r3, [r7, #3]
 8010546:	68f9      	ldr	r1, [r7, #12]
 8010548:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801054c:	4313      	orrs	r3, r2
 801054e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010550:	2300      	movs	r3, #0
}
 8010552:	4618      	mov	r0, r3
 8010554:	3714      	adds	r7, #20
 8010556:	46bd      	mov	sp, r7
 8010558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055c:	4770      	bx	lr

0801055e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801055e:	b480      	push	{r7}
 8010560:	b087      	sub	sp, #28
 8010562:	af00      	add	r7, sp, #0
 8010564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801056a:	693b      	ldr	r3, [r7, #16]
 801056c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010570:	689b      	ldr	r3, [r3, #8]
 8010572:	f003 0306 	and.w	r3, r3, #6
 8010576:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d102      	bne.n	8010584 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801057e:	2300      	movs	r3, #0
 8010580:	75fb      	strb	r3, [r7, #23]
 8010582:	e00a      	b.n	801059a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	2b02      	cmp	r3, #2
 8010588:	d002      	beq.n	8010590 <USB_GetDevSpeed+0x32>
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	2b06      	cmp	r3, #6
 801058e:	d102      	bne.n	8010596 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010590:	2302      	movs	r3, #2
 8010592:	75fb      	strb	r3, [r7, #23]
 8010594:	e001      	b.n	801059a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010596:	230f      	movs	r3, #15
 8010598:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801059a:	7dfb      	ldrb	r3, [r7, #23]
}
 801059c:	4618      	mov	r0, r3
 801059e:	371c      	adds	r7, #28
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr

080105a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80105a8:	b480      	push	{r7}
 80105aa:	b085      	sub	sp, #20
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	785b      	ldrb	r3, [r3, #1]
 80105c0:	2b01      	cmp	r3, #1
 80105c2:	d139      	bne.n	8010638 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80105ca:	69da      	ldr	r2, [r3, #28]
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	f003 030f 	and.w	r3, r3, #15
 80105d4:	2101      	movs	r1, #1
 80105d6:	fa01 f303 	lsl.w	r3, r1, r3
 80105da:	b29b      	uxth	r3, r3
 80105dc:	68f9      	ldr	r1, [r7, #12]
 80105de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80105e2:	4313      	orrs	r3, r2
 80105e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	015a      	lsls	r2, r3, #5
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	4413      	add	r3, r2
 80105ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d153      	bne.n	80106a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	015a      	lsls	r2, r3, #5
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	4413      	add	r3, r2
 8010604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010608:	681a      	ldr	r2, [r3, #0]
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	689b      	ldr	r3, [r3, #8]
 801060e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	791b      	ldrb	r3, [r3, #4]
 8010616:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010618:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	059b      	lsls	r3, r3, #22
 801061e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010620:	431a      	orrs	r2, r3
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	0159      	lsls	r1, r3, #5
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	440b      	add	r3, r1
 801062a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801062e:	4619      	mov	r1, r3
 8010630:	4b20      	ldr	r3, [pc, #128]	@ (80106b4 <USB_ActivateEndpoint+0x10c>)
 8010632:	4313      	orrs	r3, r2
 8010634:	600b      	str	r3, [r1, #0]
 8010636:	e035      	b.n	80106a4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801063e:	69da      	ldr	r2, [r3, #28]
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	f003 030f 	and.w	r3, r3, #15
 8010648:	2101      	movs	r1, #1
 801064a:	fa01 f303 	lsl.w	r3, r1, r3
 801064e:	041b      	lsls	r3, r3, #16
 8010650:	68f9      	ldr	r1, [r7, #12]
 8010652:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010656:	4313      	orrs	r3, r2
 8010658:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	015a      	lsls	r2, r3, #5
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	4413      	add	r3, r2
 8010662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801066c:	2b00      	cmp	r3, #0
 801066e:	d119      	bne.n	80106a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	015a      	lsls	r2, r3, #5
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	4413      	add	r3, r2
 8010678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801067c:	681a      	ldr	r2, [r3, #0]
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	689b      	ldr	r3, [r3, #8]
 8010682:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	791b      	ldrb	r3, [r3, #4]
 801068a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801068c:	430b      	orrs	r3, r1
 801068e:	431a      	orrs	r2, r3
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	0159      	lsls	r1, r3, #5
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	440b      	add	r3, r1
 8010698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801069c:	4619      	mov	r1, r3
 801069e:	4b05      	ldr	r3, [pc, #20]	@ (80106b4 <USB_ActivateEndpoint+0x10c>)
 80106a0:	4313      	orrs	r3, r2
 80106a2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80106a4:	2300      	movs	r3, #0
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3714      	adds	r7, #20
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop
 80106b4:	10008000 	.word	0x10008000

080106b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b085      	sub	sp, #20
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	785b      	ldrb	r3, [r3, #1]
 80106d0:	2b01      	cmp	r3, #1
 80106d2:	d161      	bne.n	8010798 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	015a      	lsls	r2, r3, #5
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	4413      	add	r3, r2
 80106dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80106e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80106ea:	d11f      	bne.n	801072c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	015a      	lsls	r2, r3, #5
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	4413      	add	r3, r2
 80106f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	68ba      	ldr	r2, [r7, #8]
 80106fc:	0151      	lsls	r1, r2, #5
 80106fe:	68fa      	ldr	r2, [r7, #12]
 8010700:	440a      	add	r2, r1
 8010702:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010706:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801070a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	015a      	lsls	r2, r3, #5
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	4413      	add	r3, r2
 8010714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	68ba      	ldr	r2, [r7, #8]
 801071c:	0151      	lsls	r1, r2, #5
 801071e:	68fa      	ldr	r2, [r7, #12]
 8010720:	440a      	add	r2, r1
 8010722:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010726:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801072a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010732:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	781b      	ldrb	r3, [r3, #0]
 8010738:	f003 030f 	and.w	r3, r3, #15
 801073c:	2101      	movs	r1, #1
 801073e:	fa01 f303 	lsl.w	r3, r1, r3
 8010742:	b29b      	uxth	r3, r3
 8010744:	43db      	mvns	r3, r3
 8010746:	68f9      	ldr	r1, [r7, #12]
 8010748:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801074c:	4013      	ands	r3, r2
 801074e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010756:	69da      	ldr	r2, [r3, #28]
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	f003 030f 	and.w	r3, r3, #15
 8010760:	2101      	movs	r1, #1
 8010762:	fa01 f303 	lsl.w	r3, r1, r3
 8010766:	b29b      	uxth	r3, r3
 8010768:	43db      	mvns	r3, r3
 801076a:	68f9      	ldr	r1, [r7, #12]
 801076c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010770:	4013      	ands	r3, r2
 8010772:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	015a      	lsls	r2, r3, #5
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	4413      	add	r3, r2
 801077c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	0159      	lsls	r1, r3, #5
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	440b      	add	r3, r1
 801078a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801078e:	4619      	mov	r1, r3
 8010790:	4b35      	ldr	r3, [pc, #212]	@ (8010868 <USB_DeactivateEndpoint+0x1b0>)
 8010792:	4013      	ands	r3, r2
 8010794:	600b      	str	r3, [r1, #0]
 8010796:	e060      	b.n	801085a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	015a      	lsls	r2, r3, #5
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	4413      	add	r3, r2
 80107a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80107aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80107ae:	d11f      	bne.n	80107f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	015a      	lsls	r2, r3, #5
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	4413      	add	r3, r2
 80107b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	68ba      	ldr	r2, [r7, #8]
 80107c0:	0151      	lsls	r1, r2, #5
 80107c2:	68fa      	ldr	r2, [r7, #12]
 80107c4:	440a      	add	r2, r1
 80107c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80107ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80107ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	015a      	lsls	r2, r3, #5
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	4413      	add	r3, r2
 80107d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	68ba      	ldr	r2, [r7, #8]
 80107e0:	0151      	lsls	r1, r2, #5
 80107e2:	68fa      	ldr	r2, [r7, #12]
 80107e4:	440a      	add	r2, r1
 80107e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80107ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80107ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	f003 030f 	and.w	r3, r3, #15
 8010800:	2101      	movs	r1, #1
 8010802:	fa01 f303 	lsl.w	r3, r1, r3
 8010806:	041b      	lsls	r3, r3, #16
 8010808:	43db      	mvns	r3, r3
 801080a:	68f9      	ldr	r1, [r7, #12]
 801080c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010810:	4013      	ands	r3, r2
 8010812:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801081a:	69da      	ldr	r2, [r3, #28]
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	781b      	ldrb	r3, [r3, #0]
 8010820:	f003 030f 	and.w	r3, r3, #15
 8010824:	2101      	movs	r1, #1
 8010826:	fa01 f303 	lsl.w	r3, r1, r3
 801082a:	041b      	lsls	r3, r3, #16
 801082c:	43db      	mvns	r3, r3
 801082e:	68f9      	ldr	r1, [r7, #12]
 8010830:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010834:	4013      	ands	r3, r2
 8010836:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	015a      	lsls	r2, r3, #5
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	4413      	add	r3, r2
 8010840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	0159      	lsls	r1, r3, #5
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	440b      	add	r3, r1
 801084e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010852:	4619      	mov	r1, r3
 8010854:	4b05      	ldr	r3, [pc, #20]	@ (801086c <USB_DeactivateEndpoint+0x1b4>)
 8010856:	4013      	ands	r3, r2
 8010858:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801085a:	2300      	movs	r3, #0
}
 801085c:	4618      	mov	r0, r3
 801085e:	3714      	adds	r7, #20
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr
 8010868:	ec337800 	.word	0xec337800
 801086c:	eff37800 	.word	0xeff37800

08010870 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b08a      	sub	sp, #40	@ 0x28
 8010874:	af02      	add	r7, sp, #8
 8010876:	60f8      	str	r0, [r7, #12]
 8010878:	60b9      	str	r1, [r7, #8]
 801087a:	4613      	mov	r3, r2
 801087c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	785b      	ldrb	r3, [r3, #1]
 801088c:	2b01      	cmp	r3, #1
 801088e:	f040 8185 	bne.w	8010b9c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	691b      	ldr	r3, [r3, #16]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d132      	bne.n	8010900 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801089a:	69bb      	ldr	r3, [r7, #24]
 801089c:	015a      	lsls	r2, r3, #5
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	4413      	add	r3, r2
 80108a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108a6:	691a      	ldr	r2, [r3, #16]
 80108a8:	69bb      	ldr	r3, [r7, #24]
 80108aa:	0159      	lsls	r1, r3, #5
 80108ac:	69fb      	ldr	r3, [r7, #28]
 80108ae:	440b      	add	r3, r1
 80108b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108b4:	4619      	mov	r1, r3
 80108b6:	4ba7      	ldr	r3, [pc, #668]	@ (8010b54 <USB_EPStartXfer+0x2e4>)
 80108b8:	4013      	ands	r3, r2
 80108ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80108bc:	69bb      	ldr	r3, [r7, #24]
 80108be:	015a      	lsls	r2, r3, #5
 80108c0:	69fb      	ldr	r3, [r7, #28]
 80108c2:	4413      	add	r3, r2
 80108c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108c8:	691b      	ldr	r3, [r3, #16]
 80108ca:	69ba      	ldr	r2, [r7, #24]
 80108cc:	0151      	lsls	r1, r2, #5
 80108ce:	69fa      	ldr	r2, [r7, #28]
 80108d0:	440a      	add	r2, r1
 80108d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80108d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80108da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80108dc:	69bb      	ldr	r3, [r7, #24]
 80108de:	015a      	lsls	r2, r3, #5
 80108e0:	69fb      	ldr	r3, [r7, #28]
 80108e2:	4413      	add	r3, r2
 80108e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108e8:	691a      	ldr	r2, [r3, #16]
 80108ea:	69bb      	ldr	r3, [r7, #24]
 80108ec:	0159      	lsls	r1, r3, #5
 80108ee:	69fb      	ldr	r3, [r7, #28]
 80108f0:	440b      	add	r3, r1
 80108f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108f6:	4619      	mov	r1, r3
 80108f8:	4b97      	ldr	r3, [pc, #604]	@ (8010b58 <USB_EPStartXfer+0x2e8>)
 80108fa:	4013      	ands	r3, r2
 80108fc:	610b      	str	r3, [r1, #16]
 80108fe:	e097      	b.n	8010a30 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010900:	69bb      	ldr	r3, [r7, #24]
 8010902:	015a      	lsls	r2, r3, #5
 8010904:	69fb      	ldr	r3, [r7, #28]
 8010906:	4413      	add	r3, r2
 8010908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801090c:	691a      	ldr	r2, [r3, #16]
 801090e:	69bb      	ldr	r3, [r7, #24]
 8010910:	0159      	lsls	r1, r3, #5
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	440b      	add	r3, r1
 8010916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801091a:	4619      	mov	r1, r3
 801091c:	4b8e      	ldr	r3, [pc, #568]	@ (8010b58 <USB_EPStartXfer+0x2e8>)
 801091e:	4013      	ands	r3, r2
 8010920:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010922:	69bb      	ldr	r3, [r7, #24]
 8010924:	015a      	lsls	r2, r3, #5
 8010926:	69fb      	ldr	r3, [r7, #28]
 8010928:	4413      	add	r3, r2
 801092a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801092e:	691a      	ldr	r2, [r3, #16]
 8010930:	69bb      	ldr	r3, [r7, #24]
 8010932:	0159      	lsls	r1, r3, #5
 8010934:	69fb      	ldr	r3, [r7, #28]
 8010936:	440b      	add	r3, r1
 8010938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801093c:	4619      	mov	r1, r3
 801093e:	4b85      	ldr	r3, [pc, #532]	@ (8010b54 <USB_EPStartXfer+0x2e4>)
 8010940:	4013      	ands	r3, r2
 8010942:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8010944:	69bb      	ldr	r3, [r7, #24]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d11a      	bne.n	8010980 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	691a      	ldr	r2, [r3, #16]
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	689b      	ldr	r3, [r3, #8]
 8010952:	429a      	cmp	r2, r3
 8010954:	d903      	bls.n	801095e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	689a      	ldr	r2, [r3, #8]
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801095e:	69bb      	ldr	r3, [r7, #24]
 8010960:	015a      	lsls	r2, r3, #5
 8010962:	69fb      	ldr	r3, [r7, #28]
 8010964:	4413      	add	r3, r2
 8010966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801096a:	691b      	ldr	r3, [r3, #16]
 801096c:	69ba      	ldr	r2, [r7, #24]
 801096e:	0151      	lsls	r1, r2, #5
 8010970:	69fa      	ldr	r2, [r7, #28]
 8010972:	440a      	add	r2, r1
 8010974:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010978:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801097c:	6113      	str	r3, [r2, #16]
 801097e:	e044      	b.n	8010a0a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	691a      	ldr	r2, [r3, #16]
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	689b      	ldr	r3, [r3, #8]
 8010988:	4413      	add	r3, r2
 801098a:	1e5a      	subs	r2, r3, #1
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	689b      	ldr	r3, [r3, #8]
 8010990:	fbb2 f3f3 	udiv	r3, r2, r3
 8010994:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8010996:	69bb      	ldr	r3, [r7, #24]
 8010998:	015a      	lsls	r2, r3, #5
 801099a:	69fb      	ldr	r3, [r7, #28]
 801099c:	4413      	add	r3, r2
 801099e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109a2:	691a      	ldr	r2, [r3, #16]
 80109a4:	8afb      	ldrh	r3, [r7, #22]
 80109a6:	04d9      	lsls	r1, r3, #19
 80109a8:	4b6c      	ldr	r3, [pc, #432]	@ (8010b5c <USB_EPStartXfer+0x2ec>)
 80109aa:	400b      	ands	r3, r1
 80109ac:	69b9      	ldr	r1, [r7, #24]
 80109ae:	0148      	lsls	r0, r1, #5
 80109b0:	69f9      	ldr	r1, [r7, #28]
 80109b2:	4401      	add	r1, r0
 80109b4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80109b8:	4313      	orrs	r3, r2
 80109ba:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	791b      	ldrb	r3, [r3, #4]
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d122      	bne.n	8010a0a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80109c4:	69bb      	ldr	r3, [r7, #24]
 80109c6:	015a      	lsls	r2, r3, #5
 80109c8:	69fb      	ldr	r3, [r7, #28]
 80109ca:	4413      	add	r3, r2
 80109cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109d0:	691b      	ldr	r3, [r3, #16]
 80109d2:	69ba      	ldr	r2, [r7, #24]
 80109d4:	0151      	lsls	r1, r2, #5
 80109d6:	69fa      	ldr	r2, [r7, #28]
 80109d8:	440a      	add	r2, r1
 80109da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80109de:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80109e2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80109e4:	69bb      	ldr	r3, [r7, #24]
 80109e6:	015a      	lsls	r2, r3, #5
 80109e8:	69fb      	ldr	r3, [r7, #28]
 80109ea:	4413      	add	r3, r2
 80109ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109f0:	691a      	ldr	r2, [r3, #16]
 80109f2:	8afb      	ldrh	r3, [r7, #22]
 80109f4:	075b      	lsls	r3, r3, #29
 80109f6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80109fa:	69b9      	ldr	r1, [r7, #24]
 80109fc:	0148      	lsls	r0, r1, #5
 80109fe:	69f9      	ldr	r1, [r7, #28]
 8010a00:	4401      	add	r1, r0
 8010a02:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010a06:	4313      	orrs	r3, r2
 8010a08:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010a0a:	69bb      	ldr	r3, [r7, #24]
 8010a0c:	015a      	lsls	r2, r3, #5
 8010a0e:	69fb      	ldr	r3, [r7, #28]
 8010a10:	4413      	add	r3, r2
 8010a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a16:	691a      	ldr	r2, [r3, #16]
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	691b      	ldr	r3, [r3, #16]
 8010a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010a20:	69b9      	ldr	r1, [r7, #24]
 8010a22:	0148      	lsls	r0, r1, #5
 8010a24:	69f9      	ldr	r1, [r7, #28]
 8010a26:	4401      	add	r1, r0
 8010a28:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010a2c:	4313      	orrs	r3, r2
 8010a2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010a30:	79fb      	ldrb	r3, [r7, #7]
 8010a32:	2b01      	cmp	r3, #1
 8010a34:	d14b      	bne.n	8010ace <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	69db      	ldr	r3, [r3, #28]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d009      	beq.n	8010a52 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010a3e:	69bb      	ldr	r3, [r7, #24]
 8010a40:	015a      	lsls	r2, r3, #5
 8010a42:	69fb      	ldr	r3, [r7, #28]
 8010a44:	4413      	add	r3, r2
 8010a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a4a:	461a      	mov	r2, r3
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	69db      	ldr	r3, [r3, #28]
 8010a50:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	791b      	ldrb	r3, [r3, #4]
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	d128      	bne.n	8010aac <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010a5a:	69fb      	ldr	r3, [r7, #28]
 8010a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a60:	689b      	ldr	r3, [r3, #8]
 8010a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d110      	bne.n	8010a8c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	015a      	lsls	r2, r3, #5
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	4413      	add	r3, r2
 8010a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	69ba      	ldr	r2, [r7, #24]
 8010a7a:	0151      	lsls	r1, r2, #5
 8010a7c:	69fa      	ldr	r2, [r7, #28]
 8010a7e:	440a      	add	r2, r1
 8010a80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010a84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010a88:	6013      	str	r3, [r2, #0]
 8010a8a:	e00f      	b.n	8010aac <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010a8c:	69bb      	ldr	r3, [r7, #24]
 8010a8e:	015a      	lsls	r2, r3, #5
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	4413      	add	r3, r2
 8010a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	69ba      	ldr	r2, [r7, #24]
 8010a9c:	0151      	lsls	r1, r2, #5
 8010a9e:	69fa      	ldr	r2, [r7, #28]
 8010aa0:	440a      	add	r2, r1
 8010aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010aaa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010aac:	69bb      	ldr	r3, [r7, #24]
 8010aae:	015a      	lsls	r2, r3, #5
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	4413      	add	r3, r2
 8010ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	69ba      	ldr	r2, [r7, #24]
 8010abc:	0151      	lsls	r1, r2, #5
 8010abe:	69fa      	ldr	r2, [r7, #28]
 8010ac0:	440a      	add	r2, r1
 8010ac2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ac6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010aca:	6013      	str	r3, [r2, #0]
 8010acc:	e169      	b.n	8010da2 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010ace:	69bb      	ldr	r3, [r7, #24]
 8010ad0:	015a      	lsls	r2, r3, #5
 8010ad2:	69fb      	ldr	r3, [r7, #28]
 8010ad4:	4413      	add	r3, r2
 8010ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	69ba      	ldr	r2, [r7, #24]
 8010ade:	0151      	lsls	r1, r2, #5
 8010ae0:	69fa      	ldr	r2, [r7, #28]
 8010ae2:	440a      	add	r2, r1
 8010ae4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ae8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010aec:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	791b      	ldrb	r3, [r3, #4]
 8010af2:	2b01      	cmp	r3, #1
 8010af4:	d015      	beq.n	8010b22 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	691b      	ldr	r3, [r3, #16]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	f000 8151 	beq.w	8010da2 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	781b      	ldrb	r3, [r3, #0]
 8010b0c:	f003 030f 	and.w	r3, r3, #15
 8010b10:	2101      	movs	r1, #1
 8010b12:	fa01 f303 	lsl.w	r3, r1, r3
 8010b16:	69f9      	ldr	r1, [r7, #28]
 8010b18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010b1c:	4313      	orrs	r3, r2
 8010b1e:	634b      	str	r3, [r1, #52]	@ 0x34
 8010b20:	e13f      	b.n	8010da2 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010b22:	69fb      	ldr	r3, [r7, #28]
 8010b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b28:	689b      	ldr	r3, [r3, #8]
 8010b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d116      	bne.n	8010b60 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010b32:	69bb      	ldr	r3, [r7, #24]
 8010b34:	015a      	lsls	r2, r3, #5
 8010b36:	69fb      	ldr	r3, [r7, #28]
 8010b38:	4413      	add	r3, r2
 8010b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	69ba      	ldr	r2, [r7, #24]
 8010b42:	0151      	lsls	r1, r2, #5
 8010b44:	69fa      	ldr	r2, [r7, #28]
 8010b46:	440a      	add	r2, r1
 8010b48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010b4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010b50:	6013      	str	r3, [r2, #0]
 8010b52:	e015      	b.n	8010b80 <USB_EPStartXfer+0x310>
 8010b54:	e007ffff 	.word	0xe007ffff
 8010b58:	fff80000 	.word	0xfff80000
 8010b5c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010b60:	69bb      	ldr	r3, [r7, #24]
 8010b62:	015a      	lsls	r2, r3, #5
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	4413      	add	r3, r2
 8010b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	69ba      	ldr	r2, [r7, #24]
 8010b70:	0151      	lsls	r1, r2, #5
 8010b72:	69fa      	ldr	r2, [r7, #28]
 8010b74:	440a      	add	r2, r1
 8010b76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010b7e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	68d9      	ldr	r1, [r3, #12]
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	781a      	ldrb	r2, [r3, #0]
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	691b      	ldr	r3, [r3, #16]
 8010b8c:	b298      	uxth	r0, r3
 8010b8e:	79fb      	ldrb	r3, [r7, #7]
 8010b90:	9300      	str	r3, [sp, #0]
 8010b92:	4603      	mov	r3, r0
 8010b94:	68f8      	ldr	r0, [r7, #12]
 8010b96:	f000 f9b9 	bl	8010f0c <USB_WritePacket>
 8010b9a:	e102      	b.n	8010da2 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010b9c:	69bb      	ldr	r3, [r7, #24]
 8010b9e:	015a      	lsls	r2, r3, #5
 8010ba0:	69fb      	ldr	r3, [r7, #28]
 8010ba2:	4413      	add	r3, r2
 8010ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ba8:	691a      	ldr	r2, [r3, #16]
 8010baa:	69bb      	ldr	r3, [r7, #24]
 8010bac:	0159      	lsls	r1, r3, #5
 8010bae:	69fb      	ldr	r3, [r7, #28]
 8010bb0:	440b      	add	r3, r1
 8010bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bb6:	4619      	mov	r1, r3
 8010bb8:	4b7c      	ldr	r3, [pc, #496]	@ (8010dac <USB_EPStartXfer+0x53c>)
 8010bba:	4013      	ands	r3, r2
 8010bbc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010bbe:	69bb      	ldr	r3, [r7, #24]
 8010bc0:	015a      	lsls	r2, r3, #5
 8010bc2:	69fb      	ldr	r3, [r7, #28]
 8010bc4:	4413      	add	r3, r2
 8010bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bca:	691a      	ldr	r2, [r3, #16]
 8010bcc:	69bb      	ldr	r3, [r7, #24]
 8010bce:	0159      	lsls	r1, r3, #5
 8010bd0:	69fb      	ldr	r3, [r7, #28]
 8010bd2:	440b      	add	r3, r1
 8010bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bd8:	4619      	mov	r1, r3
 8010bda:	4b75      	ldr	r3, [pc, #468]	@ (8010db0 <USB_EPStartXfer+0x540>)
 8010bdc:	4013      	ands	r3, r2
 8010bde:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8010be0:	69bb      	ldr	r3, [r7, #24]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d12f      	bne.n	8010c46 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	691b      	ldr	r3, [r3, #16]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d003      	beq.n	8010bf6 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	689a      	ldr	r2, [r3, #8]
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	689a      	ldr	r2, [r3, #8]
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	015a      	lsls	r2, r3, #5
 8010c02:	69fb      	ldr	r3, [r7, #28]
 8010c04:	4413      	add	r3, r2
 8010c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c0a:	691a      	ldr	r2, [r3, #16]
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	6a1b      	ldr	r3, [r3, #32]
 8010c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010c14:	69b9      	ldr	r1, [r7, #24]
 8010c16:	0148      	lsls	r0, r1, #5
 8010c18:	69f9      	ldr	r1, [r7, #28]
 8010c1a:	4401      	add	r1, r0
 8010c1c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010c20:	4313      	orrs	r3, r2
 8010c22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010c24:	69bb      	ldr	r3, [r7, #24]
 8010c26:	015a      	lsls	r2, r3, #5
 8010c28:	69fb      	ldr	r3, [r7, #28]
 8010c2a:	4413      	add	r3, r2
 8010c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c30:	691b      	ldr	r3, [r3, #16]
 8010c32:	69ba      	ldr	r2, [r7, #24]
 8010c34:	0151      	lsls	r1, r2, #5
 8010c36:	69fa      	ldr	r2, [r7, #28]
 8010c38:	440a      	add	r2, r1
 8010c3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010c42:	6113      	str	r3, [r2, #16]
 8010c44:	e05f      	b.n	8010d06 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	691b      	ldr	r3, [r3, #16]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d123      	bne.n	8010c96 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010c4e:	69bb      	ldr	r3, [r7, #24]
 8010c50:	015a      	lsls	r2, r3, #5
 8010c52:	69fb      	ldr	r3, [r7, #28]
 8010c54:	4413      	add	r3, r2
 8010c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c5a:	691a      	ldr	r2, [r3, #16]
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	689b      	ldr	r3, [r3, #8]
 8010c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010c64:	69b9      	ldr	r1, [r7, #24]
 8010c66:	0148      	lsls	r0, r1, #5
 8010c68:	69f9      	ldr	r1, [r7, #28]
 8010c6a:	4401      	add	r1, r0
 8010c6c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010c70:	4313      	orrs	r3, r2
 8010c72:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010c74:	69bb      	ldr	r3, [r7, #24]
 8010c76:	015a      	lsls	r2, r3, #5
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	4413      	add	r3, r2
 8010c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c80:	691b      	ldr	r3, [r3, #16]
 8010c82:	69ba      	ldr	r2, [r7, #24]
 8010c84:	0151      	lsls	r1, r2, #5
 8010c86:	69fa      	ldr	r2, [r7, #28]
 8010c88:	440a      	add	r2, r1
 8010c8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010c92:	6113      	str	r3, [r2, #16]
 8010c94:	e037      	b.n	8010d06 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	691a      	ldr	r2, [r3, #16]
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	689b      	ldr	r3, [r3, #8]
 8010c9e:	4413      	add	r3, r2
 8010ca0:	1e5a      	subs	r2, r3, #1
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	689b      	ldr	r3, [r3, #8]
 8010ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010caa:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	689b      	ldr	r3, [r3, #8]
 8010cb0:	8afa      	ldrh	r2, [r7, #22]
 8010cb2:	fb03 f202 	mul.w	r2, r3, r2
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010cba:	69bb      	ldr	r3, [r7, #24]
 8010cbc:	015a      	lsls	r2, r3, #5
 8010cbe:	69fb      	ldr	r3, [r7, #28]
 8010cc0:	4413      	add	r3, r2
 8010cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010cc6:	691a      	ldr	r2, [r3, #16]
 8010cc8:	8afb      	ldrh	r3, [r7, #22]
 8010cca:	04d9      	lsls	r1, r3, #19
 8010ccc:	4b39      	ldr	r3, [pc, #228]	@ (8010db4 <USB_EPStartXfer+0x544>)
 8010cce:	400b      	ands	r3, r1
 8010cd0:	69b9      	ldr	r1, [r7, #24]
 8010cd2:	0148      	lsls	r0, r1, #5
 8010cd4:	69f9      	ldr	r1, [r7, #28]
 8010cd6:	4401      	add	r1, r0
 8010cd8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010cdc:	4313      	orrs	r3, r2
 8010cde:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010ce0:	69bb      	ldr	r3, [r7, #24]
 8010ce2:	015a      	lsls	r2, r3, #5
 8010ce4:	69fb      	ldr	r3, [r7, #28]
 8010ce6:	4413      	add	r3, r2
 8010ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010cec:	691a      	ldr	r2, [r3, #16]
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	6a1b      	ldr	r3, [r3, #32]
 8010cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010cf6:	69b9      	ldr	r1, [r7, #24]
 8010cf8:	0148      	lsls	r0, r1, #5
 8010cfa:	69f9      	ldr	r1, [r7, #28]
 8010cfc:	4401      	add	r1, r0
 8010cfe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010d02:	4313      	orrs	r3, r2
 8010d04:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8010d06:	79fb      	ldrb	r3, [r7, #7]
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d10d      	bne.n	8010d28 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	68db      	ldr	r3, [r3, #12]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d009      	beq.n	8010d28 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	68d9      	ldr	r1, [r3, #12]
 8010d18:	69bb      	ldr	r3, [r7, #24]
 8010d1a:	015a      	lsls	r2, r3, #5
 8010d1c:	69fb      	ldr	r3, [r7, #28]
 8010d1e:	4413      	add	r3, r2
 8010d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d24:	460a      	mov	r2, r1
 8010d26:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	791b      	ldrb	r3, [r3, #4]
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	d128      	bne.n	8010d82 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010d30:	69fb      	ldr	r3, [r7, #28]
 8010d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d36:	689b      	ldr	r3, [r3, #8]
 8010d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d110      	bne.n	8010d62 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010d40:	69bb      	ldr	r3, [r7, #24]
 8010d42:	015a      	lsls	r2, r3, #5
 8010d44:	69fb      	ldr	r3, [r7, #28]
 8010d46:	4413      	add	r3, r2
 8010d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	69ba      	ldr	r2, [r7, #24]
 8010d50:	0151      	lsls	r1, r2, #5
 8010d52:	69fa      	ldr	r2, [r7, #28]
 8010d54:	440a      	add	r2, r1
 8010d56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010d5a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010d5e:	6013      	str	r3, [r2, #0]
 8010d60:	e00f      	b.n	8010d82 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010d62:	69bb      	ldr	r3, [r7, #24]
 8010d64:	015a      	lsls	r2, r3, #5
 8010d66:	69fb      	ldr	r3, [r7, #28]
 8010d68:	4413      	add	r3, r2
 8010d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	69ba      	ldr	r2, [r7, #24]
 8010d72:	0151      	lsls	r1, r2, #5
 8010d74:	69fa      	ldr	r2, [r7, #28]
 8010d76:	440a      	add	r2, r1
 8010d78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010d80:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010d82:	69bb      	ldr	r3, [r7, #24]
 8010d84:	015a      	lsls	r2, r3, #5
 8010d86:	69fb      	ldr	r3, [r7, #28]
 8010d88:	4413      	add	r3, r2
 8010d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	69ba      	ldr	r2, [r7, #24]
 8010d92:	0151      	lsls	r1, r2, #5
 8010d94:	69fa      	ldr	r2, [r7, #28]
 8010d96:	440a      	add	r2, r1
 8010d98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010d9c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010da0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010da2:	2300      	movs	r3, #0
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3720      	adds	r7, #32
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}
 8010dac:	fff80000 	.word	0xfff80000
 8010db0:	e007ffff 	.word	0xe007ffff
 8010db4:	1ff80000 	.word	0x1ff80000

08010db8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b087      	sub	sp, #28
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	785b      	ldrb	r3, [r3, #1]
 8010dd2:	2b01      	cmp	r3, #1
 8010dd4:	d14a      	bne.n	8010e6c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	015a      	lsls	r2, r3, #5
 8010ddc:	693b      	ldr	r3, [r7, #16]
 8010dde:	4413      	add	r3, r2
 8010de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010dea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010dee:	f040 8086 	bne.w	8010efe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	781b      	ldrb	r3, [r3, #0]
 8010df6:	015a      	lsls	r2, r3, #5
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	4413      	add	r3, r2
 8010dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	683a      	ldr	r2, [r7, #0]
 8010e04:	7812      	ldrb	r2, [r2, #0]
 8010e06:	0151      	lsls	r1, r2, #5
 8010e08:	693a      	ldr	r2, [r7, #16]
 8010e0a:	440a      	add	r2, r1
 8010e0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010e14:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	015a      	lsls	r2, r3, #5
 8010e1c:	693b      	ldr	r3, [r7, #16]
 8010e1e:	4413      	add	r3, r2
 8010e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	683a      	ldr	r2, [r7, #0]
 8010e28:	7812      	ldrb	r2, [r2, #0]
 8010e2a:	0151      	lsls	r1, r2, #5
 8010e2c:	693a      	ldr	r2, [r7, #16]
 8010e2e:	440a      	add	r2, r1
 8010e30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010e38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010e46:	4293      	cmp	r3, r2
 8010e48:	d902      	bls.n	8010e50 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	75fb      	strb	r3, [r7, #23]
          break;
 8010e4e:	e056      	b.n	8010efe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	781b      	ldrb	r3, [r3, #0]
 8010e54:	015a      	lsls	r2, r3, #5
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	4413      	add	r3, r2
 8010e5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010e64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010e68:	d0e7      	beq.n	8010e3a <USB_EPStopXfer+0x82>
 8010e6a:	e048      	b.n	8010efe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	015a      	lsls	r2, r3, #5
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	4413      	add	r3, r2
 8010e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010e80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010e84:	d13b      	bne.n	8010efe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	015a      	lsls	r2, r3, #5
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	4413      	add	r3, r2
 8010e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	683a      	ldr	r2, [r7, #0]
 8010e98:	7812      	ldrb	r2, [r2, #0]
 8010e9a:	0151      	lsls	r1, r2, #5
 8010e9c:	693a      	ldr	r2, [r7, #16]
 8010e9e:	440a      	add	r2, r1
 8010ea0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010ea4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010ea8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	015a      	lsls	r2, r3, #5
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	4413      	add	r3, r2
 8010eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	683a      	ldr	r2, [r7, #0]
 8010ebc:	7812      	ldrb	r2, [r2, #0]
 8010ebe:	0151      	lsls	r1, r2, #5
 8010ec0:	693a      	ldr	r2, [r7, #16]
 8010ec2:	440a      	add	r2, r1
 8010ec4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010ec8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010ecc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010eda:	4293      	cmp	r3, r2
 8010edc:	d902      	bls.n	8010ee4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010ede:	2301      	movs	r3, #1
 8010ee0:	75fb      	strb	r3, [r7, #23]
          break;
 8010ee2:	e00c      	b.n	8010efe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	015a      	lsls	r2, r3, #5
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	4413      	add	r3, r2
 8010eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010efc:	d0e7      	beq.n	8010ece <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	371c      	adds	r7, #28
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr

08010f0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b089      	sub	sp, #36	@ 0x24
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	60f8      	str	r0, [r7, #12]
 8010f14:	60b9      	str	r1, [r7, #8]
 8010f16:	4611      	mov	r1, r2
 8010f18:	461a      	mov	r2, r3
 8010f1a:	460b      	mov	r3, r1
 8010f1c:	71fb      	strb	r3, [r7, #7]
 8010f1e:	4613      	mov	r3, r2
 8010f20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010f2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d123      	bne.n	8010f7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010f32:	88bb      	ldrh	r3, [r7, #4]
 8010f34:	3303      	adds	r3, #3
 8010f36:	089b      	lsrs	r3, r3, #2
 8010f38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	61bb      	str	r3, [r7, #24]
 8010f3e:	e018      	b.n	8010f72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010f40:	79fb      	ldrb	r3, [r7, #7]
 8010f42:	031a      	lsls	r2, r3, #12
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	4413      	add	r3, r2
 8010f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	69fb      	ldr	r3, [r7, #28]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010f54:	69fb      	ldr	r3, [r7, #28]
 8010f56:	3301      	adds	r3, #1
 8010f58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010f5a:	69fb      	ldr	r3, [r7, #28]
 8010f5c:	3301      	adds	r3, #1
 8010f5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010f60:	69fb      	ldr	r3, [r7, #28]
 8010f62:	3301      	adds	r3, #1
 8010f64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010f66:	69fb      	ldr	r3, [r7, #28]
 8010f68:	3301      	adds	r3, #1
 8010f6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010f6c:	69bb      	ldr	r3, [r7, #24]
 8010f6e:	3301      	adds	r3, #1
 8010f70:	61bb      	str	r3, [r7, #24]
 8010f72:	69ba      	ldr	r2, [r7, #24]
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d3e2      	bcc.n	8010f40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010f7a:	2300      	movs	r3, #0
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3724      	adds	r7, #36	@ 0x24
 8010f80:	46bd      	mov	sp, r7
 8010f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f86:	4770      	bx	lr

08010f88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b08b      	sub	sp, #44	@ 0x2c
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	4613      	mov	r3, r2
 8010f94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010f9e:	88fb      	ldrh	r3, [r7, #6]
 8010fa0:	089b      	lsrs	r3, r3, #2
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010fa6:	88fb      	ldrh	r3, [r7, #6]
 8010fa8:	f003 0303 	and.w	r3, r3, #3
 8010fac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010fae:	2300      	movs	r3, #0
 8010fb0:	623b      	str	r3, [r7, #32]
 8010fb2:	e014      	b.n	8010fde <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010fb4:	69bb      	ldr	r3, [r7, #24]
 8010fb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010fba:	681a      	ldr	r2, [r3, #0]
 8010fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fbe:	601a      	str	r2, [r3, #0]
    pDest++;
 8010fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc2:	3301      	adds	r3, #1
 8010fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc8:	3301      	adds	r3, #1
 8010fca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fce:	3301      	adds	r3, #1
 8010fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8010fd8:	6a3b      	ldr	r3, [r7, #32]
 8010fda:	3301      	adds	r3, #1
 8010fdc:	623b      	str	r3, [r7, #32]
 8010fde:	6a3a      	ldr	r2, [r7, #32]
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d3e6      	bcc.n	8010fb4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010fe6:	8bfb      	ldrh	r3, [r7, #30]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d01e      	beq.n	801102a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010fec:	2300      	movs	r3, #0
 8010fee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010ff0:	69bb      	ldr	r3, [r7, #24]
 8010ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	f107 0310 	add.w	r3, r7, #16
 8010ffc:	6812      	ldr	r2, [r2, #0]
 8010ffe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011000:	693a      	ldr	r2, [r7, #16]
 8011002:	6a3b      	ldr	r3, [r7, #32]
 8011004:	b2db      	uxtb	r3, r3
 8011006:	00db      	lsls	r3, r3, #3
 8011008:	fa22 f303 	lsr.w	r3, r2, r3
 801100c:	b2da      	uxtb	r2, r3
 801100e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011010:	701a      	strb	r2, [r3, #0]
      i++;
 8011012:	6a3b      	ldr	r3, [r7, #32]
 8011014:	3301      	adds	r3, #1
 8011016:	623b      	str	r3, [r7, #32]
      pDest++;
 8011018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801101a:	3301      	adds	r3, #1
 801101c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801101e:	8bfb      	ldrh	r3, [r7, #30]
 8011020:	3b01      	subs	r3, #1
 8011022:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011024:	8bfb      	ldrh	r3, [r7, #30]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d1ea      	bne.n	8011000 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801102a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801102c:	4618      	mov	r0, r3
 801102e:	372c      	adds	r7, #44	@ 0x2c
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011038:	b480      	push	{r7}
 801103a:	b085      	sub	sp, #20
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	785b      	ldrb	r3, [r3, #1]
 8011050:	2b01      	cmp	r3, #1
 8011052:	d12c      	bne.n	80110ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	015a      	lsls	r2, r3, #5
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	4413      	add	r3, r2
 801105c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	db12      	blt.n	801108c <USB_EPSetStall+0x54>
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d00f      	beq.n	801108c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	015a      	lsls	r2, r3, #5
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	4413      	add	r3, r2
 8011074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	68ba      	ldr	r2, [r7, #8]
 801107c:	0151      	lsls	r1, r2, #5
 801107e:	68fa      	ldr	r2, [r7, #12]
 8011080:	440a      	add	r2, r1
 8011082:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011086:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801108a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	015a      	lsls	r2, r3, #5
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	4413      	add	r3, r2
 8011094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	68ba      	ldr	r2, [r7, #8]
 801109c:	0151      	lsls	r1, r2, #5
 801109e:	68fa      	ldr	r2, [r7, #12]
 80110a0:	440a      	add	r2, r1
 80110a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80110a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80110aa:	6013      	str	r3, [r2, #0]
 80110ac:	e02b      	b.n	8011106 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	015a      	lsls	r2, r3, #5
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	4413      	add	r3, r2
 80110b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	db12      	blt.n	80110e6 <USB_EPSetStall+0xae>
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d00f      	beq.n	80110e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	015a      	lsls	r2, r3, #5
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	4413      	add	r3, r2
 80110ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	68ba      	ldr	r2, [r7, #8]
 80110d6:	0151      	lsls	r1, r2, #5
 80110d8:	68fa      	ldr	r2, [r7, #12]
 80110da:	440a      	add	r2, r1
 80110dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80110e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80110e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	015a      	lsls	r2, r3, #5
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	4413      	add	r3, r2
 80110ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	68ba      	ldr	r2, [r7, #8]
 80110f6:	0151      	lsls	r1, r2, #5
 80110f8:	68fa      	ldr	r2, [r7, #12]
 80110fa:	440a      	add	r2, r1
 80110fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011100:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011104:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011106:	2300      	movs	r3, #0
}
 8011108:	4618      	mov	r0, r3
 801110a:	3714      	adds	r7, #20
 801110c:	46bd      	mov	sp, r7
 801110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011112:	4770      	bx	lr

08011114 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011114:	b480      	push	{r7}
 8011116:	b085      	sub	sp, #20
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	785b      	ldrb	r3, [r3, #1]
 801112c:	2b01      	cmp	r3, #1
 801112e:	d128      	bne.n	8011182 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	015a      	lsls	r2, r3, #5
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	4413      	add	r3, r2
 8011138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	68ba      	ldr	r2, [r7, #8]
 8011140:	0151      	lsls	r1, r2, #5
 8011142:	68fa      	ldr	r2, [r7, #12]
 8011144:	440a      	add	r2, r1
 8011146:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801114a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801114e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	791b      	ldrb	r3, [r3, #4]
 8011154:	2b03      	cmp	r3, #3
 8011156:	d003      	beq.n	8011160 <USB_EPClearStall+0x4c>
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	791b      	ldrb	r3, [r3, #4]
 801115c:	2b02      	cmp	r3, #2
 801115e:	d138      	bne.n	80111d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	015a      	lsls	r2, r3, #5
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	4413      	add	r3, r2
 8011168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	68ba      	ldr	r2, [r7, #8]
 8011170:	0151      	lsls	r1, r2, #5
 8011172:	68fa      	ldr	r2, [r7, #12]
 8011174:	440a      	add	r2, r1
 8011176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801117a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801117e:	6013      	str	r3, [r2, #0]
 8011180:	e027      	b.n	80111d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	015a      	lsls	r2, r3, #5
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	4413      	add	r3, r2
 801118a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	68ba      	ldr	r2, [r7, #8]
 8011192:	0151      	lsls	r1, r2, #5
 8011194:	68fa      	ldr	r2, [r7, #12]
 8011196:	440a      	add	r2, r1
 8011198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801119c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80111a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	791b      	ldrb	r3, [r3, #4]
 80111a6:	2b03      	cmp	r3, #3
 80111a8:	d003      	beq.n	80111b2 <USB_EPClearStall+0x9e>
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	791b      	ldrb	r3, [r3, #4]
 80111ae:	2b02      	cmp	r3, #2
 80111b0:	d10f      	bne.n	80111d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	015a      	lsls	r2, r3, #5
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	4413      	add	r3, r2
 80111ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	68ba      	ldr	r2, [r7, #8]
 80111c2:	0151      	lsls	r1, r2, #5
 80111c4:	68fa      	ldr	r2, [r7, #12]
 80111c6:	440a      	add	r2, r1
 80111c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80111cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80111d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80111d2:	2300      	movs	r3, #0
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3714      	adds	r7, #20
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr

080111e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b085      	sub	sp, #20
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	460b      	mov	r3, r1
 80111ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	68fa      	ldr	r2, [r7, #12]
 80111fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80111fe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8011202:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801120a:	681a      	ldr	r2, [r3, #0]
 801120c:	78fb      	ldrb	r3, [r7, #3]
 801120e:	011b      	lsls	r3, r3, #4
 8011210:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8011214:	68f9      	ldr	r1, [r7, #12]
 8011216:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801121a:	4313      	orrs	r3, r2
 801121c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801121e:	2300      	movs	r3, #0
}
 8011220:	4618      	mov	r0, r3
 8011222:	3714      	adds	r7, #20
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801122c:	b480      	push	{r7}
 801122e:	b085      	sub	sp, #20
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	68fa      	ldr	r2, [r7, #12]
 8011242:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011246:	f023 0303 	bic.w	r3, r3, #3
 801124a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	68fa      	ldr	r2, [r7, #12]
 8011256:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801125a:	f023 0302 	bic.w	r3, r3, #2
 801125e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011260:	2300      	movs	r3, #0
}
 8011262:	4618      	mov	r0, r3
 8011264:	3714      	adds	r7, #20
 8011266:	46bd      	mov	sp, r7
 8011268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126c:	4770      	bx	lr

0801126e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801126e:	b480      	push	{r7}
 8011270:	b085      	sub	sp, #20
 8011272:	af00      	add	r7, sp, #0
 8011274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	68fa      	ldr	r2, [r7, #12]
 8011284:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011288:	f023 0303 	bic.w	r3, r3, #3
 801128c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011294:	685b      	ldr	r3, [r3, #4]
 8011296:	68fa      	ldr	r2, [r7, #12]
 8011298:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801129c:	f043 0302 	orr.w	r3, r3, #2
 80112a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80112a2:	2300      	movs	r3, #0
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	3714      	adds	r7, #20
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr

080112b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b085      	sub	sp, #20
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	695b      	ldr	r3, [r3, #20]
 80112bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	699b      	ldr	r3, [r3, #24]
 80112c2:	68fa      	ldr	r2, [r7, #12]
 80112c4:	4013      	ands	r3, r2
 80112c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80112c8:	68fb      	ldr	r3, [r7, #12]
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3714      	adds	r7, #20
 80112ce:	46bd      	mov	sp, r7
 80112d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d4:	4770      	bx	lr

080112d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80112d6:	b480      	push	{r7}
 80112d8:	b085      	sub	sp, #20
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80112e8:	699b      	ldr	r3, [r3, #24]
 80112ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80112f2:	69db      	ldr	r3, [r3, #28]
 80112f4:	68ba      	ldr	r2, [r7, #8]
 80112f6:	4013      	ands	r3, r2
 80112f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	0c1b      	lsrs	r3, r3, #16
}
 80112fe:	4618      	mov	r0, r3
 8011300:	3714      	adds	r7, #20
 8011302:	46bd      	mov	sp, r7
 8011304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011308:	4770      	bx	lr

0801130a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801130a:	b480      	push	{r7}
 801130c:	b085      	sub	sp, #20
 801130e:	af00      	add	r7, sp, #0
 8011310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801131c:	699b      	ldr	r3, [r3, #24]
 801131e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011326:	69db      	ldr	r3, [r3, #28]
 8011328:	68ba      	ldr	r2, [r7, #8]
 801132a:	4013      	ands	r3, r2
 801132c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	b29b      	uxth	r3, r3
}
 8011332:	4618      	mov	r0, r3
 8011334:	3714      	adds	r7, #20
 8011336:	46bd      	mov	sp, r7
 8011338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133c:	4770      	bx	lr

0801133e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801133e:	b480      	push	{r7}
 8011340:	b085      	sub	sp, #20
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
 8011346:	460b      	mov	r3, r1
 8011348:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801134e:	78fb      	ldrb	r3, [r7, #3]
 8011350:	015a      	lsls	r2, r3, #5
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	4413      	add	r3, r2
 8011356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801135a:	689b      	ldr	r3, [r3, #8]
 801135c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011364:	695b      	ldr	r3, [r3, #20]
 8011366:	68ba      	ldr	r2, [r7, #8]
 8011368:	4013      	ands	r3, r2
 801136a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801136c:	68bb      	ldr	r3, [r7, #8]
}
 801136e:	4618      	mov	r0, r3
 8011370:	3714      	adds	r7, #20
 8011372:	46bd      	mov	sp, r7
 8011374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011378:	4770      	bx	lr

0801137a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801137a:	b480      	push	{r7}
 801137c:	b087      	sub	sp, #28
 801137e:	af00      	add	r7, sp, #0
 8011380:	6078      	str	r0, [r7, #4]
 8011382:	460b      	mov	r3, r1
 8011384:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011390:	691b      	ldr	r3, [r3, #16]
 8011392:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801139a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801139c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801139e:	78fb      	ldrb	r3, [r7, #3]
 80113a0:	f003 030f 	and.w	r3, r3, #15
 80113a4:	68fa      	ldr	r2, [r7, #12]
 80113a6:	fa22 f303 	lsr.w	r3, r2, r3
 80113aa:	01db      	lsls	r3, r3, #7
 80113ac:	b2db      	uxtb	r3, r3
 80113ae:	693a      	ldr	r2, [r7, #16]
 80113b0:	4313      	orrs	r3, r2
 80113b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80113b4:	78fb      	ldrb	r3, [r7, #3]
 80113b6:	015a      	lsls	r2, r3, #5
 80113b8:	697b      	ldr	r3, [r7, #20]
 80113ba:	4413      	add	r3, r2
 80113bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80113c0:	689b      	ldr	r3, [r3, #8]
 80113c2:	693a      	ldr	r2, [r7, #16]
 80113c4:	4013      	ands	r3, r2
 80113c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80113c8:	68bb      	ldr	r3, [r7, #8]
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	371c      	adds	r7, #28
 80113ce:	46bd      	mov	sp, r7
 80113d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d4:	4770      	bx	lr

080113d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80113d6:	b480      	push	{r7}
 80113d8:	b083      	sub	sp, #12
 80113da:	af00      	add	r7, sp, #0
 80113dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	695b      	ldr	r3, [r3, #20]
 80113e2:	f003 0301 	and.w	r3, r3, #1
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	370c      	adds	r7, #12
 80113ea:	46bd      	mov	sp, r7
 80113ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f0:	4770      	bx	lr
	...

080113f4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80113f4:	b480      	push	{r7}
 80113f6:	b085      	sub	sp, #20
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011406:	681a      	ldr	r2, [r3, #0]
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801140e:	4619      	mov	r1, r3
 8011410:	4b09      	ldr	r3, [pc, #36]	@ (8011438 <USB_ActivateSetup+0x44>)
 8011412:	4013      	ands	r3, r2
 8011414:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	68fa      	ldr	r2, [r7, #12]
 8011420:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011428:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801142a:	2300      	movs	r3, #0
}
 801142c:	4618      	mov	r0, r3
 801142e:	3714      	adds	r7, #20
 8011430:	46bd      	mov	sp, r7
 8011432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011436:	4770      	bx	lr
 8011438:	fffff800 	.word	0xfffff800

0801143c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 801143c:	b480      	push	{r7}
 801143e:	b087      	sub	sp, #28
 8011440:	af00      	add	r7, sp, #0
 8011442:	60f8      	str	r0, [r7, #12]
 8011444:	460b      	mov	r3, r1
 8011446:	607a      	str	r2, [r7, #4]
 8011448:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	333c      	adds	r3, #60	@ 0x3c
 8011452:	3304      	adds	r3, #4
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	4a26      	ldr	r2, [pc, #152]	@ (80114f4 <USB_EP0_OutStart+0xb8>)
 801145c:	4293      	cmp	r3, r2
 801145e:	d90a      	bls.n	8011476 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801146c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011470:	d101      	bne.n	8011476 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8011472:	2300      	movs	r3, #0
 8011474:	e037      	b.n	80114e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801147c:	461a      	mov	r2, r3
 801147e:	2300      	movs	r3, #0
 8011480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011488:	691b      	ldr	r3, [r3, #16]
 801148a:	697a      	ldr	r2, [r7, #20]
 801148c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011490:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011494:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801149c:	691b      	ldr	r3, [r3, #16]
 801149e:	697a      	ldr	r2, [r7, #20]
 80114a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80114a4:	f043 0318 	orr.w	r3, r3, #24
 80114a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114b0:	691b      	ldr	r3, [r3, #16]
 80114b2:	697a      	ldr	r2, [r7, #20]
 80114b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80114b8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80114bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80114be:	7afb      	ldrb	r3, [r7, #11]
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	d10f      	bne.n	80114e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114ca:	461a      	mov	r2, r3
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	697a      	ldr	r2, [r7, #20]
 80114da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80114de:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80114e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80114e4:	2300      	movs	r3, #0
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	371c      	adds	r7, #28
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr
 80114f2:	bf00      	nop
 80114f4:	4f54300a 	.word	0x4f54300a

080114f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80114f8:	b480      	push	{r7}
 80114fa:	b085      	sub	sp, #20
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011500:	2300      	movs	r3, #0
 8011502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	3301      	adds	r3, #1
 8011508:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011510:	d901      	bls.n	8011516 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011512:	2303      	movs	r3, #3
 8011514:	e01b      	b.n	801154e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	691b      	ldr	r3, [r3, #16]
 801151a:	2b00      	cmp	r3, #0
 801151c:	daf2      	bge.n	8011504 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801151e:	2300      	movs	r3, #0
 8011520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	691b      	ldr	r3, [r3, #16]
 8011526:	f043 0201 	orr.w	r2, r3, #1
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	3301      	adds	r3, #1
 8011532:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801153a:	d901      	bls.n	8011540 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801153c:	2303      	movs	r3, #3
 801153e:	e006      	b.n	801154e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	691b      	ldr	r3, [r3, #16]
 8011544:	f003 0301 	and.w	r3, r3, #1
 8011548:	2b01      	cmp	r3, #1
 801154a:	d0f0      	beq.n	801152e <USB_CoreReset+0x36>

  return HAL_OK;
 801154c:	2300      	movs	r3, #0
}
 801154e:	4618      	mov	r0, r3
 8011550:	3714      	adds	r7, #20
 8011552:	46bd      	mov	sp, r7
 8011554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011558:	4770      	bx	lr
	...

0801155c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b084      	sub	sp, #16
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	460b      	mov	r3, r1
 8011566:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011568:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 801156c:	f002 fd18 	bl	8013fa0 <USBD_static_malloc>
 8011570:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d109      	bne.n	801158c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	32b0      	adds	r2, #176	@ 0xb0
 8011582:	2100      	movs	r1, #0
 8011584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011588:	2302      	movs	r3, #2
 801158a:	e0d4      	b.n	8011736 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801158c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8011590:	2100      	movs	r1, #0
 8011592:	68f8      	ldr	r0, [r7, #12]
 8011594:	f003 fb59 	bl	8014c4a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	32b0      	adds	r2, #176	@ 0xb0
 80115a2:	68f9      	ldr	r1, [r7, #12]
 80115a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	32b0      	adds	r2, #176	@ 0xb0
 80115b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	7c1b      	ldrb	r3, [r3, #16]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d138      	bne.n	8011636 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80115c4:	4b5e      	ldr	r3, [pc, #376]	@ (8011740 <USBD_CDC_Init+0x1e4>)
 80115c6:	7819      	ldrb	r1, [r3, #0]
 80115c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80115cc:	2202      	movs	r2, #2
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f002 fbc3 	bl	8013d5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80115d4:	4b5a      	ldr	r3, [pc, #360]	@ (8011740 <USBD_CDC_Init+0x1e4>)
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	f003 020f 	and.w	r2, r3, #15
 80115dc:	6879      	ldr	r1, [r7, #4]
 80115de:	4613      	mov	r3, r2
 80115e0:	009b      	lsls	r3, r3, #2
 80115e2:	4413      	add	r3, r2
 80115e4:	009b      	lsls	r3, r3, #2
 80115e6:	440b      	add	r3, r1
 80115e8:	3324      	adds	r3, #36	@ 0x24
 80115ea:	2201      	movs	r2, #1
 80115ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80115ee:	4b55      	ldr	r3, [pc, #340]	@ (8011744 <USBD_CDC_Init+0x1e8>)
 80115f0:	7819      	ldrb	r1, [r3, #0]
 80115f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80115f6:	2202      	movs	r2, #2
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f002 fbae 	bl	8013d5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80115fe:	4b51      	ldr	r3, [pc, #324]	@ (8011744 <USBD_CDC_Init+0x1e8>)
 8011600:	781b      	ldrb	r3, [r3, #0]
 8011602:	f003 020f 	and.w	r2, r3, #15
 8011606:	6879      	ldr	r1, [r7, #4]
 8011608:	4613      	mov	r3, r2
 801160a:	009b      	lsls	r3, r3, #2
 801160c:	4413      	add	r3, r2
 801160e:	009b      	lsls	r3, r3, #2
 8011610:	440b      	add	r3, r1
 8011612:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011616:	2201      	movs	r2, #1
 8011618:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801161a:	4b4b      	ldr	r3, [pc, #300]	@ (8011748 <USBD_CDC_Init+0x1ec>)
 801161c:	781b      	ldrb	r3, [r3, #0]
 801161e:	f003 020f 	and.w	r2, r3, #15
 8011622:	6879      	ldr	r1, [r7, #4]
 8011624:	4613      	mov	r3, r2
 8011626:	009b      	lsls	r3, r3, #2
 8011628:	4413      	add	r3, r2
 801162a:	009b      	lsls	r3, r3, #2
 801162c:	440b      	add	r3, r1
 801162e:	3326      	adds	r3, #38	@ 0x26
 8011630:	2210      	movs	r2, #16
 8011632:	801a      	strh	r2, [r3, #0]
 8011634:	e035      	b.n	80116a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011636:	4b42      	ldr	r3, [pc, #264]	@ (8011740 <USBD_CDC_Init+0x1e4>)
 8011638:	7819      	ldrb	r1, [r3, #0]
 801163a:	2340      	movs	r3, #64	@ 0x40
 801163c:	2202      	movs	r2, #2
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f002 fb8b 	bl	8013d5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011644:	4b3e      	ldr	r3, [pc, #248]	@ (8011740 <USBD_CDC_Init+0x1e4>)
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	f003 020f 	and.w	r2, r3, #15
 801164c:	6879      	ldr	r1, [r7, #4]
 801164e:	4613      	mov	r3, r2
 8011650:	009b      	lsls	r3, r3, #2
 8011652:	4413      	add	r3, r2
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	440b      	add	r3, r1
 8011658:	3324      	adds	r3, #36	@ 0x24
 801165a:	2201      	movs	r2, #1
 801165c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801165e:	4b39      	ldr	r3, [pc, #228]	@ (8011744 <USBD_CDC_Init+0x1e8>)
 8011660:	7819      	ldrb	r1, [r3, #0]
 8011662:	2340      	movs	r3, #64	@ 0x40
 8011664:	2202      	movs	r2, #2
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f002 fb77 	bl	8013d5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801166c:	4b35      	ldr	r3, [pc, #212]	@ (8011744 <USBD_CDC_Init+0x1e8>)
 801166e:	781b      	ldrb	r3, [r3, #0]
 8011670:	f003 020f 	and.w	r2, r3, #15
 8011674:	6879      	ldr	r1, [r7, #4]
 8011676:	4613      	mov	r3, r2
 8011678:	009b      	lsls	r3, r3, #2
 801167a:	4413      	add	r3, r2
 801167c:	009b      	lsls	r3, r3, #2
 801167e:	440b      	add	r3, r1
 8011680:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011684:	2201      	movs	r2, #1
 8011686:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011688:	4b2f      	ldr	r3, [pc, #188]	@ (8011748 <USBD_CDC_Init+0x1ec>)
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	f003 020f 	and.w	r2, r3, #15
 8011690:	6879      	ldr	r1, [r7, #4]
 8011692:	4613      	mov	r3, r2
 8011694:	009b      	lsls	r3, r3, #2
 8011696:	4413      	add	r3, r2
 8011698:	009b      	lsls	r3, r3, #2
 801169a:	440b      	add	r3, r1
 801169c:	3326      	adds	r3, #38	@ 0x26
 801169e:	2210      	movs	r2, #16
 80116a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80116a2:	4b29      	ldr	r3, [pc, #164]	@ (8011748 <USBD_CDC_Init+0x1ec>)
 80116a4:	7819      	ldrb	r1, [r3, #0]
 80116a6:	2308      	movs	r3, #8
 80116a8:	2203      	movs	r2, #3
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f002 fb55 	bl	8013d5a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80116b0:	4b25      	ldr	r3, [pc, #148]	@ (8011748 <USBD_CDC_Init+0x1ec>)
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	f003 020f 	and.w	r2, r3, #15
 80116b8:	6879      	ldr	r1, [r7, #4]
 80116ba:	4613      	mov	r3, r2
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	4413      	add	r3, r2
 80116c0:	009b      	lsls	r3, r3, #2
 80116c2:	440b      	add	r3, r1
 80116c4:	3324      	adds	r3, #36	@ 0x24
 80116c6:	2201      	movs	r2, #1
 80116c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2200      	movs	r2, #0
 80116ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80116d8:	687a      	ldr	r2, [r7, #4]
 80116da:	33b0      	adds	r3, #176	@ 0xb0
 80116dc:	009b      	lsls	r3, r3, #2
 80116de:	4413      	add	r3, r2
 80116e0:	685b      	ldr	r3, [r3, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	2200      	movs	r2, #0
 80116ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2200      	movs	r2, #0
 80116f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d101      	bne.n	8011704 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8011700:	2302      	movs	r3, #2
 8011702:	e018      	b.n	8011736 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	7c1b      	ldrb	r3, [r3, #16]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d10a      	bne.n	8011722 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801170c:	4b0d      	ldr	r3, [pc, #52]	@ (8011744 <USBD_CDC_Init+0x1e8>)
 801170e:	7819      	ldrb	r1, [r3, #0]
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011716:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f002 fc0c 	bl	8013f38 <USBD_LL_PrepareReceive>
 8011720:	e008      	b.n	8011734 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011722:	4b08      	ldr	r3, [pc, #32]	@ (8011744 <USBD_CDC_Init+0x1e8>)
 8011724:	7819      	ldrb	r1, [r3, #0]
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801172c:	2340      	movs	r3, #64	@ 0x40
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f002 fc02 	bl	8013f38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011734:	2300      	movs	r3, #0
}
 8011736:	4618      	mov	r0, r3
 8011738:	3710      	adds	r7, #16
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	240000af 	.word	0x240000af
 8011744:	240000b0 	.word	0x240000b0
 8011748:	240000b1 	.word	0x240000b1

0801174c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	460b      	mov	r3, r1
 8011756:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8011758:	4b3a      	ldr	r3, [pc, #232]	@ (8011844 <USBD_CDC_DeInit+0xf8>)
 801175a:	781b      	ldrb	r3, [r3, #0]
 801175c:	4619      	mov	r1, r3
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f002 fb21 	bl	8013da6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8011764:	4b37      	ldr	r3, [pc, #220]	@ (8011844 <USBD_CDC_DeInit+0xf8>)
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	f003 020f 	and.w	r2, r3, #15
 801176c:	6879      	ldr	r1, [r7, #4]
 801176e:	4613      	mov	r3, r2
 8011770:	009b      	lsls	r3, r3, #2
 8011772:	4413      	add	r3, r2
 8011774:	009b      	lsls	r3, r3, #2
 8011776:	440b      	add	r3, r1
 8011778:	3324      	adds	r3, #36	@ 0x24
 801177a:	2200      	movs	r2, #0
 801177c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801177e:	4b32      	ldr	r3, [pc, #200]	@ (8011848 <USBD_CDC_DeInit+0xfc>)
 8011780:	781b      	ldrb	r3, [r3, #0]
 8011782:	4619      	mov	r1, r3
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	f002 fb0e 	bl	8013da6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801178a:	4b2f      	ldr	r3, [pc, #188]	@ (8011848 <USBD_CDC_DeInit+0xfc>)
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	f003 020f 	and.w	r2, r3, #15
 8011792:	6879      	ldr	r1, [r7, #4]
 8011794:	4613      	mov	r3, r2
 8011796:	009b      	lsls	r3, r3, #2
 8011798:	4413      	add	r3, r2
 801179a:	009b      	lsls	r3, r3, #2
 801179c:	440b      	add	r3, r1
 801179e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80117a2:	2200      	movs	r2, #0
 80117a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80117a6:	4b29      	ldr	r3, [pc, #164]	@ (801184c <USBD_CDC_DeInit+0x100>)
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	4619      	mov	r1, r3
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	f002 fafa 	bl	8013da6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80117b2:	4b26      	ldr	r3, [pc, #152]	@ (801184c <USBD_CDC_DeInit+0x100>)
 80117b4:	781b      	ldrb	r3, [r3, #0]
 80117b6:	f003 020f 	and.w	r2, r3, #15
 80117ba:	6879      	ldr	r1, [r7, #4]
 80117bc:	4613      	mov	r3, r2
 80117be:	009b      	lsls	r3, r3, #2
 80117c0:	4413      	add	r3, r2
 80117c2:	009b      	lsls	r3, r3, #2
 80117c4:	440b      	add	r3, r1
 80117c6:	3324      	adds	r3, #36	@ 0x24
 80117c8:	2200      	movs	r2, #0
 80117ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80117cc:	4b1f      	ldr	r3, [pc, #124]	@ (801184c <USBD_CDC_DeInit+0x100>)
 80117ce:	781b      	ldrb	r3, [r3, #0]
 80117d0:	f003 020f 	and.w	r2, r3, #15
 80117d4:	6879      	ldr	r1, [r7, #4]
 80117d6:	4613      	mov	r3, r2
 80117d8:	009b      	lsls	r3, r3, #2
 80117da:	4413      	add	r3, r2
 80117dc:	009b      	lsls	r3, r3, #2
 80117de:	440b      	add	r3, r1
 80117e0:	3326      	adds	r3, #38	@ 0x26
 80117e2:	2200      	movs	r2, #0
 80117e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	32b0      	adds	r2, #176	@ 0xb0
 80117f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d01f      	beq.n	8011838 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	33b0      	adds	r3, #176	@ 0xb0
 8011802:	009b      	lsls	r3, r3, #2
 8011804:	4413      	add	r3, r2
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	32b0      	adds	r2, #176	@ 0xb0
 8011816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801181a:	4618      	mov	r0, r3
 801181c:	f002 fbce 	bl	8013fbc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	32b0      	adds	r2, #176	@ 0xb0
 801182a:	2100      	movs	r1, #0
 801182c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2200      	movs	r2, #0
 8011834:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011838:	2300      	movs	r3, #0
}
 801183a:	4618      	mov	r0, r3
 801183c:	3708      	adds	r7, #8
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}
 8011842:	bf00      	nop
 8011844:	240000af 	.word	0x240000af
 8011848:	240000b0 	.word	0x240000b0
 801184c:	240000b1 	.word	0x240000b1

08011850 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b086      	sub	sp, #24
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	32b0      	adds	r2, #176	@ 0xb0
 8011864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011868:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801186a:	2300      	movs	r3, #0
 801186c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801186e:	2300      	movs	r3, #0
 8011870:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011872:	2300      	movs	r3, #0
 8011874:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d101      	bne.n	8011880 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801187c:	2303      	movs	r3, #3
 801187e:	e0bf      	b.n	8011a00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011888:	2b00      	cmp	r3, #0
 801188a:	d050      	beq.n	801192e <USBD_CDC_Setup+0xde>
 801188c:	2b20      	cmp	r3, #32
 801188e:	f040 80af 	bne.w	80119f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	88db      	ldrh	r3, [r3, #6]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d03a      	beq.n	8011910 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	b25b      	sxtb	r3, r3
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	da1b      	bge.n	80118dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80118aa:	687a      	ldr	r2, [r7, #4]
 80118ac:	33b0      	adds	r3, #176	@ 0xb0
 80118ae:	009b      	lsls	r3, r3, #2
 80118b0:	4413      	add	r3, r2
 80118b2:	685b      	ldr	r3, [r3, #4]
 80118b4:	689b      	ldr	r3, [r3, #8]
 80118b6:	683a      	ldr	r2, [r7, #0]
 80118b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80118ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80118bc:	683a      	ldr	r2, [r7, #0]
 80118be:	88d2      	ldrh	r2, [r2, #6]
 80118c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	88db      	ldrh	r3, [r3, #6]
 80118c6:	2b07      	cmp	r3, #7
 80118c8:	bf28      	it	cs
 80118ca:	2307      	movcs	r3, #7
 80118cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	89fa      	ldrh	r2, [r7, #14]
 80118d2:	4619      	mov	r1, r3
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f001 fdbd 	bl	8013454 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80118da:	e090      	b.n	80119fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	785a      	ldrb	r2, [r3, #1]
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	88db      	ldrh	r3, [r3, #6]
 80118ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80118ec:	d803      	bhi.n	80118f6 <USBD_CDC_Setup+0xa6>
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	88db      	ldrh	r3, [r3, #6]
 80118f2:	b2da      	uxtb	r2, r3
 80118f4:	e000      	b.n	80118f8 <USBD_CDC_Setup+0xa8>
 80118f6:	2240      	movs	r2, #64	@ 0x40
 80118f8:	693b      	ldr	r3, [r7, #16]
 80118fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80118fe:	6939      	ldr	r1, [r7, #16]
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8011906:	461a      	mov	r2, r3
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f001 fdcf 	bl	80134ac <USBD_CtlPrepareRx>
      break;
 801190e:	e076      	b.n	80119fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011916:	687a      	ldr	r2, [r7, #4]
 8011918:	33b0      	adds	r3, #176	@ 0xb0
 801191a:	009b      	lsls	r3, r3, #2
 801191c:	4413      	add	r3, r2
 801191e:	685b      	ldr	r3, [r3, #4]
 8011920:	689b      	ldr	r3, [r3, #8]
 8011922:	683a      	ldr	r2, [r7, #0]
 8011924:	7850      	ldrb	r0, [r2, #1]
 8011926:	2200      	movs	r2, #0
 8011928:	6839      	ldr	r1, [r7, #0]
 801192a:	4798      	blx	r3
      break;
 801192c:	e067      	b.n	80119fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	785b      	ldrb	r3, [r3, #1]
 8011932:	2b0b      	cmp	r3, #11
 8011934:	d851      	bhi.n	80119da <USBD_CDC_Setup+0x18a>
 8011936:	a201      	add	r2, pc, #4	@ (adr r2, 801193c <USBD_CDC_Setup+0xec>)
 8011938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801193c:	0801196d 	.word	0x0801196d
 8011940:	080119e9 	.word	0x080119e9
 8011944:	080119db 	.word	0x080119db
 8011948:	080119db 	.word	0x080119db
 801194c:	080119db 	.word	0x080119db
 8011950:	080119db 	.word	0x080119db
 8011954:	080119db 	.word	0x080119db
 8011958:	080119db 	.word	0x080119db
 801195c:	080119db 	.word	0x080119db
 8011960:	080119db 	.word	0x080119db
 8011964:	08011997 	.word	0x08011997
 8011968:	080119c1 	.word	0x080119c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011972:	b2db      	uxtb	r3, r3
 8011974:	2b03      	cmp	r3, #3
 8011976:	d107      	bne.n	8011988 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011978:	f107 030a 	add.w	r3, r7, #10
 801197c:	2202      	movs	r2, #2
 801197e:	4619      	mov	r1, r3
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f001 fd67 	bl	8013454 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011986:	e032      	b.n	80119ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011988:	6839      	ldr	r1, [r7, #0]
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f001 fce5 	bl	801335a <USBD_CtlError>
            ret = USBD_FAIL;
 8011990:	2303      	movs	r3, #3
 8011992:	75fb      	strb	r3, [r7, #23]
          break;
 8011994:	e02b      	b.n	80119ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801199c:	b2db      	uxtb	r3, r3
 801199e:	2b03      	cmp	r3, #3
 80119a0:	d107      	bne.n	80119b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80119a2:	f107 030d 	add.w	r3, r7, #13
 80119a6:	2201      	movs	r2, #1
 80119a8:	4619      	mov	r1, r3
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f001 fd52 	bl	8013454 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80119b0:	e01d      	b.n	80119ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80119b2:	6839      	ldr	r1, [r7, #0]
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f001 fcd0 	bl	801335a <USBD_CtlError>
            ret = USBD_FAIL;
 80119ba:	2303      	movs	r3, #3
 80119bc:	75fb      	strb	r3, [r7, #23]
          break;
 80119be:	e016      	b.n	80119ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80119c6:	b2db      	uxtb	r3, r3
 80119c8:	2b03      	cmp	r3, #3
 80119ca:	d00f      	beq.n	80119ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80119cc:	6839      	ldr	r1, [r7, #0]
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f001 fcc3 	bl	801335a <USBD_CtlError>
            ret = USBD_FAIL;
 80119d4:	2303      	movs	r3, #3
 80119d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80119d8:	e008      	b.n	80119ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80119da:	6839      	ldr	r1, [r7, #0]
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f001 fcbc 	bl	801335a <USBD_CtlError>
          ret = USBD_FAIL;
 80119e2:	2303      	movs	r3, #3
 80119e4:	75fb      	strb	r3, [r7, #23]
          break;
 80119e6:	e002      	b.n	80119ee <USBD_CDC_Setup+0x19e>
          break;
 80119e8:	bf00      	nop
 80119ea:	e008      	b.n	80119fe <USBD_CDC_Setup+0x1ae>
          break;
 80119ec:	bf00      	nop
      }
      break;
 80119ee:	e006      	b.n	80119fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80119f0:	6839      	ldr	r1, [r7, #0]
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f001 fcb1 	bl	801335a <USBD_CtlError>
      ret = USBD_FAIL;
 80119f8:	2303      	movs	r3, #3
 80119fa:	75fb      	strb	r3, [r7, #23]
      break;
 80119fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80119fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3718      	adds	r7, #24
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}

08011a08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b084      	sub	sp, #16
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	460b      	mov	r3, r1
 8011a12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011a1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	32b0      	adds	r2, #176	@ 0xb0
 8011a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d101      	bne.n	8011a32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8011a2e:	2303      	movs	r3, #3
 8011a30:	e065      	b.n	8011afe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	32b0      	adds	r2, #176	@ 0xb0
 8011a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011a42:	78fb      	ldrb	r3, [r7, #3]
 8011a44:	f003 020f 	and.w	r2, r3, #15
 8011a48:	6879      	ldr	r1, [r7, #4]
 8011a4a:	4613      	mov	r3, r2
 8011a4c:	009b      	lsls	r3, r3, #2
 8011a4e:	4413      	add	r3, r2
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	440b      	add	r3, r1
 8011a54:	3318      	adds	r3, #24
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d02f      	beq.n	8011abc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8011a5c:	78fb      	ldrb	r3, [r7, #3]
 8011a5e:	f003 020f 	and.w	r2, r3, #15
 8011a62:	6879      	ldr	r1, [r7, #4]
 8011a64:	4613      	mov	r3, r2
 8011a66:	009b      	lsls	r3, r3, #2
 8011a68:	4413      	add	r3, r2
 8011a6a:	009b      	lsls	r3, r3, #2
 8011a6c:	440b      	add	r3, r1
 8011a6e:	3318      	adds	r3, #24
 8011a70:	681a      	ldr	r2, [r3, #0]
 8011a72:	78fb      	ldrb	r3, [r7, #3]
 8011a74:	f003 010f 	and.w	r1, r3, #15
 8011a78:	68f8      	ldr	r0, [r7, #12]
 8011a7a:	460b      	mov	r3, r1
 8011a7c:	00db      	lsls	r3, r3, #3
 8011a7e:	440b      	add	r3, r1
 8011a80:	009b      	lsls	r3, r3, #2
 8011a82:	4403      	add	r3, r0
 8011a84:	331c      	adds	r3, #28
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	fbb2 f1f3 	udiv	r1, r2, r3
 8011a8c:	fb01 f303 	mul.w	r3, r1, r3
 8011a90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d112      	bne.n	8011abc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8011a96:	78fb      	ldrb	r3, [r7, #3]
 8011a98:	f003 020f 	and.w	r2, r3, #15
 8011a9c:	6879      	ldr	r1, [r7, #4]
 8011a9e:	4613      	mov	r3, r2
 8011aa0:	009b      	lsls	r3, r3, #2
 8011aa2:	4413      	add	r3, r2
 8011aa4:	009b      	lsls	r3, r3, #2
 8011aa6:	440b      	add	r3, r1
 8011aa8:	3318      	adds	r3, #24
 8011aaa:	2200      	movs	r2, #0
 8011aac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011aae:	78f9      	ldrb	r1, [r7, #3]
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	f002 fa1e 	bl	8013ef6 <USBD_LL_Transmit>
 8011aba:	e01f      	b.n	8011afc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	2200      	movs	r2, #0
 8011ac0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011aca:	687a      	ldr	r2, [r7, #4]
 8011acc:	33b0      	adds	r3, #176	@ 0xb0
 8011ace:	009b      	lsls	r3, r3, #2
 8011ad0:	4413      	add	r3, r2
 8011ad2:	685b      	ldr	r3, [r3, #4]
 8011ad4:	691b      	ldr	r3, [r3, #16]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d010      	beq.n	8011afc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011ae0:	687a      	ldr	r2, [r7, #4]
 8011ae2:	33b0      	adds	r3, #176	@ 0xb0
 8011ae4:	009b      	lsls	r3, r3, #2
 8011ae6:	4413      	add	r3, r2
 8011ae8:	685b      	ldr	r3, [r3, #4]
 8011aea:	691b      	ldr	r3, [r3, #16]
 8011aec:	68ba      	ldr	r2, [r7, #8]
 8011aee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8011af2:	68ba      	ldr	r2, [r7, #8]
 8011af4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8011af8:	78fa      	ldrb	r2, [r7, #3]
 8011afa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011afc:	2300      	movs	r3, #0
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3710      	adds	r7, #16
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}

08011b06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011b06:	b580      	push	{r7, lr}
 8011b08:	b084      	sub	sp, #16
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
 8011b0e:	460b      	mov	r3, r1
 8011b10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	32b0      	adds	r2, #176	@ 0xb0
 8011b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	32b0      	adds	r2, #176	@ 0xb0
 8011b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d101      	bne.n	8011b38 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8011b34:	2303      	movs	r3, #3
 8011b36:	e01a      	b.n	8011b6e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011b38:	78fb      	ldrb	r3, [r7, #3]
 8011b3a:	4619      	mov	r1, r3
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f002 fa1c 	bl	8013f7a <USBD_LL_GetRxDataSize>
 8011b42:	4602      	mov	r2, r0
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011b50:	687a      	ldr	r2, [r7, #4]
 8011b52:	33b0      	adds	r3, #176	@ 0xb0
 8011b54:	009b      	lsls	r3, r3, #2
 8011b56:	4413      	add	r3, r2
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	68db      	ldr	r3, [r3, #12]
 8011b5c:	68fa      	ldr	r2, [r7, #12]
 8011b5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8011b62:	68fa      	ldr	r2, [r7, #12]
 8011b64:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8011b68:	4611      	mov	r1, r2
 8011b6a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011b6c:	2300      	movs	r3, #0
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3710      	adds	r7, #16
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}

08011b76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011b76:	b580      	push	{r7, lr}
 8011b78:	b084      	sub	sp, #16
 8011b7a:	af00      	add	r7, sp, #0
 8011b7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	32b0      	adds	r2, #176	@ 0xb0
 8011b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d101      	bne.n	8011b98 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011b94:	2303      	movs	r3, #3
 8011b96:	e024      	b.n	8011be2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011b9e:	687a      	ldr	r2, [r7, #4]
 8011ba0:	33b0      	adds	r3, #176	@ 0xb0
 8011ba2:	009b      	lsls	r3, r3, #2
 8011ba4:	4413      	add	r3, r2
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d019      	beq.n	8011be0 <USBD_CDC_EP0_RxReady+0x6a>
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8011bb2:	2bff      	cmp	r3, #255	@ 0xff
 8011bb4:	d014      	beq.n	8011be0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011bbc:	687a      	ldr	r2, [r7, #4]
 8011bbe:	33b0      	adds	r3, #176	@ 0xb0
 8011bc0:	009b      	lsls	r3, r3, #2
 8011bc2:	4413      	add	r3, r2
 8011bc4:	685b      	ldr	r3, [r3, #4]
 8011bc6:	689b      	ldr	r3, [r3, #8]
 8011bc8:	68fa      	ldr	r2, [r7, #12]
 8011bca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8011bce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8011bd0:	68fa      	ldr	r2, [r7, #12]
 8011bd2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011bd6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	22ff      	movs	r2, #255	@ 0xff
 8011bdc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8011be0:	2300      	movs	r3, #0
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3710      	adds	r7, #16
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
	...

08011bec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b086      	sub	sp, #24
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011bf4:	2182      	movs	r1, #130	@ 0x82
 8011bf6:	4818      	ldr	r0, [pc, #96]	@ (8011c58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011bf8:	f000 fd4f 	bl	801269a <USBD_GetEpDesc>
 8011bfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011bfe:	2101      	movs	r1, #1
 8011c00:	4815      	ldr	r0, [pc, #84]	@ (8011c58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011c02:	f000 fd4a 	bl	801269a <USBD_GetEpDesc>
 8011c06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011c08:	2181      	movs	r1, #129	@ 0x81
 8011c0a:	4813      	ldr	r0, [pc, #76]	@ (8011c58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011c0c:	f000 fd45 	bl	801269a <USBD_GetEpDesc>
 8011c10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d002      	beq.n	8011c1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	2210      	movs	r2, #16
 8011c1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d006      	beq.n	8011c32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	2200      	movs	r2, #0
 8011c28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011c2c:	711a      	strb	r2, [r3, #4]
 8011c2e:	2200      	movs	r2, #0
 8011c30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d006      	beq.n	8011c46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011c40:	711a      	strb	r2, [r3, #4]
 8011c42:	2200      	movs	r2, #0
 8011c44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2243      	movs	r2, #67	@ 0x43
 8011c4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011c4c:	4b02      	ldr	r3, [pc, #8]	@ (8011c58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3718      	adds	r7, #24
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}
 8011c56:	bf00      	nop
 8011c58:	2400006c 	.word	0x2400006c

08011c5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b086      	sub	sp, #24
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011c64:	2182      	movs	r1, #130	@ 0x82
 8011c66:	4818      	ldr	r0, [pc, #96]	@ (8011cc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011c68:	f000 fd17 	bl	801269a <USBD_GetEpDesc>
 8011c6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011c6e:	2101      	movs	r1, #1
 8011c70:	4815      	ldr	r0, [pc, #84]	@ (8011cc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011c72:	f000 fd12 	bl	801269a <USBD_GetEpDesc>
 8011c76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011c78:	2181      	movs	r1, #129	@ 0x81
 8011c7a:	4813      	ldr	r0, [pc, #76]	@ (8011cc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011c7c:	f000 fd0d 	bl	801269a <USBD_GetEpDesc>
 8011c80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d002      	beq.n	8011c8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	2210      	movs	r2, #16
 8011c8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d006      	beq.n	8011ca2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	2200      	movs	r2, #0
 8011c98:	711a      	strb	r2, [r3, #4]
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	f042 0202 	orr.w	r2, r2, #2
 8011ca0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d006      	beq.n	8011cb6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	2200      	movs	r2, #0
 8011cac:	711a      	strb	r2, [r3, #4]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	f042 0202 	orr.w	r2, r2, #2
 8011cb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	2243      	movs	r2, #67	@ 0x43
 8011cba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011cbc:	4b02      	ldr	r3, [pc, #8]	@ (8011cc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	3718      	adds	r7, #24
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	2400006c 	.word	0x2400006c

08011ccc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b086      	sub	sp, #24
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011cd4:	2182      	movs	r1, #130	@ 0x82
 8011cd6:	4818      	ldr	r0, [pc, #96]	@ (8011d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011cd8:	f000 fcdf 	bl	801269a <USBD_GetEpDesc>
 8011cdc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011cde:	2101      	movs	r1, #1
 8011ce0:	4815      	ldr	r0, [pc, #84]	@ (8011d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011ce2:	f000 fcda 	bl	801269a <USBD_GetEpDesc>
 8011ce6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011ce8:	2181      	movs	r1, #129	@ 0x81
 8011cea:	4813      	ldr	r0, [pc, #76]	@ (8011d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011cec:	f000 fcd5 	bl	801269a <USBD_GetEpDesc>
 8011cf0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d002      	beq.n	8011cfe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	2210      	movs	r2, #16
 8011cfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d006      	beq.n	8011d12 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	2200      	movs	r2, #0
 8011d08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011d0c:	711a      	strb	r2, [r3, #4]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d006      	beq.n	8011d26 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011d20:	711a      	strb	r2, [r3, #4]
 8011d22:	2200      	movs	r2, #0
 8011d24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2243      	movs	r2, #67	@ 0x43
 8011d2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011d2c:	4b02      	ldr	r3, [pc, #8]	@ (8011d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3718      	adds	r7, #24
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	2400006c 	.word	0x2400006c

08011d3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	220a      	movs	r2, #10
 8011d48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011d4a:	4b03      	ldr	r3, [pc, #12]	@ (8011d58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	370c      	adds	r7, #12
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr
 8011d58:	24000028 	.word	0x24000028

08011d5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011d5c:	b480      	push	{r7}
 8011d5e:	b083      	sub	sp, #12
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d101      	bne.n	8011d70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011d6c:	2303      	movs	r3, #3
 8011d6e:	e009      	b.n	8011d84 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011d76:	687a      	ldr	r2, [r7, #4]
 8011d78:	33b0      	adds	r3, #176	@ 0xb0
 8011d7a:	009b      	lsls	r3, r3, #2
 8011d7c:	4413      	add	r3, r2
 8011d7e:	683a      	ldr	r2, [r7, #0]
 8011d80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011d82:	2300      	movs	r3, #0
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	370c      	adds	r7, #12
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8e:	4770      	bx	lr

08011d90 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011d90:	b480      	push	{r7}
 8011d92:	b087      	sub	sp, #28
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	32b0      	adds	r2, #176	@ 0xb0
 8011da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011daa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d101      	bne.n	8011db6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011db2:	2303      	movs	r3, #3
 8011db4:	e008      	b.n	8011dc8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	68ba      	ldr	r2, [r7, #8]
 8011dba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8011dbe:	697b      	ldr	r3, [r7, #20]
 8011dc0:	687a      	ldr	r2, [r7, #4]
 8011dc2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8011dc6:	2300      	movs	r3, #0
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	371c      	adds	r7, #28
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd2:	4770      	bx	lr

08011dd4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	b085      	sub	sp, #20
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	32b0      	adds	r2, #176	@ 0xb0
 8011de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d101      	bne.n	8011df8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011df4:	2303      	movs	r3, #3
 8011df6:	e004      	b.n	8011e02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	683a      	ldr	r2, [r7, #0]
 8011dfc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8011e00:	2300      	movs	r3, #0
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3714      	adds	r7, #20
 8011e06:	46bd      	mov	sp, r7
 8011e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0c:	4770      	bx	lr
	...

08011e10 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b084      	sub	sp, #16
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	32b0      	adds	r2, #176	@ 0xb0
 8011e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e26:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8011e28:	2301      	movs	r3, #1
 8011e2a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d101      	bne.n	8011e36 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011e32:	2303      	movs	r3, #3
 8011e34:	e025      	b.n	8011e82 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d11f      	bne.n	8011e80 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	2201      	movs	r2, #1
 8011e44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8011e48:	4b10      	ldr	r3, [pc, #64]	@ (8011e8c <USBD_CDC_TransmitPacket+0x7c>)
 8011e4a:	781b      	ldrb	r3, [r3, #0]
 8011e4c:	f003 020f 	and.w	r2, r3, #15
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	4613      	mov	r3, r2
 8011e5a:	009b      	lsls	r3, r3, #2
 8011e5c:	4413      	add	r3, r2
 8011e5e:	009b      	lsls	r3, r3, #2
 8011e60:	4403      	add	r3, r0
 8011e62:	3318      	adds	r3, #24
 8011e64:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8011e66:	4b09      	ldr	r3, [pc, #36]	@ (8011e8c <USBD_CDC_TransmitPacket+0x7c>)
 8011e68:	7819      	ldrb	r1, [r3, #0]
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	f002 f83d 	bl	8013ef6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	3710      	adds	r7, #16
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	240000af 	.word	0x240000af

08011e90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b084      	sub	sp, #16
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	32b0      	adds	r2, #176	@ 0xb0
 8011ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ea6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	32b0      	adds	r2, #176	@ 0xb0
 8011eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d101      	bne.n	8011ebe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8011eba:	2303      	movs	r3, #3
 8011ebc:	e018      	b.n	8011ef0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	7c1b      	ldrb	r3, [r3, #16]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d10a      	bne.n	8011edc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8011ef8 <USBD_CDC_ReceivePacket+0x68>)
 8011ec8:	7819      	ldrb	r1, [r3, #0]
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011ed0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f002 f82f 	bl	8013f38 <USBD_LL_PrepareReceive>
 8011eda:	e008      	b.n	8011eee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011edc:	4b06      	ldr	r3, [pc, #24]	@ (8011ef8 <USBD_CDC_ReceivePacket+0x68>)
 8011ede:	7819      	ldrb	r1, [r3, #0]
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011ee6:	2340      	movs	r3, #64	@ 0x40
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	f002 f825 	bl	8013f38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011eee:	2300      	movs	r3, #0
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3710      	adds	r7, #16
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}
 8011ef8:	240000b0 	.word	0x240000b0

08011efc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b086      	sub	sp, #24
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	60f8      	str	r0, [r7, #12]
 8011f04:	60b9      	str	r1, [r7, #8]
 8011f06:	4613      	mov	r3, r2
 8011f08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d101      	bne.n	8011f14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011f10:	2303      	movs	r3, #3
 8011f12:	e01f      	b.n	8011f54 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	2200      	movs	r2, #0
 8011f18:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	2200      	movs	r2, #0
 8011f28:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d003      	beq.n	8011f3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	68ba      	ldr	r2, [r7, #8]
 8011f36:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2201      	movs	r2, #1
 8011f3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	79fa      	ldrb	r2, [r7, #7]
 8011f46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011f48:	68f8      	ldr	r0, [r7, #12]
 8011f4a:	f001 fe9b 	bl	8013c84 <USBD_LL_Init>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	3718      	adds	r7, #24
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}

08011f5c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b084      	sub	sp, #16
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011f66:	2300      	movs	r3, #0
 8011f68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d101      	bne.n	8011f74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011f70:	2303      	movs	r3, #3
 8011f72:	e025      	b.n	8011fc0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	683a      	ldr	r2, [r7, #0]
 8011f78:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	32ae      	adds	r2, #174	@ 0xae
 8011f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d00f      	beq.n	8011fb0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	32ae      	adds	r2, #174	@ 0xae
 8011f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fa0:	f107 020e 	add.w	r2, r7, #14
 8011fa4:	4610      	mov	r0, r2
 8011fa6:	4798      	blx	r3
 8011fa8:	4602      	mov	r2, r0
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011fb6:	1c5a      	adds	r2, r3, #1
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8011fbe:	2300      	movs	r3, #0
}
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3710      	adds	r7, #16
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}

08011fc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b082      	sub	sp, #8
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f001 fea7 	bl	8013d24 <USBD_LL_Start>
 8011fd6:	4603      	mov	r3, r0
}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	3708      	adds	r7, #8
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}

08011fe0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	b083      	sub	sp, #12
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011fe8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	370c      	adds	r7, #12
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff4:	4770      	bx	lr

08011ff6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011ff6:	b580      	push	{r7, lr}
 8011ff8:	b084      	sub	sp, #16
 8011ffa:	af00      	add	r7, sp, #0
 8011ffc:	6078      	str	r0, [r7, #4]
 8011ffe:	460b      	mov	r3, r1
 8012000:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012002:	2300      	movs	r3, #0
 8012004:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801200c:	2b00      	cmp	r3, #0
 801200e:	d009      	beq.n	8012024 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	78fa      	ldrb	r2, [r7, #3]
 801201a:	4611      	mov	r1, r2
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	4798      	blx	r3
 8012020:	4603      	mov	r3, r0
 8012022:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012024:	7bfb      	ldrb	r3, [r7, #15]
}
 8012026:	4618      	mov	r0, r3
 8012028:	3710      	adds	r7, #16
 801202a:	46bd      	mov	sp, r7
 801202c:	bd80      	pop	{r7, pc}

0801202e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801202e:	b580      	push	{r7, lr}
 8012030:	b084      	sub	sp, #16
 8012032:	af00      	add	r7, sp, #0
 8012034:	6078      	str	r0, [r7, #4]
 8012036:	460b      	mov	r3, r1
 8012038:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801203a:	2300      	movs	r3, #0
 801203c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012044:	685b      	ldr	r3, [r3, #4]
 8012046:	78fa      	ldrb	r2, [r7, #3]
 8012048:	4611      	mov	r1, r2
 801204a:	6878      	ldr	r0, [r7, #4]
 801204c:	4798      	blx	r3
 801204e:	4603      	mov	r3, r0
 8012050:	2b00      	cmp	r3, #0
 8012052:	d001      	beq.n	8012058 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012054:	2303      	movs	r3, #3
 8012056:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012058:	7bfb      	ldrb	r3, [r7, #15]
}
 801205a:	4618      	mov	r0, r3
 801205c:	3710      	adds	r7, #16
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}

08012062 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012062:	b580      	push	{r7, lr}
 8012064:	b084      	sub	sp, #16
 8012066:	af00      	add	r7, sp, #0
 8012068:	6078      	str	r0, [r7, #4]
 801206a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012072:	6839      	ldr	r1, [r7, #0]
 8012074:	4618      	mov	r0, r3
 8012076:	f001 f936 	bl	80132e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2201      	movs	r2, #1
 801207e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012088:	461a      	mov	r2, r3
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012096:	f003 031f 	and.w	r3, r3, #31
 801209a:	2b02      	cmp	r3, #2
 801209c:	d01a      	beq.n	80120d4 <USBD_LL_SetupStage+0x72>
 801209e:	2b02      	cmp	r3, #2
 80120a0:	d822      	bhi.n	80120e8 <USBD_LL_SetupStage+0x86>
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d002      	beq.n	80120ac <USBD_LL_SetupStage+0x4a>
 80120a6:	2b01      	cmp	r3, #1
 80120a8:	d00a      	beq.n	80120c0 <USBD_LL_SetupStage+0x5e>
 80120aa:	e01d      	b.n	80120e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80120b2:	4619      	mov	r1, r3
 80120b4:	6878      	ldr	r0, [r7, #4]
 80120b6:	f000 fb63 	bl	8012780 <USBD_StdDevReq>
 80120ba:	4603      	mov	r3, r0
 80120bc:	73fb      	strb	r3, [r7, #15]
      break;
 80120be:	e020      	b.n	8012102 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80120c6:	4619      	mov	r1, r3
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f000 fbcb 	bl	8012864 <USBD_StdItfReq>
 80120ce:	4603      	mov	r3, r0
 80120d0:	73fb      	strb	r3, [r7, #15]
      break;
 80120d2:	e016      	b.n	8012102 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80120da:	4619      	mov	r1, r3
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f000 fc2d 	bl	801293c <USBD_StdEPReq>
 80120e2:	4603      	mov	r3, r0
 80120e4:	73fb      	strb	r3, [r7, #15]
      break;
 80120e6:	e00c      	b.n	8012102 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80120ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80120f2:	b2db      	uxtb	r3, r3
 80120f4:	4619      	mov	r1, r3
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f001 fe74 	bl	8013de4 <USBD_LL_StallEP>
 80120fc:	4603      	mov	r3, r0
 80120fe:	73fb      	strb	r3, [r7, #15]
      break;
 8012100:	bf00      	nop
  }

  return ret;
 8012102:	7bfb      	ldrb	r3, [r7, #15]
}
 8012104:	4618      	mov	r0, r3
 8012106:	3710      	adds	r7, #16
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}

0801210c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b086      	sub	sp, #24
 8012110:	af00      	add	r7, sp, #0
 8012112:	60f8      	str	r0, [r7, #12]
 8012114:	460b      	mov	r3, r1
 8012116:	607a      	str	r2, [r7, #4]
 8012118:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801211a:	2300      	movs	r3, #0
 801211c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801211e:	7afb      	ldrb	r3, [r7, #11]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d16e      	bne.n	8012202 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801212a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012132:	2b03      	cmp	r3, #3
 8012134:	f040 8098 	bne.w	8012268 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	689a      	ldr	r2, [r3, #8]
 801213c:	693b      	ldr	r3, [r7, #16]
 801213e:	68db      	ldr	r3, [r3, #12]
 8012140:	429a      	cmp	r2, r3
 8012142:	d913      	bls.n	801216c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012144:	693b      	ldr	r3, [r7, #16]
 8012146:	689a      	ldr	r2, [r3, #8]
 8012148:	693b      	ldr	r3, [r7, #16]
 801214a:	68db      	ldr	r3, [r3, #12]
 801214c:	1ad2      	subs	r2, r2, r3
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	68da      	ldr	r2, [r3, #12]
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	689b      	ldr	r3, [r3, #8]
 801215a:	4293      	cmp	r3, r2
 801215c:	bf28      	it	cs
 801215e:	4613      	movcs	r3, r2
 8012160:	461a      	mov	r2, r3
 8012162:	6879      	ldr	r1, [r7, #4]
 8012164:	68f8      	ldr	r0, [r7, #12]
 8012166:	f001 f9be 	bl	80134e6 <USBD_CtlContinueRx>
 801216a:	e07d      	b.n	8012268 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012172:	f003 031f 	and.w	r3, r3, #31
 8012176:	2b02      	cmp	r3, #2
 8012178:	d014      	beq.n	80121a4 <USBD_LL_DataOutStage+0x98>
 801217a:	2b02      	cmp	r3, #2
 801217c:	d81d      	bhi.n	80121ba <USBD_LL_DataOutStage+0xae>
 801217e:	2b00      	cmp	r3, #0
 8012180:	d002      	beq.n	8012188 <USBD_LL_DataOutStage+0x7c>
 8012182:	2b01      	cmp	r3, #1
 8012184:	d003      	beq.n	801218e <USBD_LL_DataOutStage+0x82>
 8012186:	e018      	b.n	80121ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012188:	2300      	movs	r3, #0
 801218a:	75bb      	strb	r3, [r7, #22]
            break;
 801218c:	e018      	b.n	80121c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012194:	b2db      	uxtb	r3, r3
 8012196:	4619      	mov	r1, r3
 8012198:	68f8      	ldr	r0, [r7, #12]
 801219a:	f000 fa64 	bl	8012666 <USBD_CoreFindIF>
 801219e:	4603      	mov	r3, r0
 80121a0:	75bb      	strb	r3, [r7, #22]
            break;
 80121a2:	e00d      	b.n	80121c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80121aa:	b2db      	uxtb	r3, r3
 80121ac:	4619      	mov	r1, r3
 80121ae:	68f8      	ldr	r0, [r7, #12]
 80121b0:	f000 fa66 	bl	8012680 <USBD_CoreFindEP>
 80121b4:	4603      	mov	r3, r0
 80121b6:	75bb      	strb	r3, [r7, #22]
            break;
 80121b8:	e002      	b.n	80121c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80121ba:	2300      	movs	r3, #0
 80121bc:	75bb      	strb	r3, [r7, #22]
            break;
 80121be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80121c0:	7dbb      	ldrb	r3, [r7, #22]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d119      	bne.n	80121fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80121cc:	b2db      	uxtb	r3, r3
 80121ce:	2b03      	cmp	r3, #3
 80121d0:	d113      	bne.n	80121fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80121d2:	7dba      	ldrb	r2, [r7, #22]
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	32ae      	adds	r2, #174	@ 0xae
 80121d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121dc:	691b      	ldr	r3, [r3, #16]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d00b      	beq.n	80121fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80121e2:	7dba      	ldrb	r2, [r7, #22]
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80121ea:	7dba      	ldrb	r2, [r7, #22]
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	32ae      	adds	r2, #174	@ 0xae
 80121f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121f4:	691b      	ldr	r3, [r3, #16]
 80121f6:	68f8      	ldr	r0, [r7, #12]
 80121f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80121fa:	68f8      	ldr	r0, [r7, #12]
 80121fc:	f001 f984 	bl	8013508 <USBD_CtlSendStatus>
 8012200:	e032      	b.n	8012268 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012202:	7afb      	ldrb	r3, [r7, #11]
 8012204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012208:	b2db      	uxtb	r3, r3
 801220a:	4619      	mov	r1, r3
 801220c:	68f8      	ldr	r0, [r7, #12]
 801220e:	f000 fa37 	bl	8012680 <USBD_CoreFindEP>
 8012212:	4603      	mov	r3, r0
 8012214:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012216:	7dbb      	ldrb	r3, [r7, #22]
 8012218:	2bff      	cmp	r3, #255	@ 0xff
 801221a:	d025      	beq.n	8012268 <USBD_LL_DataOutStage+0x15c>
 801221c:	7dbb      	ldrb	r3, [r7, #22]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d122      	bne.n	8012268 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012228:	b2db      	uxtb	r3, r3
 801222a:	2b03      	cmp	r3, #3
 801222c:	d117      	bne.n	801225e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801222e:	7dba      	ldrb	r2, [r7, #22]
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	32ae      	adds	r2, #174	@ 0xae
 8012234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012238:	699b      	ldr	r3, [r3, #24]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d00f      	beq.n	801225e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801223e:	7dba      	ldrb	r2, [r7, #22]
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012246:	7dba      	ldrb	r2, [r7, #22]
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	32ae      	adds	r2, #174	@ 0xae
 801224c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012250:	699b      	ldr	r3, [r3, #24]
 8012252:	7afa      	ldrb	r2, [r7, #11]
 8012254:	4611      	mov	r1, r2
 8012256:	68f8      	ldr	r0, [r7, #12]
 8012258:	4798      	blx	r3
 801225a:	4603      	mov	r3, r0
 801225c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801225e:	7dfb      	ldrb	r3, [r7, #23]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d001      	beq.n	8012268 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012264:	7dfb      	ldrb	r3, [r7, #23]
 8012266:	e000      	b.n	801226a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012268:	2300      	movs	r3, #0
}
 801226a:	4618      	mov	r0, r3
 801226c:	3718      	adds	r7, #24
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}

08012272 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012272:	b580      	push	{r7, lr}
 8012274:	b086      	sub	sp, #24
 8012276:	af00      	add	r7, sp, #0
 8012278:	60f8      	str	r0, [r7, #12]
 801227a:	460b      	mov	r3, r1
 801227c:	607a      	str	r2, [r7, #4]
 801227e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8012280:	7afb      	ldrb	r3, [r7, #11]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d16f      	bne.n	8012366 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	3314      	adds	r3, #20
 801228a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012292:	2b02      	cmp	r3, #2
 8012294:	d15a      	bne.n	801234c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	689a      	ldr	r2, [r3, #8]
 801229a:	693b      	ldr	r3, [r7, #16]
 801229c:	68db      	ldr	r3, [r3, #12]
 801229e:	429a      	cmp	r2, r3
 80122a0:	d914      	bls.n	80122cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80122a2:	693b      	ldr	r3, [r7, #16]
 80122a4:	689a      	ldr	r2, [r3, #8]
 80122a6:	693b      	ldr	r3, [r7, #16]
 80122a8:	68db      	ldr	r3, [r3, #12]
 80122aa:	1ad2      	subs	r2, r2, r3
 80122ac:	693b      	ldr	r3, [r7, #16]
 80122ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80122b0:	693b      	ldr	r3, [r7, #16]
 80122b2:	689b      	ldr	r3, [r3, #8]
 80122b4:	461a      	mov	r2, r3
 80122b6:	6879      	ldr	r1, [r7, #4]
 80122b8:	68f8      	ldr	r0, [r7, #12]
 80122ba:	f001 f8e6 	bl	801348a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80122be:	2300      	movs	r3, #0
 80122c0:	2200      	movs	r2, #0
 80122c2:	2100      	movs	r1, #0
 80122c4:	68f8      	ldr	r0, [r7, #12]
 80122c6:	f001 fe37 	bl	8013f38 <USBD_LL_PrepareReceive>
 80122ca:	e03f      	b.n	801234c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80122cc:	693b      	ldr	r3, [r7, #16]
 80122ce:	68da      	ldr	r2, [r3, #12]
 80122d0:	693b      	ldr	r3, [r7, #16]
 80122d2:	689b      	ldr	r3, [r3, #8]
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d11c      	bne.n	8012312 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80122d8:	693b      	ldr	r3, [r7, #16]
 80122da:	685a      	ldr	r2, [r3, #4]
 80122dc:	693b      	ldr	r3, [r7, #16]
 80122de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d316      	bcc.n	8012312 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80122e4:	693b      	ldr	r3, [r7, #16]
 80122e6:	685a      	ldr	r2, [r3, #4]
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d20f      	bcs.n	8012312 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80122f2:	2200      	movs	r2, #0
 80122f4:	2100      	movs	r1, #0
 80122f6:	68f8      	ldr	r0, [r7, #12]
 80122f8:	f001 f8c7 	bl	801348a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	2200      	movs	r2, #0
 8012300:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012304:	2300      	movs	r3, #0
 8012306:	2200      	movs	r2, #0
 8012308:	2100      	movs	r1, #0
 801230a:	68f8      	ldr	r0, [r7, #12]
 801230c:	f001 fe14 	bl	8013f38 <USBD_LL_PrepareReceive>
 8012310:	e01c      	b.n	801234c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012318:	b2db      	uxtb	r3, r3
 801231a:	2b03      	cmp	r3, #3
 801231c:	d10f      	bne.n	801233e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012324:	68db      	ldr	r3, [r3, #12]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d009      	beq.n	801233e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	2200      	movs	r2, #0
 801232e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012338:	68db      	ldr	r3, [r3, #12]
 801233a:	68f8      	ldr	r0, [r7, #12]
 801233c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801233e:	2180      	movs	r1, #128	@ 0x80
 8012340:	68f8      	ldr	r0, [r7, #12]
 8012342:	f001 fd4f 	bl	8013de4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012346:	68f8      	ldr	r0, [r7, #12]
 8012348:	f001 f8f1 	bl	801352e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8012352:	2b00      	cmp	r3, #0
 8012354:	d03a      	beq.n	80123cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012356:	68f8      	ldr	r0, [r7, #12]
 8012358:	f7ff fe42 	bl	8011fe0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	2200      	movs	r2, #0
 8012360:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012364:	e032      	b.n	80123cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012366:	7afb      	ldrb	r3, [r7, #11]
 8012368:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801236c:	b2db      	uxtb	r3, r3
 801236e:	4619      	mov	r1, r3
 8012370:	68f8      	ldr	r0, [r7, #12]
 8012372:	f000 f985 	bl	8012680 <USBD_CoreFindEP>
 8012376:	4603      	mov	r3, r0
 8012378:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801237a:	7dfb      	ldrb	r3, [r7, #23]
 801237c:	2bff      	cmp	r3, #255	@ 0xff
 801237e:	d025      	beq.n	80123cc <USBD_LL_DataInStage+0x15a>
 8012380:	7dfb      	ldrb	r3, [r7, #23]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d122      	bne.n	80123cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801238c:	b2db      	uxtb	r3, r3
 801238e:	2b03      	cmp	r3, #3
 8012390:	d11c      	bne.n	80123cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8012392:	7dfa      	ldrb	r2, [r7, #23]
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	32ae      	adds	r2, #174	@ 0xae
 8012398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801239c:	695b      	ldr	r3, [r3, #20]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d014      	beq.n	80123cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80123a2:	7dfa      	ldrb	r2, [r7, #23]
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80123aa:	7dfa      	ldrb	r2, [r7, #23]
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	32ae      	adds	r2, #174	@ 0xae
 80123b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123b4:	695b      	ldr	r3, [r3, #20]
 80123b6:	7afa      	ldrb	r2, [r7, #11]
 80123b8:	4611      	mov	r1, r2
 80123ba:	68f8      	ldr	r0, [r7, #12]
 80123bc:	4798      	blx	r3
 80123be:	4603      	mov	r3, r0
 80123c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80123c2:	7dbb      	ldrb	r3, [r7, #22]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d001      	beq.n	80123cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80123c8:	7dbb      	ldrb	r3, [r7, #22]
 80123ca:	e000      	b.n	80123ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80123cc:	2300      	movs	r3, #0
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3718      	adds	r7, #24
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}

080123d6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80123d6:	b580      	push	{r7, lr}
 80123d8:	b084      	sub	sp, #16
 80123da:	af00      	add	r7, sp, #0
 80123dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80123de:	2300      	movs	r3, #0
 80123e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2201      	movs	r2, #1
 80123e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2200      	movs	r2, #0
 80123ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2200      	movs	r2, #0
 80123f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	2200      	movs	r2, #0
 80123fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2200      	movs	r2, #0
 8012404:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801240e:	2b00      	cmp	r3, #0
 8012410:	d014      	beq.n	801243c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012418:	685b      	ldr	r3, [r3, #4]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d00e      	beq.n	801243c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012424:	685b      	ldr	r3, [r3, #4]
 8012426:	687a      	ldr	r2, [r7, #4]
 8012428:	6852      	ldr	r2, [r2, #4]
 801242a:	b2d2      	uxtb	r2, r2
 801242c:	4611      	mov	r1, r2
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	4798      	blx	r3
 8012432:	4603      	mov	r3, r0
 8012434:	2b00      	cmp	r3, #0
 8012436:	d001      	beq.n	801243c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012438:	2303      	movs	r3, #3
 801243a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801243c:	2340      	movs	r3, #64	@ 0x40
 801243e:	2200      	movs	r2, #0
 8012440:	2100      	movs	r1, #0
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f001 fc89 	bl	8013d5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2201      	movs	r2, #1
 801244c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2240      	movs	r2, #64	@ 0x40
 8012454:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012458:	2340      	movs	r3, #64	@ 0x40
 801245a:	2200      	movs	r2, #0
 801245c:	2180      	movs	r1, #128	@ 0x80
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f001 fc7b 	bl	8013d5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2201      	movs	r2, #1
 8012468:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	2240      	movs	r2, #64	@ 0x40
 801246e:	621a      	str	r2, [r3, #32]

  return ret;
 8012470:	7bfb      	ldrb	r3, [r7, #15]
}
 8012472:	4618      	mov	r0, r3
 8012474:	3710      	adds	r7, #16
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}

0801247a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801247a:	b480      	push	{r7}
 801247c:	b083      	sub	sp, #12
 801247e:	af00      	add	r7, sp, #0
 8012480:	6078      	str	r0, [r7, #4]
 8012482:	460b      	mov	r3, r1
 8012484:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	78fa      	ldrb	r2, [r7, #3]
 801248a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801248c:	2300      	movs	r3, #0
}
 801248e:	4618      	mov	r0, r3
 8012490:	370c      	adds	r7, #12
 8012492:	46bd      	mov	sp, r7
 8012494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012498:	4770      	bx	lr

0801249a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801249a:	b480      	push	{r7}
 801249c:	b083      	sub	sp, #12
 801249e:	af00      	add	r7, sp, #0
 80124a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80124a8:	b2db      	uxtb	r3, r3
 80124aa:	2b04      	cmp	r3, #4
 80124ac:	d006      	beq.n	80124bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80124b4:	b2da      	uxtb	r2, r3
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	2204      	movs	r2, #4
 80124c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80124c4:	2300      	movs	r3, #0
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	370c      	adds	r7, #12
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr

080124d2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80124d2:	b480      	push	{r7}
 80124d4:	b083      	sub	sp, #12
 80124d6:	af00      	add	r7, sp, #0
 80124d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80124e0:	b2db      	uxtb	r3, r3
 80124e2:	2b04      	cmp	r3, #4
 80124e4:	d106      	bne.n	80124f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80124ec:	b2da      	uxtb	r2, r3
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80124f4:	2300      	movs	r3, #0
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	370c      	adds	r7, #12
 80124fa:	46bd      	mov	sp, r7
 80124fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012500:	4770      	bx	lr

08012502 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012502:	b580      	push	{r7, lr}
 8012504:	b082      	sub	sp, #8
 8012506:	af00      	add	r7, sp, #0
 8012508:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012510:	b2db      	uxtb	r3, r3
 8012512:	2b03      	cmp	r3, #3
 8012514:	d110      	bne.n	8012538 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801251c:	2b00      	cmp	r3, #0
 801251e:	d00b      	beq.n	8012538 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012526:	69db      	ldr	r3, [r3, #28]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d005      	beq.n	8012538 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012532:	69db      	ldr	r3, [r3, #28]
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012538:	2300      	movs	r3, #0
}
 801253a:	4618      	mov	r0, r3
 801253c:	3708      	adds	r7, #8
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}

08012542 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012542:	b580      	push	{r7, lr}
 8012544:	b082      	sub	sp, #8
 8012546:	af00      	add	r7, sp, #0
 8012548:	6078      	str	r0, [r7, #4]
 801254a:	460b      	mov	r3, r1
 801254c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	32ae      	adds	r2, #174	@ 0xae
 8012558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d101      	bne.n	8012564 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8012560:	2303      	movs	r3, #3
 8012562:	e01c      	b.n	801259e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801256a:	b2db      	uxtb	r3, r3
 801256c:	2b03      	cmp	r3, #3
 801256e:	d115      	bne.n	801259c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	32ae      	adds	r2, #174	@ 0xae
 801257a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801257e:	6a1b      	ldr	r3, [r3, #32]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d00b      	beq.n	801259c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	32ae      	adds	r2, #174	@ 0xae
 801258e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012592:	6a1b      	ldr	r3, [r3, #32]
 8012594:	78fa      	ldrb	r2, [r7, #3]
 8012596:	4611      	mov	r1, r2
 8012598:	6878      	ldr	r0, [r7, #4]
 801259a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801259c:	2300      	movs	r3, #0
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3708      	adds	r7, #8
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}

080125a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b082      	sub	sp, #8
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
 80125ae:	460b      	mov	r3, r1
 80125b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	32ae      	adds	r2, #174	@ 0xae
 80125bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d101      	bne.n	80125c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80125c4:	2303      	movs	r3, #3
 80125c6:	e01c      	b.n	8012602 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80125ce:	b2db      	uxtb	r3, r3
 80125d0:	2b03      	cmp	r3, #3
 80125d2:	d115      	bne.n	8012600 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	32ae      	adds	r2, #174	@ 0xae
 80125de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d00b      	beq.n	8012600 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	32ae      	adds	r2, #174	@ 0xae
 80125f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125f8:	78fa      	ldrb	r2, [r7, #3]
 80125fa:	4611      	mov	r1, r2
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012600:	2300      	movs	r3, #0
}
 8012602:	4618      	mov	r0, r3
 8012604:	3708      	adds	r7, #8
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}

0801260a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801260a:	b480      	push	{r7}
 801260c:	b083      	sub	sp, #12
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012612:	2300      	movs	r3, #0
}
 8012614:	4618      	mov	r0, r3
 8012616:	370c      	adds	r7, #12
 8012618:	46bd      	mov	sp, r7
 801261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261e:	4770      	bx	lr

08012620 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b084      	sub	sp, #16
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8012628:	2300      	movs	r3, #0
 801262a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2201      	movs	r2, #1
 8012630:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801263a:	2b00      	cmp	r3, #0
 801263c:	d00e      	beq.n	801265c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	687a      	ldr	r2, [r7, #4]
 8012648:	6852      	ldr	r2, [r2, #4]
 801264a:	b2d2      	uxtb	r2, r2
 801264c:	4611      	mov	r1, r2
 801264e:	6878      	ldr	r0, [r7, #4]
 8012650:	4798      	blx	r3
 8012652:	4603      	mov	r3, r0
 8012654:	2b00      	cmp	r3, #0
 8012656:	d001      	beq.n	801265c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8012658:	2303      	movs	r3, #3
 801265a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801265c:	7bfb      	ldrb	r3, [r7, #15]
}
 801265e:	4618      	mov	r0, r3
 8012660:	3710      	adds	r7, #16
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}

08012666 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012666:	b480      	push	{r7}
 8012668:	b083      	sub	sp, #12
 801266a:	af00      	add	r7, sp, #0
 801266c:	6078      	str	r0, [r7, #4]
 801266e:	460b      	mov	r3, r1
 8012670:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012672:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012674:	4618      	mov	r0, r3
 8012676:	370c      	adds	r7, #12
 8012678:	46bd      	mov	sp, r7
 801267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267e:	4770      	bx	lr

08012680 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012680:	b480      	push	{r7}
 8012682:	b083      	sub	sp, #12
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	460b      	mov	r3, r1
 801268a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801268c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801268e:	4618      	mov	r0, r3
 8012690:	370c      	adds	r7, #12
 8012692:	46bd      	mov	sp, r7
 8012694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012698:	4770      	bx	lr

0801269a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801269a:	b580      	push	{r7, lr}
 801269c:	b086      	sub	sp, #24
 801269e:	af00      	add	r7, sp, #0
 80126a0:	6078      	str	r0, [r7, #4]
 80126a2:	460b      	mov	r3, r1
 80126a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80126ae:	2300      	movs	r3, #0
 80126b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	885b      	ldrh	r3, [r3, #2]
 80126b6:	b29b      	uxth	r3, r3
 80126b8:	68fa      	ldr	r2, [r7, #12]
 80126ba:	7812      	ldrb	r2, [r2, #0]
 80126bc:	4293      	cmp	r3, r2
 80126be:	d91f      	bls.n	8012700 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80126c6:	e013      	b.n	80126f0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80126c8:	f107 030a 	add.w	r3, r7, #10
 80126cc:	4619      	mov	r1, r3
 80126ce:	6978      	ldr	r0, [r7, #20]
 80126d0:	f000 f81b 	bl	801270a <USBD_GetNextDesc>
 80126d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	785b      	ldrb	r3, [r3, #1]
 80126da:	2b05      	cmp	r3, #5
 80126dc:	d108      	bne.n	80126f0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80126e2:	693b      	ldr	r3, [r7, #16]
 80126e4:	789b      	ldrb	r3, [r3, #2]
 80126e6:	78fa      	ldrb	r2, [r7, #3]
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d008      	beq.n	80126fe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80126ec:	2300      	movs	r3, #0
 80126ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	885b      	ldrh	r3, [r3, #2]
 80126f4:	b29a      	uxth	r2, r3
 80126f6:	897b      	ldrh	r3, [r7, #10]
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d8e5      	bhi.n	80126c8 <USBD_GetEpDesc+0x2e>
 80126fc:	e000      	b.n	8012700 <USBD_GetEpDesc+0x66>
          break;
 80126fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012700:	693b      	ldr	r3, [r7, #16]
}
 8012702:	4618      	mov	r0, r3
 8012704:	3718      	adds	r7, #24
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}

0801270a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801270a:	b480      	push	{r7}
 801270c:	b085      	sub	sp, #20
 801270e:	af00      	add	r7, sp, #0
 8012710:	6078      	str	r0, [r7, #4]
 8012712:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	881b      	ldrh	r3, [r3, #0]
 801271c:	68fa      	ldr	r2, [r7, #12]
 801271e:	7812      	ldrb	r2, [r2, #0]
 8012720:	4413      	add	r3, r2
 8012722:	b29a      	uxth	r2, r3
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	461a      	mov	r2, r3
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	4413      	add	r3, r2
 8012732:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012734:	68fb      	ldr	r3, [r7, #12]
}
 8012736:	4618      	mov	r0, r3
 8012738:	3714      	adds	r7, #20
 801273a:	46bd      	mov	sp, r7
 801273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012740:	4770      	bx	lr

08012742 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012742:	b480      	push	{r7}
 8012744:	b087      	sub	sp, #28
 8012746:	af00      	add	r7, sp, #0
 8012748:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012754:	697b      	ldr	r3, [r7, #20]
 8012756:	3301      	adds	r3, #1
 8012758:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012760:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012764:	021b      	lsls	r3, r3, #8
 8012766:	b21a      	sxth	r2, r3
 8012768:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801276c:	4313      	orrs	r3, r2
 801276e:	b21b      	sxth	r3, r3
 8012770:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012772:	89fb      	ldrh	r3, [r7, #14]
}
 8012774:	4618      	mov	r0, r3
 8012776:	371c      	adds	r7, #28
 8012778:	46bd      	mov	sp, r7
 801277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277e:	4770      	bx	lr

08012780 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b084      	sub	sp, #16
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
 8012788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801278a:	2300      	movs	r3, #0
 801278c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012796:	2b40      	cmp	r3, #64	@ 0x40
 8012798:	d005      	beq.n	80127a6 <USBD_StdDevReq+0x26>
 801279a:	2b40      	cmp	r3, #64	@ 0x40
 801279c:	d857      	bhi.n	801284e <USBD_StdDevReq+0xce>
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d00f      	beq.n	80127c2 <USBD_StdDevReq+0x42>
 80127a2:	2b20      	cmp	r3, #32
 80127a4:	d153      	bne.n	801284e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	32ae      	adds	r2, #174	@ 0xae
 80127b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127b4:	689b      	ldr	r3, [r3, #8]
 80127b6:	6839      	ldr	r1, [r7, #0]
 80127b8:	6878      	ldr	r0, [r7, #4]
 80127ba:	4798      	blx	r3
 80127bc:	4603      	mov	r3, r0
 80127be:	73fb      	strb	r3, [r7, #15]
      break;
 80127c0:	e04a      	b.n	8012858 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	785b      	ldrb	r3, [r3, #1]
 80127c6:	2b09      	cmp	r3, #9
 80127c8:	d83b      	bhi.n	8012842 <USBD_StdDevReq+0xc2>
 80127ca:	a201      	add	r2, pc, #4	@ (adr r2, 80127d0 <USBD_StdDevReq+0x50>)
 80127cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127d0:	08012825 	.word	0x08012825
 80127d4:	08012839 	.word	0x08012839
 80127d8:	08012843 	.word	0x08012843
 80127dc:	0801282f 	.word	0x0801282f
 80127e0:	08012843 	.word	0x08012843
 80127e4:	08012803 	.word	0x08012803
 80127e8:	080127f9 	.word	0x080127f9
 80127ec:	08012843 	.word	0x08012843
 80127f0:	0801281b 	.word	0x0801281b
 80127f4:	0801280d 	.word	0x0801280d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80127f8:	6839      	ldr	r1, [r7, #0]
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f000 fa3c 	bl	8012c78 <USBD_GetDescriptor>
          break;
 8012800:	e024      	b.n	801284c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012802:	6839      	ldr	r1, [r7, #0]
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f000 fbcb 	bl	8012fa0 <USBD_SetAddress>
          break;
 801280a:	e01f      	b.n	801284c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801280c:	6839      	ldr	r1, [r7, #0]
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f000 fc0a 	bl	8013028 <USBD_SetConfig>
 8012814:	4603      	mov	r3, r0
 8012816:	73fb      	strb	r3, [r7, #15]
          break;
 8012818:	e018      	b.n	801284c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801281a:	6839      	ldr	r1, [r7, #0]
 801281c:	6878      	ldr	r0, [r7, #4]
 801281e:	f000 fcad 	bl	801317c <USBD_GetConfig>
          break;
 8012822:	e013      	b.n	801284c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012824:	6839      	ldr	r1, [r7, #0]
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f000 fcde 	bl	80131e8 <USBD_GetStatus>
          break;
 801282c:	e00e      	b.n	801284c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801282e:	6839      	ldr	r1, [r7, #0]
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f000 fd0d 	bl	8013250 <USBD_SetFeature>
          break;
 8012836:	e009      	b.n	801284c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012838:	6839      	ldr	r1, [r7, #0]
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f000 fd31 	bl	80132a2 <USBD_ClrFeature>
          break;
 8012840:	e004      	b.n	801284c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8012842:	6839      	ldr	r1, [r7, #0]
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f000 fd88 	bl	801335a <USBD_CtlError>
          break;
 801284a:	bf00      	nop
      }
      break;
 801284c:	e004      	b.n	8012858 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801284e:	6839      	ldr	r1, [r7, #0]
 8012850:	6878      	ldr	r0, [r7, #4]
 8012852:	f000 fd82 	bl	801335a <USBD_CtlError>
      break;
 8012856:	bf00      	nop
  }

  return ret;
 8012858:	7bfb      	ldrb	r3, [r7, #15]
}
 801285a:	4618      	mov	r0, r3
 801285c:	3710      	adds	r7, #16
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}
 8012862:	bf00      	nop

08012864 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801286e:	2300      	movs	r3, #0
 8012870:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	781b      	ldrb	r3, [r3, #0]
 8012876:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801287a:	2b40      	cmp	r3, #64	@ 0x40
 801287c:	d005      	beq.n	801288a <USBD_StdItfReq+0x26>
 801287e:	2b40      	cmp	r3, #64	@ 0x40
 8012880:	d852      	bhi.n	8012928 <USBD_StdItfReq+0xc4>
 8012882:	2b00      	cmp	r3, #0
 8012884:	d001      	beq.n	801288a <USBD_StdItfReq+0x26>
 8012886:	2b20      	cmp	r3, #32
 8012888:	d14e      	bne.n	8012928 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012890:	b2db      	uxtb	r3, r3
 8012892:	3b01      	subs	r3, #1
 8012894:	2b02      	cmp	r3, #2
 8012896:	d840      	bhi.n	801291a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	889b      	ldrh	r3, [r3, #4]
 801289c:	b2db      	uxtb	r3, r3
 801289e:	2b01      	cmp	r3, #1
 80128a0:	d836      	bhi.n	8012910 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	889b      	ldrh	r3, [r3, #4]
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	4619      	mov	r1, r3
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f7ff fedb 	bl	8012666 <USBD_CoreFindIF>
 80128b0:	4603      	mov	r3, r0
 80128b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80128b4:	7bbb      	ldrb	r3, [r7, #14]
 80128b6:	2bff      	cmp	r3, #255	@ 0xff
 80128b8:	d01d      	beq.n	80128f6 <USBD_StdItfReq+0x92>
 80128ba:	7bbb      	ldrb	r3, [r7, #14]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d11a      	bne.n	80128f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80128c0:	7bba      	ldrb	r2, [r7, #14]
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	32ae      	adds	r2, #174	@ 0xae
 80128c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128ca:	689b      	ldr	r3, [r3, #8]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d00f      	beq.n	80128f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80128d0:	7bba      	ldrb	r2, [r7, #14]
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80128d8:	7bba      	ldrb	r2, [r7, #14]
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	32ae      	adds	r2, #174	@ 0xae
 80128de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128e2:	689b      	ldr	r3, [r3, #8]
 80128e4:	6839      	ldr	r1, [r7, #0]
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	4798      	blx	r3
 80128ea:	4603      	mov	r3, r0
 80128ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80128ee:	e004      	b.n	80128fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80128f0:	2303      	movs	r3, #3
 80128f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80128f4:	e001      	b.n	80128fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80128f6:	2303      	movs	r3, #3
 80128f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	88db      	ldrh	r3, [r3, #6]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d110      	bne.n	8012924 <USBD_StdItfReq+0xc0>
 8012902:	7bfb      	ldrb	r3, [r7, #15]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d10d      	bne.n	8012924 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f000 fdfd 	bl	8013508 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801290e:	e009      	b.n	8012924 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012910:	6839      	ldr	r1, [r7, #0]
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f000 fd21 	bl	801335a <USBD_CtlError>
          break;
 8012918:	e004      	b.n	8012924 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801291a:	6839      	ldr	r1, [r7, #0]
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f000 fd1c 	bl	801335a <USBD_CtlError>
          break;
 8012922:	e000      	b.n	8012926 <USBD_StdItfReq+0xc2>
          break;
 8012924:	bf00      	nop
      }
      break;
 8012926:	e004      	b.n	8012932 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012928:	6839      	ldr	r1, [r7, #0]
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f000 fd15 	bl	801335a <USBD_CtlError>
      break;
 8012930:	bf00      	nop
  }

  return ret;
 8012932:	7bfb      	ldrb	r3, [r7, #15]
}
 8012934:	4618      	mov	r0, r3
 8012936:	3710      	adds	r7, #16
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}

0801293c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b084      	sub	sp, #16
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8012946:	2300      	movs	r3, #0
 8012948:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	889b      	ldrh	r3, [r3, #4]
 801294e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012958:	2b40      	cmp	r3, #64	@ 0x40
 801295a:	d007      	beq.n	801296c <USBD_StdEPReq+0x30>
 801295c:	2b40      	cmp	r3, #64	@ 0x40
 801295e:	f200 817f 	bhi.w	8012c60 <USBD_StdEPReq+0x324>
 8012962:	2b00      	cmp	r3, #0
 8012964:	d02a      	beq.n	80129bc <USBD_StdEPReq+0x80>
 8012966:	2b20      	cmp	r3, #32
 8012968:	f040 817a 	bne.w	8012c60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801296c:	7bbb      	ldrb	r3, [r7, #14]
 801296e:	4619      	mov	r1, r3
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f7ff fe85 	bl	8012680 <USBD_CoreFindEP>
 8012976:	4603      	mov	r3, r0
 8012978:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801297a:	7b7b      	ldrb	r3, [r7, #13]
 801297c:	2bff      	cmp	r3, #255	@ 0xff
 801297e:	f000 8174 	beq.w	8012c6a <USBD_StdEPReq+0x32e>
 8012982:	7b7b      	ldrb	r3, [r7, #13]
 8012984:	2b00      	cmp	r3, #0
 8012986:	f040 8170 	bne.w	8012c6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801298a:	7b7a      	ldrb	r2, [r7, #13]
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012992:	7b7a      	ldrb	r2, [r7, #13]
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	32ae      	adds	r2, #174	@ 0xae
 8012998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801299c:	689b      	ldr	r3, [r3, #8]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	f000 8163 	beq.w	8012c6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80129a4:	7b7a      	ldrb	r2, [r7, #13]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	32ae      	adds	r2, #174	@ 0xae
 80129aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129ae:	689b      	ldr	r3, [r3, #8]
 80129b0:	6839      	ldr	r1, [r7, #0]
 80129b2:	6878      	ldr	r0, [r7, #4]
 80129b4:	4798      	blx	r3
 80129b6:	4603      	mov	r3, r0
 80129b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80129ba:	e156      	b.n	8012c6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	785b      	ldrb	r3, [r3, #1]
 80129c0:	2b03      	cmp	r3, #3
 80129c2:	d008      	beq.n	80129d6 <USBD_StdEPReq+0x9a>
 80129c4:	2b03      	cmp	r3, #3
 80129c6:	f300 8145 	bgt.w	8012c54 <USBD_StdEPReq+0x318>
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	f000 809b 	beq.w	8012b06 <USBD_StdEPReq+0x1ca>
 80129d0:	2b01      	cmp	r3, #1
 80129d2:	d03c      	beq.n	8012a4e <USBD_StdEPReq+0x112>
 80129d4:	e13e      	b.n	8012c54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80129dc:	b2db      	uxtb	r3, r3
 80129de:	2b02      	cmp	r3, #2
 80129e0:	d002      	beq.n	80129e8 <USBD_StdEPReq+0xac>
 80129e2:	2b03      	cmp	r3, #3
 80129e4:	d016      	beq.n	8012a14 <USBD_StdEPReq+0xd8>
 80129e6:	e02c      	b.n	8012a42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80129e8:	7bbb      	ldrb	r3, [r7, #14]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d00d      	beq.n	8012a0a <USBD_StdEPReq+0xce>
 80129ee:	7bbb      	ldrb	r3, [r7, #14]
 80129f0:	2b80      	cmp	r3, #128	@ 0x80
 80129f2:	d00a      	beq.n	8012a0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80129f4:	7bbb      	ldrb	r3, [r7, #14]
 80129f6:	4619      	mov	r1, r3
 80129f8:	6878      	ldr	r0, [r7, #4]
 80129fa:	f001 f9f3 	bl	8013de4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80129fe:	2180      	movs	r1, #128	@ 0x80
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f001 f9ef 	bl	8013de4 <USBD_LL_StallEP>
 8012a06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012a08:	e020      	b.n	8012a4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012a0a:	6839      	ldr	r1, [r7, #0]
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f000 fca4 	bl	801335a <USBD_CtlError>
              break;
 8012a12:	e01b      	b.n	8012a4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	885b      	ldrh	r3, [r3, #2]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d10e      	bne.n	8012a3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012a1c:	7bbb      	ldrb	r3, [r7, #14]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d00b      	beq.n	8012a3a <USBD_StdEPReq+0xfe>
 8012a22:	7bbb      	ldrb	r3, [r7, #14]
 8012a24:	2b80      	cmp	r3, #128	@ 0x80
 8012a26:	d008      	beq.n	8012a3a <USBD_StdEPReq+0xfe>
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	88db      	ldrh	r3, [r3, #6]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d104      	bne.n	8012a3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012a30:	7bbb      	ldrb	r3, [r7, #14]
 8012a32:	4619      	mov	r1, r3
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f001 f9d5 	bl	8013de4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f000 fd64 	bl	8013508 <USBD_CtlSendStatus>

              break;
 8012a40:	e004      	b.n	8012a4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8012a42:	6839      	ldr	r1, [r7, #0]
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f000 fc88 	bl	801335a <USBD_CtlError>
              break;
 8012a4a:	bf00      	nop
          }
          break;
 8012a4c:	e107      	b.n	8012c5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012a54:	b2db      	uxtb	r3, r3
 8012a56:	2b02      	cmp	r3, #2
 8012a58:	d002      	beq.n	8012a60 <USBD_StdEPReq+0x124>
 8012a5a:	2b03      	cmp	r3, #3
 8012a5c:	d016      	beq.n	8012a8c <USBD_StdEPReq+0x150>
 8012a5e:	e04b      	b.n	8012af8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012a60:	7bbb      	ldrb	r3, [r7, #14]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d00d      	beq.n	8012a82 <USBD_StdEPReq+0x146>
 8012a66:	7bbb      	ldrb	r3, [r7, #14]
 8012a68:	2b80      	cmp	r3, #128	@ 0x80
 8012a6a:	d00a      	beq.n	8012a82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012a6c:	7bbb      	ldrb	r3, [r7, #14]
 8012a6e:	4619      	mov	r1, r3
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f001 f9b7 	bl	8013de4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012a76:	2180      	movs	r1, #128	@ 0x80
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f001 f9b3 	bl	8013de4 <USBD_LL_StallEP>
 8012a7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012a80:	e040      	b.n	8012b04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012a82:	6839      	ldr	r1, [r7, #0]
 8012a84:	6878      	ldr	r0, [r7, #4]
 8012a86:	f000 fc68 	bl	801335a <USBD_CtlError>
              break;
 8012a8a:	e03b      	b.n	8012b04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	885b      	ldrh	r3, [r3, #2]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d136      	bne.n	8012b02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012a94:	7bbb      	ldrb	r3, [r7, #14]
 8012a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d004      	beq.n	8012aa8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012a9e:	7bbb      	ldrb	r3, [r7, #14]
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	6878      	ldr	r0, [r7, #4]
 8012aa4:	f001 f9bd 	bl	8013e22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f000 fd2d 	bl	8013508 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012aae:	7bbb      	ldrb	r3, [r7, #14]
 8012ab0:	4619      	mov	r1, r3
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f7ff fde4 	bl	8012680 <USBD_CoreFindEP>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012abc:	7b7b      	ldrb	r3, [r7, #13]
 8012abe:	2bff      	cmp	r3, #255	@ 0xff
 8012ac0:	d01f      	beq.n	8012b02 <USBD_StdEPReq+0x1c6>
 8012ac2:	7b7b      	ldrb	r3, [r7, #13]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d11c      	bne.n	8012b02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012ac8:	7b7a      	ldrb	r2, [r7, #13]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012ad0:	7b7a      	ldrb	r2, [r7, #13]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	32ae      	adds	r2, #174	@ 0xae
 8012ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ada:	689b      	ldr	r3, [r3, #8]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d010      	beq.n	8012b02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012ae0:	7b7a      	ldrb	r2, [r7, #13]
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	32ae      	adds	r2, #174	@ 0xae
 8012ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012aea:	689b      	ldr	r3, [r3, #8]
 8012aec:	6839      	ldr	r1, [r7, #0]
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	4798      	blx	r3
 8012af2:	4603      	mov	r3, r0
 8012af4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012af6:	e004      	b.n	8012b02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012af8:	6839      	ldr	r1, [r7, #0]
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f000 fc2d 	bl	801335a <USBD_CtlError>
              break;
 8012b00:	e000      	b.n	8012b04 <USBD_StdEPReq+0x1c8>
              break;
 8012b02:	bf00      	nop
          }
          break;
 8012b04:	e0ab      	b.n	8012c5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012b0c:	b2db      	uxtb	r3, r3
 8012b0e:	2b02      	cmp	r3, #2
 8012b10:	d002      	beq.n	8012b18 <USBD_StdEPReq+0x1dc>
 8012b12:	2b03      	cmp	r3, #3
 8012b14:	d032      	beq.n	8012b7c <USBD_StdEPReq+0x240>
 8012b16:	e097      	b.n	8012c48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012b18:	7bbb      	ldrb	r3, [r7, #14]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d007      	beq.n	8012b2e <USBD_StdEPReq+0x1f2>
 8012b1e:	7bbb      	ldrb	r3, [r7, #14]
 8012b20:	2b80      	cmp	r3, #128	@ 0x80
 8012b22:	d004      	beq.n	8012b2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8012b24:	6839      	ldr	r1, [r7, #0]
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f000 fc17 	bl	801335a <USBD_CtlError>
                break;
 8012b2c:	e091      	b.n	8012c52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012b2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	da0b      	bge.n	8012b4e <USBD_StdEPReq+0x212>
 8012b36:	7bbb      	ldrb	r3, [r7, #14]
 8012b38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012b3c:	4613      	mov	r3, r2
 8012b3e:	009b      	lsls	r3, r3, #2
 8012b40:	4413      	add	r3, r2
 8012b42:	009b      	lsls	r3, r3, #2
 8012b44:	3310      	adds	r3, #16
 8012b46:	687a      	ldr	r2, [r7, #4]
 8012b48:	4413      	add	r3, r2
 8012b4a:	3304      	adds	r3, #4
 8012b4c:	e00b      	b.n	8012b66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012b4e:	7bbb      	ldrb	r3, [r7, #14]
 8012b50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012b54:	4613      	mov	r3, r2
 8012b56:	009b      	lsls	r3, r3, #2
 8012b58:	4413      	add	r3, r2
 8012b5a:	009b      	lsls	r3, r3, #2
 8012b5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012b60:	687a      	ldr	r2, [r7, #4]
 8012b62:	4413      	add	r3, r2
 8012b64:	3304      	adds	r3, #4
 8012b66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	2202      	movs	r2, #2
 8012b72:	4619      	mov	r1, r3
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f000 fc6d 	bl	8013454 <USBD_CtlSendData>
              break;
 8012b7a:	e06a      	b.n	8012c52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012b7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	da11      	bge.n	8012ba8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012b84:	7bbb      	ldrb	r3, [r7, #14]
 8012b86:	f003 020f 	and.w	r2, r3, #15
 8012b8a:	6879      	ldr	r1, [r7, #4]
 8012b8c:	4613      	mov	r3, r2
 8012b8e:	009b      	lsls	r3, r3, #2
 8012b90:	4413      	add	r3, r2
 8012b92:	009b      	lsls	r3, r3, #2
 8012b94:	440b      	add	r3, r1
 8012b96:	3324      	adds	r3, #36	@ 0x24
 8012b98:	881b      	ldrh	r3, [r3, #0]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d117      	bne.n	8012bce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012b9e:	6839      	ldr	r1, [r7, #0]
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f000 fbda 	bl	801335a <USBD_CtlError>
                  break;
 8012ba6:	e054      	b.n	8012c52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012ba8:	7bbb      	ldrb	r3, [r7, #14]
 8012baa:	f003 020f 	and.w	r2, r3, #15
 8012bae:	6879      	ldr	r1, [r7, #4]
 8012bb0:	4613      	mov	r3, r2
 8012bb2:	009b      	lsls	r3, r3, #2
 8012bb4:	4413      	add	r3, r2
 8012bb6:	009b      	lsls	r3, r3, #2
 8012bb8:	440b      	add	r3, r1
 8012bba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012bbe:	881b      	ldrh	r3, [r3, #0]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d104      	bne.n	8012bce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012bc4:	6839      	ldr	r1, [r7, #0]
 8012bc6:	6878      	ldr	r0, [r7, #4]
 8012bc8:	f000 fbc7 	bl	801335a <USBD_CtlError>
                  break;
 8012bcc:	e041      	b.n	8012c52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012bce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	da0b      	bge.n	8012bee <USBD_StdEPReq+0x2b2>
 8012bd6:	7bbb      	ldrb	r3, [r7, #14]
 8012bd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012bdc:	4613      	mov	r3, r2
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	4413      	add	r3, r2
 8012be2:	009b      	lsls	r3, r3, #2
 8012be4:	3310      	adds	r3, #16
 8012be6:	687a      	ldr	r2, [r7, #4]
 8012be8:	4413      	add	r3, r2
 8012bea:	3304      	adds	r3, #4
 8012bec:	e00b      	b.n	8012c06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012bee:	7bbb      	ldrb	r3, [r7, #14]
 8012bf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012bf4:	4613      	mov	r3, r2
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	4413      	add	r3, r2
 8012bfa:	009b      	lsls	r3, r3, #2
 8012bfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012c00:	687a      	ldr	r2, [r7, #4]
 8012c02:	4413      	add	r3, r2
 8012c04:	3304      	adds	r3, #4
 8012c06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012c08:	7bbb      	ldrb	r3, [r7, #14]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d002      	beq.n	8012c14 <USBD_StdEPReq+0x2d8>
 8012c0e:	7bbb      	ldrb	r3, [r7, #14]
 8012c10:	2b80      	cmp	r3, #128	@ 0x80
 8012c12:	d103      	bne.n	8012c1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	2200      	movs	r2, #0
 8012c18:	601a      	str	r2, [r3, #0]
 8012c1a:	e00e      	b.n	8012c3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012c1c:	7bbb      	ldrb	r3, [r7, #14]
 8012c1e:	4619      	mov	r1, r3
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f001 f91d 	bl	8013e60 <USBD_LL_IsStallEP>
 8012c26:	4603      	mov	r3, r0
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d003      	beq.n	8012c34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	2201      	movs	r2, #1
 8012c30:	601a      	str	r2, [r3, #0]
 8012c32:	e002      	b.n	8012c3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	2200      	movs	r2, #0
 8012c38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	2202      	movs	r2, #2
 8012c3e:	4619      	mov	r1, r3
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	f000 fc07 	bl	8013454 <USBD_CtlSendData>
              break;
 8012c46:	e004      	b.n	8012c52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012c48:	6839      	ldr	r1, [r7, #0]
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f000 fb85 	bl	801335a <USBD_CtlError>
              break;
 8012c50:	bf00      	nop
          }
          break;
 8012c52:	e004      	b.n	8012c5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012c54:	6839      	ldr	r1, [r7, #0]
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f000 fb7f 	bl	801335a <USBD_CtlError>
          break;
 8012c5c:	bf00      	nop
      }
      break;
 8012c5e:	e005      	b.n	8012c6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012c60:	6839      	ldr	r1, [r7, #0]
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f000 fb79 	bl	801335a <USBD_CtlError>
      break;
 8012c68:	e000      	b.n	8012c6c <USBD_StdEPReq+0x330>
      break;
 8012c6a:	bf00      	nop
  }

  return ret;
 8012c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	3710      	adds	r7, #16
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}
	...

08012c78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b084      	sub	sp, #16
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
 8012c80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012c82:	2300      	movs	r3, #0
 8012c84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012c86:	2300      	movs	r3, #0
 8012c88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	885b      	ldrh	r3, [r3, #2]
 8012c92:	0a1b      	lsrs	r3, r3, #8
 8012c94:	b29b      	uxth	r3, r3
 8012c96:	3b01      	subs	r3, #1
 8012c98:	2b0e      	cmp	r3, #14
 8012c9a:	f200 8152 	bhi.w	8012f42 <USBD_GetDescriptor+0x2ca>
 8012c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8012ca4 <USBD_GetDescriptor+0x2c>)
 8012ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ca4:	08012d15 	.word	0x08012d15
 8012ca8:	08012d2d 	.word	0x08012d2d
 8012cac:	08012d6d 	.word	0x08012d6d
 8012cb0:	08012f43 	.word	0x08012f43
 8012cb4:	08012f43 	.word	0x08012f43
 8012cb8:	08012ee3 	.word	0x08012ee3
 8012cbc:	08012f0f 	.word	0x08012f0f
 8012cc0:	08012f43 	.word	0x08012f43
 8012cc4:	08012f43 	.word	0x08012f43
 8012cc8:	08012f43 	.word	0x08012f43
 8012ccc:	08012f43 	.word	0x08012f43
 8012cd0:	08012f43 	.word	0x08012f43
 8012cd4:	08012f43 	.word	0x08012f43
 8012cd8:	08012f43 	.word	0x08012f43
 8012cdc:	08012ce1 	.word	0x08012ce1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012ce6:	69db      	ldr	r3, [r3, #28]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d00b      	beq.n	8012d04 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012cf2:	69db      	ldr	r3, [r3, #28]
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	7c12      	ldrb	r2, [r2, #16]
 8012cf8:	f107 0108 	add.w	r1, r7, #8
 8012cfc:	4610      	mov	r0, r2
 8012cfe:	4798      	blx	r3
 8012d00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012d02:	e126      	b.n	8012f52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012d04:	6839      	ldr	r1, [r7, #0]
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	f000 fb27 	bl	801335a <USBD_CtlError>
        err++;
 8012d0c:	7afb      	ldrb	r3, [r7, #11]
 8012d0e:	3301      	adds	r3, #1
 8012d10:	72fb      	strb	r3, [r7, #11]
      break;
 8012d12:	e11e      	b.n	8012f52 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	687a      	ldr	r2, [r7, #4]
 8012d1e:	7c12      	ldrb	r2, [r2, #16]
 8012d20:	f107 0108 	add.w	r1, r7, #8
 8012d24:	4610      	mov	r0, r2
 8012d26:	4798      	blx	r3
 8012d28:	60f8      	str	r0, [r7, #12]
      break;
 8012d2a:	e112      	b.n	8012f52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	7c1b      	ldrb	r3, [r3, #16]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d10d      	bne.n	8012d50 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d3c:	f107 0208 	add.w	r2, r7, #8
 8012d40:	4610      	mov	r0, r2
 8012d42:	4798      	blx	r3
 8012d44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	3301      	adds	r3, #1
 8012d4a:	2202      	movs	r2, #2
 8012d4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012d4e:	e100      	b.n	8012f52 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d58:	f107 0208 	add.w	r2, r7, #8
 8012d5c:	4610      	mov	r0, r2
 8012d5e:	4798      	blx	r3
 8012d60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	3301      	adds	r3, #1
 8012d66:	2202      	movs	r2, #2
 8012d68:	701a      	strb	r2, [r3, #0]
      break;
 8012d6a:	e0f2      	b.n	8012f52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	885b      	ldrh	r3, [r3, #2]
 8012d70:	b2db      	uxtb	r3, r3
 8012d72:	2b05      	cmp	r3, #5
 8012d74:	f200 80ac 	bhi.w	8012ed0 <USBD_GetDescriptor+0x258>
 8012d78:	a201      	add	r2, pc, #4	@ (adr r2, 8012d80 <USBD_GetDescriptor+0x108>)
 8012d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d7e:	bf00      	nop
 8012d80:	08012d99 	.word	0x08012d99
 8012d84:	08012dcd 	.word	0x08012dcd
 8012d88:	08012e01 	.word	0x08012e01
 8012d8c:	08012e35 	.word	0x08012e35
 8012d90:	08012e69 	.word	0x08012e69
 8012d94:	08012e9d 	.word	0x08012e9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012d9e:	685b      	ldr	r3, [r3, #4]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d00b      	beq.n	8012dbc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012daa:	685b      	ldr	r3, [r3, #4]
 8012dac:	687a      	ldr	r2, [r7, #4]
 8012dae:	7c12      	ldrb	r2, [r2, #16]
 8012db0:	f107 0108 	add.w	r1, r7, #8
 8012db4:	4610      	mov	r0, r2
 8012db6:	4798      	blx	r3
 8012db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012dba:	e091      	b.n	8012ee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012dbc:	6839      	ldr	r1, [r7, #0]
 8012dbe:	6878      	ldr	r0, [r7, #4]
 8012dc0:	f000 facb 	bl	801335a <USBD_CtlError>
            err++;
 8012dc4:	7afb      	ldrb	r3, [r7, #11]
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8012dca:	e089      	b.n	8012ee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012dd2:	689b      	ldr	r3, [r3, #8]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d00b      	beq.n	8012df0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012dde:	689b      	ldr	r3, [r3, #8]
 8012de0:	687a      	ldr	r2, [r7, #4]
 8012de2:	7c12      	ldrb	r2, [r2, #16]
 8012de4:	f107 0108 	add.w	r1, r7, #8
 8012de8:	4610      	mov	r0, r2
 8012dea:	4798      	blx	r3
 8012dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012dee:	e077      	b.n	8012ee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012df0:	6839      	ldr	r1, [r7, #0]
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f000 fab1 	bl	801335a <USBD_CtlError>
            err++;
 8012df8:	7afb      	ldrb	r3, [r7, #11]
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8012dfe:	e06f      	b.n	8012ee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012e06:	68db      	ldr	r3, [r3, #12]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d00b      	beq.n	8012e24 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012e12:	68db      	ldr	r3, [r3, #12]
 8012e14:	687a      	ldr	r2, [r7, #4]
 8012e16:	7c12      	ldrb	r2, [r2, #16]
 8012e18:	f107 0108 	add.w	r1, r7, #8
 8012e1c:	4610      	mov	r0, r2
 8012e1e:	4798      	blx	r3
 8012e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012e22:	e05d      	b.n	8012ee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012e24:	6839      	ldr	r1, [r7, #0]
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f000 fa97 	bl	801335a <USBD_CtlError>
            err++;
 8012e2c:	7afb      	ldrb	r3, [r7, #11]
 8012e2e:	3301      	adds	r3, #1
 8012e30:	72fb      	strb	r3, [r7, #11]
          break;
 8012e32:	e055      	b.n	8012ee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012e3a:	691b      	ldr	r3, [r3, #16]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d00b      	beq.n	8012e58 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012e46:	691b      	ldr	r3, [r3, #16]
 8012e48:	687a      	ldr	r2, [r7, #4]
 8012e4a:	7c12      	ldrb	r2, [r2, #16]
 8012e4c:	f107 0108 	add.w	r1, r7, #8
 8012e50:	4610      	mov	r0, r2
 8012e52:	4798      	blx	r3
 8012e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012e56:	e043      	b.n	8012ee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012e58:	6839      	ldr	r1, [r7, #0]
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f000 fa7d 	bl	801335a <USBD_CtlError>
            err++;
 8012e60:	7afb      	ldrb	r3, [r7, #11]
 8012e62:	3301      	adds	r3, #1
 8012e64:	72fb      	strb	r3, [r7, #11]
          break;
 8012e66:	e03b      	b.n	8012ee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012e6e:	695b      	ldr	r3, [r3, #20]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d00b      	beq.n	8012e8c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012e7a:	695b      	ldr	r3, [r3, #20]
 8012e7c:	687a      	ldr	r2, [r7, #4]
 8012e7e:	7c12      	ldrb	r2, [r2, #16]
 8012e80:	f107 0108 	add.w	r1, r7, #8
 8012e84:	4610      	mov	r0, r2
 8012e86:	4798      	blx	r3
 8012e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012e8a:	e029      	b.n	8012ee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012e8c:	6839      	ldr	r1, [r7, #0]
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f000 fa63 	bl	801335a <USBD_CtlError>
            err++;
 8012e94:	7afb      	ldrb	r3, [r7, #11]
 8012e96:	3301      	adds	r3, #1
 8012e98:	72fb      	strb	r3, [r7, #11]
          break;
 8012e9a:	e021      	b.n	8012ee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012ea2:	699b      	ldr	r3, [r3, #24]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d00b      	beq.n	8012ec0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012eae:	699b      	ldr	r3, [r3, #24]
 8012eb0:	687a      	ldr	r2, [r7, #4]
 8012eb2:	7c12      	ldrb	r2, [r2, #16]
 8012eb4:	f107 0108 	add.w	r1, r7, #8
 8012eb8:	4610      	mov	r0, r2
 8012eba:	4798      	blx	r3
 8012ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012ebe:	e00f      	b.n	8012ee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012ec0:	6839      	ldr	r1, [r7, #0]
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f000 fa49 	bl	801335a <USBD_CtlError>
            err++;
 8012ec8:	7afb      	ldrb	r3, [r7, #11]
 8012eca:	3301      	adds	r3, #1
 8012ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8012ece:	e007      	b.n	8012ee0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012ed0:	6839      	ldr	r1, [r7, #0]
 8012ed2:	6878      	ldr	r0, [r7, #4]
 8012ed4:	f000 fa41 	bl	801335a <USBD_CtlError>
          err++;
 8012ed8:	7afb      	ldrb	r3, [r7, #11]
 8012eda:	3301      	adds	r3, #1
 8012edc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012ede:	bf00      	nop
      }
      break;
 8012ee0:	e037      	b.n	8012f52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	7c1b      	ldrb	r3, [r3, #16]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d109      	bne.n	8012efe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ef2:	f107 0208 	add.w	r2, r7, #8
 8012ef6:	4610      	mov	r0, r2
 8012ef8:	4798      	blx	r3
 8012efa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012efc:	e029      	b.n	8012f52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012efe:	6839      	ldr	r1, [r7, #0]
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f000 fa2a 	bl	801335a <USBD_CtlError>
        err++;
 8012f06:	7afb      	ldrb	r3, [r7, #11]
 8012f08:	3301      	adds	r3, #1
 8012f0a:	72fb      	strb	r3, [r7, #11]
      break;
 8012f0c:	e021      	b.n	8012f52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	7c1b      	ldrb	r3, [r3, #16]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d10d      	bne.n	8012f32 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f1e:	f107 0208 	add.w	r2, r7, #8
 8012f22:	4610      	mov	r0, r2
 8012f24:	4798      	blx	r3
 8012f26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	3301      	adds	r3, #1
 8012f2c:	2207      	movs	r2, #7
 8012f2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012f30:	e00f      	b.n	8012f52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012f32:	6839      	ldr	r1, [r7, #0]
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f000 fa10 	bl	801335a <USBD_CtlError>
        err++;
 8012f3a:	7afb      	ldrb	r3, [r7, #11]
 8012f3c:	3301      	adds	r3, #1
 8012f3e:	72fb      	strb	r3, [r7, #11]
      break;
 8012f40:	e007      	b.n	8012f52 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012f42:	6839      	ldr	r1, [r7, #0]
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f000 fa08 	bl	801335a <USBD_CtlError>
      err++;
 8012f4a:	7afb      	ldrb	r3, [r7, #11]
 8012f4c:	3301      	adds	r3, #1
 8012f4e:	72fb      	strb	r3, [r7, #11]
      break;
 8012f50:	bf00      	nop
  }

  if (err != 0U)
 8012f52:	7afb      	ldrb	r3, [r7, #11]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d11e      	bne.n	8012f96 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	88db      	ldrh	r3, [r3, #6]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d016      	beq.n	8012f8e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012f60:	893b      	ldrh	r3, [r7, #8]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d00e      	beq.n	8012f84 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	88da      	ldrh	r2, [r3, #6]
 8012f6a:	893b      	ldrh	r3, [r7, #8]
 8012f6c:	4293      	cmp	r3, r2
 8012f6e:	bf28      	it	cs
 8012f70:	4613      	movcs	r3, r2
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012f76:	893b      	ldrh	r3, [r7, #8]
 8012f78:	461a      	mov	r2, r3
 8012f7a:	68f9      	ldr	r1, [r7, #12]
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f000 fa69 	bl	8013454 <USBD_CtlSendData>
 8012f82:	e009      	b.n	8012f98 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012f84:	6839      	ldr	r1, [r7, #0]
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f000 f9e7 	bl	801335a <USBD_CtlError>
 8012f8c:	e004      	b.n	8012f98 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f000 faba 	bl	8013508 <USBD_CtlSendStatus>
 8012f94:	e000      	b.n	8012f98 <USBD_GetDescriptor+0x320>
    return;
 8012f96:	bf00      	nop
  }
}
 8012f98:	3710      	adds	r7, #16
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}
 8012f9e:	bf00      	nop

08012fa0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b084      	sub	sp, #16
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012faa:	683b      	ldr	r3, [r7, #0]
 8012fac:	889b      	ldrh	r3, [r3, #4]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d131      	bne.n	8013016 <USBD_SetAddress+0x76>
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	88db      	ldrh	r3, [r3, #6]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d12d      	bne.n	8013016 <USBD_SetAddress+0x76>
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	885b      	ldrh	r3, [r3, #2]
 8012fbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8012fc0:	d829      	bhi.n	8013016 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	885b      	ldrh	r3, [r3, #2]
 8012fc6:	b2db      	uxtb	r3, r3
 8012fc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012fcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012fd4:	b2db      	uxtb	r3, r3
 8012fd6:	2b03      	cmp	r3, #3
 8012fd8:	d104      	bne.n	8012fe4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012fda:	6839      	ldr	r1, [r7, #0]
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f000 f9bc 	bl	801335a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012fe2:	e01d      	b.n	8013020 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	7bfa      	ldrb	r2, [r7, #15]
 8012fe8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012fec:	7bfb      	ldrb	r3, [r7, #15]
 8012fee:	4619      	mov	r1, r3
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f000 ff61 	bl	8013eb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012ff6:	6878      	ldr	r0, [r7, #4]
 8012ff8:	f000 fa86 	bl	8013508 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012ffc:	7bfb      	ldrb	r3, [r7, #15]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d004      	beq.n	801300c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2202      	movs	r2, #2
 8013006:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801300a:	e009      	b.n	8013020 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2201      	movs	r2, #1
 8013010:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013014:	e004      	b.n	8013020 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013016:	6839      	ldr	r1, [r7, #0]
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f000 f99e 	bl	801335a <USBD_CtlError>
  }
}
 801301e:	bf00      	nop
 8013020:	bf00      	nop
 8013022:	3710      	adds	r7, #16
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}

08013028 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b084      	sub	sp, #16
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013032:	2300      	movs	r3, #0
 8013034:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	885b      	ldrh	r3, [r3, #2]
 801303a:	b2da      	uxtb	r2, r3
 801303c:	4b4e      	ldr	r3, [pc, #312]	@ (8013178 <USBD_SetConfig+0x150>)
 801303e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013040:	4b4d      	ldr	r3, [pc, #308]	@ (8013178 <USBD_SetConfig+0x150>)
 8013042:	781b      	ldrb	r3, [r3, #0]
 8013044:	2b01      	cmp	r3, #1
 8013046:	d905      	bls.n	8013054 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013048:	6839      	ldr	r1, [r7, #0]
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	f000 f985 	bl	801335a <USBD_CtlError>
    return USBD_FAIL;
 8013050:	2303      	movs	r3, #3
 8013052:	e08c      	b.n	801316e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801305a:	b2db      	uxtb	r3, r3
 801305c:	2b02      	cmp	r3, #2
 801305e:	d002      	beq.n	8013066 <USBD_SetConfig+0x3e>
 8013060:	2b03      	cmp	r3, #3
 8013062:	d029      	beq.n	80130b8 <USBD_SetConfig+0x90>
 8013064:	e075      	b.n	8013152 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013066:	4b44      	ldr	r3, [pc, #272]	@ (8013178 <USBD_SetConfig+0x150>)
 8013068:	781b      	ldrb	r3, [r3, #0]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d020      	beq.n	80130b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801306e:	4b42      	ldr	r3, [pc, #264]	@ (8013178 <USBD_SetConfig+0x150>)
 8013070:	781b      	ldrb	r3, [r3, #0]
 8013072:	461a      	mov	r2, r3
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013078:	4b3f      	ldr	r3, [pc, #252]	@ (8013178 <USBD_SetConfig+0x150>)
 801307a:	781b      	ldrb	r3, [r3, #0]
 801307c:	4619      	mov	r1, r3
 801307e:	6878      	ldr	r0, [r7, #4]
 8013080:	f7fe ffb9 	bl	8011ff6 <USBD_SetClassConfig>
 8013084:	4603      	mov	r3, r0
 8013086:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013088:	7bfb      	ldrb	r3, [r7, #15]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d008      	beq.n	80130a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801308e:	6839      	ldr	r1, [r7, #0]
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f000 f962 	bl	801335a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	2202      	movs	r2, #2
 801309a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801309e:	e065      	b.n	801316c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	f000 fa31 	bl	8013508 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	2203      	movs	r2, #3
 80130aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80130ae:	e05d      	b.n	801316c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f000 fa29 	bl	8013508 <USBD_CtlSendStatus>
      break;
 80130b6:	e059      	b.n	801316c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80130b8:	4b2f      	ldr	r3, [pc, #188]	@ (8013178 <USBD_SetConfig+0x150>)
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d112      	bne.n	80130e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2202      	movs	r2, #2
 80130c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80130c8:	4b2b      	ldr	r3, [pc, #172]	@ (8013178 <USBD_SetConfig+0x150>)
 80130ca:	781b      	ldrb	r3, [r3, #0]
 80130cc:	461a      	mov	r2, r3
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80130d2:	4b29      	ldr	r3, [pc, #164]	@ (8013178 <USBD_SetConfig+0x150>)
 80130d4:	781b      	ldrb	r3, [r3, #0]
 80130d6:	4619      	mov	r1, r3
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f7fe ffa8 	bl	801202e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f000 fa12 	bl	8013508 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80130e4:	e042      	b.n	801316c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80130e6:	4b24      	ldr	r3, [pc, #144]	@ (8013178 <USBD_SetConfig+0x150>)
 80130e8:	781b      	ldrb	r3, [r3, #0]
 80130ea:	461a      	mov	r2, r3
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d02a      	beq.n	801314a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	685b      	ldr	r3, [r3, #4]
 80130f8:	b2db      	uxtb	r3, r3
 80130fa:	4619      	mov	r1, r3
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f7fe ff96 	bl	801202e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013102:	4b1d      	ldr	r3, [pc, #116]	@ (8013178 <USBD_SetConfig+0x150>)
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	461a      	mov	r2, r3
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801310c:	4b1a      	ldr	r3, [pc, #104]	@ (8013178 <USBD_SetConfig+0x150>)
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	4619      	mov	r1, r3
 8013112:	6878      	ldr	r0, [r7, #4]
 8013114:	f7fe ff6f 	bl	8011ff6 <USBD_SetClassConfig>
 8013118:	4603      	mov	r3, r0
 801311a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801311c:	7bfb      	ldrb	r3, [r7, #15]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d00f      	beq.n	8013142 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8013122:	6839      	ldr	r1, [r7, #0]
 8013124:	6878      	ldr	r0, [r7, #4]
 8013126:	f000 f918 	bl	801335a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	685b      	ldr	r3, [r3, #4]
 801312e:	b2db      	uxtb	r3, r3
 8013130:	4619      	mov	r1, r3
 8013132:	6878      	ldr	r0, [r7, #4]
 8013134:	f7fe ff7b 	bl	801202e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2202      	movs	r2, #2
 801313c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013140:	e014      	b.n	801316c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013142:	6878      	ldr	r0, [r7, #4]
 8013144:	f000 f9e0 	bl	8013508 <USBD_CtlSendStatus>
      break;
 8013148:	e010      	b.n	801316c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f000 f9dc 	bl	8013508 <USBD_CtlSendStatus>
      break;
 8013150:	e00c      	b.n	801316c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8013152:	6839      	ldr	r1, [r7, #0]
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f000 f900 	bl	801335a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801315a:	4b07      	ldr	r3, [pc, #28]	@ (8013178 <USBD_SetConfig+0x150>)
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	4619      	mov	r1, r3
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f7fe ff64 	bl	801202e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013166:	2303      	movs	r3, #3
 8013168:	73fb      	strb	r3, [r7, #15]
      break;
 801316a:	bf00      	nop
  }

  return ret;
 801316c:	7bfb      	ldrb	r3, [r7, #15]
}
 801316e:	4618      	mov	r0, r3
 8013170:	3710      	adds	r7, #16
 8013172:	46bd      	mov	sp, r7
 8013174:	bd80      	pop	{r7, pc}
 8013176:	bf00      	nop
 8013178:	24025d0c 	.word	0x24025d0c

0801317c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b082      	sub	sp, #8
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
 8013184:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	88db      	ldrh	r3, [r3, #6]
 801318a:	2b01      	cmp	r3, #1
 801318c:	d004      	beq.n	8013198 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801318e:	6839      	ldr	r1, [r7, #0]
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f000 f8e2 	bl	801335a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013196:	e023      	b.n	80131e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801319e:	b2db      	uxtb	r3, r3
 80131a0:	2b02      	cmp	r3, #2
 80131a2:	dc02      	bgt.n	80131aa <USBD_GetConfig+0x2e>
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	dc03      	bgt.n	80131b0 <USBD_GetConfig+0x34>
 80131a8:	e015      	b.n	80131d6 <USBD_GetConfig+0x5a>
 80131aa:	2b03      	cmp	r3, #3
 80131ac:	d00b      	beq.n	80131c6 <USBD_GetConfig+0x4a>
 80131ae:	e012      	b.n	80131d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2200      	movs	r2, #0
 80131b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	3308      	adds	r3, #8
 80131ba:	2201      	movs	r2, #1
 80131bc:	4619      	mov	r1, r3
 80131be:	6878      	ldr	r0, [r7, #4]
 80131c0:	f000 f948 	bl	8013454 <USBD_CtlSendData>
        break;
 80131c4:	e00c      	b.n	80131e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	3304      	adds	r3, #4
 80131ca:	2201      	movs	r2, #1
 80131cc:	4619      	mov	r1, r3
 80131ce:	6878      	ldr	r0, [r7, #4]
 80131d0:	f000 f940 	bl	8013454 <USBD_CtlSendData>
        break;
 80131d4:	e004      	b.n	80131e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80131d6:	6839      	ldr	r1, [r7, #0]
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f000 f8be 	bl	801335a <USBD_CtlError>
        break;
 80131de:	bf00      	nop
}
 80131e0:	bf00      	nop
 80131e2:	3708      	adds	r7, #8
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}

080131e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b082      	sub	sp, #8
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
 80131f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80131f8:	b2db      	uxtb	r3, r3
 80131fa:	3b01      	subs	r3, #1
 80131fc:	2b02      	cmp	r3, #2
 80131fe:	d81e      	bhi.n	801323e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	88db      	ldrh	r3, [r3, #6]
 8013204:	2b02      	cmp	r3, #2
 8013206:	d004      	beq.n	8013212 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013208:	6839      	ldr	r1, [r7, #0]
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	f000 f8a5 	bl	801335a <USBD_CtlError>
        break;
 8013210:	e01a      	b.n	8013248 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2201      	movs	r2, #1
 8013216:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801321e:	2b00      	cmp	r3, #0
 8013220:	d005      	beq.n	801322e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	68db      	ldr	r3, [r3, #12]
 8013226:	f043 0202 	orr.w	r2, r3, #2
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	330c      	adds	r3, #12
 8013232:	2202      	movs	r2, #2
 8013234:	4619      	mov	r1, r3
 8013236:	6878      	ldr	r0, [r7, #4]
 8013238:	f000 f90c 	bl	8013454 <USBD_CtlSendData>
      break;
 801323c:	e004      	b.n	8013248 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801323e:	6839      	ldr	r1, [r7, #0]
 8013240:	6878      	ldr	r0, [r7, #4]
 8013242:	f000 f88a 	bl	801335a <USBD_CtlError>
      break;
 8013246:	bf00      	nop
  }
}
 8013248:	bf00      	nop
 801324a:	3708      	adds	r7, #8
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}

08013250 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
 8013258:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	885b      	ldrh	r3, [r3, #2]
 801325e:	2b01      	cmp	r3, #1
 8013260:	d107      	bne.n	8013272 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2201      	movs	r2, #1
 8013266:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801326a:	6878      	ldr	r0, [r7, #4]
 801326c:	f000 f94c 	bl	8013508 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013270:	e013      	b.n	801329a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	885b      	ldrh	r3, [r3, #2]
 8013276:	2b02      	cmp	r3, #2
 8013278:	d10b      	bne.n	8013292 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	889b      	ldrh	r3, [r3, #4]
 801327e:	0a1b      	lsrs	r3, r3, #8
 8013280:	b29b      	uxth	r3, r3
 8013282:	b2da      	uxtb	r2, r3
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f000 f93c 	bl	8013508 <USBD_CtlSendStatus>
}
 8013290:	e003      	b.n	801329a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8013292:	6839      	ldr	r1, [r7, #0]
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	f000 f860 	bl	801335a <USBD_CtlError>
}
 801329a:	bf00      	nop
 801329c:	3708      	adds	r7, #8
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}

080132a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80132a2:	b580      	push	{r7, lr}
 80132a4:	b082      	sub	sp, #8
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	6078      	str	r0, [r7, #4]
 80132aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80132b2:	b2db      	uxtb	r3, r3
 80132b4:	3b01      	subs	r3, #1
 80132b6:	2b02      	cmp	r3, #2
 80132b8:	d80b      	bhi.n	80132d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	885b      	ldrh	r3, [r3, #2]
 80132be:	2b01      	cmp	r3, #1
 80132c0:	d10c      	bne.n	80132dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	2200      	movs	r2, #0
 80132c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80132ca:	6878      	ldr	r0, [r7, #4]
 80132cc:	f000 f91c 	bl	8013508 <USBD_CtlSendStatus>
      }
      break;
 80132d0:	e004      	b.n	80132dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80132d2:	6839      	ldr	r1, [r7, #0]
 80132d4:	6878      	ldr	r0, [r7, #4]
 80132d6:	f000 f840 	bl	801335a <USBD_CtlError>
      break;
 80132da:	e000      	b.n	80132de <USBD_ClrFeature+0x3c>
      break;
 80132dc:	bf00      	nop
  }
}
 80132de:	bf00      	nop
 80132e0:	3708      	adds	r7, #8
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}

080132e6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80132e6:	b580      	push	{r7, lr}
 80132e8:	b084      	sub	sp, #16
 80132ea:	af00      	add	r7, sp, #0
 80132ec:	6078      	str	r0, [r7, #4]
 80132ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80132f0:	683b      	ldr	r3, [r7, #0]
 80132f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	781a      	ldrb	r2, [r3, #0]
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	3301      	adds	r3, #1
 8013300:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	781a      	ldrb	r2, [r3, #0]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	3301      	adds	r3, #1
 801330e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013310:	68f8      	ldr	r0, [r7, #12]
 8013312:	f7ff fa16 	bl	8012742 <SWAPBYTE>
 8013316:	4603      	mov	r3, r0
 8013318:	461a      	mov	r2, r3
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	3301      	adds	r3, #1
 8013322:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	3301      	adds	r3, #1
 8013328:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801332a:	68f8      	ldr	r0, [r7, #12]
 801332c:	f7ff fa09 	bl	8012742 <SWAPBYTE>
 8013330:	4603      	mov	r3, r0
 8013332:	461a      	mov	r2, r3
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	3301      	adds	r3, #1
 801333c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	3301      	adds	r3, #1
 8013342:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013344:	68f8      	ldr	r0, [r7, #12]
 8013346:	f7ff f9fc 	bl	8012742 <SWAPBYTE>
 801334a:	4603      	mov	r3, r0
 801334c:	461a      	mov	r2, r3
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	80da      	strh	r2, [r3, #6]
}
 8013352:	bf00      	nop
 8013354:	3710      	adds	r7, #16
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}

0801335a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801335a:	b580      	push	{r7, lr}
 801335c:	b082      	sub	sp, #8
 801335e:	af00      	add	r7, sp, #0
 8013360:	6078      	str	r0, [r7, #4]
 8013362:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013364:	2180      	movs	r1, #128	@ 0x80
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f000 fd3c 	bl	8013de4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801336c:	2100      	movs	r1, #0
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f000 fd38 	bl	8013de4 <USBD_LL_StallEP>
}
 8013374:	bf00      	nop
 8013376:	3708      	adds	r7, #8
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}

0801337c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b086      	sub	sp, #24
 8013380:	af00      	add	r7, sp, #0
 8013382:	60f8      	str	r0, [r7, #12]
 8013384:	60b9      	str	r1, [r7, #8]
 8013386:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013388:	2300      	movs	r3, #0
 801338a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d042      	beq.n	8013418 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8013396:	6938      	ldr	r0, [r7, #16]
 8013398:	f000 f842 	bl	8013420 <USBD_GetLen>
 801339c:	4603      	mov	r3, r0
 801339e:	3301      	adds	r3, #1
 80133a0:	005b      	lsls	r3, r3, #1
 80133a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80133a6:	d808      	bhi.n	80133ba <USBD_GetString+0x3e>
 80133a8:	6938      	ldr	r0, [r7, #16]
 80133aa:	f000 f839 	bl	8013420 <USBD_GetLen>
 80133ae:	4603      	mov	r3, r0
 80133b0:	3301      	adds	r3, #1
 80133b2:	b29b      	uxth	r3, r3
 80133b4:	005b      	lsls	r3, r3, #1
 80133b6:	b29a      	uxth	r2, r3
 80133b8:	e001      	b.n	80133be <USBD_GetString+0x42>
 80133ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80133c2:	7dfb      	ldrb	r3, [r7, #23]
 80133c4:	68ba      	ldr	r2, [r7, #8]
 80133c6:	4413      	add	r3, r2
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	7812      	ldrb	r2, [r2, #0]
 80133cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80133ce:	7dfb      	ldrb	r3, [r7, #23]
 80133d0:	3301      	adds	r3, #1
 80133d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80133d4:	7dfb      	ldrb	r3, [r7, #23]
 80133d6:	68ba      	ldr	r2, [r7, #8]
 80133d8:	4413      	add	r3, r2
 80133da:	2203      	movs	r2, #3
 80133dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80133de:	7dfb      	ldrb	r3, [r7, #23]
 80133e0:	3301      	adds	r3, #1
 80133e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80133e4:	e013      	b.n	801340e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80133e6:	7dfb      	ldrb	r3, [r7, #23]
 80133e8:	68ba      	ldr	r2, [r7, #8]
 80133ea:	4413      	add	r3, r2
 80133ec:	693a      	ldr	r2, [r7, #16]
 80133ee:	7812      	ldrb	r2, [r2, #0]
 80133f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	3301      	adds	r3, #1
 80133f6:	613b      	str	r3, [r7, #16]
    idx++;
 80133f8:	7dfb      	ldrb	r3, [r7, #23]
 80133fa:	3301      	adds	r3, #1
 80133fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80133fe:	7dfb      	ldrb	r3, [r7, #23]
 8013400:	68ba      	ldr	r2, [r7, #8]
 8013402:	4413      	add	r3, r2
 8013404:	2200      	movs	r2, #0
 8013406:	701a      	strb	r2, [r3, #0]
    idx++;
 8013408:	7dfb      	ldrb	r3, [r7, #23]
 801340a:	3301      	adds	r3, #1
 801340c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	781b      	ldrb	r3, [r3, #0]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d1e7      	bne.n	80133e6 <USBD_GetString+0x6a>
 8013416:	e000      	b.n	801341a <USBD_GetString+0x9e>
    return;
 8013418:	bf00      	nop
  }
}
 801341a:	3718      	adds	r7, #24
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}

08013420 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013420:	b480      	push	{r7}
 8013422:	b085      	sub	sp, #20
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013428:	2300      	movs	r3, #0
 801342a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013430:	e005      	b.n	801343e <USBD_GetLen+0x1e>
  {
    len++;
 8013432:	7bfb      	ldrb	r3, [r7, #15]
 8013434:	3301      	adds	r3, #1
 8013436:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	3301      	adds	r3, #1
 801343c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	781b      	ldrb	r3, [r3, #0]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d1f5      	bne.n	8013432 <USBD_GetLen+0x12>
  }

  return len;
 8013446:	7bfb      	ldrb	r3, [r7, #15]
}
 8013448:	4618      	mov	r0, r3
 801344a:	3714      	adds	r7, #20
 801344c:	46bd      	mov	sp, r7
 801344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013452:	4770      	bx	lr

08013454 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b084      	sub	sp, #16
 8013458:	af00      	add	r7, sp, #0
 801345a:	60f8      	str	r0, [r7, #12]
 801345c:	60b9      	str	r1, [r7, #8]
 801345e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	2202      	movs	r2, #2
 8013464:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	687a      	ldr	r2, [r7, #4]
 801346c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	687a      	ldr	r2, [r7, #4]
 8013472:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	68ba      	ldr	r2, [r7, #8]
 8013478:	2100      	movs	r1, #0
 801347a:	68f8      	ldr	r0, [r7, #12]
 801347c:	f000 fd3b 	bl	8013ef6 <USBD_LL_Transmit>

  return USBD_OK;
 8013480:	2300      	movs	r3, #0
}
 8013482:	4618      	mov	r0, r3
 8013484:	3710      	adds	r7, #16
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}

0801348a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801348a:	b580      	push	{r7, lr}
 801348c:	b084      	sub	sp, #16
 801348e:	af00      	add	r7, sp, #0
 8013490:	60f8      	str	r0, [r7, #12]
 8013492:	60b9      	str	r1, [r7, #8]
 8013494:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	68ba      	ldr	r2, [r7, #8]
 801349a:	2100      	movs	r1, #0
 801349c:	68f8      	ldr	r0, [r7, #12]
 801349e:	f000 fd2a 	bl	8013ef6 <USBD_LL_Transmit>

  return USBD_OK;
 80134a2:	2300      	movs	r3, #0
}
 80134a4:	4618      	mov	r0, r3
 80134a6:	3710      	adds	r7, #16
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}

080134ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b084      	sub	sp, #16
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	60f8      	str	r0, [r7, #12]
 80134b4:	60b9      	str	r1, [r7, #8]
 80134b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	2203      	movs	r2, #3
 80134bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	687a      	ldr	r2, [r7, #4]
 80134c4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	687a      	ldr	r2, [r7, #4]
 80134cc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	68ba      	ldr	r2, [r7, #8]
 80134d4:	2100      	movs	r1, #0
 80134d6:	68f8      	ldr	r0, [r7, #12]
 80134d8:	f000 fd2e 	bl	8013f38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80134dc:	2300      	movs	r3, #0
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3710      	adds	r7, #16
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}

080134e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80134e6:	b580      	push	{r7, lr}
 80134e8:	b084      	sub	sp, #16
 80134ea:	af00      	add	r7, sp, #0
 80134ec:	60f8      	str	r0, [r7, #12]
 80134ee:	60b9      	str	r1, [r7, #8]
 80134f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	68ba      	ldr	r2, [r7, #8]
 80134f6:	2100      	movs	r1, #0
 80134f8:	68f8      	ldr	r0, [r7, #12]
 80134fa:	f000 fd1d 	bl	8013f38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80134fe:	2300      	movs	r3, #0
}
 8013500:	4618      	mov	r0, r3
 8013502:	3710      	adds	r7, #16
 8013504:	46bd      	mov	sp, r7
 8013506:	bd80      	pop	{r7, pc}

08013508 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2204      	movs	r2, #4
 8013514:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013518:	2300      	movs	r3, #0
 801351a:	2200      	movs	r2, #0
 801351c:	2100      	movs	r1, #0
 801351e:	6878      	ldr	r0, [r7, #4]
 8013520:	f000 fce9 	bl	8013ef6 <USBD_LL_Transmit>

  return USBD_OK;
 8013524:	2300      	movs	r3, #0
}
 8013526:	4618      	mov	r0, r3
 8013528:	3708      	adds	r7, #8
 801352a:	46bd      	mov	sp, r7
 801352c:	bd80      	pop	{r7, pc}

0801352e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801352e:	b580      	push	{r7, lr}
 8013530:	b082      	sub	sp, #8
 8013532:	af00      	add	r7, sp, #0
 8013534:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	2205      	movs	r2, #5
 801353a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801353e:	2300      	movs	r3, #0
 8013540:	2200      	movs	r2, #0
 8013542:	2100      	movs	r1, #0
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f000 fcf7 	bl	8013f38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801354a:	2300      	movs	r3, #0
}
 801354c:	4618      	mov	r0, r3
 801354e:	3708      	adds	r7, #8
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}

08013554 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013558:	2200      	movs	r2, #0
 801355a:	4918      	ldr	r1, [pc, #96]	@ (80135bc <MX_USB_DEVICE_Init+0x68>)
 801355c:	4818      	ldr	r0, [pc, #96]	@ (80135c0 <MX_USB_DEVICE_Init+0x6c>)
 801355e:	f7fe fccd 	bl	8011efc <USBD_Init>
 8013562:	4603      	mov	r3, r0
 8013564:	2b00      	cmp	r3, #0
 8013566:	d001      	beq.n	801356c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013568:	f7ed ffa0 	bl	80014ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801356c:	4915      	ldr	r1, [pc, #84]	@ (80135c4 <MX_USB_DEVICE_Init+0x70>)
 801356e:	4814      	ldr	r0, [pc, #80]	@ (80135c0 <MX_USB_DEVICE_Init+0x6c>)
 8013570:	f7fe fcf4 	bl	8011f5c <USBD_RegisterClass>
 8013574:	4603      	mov	r3, r0
 8013576:	2b00      	cmp	r3, #0
 8013578:	d001      	beq.n	801357e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801357a:	f7ed ff97 	bl	80014ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801357e:	4912      	ldr	r1, [pc, #72]	@ (80135c8 <MX_USB_DEVICE_Init+0x74>)
 8013580:	480f      	ldr	r0, [pc, #60]	@ (80135c0 <MX_USB_DEVICE_Init+0x6c>)
 8013582:	f7fe fbeb 	bl	8011d5c <USBD_CDC_RegisterInterface>
 8013586:	4603      	mov	r3, r0
 8013588:	2b00      	cmp	r3, #0
 801358a:	d001      	beq.n	8013590 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801358c:	f7ed ff8e 	bl	80014ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013590:	480b      	ldr	r0, [pc, #44]	@ (80135c0 <MX_USB_DEVICE_Init+0x6c>)
 8013592:	f7fe fd19 	bl	8011fc8 <USBD_Start>
 8013596:	4603      	mov	r3, r0
 8013598:	2b00      	cmp	r3, #0
 801359a:	d001      	beq.n	80135a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801359c:	f7ed ff86 	bl	80014ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80135a0:	f7f6 f908 	bl	80097b4 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 80135a4:	4b06      	ldr	r3, [pc, #24]	@ (80135c0 <MX_USB_DEVICE_Init+0x6c>)
 80135a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80135aa:	4a05      	ldr	r2, [pc, #20]	@ (80135c0 <MX_USB_DEVICE_Init+0x6c>)
 80135ac:	33b0      	adds	r3, #176	@ 0xb0
 80135ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135b2:	4a06      	ldr	r2, [pc, #24]	@ (80135cc <MX_USB_DEVICE_Init+0x78>)
 80135b4:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80135b6:	bf00      	nop
 80135b8:	bd80      	pop	{r7, pc}
 80135ba:	bf00      	nop
 80135bc:	240000c8 	.word	0x240000c8
 80135c0:	24025d10 	.word	0x24025d10
 80135c4:	24000034 	.word	0x24000034
 80135c8:	240000b4 	.word	0x240000b4
 80135cc:	24025fec 	.word	0x24025fec

080135d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80135d4:	2200      	movs	r2, #0
 80135d6:	4905      	ldr	r1, [pc, #20]	@ (80135ec <CDC_Init_FS+0x1c>)
 80135d8:	4805      	ldr	r0, [pc, #20]	@ (80135f0 <CDC_Init_FS+0x20>)
 80135da:	f7fe fbd9 	bl	8011d90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80135de:	4905      	ldr	r1, [pc, #20]	@ (80135f4 <CDC_Init_FS+0x24>)
 80135e0:	4803      	ldr	r0, [pc, #12]	@ (80135f0 <CDC_Init_FS+0x20>)
 80135e2:	f7fe fbf7 	bl	8011dd4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80135e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80135e8:	4618      	mov	r0, r3
 80135ea:	bd80      	pop	{r7, pc}
 80135ec:	240267f0 	.word	0x240267f0
 80135f0:	24025d10 	.word	0x24025d10
 80135f4:	24025ff0 	.word	0x24025ff0

080135f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80135f8:	b480      	push	{r7}
 80135fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80135fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80135fe:	4618      	mov	r0, r3
 8013600:	46bd      	mov	sp, r7
 8013602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013606:	4770      	bx	lr

08013608 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013608:	b480      	push	{r7}
 801360a:	b083      	sub	sp, #12
 801360c:	af00      	add	r7, sp, #0
 801360e:	4603      	mov	r3, r0
 8013610:	6039      	str	r1, [r7, #0]
 8013612:	71fb      	strb	r3, [r7, #7]
 8013614:	4613      	mov	r3, r2
 8013616:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013618:	79fb      	ldrb	r3, [r7, #7]
 801361a:	2b23      	cmp	r3, #35	@ 0x23
 801361c:	d84a      	bhi.n	80136b4 <CDC_Control_FS+0xac>
 801361e:	a201      	add	r2, pc, #4	@ (adr r2, 8013624 <CDC_Control_FS+0x1c>)
 8013620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013624:	080136b5 	.word	0x080136b5
 8013628:	080136b5 	.word	0x080136b5
 801362c:	080136b5 	.word	0x080136b5
 8013630:	080136b5 	.word	0x080136b5
 8013634:	080136b5 	.word	0x080136b5
 8013638:	080136b5 	.word	0x080136b5
 801363c:	080136b5 	.word	0x080136b5
 8013640:	080136b5 	.word	0x080136b5
 8013644:	080136b5 	.word	0x080136b5
 8013648:	080136b5 	.word	0x080136b5
 801364c:	080136b5 	.word	0x080136b5
 8013650:	080136b5 	.word	0x080136b5
 8013654:	080136b5 	.word	0x080136b5
 8013658:	080136b5 	.word	0x080136b5
 801365c:	080136b5 	.word	0x080136b5
 8013660:	080136b5 	.word	0x080136b5
 8013664:	080136b5 	.word	0x080136b5
 8013668:	080136b5 	.word	0x080136b5
 801366c:	080136b5 	.word	0x080136b5
 8013670:	080136b5 	.word	0x080136b5
 8013674:	080136b5 	.word	0x080136b5
 8013678:	080136b5 	.word	0x080136b5
 801367c:	080136b5 	.word	0x080136b5
 8013680:	080136b5 	.word	0x080136b5
 8013684:	080136b5 	.word	0x080136b5
 8013688:	080136b5 	.word	0x080136b5
 801368c:	080136b5 	.word	0x080136b5
 8013690:	080136b5 	.word	0x080136b5
 8013694:	080136b5 	.word	0x080136b5
 8013698:	080136b5 	.word	0x080136b5
 801369c:	080136b5 	.word	0x080136b5
 80136a0:	080136b5 	.word	0x080136b5
 80136a4:	080136b5 	.word	0x080136b5
 80136a8:	080136b5 	.word	0x080136b5
 80136ac:	080136b5 	.word	0x080136b5
 80136b0:	080136b5 	.word	0x080136b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80136b4:	bf00      	nop
  }

  return (USBD_OK);
 80136b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	370c      	adds	r7, #12
 80136bc:	46bd      	mov	sp, r7
 80136be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c2:	4770      	bx	lr

080136c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b084      	sub	sp, #16
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80136ce:	6879      	ldr	r1, [r7, #4]
 80136d0:	4811      	ldr	r0, [pc, #68]	@ (8013718 <CDC_Receive_FS+0x54>)
 80136d2:	f7fe fb7f 	bl	8011dd4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80136d6:	4810      	ldr	r0, [pc, #64]	@ (8013718 <CDC_Receive_FS+0x54>)
 80136d8:	f7fe fbda 	bl	8011e90 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 80136dc:	4b0f      	ldr	r3, [pc, #60]	@ (801371c <CDC_Receive_FS+0x58>)
 80136de:	2201      	movs	r2, #1
 80136e0:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit(&huart1, Buf, *Len, 100)) {
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	b29a      	uxth	r2, r3
 80136e8:	2364      	movs	r3, #100	@ 0x64
 80136ea:	6879      	ldr	r1, [r7, #4]
 80136ec:	480c      	ldr	r0, [pc, #48]	@ (8013720 <CDC_Receive_FS+0x5c>)
 80136ee:	f7fa fe71 	bl	800e3d4 <HAL_UART_Transmit>
 80136f2:	4603      	mov	r3, r0
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d00a      	beq.n	801370e <CDC_Receive_FS+0x4a>
		uint8_t* usb_msg = "Failed to TX\n";
 80136f8:	4b0a      	ldr	r3, [pc, #40]	@ (8013724 <CDC_Receive_FS+0x60>)
 80136fa:	60fb      	str	r3, [r7, #12]
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80136fc:	68f8      	ldr	r0, [r7, #12]
 80136fe:	f7ec fe3f 	bl	8000380 <strlen>
 8013702:	4603      	mov	r3, r0
 8013704:	b29b      	uxth	r3, r3
 8013706:	4619      	mov	r1, r3
 8013708:	68f8      	ldr	r0, [r7, #12]
 801370a:	f000 f80d 	bl	8013728 <CDC_Transmit_FS>
	}

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 801370e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013710:	4618      	mov	r0, r3
 8013712:	3710      	adds	r7, #16
 8013714:	46bd      	mov	sp, r7
 8013716:	bd80      	pop	{r7, pc}
 8013718:	24025d10 	.word	0x24025d10
 801371c:	2400090c 	.word	0x2400090c
 8013720:	2400079c 	.word	0x2400079c
 8013724:	08016d5c 	.word	0x08016d5c

08013728 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b084      	sub	sp, #16
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
 8013730:	460b      	mov	r3, r1
 8013732:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013734:	2300      	movs	r3, #0
 8013736:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013738:	4b0d      	ldr	r3, [pc, #52]	@ (8013770 <CDC_Transmit_FS+0x48>)
 801373a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801373e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013746:	2b00      	cmp	r3, #0
 8013748:	d001      	beq.n	801374e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801374a:	2301      	movs	r3, #1
 801374c:	e00b      	b.n	8013766 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801374e:	887b      	ldrh	r3, [r7, #2]
 8013750:	461a      	mov	r2, r3
 8013752:	6879      	ldr	r1, [r7, #4]
 8013754:	4806      	ldr	r0, [pc, #24]	@ (8013770 <CDC_Transmit_FS+0x48>)
 8013756:	f7fe fb1b 	bl	8011d90 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801375a:	4805      	ldr	r0, [pc, #20]	@ (8013770 <CDC_Transmit_FS+0x48>)
 801375c:	f7fe fb58 	bl	8011e10 <USBD_CDC_TransmitPacket>
 8013760:	4603      	mov	r3, r0
 8013762:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013764:	7bfb      	ldrb	r3, [r7, #15]
}
 8013766:	4618      	mov	r0, r3
 8013768:	3710      	adds	r7, #16
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}
 801376e:	bf00      	nop
 8013770:	24025d10 	.word	0x24025d10

08013774 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013774:	b480      	push	{r7}
 8013776:	b087      	sub	sp, #28
 8013778:	af00      	add	r7, sp, #0
 801377a:	60f8      	str	r0, [r7, #12]
 801377c:	60b9      	str	r1, [r7, #8]
 801377e:	4613      	mov	r3, r2
 8013780:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013782:	2300      	movs	r3, #0
 8013784:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013786:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801378a:	4618      	mov	r0, r3
 801378c:	371c      	adds	r7, #28
 801378e:	46bd      	mov	sp, r7
 8013790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013794:	4770      	bx	lr
	...

08013798 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013798:	b480      	push	{r7}
 801379a:	b083      	sub	sp, #12
 801379c:	af00      	add	r7, sp, #0
 801379e:	4603      	mov	r3, r0
 80137a0:	6039      	str	r1, [r7, #0]
 80137a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	2212      	movs	r2, #18
 80137a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80137aa:	4b03      	ldr	r3, [pc, #12]	@ (80137b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80137ac:	4618      	mov	r0, r3
 80137ae:	370c      	adds	r7, #12
 80137b0:	46bd      	mov	sp, r7
 80137b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b6:	4770      	bx	lr
 80137b8:	240000e8 	.word	0x240000e8

080137bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137bc:	b480      	push	{r7}
 80137be:	b083      	sub	sp, #12
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	4603      	mov	r3, r0
 80137c4:	6039      	str	r1, [r7, #0]
 80137c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	2204      	movs	r2, #4
 80137cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80137ce:	4b03      	ldr	r3, [pc, #12]	@ (80137dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80137d0:	4618      	mov	r0, r3
 80137d2:	370c      	adds	r7, #12
 80137d4:	46bd      	mov	sp, r7
 80137d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137da:	4770      	bx	lr
 80137dc:	240000fc 	.word	0x240000fc

080137e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	4603      	mov	r3, r0
 80137e8:	6039      	str	r1, [r7, #0]
 80137ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80137ec:	79fb      	ldrb	r3, [r7, #7]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d105      	bne.n	80137fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80137f2:	683a      	ldr	r2, [r7, #0]
 80137f4:	4907      	ldr	r1, [pc, #28]	@ (8013814 <USBD_FS_ProductStrDescriptor+0x34>)
 80137f6:	4808      	ldr	r0, [pc, #32]	@ (8013818 <USBD_FS_ProductStrDescriptor+0x38>)
 80137f8:	f7ff fdc0 	bl	801337c <USBD_GetString>
 80137fc:	e004      	b.n	8013808 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80137fe:	683a      	ldr	r2, [r7, #0]
 8013800:	4904      	ldr	r1, [pc, #16]	@ (8013814 <USBD_FS_ProductStrDescriptor+0x34>)
 8013802:	4805      	ldr	r0, [pc, #20]	@ (8013818 <USBD_FS_ProductStrDescriptor+0x38>)
 8013804:	f7ff fdba 	bl	801337c <USBD_GetString>
  }
  return USBD_StrDesc;
 8013808:	4b02      	ldr	r3, [pc, #8]	@ (8013814 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801380a:	4618      	mov	r0, r3
 801380c:	3708      	adds	r7, #8
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	24026ff0 	.word	0x24026ff0
 8013818:	08016d6c 	.word	0x08016d6c

0801381c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b082      	sub	sp, #8
 8013820:	af00      	add	r7, sp, #0
 8013822:	4603      	mov	r3, r0
 8013824:	6039      	str	r1, [r7, #0]
 8013826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013828:	683a      	ldr	r2, [r7, #0]
 801382a:	4904      	ldr	r1, [pc, #16]	@ (801383c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801382c:	4804      	ldr	r0, [pc, #16]	@ (8013840 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801382e:	f7ff fda5 	bl	801337c <USBD_GetString>
  return USBD_StrDesc;
 8013832:	4b02      	ldr	r3, [pc, #8]	@ (801383c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013834:	4618      	mov	r0, r3
 8013836:	3708      	adds	r7, #8
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}
 801383c:	24026ff0 	.word	0x24026ff0
 8013840:	08016d84 	.word	0x08016d84

08013844 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	4603      	mov	r3, r0
 801384c:	6039      	str	r1, [r7, #0]
 801384e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013850:	683b      	ldr	r3, [r7, #0]
 8013852:	221a      	movs	r2, #26
 8013854:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013856:	f000 f843 	bl	80138e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801385a:	4b02      	ldr	r3, [pc, #8]	@ (8013864 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801385c:	4618      	mov	r0, r3
 801385e:	3708      	adds	r7, #8
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}
 8013864:	24000100 	.word	0x24000100

08013868 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	4603      	mov	r3, r0
 8013870:	6039      	str	r1, [r7, #0]
 8013872:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013874:	79fb      	ldrb	r3, [r7, #7]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d105      	bne.n	8013886 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801387a:	683a      	ldr	r2, [r7, #0]
 801387c:	4907      	ldr	r1, [pc, #28]	@ (801389c <USBD_FS_ConfigStrDescriptor+0x34>)
 801387e:	4808      	ldr	r0, [pc, #32]	@ (80138a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013880:	f7ff fd7c 	bl	801337c <USBD_GetString>
 8013884:	e004      	b.n	8013890 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013886:	683a      	ldr	r2, [r7, #0]
 8013888:	4904      	ldr	r1, [pc, #16]	@ (801389c <USBD_FS_ConfigStrDescriptor+0x34>)
 801388a:	4805      	ldr	r0, [pc, #20]	@ (80138a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801388c:	f7ff fd76 	bl	801337c <USBD_GetString>
  }
  return USBD_StrDesc;
 8013890:	4b02      	ldr	r3, [pc, #8]	@ (801389c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013892:	4618      	mov	r0, r3
 8013894:	3708      	adds	r7, #8
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}
 801389a:	bf00      	nop
 801389c:	24026ff0 	.word	0x24026ff0
 80138a0:	08016d98 	.word	0x08016d98

080138a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b082      	sub	sp, #8
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	4603      	mov	r3, r0
 80138ac:	6039      	str	r1, [r7, #0]
 80138ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80138b0:	79fb      	ldrb	r3, [r7, #7]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d105      	bne.n	80138c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80138b6:	683a      	ldr	r2, [r7, #0]
 80138b8:	4907      	ldr	r1, [pc, #28]	@ (80138d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80138ba:	4808      	ldr	r0, [pc, #32]	@ (80138dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80138bc:	f7ff fd5e 	bl	801337c <USBD_GetString>
 80138c0:	e004      	b.n	80138cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80138c2:	683a      	ldr	r2, [r7, #0]
 80138c4:	4904      	ldr	r1, [pc, #16]	@ (80138d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80138c6:	4805      	ldr	r0, [pc, #20]	@ (80138dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80138c8:	f7ff fd58 	bl	801337c <USBD_GetString>
  }
  return USBD_StrDesc;
 80138cc:	4b02      	ldr	r3, [pc, #8]	@ (80138d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	3708      	adds	r7, #8
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}
 80138d6:	bf00      	nop
 80138d8:	24026ff0 	.word	0x24026ff0
 80138dc:	08016da4 	.word	0x08016da4

080138e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b084      	sub	sp, #16
 80138e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80138e6:	4b0f      	ldr	r3, [pc, #60]	@ (8013924 <Get_SerialNum+0x44>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80138ec:	4b0e      	ldr	r3, [pc, #56]	@ (8013928 <Get_SerialNum+0x48>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80138f2:	4b0e      	ldr	r3, [pc, #56]	@ (801392c <Get_SerialNum+0x4c>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80138f8:	68fa      	ldr	r2, [r7, #12]
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	4413      	add	r3, r2
 80138fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d009      	beq.n	801391a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013906:	2208      	movs	r2, #8
 8013908:	4909      	ldr	r1, [pc, #36]	@ (8013930 <Get_SerialNum+0x50>)
 801390a:	68f8      	ldr	r0, [r7, #12]
 801390c:	f000 f814 	bl	8013938 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013910:	2204      	movs	r2, #4
 8013912:	4908      	ldr	r1, [pc, #32]	@ (8013934 <Get_SerialNum+0x54>)
 8013914:	68b8      	ldr	r0, [r7, #8]
 8013916:	f000 f80f 	bl	8013938 <IntToUnicode>
  }
}
 801391a:	bf00      	nop
 801391c:	3710      	adds	r7, #16
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}
 8013922:	bf00      	nop
 8013924:	1ff1e800 	.word	0x1ff1e800
 8013928:	1ff1e804 	.word	0x1ff1e804
 801392c:	1ff1e808 	.word	0x1ff1e808
 8013930:	24000102 	.word	0x24000102
 8013934:	24000112 	.word	0x24000112

08013938 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013938:	b480      	push	{r7}
 801393a:	b087      	sub	sp, #28
 801393c:	af00      	add	r7, sp, #0
 801393e:	60f8      	str	r0, [r7, #12]
 8013940:	60b9      	str	r1, [r7, #8]
 8013942:	4613      	mov	r3, r2
 8013944:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013946:	2300      	movs	r3, #0
 8013948:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801394a:	2300      	movs	r3, #0
 801394c:	75fb      	strb	r3, [r7, #23]
 801394e:	e027      	b.n	80139a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	0f1b      	lsrs	r3, r3, #28
 8013954:	2b09      	cmp	r3, #9
 8013956:	d80b      	bhi.n	8013970 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	0f1b      	lsrs	r3, r3, #28
 801395c:	b2da      	uxtb	r2, r3
 801395e:	7dfb      	ldrb	r3, [r7, #23]
 8013960:	005b      	lsls	r3, r3, #1
 8013962:	4619      	mov	r1, r3
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	440b      	add	r3, r1
 8013968:	3230      	adds	r2, #48	@ 0x30
 801396a:	b2d2      	uxtb	r2, r2
 801396c:	701a      	strb	r2, [r3, #0]
 801396e:	e00a      	b.n	8013986 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	0f1b      	lsrs	r3, r3, #28
 8013974:	b2da      	uxtb	r2, r3
 8013976:	7dfb      	ldrb	r3, [r7, #23]
 8013978:	005b      	lsls	r3, r3, #1
 801397a:	4619      	mov	r1, r3
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	440b      	add	r3, r1
 8013980:	3237      	adds	r2, #55	@ 0x37
 8013982:	b2d2      	uxtb	r2, r2
 8013984:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	011b      	lsls	r3, r3, #4
 801398a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801398c:	7dfb      	ldrb	r3, [r7, #23]
 801398e:	005b      	lsls	r3, r3, #1
 8013990:	3301      	adds	r3, #1
 8013992:	68ba      	ldr	r2, [r7, #8]
 8013994:	4413      	add	r3, r2
 8013996:	2200      	movs	r2, #0
 8013998:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801399a:	7dfb      	ldrb	r3, [r7, #23]
 801399c:	3301      	adds	r3, #1
 801399e:	75fb      	strb	r3, [r7, #23]
 80139a0:	7dfa      	ldrb	r2, [r7, #23]
 80139a2:	79fb      	ldrb	r3, [r7, #7]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d3d3      	bcc.n	8013950 <IntToUnicode+0x18>
  }
}
 80139a8:	bf00      	nop
 80139aa:	bf00      	nop
 80139ac:	371c      	adds	r7, #28
 80139ae:	46bd      	mov	sp, r7
 80139b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b4:	4770      	bx	lr
	...

080139b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b0ba      	sub	sp, #232	@ 0xe8
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80139c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80139c4:	2200      	movs	r2, #0
 80139c6:	601a      	str	r2, [r3, #0]
 80139c8:	605a      	str	r2, [r3, #4]
 80139ca:	609a      	str	r2, [r3, #8]
 80139cc:	60da      	str	r2, [r3, #12]
 80139ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80139d0:	f107 0310 	add.w	r3, r7, #16
 80139d4:	22c0      	movs	r2, #192	@ 0xc0
 80139d6:	2100      	movs	r1, #0
 80139d8:	4618      	mov	r0, r3
 80139da:	f001 f936 	bl	8014c4a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	4a2c      	ldr	r2, [pc, #176]	@ (8013a94 <HAL_PCD_MspInit+0xdc>)
 80139e4:	4293      	cmp	r3, r2
 80139e6:	d151      	bne.n	8013a8c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80139e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80139ec:	f04f 0300 	mov.w	r3, #0
 80139f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80139f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80139f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80139fc:	f107 0310 	add.w	r3, r7, #16
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7f6 fecd 	bl	800a7a0 <HAL_RCCEx_PeriphCLKConfig>
 8013a06:	4603      	mov	r3, r0
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d001      	beq.n	8013a10 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8013a0c:	f7ed fd4e 	bl	80014ac <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8013a10:	f7f5 fed0 	bl	80097b4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013a14:	4b20      	ldr	r3, [pc, #128]	@ (8013a98 <HAL_PCD_MspInit+0xe0>)
 8013a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8013a98 <HAL_PCD_MspInit+0xe0>)
 8013a1c:	f043 0301 	orr.w	r3, r3, #1
 8013a20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8013a24:	4b1c      	ldr	r3, [pc, #112]	@ (8013a98 <HAL_PCD_MspInit+0xe0>)
 8013a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013a2a:	f003 0301 	and.w	r3, r3, #1
 8013a2e:	60fb      	str	r3, [r7, #12]
 8013a30:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013a32:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8013a36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a3a:	2302      	movs	r3, #2
 8013a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a40:	2300      	movs	r3, #0
 8013a42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013a46:	2300      	movs	r3, #0
 8013a48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8013a4c:	230a      	movs	r3, #10
 8013a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013a52:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8013a56:	4619      	mov	r1, r3
 8013a58:	4810      	ldr	r0, [pc, #64]	@ (8013a9c <HAL_PCD_MspInit+0xe4>)
 8013a5a:	f7f1 fb2f 	bl	80050bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8013a98 <HAL_PCD_MspInit+0xe0>)
 8013a60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013a64:	4a0c      	ldr	r2, [pc, #48]	@ (8013a98 <HAL_PCD_MspInit+0xe0>)
 8013a66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013a6a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8013a98 <HAL_PCD_MspInit+0xe0>)
 8013a70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013a78:	60bb      	str	r3, [r7, #8]
 8013a7a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	2100      	movs	r1, #0
 8013a80:	2065      	movs	r0, #101	@ 0x65
 8013a82:	f7ee fea2 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013a86:	2065      	movs	r0, #101	@ 0x65
 8013a88:	f7ee feb9 	bl	80027fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013a8c:	bf00      	nop
 8013a8e:	37e8      	adds	r7, #232	@ 0xe8
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd80      	pop	{r7, pc}
 8013a94:	40080000 	.word	0x40080000
 8013a98:	58024400 	.word	0x58024400
 8013a9c:	58020000 	.word	0x58020000

08013aa0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b082      	sub	sp, #8
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8013ab4:	4619      	mov	r1, r3
 8013ab6:	4610      	mov	r0, r2
 8013ab8:	f7fe fad3 	bl	8012062 <USBD_LL_SetupStage>
}
 8013abc:	bf00      	nop
 8013abe:	3708      	adds	r7, #8
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}

08013ac4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b082      	sub	sp, #8
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
 8013acc:	460b      	mov	r3, r1
 8013ace:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8013ad6:	78fa      	ldrb	r2, [r7, #3]
 8013ad8:	6879      	ldr	r1, [r7, #4]
 8013ada:	4613      	mov	r3, r2
 8013adc:	00db      	lsls	r3, r3, #3
 8013ade:	4413      	add	r3, r2
 8013ae0:	009b      	lsls	r3, r3, #2
 8013ae2:	440b      	add	r3, r1
 8013ae4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013ae8:	681a      	ldr	r2, [r3, #0]
 8013aea:	78fb      	ldrb	r3, [r7, #3]
 8013aec:	4619      	mov	r1, r3
 8013aee:	f7fe fb0d 	bl	801210c <USBD_LL_DataOutStage>
}
 8013af2:	bf00      	nop
 8013af4:	3708      	adds	r7, #8
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bd80      	pop	{r7, pc}

08013afa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013afa:	b580      	push	{r7, lr}
 8013afc:	b082      	sub	sp, #8
 8013afe:	af00      	add	r7, sp, #0
 8013b00:	6078      	str	r0, [r7, #4]
 8013b02:	460b      	mov	r3, r1
 8013b04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8013b0c:	78fa      	ldrb	r2, [r7, #3]
 8013b0e:	6879      	ldr	r1, [r7, #4]
 8013b10:	4613      	mov	r3, r2
 8013b12:	00db      	lsls	r3, r3, #3
 8013b14:	4413      	add	r3, r2
 8013b16:	009b      	lsls	r3, r3, #2
 8013b18:	440b      	add	r3, r1
 8013b1a:	3320      	adds	r3, #32
 8013b1c:	681a      	ldr	r2, [r3, #0]
 8013b1e:	78fb      	ldrb	r3, [r7, #3]
 8013b20:	4619      	mov	r1, r3
 8013b22:	f7fe fba6 	bl	8012272 <USBD_LL_DataInStage>
}
 8013b26:	bf00      	nop
 8013b28:	3708      	adds	r7, #8
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}

08013b2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b2e:	b580      	push	{r7, lr}
 8013b30:	b082      	sub	sp, #8
 8013b32:	af00      	add	r7, sp, #0
 8013b34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7fe fce0 	bl	8012502 <USBD_LL_SOF>
}
 8013b42:	bf00      	nop
 8013b44:	3708      	adds	r7, #8
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}

08013b4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b4a:	b580      	push	{r7, lr}
 8013b4c:	b084      	sub	sp, #16
 8013b4e:	af00      	add	r7, sp, #0
 8013b50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013b52:	2301      	movs	r3, #1
 8013b54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	79db      	ldrb	r3, [r3, #7]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d102      	bne.n	8013b64 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8013b5e:	2300      	movs	r3, #0
 8013b60:	73fb      	strb	r3, [r7, #15]
 8013b62:	e008      	b.n	8013b76 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	79db      	ldrb	r3, [r3, #7]
 8013b68:	2b02      	cmp	r3, #2
 8013b6a:	d102      	bne.n	8013b72 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013b6c:	2301      	movs	r3, #1
 8013b6e:	73fb      	strb	r3, [r7, #15]
 8013b70:	e001      	b.n	8013b76 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013b72:	f7ed fc9b 	bl	80014ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013b7c:	7bfa      	ldrb	r2, [r7, #15]
 8013b7e:	4611      	mov	r1, r2
 8013b80:	4618      	mov	r0, r3
 8013b82:	f7fe fc7a 	bl	801247a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f7fe fc22 	bl	80123d6 <USBD_LL_Reset>
}
 8013b92:	bf00      	nop
 8013b94:	3710      	adds	r7, #16
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
	...

08013b9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b082      	sub	sp, #8
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7fe fc75 	bl	801249a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	687a      	ldr	r2, [r7, #4]
 8013bbc:	6812      	ldr	r2, [r2, #0]
 8013bbe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013bc2:	f043 0301 	orr.w	r3, r3, #1
 8013bc6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	7adb      	ldrb	r3, [r3, #11]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d005      	beq.n	8013bdc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013bd0:	4b04      	ldr	r3, [pc, #16]	@ (8013be4 <HAL_PCD_SuspendCallback+0x48>)
 8013bd2:	691b      	ldr	r3, [r3, #16]
 8013bd4:	4a03      	ldr	r2, [pc, #12]	@ (8013be4 <HAL_PCD_SuspendCallback+0x48>)
 8013bd6:	f043 0306 	orr.w	r3, r3, #6
 8013bda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013bdc:	bf00      	nop
 8013bde:	3708      	adds	r7, #8
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd80      	pop	{r7, pc}
 8013be4:	e000ed00 	.word	0xe000ed00

08013be8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b082      	sub	sp, #8
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f7fe fc6b 	bl	80124d2 <USBD_LL_Resume>
}
 8013bfc:	bf00      	nop
 8013bfe:	3708      	adds	r7, #8
 8013c00:	46bd      	mov	sp, r7
 8013c02:	bd80      	pop	{r7, pc}

08013c04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b082      	sub	sp, #8
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	460b      	mov	r3, r1
 8013c0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013c16:	78fa      	ldrb	r2, [r7, #3]
 8013c18:	4611      	mov	r1, r2
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	f7fe fcc3 	bl	80125a6 <USBD_LL_IsoOUTIncomplete>
}
 8013c20:	bf00      	nop
 8013c22:	3708      	adds	r7, #8
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}

08013c28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b082      	sub	sp, #8
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	460b      	mov	r3, r1
 8013c32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013c3a:	78fa      	ldrb	r2, [r7, #3]
 8013c3c:	4611      	mov	r1, r2
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7fe fc7f 	bl	8012542 <USBD_LL_IsoINIncomplete>
}
 8013c44:	bf00      	nop
 8013c46:	3708      	adds	r7, #8
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}

08013c4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b082      	sub	sp, #8
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7fe fcd5 	bl	801260a <USBD_LL_DevConnected>
}
 8013c60:	bf00      	nop
 8013c62:	3708      	adds	r7, #8
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}

08013c68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7fe fcd2 	bl	8012620 <USBD_LL_DevDisconnected>
}
 8013c7c:	bf00      	nop
 8013c7e:	3708      	adds	r7, #8
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}

08013c84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b082      	sub	sp, #8
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	781b      	ldrb	r3, [r3, #0]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d13e      	bne.n	8013d12 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013c94:	4a21      	ldr	r2, [pc, #132]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013ca0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8013d20 <USBD_LL_Init+0x9c>)
 8013ca8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8013caa:	4b1c      	ldr	r3, [pc, #112]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013cac:	2209      	movs	r2, #9
 8013cae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013cb2:	2202      	movs	r2, #2
 8013cb4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013cb6:	4b19      	ldr	r3, [pc, #100]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013cb8:	2200      	movs	r2, #0
 8013cba:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013cbc:	4b17      	ldr	r3, [pc, #92]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013cbe:	2202      	movs	r2, #2
 8013cc0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013cc2:	4b16      	ldr	r3, [pc, #88]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013cc8:	4b14      	ldr	r3, [pc, #80]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013cca:	2200      	movs	r2, #0
 8013ccc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013cce:	4b13      	ldr	r3, [pc, #76]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8013cd4:	4b11      	ldr	r3, [pc, #68]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013cda:	4b10      	ldr	r3, [pc, #64]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013cdc:	2200      	movs	r2, #0
 8013cde:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013ce6:	480d      	ldr	r0, [pc, #52]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013ce8:	f7f4 fa8a 	bl	8008200 <HAL_PCD_Init>
 8013cec:	4603      	mov	r3, r0
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d001      	beq.n	8013cf6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8013cf2:	f7ed fbdb 	bl	80014ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013cf6:	2180      	movs	r1, #128	@ 0x80
 8013cf8:	4808      	ldr	r0, [pc, #32]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013cfa:	f7f5 fce0 	bl	80096be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013cfe:	2240      	movs	r2, #64	@ 0x40
 8013d00:	2100      	movs	r1, #0
 8013d02:	4806      	ldr	r0, [pc, #24]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013d04:	f7f5 fc94 	bl	8009630 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013d08:	2280      	movs	r2, #128	@ 0x80
 8013d0a:	2101      	movs	r1, #1
 8013d0c:	4803      	ldr	r0, [pc, #12]	@ (8013d1c <USBD_LL_Init+0x98>)
 8013d0e:	f7f5 fc8f 	bl	8009630 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8013d12:	2300      	movs	r3, #0
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	3708      	adds	r7, #8
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}
 8013d1c:	240271f0 	.word	0x240271f0
 8013d20:	40080000 	.word	0x40080000

08013d24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b084      	sub	sp, #16
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d30:	2300      	movs	r3, #0
 8013d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7f4 fb6c 	bl	8008418 <HAL_PCD_Start>
 8013d40:	4603      	mov	r3, r0
 8013d42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d44:	7bfb      	ldrb	r3, [r7, #15]
 8013d46:	4618      	mov	r0, r3
 8013d48:	f000 f942 	bl	8013fd0 <USBD_Get_USB_Status>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d50:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	3710      	adds	r7, #16
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}

08013d5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013d5a:	b580      	push	{r7, lr}
 8013d5c:	b084      	sub	sp, #16
 8013d5e:	af00      	add	r7, sp, #0
 8013d60:	6078      	str	r0, [r7, #4]
 8013d62:	4608      	mov	r0, r1
 8013d64:	4611      	mov	r1, r2
 8013d66:	461a      	mov	r2, r3
 8013d68:	4603      	mov	r3, r0
 8013d6a:	70fb      	strb	r3, [r7, #3]
 8013d6c:	460b      	mov	r3, r1
 8013d6e:	70bb      	strb	r3, [r7, #2]
 8013d70:	4613      	mov	r3, r2
 8013d72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d74:	2300      	movs	r3, #0
 8013d76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d78:	2300      	movs	r3, #0
 8013d7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013d82:	78bb      	ldrb	r3, [r7, #2]
 8013d84:	883a      	ldrh	r2, [r7, #0]
 8013d86:	78f9      	ldrb	r1, [r7, #3]
 8013d88:	f7f5 f86d 	bl	8008e66 <HAL_PCD_EP_Open>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d90:	7bfb      	ldrb	r3, [r7, #15]
 8013d92:	4618      	mov	r0, r3
 8013d94:	f000 f91c 	bl	8013fd0 <USBD_Get_USB_Status>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d9e:	4618      	mov	r0, r3
 8013da0:	3710      	adds	r7, #16
 8013da2:	46bd      	mov	sp, r7
 8013da4:	bd80      	pop	{r7, pc}

08013da6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013da6:	b580      	push	{r7, lr}
 8013da8:	b084      	sub	sp, #16
 8013daa:	af00      	add	r7, sp, #0
 8013dac:	6078      	str	r0, [r7, #4]
 8013dae:	460b      	mov	r3, r1
 8013db0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013db2:	2300      	movs	r3, #0
 8013db4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013db6:	2300      	movs	r3, #0
 8013db8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013dc0:	78fa      	ldrb	r2, [r7, #3]
 8013dc2:	4611      	mov	r1, r2
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7f5 f8b8 	bl	8008f3a <HAL_PCD_EP_Close>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013dce:	7bfb      	ldrb	r3, [r7, #15]
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f000 f8fd 	bl	8013fd0 <USBD_Get_USB_Status>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013dda:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3710      	adds	r7, #16
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b084      	sub	sp, #16
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	460b      	mov	r3, r1
 8013dee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013df0:	2300      	movs	r3, #0
 8013df2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013df4:	2300      	movs	r3, #0
 8013df6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013dfe:	78fa      	ldrb	r2, [r7, #3]
 8013e00:	4611      	mov	r1, r2
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7f5 f970 	bl	80090e8 <HAL_PCD_EP_SetStall>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013e0c:	7bfb      	ldrb	r3, [r7, #15]
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f000 f8de 	bl	8013fd0 <USBD_Get_USB_Status>
 8013e14:	4603      	mov	r3, r0
 8013e16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	3710      	adds	r7, #16
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bd80      	pop	{r7, pc}

08013e22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013e22:	b580      	push	{r7, lr}
 8013e24:	b084      	sub	sp, #16
 8013e26:	af00      	add	r7, sp, #0
 8013e28:	6078      	str	r0, [r7, #4]
 8013e2a:	460b      	mov	r3, r1
 8013e2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e32:	2300      	movs	r3, #0
 8013e34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013e3c:	78fa      	ldrb	r2, [r7, #3]
 8013e3e:	4611      	mov	r1, r2
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7f5 f9b4 	bl	80091ae <HAL_PCD_EP_ClrStall>
 8013e46:	4603      	mov	r3, r0
 8013e48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013e4a:	7bfb      	ldrb	r3, [r7, #15]
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f000 f8bf 	bl	8013fd0 <USBD_Get_USB_Status>
 8013e52:	4603      	mov	r3, r0
 8013e54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013e56:	7bbb      	ldrb	r3, [r7, #14]
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3710      	adds	r7, #16
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}

08013e60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013e60:	b480      	push	{r7}
 8013e62:	b085      	sub	sp, #20
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
 8013e68:	460b      	mov	r3, r1
 8013e6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013e72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	da0b      	bge.n	8013e94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013e7c:	78fb      	ldrb	r3, [r7, #3]
 8013e7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013e82:	68f9      	ldr	r1, [r7, #12]
 8013e84:	4613      	mov	r3, r2
 8013e86:	00db      	lsls	r3, r3, #3
 8013e88:	4413      	add	r3, r2
 8013e8a:	009b      	lsls	r3, r3, #2
 8013e8c:	440b      	add	r3, r1
 8013e8e:	3316      	adds	r3, #22
 8013e90:	781b      	ldrb	r3, [r3, #0]
 8013e92:	e00b      	b.n	8013eac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013e94:	78fb      	ldrb	r3, [r7, #3]
 8013e96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013e9a:	68f9      	ldr	r1, [r7, #12]
 8013e9c:	4613      	mov	r3, r2
 8013e9e:	00db      	lsls	r3, r3, #3
 8013ea0:	4413      	add	r3, r2
 8013ea2:	009b      	lsls	r3, r3, #2
 8013ea4:	440b      	add	r3, r1
 8013ea6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8013eaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	3714      	adds	r7, #20
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb6:	4770      	bx	lr

08013eb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b084      	sub	sp, #16
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
 8013ec0:	460b      	mov	r3, r1
 8013ec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013ed2:	78fa      	ldrb	r2, [r7, #3]
 8013ed4:	4611      	mov	r1, r2
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f7f4 ffa1 	bl	8008e1e <HAL_PCD_SetAddress>
 8013edc:	4603      	mov	r3, r0
 8013ede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ee0:	7bfb      	ldrb	r3, [r7, #15]
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f000 f874 	bl	8013fd0 <USBD_Get_USB_Status>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013eec:	7bbb      	ldrb	r3, [r7, #14]
}
 8013eee:	4618      	mov	r0, r3
 8013ef0:	3710      	adds	r7, #16
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	bd80      	pop	{r7, pc}

08013ef6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013ef6:	b580      	push	{r7, lr}
 8013ef8:	b086      	sub	sp, #24
 8013efa:	af00      	add	r7, sp, #0
 8013efc:	60f8      	str	r0, [r7, #12]
 8013efe:	607a      	str	r2, [r7, #4]
 8013f00:	603b      	str	r3, [r7, #0]
 8013f02:	460b      	mov	r3, r1
 8013f04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f06:	2300      	movs	r3, #0
 8013f08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013f14:	7af9      	ldrb	r1, [r7, #11]
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	687a      	ldr	r2, [r7, #4]
 8013f1a:	f7f5 f8ab 	bl	8009074 <HAL_PCD_EP_Transmit>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013f22:	7dfb      	ldrb	r3, [r7, #23]
 8013f24:	4618      	mov	r0, r3
 8013f26:	f000 f853 	bl	8013fd0 <USBD_Get_USB_Status>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013f2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8013f30:	4618      	mov	r0, r3
 8013f32:	3718      	adds	r7, #24
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}

08013f38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b086      	sub	sp, #24
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	60f8      	str	r0, [r7, #12]
 8013f40:	607a      	str	r2, [r7, #4]
 8013f42:	603b      	str	r3, [r7, #0]
 8013f44:	460b      	mov	r3, r1
 8013f46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013f56:	7af9      	ldrb	r1, [r7, #11]
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	687a      	ldr	r2, [r7, #4]
 8013f5c:	f7f5 f837 	bl	8008fce <HAL_PCD_EP_Receive>
 8013f60:	4603      	mov	r3, r0
 8013f62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013f64:	7dfb      	ldrb	r3, [r7, #23]
 8013f66:	4618      	mov	r0, r3
 8013f68:	f000 f832 	bl	8013fd0 <USBD_Get_USB_Status>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013f70:	7dbb      	ldrb	r3, [r7, #22]
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3718      	adds	r7, #24
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}

08013f7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013f7a:	b580      	push	{r7, lr}
 8013f7c:	b082      	sub	sp, #8
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]
 8013f82:	460b      	mov	r3, r1
 8013f84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013f8c:	78fa      	ldrb	r2, [r7, #3]
 8013f8e:	4611      	mov	r1, r2
 8013f90:	4618      	mov	r0, r3
 8013f92:	f7f5 f857 	bl	8009044 <HAL_PCD_EP_GetRxCount>
 8013f96:	4603      	mov	r3, r0
}
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3708      	adds	r7, #8
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013fa0:	b480      	push	{r7}
 8013fa2:	b083      	sub	sp, #12
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013fa8:	4b03      	ldr	r3, [pc, #12]	@ (8013fb8 <USBD_static_malloc+0x18>)
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	370c      	adds	r7, #12
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb4:	4770      	bx	lr
 8013fb6:	bf00      	nop
 8013fb8:	240276d4 	.word	0x240276d4

08013fbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013fbc:	b480      	push	{r7}
 8013fbe:	b083      	sub	sp, #12
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013fc4:	bf00      	nop
 8013fc6:	370c      	adds	r7, #12
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fce:	4770      	bx	lr

08013fd0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013fd0:	b480      	push	{r7}
 8013fd2:	b085      	sub	sp, #20
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013fde:	79fb      	ldrb	r3, [r7, #7]
 8013fe0:	2b03      	cmp	r3, #3
 8013fe2:	d817      	bhi.n	8014014 <USBD_Get_USB_Status+0x44>
 8013fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8013fec <USBD_Get_USB_Status+0x1c>)
 8013fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fea:	bf00      	nop
 8013fec:	08013ffd 	.word	0x08013ffd
 8013ff0:	08014003 	.word	0x08014003
 8013ff4:	08014009 	.word	0x08014009
 8013ff8:	0801400f 	.word	0x0801400f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8014000:	e00b      	b.n	801401a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014002:	2303      	movs	r3, #3
 8014004:	73fb      	strb	r3, [r7, #15]
    break;
 8014006:	e008      	b.n	801401a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014008:	2301      	movs	r3, #1
 801400a:	73fb      	strb	r3, [r7, #15]
    break;
 801400c:	e005      	b.n	801401a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801400e:	2303      	movs	r3, #3
 8014010:	73fb      	strb	r3, [r7, #15]
    break;
 8014012:	e002      	b.n	801401a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014014:	2303      	movs	r3, #3
 8014016:	73fb      	strb	r3, [r7, #15]
    break;
 8014018:	bf00      	nop
  }
  return usb_status;
 801401a:	7bfb      	ldrb	r3, [r7, #15]
}
 801401c:	4618      	mov	r0, r3
 801401e:	3714      	adds	r7, #20
 8014020:	46bd      	mov	sp, r7
 8014022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014026:	4770      	bx	lr

08014028 <malloc>:
 8014028:	4b02      	ldr	r3, [pc, #8]	@ (8014034 <malloc+0xc>)
 801402a:	4601      	mov	r1, r0
 801402c:	6818      	ldr	r0, [r3, #0]
 801402e:	f000 b825 	b.w	801407c <_malloc_r>
 8014032:	bf00      	nop
 8014034:	24000128 	.word	0x24000128

08014038 <sbrk_aligned>:
 8014038:	b570      	push	{r4, r5, r6, lr}
 801403a:	4e0f      	ldr	r6, [pc, #60]	@ (8014078 <sbrk_aligned+0x40>)
 801403c:	460c      	mov	r4, r1
 801403e:	6831      	ldr	r1, [r6, #0]
 8014040:	4605      	mov	r5, r0
 8014042:	b911      	cbnz	r1, 801404a <sbrk_aligned+0x12>
 8014044:	f000 fe42 	bl	8014ccc <_sbrk_r>
 8014048:	6030      	str	r0, [r6, #0]
 801404a:	4621      	mov	r1, r4
 801404c:	4628      	mov	r0, r5
 801404e:	f000 fe3d 	bl	8014ccc <_sbrk_r>
 8014052:	1c43      	adds	r3, r0, #1
 8014054:	d103      	bne.n	801405e <sbrk_aligned+0x26>
 8014056:	f04f 34ff 	mov.w	r4, #4294967295
 801405a:	4620      	mov	r0, r4
 801405c:	bd70      	pop	{r4, r5, r6, pc}
 801405e:	1cc4      	adds	r4, r0, #3
 8014060:	f024 0403 	bic.w	r4, r4, #3
 8014064:	42a0      	cmp	r0, r4
 8014066:	d0f8      	beq.n	801405a <sbrk_aligned+0x22>
 8014068:	1a21      	subs	r1, r4, r0
 801406a:	4628      	mov	r0, r5
 801406c:	f000 fe2e 	bl	8014ccc <_sbrk_r>
 8014070:	3001      	adds	r0, #1
 8014072:	d1f2      	bne.n	801405a <sbrk_aligned+0x22>
 8014074:	e7ef      	b.n	8014056 <sbrk_aligned+0x1e>
 8014076:	bf00      	nop
 8014078:	240278f4 	.word	0x240278f4

0801407c <_malloc_r>:
 801407c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014080:	1ccd      	adds	r5, r1, #3
 8014082:	f025 0503 	bic.w	r5, r5, #3
 8014086:	3508      	adds	r5, #8
 8014088:	2d0c      	cmp	r5, #12
 801408a:	bf38      	it	cc
 801408c:	250c      	movcc	r5, #12
 801408e:	2d00      	cmp	r5, #0
 8014090:	4606      	mov	r6, r0
 8014092:	db01      	blt.n	8014098 <_malloc_r+0x1c>
 8014094:	42a9      	cmp	r1, r5
 8014096:	d904      	bls.n	80140a2 <_malloc_r+0x26>
 8014098:	230c      	movs	r3, #12
 801409a:	6033      	str	r3, [r6, #0]
 801409c:	2000      	movs	r0, #0
 801409e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014178 <_malloc_r+0xfc>
 80140a6:	f000 f869 	bl	801417c <__malloc_lock>
 80140aa:	f8d8 3000 	ldr.w	r3, [r8]
 80140ae:	461c      	mov	r4, r3
 80140b0:	bb44      	cbnz	r4, 8014104 <_malloc_r+0x88>
 80140b2:	4629      	mov	r1, r5
 80140b4:	4630      	mov	r0, r6
 80140b6:	f7ff ffbf 	bl	8014038 <sbrk_aligned>
 80140ba:	1c43      	adds	r3, r0, #1
 80140bc:	4604      	mov	r4, r0
 80140be:	d158      	bne.n	8014172 <_malloc_r+0xf6>
 80140c0:	f8d8 4000 	ldr.w	r4, [r8]
 80140c4:	4627      	mov	r7, r4
 80140c6:	2f00      	cmp	r7, #0
 80140c8:	d143      	bne.n	8014152 <_malloc_r+0xd6>
 80140ca:	2c00      	cmp	r4, #0
 80140cc:	d04b      	beq.n	8014166 <_malloc_r+0xea>
 80140ce:	6823      	ldr	r3, [r4, #0]
 80140d0:	4639      	mov	r1, r7
 80140d2:	4630      	mov	r0, r6
 80140d4:	eb04 0903 	add.w	r9, r4, r3
 80140d8:	f000 fdf8 	bl	8014ccc <_sbrk_r>
 80140dc:	4581      	cmp	r9, r0
 80140de:	d142      	bne.n	8014166 <_malloc_r+0xea>
 80140e0:	6821      	ldr	r1, [r4, #0]
 80140e2:	1a6d      	subs	r5, r5, r1
 80140e4:	4629      	mov	r1, r5
 80140e6:	4630      	mov	r0, r6
 80140e8:	f7ff ffa6 	bl	8014038 <sbrk_aligned>
 80140ec:	3001      	adds	r0, #1
 80140ee:	d03a      	beq.n	8014166 <_malloc_r+0xea>
 80140f0:	6823      	ldr	r3, [r4, #0]
 80140f2:	442b      	add	r3, r5
 80140f4:	6023      	str	r3, [r4, #0]
 80140f6:	f8d8 3000 	ldr.w	r3, [r8]
 80140fa:	685a      	ldr	r2, [r3, #4]
 80140fc:	bb62      	cbnz	r2, 8014158 <_malloc_r+0xdc>
 80140fe:	f8c8 7000 	str.w	r7, [r8]
 8014102:	e00f      	b.n	8014124 <_malloc_r+0xa8>
 8014104:	6822      	ldr	r2, [r4, #0]
 8014106:	1b52      	subs	r2, r2, r5
 8014108:	d420      	bmi.n	801414c <_malloc_r+0xd0>
 801410a:	2a0b      	cmp	r2, #11
 801410c:	d917      	bls.n	801413e <_malloc_r+0xc2>
 801410e:	1961      	adds	r1, r4, r5
 8014110:	42a3      	cmp	r3, r4
 8014112:	6025      	str	r5, [r4, #0]
 8014114:	bf18      	it	ne
 8014116:	6059      	strne	r1, [r3, #4]
 8014118:	6863      	ldr	r3, [r4, #4]
 801411a:	bf08      	it	eq
 801411c:	f8c8 1000 	streq.w	r1, [r8]
 8014120:	5162      	str	r2, [r4, r5]
 8014122:	604b      	str	r3, [r1, #4]
 8014124:	4630      	mov	r0, r6
 8014126:	f000 f82f 	bl	8014188 <__malloc_unlock>
 801412a:	f104 000b 	add.w	r0, r4, #11
 801412e:	1d23      	adds	r3, r4, #4
 8014130:	f020 0007 	bic.w	r0, r0, #7
 8014134:	1ac2      	subs	r2, r0, r3
 8014136:	bf1c      	itt	ne
 8014138:	1a1b      	subne	r3, r3, r0
 801413a:	50a3      	strne	r3, [r4, r2]
 801413c:	e7af      	b.n	801409e <_malloc_r+0x22>
 801413e:	6862      	ldr	r2, [r4, #4]
 8014140:	42a3      	cmp	r3, r4
 8014142:	bf0c      	ite	eq
 8014144:	f8c8 2000 	streq.w	r2, [r8]
 8014148:	605a      	strne	r2, [r3, #4]
 801414a:	e7eb      	b.n	8014124 <_malloc_r+0xa8>
 801414c:	4623      	mov	r3, r4
 801414e:	6864      	ldr	r4, [r4, #4]
 8014150:	e7ae      	b.n	80140b0 <_malloc_r+0x34>
 8014152:	463c      	mov	r4, r7
 8014154:	687f      	ldr	r7, [r7, #4]
 8014156:	e7b6      	b.n	80140c6 <_malloc_r+0x4a>
 8014158:	461a      	mov	r2, r3
 801415a:	685b      	ldr	r3, [r3, #4]
 801415c:	42a3      	cmp	r3, r4
 801415e:	d1fb      	bne.n	8014158 <_malloc_r+0xdc>
 8014160:	2300      	movs	r3, #0
 8014162:	6053      	str	r3, [r2, #4]
 8014164:	e7de      	b.n	8014124 <_malloc_r+0xa8>
 8014166:	230c      	movs	r3, #12
 8014168:	6033      	str	r3, [r6, #0]
 801416a:	4630      	mov	r0, r6
 801416c:	f000 f80c 	bl	8014188 <__malloc_unlock>
 8014170:	e794      	b.n	801409c <_malloc_r+0x20>
 8014172:	6005      	str	r5, [r0, #0]
 8014174:	e7d6      	b.n	8014124 <_malloc_r+0xa8>
 8014176:	bf00      	nop
 8014178:	240278f8 	.word	0x240278f8

0801417c <__malloc_lock>:
 801417c:	4801      	ldr	r0, [pc, #4]	@ (8014184 <__malloc_lock+0x8>)
 801417e:	f000 bdf2 	b.w	8014d66 <__retarget_lock_acquire_recursive>
 8014182:	bf00      	nop
 8014184:	24027a3c 	.word	0x24027a3c

08014188 <__malloc_unlock>:
 8014188:	4801      	ldr	r0, [pc, #4]	@ (8014190 <__malloc_unlock+0x8>)
 801418a:	f000 bded 	b.w	8014d68 <__retarget_lock_release_recursive>
 801418e:	bf00      	nop
 8014190:	24027a3c 	.word	0x24027a3c

08014194 <__cvt>:
 8014194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014196:	ed2d 8b02 	vpush	{d8}
 801419a:	eeb0 8b40 	vmov.f64	d8, d0
 801419e:	b085      	sub	sp, #20
 80141a0:	4617      	mov	r7, r2
 80141a2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80141a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80141a6:	ee18 2a90 	vmov	r2, s17
 80141aa:	f025 0520 	bic.w	r5, r5, #32
 80141ae:	2a00      	cmp	r2, #0
 80141b0:	bfb6      	itet	lt
 80141b2:	222d      	movlt	r2, #45	@ 0x2d
 80141b4:	2200      	movge	r2, #0
 80141b6:	eeb1 8b40 	vneglt.f64	d8, d0
 80141ba:	2d46      	cmp	r5, #70	@ 0x46
 80141bc:	460c      	mov	r4, r1
 80141be:	701a      	strb	r2, [r3, #0]
 80141c0:	d004      	beq.n	80141cc <__cvt+0x38>
 80141c2:	2d45      	cmp	r5, #69	@ 0x45
 80141c4:	d100      	bne.n	80141c8 <__cvt+0x34>
 80141c6:	3401      	adds	r4, #1
 80141c8:	2102      	movs	r1, #2
 80141ca:	e000      	b.n	80141ce <__cvt+0x3a>
 80141cc:	2103      	movs	r1, #3
 80141ce:	ab03      	add	r3, sp, #12
 80141d0:	9301      	str	r3, [sp, #4]
 80141d2:	ab02      	add	r3, sp, #8
 80141d4:	9300      	str	r3, [sp, #0]
 80141d6:	4622      	mov	r2, r4
 80141d8:	4633      	mov	r3, r6
 80141da:	eeb0 0b48 	vmov.f64	d0, d8
 80141de:	f000 fe7b 	bl	8014ed8 <_dtoa_r>
 80141e2:	2d47      	cmp	r5, #71	@ 0x47
 80141e4:	d114      	bne.n	8014210 <__cvt+0x7c>
 80141e6:	07fb      	lsls	r3, r7, #31
 80141e8:	d50a      	bpl.n	8014200 <__cvt+0x6c>
 80141ea:	1902      	adds	r2, r0, r4
 80141ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80141f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141f4:	bf08      	it	eq
 80141f6:	9203      	streq	r2, [sp, #12]
 80141f8:	2130      	movs	r1, #48	@ 0x30
 80141fa:	9b03      	ldr	r3, [sp, #12]
 80141fc:	4293      	cmp	r3, r2
 80141fe:	d319      	bcc.n	8014234 <__cvt+0xa0>
 8014200:	9b03      	ldr	r3, [sp, #12]
 8014202:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014204:	1a1b      	subs	r3, r3, r0
 8014206:	6013      	str	r3, [r2, #0]
 8014208:	b005      	add	sp, #20
 801420a:	ecbd 8b02 	vpop	{d8}
 801420e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014210:	2d46      	cmp	r5, #70	@ 0x46
 8014212:	eb00 0204 	add.w	r2, r0, r4
 8014216:	d1e9      	bne.n	80141ec <__cvt+0x58>
 8014218:	7803      	ldrb	r3, [r0, #0]
 801421a:	2b30      	cmp	r3, #48	@ 0x30
 801421c:	d107      	bne.n	801422e <__cvt+0x9a>
 801421e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014226:	bf1c      	itt	ne
 8014228:	f1c4 0401 	rsbne	r4, r4, #1
 801422c:	6034      	strne	r4, [r6, #0]
 801422e:	6833      	ldr	r3, [r6, #0]
 8014230:	441a      	add	r2, r3
 8014232:	e7db      	b.n	80141ec <__cvt+0x58>
 8014234:	1c5c      	adds	r4, r3, #1
 8014236:	9403      	str	r4, [sp, #12]
 8014238:	7019      	strb	r1, [r3, #0]
 801423a:	e7de      	b.n	80141fa <__cvt+0x66>

0801423c <__exponent>:
 801423c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801423e:	2900      	cmp	r1, #0
 8014240:	bfba      	itte	lt
 8014242:	4249      	neglt	r1, r1
 8014244:	232d      	movlt	r3, #45	@ 0x2d
 8014246:	232b      	movge	r3, #43	@ 0x2b
 8014248:	2909      	cmp	r1, #9
 801424a:	7002      	strb	r2, [r0, #0]
 801424c:	7043      	strb	r3, [r0, #1]
 801424e:	dd29      	ble.n	80142a4 <__exponent+0x68>
 8014250:	f10d 0307 	add.w	r3, sp, #7
 8014254:	461d      	mov	r5, r3
 8014256:	270a      	movs	r7, #10
 8014258:	461a      	mov	r2, r3
 801425a:	fbb1 f6f7 	udiv	r6, r1, r7
 801425e:	fb07 1416 	mls	r4, r7, r6, r1
 8014262:	3430      	adds	r4, #48	@ 0x30
 8014264:	f802 4c01 	strb.w	r4, [r2, #-1]
 8014268:	460c      	mov	r4, r1
 801426a:	2c63      	cmp	r4, #99	@ 0x63
 801426c:	f103 33ff 	add.w	r3, r3, #4294967295
 8014270:	4631      	mov	r1, r6
 8014272:	dcf1      	bgt.n	8014258 <__exponent+0x1c>
 8014274:	3130      	adds	r1, #48	@ 0x30
 8014276:	1e94      	subs	r4, r2, #2
 8014278:	f803 1c01 	strb.w	r1, [r3, #-1]
 801427c:	1c41      	adds	r1, r0, #1
 801427e:	4623      	mov	r3, r4
 8014280:	42ab      	cmp	r3, r5
 8014282:	d30a      	bcc.n	801429a <__exponent+0x5e>
 8014284:	f10d 0309 	add.w	r3, sp, #9
 8014288:	1a9b      	subs	r3, r3, r2
 801428a:	42ac      	cmp	r4, r5
 801428c:	bf88      	it	hi
 801428e:	2300      	movhi	r3, #0
 8014290:	3302      	adds	r3, #2
 8014292:	4403      	add	r3, r0
 8014294:	1a18      	subs	r0, r3, r0
 8014296:	b003      	add	sp, #12
 8014298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801429a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801429e:	f801 6f01 	strb.w	r6, [r1, #1]!
 80142a2:	e7ed      	b.n	8014280 <__exponent+0x44>
 80142a4:	2330      	movs	r3, #48	@ 0x30
 80142a6:	3130      	adds	r1, #48	@ 0x30
 80142a8:	7083      	strb	r3, [r0, #2]
 80142aa:	70c1      	strb	r1, [r0, #3]
 80142ac:	1d03      	adds	r3, r0, #4
 80142ae:	e7f1      	b.n	8014294 <__exponent+0x58>

080142b0 <_printf_float>:
 80142b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142b4:	b08d      	sub	sp, #52	@ 0x34
 80142b6:	460c      	mov	r4, r1
 80142b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80142bc:	4616      	mov	r6, r2
 80142be:	461f      	mov	r7, r3
 80142c0:	4605      	mov	r5, r0
 80142c2:	f000 fccb 	bl	8014c5c <_localeconv_r>
 80142c6:	f8d0 b000 	ldr.w	fp, [r0]
 80142ca:	4658      	mov	r0, fp
 80142cc:	f7ec f858 	bl	8000380 <strlen>
 80142d0:	2300      	movs	r3, #0
 80142d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80142d4:	f8d8 3000 	ldr.w	r3, [r8]
 80142d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80142dc:	6822      	ldr	r2, [r4, #0]
 80142de:	9005      	str	r0, [sp, #20]
 80142e0:	3307      	adds	r3, #7
 80142e2:	f023 0307 	bic.w	r3, r3, #7
 80142e6:	f103 0108 	add.w	r1, r3, #8
 80142ea:	f8c8 1000 	str.w	r1, [r8]
 80142ee:	ed93 0b00 	vldr	d0, [r3]
 80142f2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8014550 <_printf_float+0x2a0>
 80142f6:	eeb0 7bc0 	vabs.f64	d7, d0
 80142fa:	eeb4 7b46 	vcmp.f64	d7, d6
 80142fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014302:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8014306:	dd24      	ble.n	8014352 <_printf_float+0xa2>
 8014308:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801430c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014310:	d502      	bpl.n	8014318 <_printf_float+0x68>
 8014312:	232d      	movs	r3, #45	@ 0x2d
 8014314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014318:	498f      	ldr	r1, [pc, #572]	@ (8014558 <_printf_float+0x2a8>)
 801431a:	4b90      	ldr	r3, [pc, #576]	@ (801455c <_printf_float+0x2ac>)
 801431c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8014320:	bf8c      	ite	hi
 8014322:	4688      	movhi	r8, r1
 8014324:	4698      	movls	r8, r3
 8014326:	f022 0204 	bic.w	r2, r2, #4
 801432a:	2303      	movs	r3, #3
 801432c:	6123      	str	r3, [r4, #16]
 801432e:	6022      	str	r2, [r4, #0]
 8014330:	f04f 0a00 	mov.w	sl, #0
 8014334:	9700      	str	r7, [sp, #0]
 8014336:	4633      	mov	r3, r6
 8014338:	aa0b      	add	r2, sp, #44	@ 0x2c
 801433a:	4621      	mov	r1, r4
 801433c:	4628      	mov	r0, r5
 801433e:	f000 f9d1 	bl	80146e4 <_printf_common>
 8014342:	3001      	adds	r0, #1
 8014344:	f040 8089 	bne.w	801445a <_printf_float+0x1aa>
 8014348:	f04f 30ff 	mov.w	r0, #4294967295
 801434c:	b00d      	add	sp, #52	@ 0x34
 801434e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014352:	eeb4 0b40 	vcmp.f64	d0, d0
 8014356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801435a:	d709      	bvc.n	8014370 <_printf_float+0xc0>
 801435c:	ee10 3a90 	vmov	r3, s1
 8014360:	2b00      	cmp	r3, #0
 8014362:	bfbc      	itt	lt
 8014364:	232d      	movlt	r3, #45	@ 0x2d
 8014366:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801436a:	497d      	ldr	r1, [pc, #500]	@ (8014560 <_printf_float+0x2b0>)
 801436c:	4b7d      	ldr	r3, [pc, #500]	@ (8014564 <_printf_float+0x2b4>)
 801436e:	e7d5      	b.n	801431c <_printf_float+0x6c>
 8014370:	6863      	ldr	r3, [r4, #4]
 8014372:	1c59      	adds	r1, r3, #1
 8014374:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8014378:	d139      	bne.n	80143ee <_printf_float+0x13e>
 801437a:	2306      	movs	r3, #6
 801437c:	6063      	str	r3, [r4, #4]
 801437e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8014382:	2300      	movs	r3, #0
 8014384:	6022      	str	r2, [r4, #0]
 8014386:	9303      	str	r3, [sp, #12]
 8014388:	ab0a      	add	r3, sp, #40	@ 0x28
 801438a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801438e:	ab09      	add	r3, sp, #36	@ 0x24
 8014390:	9300      	str	r3, [sp, #0]
 8014392:	6861      	ldr	r1, [r4, #4]
 8014394:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014398:	4628      	mov	r0, r5
 801439a:	f7ff fefb 	bl	8014194 <__cvt>
 801439e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80143a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80143a4:	4680      	mov	r8, r0
 80143a6:	d129      	bne.n	80143fc <_printf_float+0x14c>
 80143a8:	1cc8      	adds	r0, r1, #3
 80143aa:	db02      	blt.n	80143b2 <_printf_float+0x102>
 80143ac:	6863      	ldr	r3, [r4, #4]
 80143ae:	4299      	cmp	r1, r3
 80143b0:	dd41      	ble.n	8014436 <_printf_float+0x186>
 80143b2:	f1a9 0902 	sub.w	r9, r9, #2
 80143b6:	fa5f f989 	uxtb.w	r9, r9
 80143ba:	3901      	subs	r1, #1
 80143bc:	464a      	mov	r2, r9
 80143be:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80143c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80143c4:	f7ff ff3a 	bl	801423c <__exponent>
 80143c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80143ca:	1813      	adds	r3, r2, r0
 80143cc:	2a01      	cmp	r2, #1
 80143ce:	4682      	mov	sl, r0
 80143d0:	6123      	str	r3, [r4, #16]
 80143d2:	dc02      	bgt.n	80143da <_printf_float+0x12a>
 80143d4:	6822      	ldr	r2, [r4, #0]
 80143d6:	07d2      	lsls	r2, r2, #31
 80143d8:	d501      	bpl.n	80143de <_printf_float+0x12e>
 80143da:	3301      	adds	r3, #1
 80143dc:	6123      	str	r3, [r4, #16]
 80143de:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d0a6      	beq.n	8014334 <_printf_float+0x84>
 80143e6:	232d      	movs	r3, #45	@ 0x2d
 80143e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80143ec:	e7a2      	b.n	8014334 <_printf_float+0x84>
 80143ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80143f2:	d1c4      	bne.n	801437e <_printf_float+0xce>
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d1c2      	bne.n	801437e <_printf_float+0xce>
 80143f8:	2301      	movs	r3, #1
 80143fa:	e7bf      	b.n	801437c <_printf_float+0xcc>
 80143fc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8014400:	d9db      	bls.n	80143ba <_printf_float+0x10a>
 8014402:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8014406:	d118      	bne.n	801443a <_printf_float+0x18a>
 8014408:	2900      	cmp	r1, #0
 801440a:	6863      	ldr	r3, [r4, #4]
 801440c:	dd0b      	ble.n	8014426 <_printf_float+0x176>
 801440e:	6121      	str	r1, [r4, #16]
 8014410:	b913      	cbnz	r3, 8014418 <_printf_float+0x168>
 8014412:	6822      	ldr	r2, [r4, #0]
 8014414:	07d0      	lsls	r0, r2, #31
 8014416:	d502      	bpl.n	801441e <_printf_float+0x16e>
 8014418:	3301      	adds	r3, #1
 801441a:	440b      	add	r3, r1
 801441c:	6123      	str	r3, [r4, #16]
 801441e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014420:	f04f 0a00 	mov.w	sl, #0
 8014424:	e7db      	b.n	80143de <_printf_float+0x12e>
 8014426:	b913      	cbnz	r3, 801442e <_printf_float+0x17e>
 8014428:	6822      	ldr	r2, [r4, #0]
 801442a:	07d2      	lsls	r2, r2, #31
 801442c:	d501      	bpl.n	8014432 <_printf_float+0x182>
 801442e:	3302      	adds	r3, #2
 8014430:	e7f4      	b.n	801441c <_printf_float+0x16c>
 8014432:	2301      	movs	r3, #1
 8014434:	e7f2      	b.n	801441c <_printf_float+0x16c>
 8014436:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801443a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801443c:	4299      	cmp	r1, r3
 801443e:	db05      	blt.n	801444c <_printf_float+0x19c>
 8014440:	6823      	ldr	r3, [r4, #0]
 8014442:	6121      	str	r1, [r4, #16]
 8014444:	07d8      	lsls	r0, r3, #31
 8014446:	d5ea      	bpl.n	801441e <_printf_float+0x16e>
 8014448:	1c4b      	adds	r3, r1, #1
 801444a:	e7e7      	b.n	801441c <_printf_float+0x16c>
 801444c:	2900      	cmp	r1, #0
 801444e:	bfd4      	ite	le
 8014450:	f1c1 0202 	rsble	r2, r1, #2
 8014454:	2201      	movgt	r2, #1
 8014456:	4413      	add	r3, r2
 8014458:	e7e0      	b.n	801441c <_printf_float+0x16c>
 801445a:	6823      	ldr	r3, [r4, #0]
 801445c:	055a      	lsls	r2, r3, #21
 801445e:	d407      	bmi.n	8014470 <_printf_float+0x1c0>
 8014460:	6923      	ldr	r3, [r4, #16]
 8014462:	4642      	mov	r2, r8
 8014464:	4631      	mov	r1, r6
 8014466:	4628      	mov	r0, r5
 8014468:	47b8      	blx	r7
 801446a:	3001      	adds	r0, #1
 801446c:	d12a      	bne.n	80144c4 <_printf_float+0x214>
 801446e:	e76b      	b.n	8014348 <_printf_float+0x98>
 8014470:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8014474:	f240 80e0 	bls.w	8014638 <_printf_float+0x388>
 8014478:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801447c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014484:	d133      	bne.n	80144ee <_printf_float+0x23e>
 8014486:	4a38      	ldr	r2, [pc, #224]	@ (8014568 <_printf_float+0x2b8>)
 8014488:	2301      	movs	r3, #1
 801448a:	4631      	mov	r1, r6
 801448c:	4628      	mov	r0, r5
 801448e:	47b8      	blx	r7
 8014490:	3001      	adds	r0, #1
 8014492:	f43f af59 	beq.w	8014348 <_printf_float+0x98>
 8014496:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801449a:	4543      	cmp	r3, r8
 801449c:	db02      	blt.n	80144a4 <_printf_float+0x1f4>
 801449e:	6823      	ldr	r3, [r4, #0]
 80144a0:	07d8      	lsls	r0, r3, #31
 80144a2:	d50f      	bpl.n	80144c4 <_printf_float+0x214>
 80144a4:	9b05      	ldr	r3, [sp, #20]
 80144a6:	465a      	mov	r2, fp
 80144a8:	4631      	mov	r1, r6
 80144aa:	4628      	mov	r0, r5
 80144ac:	47b8      	blx	r7
 80144ae:	3001      	adds	r0, #1
 80144b0:	f43f af4a 	beq.w	8014348 <_printf_float+0x98>
 80144b4:	f04f 0900 	mov.w	r9, #0
 80144b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80144bc:	f104 0a1a 	add.w	sl, r4, #26
 80144c0:	45c8      	cmp	r8, r9
 80144c2:	dc09      	bgt.n	80144d8 <_printf_float+0x228>
 80144c4:	6823      	ldr	r3, [r4, #0]
 80144c6:	079b      	lsls	r3, r3, #30
 80144c8:	f100 8107 	bmi.w	80146da <_printf_float+0x42a>
 80144cc:	68e0      	ldr	r0, [r4, #12]
 80144ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80144d0:	4298      	cmp	r0, r3
 80144d2:	bfb8      	it	lt
 80144d4:	4618      	movlt	r0, r3
 80144d6:	e739      	b.n	801434c <_printf_float+0x9c>
 80144d8:	2301      	movs	r3, #1
 80144da:	4652      	mov	r2, sl
 80144dc:	4631      	mov	r1, r6
 80144de:	4628      	mov	r0, r5
 80144e0:	47b8      	blx	r7
 80144e2:	3001      	adds	r0, #1
 80144e4:	f43f af30 	beq.w	8014348 <_printf_float+0x98>
 80144e8:	f109 0901 	add.w	r9, r9, #1
 80144ec:	e7e8      	b.n	80144c0 <_printf_float+0x210>
 80144ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	dc3b      	bgt.n	801456c <_printf_float+0x2bc>
 80144f4:	4a1c      	ldr	r2, [pc, #112]	@ (8014568 <_printf_float+0x2b8>)
 80144f6:	2301      	movs	r3, #1
 80144f8:	4631      	mov	r1, r6
 80144fa:	4628      	mov	r0, r5
 80144fc:	47b8      	blx	r7
 80144fe:	3001      	adds	r0, #1
 8014500:	f43f af22 	beq.w	8014348 <_printf_float+0x98>
 8014504:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014508:	ea59 0303 	orrs.w	r3, r9, r3
 801450c:	d102      	bne.n	8014514 <_printf_float+0x264>
 801450e:	6823      	ldr	r3, [r4, #0]
 8014510:	07d9      	lsls	r1, r3, #31
 8014512:	d5d7      	bpl.n	80144c4 <_printf_float+0x214>
 8014514:	9b05      	ldr	r3, [sp, #20]
 8014516:	465a      	mov	r2, fp
 8014518:	4631      	mov	r1, r6
 801451a:	4628      	mov	r0, r5
 801451c:	47b8      	blx	r7
 801451e:	3001      	adds	r0, #1
 8014520:	f43f af12 	beq.w	8014348 <_printf_float+0x98>
 8014524:	f04f 0a00 	mov.w	sl, #0
 8014528:	f104 0b1a 	add.w	fp, r4, #26
 801452c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801452e:	425b      	negs	r3, r3
 8014530:	4553      	cmp	r3, sl
 8014532:	dc01      	bgt.n	8014538 <_printf_float+0x288>
 8014534:	464b      	mov	r3, r9
 8014536:	e794      	b.n	8014462 <_printf_float+0x1b2>
 8014538:	2301      	movs	r3, #1
 801453a:	465a      	mov	r2, fp
 801453c:	4631      	mov	r1, r6
 801453e:	4628      	mov	r0, r5
 8014540:	47b8      	blx	r7
 8014542:	3001      	adds	r0, #1
 8014544:	f43f af00 	beq.w	8014348 <_printf_float+0x98>
 8014548:	f10a 0a01 	add.w	sl, sl, #1
 801454c:	e7ee      	b.n	801452c <_printf_float+0x27c>
 801454e:	bf00      	nop
 8014550:	ffffffff 	.word	0xffffffff
 8014554:	7fefffff 	.word	0x7fefffff
 8014558:	08017058 	.word	0x08017058
 801455c:	08017054 	.word	0x08017054
 8014560:	08017060 	.word	0x08017060
 8014564:	0801705c 	.word	0x0801705c
 8014568:	08017064 	.word	0x08017064
 801456c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801456e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014572:	4553      	cmp	r3, sl
 8014574:	bfa8      	it	ge
 8014576:	4653      	movge	r3, sl
 8014578:	2b00      	cmp	r3, #0
 801457a:	4699      	mov	r9, r3
 801457c:	dc37      	bgt.n	80145ee <_printf_float+0x33e>
 801457e:	2300      	movs	r3, #0
 8014580:	9307      	str	r3, [sp, #28]
 8014582:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014586:	f104 021a 	add.w	r2, r4, #26
 801458a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801458c:	9907      	ldr	r1, [sp, #28]
 801458e:	9306      	str	r3, [sp, #24]
 8014590:	eba3 0309 	sub.w	r3, r3, r9
 8014594:	428b      	cmp	r3, r1
 8014596:	dc31      	bgt.n	80145fc <_printf_float+0x34c>
 8014598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801459a:	459a      	cmp	sl, r3
 801459c:	dc3b      	bgt.n	8014616 <_printf_float+0x366>
 801459e:	6823      	ldr	r3, [r4, #0]
 80145a0:	07da      	lsls	r2, r3, #31
 80145a2:	d438      	bmi.n	8014616 <_printf_float+0x366>
 80145a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145a6:	ebaa 0903 	sub.w	r9, sl, r3
 80145aa:	9b06      	ldr	r3, [sp, #24]
 80145ac:	ebaa 0303 	sub.w	r3, sl, r3
 80145b0:	4599      	cmp	r9, r3
 80145b2:	bfa8      	it	ge
 80145b4:	4699      	movge	r9, r3
 80145b6:	f1b9 0f00 	cmp.w	r9, #0
 80145ba:	dc34      	bgt.n	8014626 <_printf_float+0x376>
 80145bc:	f04f 0800 	mov.w	r8, #0
 80145c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80145c4:	f104 0b1a 	add.w	fp, r4, #26
 80145c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145ca:	ebaa 0303 	sub.w	r3, sl, r3
 80145ce:	eba3 0309 	sub.w	r3, r3, r9
 80145d2:	4543      	cmp	r3, r8
 80145d4:	f77f af76 	ble.w	80144c4 <_printf_float+0x214>
 80145d8:	2301      	movs	r3, #1
 80145da:	465a      	mov	r2, fp
 80145dc:	4631      	mov	r1, r6
 80145de:	4628      	mov	r0, r5
 80145e0:	47b8      	blx	r7
 80145e2:	3001      	adds	r0, #1
 80145e4:	f43f aeb0 	beq.w	8014348 <_printf_float+0x98>
 80145e8:	f108 0801 	add.w	r8, r8, #1
 80145ec:	e7ec      	b.n	80145c8 <_printf_float+0x318>
 80145ee:	4642      	mov	r2, r8
 80145f0:	4631      	mov	r1, r6
 80145f2:	4628      	mov	r0, r5
 80145f4:	47b8      	blx	r7
 80145f6:	3001      	adds	r0, #1
 80145f8:	d1c1      	bne.n	801457e <_printf_float+0x2ce>
 80145fa:	e6a5      	b.n	8014348 <_printf_float+0x98>
 80145fc:	2301      	movs	r3, #1
 80145fe:	4631      	mov	r1, r6
 8014600:	4628      	mov	r0, r5
 8014602:	9206      	str	r2, [sp, #24]
 8014604:	47b8      	blx	r7
 8014606:	3001      	adds	r0, #1
 8014608:	f43f ae9e 	beq.w	8014348 <_printf_float+0x98>
 801460c:	9b07      	ldr	r3, [sp, #28]
 801460e:	9a06      	ldr	r2, [sp, #24]
 8014610:	3301      	adds	r3, #1
 8014612:	9307      	str	r3, [sp, #28]
 8014614:	e7b9      	b.n	801458a <_printf_float+0x2da>
 8014616:	9b05      	ldr	r3, [sp, #20]
 8014618:	465a      	mov	r2, fp
 801461a:	4631      	mov	r1, r6
 801461c:	4628      	mov	r0, r5
 801461e:	47b8      	blx	r7
 8014620:	3001      	adds	r0, #1
 8014622:	d1bf      	bne.n	80145a4 <_printf_float+0x2f4>
 8014624:	e690      	b.n	8014348 <_printf_float+0x98>
 8014626:	9a06      	ldr	r2, [sp, #24]
 8014628:	464b      	mov	r3, r9
 801462a:	4442      	add	r2, r8
 801462c:	4631      	mov	r1, r6
 801462e:	4628      	mov	r0, r5
 8014630:	47b8      	blx	r7
 8014632:	3001      	adds	r0, #1
 8014634:	d1c2      	bne.n	80145bc <_printf_float+0x30c>
 8014636:	e687      	b.n	8014348 <_printf_float+0x98>
 8014638:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801463c:	f1b9 0f01 	cmp.w	r9, #1
 8014640:	dc01      	bgt.n	8014646 <_printf_float+0x396>
 8014642:	07db      	lsls	r3, r3, #31
 8014644:	d536      	bpl.n	80146b4 <_printf_float+0x404>
 8014646:	2301      	movs	r3, #1
 8014648:	4642      	mov	r2, r8
 801464a:	4631      	mov	r1, r6
 801464c:	4628      	mov	r0, r5
 801464e:	47b8      	blx	r7
 8014650:	3001      	adds	r0, #1
 8014652:	f43f ae79 	beq.w	8014348 <_printf_float+0x98>
 8014656:	9b05      	ldr	r3, [sp, #20]
 8014658:	465a      	mov	r2, fp
 801465a:	4631      	mov	r1, r6
 801465c:	4628      	mov	r0, r5
 801465e:	47b8      	blx	r7
 8014660:	3001      	adds	r0, #1
 8014662:	f43f ae71 	beq.w	8014348 <_printf_float+0x98>
 8014666:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801466a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801466e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014672:	f109 39ff 	add.w	r9, r9, #4294967295
 8014676:	d018      	beq.n	80146aa <_printf_float+0x3fa>
 8014678:	464b      	mov	r3, r9
 801467a:	f108 0201 	add.w	r2, r8, #1
 801467e:	4631      	mov	r1, r6
 8014680:	4628      	mov	r0, r5
 8014682:	47b8      	blx	r7
 8014684:	3001      	adds	r0, #1
 8014686:	d10c      	bne.n	80146a2 <_printf_float+0x3f2>
 8014688:	e65e      	b.n	8014348 <_printf_float+0x98>
 801468a:	2301      	movs	r3, #1
 801468c:	465a      	mov	r2, fp
 801468e:	4631      	mov	r1, r6
 8014690:	4628      	mov	r0, r5
 8014692:	47b8      	blx	r7
 8014694:	3001      	adds	r0, #1
 8014696:	f43f ae57 	beq.w	8014348 <_printf_float+0x98>
 801469a:	f108 0801 	add.w	r8, r8, #1
 801469e:	45c8      	cmp	r8, r9
 80146a0:	dbf3      	blt.n	801468a <_printf_float+0x3da>
 80146a2:	4653      	mov	r3, sl
 80146a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80146a8:	e6dc      	b.n	8014464 <_printf_float+0x1b4>
 80146aa:	f04f 0800 	mov.w	r8, #0
 80146ae:	f104 0b1a 	add.w	fp, r4, #26
 80146b2:	e7f4      	b.n	801469e <_printf_float+0x3ee>
 80146b4:	2301      	movs	r3, #1
 80146b6:	4642      	mov	r2, r8
 80146b8:	e7e1      	b.n	801467e <_printf_float+0x3ce>
 80146ba:	2301      	movs	r3, #1
 80146bc:	464a      	mov	r2, r9
 80146be:	4631      	mov	r1, r6
 80146c0:	4628      	mov	r0, r5
 80146c2:	47b8      	blx	r7
 80146c4:	3001      	adds	r0, #1
 80146c6:	f43f ae3f 	beq.w	8014348 <_printf_float+0x98>
 80146ca:	f108 0801 	add.w	r8, r8, #1
 80146ce:	68e3      	ldr	r3, [r4, #12]
 80146d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80146d2:	1a5b      	subs	r3, r3, r1
 80146d4:	4543      	cmp	r3, r8
 80146d6:	dcf0      	bgt.n	80146ba <_printf_float+0x40a>
 80146d8:	e6f8      	b.n	80144cc <_printf_float+0x21c>
 80146da:	f04f 0800 	mov.w	r8, #0
 80146de:	f104 0919 	add.w	r9, r4, #25
 80146e2:	e7f4      	b.n	80146ce <_printf_float+0x41e>

080146e4 <_printf_common>:
 80146e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146e8:	4616      	mov	r6, r2
 80146ea:	4698      	mov	r8, r3
 80146ec:	688a      	ldr	r2, [r1, #8]
 80146ee:	690b      	ldr	r3, [r1, #16]
 80146f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80146f4:	4293      	cmp	r3, r2
 80146f6:	bfb8      	it	lt
 80146f8:	4613      	movlt	r3, r2
 80146fa:	6033      	str	r3, [r6, #0]
 80146fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014700:	4607      	mov	r7, r0
 8014702:	460c      	mov	r4, r1
 8014704:	b10a      	cbz	r2, 801470a <_printf_common+0x26>
 8014706:	3301      	adds	r3, #1
 8014708:	6033      	str	r3, [r6, #0]
 801470a:	6823      	ldr	r3, [r4, #0]
 801470c:	0699      	lsls	r1, r3, #26
 801470e:	bf42      	ittt	mi
 8014710:	6833      	ldrmi	r3, [r6, #0]
 8014712:	3302      	addmi	r3, #2
 8014714:	6033      	strmi	r3, [r6, #0]
 8014716:	6825      	ldr	r5, [r4, #0]
 8014718:	f015 0506 	ands.w	r5, r5, #6
 801471c:	d106      	bne.n	801472c <_printf_common+0x48>
 801471e:	f104 0a19 	add.w	sl, r4, #25
 8014722:	68e3      	ldr	r3, [r4, #12]
 8014724:	6832      	ldr	r2, [r6, #0]
 8014726:	1a9b      	subs	r3, r3, r2
 8014728:	42ab      	cmp	r3, r5
 801472a:	dc26      	bgt.n	801477a <_printf_common+0x96>
 801472c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014730:	6822      	ldr	r2, [r4, #0]
 8014732:	3b00      	subs	r3, #0
 8014734:	bf18      	it	ne
 8014736:	2301      	movne	r3, #1
 8014738:	0692      	lsls	r2, r2, #26
 801473a:	d42b      	bmi.n	8014794 <_printf_common+0xb0>
 801473c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014740:	4641      	mov	r1, r8
 8014742:	4638      	mov	r0, r7
 8014744:	47c8      	blx	r9
 8014746:	3001      	adds	r0, #1
 8014748:	d01e      	beq.n	8014788 <_printf_common+0xa4>
 801474a:	6823      	ldr	r3, [r4, #0]
 801474c:	6922      	ldr	r2, [r4, #16]
 801474e:	f003 0306 	and.w	r3, r3, #6
 8014752:	2b04      	cmp	r3, #4
 8014754:	bf02      	ittt	eq
 8014756:	68e5      	ldreq	r5, [r4, #12]
 8014758:	6833      	ldreq	r3, [r6, #0]
 801475a:	1aed      	subeq	r5, r5, r3
 801475c:	68a3      	ldr	r3, [r4, #8]
 801475e:	bf0c      	ite	eq
 8014760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014764:	2500      	movne	r5, #0
 8014766:	4293      	cmp	r3, r2
 8014768:	bfc4      	itt	gt
 801476a:	1a9b      	subgt	r3, r3, r2
 801476c:	18ed      	addgt	r5, r5, r3
 801476e:	2600      	movs	r6, #0
 8014770:	341a      	adds	r4, #26
 8014772:	42b5      	cmp	r5, r6
 8014774:	d11a      	bne.n	80147ac <_printf_common+0xc8>
 8014776:	2000      	movs	r0, #0
 8014778:	e008      	b.n	801478c <_printf_common+0xa8>
 801477a:	2301      	movs	r3, #1
 801477c:	4652      	mov	r2, sl
 801477e:	4641      	mov	r1, r8
 8014780:	4638      	mov	r0, r7
 8014782:	47c8      	blx	r9
 8014784:	3001      	adds	r0, #1
 8014786:	d103      	bne.n	8014790 <_printf_common+0xac>
 8014788:	f04f 30ff 	mov.w	r0, #4294967295
 801478c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014790:	3501      	adds	r5, #1
 8014792:	e7c6      	b.n	8014722 <_printf_common+0x3e>
 8014794:	18e1      	adds	r1, r4, r3
 8014796:	1c5a      	adds	r2, r3, #1
 8014798:	2030      	movs	r0, #48	@ 0x30
 801479a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801479e:	4422      	add	r2, r4
 80147a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80147a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80147a8:	3302      	adds	r3, #2
 80147aa:	e7c7      	b.n	801473c <_printf_common+0x58>
 80147ac:	2301      	movs	r3, #1
 80147ae:	4622      	mov	r2, r4
 80147b0:	4641      	mov	r1, r8
 80147b2:	4638      	mov	r0, r7
 80147b4:	47c8      	blx	r9
 80147b6:	3001      	adds	r0, #1
 80147b8:	d0e6      	beq.n	8014788 <_printf_common+0xa4>
 80147ba:	3601      	adds	r6, #1
 80147bc:	e7d9      	b.n	8014772 <_printf_common+0x8e>
	...

080147c0 <_printf_i>:
 80147c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80147c4:	7e0f      	ldrb	r7, [r1, #24]
 80147c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80147c8:	2f78      	cmp	r7, #120	@ 0x78
 80147ca:	4691      	mov	r9, r2
 80147cc:	4680      	mov	r8, r0
 80147ce:	460c      	mov	r4, r1
 80147d0:	469a      	mov	sl, r3
 80147d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80147d6:	d807      	bhi.n	80147e8 <_printf_i+0x28>
 80147d8:	2f62      	cmp	r7, #98	@ 0x62
 80147da:	d80a      	bhi.n	80147f2 <_printf_i+0x32>
 80147dc:	2f00      	cmp	r7, #0
 80147de:	f000 80d1 	beq.w	8014984 <_printf_i+0x1c4>
 80147e2:	2f58      	cmp	r7, #88	@ 0x58
 80147e4:	f000 80b8 	beq.w	8014958 <_printf_i+0x198>
 80147e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80147ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80147f0:	e03a      	b.n	8014868 <_printf_i+0xa8>
 80147f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80147f6:	2b15      	cmp	r3, #21
 80147f8:	d8f6      	bhi.n	80147e8 <_printf_i+0x28>
 80147fa:	a101      	add	r1, pc, #4	@ (adr r1, 8014800 <_printf_i+0x40>)
 80147fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014800:	08014859 	.word	0x08014859
 8014804:	0801486d 	.word	0x0801486d
 8014808:	080147e9 	.word	0x080147e9
 801480c:	080147e9 	.word	0x080147e9
 8014810:	080147e9 	.word	0x080147e9
 8014814:	080147e9 	.word	0x080147e9
 8014818:	0801486d 	.word	0x0801486d
 801481c:	080147e9 	.word	0x080147e9
 8014820:	080147e9 	.word	0x080147e9
 8014824:	080147e9 	.word	0x080147e9
 8014828:	080147e9 	.word	0x080147e9
 801482c:	0801496b 	.word	0x0801496b
 8014830:	08014897 	.word	0x08014897
 8014834:	08014925 	.word	0x08014925
 8014838:	080147e9 	.word	0x080147e9
 801483c:	080147e9 	.word	0x080147e9
 8014840:	0801498d 	.word	0x0801498d
 8014844:	080147e9 	.word	0x080147e9
 8014848:	08014897 	.word	0x08014897
 801484c:	080147e9 	.word	0x080147e9
 8014850:	080147e9 	.word	0x080147e9
 8014854:	0801492d 	.word	0x0801492d
 8014858:	6833      	ldr	r3, [r6, #0]
 801485a:	1d1a      	adds	r2, r3, #4
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	6032      	str	r2, [r6, #0]
 8014860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014864:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014868:	2301      	movs	r3, #1
 801486a:	e09c      	b.n	80149a6 <_printf_i+0x1e6>
 801486c:	6833      	ldr	r3, [r6, #0]
 801486e:	6820      	ldr	r0, [r4, #0]
 8014870:	1d19      	adds	r1, r3, #4
 8014872:	6031      	str	r1, [r6, #0]
 8014874:	0606      	lsls	r6, r0, #24
 8014876:	d501      	bpl.n	801487c <_printf_i+0xbc>
 8014878:	681d      	ldr	r5, [r3, #0]
 801487a:	e003      	b.n	8014884 <_printf_i+0xc4>
 801487c:	0645      	lsls	r5, r0, #25
 801487e:	d5fb      	bpl.n	8014878 <_printf_i+0xb8>
 8014880:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014884:	2d00      	cmp	r5, #0
 8014886:	da03      	bge.n	8014890 <_printf_i+0xd0>
 8014888:	232d      	movs	r3, #45	@ 0x2d
 801488a:	426d      	negs	r5, r5
 801488c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014890:	4858      	ldr	r0, [pc, #352]	@ (80149f4 <_printf_i+0x234>)
 8014892:	230a      	movs	r3, #10
 8014894:	e011      	b.n	80148ba <_printf_i+0xfa>
 8014896:	6821      	ldr	r1, [r4, #0]
 8014898:	6833      	ldr	r3, [r6, #0]
 801489a:	0608      	lsls	r0, r1, #24
 801489c:	f853 5b04 	ldr.w	r5, [r3], #4
 80148a0:	d402      	bmi.n	80148a8 <_printf_i+0xe8>
 80148a2:	0649      	lsls	r1, r1, #25
 80148a4:	bf48      	it	mi
 80148a6:	b2ad      	uxthmi	r5, r5
 80148a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80148aa:	4852      	ldr	r0, [pc, #328]	@ (80149f4 <_printf_i+0x234>)
 80148ac:	6033      	str	r3, [r6, #0]
 80148ae:	bf14      	ite	ne
 80148b0:	230a      	movne	r3, #10
 80148b2:	2308      	moveq	r3, #8
 80148b4:	2100      	movs	r1, #0
 80148b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80148ba:	6866      	ldr	r6, [r4, #4]
 80148bc:	60a6      	str	r6, [r4, #8]
 80148be:	2e00      	cmp	r6, #0
 80148c0:	db05      	blt.n	80148ce <_printf_i+0x10e>
 80148c2:	6821      	ldr	r1, [r4, #0]
 80148c4:	432e      	orrs	r6, r5
 80148c6:	f021 0104 	bic.w	r1, r1, #4
 80148ca:	6021      	str	r1, [r4, #0]
 80148cc:	d04b      	beq.n	8014966 <_printf_i+0x1a6>
 80148ce:	4616      	mov	r6, r2
 80148d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80148d4:	fb03 5711 	mls	r7, r3, r1, r5
 80148d8:	5dc7      	ldrb	r7, [r0, r7]
 80148da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80148de:	462f      	mov	r7, r5
 80148e0:	42bb      	cmp	r3, r7
 80148e2:	460d      	mov	r5, r1
 80148e4:	d9f4      	bls.n	80148d0 <_printf_i+0x110>
 80148e6:	2b08      	cmp	r3, #8
 80148e8:	d10b      	bne.n	8014902 <_printf_i+0x142>
 80148ea:	6823      	ldr	r3, [r4, #0]
 80148ec:	07df      	lsls	r7, r3, #31
 80148ee:	d508      	bpl.n	8014902 <_printf_i+0x142>
 80148f0:	6923      	ldr	r3, [r4, #16]
 80148f2:	6861      	ldr	r1, [r4, #4]
 80148f4:	4299      	cmp	r1, r3
 80148f6:	bfde      	ittt	le
 80148f8:	2330      	movle	r3, #48	@ 0x30
 80148fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80148fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014902:	1b92      	subs	r2, r2, r6
 8014904:	6122      	str	r2, [r4, #16]
 8014906:	f8cd a000 	str.w	sl, [sp]
 801490a:	464b      	mov	r3, r9
 801490c:	aa03      	add	r2, sp, #12
 801490e:	4621      	mov	r1, r4
 8014910:	4640      	mov	r0, r8
 8014912:	f7ff fee7 	bl	80146e4 <_printf_common>
 8014916:	3001      	adds	r0, #1
 8014918:	d14a      	bne.n	80149b0 <_printf_i+0x1f0>
 801491a:	f04f 30ff 	mov.w	r0, #4294967295
 801491e:	b004      	add	sp, #16
 8014920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014924:	6823      	ldr	r3, [r4, #0]
 8014926:	f043 0320 	orr.w	r3, r3, #32
 801492a:	6023      	str	r3, [r4, #0]
 801492c:	4832      	ldr	r0, [pc, #200]	@ (80149f8 <_printf_i+0x238>)
 801492e:	2778      	movs	r7, #120	@ 0x78
 8014930:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014934:	6823      	ldr	r3, [r4, #0]
 8014936:	6831      	ldr	r1, [r6, #0]
 8014938:	061f      	lsls	r7, r3, #24
 801493a:	f851 5b04 	ldr.w	r5, [r1], #4
 801493e:	d402      	bmi.n	8014946 <_printf_i+0x186>
 8014940:	065f      	lsls	r7, r3, #25
 8014942:	bf48      	it	mi
 8014944:	b2ad      	uxthmi	r5, r5
 8014946:	6031      	str	r1, [r6, #0]
 8014948:	07d9      	lsls	r1, r3, #31
 801494a:	bf44      	itt	mi
 801494c:	f043 0320 	orrmi.w	r3, r3, #32
 8014950:	6023      	strmi	r3, [r4, #0]
 8014952:	b11d      	cbz	r5, 801495c <_printf_i+0x19c>
 8014954:	2310      	movs	r3, #16
 8014956:	e7ad      	b.n	80148b4 <_printf_i+0xf4>
 8014958:	4826      	ldr	r0, [pc, #152]	@ (80149f4 <_printf_i+0x234>)
 801495a:	e7e9      	b.n	8014930 <_printf_i+0x170>
 801495c:	6823      	ldr	r3, [r4, #0]
 801495e:	f023 0320 	bic.w	r3, r3, #32
 8014962:	6023      	str	r3, [r4, #0]
 8014964:	e7f6      	b.n	8014954 <_printf_i+0x194>
 8014966:	4616      	mov	r6, r2
 8014968:	e7bd      	b.n	80148e6 <_printf_i+0x126>
 801496a:	6833      	ldr	r3, [r6, #0]
 801496c:	6825      	ldr	r5, [r4, #0]
 801496e:	6961      	ldr	r1, [r4, #20]
 8014970:	1d18      	adds	r0, r3, #4
 8014972:	6030      	str	r0, [r6, #0]
 8014974:	062e      	lsls	r6, r5, #24
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	d501      	bpl.n	801497e <_printf_i+0x1be>
 801497a:	6019      	str	r1, [r3, #0]
 801497c:	e002      	b.n	8014984 <_printf_i+0x1c4>
 801497e:	0668      	lsls	r0, r5, #25
 8014980:	d5fb      	bpl.n	801497a <_printf_i+0x1ba>
 8014982:	8019      	strh	r1, [r3, #0]
 8014984:	2300      	movs	r3, #0
 8014986:	6123      	str	r3, [r4, #16]
 8014988:	4616      	mov	r6, r2
 801498a:	e7bc      	b.n	8014906 <_printf_i+0x146>
 801498c:	6833      	ldr	r3, [r6, #0]
 801498e:	1d1a      	adds	r2, r3, #4
 8014990:	6032      	str	r2, [r6, #0]
 8014992:	681e      	ldr	r6, [r3, #0]
 8014994:	6862      	ldr	r2, [r4, #4]
 8014996:	2100      	movs	r1, #0
 8014998:	4630      	mov	r0, r6
 801499a:	f7eb fca1 	bl	80002e0 <memchr>
 801499e:	b108      	cbz	r0, 80149a4 <_printf_i+0x1e4>
 80149a0:	1b80      	subs	r0, r0, r6
 80149a2:	6060      	str	r0, [r4, #4]
 80149a4:	6863      	ldr	r3, [r4, #4]
 80149a6:	6123      	str	r3, [r4, #16]
 80149a8:	2300      	movs	r3, #0
 80149aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80149ae:	e7aa      	b.n	8014906 <_printf_i+0x146>
 80149b0:	6923      	ldr	r3, [r4, #16]
 80149b2:	4632      	mov	r2, r6
 80149b4:	4649      	mov	r1, r9
 80149b6:	4640      	mov	r0, r8
 80149b8:	47d0      	blx	sl
 80149ba:	3001      	adds	r0, #1
 80149bc:	d0ad      	beq.n	801491a <_printf_i+0x15a>
 80149be:	6823      	ldr	r3, [r4, #0]
 80149c0:	079b      	lsls	r3, r3, #30
 80149c2:	d413      	bmi.n	80149ec <_printf_i+0x22c>
 80149c4:	68e0      	ldr	r0, [r4, #12]
 80149c6:	9b03      	ldr	r3, [sp, #12]
 80149c8:	4298      	cmp	r0, r3
 80149ca:	bfb8      	it	lt
 80149cc:	4618      	movlt	r0, r3
 80149ce:	e7a6      	b.n	801491e <_printf_i+0x15e>
 80149d0:	2301      	movs	r3, #1
 80149d2:	4632      	mov	r2, r6
 80149d4:	4649      	mov	r1, r9
 80149d6:	4640      	mov	r0, r8
 80149d8:	47d0      	blx	sl
 80149da:	3001      	adds	r0, #1
 80149dc:	d09d      	beq.n	801491a <_printf_i+0x15a>
 80149de:	3501      	adds	r5, #1
 80149e0:	68e3      	ldr	r3, [r4, #12]
 80149e2:	9903      	ldr	r1, [sp, #12]
 80149e4:	1a5b      	subs	r3, r3, r1
 80149e6:	42ab      	cmp	r3, r5
 80149e8:	dcf2      	bgt.n	80149d0 <_printf_i+0x210>
 80149ea:	e7eb      	b.n	80149c4 <_printf_i+0x204>
 80149ec:	2500      	movs	r5, #0
 80149ee:	f104 0619 	add.w	r6, r4, #25
 80149f2:	e7f5      	b.n	80149e0 <_printf_i+0x220>
 80149f4:	08017066 	.word	0x08017066
 80149f8:	08017077 	.word	0x08017077

080149fc <std>:
 80149fc:	2300      	movs	r3, #0
 80149fe:	b510      	push	{r4, lr}
 8014a00:	4604      	mov	r4, r0
 8014a02:	e9c0 3300 	strd	r3, r3, [r0]
 8014a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014a0a:	6083      	str	r3, [r0, #8]
 8014a0c:	8181      	strh	r1, [r0, #12]
 8014a0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8014a10:	81c2      	strh	r2, [r0, #14]
 8014a12:	6183      	str	r3, [r0, #24]
 8014a14:	4619      	mov	r1, r3
 8014a16:	2208      	movs	r2, #8
 8014a18:	305c      	adds	r0, #92	@ 0x5c
 8014a1a:	f000 f916 	bl	8014c4a <memset>
 8014a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8014a54 <std+0x58>)
 8014a20:	6263      	str	r3, [r4, #36]	@ 0x24
 8014a22:	4b0d      	ldr	r3, [pc, #52]	@ (8014a58 <std+0x5c>)
 8014a24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014a26:	4b0d      	ldr	r3, [pc, #52]	@ (8014a5c <std+0x60>)
 8014a28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8014a60 <std+0x64>)
 8014a2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8014a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8014a64 <std+0x68>)
 8014a30:	6224      	str	r4, [r4, #32]
 8014a32:	429c      	cmp	r4, r3
 8014a34:	d006      	beq.n	8014a44 <std+0x48>
 8014a36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014a3a:	4294      	cmp	r4, r2
 8014a3c:	d002      	beq.n	8014a44 <std+0x48>
 8014a3e:	33d0      	adds	r3, #208	@ 0xd0
 8014a40:	429c      	cmp	r4, r3
 8014a42:	d105      	bne.n	8014a50 <std+0x54>
 8014a44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a4c:	f000 b98a 	b.w	8014d64 <__retarget_lock_init_recursive>
 8014a50:	bd10      	pop	{r4, pc}
 8014a52:	bf00      	nop
 8014a54:	08014bc5 	.word	0x08014bc5
 8014a58:	08014be7 	.word	0x08014be7
 8014a5c:	08014c1f 	.word	0x08014c1f
 8014a60:	08014c43 	.word	0x08014c43
 8014a64:	240278fc 	.word	0x240278fc

08014a68 <stdio_exit_handler>:
 8014a68:	4a02      	ldr	r2, [pc, #8]	@ (8014a74 <stdio_exit_handler+0xc>)
 8014a6a:	4903      	ldr	r1, [pc, #12]	@ (8014a78 <stdio_exit_handler+0x10>)
 8014a6c:	4803      	ldr	r0, [pc, #12]	@ (8014a7c <stdio_exit_handler+0x14>)
 8014a6e:	f000 b869 	b.w	8014b44 <_fwalk_sglue>
 8014a72:	bf00      	nop
 8014a74:	2400011c 	.word	0x2400011c
 8014a78:	080164d5 	.word	0x080164d5
 8014a7c:	2400012c 	.word	0x2400012c

08014a80 <cleanup_stdio>:
 8014a80:	6841      	ldr	r1, [r0, #4]
 8014a82:	4b0c      	ldr	r3, [pc, #48]	@ (8014ab4 <cleanup_stdio+0x34>)
 8014a84:	4299      	cmp	r1, r3
 8014a86:	b510      	push	{r4, lr}
 8014a88:	4604      	mov	r4, r0
 8014a8a:	d001      	beq.n	8014a90 <cleanup_stdio+0x10>
 8014a8c:	f001 fd22 	bl	80164d4 <_fflush_r>
 8014a90:	68a1      	ldr	r1, [r4, #8]
 8014a92:	4b09      	ldr	r3, [pc, #36]	@ (8014ab8 <cleanup_stdio+0x38>)
 8014a94:	4299      	cmp	r1, r3
 8014a96:	d002      	beq.n	8014a9e <cleanup_stdio+0x1e>
 8014a98:	4620      	mov	r0, r4
 8014a9a:	f001 fd1b 	bl	80164d4 <_fflush_r>
 8014a9e:	68e1      	ldr	r1, [r4, #12]
 8014aa0:	4b06      	ldr	r3, [pc, #24]	@ (8014abc <cleanup_stdio+0x3c>)
 8014aa2:	4299      	cmp	r1, r3
 8014aa4:	d004      	beq.n	8014ab0 <cleanup_stdio+0x30>
 8014aa6:	4620      	mov	r0, r4
 8014aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014aac:	f001 bd12 	b.w	80164d4 <_fflush_r>
 8014ab0:	bd10      	pop	{r4, pc}
 8014ab2:	bf00      	nop
 8014ab4:	240278fc 	.word	0x240278fc
 8014ab8:	24027964 	.word	0x24027964
 8014abc:	240279cc 	.word	0x240279cc

08014ac0 <global_stdio_init.part.0>:
 8014ac0:	b510      	push	{r4, lr}
 8014ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8014af0 <global_stdio_init.part.0+0x30>)
 8014ac4:	4c0b      	ldr	r4, [pc, #44]	@ (8014af4 <global_stdio_init.part.0+0x34>)
 8014ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8014af8 <global_stdio_init.part.0+0x38>)
 8014ac8:	601a      	str	r2, [r3, #0]
 8014aca:	4620      	mov	r0, r4
 8014acc:	2200      	movs	r2, #0
 8014ace:	2104      	movs	r1, #4
 8014ad0:	f7ff ff94 	bl	80149fc <std>
 8014ad4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014ad8:	2201      	movs	r2, #1
 8014ada:	2109      	movs	r1, #9
 8014adc:	f7ff ff8e 	bl	80149fc <std>
 8014ae0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014ae4:	2202      	movs	r2, #2
 8014ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014aea:	2112      	movs	r1, #18
 8014aec:	f7ff bf86 	b.w	80149fc <std>
 8014af0:	24027a34 	.word	0x24027a34
 8014af4:	240278fc 	.word	0x240278fc
 8014af8:	08014a69 	.word	0x08014a69

08014afc <__sfp_lock_acquire>:
 8014afc:	4801      	ldr	r0, [pc, #4]	@ (8014b04 <__sfp_lock_acquire+0x8>)
 8014afe:	f000 b932 	b.w	8014d66 <__retarget_lock_acquire_recursive>
 8014b02:	bf00      	nop
 8014b04:	24027a3d 	.word	0x24027a3d

08014b08 <__sfp_lock_release>:
 8014b08:	4801      	ldr	r0, [pc, #4]	@ (8014b10 <__sfp_lock_release+0x8>)
 8014b0a:	f000 b92d 	b.w	8014d68 <__retarget_lock_release_recursive>
 8014b0e:	bf00      	nop
 8014b10:	24027a3d 	.word	0x24027a3d

08014b14 <__sinit>:
 8014b14:	b510      	push	{r4, lr}
 8014b16:	4604      	mov	r4, r0
 8014b18:	f7ff fff0 	bl	8014afc <__sfp_lock_acquire>
 8014b1c:	6a23      	ldr	r3, [r4, #32]
 8014b1e:	b11b      	cbz	r3, 8014b28 <__sinit+0x14>
 8014b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b24:	f7ff bff0 	b.w	8014b08 <__sfp_lock_release>
 8014b28:	4b04      	ldr	r3, [pc, #16]	@ (8014b3c <__sinit+0x28>)
 8014b2a:	6223      	str	r3, [r4, #32]
 8014b2c:	4b04      	ldr	r3, [pc, #16]	@ (8014b40 <__sinit+0x2c>)
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d1f5      	bne.n	8014b20 <__sinit+0xc>
 8014b34:	f7ff ffc4 	bl	8014ac0 <global_stdio_init.part.0>
 8014b38:	e7f2      	b.n	8014b20 <__sinit+0xc>
 8014b3a:	bf00      	nop
 8014b3c:	08014a81 	.word	0x08014a81
 8014b40:	24027a34 	.word	0x24027a34

08014b44 <_fwalk_sglue>:
 8014b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b48:	4607      	mov	r7, r0
 8014b4a:	4688      	mov	r8, r1
 8014b4c:	4614      	mov	r4, r2
 8014b4e:	2600      	movs	r6, #0
 8014b50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014b54:	f1b9 0901 	subs.w	r9, r9, #1
 8014b58:	d505      	bpl.n	8014b66 <_fwalk_sglue+0x22>
 8014b5a:	6824      	ldr	r4, [r4, #0]
 8014b5c:	2c00      	cmp	r4, #0
 8014b5e:	d1f7      	bne.n	8014b50 <_fwalk_sglue+0xc>
 8014b60:	4630      	mov	r0, r6
 8014b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b66:	89ab      	ldrh	r3, [r5, #12]
 8014b68:	2b01      	cmp	r3, #1
 8014b6a:	d907      	bls.n	8014b7c <_fwalk_sglue+0x38>
 8014b6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014b70:	3301      	adds	r3, #1
 8014b72:	d003      	beq.n	8014b7c <_fwalk_sglue+0x38>
 8014b74:	4629      	mov	r1, r5
 8014b76:	4638      	mov	r0, r7
 8014b78:	47c0      	blx	r8
 8014b7a:	4306      	orrs	r6, r0
 8014b7c:	3568      	adds	r5, #104	@ 0x68
 8014b7e:	e7e9      	b.n	8014b54 <_fwalk_sglue+0x10>

08014b80 <siprintf>:
 8014b80:	b40e      	push	{r1, r2, r3}
 8014b82:	b510      	push	{r4, lr}
 8014b84:	b09d      	sub	sp, #116	@ 0x74
 8014b86:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014b88:	9002      	str	r0, [sp, #8]
 8014b8a:	9006      	str	r0, [sp, #24]
 8014b8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014b90:	480a      	ldr	r0, [pc, #40]	@ (8014bbc <siprintf+0x3c>)
 8014b92:	9107      	str	r1, [sp, #28]
 8014b94:	9104      	str	r1, [sp, #16]
 8014b96:	490a      	ldr	r1, [pc, #40]	@ (8014bc0 <siprintf+0x40>)
 8014b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b9c:	9105      	str	r1, [sp, #20]
 8014b9e:	2400      	movs	r4, #0
 8014ba0:	a902      	add	r1, sp, #8
 8014ba2:	6800      	ldr	r0, [r0, #0]
 8014ba4:	9301      	str	r3, [sp, #4]
 8014ba6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8014ba8:	f001 fb14 	bl	80161d4 <_svfiprintf_r>
 8014bac:	9b02      	ldr	r3, [sp, #8]
 8014bae:	701c      	strb	r4, [r3, #0]
 8014bb0:	b01d      	add	sp, #116	@ 0x74
 8014bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bb6:	b003      	add	sp, #12
 8014bb8:	4770      	bx	lr
 8014bba:	bf00      	nop
 8014bbc:	24000128 	.word	0x24000128
 8014bc0:	ffff0208 	.word	0xffff0208

08014bc4 <__sread>:
 8014bc4:	b510      	push	{r4, lr}
 8014bc6:	460c      	mov	r4, r1
 8014bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bcc:	f000 f86c 	bl	8014ca8 <_read_r>
 8014bd0:	2800      	cmp	r0, #0
 8014bd2:	bfab      	itete	ge
 8014bd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8014bd8:	181b      	addge	r3, r3, r0
 8014bda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014bde:	bfac      	ite	ge
 8014be0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014be2:	81a3      	strhlt	r3, [r4, #12]
 8014be4:	bd10      	pop	{r4, pc}

08014be6 <__swrite>:
 8014be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bea:	461f      	mov	r7, r3
 8014bec:	898b      	ldrh	r3, [r1, #12]
 8014bee:	05db      	lsls	r3, r3, #23
 8014bf0:	4605      	mov	r5, r0
 8014bf2:	460c      	mov	r4, r1
 8014bf4:	4616      	mov	r6, r2
 8014bf6:	d505      	bpl.n	8014c04 <__swrite+0x1e>
 8014bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bfc:	2302      	movs	r3, #2
 8014bfe:	2200      	movs	r2, #0
 8014c00:	f000 f840 	bl	8014c84 <_lseek_r>
 8014c04:	89a3      	ldrh	r3, [r4, #12]
 8014c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014c0e:	81a3      	strh	r3, [r4, #12]
 8014c10:	4632      	mov	r2, r6
 8014c12:	463b      	mov	r3, r7
 8014c14:	4628      	mov	r0, r5
 8014c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c1a:	f000 b867 	b.w	8014cec <_write_r>

08014c1e <__sseek>:
 8014c1e:	b510      	push	{r4, lr}
 8014c20:	460c      	mov	r4, r1
 8014c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c26:	f000 f82d 	bl	8014c84 <_lseek_r>
 8014c2a:	1c43      	adds	r3, r0, #1
 8014c2c:	89a3      	ldrh	r3, [r4, #12]
 8014c2e:	bf15      	itete	ne
 8014c30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014c32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014c36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014c3a:	81a3      	strheq	r3, [r4, #12]
 8014c3c:	bf18      	it	ne
 8014c3e:	81a3      	strhne	r3, [r4, #12]
 8014c40:	bd10      	pop	{r4, pc}

08014c42 <__sclose>:
 8014c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c46:	f000 b80d 	b.w	8014c64 <_close_r>

08014c4a <memset>:
 8014c4a:	4402      	add	r2, r0
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	4293      	cmp	r3, r2
 8014c50:	d100      	bne.n	8014c54 <memset+0xa>
 8014c52:	4770      	bx	lr
 8014c54:	f803 1b01 	strb.w	r1, [r3], #1
 8014c58:	e7f9      	b.n	8014c4e <memset+0x4>
	...

08014c5c <_localeconv_r>:
 8014c5c:	4800      	ldr	r0, [pc, #0]	@ (8014c60 <_localeconv_r+0x4>)
 8014c5e:	4770      	bx	lr
 8014c60:	24000268 	.word	0x24000268

08014c64 <_close_r>:
 8014c64:	b538      	push	{r3, r4, r5, lr}
 8014c66:	4d06      	ldr	r5, [pc, #24]	@ (8014c80 <_close_r+0x1c>)
 8014c68:	2300      	movs	r3, #0
 8014c6a:	4604      	mov	r4, r0
 8014c6c:	4608      	mov	r0, r1
 8014c6e:	602b      	str	r3, [r5, #0]
 8014c70:	f7ed fa56 	bl	8002120 <_close>
 8014c74:	1c43      	adds	r3, r0, #1
 8014c76:	d102      	bne.n	8014c7e <_close_r+0x1a>
 8014c78:	682b      	ldr	r3, [r5, #0]
 8014c7a:	b103      	cbz	r3, 8014c7e <_close_r+0x1a>
 8014c7c:	6023      	str	r3, [r4, #0]
 8014c7e:	bd38      	pop	{r3, r4, r5, pc}
 8014c80:	24027a38 	.word	0x24027a38

08014c84 <_lseek_r>:
 8014c84:	b538      	push	{r3, r4, r5, lr}
 8014c86:	4d07      	ldr	r5, [pc, #28]	@ (8014ca4 <_lseek_r+0x20>)
 8014c88:	4604      	mov	r4, r0
 8014c8a:	4608      	mov	r0, r1
 8014c8c:	4611      	mov	r1, r2
 8014c8e:	2200      	movs	r2, #0
 8014c90:	602a      	str	r2, [r5, #0]
 8014c92:	461a      	mov	r2, r3
 8014c94:	f7ed fa6b 	bl	800216e <_lseek>
 8014c98:	1c43      	adds	r3, r0, #1
 8014c9a:	d102      	bne.n	8014ca2 <_lseek_r+0x1e>
 8014c9c:	682b      	ldr	r3, [r5, #0]
 8014c9e:	b103      	cbz	r3, 8014ca2 <_lseek_r+0x1e>
 8014ca0:	6023      	str	r3, [r4, #0]
 8014ca2:	bd38      	pop	{r3, r4, r5, pc}
 8014ca4:	24027a38 	.word	0x24027a38

08014ca8 <_read_r>:
 8014ca8:	b538      	push	{r3, r4, r5, lr}
 8014caa:	4d07      	ldr	r5, [pc, #28]	@ (8014cc8 <_read_r+0x20>)
 8014cac:	4604      	mov	r4, r0
 8014cae:	4608      	mov	r0, r1
 8014cb0:	4611      	mov	r1, r2
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	602a      	str	r2, [r5, #0]
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	f7ed f9f9 	bl	80020ae <_read>
 8014cbc:	1c43      	adds	r3, r0, #1
 8014cbe:	d102      	bne.n	8014cc6 <_read_r+0x1e>
 8014cc0:	682b      	ldr	r3, [r5, #0]
 8014cc2:	b103      	cbz	r3, 8014cc6 <_read_r+0x1e>
 8014cc4:	6023      	str	r3, [r4, #0]
 8014cc6:	bd38      	pop	{r3, r4, r5, pc}
 8014cc8:	24027a38 	.word	0x24027a38

08014ccc <_sbrk_r>:
 8014ccc:	b538      	push	{r3, r4, r5, lr}
 8014cce:	4d06      	ldr	r5, [pc, #24]	@ (8014ce8 <_sbrk_r+0x1c>)
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	4604      	mov	r4, r0
 8014cd4:	4608      	mov	r0, r1
 8014cd6:	602b      	str	r3, [r5, #0]
 8014cd8:	f7ed fa56 	bl	8002188 <_sbrk>
 8014cdc:	1c43      	adds	r3, r0, #1
 8014cde:	d102      	bne.n	8014ce6 <_sbrk_r+0x1a>
 8014ce0:	682b      	ldr	r3, [r5, #0]
 8014ce2:	b103      	cbz	r3, 8014ce6 <_sbrk_r+0x1a>
 8014ce4:	6023      	str	r3, [r4, #0]
 8014ce6:	bd38      	pop	{r3, r4, r5, pc}
 8014ce8:	24027a38 	.word	0x24027a38

08014cec <_write_r>:
 8014cec:	b538      	push	{r3, r4, r5, lr}
 8014cee:	4d07      	ldr	r5, [pc, #28]	@ (8014d0c <_write_r+0x20>)
 8014cf0:	4604      	mov	r4, r0
 8014cf2:	4608      	mov	r0, r1
 8014cf4:	4611      	mov	r1, r2
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	602a      	str	r2, [r5, #0]
 8014cfa:	461a      	mov	r2, r3
 8014cfc:	f7ed f9f4 	bl	80020e8 <_write>
 8014d00:	1c43      	adds	r3, r0, #1
 8014d02:	d102      	bne.n	8014d0a <_write_r+0x1e>
 8014d04:	682b      	ldr	r3, [r5, #0]
 8014d06:	b103      	cbz	r3, 8014d0a <_write_r+0x1e>
 8014d08:	6023      	str	r3, [r4, #0]
 8014d0a:	bd38      	pop	{r3, r4, r5, pc}
 8014d0c:	24027a38 	.word	0x24027a38

08014d10 <__errno>:
 8014d10:	4b01      	ldr	r3, [pc, #4]	@ (8014d18 <__errno+0x8>)
 8014d12:	6818      	ldr	r0, [r3, #0]
 8014d14:	4770      	bx	lr
 8014d16:	bf00      	nop
 8014d18:	24000128 	.word	0x24000128

08014d1c <__libc_init_array>:
 8014d1c:	b570      	push	{r4, r5, r6, lr}
 8014d1e:	4d0d      	ldr	r5, [pc, #52]	@ (8014d54 <__libc_init_array+0x38>)
 8014d20:	4c0d      	ldr	r4, [pc, #52]	@ (8014d58 <__libc_init_array+0x3c>)
 8014d22:	1b64      	subs	r4, r4, r5
 8014d24:	10a4      	asrs	r4, r4, #2
 8014d26:	2600      	movs	r6, #0
 8014d28:	42a6      	cmp	r6, r4
 8014d2a:	d109      	bne.n	8014d40 <__libc_init_array+0x24>
 8014d2c:	4d0b      	ldr	r5, [pc, #44]	@ (8014d5c <__libc_init_array+0x40>)
 8014d2e:	4c0c      	ldr	r4, [pc, #48]	@ (8014d60 <__libc_init_array+0x44>)
 8014d30:	f001 ff32 	bl	8016b98 <_init>
 8014d34:	1b64      	subs	r4, r4, r5
 8014d36:	10a4      	asrs	r4, r4, #2
 8014d38:	2600      	movs	r6, #0
 8014d3a:	42a6      	cmp	r6, r4
 8014d3c:	d105      	bne.n	8014d4a <__libc_init_array+0x2e>
 8014d3e:	bd70      	pop	{r4, r5, r6, pc}
 8014d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d44:	4798      	blx	r3
 8014d46:	3601      	adds	r6, #1
 8014d48:	e7ee      	b.n	8014d28 <__libc_init_array+0xc>
 8014d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d4e:	4798      	blx	r3
 8014d50:	3601      	adds	r6, #1
 8014d52:	e7f2      	b.n	8014d3a <__libc_init_array+0x1e>
 8014d54:	080173d4 	.word	0x080173d4
 8014d58:	080173d4 	.word	0x080173d4
 8014d5c:	080173d4 	.word	0x080173d4
 8014d60:	080173d8 	.word	0x080173d8

08014d64 <__retarget_lock_init_recursive>:
 8014d64:	4770      	bx	lr

08014d66 <__retarget_lock_acquire_recursive>:
 8014d66:	4770      	bx	lr

08014d68 <__retarget_lock_release_recursive>:
 8014d68:	4770      	bx	lr

08014d6a <memcpy>:
 8014d6a:	440a      	add	r2, r1
 8014d6c:	4291      	cmp	r1, r2
 8014d6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8014d72:	d100      	bne.n	8014d76 <memcpy+0xc>
 8014d74:	4770      	bx	lr
 8014d76:	b510      	push	{r4, lr}
 8014d78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d80:	4291      	cmp	r1, r2
 8014d82:	d1f9      	bne.n	8014d78 <memcpy+0xe>
 8014d84:	bd10      	pop	{r4, pc}
	...

08014d88 <__assert_func>:
 8014d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014d8a:	4614      	mov	r4, r2
 8014d8c:	461a      	mov	r2, r3
 8014d8e:	4b09      	ldr	r3, [pc, #36]	@ (8014db4 <__assert_func+0x2c>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	4605      	mov	r5, r0
 8014d94:	68d8      	ldr	r0, [r3, #12]
 8014d96:	b14c      	cbz	r4, 8014dac <__assert_func+0x24>
 8014d98:	4b07      	ldr	r3, [pc, #28]	@ (8014db8 <__assert_func+0x30>)
 8014d9a:	9100      	str	r1, [sp, #0]
 8014d9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014da0:	4906      	ldr	r1, [pc, #24]	@ (8014dbc <__assert_func+0x34>)
 8014da2:	462b      	mov	r3, r5
 8014da4:	f001 fbbe 	bl	8016524 <fiprintf>
 8014da8:	f001 fbe8 	bl	801657c <abort>
 8014dac:	4b04      	ldr	r3, [pc, #16]	@ (8014dc0 <__assert_func+0x38>)
 8014dae:	461c      	mov	r4, r3
 8014db0:	e7f3      	b.n	8014d9a <__assert_func+0x12>
 8014db2:	bf00      	nop
 8014db4:	24000128 	.word	0x24000128
 8014db8:	08017088 	.word	0x08017088
 8014dbc:	08017095 	.word	0x08017095
 8014dc0:	080170c3 	.word	0x080170c3

08014dc4 <quorem>:
 8014dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dc8:	6903      	ldr	r3, [r0, #16]
 8014dca:	690c      	ldr	r4, [r1, #16]
 8014dcc:	42a3      	cmp	r3, r4
 8014dce:	4607      	mov	r7, r0
 8014dd0:	db7e      	blt.n	8014ed0 <quorem+0x10c>
 8014dd2:	3c01      	subs	r4, #1
 8014dd4:	f101 0814 	add.w	r8, r1, #20
 8014dd8:	00a3      	lsls	r3, r4, #2
 8014dda:	f100 0514 	add.w	r5, r0, #20
 8014dde:	9300      	str	r3, [sp, #0]
 8014de0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014de4:	9301      	str	r3, [sp, #4]
 8014de6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014dea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014dee:	3301      	adds	r3, #1
 8014df0:	429a      	cmp	r2, r3
 8014df2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014df6:	fbb2 f6f3 	udiv	r6, r2, r3
 8014dfa:	d32e      	bcc.n	8014e5a <quorem+0x96>
 8014dfc:	f04f 0a00 	mov.w	sl, #0
 8014e00:	46c4      	mov	ip, r8
 8014e02:	46ae      	mov	lr, r5
 8014e04:	46d3      	mov	fp, sl
 8014e06:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014e0a:	b298      	uxth	r0, r3
 8014e0c:	fb06 a000 	mla	r0, r6, r0, sl
 8014e10:	0c02      	lsrs	r2, r0, #16
 8014e12:	0c1b      	lsrs	r3, r3, #16
 8014e14:	fb06 2303 	mla	r3, r6, r3, r2
 8014e18:	f8de 2000 	ldr.w	r2, [lr]
 8014e1c:	b280      	uxth	r0, r0
 8014e1e:	b292      	uxth	r2, r2
 8014e20:	1a12      	subs	r2, r2, r0
 8014e22:	445a      	add	r2, fp
 8014e24:	f8de 0000 	ldr.w	r0, [lr]
 8014e28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014e2c:	b29b      	uxth	r3, r3
 8014e2e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014e32:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014e36:	b292      	uxth	r2, r2
 8014e38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014e3c:	45e1      	cmp	r9, ip
 8014e3e:	f84e 2b04 	str.w	r2, [lr], #4
 8014e42:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014e46:	d2de      	bcs.n	8014e06 <quorem+0x42>
 8014e48:	9b00      	ldr	r3, [sp, #0]
 8014e4a:	58eb      	ldr	r3, [r5, r3]
 8014e4c:	b92b      	cbnz	r3, 8014e5a <quorem+0x96>
 8014e4e:	9b01      	ldr	r3, [sp, #4]
 8014e50:	3b04      	subs	r3, #4
 8014e52:	429d      	cmp	r5, r3
 8014e54:	461a      	mov	r2, r3
 8014e56:	d32f      	bcc.n	8014eb8 <quorem+0xf4>
 8014e58:	613c      	str	r4, [r7, #16]
 8014e5a:	4638      	mov	r0, r7
 8014e5c:	f001 f856 	bl	8015f0c <__mcmp>
 8014e60:	2800      	cmp	r0, #0
 8014e62:	db25      	blt.n	8014eb0 <quorem+0xec>
 8014e64:	4629      	mov	r1, r5
 8014e66:	2000      	movs	r0, #0
 8014e68:	f858 2b04 	ldr.w	r2, [r8], #4
 8014e6c:	f8d1 c000 	ldr.w	ip, [r1]
 8014e70:	fa1f fe82 	uxth.w	lr, r2
 8014e74:	fa1f f38c 	uxth.w	r3, ip
 8014e78:	eba3 030e 	sub.w	r3, r3, lr
 8014e7c:	4403      	add	r3, r0
 8014e7e:	0c12      	lsrs	r2, r2, #16
 8014e80:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014e84:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014e88:	b29b      	uxth	r3, r3
 8014e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e8e:	45c1      	cmp	r9, r8
 8014e90:	f841 3b04 	str.w	r3, [r1], #4
 8014e94:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014e98:	d2e6      	bcs.n	8014e68 <quorem+0xa4>
 8014e9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014ea2:	b922      	cbnz	r2, 8014eae <quorem+0xea>
 8014ea4:	3b04      	subs	r3, #4
 8014ea6:	429d      	cmp	r5, r3
 8014ea8:	461a      	mov	r2, r3
 8014eaa:	d30b      	bcc.n	8014ec4 <quorem+0x100>
 8014eac:	613c      	str	r4, [r7, #16]
 8014eae:	3601      	adds	r6, #1
 8014eb0:	4630      	mov	r0, r6
 8014eb2:	b003      	add	sp, #12
 8014eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eb8:	6812      	ldr	r2, [r2, #0]
 8014eba:	3b04      	subs	r3, #4
 8014ebc:	2a00      	cmp	r2, #0
 8014ebe:	d1cb      	bne.n	8014e58 <quorem+0x94>
 8014ec0:	3c01      	subs	r4, #1
 8014ec2:	e7c6      	b.n	8014e52 <quorem+0x8e>
 8014ec4:	6812      	ldr	r2, [r2, #0]
 8014ec6:	3b04      	subs	r3, #4
 8014ec8:	2a00      	cmp	r2, #0
 8014eca:	d1ef      	bne.n	8014eac <quorem+0xe8>
 8014ecc:	3c01      	subs	r4, #1
 8014ece:	e7ea      	b.n	8014ea6 <quorem+0xe2>
 8014ed0:	2000      	movs	r0, #0
 8014ed2:	e7ee      	b.n	8014eb2 <quorem+0xee>
 8014ed4:	0000      	movs	r0, r0
	...

08014ed8 <_dtoa_r>:
 8014ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014edc:	ed2d 8b02 	vpush	{d8}
 8014ee0:	69c7      	ldr	r7, [r0, #28]
 8014ee2:	b091      	sub	sp, #68	@ 0x44
 8014ee4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014ee8:	ec55 4b10 	vmov	r4, r5, d0
 8014eec:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8014eee:	9107      	str	r1, [sp, #28]
 8014ef0:	4681      	mov	r9, r0
 8014ef2:	9209      	str	r2, [sp, #36]	@ 0x24
 8014ef4:	930d      	str	r3, [sp, #52]	@ 0x34
 8014ef6:	b97f      	cbnz	r7, 8014f18 <_dtoa_r+0x40>
 8014ef8:	2010      	movs	r0, #16
 8014efa:	f7ff f895 	bl	8014028 <malloc>
 8014efe:	4602      	mov	r2, r0
 8014f00:	f8c9 001c 	str.w	r0, [r9, #28]
 8014f04:	b920      	cbnz	r0, 8014f10 <_dtoa_r+0x38>
 8014f06:	4ba0      	ldr	r3, [pc, #640]	@ (8015188 <_dtoa_r+0x2b0>)
 8014f08:	21ef      	movs	r1, #239	@ 0xef
 8014f0a:	48a0      	ldr	r0, [pc, #640]	@ (801518c <_dtoa_r+0x2b4>)
 8014f0c:	f7ff ff3c 	bl	8014d88 <__assert_func>
 8014f10:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014f14:	6007      	str	r7, [r0, #0]
 8014f16:	60c7      	str	r7, [r0, #12]
 8014f18:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014f1c:	6819      	ldr	r1, [r3, #0]
 8014f1e:	b159      	cbz	r1, 8014f38 <_dtoa_r+0x60>
 8014f20:	685a      	ldr	r2, [r3, #4]
 8014f22:	604a      	str	r2, [r1, #4]
 8014f24:	2301      	movs	r3, #1
 8014f26:	4093      	lsls	r3, r2
 8014f28:	608b      	str	r3, [r1, #8]
 8014f2a:	4648      	mov	r0, r9
 8014f2c:	f000 fdbc 	bl	8015aa8 <_Bfree>
 8014f30:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014f34:	2200      	movs	r2, #0
 8014f36:	601a      	str	r2, [r3, #0]
 8014f38:	1e2b      	subs	r3, r5, #0
 8014f3a:	bfbb      	ittet	lt
 8014f3c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014f40:	9303      	strlt	r3, [sp, #12]
 8014f42:	2300      	movge	r3, #0
 8014f44:	2201      	movlt	r2, #1
 8014f46:	bfac      	ite	ge
 8014f48:	6033      	strge	r3, [r6, #0]
 8014f4a:	6032      	strlt	r2, [r6, #0]
 8014f4c:	4b90      	ldr	r3, [pc, #576]	@ (8015190 <_dtoa_r+0x2b8>)
 8014f4e:	9e03      	ldr	r6, [sp, #12]
 8014f50:	43b3      	bics	r3, r6
 8014f52:	d110      	bne.n	8014f76 <_dtoa_r+0x9e>
 8014f54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014f56:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014f5a:	6013      	str	r3, [r2, #0]
 8014f5c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8014f60:	4323      	orrs	r3, r4
 8014f62:	f000 84e6 	beq.w	8015932 <_dtoa_r+0xa5a>
 8014f66:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014f68:	4f8a      	ldr	r7, [pc, #552]	@ (8015194 <_dtoa_r+0x2bc>)
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	f000 84e8 	beq.w	8015940 <_dtoa_r+0xa68>
 8014f70:	1cfb      	adds	r3, r7, #3
 8014f72:	f000 bce3 	b.w	801593c <_dtoa_r+0xa64>
 8014f76:	ed9d 8b02 	vldr	d8, [sp, #8]
 8014f7a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f82:	d10a      	bne.n	8014f9a <_dtoa_r+0xc2>
 8014f84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014f86:	2301      	movs	r3, #1
 8014f88:	6013      	str	r3, [r2, #0]
 8014f8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014f8c:	b113      	cbz	r3, 8014f94 <_dtoa_r+0xbc>
 8014f8e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014f90:	4b81      	ldr	r3, [pc, #516]	@ (8015198 <_dtoa_r+0x2c0>)
 8014f92:	6013      	str	r3, [r2, #0]
 8014f94:	4f81      	ldr	r7, [pc, #516]	@ (801519c <_dtoa_r+0x2c4>)
 8014f96:	f000 bcd3 	b.w	8015940 <_dtoa_r+0xa68>
 8014f9a:	aa0e      	add	r2, sp, #56	@ 0x38
 8014f9c:	a90f      	add	r1, sp, #60	@ 0x3c
 8014f9e:	4648      	mov	r0, r9
 8014fa0:	eeb0 0b48 	vmov.f64	d0, d8
 8014fa4:	f001 f862 	bl	801606c <__d2b>
 8014fa8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8014fac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014fae:	9001      	str	r0, [sp, #4]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d045      	beq.n	8015040 <_dtoa_r+0x168>
 8014fb4:	eeb0 7b48 	vmov.f64	d7, d8
 8014fb8:	ee18 1a90 	vmov	r1, s17
 8014fbc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014fc0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8014fc4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8014fc8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8014fcc:	2500      	movs	r5, #0
 8014fce:	ee07 1a90 	vmov	s15, r1
 8014fd2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8014fd6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8015170 <_dtoa_r+0x298>
 8014fda:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014fde:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8015178 <_dtoa_r+0x2a0>
 8014fe2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014fe6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8015180 <_dtoa_r+0x2a8>
 8014fea:	ee07 3a90 	vmov	s15, r3
 8014fee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014ff2:	eeb0 7b46 	vmov.f64	d7, d6
 8014ff6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014ffa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014ffe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015006:	ee16 8a90 	vmov	r8, s13
 801500a:	d508      	bpl.n	801501e <_dtoa_r+0x146>
 801500c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015010:	eeb4 6b47 	vcmp.f64	d6, d7
 8015014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015018:	bf18      	it	ne
 801501a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801501e:	f1b8 0f16 	cmp.w	r8, #22
 8015022:	d82b      	bhi.n	801507c <_dtoa_r+0x1a4>
 8015024:	495e      	ldr	r1, [pc, #376]	@ (80151a0 <_dtoa_r+0x2c8>)
 8015026:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801502a:	ed91 7b00 	vldr	d7, [r1]
 801502e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015036:	d501      	bpl.n	801503c <_dtoa_r+0x164>
 8015038:	f108 38ff 	add.w	r8, r8, #4294967295
 801503c:	2100      	movs	r1, #0
 801503e:	e01e      	b.n	801507e <_dtoa_r+0x1a6>
 8015040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015042:	4413      	add	r3, r2
 8015044:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8015048:	2920      	cmp	r1, #32
 801504a:	bfc1      	itttt	gt
 801504c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8015050:	408e      	lslgt	r6, r1
 8015052:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8015056:	fa24 f101 	lsrgt.w	r1, r4, r1
 801505a:	bfd6      	itet	le
 801505c:	f1c1 0120 	rsble	r1, r1, #32
 8015060:	4331      	orrgt	r1, r6
 8015062:	fa04 f101 	lslle.w	r1, r4, r1
 8015066:	ee07 1a90 	vmov	s15, r1
 801506a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801506e:	3b01      	subs	r3, #1
 8015070:	ee17 1a90 	vmov	r1, s15
 8015074:	2501      	movs	r5, #1
 8015076:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801507a:	e7a8      	b.n	8014fce <_dtoa_r+0xf6>
 801507c:	2101      	movs	r1, #1
 801507e:	1ad2      	subs	r2, r2, r3
 8015080:	1e53      	subs	r3, r2, #1
 8015082:	9306      	str	r3, [sp, #24]
 8015084:	bf45      	ittet	mi
 8015086:	f1c2 0301 	rsbmi	r3, r2, #1
 801508a:	9304      	strmi	r3, [sp, #16]
 801508c:	2300      	movpl	r3, #0
 801508e:	2300      	movmi	r3, #0
 8015090:	bf4c      	ite	mi
 8015092:	9306      	strmi	r3, [sp, #24]
 8015094:	9304      	strpl	r3, [sp, #16]
 8015096:	f1b8 0f00 	cmp.w	r8, #0
 801509a:	910c      	str	r1, [sp, #48]	@ 0x30
 801509c:	db18      	blt.n	80150d0 <_dtoa_r+0x1f8>
 801509e:	9b06      	ldr	r3, [sp, #24]
 80150a0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80150a4:	4443      	add	r3, r8
 80150a6:	9306      	str	r3, [sp, #24]
 80150a8:	2300      	movs	r3, #0
 80150aa:	9a07      	ldr	r2, [sp, #28]
 80150ac:	2a09      	cmp	r2, #9
 80150ae:	d845      	bhi.n	801513c <_dtoa_r+0x264>
 80150b0:	2a05      	cmp	r2, #5
 80150b2:	bfc4      	itt	gt
 80150b4:	3a04      	subgt	r2, #4
 80150b6:	9207      	strgt	r2, [sp, #28]
 80150b8:	9a07      	ldr	r2, [sp, #28]
 80150ba:	f1a2 0202 	sub.w	r2, r2, #2
 80150be:	bfcc      	ite	gt
 80150c0:	2400      	movgt	r4, #0
 80150c2:	2401      	movle	r4, #1
 80150c4:	2a03      	cmp	r2, #3
 80150c6:	d844      	bhi.n	8015152 <_dtoa_r+0x27a>
 80150c8:	e8df f002 	tbb	[pc, r2]
 80150cc:	0b173634 	.word	0x0b173634
 80150d0:	9b04      	ldr	r3, [sp, #16]
 80150d2:	2200      	movs	r2, #0
 80150d4:	eba3 0308 	sub.w	r3, r3, r8
 80150d8:	9304      	str	r3, [sp, #16]
 80150da:	920a      	str	r2, [sp, #40]	@ 0x28
 80150dc:	f1c8 0300 	rsb	r3, r8, #0
 80150e0:	e7e3      	b.n	80150aa <_dtoa_r+0x1d2>
 80150e2:	2201      	movs	r2, #1
 80150e4:	9208      	str	r2, [sp, #32]
 80150e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80150e8:	eb08 0b02 	add.w	fp, r8, r2
 80150ec:	f10b 0a01 	add.w	sl, fp, #1
 80150f0:	4652      	mov	r2, sl
 80150f2:	2a01      	cmp	r2, #1
 80150f4:	bfb8      	it	lt
 80150f6:	2201      	movlt	r2, #1
 80150f8:	e006      	b.n	8015108 <_dtoa_r+0x230>
 80150fa:	2201      	movs	r2, #1
 80150fc:	9208      	str	r2, [sp, #32]
 80150fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015100:	2a00      	cmp	r2, #0
 8015102:	dd29      	ble.n	8015158 <_dtoa_r+0x280>
 8015104:	4693      	mov	fp, r2
 8015106:	4692      	mov	sl, r2
 8015108:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801510c:	2100      	movs	r1, #0
 801510e:	2004      	movs	r0, #4
 8015110:	f100 0614 	add.w	r6, r0, #20
 8015114:	4296      	cmp	r6, r2
 8015116:	d926      	bls.n	8015166 <_dtoa_r+0x28e>
 8015118:	6079      	str	r1, [r7, #4]
 801511a:	4648      	mov	r0, r9
 801511c:	9305      	str	r3, [sp, #20]
 801511e:	f000 fc83 	bl	8015a28 <_Balloc>
 8015122:	9b05      	ldr	r3, [sp, #20]
 8015124:	4607      	mov	r7, r0
 8015126:	2800      	cmp	r0, #0
 8015128:	d13e      	bne.n	80151a8 <_dtoa_r+0x2d0>
 801512a:	4b1e      	ldr	r3, [pc, #120]	@ (80151a4 <_dtoa_r+0x2cc>)
 801512c:	4602      	mov	r2, r0
 801512e:	f240 11af 	movw	r1, #431	@ 0x1af
 8015132:	e6ea      	b.n	8014f0a <_dtoa_r+0x32>
 8015134:	2200      	movs	r2, #0
 8015136:	e7e1      	b.n	80150fc <_dtoa_r+0x224>
 8015138:	2200      	movs	r2, #0
 801513a:	e7d3      	b.n	80150e4 <_dtoa_r+0x20c>
 801513c:	2401      	movs	r4, #1
 801513e:	2200      	movs	r2, #0
 8015140:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8015144:	f04f 3bff 	mov.w	fp, #4294967295
 8015148:	2100      	movs	r1, #0
 801514a:	46da      	mov	sl, fp
 801514c:	2212      	movs	r2, #18
 801514e:	9109      	str	r1, [sp, #36]	@ 0x24
 8015150:	e7da      	b.n	8015108 <_dtoa_r+0x230>
 8015152:	2201      	movs	r2, #1
 8015154:	9208      	str	r2, [sp, #32]
 8015156:	e7f5      	b.n	8015144 <_dtoa_r+0x26c>
 8015158:	f04f 0b01 	mov.w	fp, #1
 801515c:	46da      	mov	sl, fp
 801515e:	465a      	mov	r2, fp
 8015160:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8015164:	e7d0      	b.n	8015108 <_dtoa_r+0x230>
 8015166:	3101      	adds	r1, #1
 8015168:	0040      	lsls	r0, r0, #1
 801516a:	e7d1      	b.n	8015110 <_dtoa_r+0x238>
 801516c:	f3af 8000 	nop.w
 8015170:	636f4361 	.word	0x636f4361
 8015174:	3fd287a7 	.word	0x3fd287a7
 8015178:	8b60c8b3 	.word	0x8b60c8b3
 801517c:	3fc68a28 	.word	0x3fc68a28
 8015180:	509f79fb 	.word	0x509f79fb
 8015184:	3fd34413 	.word	0x3fd34413
 8015188:	080170d1 	.word	0x080170d1
 801518c:	080170e8 	.word	0x080170e8
 8015190:	7ff00000 	.word	0x7ff00000
 8015194:	080170cd 	.word	0x080170cd
 8015198:	08017065 	.word	0x08017065
 801519c:	08017064 	.word	0x08017064
 80151a0:	08017200 	.word	0x08017200
 80151a4:	08017140 	.word	0x08017140
 80151a8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80151ac:	f1ba 0f0e 	cmp.w	sl, #14
 80151b0:	6010      	str	r0, [r2, #0]
 80151b2:	d86e      	bhi.n	8015292 <_dtoa_r+0x3ba>
 80151b4:	2c00      	cmp	r4, #0
 80151b6:	d06c      	beq.n	8015292 <_dtoa_r+0x3ba>
 80151b8:	f1b8 0f00 	cmp.w	r8, #0
 80151bc:	f340 80b4 	ble.w	8015328 <_dtoa_r+0x450>
 80151c0:	4ac8      	ldr	r2, [pc, #800]	@ (80154e4 <_dtoa_r+0x60c>)
 80151c2:	f008 010f 	and.w	r1, r8, #15
 80151c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80151ca:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80151ce:	ed92 7b00 	vldr	d7, [r2]
 80151d2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80151d6:	f000 809b 	beq.w	8015310 <_dtoa_r+0x438>
 80151da:	4ac3      	ldr	r2, [pc, #780]	@ (80154e8 <_dtoa_r+0x610>)
 80151dc:	ed92 6b08 	vldr	d6, [r2, #32]
 80151e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80151e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80151e8:	f001 010f 	and.w	r1, r1, #15
 80151ec:	2203      	movs	r2, #3
 80151ee:	48be      	ldr	r0, [pc, #760]	@ (80154e8 <_dtoa_r+0x610>)
 80151f0:	2900      	cmp	r1, #0
 80151f2:	f040 808f 	bne.w	8015314 <_dtoa_r+0x43c>
 80151f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80151fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80151fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015202:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015204:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015208:	2900      	cmp	r1, #0
 801520a:	f000 80b3 	beq.w	8015374 <_dtoa_r+0x49c>
 801520e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8015212:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801521a:	f140 80ab 	bpl.w	8015374 <_dtoa_r+0x49c>
 801521e:	f1ba 0f00 	cmp.w	sl, #0
 8015222:	f000 80a7 	beq.w	8015374 <_dtoa_r+0x49c>
 8015226:	f1bb 0f00 	cmp.w	fp, #0
 801522a:	dd30      	ble.n	801528e <_dtoa_r+0x3b6>
 801522c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8015230:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015234:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015238:	f108 31ff 	add.w	r1, r8, #4294967295
 801523c:	9105      	str	r1, [sp, #20]
 801523e:	3201      	adds	r2, #1
 8015240:	465c      	mov	r4, fp
 8015242:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015246:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801524a:	ee07 2a90 	vmov	s15, r2
 801524e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015252:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015256:	ee15 2a90 	vmov	r2, s11
 801525a:	ec51 0b15 	vmov	r0, r1, d5
 801525e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8015262:	2c00      	cmp	r4, #0
 8015264:	f040 808a 	bne.w	801537c <_dtoa_r+0x4a4>
 8015268:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801526c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015270:	ec41 0b17 	vmov	d7, r0, r1
 8015274:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801527c:	f300 826a 	bgt.w	8015754 <_dtoa_r+0x87c>
 8015280:	eeb1 7b47 	vneg.f64	d7, d7
 8015284:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801528c:	d423      	bmi.n	80152d6 <_dtoa_r+0x3fe>
 801528e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015292:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015294:	2a00      	cmp	r2, #0
 8015296:	f2c0 8129 	blt.w	80154ec <_dtoa_r+0x614>
 801529a:	f1b8 0f0e 	cmp.w	r8, #14
 801529e:	f300 8125 	bgt.w	80154ec <_dtoa_r+0x614>
 80152a2:	4b90      	ldr	r3, [pc, #576]	@ (80154e4 <_dtoa_r+0x60c>)
 80152a4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80152a8:	ed93 6b00 	vldr	d6, [r3]
 80152ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	f280 80c8 	bge.w	8015444 <_dtoa_r+0x56c>
 80152b4:	f1ba 0f00 	cmp.w	sl, #0
 80152b8:	f300 80c4 	bgt.w	8015444 <_dtoa_r+0x56c>
 80152bc:	d10b      	bne.n	80152d6 <_dtoa_r+0x3fe>
 80152be:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80152c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80152c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80152ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80152ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152d2:	f2c0 823c 	blt.w	801574e <_dtoa_r+0x876>
 80152d6:	2400      	movs	r4, #0
 80152d8:	4625      	mov	r5, r4
 80152da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152dc:	43db      	mvns	r3, r3
 80152de:	9305      	str	r3, [sp, #20]
 80152e0:	463e      	mov	r6, r7
 80152e2:	f04f 0800 	mov.w	r8, #0
 80152e6:	4621      	mov	r1, r4
 80152e8:	4648      	mov	r0, r9
 80152ea:	f000 fbdd 	bl	8015aa8 <_Bfree>
 80152ee:	2d00      	cmp	r5, #0
 80152f0:	f000 80a2 	beq.w	8015438 <_dtoa_r+0x560>
 80152f4:	f1b8 0f00 	cmp.w	r8, #0
 80152f8:	d005      	beq.n	8015306 <_dtoa_r+0x42e>
 80152fa:	45a8      	cmp	r8, r5
 80152fc:	d003      	beq.n	8015306 <_dtoa_r+0x42e>
 80152fe:	4641      	mov	r1, r8
 8015300:	4648      	mov	r0, r9
 8015302:	f000 fbd1 	bl	8015aa8 <_Bfree>
 8015306:	4629      	mov	r1, r5
 8015308:	4648      	mov	r0, r9
 801530a:	f000 fbcd 	bl	8015aa8 <_Bfree>
 801530e:	e093      	b.n	8015438 <_dtoa_r+0x560>
 8015310:	2202      	movs	r2, #2
 8015312:	e76c      	b.n	80151ee <_dtoa_r+0x316>
 8015314:	07cc      	lsls	r4, r1, #31
 8015316:	d504      	bpl.n	8015322 <_dtoa_r+0x44a>
 8015318:	ed90 6b00 	vldr	d6, [r0]
 801531c:	3201      	adds	r2, #1
 801531e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015322:	1049      	asrs	r1, r1, #1
 8015324:	3008      	adds	r0, #8
 8015326:	e763      	b.n	80151f0 <_dtoa_r+0x318>
 8015328:	d022      	beq.n	8015370 <_dtoa_r+0x498>
 801532a:	f1c8 0100 	rsb	r1, r8, #0
 801532e:	4a6d      	ldr	r2, [pc, #436]	@ (80154e4 <_dtoa_r+0x60c>)
 8015330:	f001 000f 	and.w	r0, r1, #15
 8015334:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015338:	ed92 7b00 	vldr	d7, [r2]
 801533c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015340:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015344:	4868      	ldr	r0, [pc, #416]	@ (80154e8 <_dtoa_r+0x610>)
 8015346:	1109      	asrs	r1, r1, #4
 8015348:	2400      	movs	r4, #0
 801534a:	2202      	movs	r2, #2
 801534c:	b929      	cbnz	r1, 801535a <_dtoa_r+0x482>
 801534e:	2c00      	cmp	r4, #0
 8015350:	f43f af57 	beq.w	8015202 <_dtoa_r+0x32a>
 8015354:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015358:	e753      	b.n	8015202 <_dtoa_r+0x32a>
 801535a:	07ce      	lsls	r6, r1, #31
 801535c:	d505      	bpl.n	801536a <_dtoa_r+0x492>
 801535e:	ed90 6b00 	vldr	d6, [r0]
 8015362:	3201      	adds	r2, #1
 8015364:	2401      	movs	r4, #1
 8015366:	ee27 7b06 	vmul.f64	d7, d7, d6
 801536a:	1049      	asrs	r1, r1, #1
 801536c:	3008      	adds	r0, #8
 801536e:	e7ed      	b.n	801534c <_dtoa_r+0x474>
 8015370:	2202      	movs	r2, #2
 8015372:	e746      	b.n	8015202 <_dtoa_r+0x32a>
 8015374:	f8cd 8014 	str.w	r8, [sp, #20]
 8015378:	4654      	mov	r4, sl
 801537a:	e762      	b.n	8015242 <_dtoa_r+0x36a>
 801537c:	4a59      	ldr	r2, [pc, #356]	@ (80154e4 <_dtoa_r+0x60c>)
 801537e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8015382:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015386:	9a08      	ldr	r2, [sp, #32]
 8015388:	ec41 0b17 	vmov	d7, r0, r1
 801538c:	443c      	add	r4, r7
 801538e:	b34a      	cbz	r2, 80153e4 <_dtoa_r+0x50c>
 8015390:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8015394:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8015398:	463e      	mov	r6, r7
 801539a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801539e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80153a2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80153a6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80153aa:	ee14 2a90 	vmov	r2, s9
 80153ae:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80153b2:	3230      	adds	r2, #48	@ 0x30
 80153b4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80153b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80153bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153c0:	f806 2b01 	strb.w	r2, [r6], #1
 80153c4:	d438      	bmi.n	8015438 <_dtoa_r+0x560>
 80153c6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80153ca:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80153ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153d2:	d46e      	bmi.n	80154b2 <_dtoa_r+0x5da>
 80153d4:	42a6      	cmp	r6, r4
 80153d6:	f43f af5a 	beq.w	801528e <_dtoa_r+0x3b6>
 80153da:	ee27 7b03 	vmul.f64	d7, d7, d3
 80153de:	ee26 6b03 	vmul.f64	d6, d6, d3
 80153e2:	e7e0      	b.n	80153a6 <_dtoa_r+0x4ce>
 80153e4:	4621      	mov	r1, r4
 80153e6:	463e      	mov	r6, r7
 80153e8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80153ec:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80153f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80153f4:	ee14 2a90 	vmov	r2, s9
 80153f8:	3230      	adds	r2, #48	@ 0x30
 80153fa:	f806 2b01 	strb.w	r2, [r6], #1
 80153fe:	42a6      	cmp	r6, r4
 8015400:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015404:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015408:	d119      	bne.n	801543e <_dtoa_r+0x566>
 801540a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801540e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015412:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801541a:	dc4a      	bgt.n	80154b2 <_dtoa_r+0x5da>
 801541c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8015420:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8015424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015428:	f57f af31 	bpl.w	801528e <_dtoa_r+0x3b6>
 801542c:	460e      	mov	r6, r1
 801542e:	3901      	subs	r1, #1
 8015430:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015434:	2b30      	cmp	r3, #48	@ 0x30
 8015436:	d0f9      	beq.n	801542c <_dtoa_r+0x554>
 8015438:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801543c:	e027      	b.n	801548e <_dtoa_r+0x5b6>
 801543e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015442:	e7d5      	b.n	80153f0 <_dtoa_r+0x518>
 8015444:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015448:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801544c:	463e      	mov	r6, r7
 801544e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015452:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015456:	ee15 3a10 	vmov	r3, s10
 801545a:	3330      	adds	r3, #48	@ 0x30
 801545c:	f806 3b01 	strb.w	r3, [r6], #1
 8015460:	1bf3      	subs	r3, r6, r7
 8015462:	459a      	cmp	sl, r3
 8015464:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015468:	eea3 7b46 	vfms.f64	d7, d3, d6
 801546c:	d132      	bne.n	80154d4 <_dtoa_r+0x5fc>
 801546e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015472:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801547a:	dc18      	bgt.n	80154ae <_dtoa_r+0x5d6>
 801547c:	eeb4 7b46 	vcmp.f64	d7, d6
 8015480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015484:	d103      	bne.n	801548e <_dtoa_r+0x5b6>
 8015486:	ee15 3a10 	vmov	r3, s10
 801548a:	07db      	lsls	r3, r3, #31
 801548c:	d40f      	bmi.n	80154ae <_dtoa_r+0x5d6>
 801548e:	9901      	ldr	r1, [sp, #4]
 8015490:	4648      	mov	r0, r9
 8015492:	f000 fb09 	bl	8015aa8 <_Bfree>
 8015496:	2300      	movs	r3, #0
 8015498:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801549a:	7033      	strb	r3, [r6, #0]
 801549c:	f108 0301 	add.w	r3, r8, #1
 80154a0:	6013      	str	r3, [r2, #0]
 80154a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	f000 824b 	beq.w	8015940 <_dtoa_r+0xa68>
 80154aa:	601e      	str	r6, [r3, #0]
 80154ac:	e248      	b.n	8015940 <_dtoa_r+0xa68>
 80154ae:	f8cd 8014 	str.w	r8, [sp, #20]
 80154b2:	4633      	mov	r3, r6
 80154b4:	461e      	mov	r6, r3
 80154b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80154ba:	2a39      	cmp	r2, #57	@ 0x39
 80154bc:	d106      	bne.n	80154cc <_dtoa_r+0x5f4>
 80154be:	429f      	cmp	r7, r3
 80154c0:	d1f8      	bne.n	80154b4 <_dtoa_r+0x5dc>
 80154c2:	9a05      	ldr	r2, [sp, #20]
 80154c4:	3201      	adds	r2, #1
 80154c6:	9205      	str	r2, [sp, #20]
 80154c8:	2230      	movs	r2, #48	@ 0x30
 80154ca:	703a      	strb	r2, [r7, #0]
 80154cc:	781a      	ldrb	r2, [r3, #0]
 80154ce:	3201      	adds	r2, #1
 80154d0:	701a      	strb	r2, [r3, #0]
 80154d2:	e7b1      	b.n	8015438 <_dtoa_r+0x560>
 80154d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80154d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80154dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154e0:	d1b5      	bne.n	801544e <_dtoa_r+0x576>
 80154e2:	e7d4      	b.n	801548e <_dtoa_r+0x5b6>
 80154e4:	08017200 	.word	0x08017200
 80154e8:	080171d8 	.word	0x080171d8
 80154ec:	9908      	ldr	r1, [sp, #32]
 80154ee:	2900      	cmp	r1, #0
 80154f0:	f000 80e9 	beq.w	80156c6 <_dtoa_r+0x7ee>
 80154f4:	9907      	ldr	r1, [sp, #28]
 80154f6:	2901      	cmp	r1, #1
 80154f8:	f300 80cb 	bgt.w	8015692 <_dtoa_r+0x7ba>
 80154fc:	2d00      	cmp	r5, #0
 80154fe:	f000 80c4 	beq.w	801568a <_dtoa_r+0x7b2>
 8015502:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8015506:	9e04      	ldr	r6, [sp, #16]
 8015508:	461c      	mov	r4, r3
 801550a:	9305      	str	r3, [sp, #20]
 801550c:	9b04      	ldr	r3, [sp, #16]
 801550e:	4413      	add	r3, r2
 8015510:	9304      	str	r3, [sp, #16]
 8015512:	9b06      	ldr	r3, [sp, #24]
 8015514:	2101      	movs	r1, #1
 8015516:	4413      	add	r3, r2
 8015518:	4648      	mov	r0, r9
 801551a:	9306      	str	r3, [sp, #24]
 801551c:	f000 fb78 	bl	8015c10 <__i2b>
 8015520:	9b05      	ldr	r3, [sp, #20]
 8015522:	4605      	mov	r5, r0
 8015524:	b166      	cbz	r6, 8015540 <_dtoa_r+0x668>
 8015526:	9a06      	ldr	r2, [sp, #24]
 8015528:	2a00      	cmp	r2, #0
 801552a:	dd09      	ble.n	8015540 <_dtoa_r+0x668>
 801552c:	42b2      	cmp	r2, r6
 801552e:	9904      	ldr	r1, [sp, #16]
 8015530:	bfa8      	it	ge
 8015532:	4632      	movge	r2, r6
 8015534:	1a89      	subs	r1, r1, r2
 8015536:	9104      	str	r1, [sp, #16]
 8015538:	9906      	ldr	r1, [sp, #24]
 801553a:	1ab6      	subs	r6, r6, r2
 801553c:	1a8a      	subs	r2, r1, r2
 801553e:	9206      	str	r2, [sp, #24]
 8015540:	b30b      	cbz	r3, 8015586 <_dtoa_r+0x6ae>
 8015542:	9a08      	ldr	r2, [sp, #32]
 8015544:	2a00      	cmp	r2, #0
 8015546:	f000 80c5 	beq.w	80156d4 <_dtoa_r+0x7fc>
 801554a:	2c00      	cmp	r4, #0
 801554c:	f000 80bf 	beq.w	80156ce <_dtoa_r+0x7f6>
 8015550:	4629      	mov	r1, r5
 8015552:	4622      	mov	r2, r4
 8015554:	4648      	mov	r0, r9
 8015556:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015558:	f000 fc12 	bl	8015d80 <__pow5mult>
 801555c:	9a01      	ldr	r2, [sp, #4]
 801555e:	4601      	mov	r1, r0
 8015560:	4605      	mov	r5, r0
 8015562:	4648      	mov	r0, r9
 8015564:	f000 fb6a 	bl	8015c3c <__multiply>
 8015568:	9901      	ldr	r1, [sp, #4]
 801556a:	9005      	str	r0, [sp, #20]
 801556c:	4648      	mov	r0, r9
 801556e:	f000 fa9b 	bl	8015aa8 <_Bfree>
 8015572:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015574:	1b1b      	subs	r3, r3, r4
 8015576:	f000 80b0 	beq.w	80156da <_dtoa_r+0x802>
 801557a:	9905      	ldr	r1, [sp, #20]
 801557c:	461a      	mov	r2, r3
 801557e:	4648      	mov	r0, r9
 8015580:	f000 fbfe 	bl	8015d80 <__pow5mult>
 8015584:	9001      	str	r0, [sp, #4]
 8015586:	2101      	movs	r1, #1
 8015588:	4648      	mov	r0, r9
 801558a:	f000 fb41 	bl	8015c10 <__i2b>
 801558e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015590:	4604      	mov	r4, r0
 8015592:	2b00      	cmp	r3, #0
 8015594:	f000 81da 	beq.w	801594c <_dtoa_r+0xa74>
 8015598:	461a      	mov	r2, r3
 801559a:	4601      	mov	r1, r0
 801559c:	4648      	mov	r0, r9
 801559e:	f000 fbef 	bl	8015d80 <__pow5mult>
 80155a2:	9b07      	ldr	r3, [sp, #28]
 80155a4:	2b01      	cmp	r3, #1
 80155a6:	4604      	mov	r4, r0
 80155a8:	f300 80a0 	bgt.w	80156ec <_dtoa_r+0x814>
 80155ac:	9b02      	ldr	r3, [sp, #8]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	f040 8096 	bne.w	80156e0 <_dtoa_r+0x808>
 80155b4:	9b03      	ldr	r3, [sp, #12]
 80155b6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80155ba:	2a00      	cmp	r2, #0
 80155bc:	f040 8092 	bne.w	80156e4 <_dtoa_r+0x80c>
 80155c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80155c4:	0d12      	lsrs	r2, r2, #20
 80155c6:	0512      	lsls	r2, r2, #20
 80155c8:	2a00      	cmp	r2, #0
 80155ca:	f000 808d 	beq.w	80156e8 <_dtoa_r+0x810>
 80155ce:	9b04      	ldr	r3, [sp, #16]
 80155d0:	3301      	adds	r3, #1
 80155d2:	9304      	str	r3, [sp, #16]
 80155d4:	9b06      	ldr	r3, [sp, #24]
 80155d6:	3301      	adds	r3, #1
 80155d8:	9306      	str	r3, [sp, #24]
 80155da:	2301      	movs	r3, #1
 80155dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80155de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	f000 81b9 	beq.w	8015958 <_dtoa_r+0xa80>
 80155e6:	6922      	ldr	r2, [r4, #16]
 80155e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80155ec:	6910      	ldr	r0, [r2, #16]
 80155ee:	f000 fac3 	bl	8015b78 <__hi0bits>
 80155f2:	f1c0 0020 	rsb	r0, r0, #32
 80155f6:	9b06      	ldr	r3, [sp, #24]
 80155f8:	4418      	add	r0, r3
 80155fa:	f010 001f 	ands.w	r0, r0, #31
 80155fe:	f000 8081 	beq.w	8015704 <_dtoa_r+0x82c>
 8015602:	f1c0 0220 	rsb	r2, r0, #32
 8015606:	2a04      	cmp	r2, #4
 8015608:	dd73      	ble.n	80156f2 <_dtoa_r+0x81a>
 801560a:	9b04      	ldr	r3, [sp, #16]
 801560c:	f1c0 001c 	rsb	r0, r0, #28
 8015610:	4403      	add	r3, r0
 8015612:	9304      	str	r3, [sp, #16]
 8015614:	9b06      	ldr	r3, [sp, #24]
 8015616:	4406      	add	r6, r0
 8015618:	4403      	add	r3, r0
 801561a:	9306      	str	r3, [sp, #24]
 801561c:	9b04      	ldr	r3, [sp, #16]
 801561e:	2b00      	cmp	r3, #0
 8015620:	dd05      	ble.n	801562e <_dtoa_r+0x756>
 8015622:	9901      	ldr	r1, [sp, #4]
 8015624:	461a      	mov	r2, r3
 8015626:	4648      	mov	r0, r9
 8015628:	f000 fc04 	bl	8015e34 <__lshift>
 801562c:	9001      	str	r0, [sp, #4]
 801562e:	9b06      	ldr	r3, [sp, #24]
 8015630:	2b00      	cmp	r3, #0
 8015632:	dd05      	ble.n	8015640 <_dtoa_r+0x768>
 8015634:	4621      	mov	r1, r4
 8015636:	461a      	mov	r2, r3
 8015638:	4648      	mov	r0, r9
 801563a:	f000 fbfb 	bl	8015e34 <__lshift>
 801563e:	4604      	mov	r4, r0
 8015640:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015642:	2b00      	cmp	r3, #0
 8015644:	d060      	beq.n	8015708 <_dtoa_r+0x830>
 8015646:	9801      	ldr	r0, [sp, #4]
 8015648:	4621      	mov	r1, r4
 801564a:	f000 fc5f 	bl	8015f0c <__mcmp>
 801564e:	2800      	cmp	r0, #0
 8015650:	da5a      	bge.n	8015708 <_dtoa_r+0x830>
 8015652:	f108 33ff 	add.w	r3, r8, #4294967295
 8015656:	9305      	str	r3, [sp, #20]
 8015658:	9901      	ldr	r1, [sp, #4]
 801565a:	2300      	movs	r3, #0
 801565c:	220a      	movs	r2, #10
 801565e:	4648      	mov	r0, r9
 8015660:	f000 fa44 	bl	8015aec <__multadd>
 8015664:	9b08      	ldr	r3, [sp, #32]
 8015666:	9001      	str	r0, [sp, #4]
 8015668:	2b00      	cmp	r3, #0
 801566a:	f000 8177 	beq.w	801595c <_dtoa_r+0xa84>
 801566e:	4629      	mov	r1, r5
 8015670:	2300      	movs	r3, #0
 8015672:	220a      	movs	r2, #10
 8015674:	4648      	mov	r0, r9
 8015676:	f000 fa39 	bl	8015aec <__multadd>
 801567a:	f1bb 0f00 	cmp.w	fp, #0
 801567e:	4605      	mov	r5, r0
 8015680:	dc6e      	bgt.n	8015760 <_dtoa_r+0x888>
 8015682:	9b07      	ldr	r3, [sp, #28]
 8015684:	2b02      	cmp	r3, #2
 8015686:	dc48      	bgt.n	801571a <_dtoa_r+0x842>
 8015688:	e06a      	b.n	8015760 <_dtoa_r+0x888>
 801568a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801568c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015690:	e739      	b.n	8015506 <_dtoa_r+0x62e>
 8015692:	f10a 34ff 	add.w	r4, sl, #4294967295
 8015696:	42a3      	cmp	r3, r4
 8015698:	db07      	blt.n	80156aa <_dtoa_r+0x7d2>
 801569a:	f1ba 0f00 	cmp.w	sl, #0
 801569e:	eba3 0404 	sub.w	r4, r3, r4
 80156a2:	db0b      	blt.n	80156bc <_dtoa_r+0x7e4>
 80156a4:	9e04      	ldr	r6, [sp, #16]
 80156a6:	4652      	mov	r2, sl
 80156a8:	e72f      	b.n	801550a <_dtoa_r+0x632>
 80156aa:	1ae2      	subs	r2, r4, r3
 80156ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80156ae:	9e04      	ldr	r6, [sp, #16]
 80156b0:	4413      	add	r3, r2
 80156b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80156b4:	4652      	mov	r2, sl
 80156b6:	4623      	mov	r3, r4
 80156b8:	2400      	movs	r4, #0
 80156ba:	e726      	b.n	801550a <_dtoa_r+0x632>
 80156bc:	9a04      	ldr	r2, [sp, #16]
 80156be:	eba2 060a 	sub.w	r6, r2, sl
 80156c2:	2200      	movs	r2, #0
 80156c4:	e721      	b.n	801550a <_dtoa_r+0x632>
 80156c6:	9e04      	ldr	r6, [sp, #16]
 80156c8:	9d08      	ldr	r5, [sp, #32]
 80156ca:	461c      	mov	r4, r3
 80156cc:	e72a      	b.n	8015524 <_dtoa_r+0x64c>
 80156ce:	9a01      	ldr	r2, [sp, #4]
 80156d0:	9205      	str	r2, [sp, #20]
 80156d2:	e752      	b.n	801557a <_dtoa_r+0x6a2>
 80156d4:	9901      	ldr	r1, [sp, #4]
 80156d6:	461a      	mov	r2, r3
 80156d8:	e751      	b.n	801557e <_dtoa_r+0x6a6>
 80156da:	9b05      	ldr	r3, [sp, #20]
 80156dc:	9301      	str	r3, [sp, #4]
 80156de:	e752      	b.n	8015586 <_dtoa_r+0x6ae>
 80156e0:	2300      	movs	r3, #0
 80156e2:	e77b      	b.n	80155dc <_dtoa_r+0x704>
 80156e4:	9b02      	ldr	r3, [sp, #8]
 80156e6:	e779      	b.n	80155dc <_dtoa_r+0x704>
 80156e8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80156ea:	e778      	b.n	80155de <_dtoa_r+0x706>
 80156ec:	2300      	movs	r3, #0
 80156ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80156f0:	e779      	b.n	80155e6 <_dtoa_r+0x70e>
 80156f2:	d093      	beq.n	801561c <_dtoa_r+0x744>
 80156f4:	9b04      	ldr	r3, [sp, #16]
 80156f6:	321c      	adds	r2, #28
 80156f8:	4413      	add	r3, r2
 80156fa:	9304      	str	r3, [sp, #16]
 80156fc:	9b06      	ldr	r3, [sp, #24]
 80156fe:	4416      	add	r6, r2
 8015700:	4413      	add	r3, r2
 8015702:	e78a      	b.n	801561a <_dtoa_r+0x742>
 8015704:	4602      	mov	r2, r0
 8015706:	e7f5      	b.n	80156f4 <_dtoa_r+0x81c>
 8015708:	f1ba 0f00 	cmp.w	sl, #0
 801570c:	f8cd 8014 	str.w	r8, [sp, #20]
 8015710:	46d3      	mov	fp, sl
 8015712:	dc21      	bgt.n	8015758 <_dtoa_r+0x880>
 8015714:	9b07      	ldr	r3, [sp, #28]
 8015716:	2b02      	cmp	r3, #2
 8015718:	dd1e      	ble.n	8015758 <_dtoa_r+0x880>
 801571a:	f1bb 0f00 	cmp.w	fp, #0
 801571e:	f47f addc 	bne.w	80152da <_dtoa_r+0x402>
 8015722:	4621      	mov	r1, r4
 8015724:	465b      	mov	r3, fp
 8015726:	2205      	movs	r2, #5
 8015728:	4648      	mov	r0, r9
 801572a:	f000 f9df 	bl	8015aec <__multadd>
 801572e:	4601      	mov	r1, r0
 8015730:	4604      	mov	r4, r0
 8015732:	9801      	ldr	r0, [sp, #4]
 8015734:	f000 fbea 	bl	8015f0c <__mcmp>
 8015738:	2800      	cmp	r0, #0
 801573a:	f77f adce 	ble.w	80152da <_dtoa_r+0x402>
 801573e:	463e      	mov	r6, r7
 8015740:	2331      	movs	r3, #49	@ 0x31
 8015742:	f806 3b01 	strb.w	r3, [r6], #1
 8015746:	9b05      	ldr	r3, [sp, #20]
 8015748:	3301      	adds	r3, #1
 801574a:	9305      	str	r3, [sp, #20]
 801574c:	e5c9      	b.n	80152e2 <_dtoa_r+0x40a>
 801574e:	f8cd 8014 	str.w	r8, [sp, #20]
 8015752:	4654      	mov	r4, sl
 8015754:	4625      	mov	r5, r4
 8015756:	e7f2      	b.n	801573e <_dtoa_r+0x866>
 8015758:	9b08      	ldr	r3, [sp, #32]
 801575a:	2b00      	cmp	r3, #0
 801575c:	f000 8102 	beq.w	8015964 <_dtoa_r+0xa8c>
 8015760:	2e00      	cmp	r6, #0
 8015762:	dd05      	ble.n	8015770 <_dtoa_r+0x898>
 8015764:	4629      	mov	r1, r5
 8015766:	4632      	mov	r2, r6
 8015768:	4648      	mov	r0, r9
 801576a:	f000 fb63 	bl	8015e34 <__lshift>
 801576e:	4605      	mov	r5, r0
 8015770:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015772:	2b00      	cmp	r3, #0
 8015774:	d058      	beq.n	8015828 <_dtoa_r+0x950>
 8015776:	6869      	ldr	r1, [r5, #4]
 8015778:	4648      	mov	r0, r9
 801577a:	f000 f955 	bl	8015a28 <_Balloc>
 801577e:	4606      	mov	r6, r0
 8015780:	b928      	cbnz	r0, 801578e <_dtoa_r+0x8b6>
 8015782:	4b82      	ldr	r3, [pc, #520]	@ (801598c <_dtoa_r+0xab4>)
 8015784:	4602      	mov	r2, r0
 8015786:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801578a:	f7ff bbbe 	b.w	8014f0a <_dtoa_r+0x32>
 801578e:	692a      	ldr	r2, [r5, #16]
 8015790:	3202      	adds	r2, #2
 8015792:	0092      	lsls	r2, r2, #2
 8015794:	f105 010c 	add.w	r1, r5, #12
 8015798:	300c      	adds	r0, #12
 801579a:	f7ff fae6 	bl	8014d6a <memcpy>
 801579e:	2201      	movs	r2, #1
 80157a0:	4631      	mov	r1, r6
 80157a2:	4648      	mov	r0, r9
 80157a4:	f000 fb46 	bl	8015e34 <__lshift>
 80157a8:	1c7b      	adds	r3, r7, #1
 80157aa:	9304      	str	r3, [sp, #16]
 80157ac:	eb07 030b 	add.w	r3, r7, fp
 80157b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80157b2:	9b02      	ldr	r3, [sp, #8]
 80157b4:	f003 0301 	and.w	r3, r3, #1
 80157b8:	46a8      	mov	r8, r5
 80157ba:	9308      	str	r3, [sp, #32]
 80157bc:	4605      	mov	r5, r0
 80157be:	9b04      	ldr	r3, [sp, #16]
 80157c0:	9801      	ldr	r0, [sp, #4]
 80157c2:	4621      	mov	r1, r4
 80157c4:	f103 3bff 	add.w	fp, r3, #4294967295
 80157c8:	f7ff fafc 	bl	8014dc4 <quorem>
 80157cc:	4641      	mov	r1, r8
 80157ce:	9002      	str	r0, [sp, #8]
 80157d0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80157d4:	9801      	ldr	r0, [sp, #4]
 80157d6:	f000 fb99 	bl	8015f0c <__mcmp>
 80157da:	462a      	mov	r2, r5
 80157dc:	9006      	str	r0, [sp, #24]
 80157de:	4621      	mov	r1, r4
 80157e0:	4648      	mov	r0, r9
 80157e2:	f000 fbaf 	bl	8015f44 <__mdiff>
 80157e6:	68c2      	ldr	r2, [r0, #12]
 80157e8:	4606      	mov	r6, r0
 80157ea:	b9fa      	cbnz	r2, 801582c <_dtoa_r+0x954>
 80157ec:	4601      	mov	r1, r0
 80157ee:	9801      	ldr	r0, [sp, #4]
 80157f0:	f000 fb8c 	bl	8015f0c <__mcmp>
 80157f4:	4602      	mov	r2, r0
 80157f6:	4631      	mov	r1, r6
 80157f8:	4648      	mov	r0, r9
 80157fa:	920a      	str	r2, [sp, #40]	@ 0x28
 80157fc:	f000 f954 	bl	8015aa8 <_Bfree>
 8015800:	9b07      	ldr	r3, [sp, #28]
 8015802:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015804:	9e04      	ldr	r6, [sp, #16]
 8015806:	ea42 0103 	orr.w	r1, r2, r3
 801580a:	9b08      	ldr	r3, [sp, #32]
 801580c:	4319      	orrs	r1, r3
 801580e:	d10f      	bne.n	8015830 <_dtoa_r+0x958>
 8015810:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015814:	d028      	beq.n	8015868 <_dtoa_r+0x990>
 8015816:	9b06      	ldr	r3, [sp, #24]
 8015818:	2b00      	cmp	r3, #0
 801581a:	dd02      	ble.n	8015822 <_dtoa_r+0x94a>
 801581c:	9b02      	ldr	r3, [sp, #8]
 801581e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8015822:	f88b a000 	strb.w	sl, [fp]
 8015826:	e55e      	b.n	80152e6 <_dtoa_r+0x40e>
 8015828:	4628      	mov	r0, r5
 801582a:	e7bd      	b.n	80157a8 <_dtoa_r+0x8d0>
 801582c:	2201      	movs	r2, #1
 801582e:	e7e2      	b.n	80157f6 <_dtoa_r+0x91e>
 8015830:	9b06      	ldr	r3, [sp, #24]
 8015832:	2b00      	cmp	r3, #0
 8015834:	db04      	blt.n	8015840 <_dtoa_r+0x968>
 8015836:	9907      	ldr	r1, [sp, #28]
 8015838:	430b      	orrs	r3, r1
 801583a:	9908      	ldr	r1, [sp, #32]
 801583c:	430b      	orrs	r3, r1
 801583e:	d120      	bne.n	8015882 <_dtoa_r+0x9aa>
 8015840:	2a00      	cmp	r2, #0
 8015842:	ddee      	ble.n	8015822 <_dtoa_r+0x94a>
 8015844:	9901      	ldr	r1, [sp, #4]
 8015846:	2201      	movs	r2, #1
 8015848:	4648      	mov	r0, r9
 801584a:	f000 faf3 	bl	8015e34 <__lshift>
 801584e:	4621      	mov	r1, r4
 8015850:	9001      	str	r0, [sp, #4]
 8015852:	f000 fb5b 	bl	8015f0c <__mcmp>
 8015856:	2800      	cmp	r0, #0
 8015858:	dc03      	bgt.n	8015862 <_dtoa_r+0x98a>
 801585a:	d1e2      	bne.n	8015822 <_dtoa_r+0x94a>
 801585c:	f01a 0f01 	tst.w	sl, #1
 8015860:	d0df      	beq.n	8015822 <_dtoa_r+0x94a>
 8015862:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015866:	d1d9      	bne.n	801581c <_dtoa_r+0x944>
 8015868:	2339      	movs	r3, #57	@ 0x39
 801586a:	f88b 3000 	strb.w	r3, [fp]
 801586e:	4633      	mov	r3, r6
 8015870:	461e      	mov	r6, r3
 8015872:	3b01      	subs	r3, #1
 8015874:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015878:	2a39      	cmp	r2, #57	@ 0x39
 801587a:	d052      	beq.n	8015922 <_dtoa_r+0xa4a>
 801587c:	3201      	adds	r2, #1
 801587e:	701a      	strb	r2, [r3, #0]
 8015880:	e531      	b.n	80152e6 <_dtoa_r+0x40e>
 8015882:	2a00      	cmp	r2, #0
 8015884:	dd07      	ble.n	8015896 <_dtoa_r+0x9be>
 8015886:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801588a:	d0ed      	beq.n	8015868 <_dtoa_r+0x990>
 801588c:	f10a 0301 	add.w	r3, sl, #1
 8015890:	f88b 3000 	strb.w	r3, [fp]
 8015894:	e527      	b.n	80152e6 <_dtoa_r+0x40e>
 8015896:	9b04      	ldr	r3, [sp, #16]
 8015898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801589a:	f803 ac01 	strb.w	sl, [r3, #-1]
 801589e:	4293      	cmp	r3, r2
 80158a0:	d029      	beq.n	80158f6 <_dtoa_r+0xa1e>
 80158a2:	9901      	ldr	r1, [sp, #4]
 80158a4:	2300      	movs	r3, #0
 80158a6:	220a      	movs	r2, #10
 80158a8:	4648      	mov	r0, r9
 80158aa:	f000 f91f 	bl	8015aec <__multadd>
 80158ae:	45a8      	cmp	r8, r5
 80158b0:	9001      	str	r0, [sp, #4]
 80158b2:	f04f 0300 	mov.w	r3, #0
 80158b6:	f04f 020a 	mov.w	r2, #10
 80158ba:	4641      	mov	r1, r8
 80158bc:	4648      	mov	r0, r9
 80158be:	d107      	bne.n	80158d0 <_dtoa_r+0x9f8>
 80158c0:	f000 f914 	bl	8015aec <__multadd>
 80158c4:	4680      	mov	r8, r0
 80158c6:	4605      	mov	r5, r0
 80158c8:	9b04      	ldr	r3, [sp, #16]
 80158ca:	3301      	adds	r3, #1
 80158cc:	9304      	str	r3, [sp, #16]
 80158ce:	e776      	b.n	80157be <_dtoa_r+0x8e6>
 80158d0:	f000 f90c 	bl	8015aec <__multadd>
 80158d4:	4629      	mov	r1, r5
 80158d6:	4680      	mov	r8, r0
 80158d8:	2300      	movs	r3, #0
 80158da:	220a      	movs	r2, #10
 80158dc:	4648      	mov	r0, r9
 80158de:	f000 f905 	bl	8015aec <__multadd>
 80158e2:	4605      	mov	r5, r0
 80158e4:	e7f0      	b.n	80158c8 <_dtoa_r+0x9f0>
 80158e6:	f1bb 0f00 	cmp.w	fp, #0
 80158ea:	bfcc      	ite	gt
 80158ec:	465e      	movgt	r6, fp
 80158ee:	2601      	movle	r6, #1
 80158f0:	443e      	add	r6, r7
 80158f2:	f04f 0800 	mov.w	r8, #0
 80158f6:	9901      	ldr	r1, [sp, #4]
 80158f8:	2201      	movs	r2, #1
 80158fa:	4648      	mov	r0, r9
 80158fc:	f000 fa9a 	bl	8015e34 <__lshift>
 8015900:	4621      	mov	r1, r4
 8015902:	9001      	str	r0, [sp, #4]
 8015904:	f000 fb02 	bl	8015f0c <__mcmp>
 8015908:	2800      	cmp	r0, #0
 801590a:	dcb0      	bgt.n	801586e <_dtoa_r+0x996>
 801590c:	d102      	bne.n	8015914 <_dtoa_r+0xa3c>
 801590e:	f01a 0f01 	tst.w	sl, #1
 8015912:	d1ac      	bne.n	801586e <_dtoa_r+0x996>
 8015914:	4633      	mov	r3, r6
 8015916:	461e      	mov	r6, r3
 8015918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801591c:	2a30      	cmp	r2, #48	@ 0x30
 801591e:	d0fa      	beq.n	8015916 <_dtoa_r+0xa3e>
 8015920:	e4e1      	b.n	80152e6 <_dtoa_r+0x40e>
 8015922:	429f      	cmp	r7, r3
 8015924:	d1a4      	bne.n	8015870 <_dtoa_r+0x998>
 8015926:	9b05      	ldr	r3, [sp, #20]
 8015928:	3301      	adds	r3, #1
 801592a:	9305      	str	r3, [sp, #20]
 801592c:	2331      	movs	r3, #49	@ 0x31
 801592e:	703b      	strb	r3, [r7, #0]
 8015930:	e4d9      	b.n	80152e6 <_dtoa_r+0x40e>
 8015932:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015934:	4f16      	ldr	r7, [pc, #88]	@ (8015990 <_dtoa_r+0xab8>)
 8015936:	b11b      	cbz	r3, 8015940 <_dtoa_r+0xa68>
 8015938:	f107 0308 	add.w	r3, r7, #8
 801593c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801593e:	6013      	str	r3, [r2, #0]
 8015940:	4638      	mov	r0, r7
 8015942:	b011      	add	sp, #68	@ 0x44
 8015944:	ecbd 8b02 	vpop	{d8}
 8015948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801594c:	9b07      	ldr	r3, [sp, #28]
 801594e:	2b01      	cmp	r3, #1
 8015950:	f77f ae2c 	ble.w	80155ac <_dtoa_r+0x6d4>
 8015954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015956:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015958:	2001      	movs	r0, #1
 801595a:	e64c      	b.n	80155f6 <_dtoa_r+0x71e>
 801595c:	f1bb 0f00 	cmp.w	fp, #0
 8015960:	f77f aed8 	ble.w	8015714 <_dtoa_r+0x83c>
 8015964:	463e      	mov	r6, r7
 8015966:	9801      	ldr	r0, [sp, #4]
 8015968:	4621      	mov	r1, r4
 801596a:	f7ff fa2b 	bl	8014dc4 <quorem>
 801596e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8015972:	f806 ab01 	strb.w	sl, [r6], #1
 8015976:	1bf2      	subs	r2, r6, r7
 8015978:	4593      	cmp	fp, r2
 801597a:	ddb4      	ble.n	80158e6 <_dtoa_r+0xa0e>
 801597c:	9901      	ldr	r1, [sp, #4]
 801597e:	2300      	movs	r3, #0
 8015980:	220a      	movs	r2, #10
 8015982:	4648      	mov	r0, r9
 8015984:	f000 f8b2 	bl	8015aec <__multadd>
 8015988:	9001      	str	r0, [sp, #4]
 801598a:	e7ec      	b.n	8015966 <_dtoa_r+0xa8e>
 801598c:	08017140 	.word	0x08017140
 8015990:	080170c4 	.word	0x080170c4

08015994 <_free_r>:
 8015994:	b538      	push	{r3, r4, r5, lr}
 8015996:	4605      	mov	r5, r0
 8015998:	2900      	cmp	r1, #0
 801599a:	d041      	beq.n	8015a20 <_free_r+0x8c>
 801599c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80159a0:	1f0c      	subs	r4, r1, #4
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	bfb8      	it	lt
 80159a6:	18e4      	addlt	r4, r4, r3
 80159a8:	f7fe fbe8 	bl	801417c <__malloc_lock>
 80159ac:	4a1d      	ldr	r2, [pc, #116]	@ (8015a24 <_free_r+0x90>)
 80159ae:	6813      	ldr	r3, [r2, #0]
 80159b0:	b933      	cbnz	r3, 80159c0 <_free_r+0x2c>
 80159b2:	6063      	str	r3, [r4, #4]
 80159b4:	6014      	str	r4, [r2, #0]
 80159b6:	4628      	mov	r0, r5
 80159b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159bc:	f7fe bbe4 	b.w	8014188 <__malloc_unlock>
 80159c0:	42a3      	cmp	r3, r4
 80159c2:	d908      	bls.n	80159d6 <_free_r+0x42>
 80159c4:	6820      	ldr	r0, [r4, #0]
 80159c6:	1821      	adds	r1, r4, r0
 80159c8:	428b      	cmp	r3, r1
 80159ca:	bf01      	itttt	eq
 80159cc:	6819      	ldreq	r1, [r3, #0]
 80159ce:	685b      	ldreq	r3, [r3, #4]
 80159d0:	1809      	addeq	r1, r1, r0
 80159d2:	6021      	streq	r1, [r4, #0]
 80159d4:	e7ed      	b.n	80159b2 <_free_r+0x1e>
 80159d6:	461a      	mov	r2, r3
 80159d8:	685b      	ldr	r3, [r3, #4]
 80159da:	b10b      	cbz	r3, 80159e0 <_free_r+0x4c>
 80159dc:	42a3      	cmp	r3, r4
 80159de:	d9fa      	bls.n	80159d6 <_free_r+0x42>
 80159e0:	6811      	ldr	r1, [r2, #0]
 80159e2:	1850      	adds	r0, r2, r1
 80159e4:	42a0      	cmp	r0, r4
 80159e6:	d10b      	bne.n	8015a00 <_free_r+0x6c>
 80159e8:	6820      	ldr	r0, [r4, #0]
 80159ea:	4401      	add	r1, r0
 80159ec:	1850      	adds	r0, r2, r1
 80159ee:	4283      	cmp	r3, r0
 80159f0:	6011      	str	r1, [r2, #0]
 80159f2:	d1e0      	bne.n	80159b6 <_free_r+0x22>
 80159f4:	6818      	ldr	r0, [r3, #0]
 80159f6:	685b      	ldr	r3, [r3, #4]
 80159f8:	6053      	str	r3, [r2, #4]
 80159fa:	4408      	add	r0, r1
 80159fc:	6010      	str	r0, [r2, #0]
 80159fe:	e7da      	b.n	80159b6 <_free_r+0x22>
 8015a00:	d902      	bls.n	8015a08 <_free_r+0x74>
 8015a02:	230c      	movs	r3, #12
 8015a04:	602b      	str	r3, [r5, #0]
 8015a06:	e7d6      	b.n	80159b6 <_free_r+0x22>
 8015a08:	6820      	ldr	r0, [r4, #0]
 8015a0a:	1821      	adds	r1, r4, r0
 8015a0c:	428b      	cmp	r3, r1
 8015a0e:	bf04      	itt	eq
 8015a10:	6819      	ldreq	r1, [r3, #0]
 8015a12:	685b      	ldreq	r3, [r3, #4]
 8015a14:	6063      	str	r3, [r4, #4]
 8015a16:	bf04      	itt	eq
 8015a18:	1809      	addeq	r1, r1, r0
 8015a1a:	6021      	streq	r1, [r4, #0]
 8015a1c:	6054      	str	r4, [r2, #4]
 8015a1e:	e7ca      	b.n	80159b6 <_free_r+0x22>
 8015a20:	bd38      	pop	{r3, r4, r5, pc}
 8015a22:	bf00      	nop
 8015a24:	240278f8 	.word	0x240278f8

08015a28 <_Balloc>:
 8015a28:	b570      	push	{r4, r5, r6, lr}
 8015a2a:	69c6      	ldr	r6, [r0, #28]
 8015a2c:	4604      	mov	r4, r0
 8015a2e:	460d      	mov	r5, r1
 8015a30:	b976      	cbnz	r6, 8015a50 <_Balloc+0x28>
 8015a32:	2010      	movs	r0, #16
 8015a34:	f7fe faf8 	bl	8014028 <malloc>
 8015a38:	4602      	mov	r2, r0
 8015a3a:	61e0      	str	r0, [r4, #28]
 8015a3c:	b920      	cbnz	r0, 8015a48 <_Balloc+0x20>
 8015a3e:	4b18      	ldr	r3, [pc, #96]	@ (8015aa0 <_Balloc+0x78>)
 8015a40:	4818      	ldr	r0, [pc, #96]	@ (8015aa4 <_Balloc+0x7c>)
 8015a42:	216b      	movs	r1, #107	@ 0x6b
 8015a44:	f7ff f9a0 	bl	8014d88 <__assert_func>
 8015a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015a4c:	6006      	str	r6, [r0, #0]
 8015a4e:	60c6      	str	r6, [r0, #12]
 8015a50:	69e6      	ldr	r6, [r4, #28]
 8015a52:	68f3      	ldr	r3, [r6, #12]
 8015a54:	b183      	cbz	r3, 8015a78 <_Balloc+0x50>
 8015a56:	69e3      	ldr	r3, [r4, #28]
 8015a58:	68db      	ldr	r3, [r3, #12]
 8015a5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015a5e:	b9b8      	cbnz	r0, 8015a90 <_Balloc+0x68>
 8015a60:	2101      	movs	r1, #1
 8015a62:	fa01 f605 	lsl.w	r6, r1, r5
 8015a66:	1d72      	adds	r2, r6, #5
 8015a68:	0092      	lsls	r2, r2, #2
 8015a6a:	4620      	mov	r0, r4
 8015a6c:	f000 fd8d 	bl	801658a <_calloc_r>
 8015a70:	b160      	cbz	r0, 8015a8c <_Balloc+0x64>
 8015a72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015a76:	e00e      	b.n	8015a96 <_Balloc+0x6e>
 8015a78:	2221      	movs	r2, #33	@ 0x21
 8015a7a:	2104      	movs	r1, #4
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	f000 fd84 	bl	801658a <_calloc_r>
 8015a82:	69e3      	ldr	r3, [r4, #28]
 8015a84:	60f0      	str	r0, [r6, #12]
 8015a86:	68db      	ldr	r3, [r3, #12]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d1e4      	bne.n	8015a56 <_Balloc+0x2e>
 8015a8c:	2000      	movs	r0, #0
 8015a8e:	bd70      	pop	{r4, r5, r6, pc}
 8015a90:	6802      	ldr	r2, [r0, #0]
 8015a92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015a96:	2300      	movs	r3, #0
 8015a98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015a9c:	e7f7      	b.n	8015a8e <_Balloc+0x66>
 8015a9e:	bf00      	nop
 8015aa0:	080170d1 	.word	0x080170d1
 8015aa4:	08017151 	.word	0x08017151

08015aa8 <_Bfree>:
 8015aa8:	b570      	push	{r4, r5, r6, lr}
 8015aaa:	69c6      	ldr	r6, [r0, #28]
 8015aac:	4605      	mov	r5, r0
 8015aae:	460c      	mov	r4, r1
 8015ab0:	b976      	cbnz	r6, 8015ad0 <_Bfree+0x28>
 8015ab2:	2010      	movs	r0, #16
 8015ab4:	f7fe fab8 	bl	8014028 <malloc>
 8015ab8:	4602      	mov	r2, r0
 8015aba:	61e8      	str	r0, [r5, #28]
 8015abc:	b920      	cbnz	r0, 8015ac8 <_Bfree+0x20>
 8015abe:	4b09      	ldr	r3, [pc, #36]	@ (8015ae4 <_Bfree+0x3c>)
 8015ac0:	4809      	ldr	r0, [pc, #36]	@ (8015ae8 <_Bfree+0x40>)
 8015ac2:	218f      	movs	r1, #143	@ 0x8f
 8015ac4:	f7ff f960 	bl	8014d88 <__assert_func>
 8015ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015acc:	6006      	str	r6, [r0, #0]
 8015ace:	60c6      	str	r6, [r0, #12]
 8015ad0:	b13c      	cbz	r4, 8015ae2 <_Bfree+0x3a>
 8015ad2:	69eb      	ldr	r3, [r5, #28]
 8015ad4:	6862      	ldr	r2, [r4, #4]
 8015ad6:	68db      	ldr	r3, [r3, #12]
 8015ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015adc:	6021      	str	r1, [r4, #0]
 8015ade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015ae2:	bd70      	pop	{r4, r5, r6, pc}
 8015ae4:	080170d1 	.word	0x080170d1
 8015ae8:	08017151 	.word	0x08017151

08015aec <__multadd>:
 8015aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015af0:	690d      	ldr	r5, [r1, #16]
 8015af2:	4607      	mov	r7, r0
 8015af4:	460c      	mov	r4, r1
 8015af6:	461e      	mov	r6, r3
 8015af8:	f101 0c14 	add.w	ip, r1, #20
 8015afc:	2000      	movs	r0, #0
 8015afe:	f8dc 3000 	ldr.w	r3, [ip]
 8015b02:	b299      	uxth	r1, r3
 8015b04:	fb02 6101 	mla	r1, r2, r1, r6
 8015b08:	0c1e      	lsrs	r6, r3, #16
 8015b0a:	0c0b      	lsrs	r3, r1, #16
 8015b0c:	fb02 3306 	mla	r3, r2, r6, r3
 8015b10:	b289      	uxth	r1, r1
 8015b12:	3001      	adds	r0, #1
 8015b14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015b18:	4285      	cmp	r5, r0
 8015b1a:	f84c 1b04 	str.w	r1, [ip], #4
 8015b1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015b22:	dcec      	bgt.n	8015afe <__multadd+0x12>
 8015b24:	b30e      	cbz	r6, 8015b6a <__multadd+0x7e>
 8015b26:	68a3      	ldr	r3, [r4, #8]
 8015b28:	42ab      	cmp	r3, r5
 8015b2a:	dc19      	bgt.n	8015b60 <__multadd+0x74>
 8015b2c:	6861      	ldr	r1, [r4, #4]
 8015b2e:	4638      	mov	r0, r7
 8015b30:	3101      	adds	r1, #1
 8015b32:	f7ff ff79 	bl	8015a28 <_Balloc>
 8015b36:	4680      	mov	r8, r0
 8015b38:	b928      	cbnz	r0, 8015b46 <__multadd+0x5a>
 8015b3a:	4602      	mov	r2, r0
 8015b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8015b70 <__multadd+0x84>)
 8015b3e:	480d      	ldr	r0, [pc, #52]	@ (8015b74 <__multadd+0x88>)
 8015b40:	21ba      	movs	r1, #186	@ 0xba
 8015b42:	f7ff f921 	bl	8014d88 <__assert_func>
 8015b46:	6922      	ldr	r2, [r4, #16]
 8015b48:	3202      	adds	r2, #2
 8015b4a:	f104 010c 	add.w	r1, r4, #12
 8015b4e:	0092      	lsls	r2, r2, #2
 8015b50:	300c      	adds	r0, #12
 8015b52:	f7ff f90a 	bl	8014d6a <memcpy>
 8015b56:	4621      	mov	r1, r4
 8015b58:	4638      	mov	r0, r7
 8015b5a:	f7ff ffa5 	bl	8015aa8 <_Bfree>
 8015b5e:	4644      	mov	r4, r8
 8015b60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015b64:	3501      	adds	r5, #1
 8015b66:	615e      	str	r6, [r3, #20]
 8015b68:	6125      	str	r5, [r4, #16]
 8015b6a:	4620      	mov	r0, r4
 8015b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b70:	08017140 	.word	0x08017140
 8015b74:	08017151 	.word	0x08017151

08015b78 <__hi0bits>:
 8015b78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	bf36      	itet	cc
 8015b80:	0403      	lslcc	r3, r0, #16
 8015b82:	2000      	movcs	r0, #0
 8015b84:	2010      	movcc	r0, #16
 8015b86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015b8a:	bf3c      	itt	cc
 8015b8c:	021b      	lslcc	r3, r3, #8
 8015b8e:	3008      	addcc	r0, #8
 8015b90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015b94:	bf3c      	itt	cc
 8015b96:	011b      	lslcc	r3, r3, #4
 8015b98:	3004      	addcc	r0, #4
 8015b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015b9e:	bf3c      	itt	cc
 8015ba0:	009b      	lslcc	r3, r3, #2
 8015ba2:	3002      	addcc	r0, #2
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	db05      	blt.n	8015bb4 <__hi0bits+0x3c>
 8015ba8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015bac:	f100 0001 	add.w	r0, r0, #1
 8015bb0:	bf08      	it	eq
 8015bb2:	2020      	moveq	r0, #32
 8015bb4:	4770      	bx	lr

08015bb6 <__lo0bits>:
 8015bb6:	6803      	ldr	r3, [r0, #0]
 8015bb8:	4602      	mov	r2, r0
 8015bba:	f013 0007 	ands.w	r0, r3, #7
 8015bbe:	d00b      	beq.n	8015bd8 <__lo0bits+0x22>
 8015bc0:	07d9      	lsls	r1, r3, #31
 8015bc2:	d421      	bmi.n	8015c08 <__lo0bits+0x52>
 8015bc4:	0798      	lsls	r0, r3, #30
 8015bc6:	bf49      	itett	mi
 8015bc8:	085b      	lsrmi	r3, r3, #1
 8015bca:	089b      	lsrpl	r3, r3, #2
 8015bcc:	2001      	movmi	r0, #1
 8015bce:	6013      	strmi	r3, [r2, #0]
 8015bd0:	bf5c      	itt	pl
 8015bd2:	6013      	strpl	r3, [r2, #0]
 8015bd4:	2002      	movpl	r0, #2
 8015bd6:	4770      	bx	lr
 8015bd8:	b299      	uxth	r1, r3
 8015bda:	b909      	cbnz	r1, 8015be0 <__lo0bits+0x2a>
 8015bdc:	0c1b      	lsrs	r3, r3, #16
 8015bde:	2010      	movs	r0, #16
 8015be0:	b2d9      	uxtb	r1, r3
 8015be2:	b909      	cbnz	r1, 8015be8 <__lo0bits+0x32>
 8015be4:	3008      	adds	r0, #8
 8015be6:	0a1b      	lsrs	r3, r3, #8
 8015be8:	0719      	lsls	r1, r3, #28
 8015bea:	bf04      	itt	eq
 8015bec:	091b      	lsreq	r3, r3, #4
 8015bee:	3004      	addeq	r0, #4
 8015bf0:	0799      	lsls	r1, r3, #30
 8015bf2:	bf04      	itt	eq
 8015bf4:	089b      	lsreq	r3, r3, #2
 8015bf6:	3002      	addeq	r0, #2
 8015bf8:	07d9      	lsls	r1, r3, #31
 8015bfa:	d403      	bmi.n	8015c04 <__lo0bits+0x4e>
 8015bfc:	085b      	lsrs	r3, r3, #1
 8015bfe:	f100 0001 	add.w	r0, r0, #1
 8015c02:	d003      	beq.n	8015c0c <__lo0bits+0x56>
 8015c04:	6013      	str	r3, [r2, #0]
 8015c06:	4770      	bx	lr
 8015c08:	2000      	movs	r0, #0
 8015c0a:	4770      	bx	lr
 8015c0c:	2020      	movs	r0, #32
 8015c0e:	4770      	bx	lr

08015c10 <__i2b>:
 8015c10:	b510      	push	{r4, lr}
 8015c12:	460c      	mov	r4, r1
 8015c14:	2101      	movs	r1, #1
 8015c16:	f7ff ff07 	bl	8015a28 <_Balloc>
 8015c1a:	4602      	mov	r2, r0
 8015c1c:	b928      	cbnz	r0, 8015c2a <__i2b+0x1a>
 8015c1e:	4b05      	ldr	r3, [pc, #20]	@ (8015c34 <__i2b+0x24>)
 8015c20:	4805      	ldr	r0, [pc, #20]	@ (8015c38 <__i2b+0x28>)
 8015c22:	f240 1145 	movw	r1, #325	@ 0x145
 8015c26:	f7ff f8af 	bl	8014d88 <__assert_func>
 8015c2a:	2301      	movs	r3, #1
 8015c2c:	6144      	str	r4, [r0, #20]
 8015c2e:	6103      	str	r3, [r0, #16]
 8015c30:	bd10      	pop	{r4, pc}
 8015c32:	bf00      	nop
 8015c34:	08017140 	.word	0x08017140
 8015c38:	08017151 	.word	0x08017151

08015c3c <__multiply>:
 8015c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c40:	4617      	mov	r7, r2
 8015c42:	690a      	ldr	r2, [r1, #16]
 8015c44:	693b      	ldr	r3, [r7, #16]
 8015c46:	429a      	cmp	r2, r3
 8015c48:	bfa8      	it	ge
 8015c4a:	463b      	movge	r3, r7
 8015c4c:	4689      	mov	r9, r1
 8015c4e:	bfa4      	itt	ge
 8015c50:	460f      	movge	r7, r1
 8015c52:	4699      	movge	r9, r3
 8015c54:	693d      	ldr	r5, [r7, #16]
 8015c56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015c5a:	68bb      	ldr	r3, [r7, #8]
 8015c5c:	6879      	ldr	r1, [r7, #4]
 8015c5e:	eb05 060a 	add.w	r6, r5, sl
 8015c62:	42b3      	cmp	r3, r6
 8015c64:	b085      	sub	sp, #20
 8015c66:	bfb8      	it	lt
 8015c68:	3101      	addlt	r1, #1
 8015c6a:	f7ff fedd 	bl	8015a28 <_Balloc>
 8015c6e:	b930      	cbnz	r0, 8015c7e <__multiply+0x42>
 8015c70:	4602      	mov	r2, r0
 8015c72:	4b41      	ldr	r3, [pc, #260]	@ (8015d78 <__multiply+0x13c>)
 8015c74:	4841      	ldr	r0, [pc, #260]	@ (8015d7c <__multiply+0x140>)
 8015c76:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015c7a:	f7ff f885 	bl	8014d88 <__assert_func>
 8015c7e:	f100 0414 	add.w	r4, r0, #20
 8015c82:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8015c86:	4623      	mov	r3, r4
 8015c88:	2200      	movs	r2, #0
 8015c8a:	4573      	cmp	r3, lr
 8015c8c:	d320      	bcc.n	8015cd0 <__multiply+0x94>
 8015c8e:	f107 0814 	add.w	r8, r7, #20
 8015c92:	f109 0114 	add.w	r1, r9, #20
 8015c96:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8015c9a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8015c9e:	9302      	str	r3, [sp, #8]
 8015ca0:	1beb      	subs	r3, r5, r7
 8015ca2:	3b15      	subs	r3, #21
 8015ca4:	f023 0303 	bic.w	r3, r3, #3
 8015ca8:	3304      	adds	r3, #4
 8015caa:	3715      	adds	r7, #21
 8015cac:	42bd      	cmp	r5, r7
 8015cae:	bf38      	it	cc
 8015cb0:	2304      	movcc	r3, #4
 8015cb2:	9301      	str	r3, [sp, #4]
 8015cb4:	9b02      	ldr	r3, [sp, #8]
 8015cb6:	9103      	str	r1, [sp, #12]
 8015cb8:	428b      	cmp	r3, r1
 8015cba:	d80c      	bhi.n	8015cd6 <__multiply+0x9a>
 8015cbc:	2e00      	cmp	r6, #0
 8015cbe:	dd03      	ble.n	8015cc8 <__multiply+0x8c>
 8015cc0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d055      	beq.n	8015d74 <__multiply+0x138>
 8015cc8:	6106      	str	r6, [r0, #16]
 8015cca:	b005      	add	sp, #20
 8015ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cd0:	f843 2b04 	str.w	r2, [r3], #4
 8015cd4:	e7d9      	b.n	8015c8a <__multiply+0x4e>
 8015cd6:	f8b1 a000 	ldrh.w	sl, [r1]
 8015cda:	f1ba 0f00 	cmp.w	sl, #0
 8015cde:	d01f      	beq.n	8015d20 <__multiply+0xe4>
 8015ce0:	46c4      	mov	ip, r8
 8015ce2:	46a1      	mov	r9, r4
 8015ce4:	2700      	movs	r7, #0
 8015ce6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015cea:	f8d9 3000 	ldr.w	r3, [r9]
 8015cee:	fa1f fb82 	uxth.w	fp, r2
 8015cf2:	b29b      	uxth	r3, r3
 8015cf4:	fb0a 330b 	mla	r3, sl, fp, r3
 8015cf8:	443b      	add	r3, r7
 8015cfa:	f8d9 7000 	ldr.w	r7, [r9]
 8015cfe:	0c12      	lsrs	r2, r2, #16
 8015d00:	0c3f      	lsrs	r7, r7, #16
 8015d02:	fb0a 7202 	mla	r2, sl, r2, r7
 8015d06:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8015d0a:	b29b      	uxth	r3, r3
 8015d0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015d10:	4565      	cmp	r5, ip
 8015d12:	f849 3b04 	str.w	r3, [r9], #4
 8015d16:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8015d1a:	d8e4      	bhi.n	8015ce6 <__multiply+0xaa>
 8015d1c:	9b01      	ldr	r3, [sp, #4]
 8015d1e:	50e7      	str	r7, [r4, r3]
 8015d20:	9b03      	ldr	r3, [sp, #12]
 8015d22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015d26:	3104      	adds	r1, #4
 8015d28:	f1b9 0f00 	cmp.w	r9, #0
 8015d2c:	d020      	beq.n	8015d70 <__multiply+0x134>
 8015d2e:	6823      	ldr	r3, [r4, #0]
 8015d30:	4647      	mov	r7, r8
 8015d32:	46a4      	mov	ip, r4
 8015d34:	f04f 0a00 	mov.w	sl, #0
 8015d38:	f8b7 b000 	ldrh.w	fp, [r7]
 8015d3c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8015d40:	fb09 220b 	mla	r2, r9, fp, r2
 8015d44:	4452      	add	r2, sl
 8015d46:	b29b      	uxth	r3, r3
 8015d48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015d4c:	f84c 3b04 	str.w	r3, [ip], #4
 8015d50:	f857 3b04 	ldr.w	r3, [r7], #4
 8015d54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015d58:	f8bc 3000 	ldrh.w	r3, [ip]
 8015d5c:	fb09 330a 	mla	r3, r9, sl, r3
 8015d60:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8015d64:	42bd      	cmp	r5, r7
 8015d66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015d6a:	d8e5      	bhi.n	8015d38 <__multiply+0xfc>
 8015d6c:	9a01      	ldr	r2, [sp, #4]
 8015d6e:	50a3      	str	r3, [r4, r2]
 8015d70:	3404      	adds	r4, #4
 8015d72:	e79f      	b.n	8015cb4 <__multiply+0x78>
 8015d74:	3e01      	subs	r6, #1
 8015d76:	e7a1      	b.n	8015cbc <__multiply+0x80>
 8015d78:	08017140 	.word	0x08017140
 8015d7c:	08017151 	.word	0x08017151

08015d80 <__pow5mult>:
 8015d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d84:	4615      	mov	r5, r2
 8015d86:	f012 0203 	ands.w	r2, r2, #3
 8015d8a:	4607      	mov	r7, r0
 8015d8c:	460e      	mov	r6, r1
 8015d8e:	d007      	beq.n	8015da0 <__pow5mult+0x20>
 8015d90:	4c25      	ldr	r4, [pc, #148]	@ (8015e28 <__pow5mult+0xa8>)
 8015d92:	3a01      	subs	r2, #1
 8015d94:	2300      	movs	r3, #0
 8015d96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015d9a:	f7ff fea7 	bl	8015aec <__multadd>
 8015d9e:	4606      	mov	r6, r0
 8015da0:	10ad      	asrs	r5, r5, #2
 8015da2:	d03d      	beq.n	8015e20 <__pow5mult+0xa0>
 8015da4:	69fc      	ldr	r4, [r7, #28]
 8015da6:	b97c      	cbnz	r4, 8015dc8 <__pow5mult+0x48>
 8015da8:	2010      	movs	r0, #16
 8015daa:	f7fe f93d 	bl	8014028 <malloc>
 8015dae:	4602      	mov	r2, r0
 8015db0:	61f8      	str	r0, [r7, #28]
 8015db2:	b928      	cbnz	r0, 8015dc0 <__pow5mult+0x40>
 8015db4:	4b1d      	ldr	r3, [pc, #116]	@ (8015e2c <__pow5mult+0xac>)
 8015db6:	481e      	ldr	r0, [pc, #120]	@ (8015e30 <__pow5mult+0xb0>)
 8015db8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015dbc:	f7fe ffe4 	bl	8014d88 <__assert_func>
 8015dc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015dc4:	6004      	str	r4, [r0, #0]
 8015dc6:	60c4      	str	r4, [r0, #12]
 8015dc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015dcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015dd0:	b94c      	cbnz	r4, 8015de6 <__pow5mult+0x66>
 8015dd2:	f240 2171 	movw	r1, #625	@ 0x271
 8015dd6:	4638      	mov	r0, r7
 8015dd8:	f7ff ff1a 	bl	8015c10 <__i2b>
 8015ddc:	2300      	movs	r3, #0
 8015dde:	f8c8 0008 	str.w	r0, [r8, #8]
 8015de2:	4604      	mov	r4, r0
 8015de4:	6003      	str	r3, [r0, #0]
 8015de6:	f04f 0900 	mov.w	r9, #0
 8015dea:	07eb      	lsls	r3, r5, #31
 8015dec:	d50a      	bpl.n	8015e04 <__pow5mult+0x84>
 8015dee:	4631      	mov	r1, r6
 8015df0:	4622      	mov	r2, r4
 8015df2:	4638      	mov	r0, r7
 8015df4:	f7ff ff22 	bl	8015c3c <__multiply>
 8015df8:	4631      	mov	r1, r6
 8015dfa:	4680      	mov	r8, r0
 8015dfc:	4638      	mov	r0, r7
 8015dfe:	f7ff fe53 	bl	8015aa8 <_Bfree>
 8015e02:	4646      	mov	r6, r8
 8015e04:	106d      	asrs	r5, r5, #1
 8015e06:	d00b      	beq.n	8015e20 <__pow5mult+0xa0>
 8015e08:	6820      	ldr	r0, [r4, #0]
 8015e0a:	b938      	cbnz	r0, 8015e1c <__pow5mult+0x9c>
 8015e0c:	4622      	mov	r2, r4
 8015e0e:	4621      	mov	r1, r4
 8015e10:	4638      	mov	r0, r7
 8015e12:	f7ff ff13 	bl	8015c3c <__multiply>
 8015e16:	6020      	str	r0, [r4, #0]
 8015e18:	f8c0 9000 	str.w	r9, [r0]
 8015e1c:	4604      	mov	r4, r0
 8015e1e:	e7e4      	b.n	8015dea <__pow5mult+0x6a>
 8015e20:	4630      	mov	r0, r6
 8015e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e26:	bf00      	nop
 8015e28:	080171c8 	.word	0x080171c8
 8015e2c:	080170d1 	.word	0x080170d1
 8015e30:	08017151 	.word	0x08017151

08015e34 <__lshift>:
 8015e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e38:	460c      	mov	r4, r1
 8015e3a:	6849      	ldr	r1, [r1, #4]
 8015e3c:	6923      	ldr	r3, [r4, #16]
 8015e3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015e42:	68a3      	ldr	r3, [r4, #8]
 8015e44:	4607      	mov	r7, r0
 8015e46:	4691      	mov	r9, r2
 8015e48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015e4c:	f108 0601 	add.w	r6, r8, #1
 8015e50:	42b3      	cmp	r3, r6
 8015e52:	db0b      	blt.n	8015e6c <__lshift+0x38>
 8015e54:	4638      	mov	r0, r7
 8015e56:	f7ff fde7 	bl	8015a28 <_Balloc>
 8015e5a:	4605      	mov	r5, r0
 8015e5c:	b948      	cbnz	r0, 8015e72 <__lshift+0x3e>
 8015e5e:	4602      	mov	r2, r0
 8015e60:	4b28      	ldr	r3, [pc, #160]	@ (8015f04 <__lshift+0xd0>)
 8015e62:	4829      	ldr	r0, [pc, #164]	@ (8015f08 <__lshift+0xd4>)
 8015e64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015e68:	f7fe ff8e 	bl	8014d88 <__assert_func>
 8015e6c:	3101      	adds	r1, #1
 8015e6e:	005b      	lsls	r3, r3, #1
 8015e70:	e7ee      	b.n	8015e50 <__lshift+0x1c>
 8015e72:	2300      	movs	r3, #0
 8015e74:	f100 0114 	add.w	r1, r0, #20
 8015e78:	f100 0210 	add.w	r2, r0, #16
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	4553      	cmp	r3, sl
 8015e80:	db33      	blt.n	8015eea <__lshift+0xb6>
 8015e82:	6920      	ldr	r0, [r4, #16]
 8015e84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015e88:	f104 0314 	add.w	r3, r4, #20
 8015e8c:	f019 091f 	ands.w	r9, r9, #31
 8015e90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015e94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015e98:	d02b      	beq.n	8015ef2 <__lshift+0xbe>
 8015e9a:	f1c9 0e20 	rsb	lr, r9, #32
 8015e9e:	468a      	mov	sl, r1
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	6818      	ldr	r0, [r3, #0]
 8015ea4:	fa00 f009 	lsl.w	r0, r0, r9
 8015ea8:	4310      	orrs	r0, r2
 8015eaa:	f84a 0b04 	str.w	r0, [sl], #4
 8015eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8015eb2:	459c      	cmp	ip, r3
 8015eb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8015eb8:	d8f3      	bhi.n	8015ea2 <__lshift+0x6e>
 8015eba:	ebac 0304 	sub.w	r3, ip, r4
 8015ebe:	3b15      	subs	r3, #21
 8015ec0:	f023 0303 	bic.w	r3, r3, #3
 8015ec4:	3304      	adds	r3, #4
 8015ec6:	f104 0015 	add.w	r0, r4, #21
 8015eca:	4560      	cmp	r0, ip
 8015ecc:	bf88      	it	hi
 8015ece:	2304      	movhi	r3, #4
 8015ed0:	50ca      	str	r2, [r1, r3]
 8015ed2:	b10a      	cbz	r2, 8015ed8 <__lshift+0xa4>
 8015ed4:	f108 0602 	add.w	r6, r8, #2
 8015ed8:	3e01      	subs	r6, #1
 8015eda:	4638      	mov	r0, r7
 8015edc:	612e      	str	r6, [r5, #16]
 8015ede:	4621      	mov	r1, r4
 8015ee0:	f7ff fde2 	bl	8015aa8 <_Bfree>
 8015ee4:	4628      	mov	r0, r5
 8015ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eea:	f842 0f04 	str.w	r0, [r2, #4]!
 8015eee:	3301      	adds	r3, #1
 8015ef0:	e7c5      	b.n	8015e7e <__lshift+0x4a>
 8015ef2:	3904      	subs	r1, #4
 8015ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ef8:	f841 2f04 	str.w	r2, [r1, #4]!
 8015efc:	459c      	cmp	ip, r3
 8015efe:	d8f9      	bhi.n	8015ef4 <__lshift+0xc0>
 8015f00:	e7ea      	b.n	8015ed8 <__lshift+0xa4>
 8015f02:	bf00      	nop
 8015f04:	08017140 	.word	0x08017140
 8015f08:	08017151 	.word	0x08017151

08015f0c <__mcmp>:
 8015f0c:	690a      	ldr	r2, [r1, #16]
 8015f0e:	4603      	mov	r3, r0
 8015f10:	6900      	ldr	r0, [r0, #16]
 8015f12:	1a80      	subs	r0, r0, r2
 8015f14:	b530      	push	{r4, r5, lr}
 8015f16:	d10e      	bne.n	8015f36 <__mcmp+0x2a>
 8015f18:	3314      	adds	r3, #20
 8015f1a:	3114      	adds	r1, #20
 8015f1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015f20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015f24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015f28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015f2c:	4295      	cmp	r5, r2
 8015f2e:	d003      	beq.n	8015f38 <__mcmp+0x2c>
 8015f30:	d205      	bcs.n	8015f3e <__mcmp+0x32>
 8015f32:	f04f 30ff 	mov.w	r0, #4294967295
 8015f36:	bd30      	pop	{r4, r5, pc}
 8015f38:	42a3      	cmp	r3, r4
 8015f3a:	d3f3      	bcc.n	8015f24 <__mcmp+0x18>
 8015f3c:	e7fb      	b.n	8015f36 <__mcmp+0x2a>
 8015f3e:	2001      	movs	r0, #1
 8015f40:	e7f9      	b.n	8015f36 <__mcmp+0x2a>
	...

08015f44 <__mdiff>:
 8015f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f48:	4689      	mov	r9, r1
 8015f4a:	4606      	mov	r6, r0
 8015f4c:	4611      	mov	r1, r2
 8015f4e:	4648      	mov	r0, r9
 8015f50:	4614      	mov	r4, r2
 8015f52:	f7ff ffdb 	bl	8015f0c <__mcmp>
 8015f56:	1e05      	subs	r5, r0, #0
 8015f58:	d112      	bne.n	8015f80 <__mdiff+0x3c>
 8015f5a:	4629      	mov	r1, r5
 8015f5c:	4630      	mov	r0, r6
 8015f5e:	f7ff fd63 	bl	8015a28 <_Balloc>
 8015f62:	4602      	mov	r2, r0
 8015f64:	b928      	cbnz	r0, 8015f72 <__mdiff+0x2e>
 8015f66:	4b3f      	ldr	r3, [pc, #252]	@ (8016064 <__mdiff+0x120>)
 8015f68:	f240 2137 	movw	r1, #567	@ 0x237
 8015f6c:	483e      	ldr	r0, [pc, #248]	@ (8016068 <__mdiff+0x124>)
 8015f6e:	f7fe ff0b 	bl	8014d88 <__assert_func>
 8015f72:	2301      	movs	r3, #1
 8015f74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015f78:	4610      	mov	r0, r2
 8015f7a:	b003      	add	sp, #12
 8015f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f80:	bfbc      	itt	lt
 8015f82:	464b      	movlt	r3, r9
 8015f84:	46a1      	movlt	r9, r4
 8015f86:	4630      	mov	r0, r6
 8015f88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015f8c:	bfba      	itte	lt
 8015f8e:	461c      	movlt	r4, r3
 8015f90:	2501      	movlt	r5, #1
 8015f92:	2500      	movge	r5, #0
 8015f94:	f7ff fd48 	bl	8015a28 <_Balloc>
 8015f98:	4602      	mov	r2, r0
 8015f9a:	b918      	cbnz	r0, 8015fa4 <__mdiff+0x60>
 8015f9c:	4b31      	ldr	r3, [pc, #196]	@ (8016064 <__mdiff+0x120>)
 8015f9e:	f240 2145 	movw	r1, #581	@ 0x245
 8015fa2:	e7e3      	b.n	8015f6c <__mdiff+0x28>
 8015fa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015fa8:	6926      	ldr	r6, [r4, #16]
 8015faa:	60c5      	str	r5, [r0, #12]
 8015fac:	f109 0310 	add.w	r3, r9, #16
 8015fb0:	f109 0514 	add.w	r5, r9, #20
 8015fb4:	f104 0e14 	add.w	lr, r4, #20
 8015fb8:	f100 0b14 	add.w	fp, r0, #20
 8015fbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015fc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015fc4:	9301      	str	r3, [sp, #4]
 8015fc6:	46d9      	mov	r9, fp
 8015fc8:	f04f 0c00 	mov.w	ip, #0
 8015fcc:	9b01      	ldr	r3, [sp, #4]
 8015fce:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015fd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015fd6:	9301      	str	r3, [sp, #4]
 8015fd8:	fa1f f38a 	uxth.w	r3, sl
 8015fdc:	4619      	mov	r1, r3
 8015fde:	b283      	uxth	r3, r0
 8015fe0:	1acb      	subs	r3, r1, r3
 8015fe2:	0c00      	lsrs	r0, r0, #16
 8015fe4:	4463      	add	r3, ip
 8015fe6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015fea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015fee:	b29b      	uxth	r3, r3
 8015ff0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015ff4:	4576      	cmp	r6, lr
 8015ff6:	f849 3b04 	str.w	r3, [r9], #4
 8015ffa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015ffe:	d8e5      	bhi.n	8015fcc <__mdiff+0x88>
 8016000:	1b33      	subs	r3, r6, r4
 8016002:	3b15      	subs	r3, #21
 8016004:	f023 0303 	bic.w	r3, r3, #3
 8016008:	3415      	adds	r4, #21
 801600a:	3304      	adds	r3, #4
 801600c:	42a6      	cmp	r6, r4
 801600e:	bf38      	it	cc
 8016010:	2304      	movcc	r3, #4
 8016012:	441d      	add	r5, r3
 8016014:	445b      	add	r3, fp
 8016016:	461e      	mov	r6, r3
 8016018:	462c      	mov	r4, r5
 801601a:	4544      	cmp	r4, r8
 801601c:	d30e      	bcc.n	801603c <__mdiff+0xf8>
 801601e:	f108 0103 	add.w	r1, r8, #3
 8016022:	1b49      	subs	r1, r1, r5
 8016024:	f021 0103 	bic.w	r1, r1, #3
 8016028:	3d03      	subs	r5, #3
 801602a:	45a8      	cmp	r8, r5
 801602c:	bf38      	it	cc
 801602e:	2100      	movcc	r1, #0
 8016030:	440b      	add	r3, r1
 8016032:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016036:	b191      	cbz	r1, 801605e <__mdiff+0x11a>
 8016038:	6117      	str	r7, [r2, #16]
 801603a:	e79d      	b.n	8015f78 <__mdiff+0x34>
 801603c:	f854 1b04 	ldr.w	r1, [r4], #4
 8016040:	46e6      	mov	lr, ip
 8016042:	0c08      	lsrs	r0, r1, #16
 8016044:	fa1c fc81 	uxtah	ip, ip, r1
 8016048:	4471      	add	r1, lr
 801604a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801604e:	b289      	uxth	r1, r1
 8016050:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016054:	f846 1b04 	str.w	r1, [r6], #4
 8016058:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801605c:	e7dd      	b.n	801601a <__mdiff+0xd6>
 801605e:	3f01      	subs	r7, #1
 8016060:	e7e7      	b.n	8016032 <__mdiff+0xee>
 8016062:	bf00      	nop
 8016064:	08017140 	.word	0x08017140
 8016068:	08017151 	.word	0x08017151

0801606c <__d2b>:
 801606c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016070:	460f      	mov	r7, r1
 8016072:	2101      	movs	r1, #1
 8016074:	ec59 8b10 	vmov	r8, r9, d0
 8016078:	4616      	mov	r6, r2
 801607a:	f7ff fcd5 	bl	8015a28 <_Balloc>
 801607e:	4604      	mov	r4, r0
 8016080:	b930      	cbnz	r0, 8016090 <__d2b+0x24>
 8016082:	4602      	mov	r2, r0
 8016084:	4b23      	ldr	r3, [pc, #140]	@ (8016114 <__d2b+0xa8>)
 8016086:	4824      	ldr	r0, [pc, #144]	@ (8016118 <__d2b+0xac>)
 8016088:	f240 310f 	movw	r1, #783	@ 0x30f
 801608c:	f7fe fe7c 	bl	8014d88 <__assert_func>
 8016090:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016094:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016098:	b10d      	cbz	r5, 801609e <__d2b+0x32>
 801609a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801609e:	9301      	str	r3, [sp, #4]
 80160a0:	f1b8 0300 	subs.w	r3, r8, #0
 80160a4:	d023      	beq.n	80160ee <__d2b+0x82>
 80160a6:	4668      	mov	r0, sp
 80160a8:	9300      	str	r3, [sp, #0]
 80160aa:	f7ff fd84 	bl	8015bb6 <__lo0bits>
 80160ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80160b2:	b1d0      	cbz	r0, 80160ea <__d2b+0x7e>
 80160b4:	f1c0 0320 	rsb	r3, r0, #32
 80160b8:	fa02 f303 	lsl.w	r3, r2, r3
 80160bc:	430b      	orrs	r3, r1
 80160be:	40c2      	lsrs	r2, r0
 80160c0:	6163      	str	r3, [r4, #20]
 80160c2:	9201      	str	r2, [sp, #4]
 80160c4:	9b01      	ldr	r3, [sp, #4]
 80160c6:	61a3      	str	r3, [r4, #24]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	bf0c      	ite	eq
 80160cc:	2201      	moveq	r2, #1
 80160ce:	2202      	movne	r2, #2
 80160d0:	6122      	str	r2, [r4, #16]
 80160d2:	b1a5      	cbz	r5, 80160fe <__d2b+0x92>
 80160d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80160d8:	4405      	add	r5, r0
 80160da:	603d      	str	r5, [r7, #0]
 80160dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80160e0:	6030      	str	r0, [r6, #0]
 80160e2:	4620      	mov	r0, r4
 80160e4:	b003      	add	sp, #12
 80160e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160ea:	6161      	str	r1, [r4, #20]
 80160ec:	e7ea      	b.n	80160c4 <__d2b+0x58>
 80160ee:	a801      	add	r0, sp, #4
 80160f0:	f7ff fd61 	bl	8015bb6 <__lo0bits>
 80160f4:	9b01      	ldr	r3, [sp, #4]
 80160f6:	6163      	str	r3, [r4, #20]
 80160f8:	3020      	adds	r0, #32
 80160fa:	2201      	movs	r2, #1
 80160fc:	e7e8      	b.n	80160d0 <__d2b+0x64>
 80160fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016102:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016106:	6038      	str	r0, [r7, #0]
 8016108:	6918      	ldr	r0, [r3, #16]
 801610a:	f7ff fd35 	bl	8015b78 <__hi0bits>
 801610e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016112:	e7e5      	b.n	80160e0 <__d2b+0x74>
 8016114:	08017140 	.word	0x08017140
 8016118:	08017151 	.word	0x08017151

0801611c <__ssputs_r>:
 801611c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016120:	688e      	ldr	r6, [r1, #8]
 8016122:	461f      	mov	r7, r3
 8016124:	42be      	cmp	r6, r7
 8016126:	680b      	ldr	r3, [r1, #0]
 8016128:	4682      	mov	sl, r0
 801612a:	460c      	mov	r4, r1
 801612c:	4690      	mov	r8, r2
 801612e:	d82d      	bhi.n	801618c <__ssputs_r+0x70>
 8016130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016138:	d026      	beq.n	8016188 <__ssputs_r+0x6c>
 801613a:	6965      	ldr	r5, [r4, #20]
 801613c:	6909      	ldr	r1, [r1, #16]
 801613e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016142:	eba3 0901 	sub.w	r9, r3, r1
 8016146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801614a:	1c7b      	adds	r3, r7, #1
 801614c:	444b      	add	r3, r9
 801614e:	106d      	asrs	r5, r5, #1
 8016150:	429d      	cmp	r5, r3
 8016152:	bf38      	it	cc
 8016154:	461d      	movcc	r5, r3
 8016156:	0553      	lsls	r3, r2, #21
 8016158:	d527      	bpl.n	80161aa <__ssputs_r+0x8e>
 801615a:	4629      	mov	r1, r5
 801615c:	f7fd ff8e 	bl	801407c <_malloc_r>
 8016160:	4606      	mov	r6, r0
 8016162:	b360      	cbz	r0, 80161be <__ssputs_r+0xa2>
 8016164:	6921      	ldr	r1, [r4, #16]
 8016166:	464a      	mov	r2, r9
 8016168:	f7fe fdff 	bl	8014d6a <memcpy>
 801616c:	89a3      	ldrh	r3, [r4, #12]
 801616e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016176:	81a3      	strh	r3, [r4, #12]
 8016178:	6126      	str	r6, [r4, #16]
 801617a:	6165      	str	r5, [r4, #20]
 801617c:	444e      	add	r6, r9
 801617e:	eba5 0509 	sub.w	r5, r5, r9
 8016182:	6026      	str	r6, [r4, #0]
 8016184:	60a5      	str	r5, [r4, #8]
 8016186:	463e      	mov	r6, r7
 8016188:	42be      	cmp	r6, r7
 801618a:	d900      	bls.n	801618e <__ssputs_r+0x72>
 801618c:	463e      	mov	r6, r7
 801618e:	6820      	ldr	r0, [r4, #0]
 8016190:	4632      	mov	r2, r6
 8016192:	4641      	mov	r1, r8
 8016194:	f000 f9d8 	bl	8016548 <memmove>
 8016198:	68a3      	ldr	r3, [r4, #8]
 801619a:	1b9b      	subs	r3, r3, r6
 801619c:	60a3      	str	r3, [r4, #8]
 801619e:	6823      	ldr	r3, [r4, #0]
 80161a0:	4433      	add	r3, r6
 80161a2:	6023      	str	r3, [r4, #0]
 80161a4:	2000      	movs	r0, #0
 80161a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161aa:	462a      	mov	r2, r5
 80161ac:	f000 fa13 	bl	80165d6 <_realloc_r>
 80161b0:	4606      	mov	r6, r0
 80161b2:	2800      	cmp	r0, #0
 80161b4:	d1e0      	bne.n	8016178 <__ssputs_r+0x5c>
 80161b6:	6921      	ldr	r1, [r4, #16]
 80161b8:	4650      	mov	r0, sl
 80161ba:	f7ff fbeb 	bl	8015994 <_free_r>
 80161be:	230c      	movs	r3, #12
 80161c0:	f8ca 3000 	str.w	r3, [sl]
 80161c4:	89a3      	ldrh	r3, [r4, #12]
 80161c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80161ca:	81a3      	strh	r3, [r4, #12]
 80161cc:	f04f 30ff 	mov.w	r0, #4294967295
 80161d0:	e7e9      	b.n	80161a6 <__ssputs_r+0x8a>
	...

080161d4 <_svfiprintf_r>:
 80161d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161d8:	4698      	mov	r8, r3
 80161da:	898b      	ldrh	r3, [r1, #12]
 80161dc:	061b      	lsls	r3, r3, #24
 80161de:	b09d      	sub	sp, #116	@ 0x74
 80161e0:	4607      	mov	r7, r0
 80161e2:	460d      	mov	r5, r1
 80161e4:	4614      	mov	r4, r2
 80161e6:	d510      	bpl.n	801620a <_svfiprintf_r+0x36>
 80161e8:	690b      	ldr	r3, [r1, #16]
 80161ea:	b973      	cbnz	r3, 801620a <_svfiprintf_r+0x36>
 80161ec:	2140      	movs	r1, #64	@ 0x40
 80161ee:	f7fd ff45 	bl	801407c <_malloc_r>
 80161f2:	6028      	str	r0, [r5, #0]
 80161f4:	6128      	str	r0, [r5, #16]
 80161f6:	b930      	cbnz	r0, 8016206 <_svfiprintf_r+0x32>
 80161f8:	230c      	movs	r3, #12
 80161fa:	603b      	str	r3, [r7, #0]
 80161fc:	f04f 30ff 	mov.w	r0, #4294967295
 8016200:	b01d      	add	sp, #116	@ 0x74
 8016202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016206:	2340      	movs	r3, #64	@ 0x40
 8016208:	616b      	str	r3, [r5, #20]
 801620a:	2300      	movs	r3, #0
 801620c:	9309      	str	r3, [sp, #36]	@ 0x24
 801620e:	2320      	movs	r3, #32
 8016210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016214:	f8cd 800c 	str.w	r8, [sp, #12]
 8016218:	2330      	movs	r3, #48	@ 0x30
 801621a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80163b8 <_svfiprintf_r+0x1e4>
 801621e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016222:	f04f 0901 	mov.w	r9, #1
 8016226:	4623      	mov	r3, r4
 8016228:	469a      	mov	sl, r3
 801622a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801622e:	b10a      	cbz	r2, 8016234 <_svfiprintf_r+0x60>
 8016230:	2a25      	cmp	r2, #37	@ 0x25
 8016232:	d1f9      	bne.n	8016228 <_svfiprintf_r+0x54>
 8016234:	ebba 0b04 	subs.w	fp, sl, r4
 8016238:	d00b      	beq.n	8016252 <_svfiprintf_r+0x7e>
 801623a:	465b      	mov	r3, fp
 801623c:	4622      	mov	r2, r4
 801623e:	4629      	mov	r1, r5
 8016240:	4638      	mov	r0, r7
 8016242:	f7ff ff6b 	bl	801611c <__ssputs_r>
 8016246:	3001      	adds	r0, #1
 8016248:	f000 80a7 	beq.w	801639a <_svfiprintf_r+0x1c6>
 801624c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801624e:	445a      	add	r2, fp
 8016250:	9209      	str	r2, [sp, #36]	@ 0x24
 8016252:	f89a 3000 	ldrb.w	r3, [sl]
 8016256:	2b00      	cmp	r3, #0
 8016258:	f000 809f 	beq.w	801639a <_svfiprintf_r+0x1c6>
 801625c:	2300      	movs	r3, #0
 801625e:	f04f 32ff 	mov.w	r2, #4294967295
 8016262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016266:	f10a 0a01 	add.w	sl, sl, #1
 801626a:	9304      	str	r3, [sp, #16]
 801626c:	9307      	str	r3, [sp, #28]
 801626e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016272:	931a      	str	r3, [sp, #104]	@ 0x68
 8016274:	4654      	mov	r4, sl
 8016276:	2205      	movs	r2, #5
 8016278:	f814 1b01 	ldrb.w	r1, [r4], #1
 801627c:	484e      	ldr	r0, [pc, #312]	@ (80163b8 <_svfiprintf_r+0x1e4>)
 801627e:	f7ea f82f 	bl	80002e0 <memchr>
 8016282:	9a04      	ldr	r2, [sp, #16]
 8016284:	b9d8      	cbnz	r0, 80162be <_svfiprintf_r+0xea>
 8016286:	06d0      	lsls	r0, r2, #27
 8016288:	bf44      	itt	mi
 801628a:	2320      	movmi	r3, #32
 801628c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016290:	0711      	lsls	r1, r2, #28
 8016292:	bf44      	itt	mi
 8016294:	232b      	movmi	r3, #43	@ 0x2b
 8016296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801629a:	f89a 3000 	ldrb.w	r3, [sl]
 801629e:	2b2a      	cmp	r3, #42	@ 0x2a
 80162a0:	d015      	beq.n	80162ce <_svfiprintf_r+0xfa>
 80162a2:	9a07      	ldr	r2, [sp, #28]
 80162a4:	4654      	mov	r4, sl
 80162a6:	2000      	movs	r0, #0
 80162a8:	f04f 0c0a 	mov.w	ip, #10
 80162ac:	4621      	mov	r1, r4
 80162ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80162b2:	3b30      	subs	r3, #48	@ 0x30
 80162b4:	2b09      	cmp	r3, #9
 80162b6:	d94b      	bls.n	8016350 <_svfiprintf_r+0x17c>
 80162b8:	b1b0      	cbz	r0, 80162e8 <_svfiprintf_r+0x114>
 80162ba:	9207      	str	r2, [sp, #28]
 80162bc:	e014      	b.n	80162e8 <_svfiprintf_r+0x114>
 80162be:	eba0 0308 	sub.w	r3, r0, r8
 80162c2:	fa09 f303 	lsl.w	r3, r9, r3
 80162c6:	4313      	orrs	r3, r2
 80162c8:	9304      	str	r3, [sp, #16]
 80162ca:	46a2      	mov	sl, r4
 80162cc:	e7d2      	b.n	8016274 <_svfiprintf_r+0xa0>
 80162ce:	9b03      	ldr	r3, [sp, #12]
 80162d0:	1d19      	adds	r1, r3, #4
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	9103      	str	r1, [sp, #12]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	bfbb      	ittet	lt
 80162da:	425b      	neglt	r3, r3
 80162dc:	f042 0202 	orrlt.w	r2, r2, #2
 80162e0:	9307      	strge	r3, [sp, #28]
 80162e2:	9307      	strlt	r3, [sp, #28]
 80162e4:	bfb8      	it	lt
 80162e6:	9204      	strlt	r2, [sp, #16]
 80162e8:	7823      	ldrb	r3, [r4, #0]
 80162ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80162ec:	d10a      	bne.n	8016304 <_svfiprintf_r+0x130>
 80162ee:	7863      	ldrb	r3, [r4, #1]
 80162f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80162f2:	d132      	bne.n	801635a <_svfiprintf_r+0x186>
 80162f4:	9b03      	ldr	r3, [sp, #12]
 80162f6:	1d1a      	adds	r2, r3, #4
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	9203      	str	r2, [sp, #12]
 80162fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016300:	3402      	adds	r4, #2
 8016302:	9305      	str	r3, [sp, #20]
 8016304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80163c8 <_svfiprintf_r+0x1f4>
 8016308:	7821      	ldrb	r1, [r4, #0]
 801630a:	2203      	movs	r2, #3
 801630c:	4650      	mov	r0, sl
 801630e:	f7e9 ffe7 	bl	80002e0 <memchr>
 8016312:	b138      	cbz	r0, 8016324 <_svfiprintf_r+0x150>
 8016314:	9b04      	ldr	r3, [sp, #16]
 8016316:	eba0 000a 	sub.w	r0, r0, sl
 801631a:	2240      	movs	r2, #64	@ 0x40
 801631c:	4082      	lsls	r2, r0
 801631e:	4313      	orrs	r3, r2
 8016320:	3401      	adds	r4, #1
 8016322:	9304      	str	r3, [sp, #16]
 8016324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016328:	4824      	ldr	r0, [pc, #144]	@ (80163bc <_svfiprintf_r+0x1e8>)
 801632a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801632e:	2206      	movs	r2, #6
 8016330:	f7e9 ffd6 	bl	80002e0 <memchr>
 8016334:	2800      	cmp	r0, #0
 8016336:	d036      	beq.n	80163a6 <_svfiprintf_r+0x1d2>
 8016338:	4b21      	ldr	r3, [pc, #132]	@ (80163c0 <_svfiprintf_r+0x1ec>)
 801633a:	bb1b      	cbnz	r3, 8016384 <_svfiprintf_r+0x1b0>
 801633c:	9b03      	ldr	r3, [sp, #12]
 801633e:	3307      	adds	r3, #7
 8016340:	f023 0307 	bic.w	r3, r3, #7
 8016344:	3308      	adds	r3, #8
 8016346:	9303      	str	r3, [sp, #12]
 8016348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801634a:	4433      	add	r3, r6
 801634c:	9309      	str	r3, [sp, #36]	@ 0x24
 801634e:	e76a      	b.n	8016226 <_svfiprintf_r+0x52>
 8016350:	fb0c 3202 	mla	r2, ip, r2, r3
 8016354:	460c      	mov	r4, r1
 8016356:	2001      	movs	r0, #1
 8016358:	e7a8      	b.n	80162ac <_svfiprintf_r+0xd8>
 801635a:	2300      	movs	r3, #0
 801635c:	3401      	adds	r4, #1
 801635e:	9305      	str	r3, [sp, #20]
 8016360:	4619      	mov	r1, r3
 8016362:	f04f 0c0a 	mov.w	ip, #10
 8016366:	4620      	mov	r0, r4
 8016368:	f810 2b01 	ldrb.w	r2, [r0], #1
 801636c:	3a30      	subs	r2, #48	@ 0x30
 801636e:	2a09      	cmp	r2, #9
 8016370:	d903      	bls.n	801637a <_svfiprintf_r+0x1a6>
 8016372:	2b00      	cmp	r3, #0
 8016374:	d0c6      	beq.n	8016304 <_svfiprintf_r+0x130>
 8016376:	9105      	str	r1, [sp, #20]
 8016378:	e7c4      	b.n	8016304 <_svfiprintf_r+0x130>
 801637a:	fb0c 2101 	mla	r1, ip, r1, r2
 801637e:	4604      	mov	r4, r0
 8016380:	2301      	movs	r3, #1
 8016382:	e7f0      	b.n	8016366 <_svfiprintf_r+0x192>
 8016384:	ab03      	add	r3, sp, #12
 8016386:	9300      	str	r3, [sp, #0]
 8016388:	462a      	mov	r2, r5
 801638a:	4b0e      	ldr	r3, [pc, #56]	@ (80163c4 <_svfiprintf_r+0x1f0>)
 801638c:	a904      	add	r1, sp, #16
 801638e:	4638      	mov	r0, r7
 8016390:	f7fd ff8e 	bl	80142b0 <_printf_float>
 8016394:	1c42      	adds	r2, r0, #1
 8016396:	4606      	mov	r6, r0
 8016398:	d1d6      	bne.n	8016348 <_svfiprintf_r+0x174>
 801639a:	89ab      	ldrh	r3, [r5, #12]
 801639c:	065b      	lsls	r3, r3, #25
 801639e:	f53f af2d 	bmi.w	80161fc <_svfiprintf_r+0x28>
 80163a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163a4:	e72c      	b.n	8016200 <_svfiprintf_r+0x2c>
 80163a6:	ab03      	add	r3, sp, #12
 80163a8:	9300      	str	r3, [sp, #0]
 80163aa:	462a      	mov	r2, r5
 80163ac:	4b05      	ldr	r3, [pc, #20]	@ (80163c4 <_svfiprintf_r+0x1f0>)
 80163ae:	a904      	add	r1, sp, #16
 80163b0:	4638      	mov	r0, r7
 80163b2:	f7fe fa05 	bl	80147c0 <_printf_i>
 80163b6:	e7ed      	b.n	8016394 <_svfiprintf_r+0x1c0>
 80163b8:	080171aa 	.word	0x080171aa
 80163bc:	080171b4 	.word	0x080171b4
 80163c0:	080142b1 	.word	0x080142b1
 80163c4:	0801611d 	.word	0x0801611d
 80163c8:	080171b0 	.word	0x080171b0

080163cc <__sflush_r>:
 80163cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80163d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163d4:	0716      	lsls	r6, r2, #28
 80163d6:	4605      	mov	r5, r0
 80163d8:	460c      	mov	r4, r1
 80163da:	d454      	bmi.n	8016486 <__sflush_r+0xba>
 80163dc:	684b      	ldr	r3, [r1, #4]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	dc02      	bgt.n	80163e8 <__sflush_r+0x1c>
 80163e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	dd48      	ble.n	801647a <__sflush_r+0xae>
 80163e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80163ea:	2e00      	cmp	r6, #0
 80163ec:	d045      	beq.n	801647a <__sflush_r+0xae>
 80163ee:	2300      	movs	r3, #0
 80163f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80163f4:	682f      	ldr	r7, [r5, #0]
 80163f6:	6a21      	ldr	r1, [r4, #32]
 80163f8:	602b      	str	r3, [r5, #0]
 80163fa:	d030      	beq.n	801645e <__sflush_r+0x92>
 80163fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80163fe:	89a3      	ldrh	r3, [r4, #12]
 8016400:	0759      	lsls	r1, r3, #29
 8016402:	d505      	bpl.n	8016410 <__sflush_r+0x44>
 8016404:	6863      	ldr	r3, [r4, #4]
 8016406:	1ad2      	subs	r2, r2, r3
 8016408:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801640a:	b10b      	cbz	r3, 8016410 <__sflush_r+0x44>
 801640c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801640e:	1ad2      	subs	r2, r2, r3
 8016410:	2300      	movs	r3, #0
 8016412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016414:	6a21      	ldr	r1, [r4, #32]
 8016416:	4628      	mov	r0, r5
 8016418:	47b0      	blx	r6
 801641a:	1c43      	adds	r3, r0, #1
 801641c:	89a3      	ldrh	r3, [r4, #12]
 801641e:	d106      	bne.n	801642e <__sflush_r+0x62>
 8016420:	6829      	ldr	r1, [r5, #0]
 8016422:	291d      	cmp	r1, #29
 8016424:	d82b      	bhi.n	801647e <__sflush_r+0xb2>
 8016426:	4a2a      	ldr	r2, [pc, #168]	@ (80164d0 <__sflush_r+0x104>)
 8016428:	40ca      	lsrs	r2, r1
 801642a:	07d6      	lsls	r6, r2, #31
 801642c:	d527      	bpl.n	801647e <__sflush_r+0xb2>
 801642e:	2200      	movs	r2, #0
 8016430:	6062      	str	r2, [r4, #4]
 8016432:	04d9      	lsls	r1, r3, #19
 8016434:	6922      	ldr	r2, [r4, #16]
 8016436:	6022      	str	r2, [r4, #0]
 8016438:	d504      	bpl.n	8016444 <__sflush_r+0x78>
 801643a:	1c42      	adds	r2, r0, #1
 801643c:	d101      	bne.n	8016442 <__sflush_r+0x76>
 801643e:	682b      	ldr	r3, [r5, #0]
 8016440:	b903      	cbnz	r3, 8016444 <__sflush_r+0x78>
 8016442:	6560      	str	r0, [r4, #84]	@ 0x54
 8016444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016446:	602f      	str	r7, [r5, #0]
 8016448:	b1b9      	cbz	r1, 801647a <__sflush_r+0xae>
 801644a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801644e:	4299      	cmp	r1, r3
 8016450:	d002      	beq.n	8016458 <__sflush_r+0x8c>
 8016452:	4628      	mov	r0, r5
 8016454:	f7ff fa9e 	bl	8015994 <_free_r>
 8016458:	2300      	movs	r3, #0
 801645a:	6363      	str	r3, [r4, #52]	@ 0x34
 801645c:	e00d      	b.n	801647a <__sflush_r+0xae>
 801645e:	2301      	movs	r3, #1
 8016460:	4628      	mov	r0, r5
 8016462:	47b0      	blx	r6
 8016464:	4602      	mov	r2, r0
 8016466:	1c50      	adds	r0, r2, #1
 8016468:	d1c9      	bne.n	80163fe <__sflush_r+0x32>
 801646a:	682b      	ldr	r3, [r5, #0]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d0c6      	beq.n	80163fe <__sflush_r+0x32>
 8016470:	2b1d      	cmp	r3, #29
 8016472:	d001      	beq.n	8016478 <__sflush_r+0xac>
 8016474:	2b16      	cmp	r3, #22
 8016476:	d11e      	bne.n	80164b6 <__sflush_r+0xea>
 8016478:	602f      	str	r7, [r5, #0]
 801647a:	2000      	movs	r0, #0
 801647c:	e022      	b.n	80164c4 <__sflush_r+0xf8>
 801647e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016482:	b21b      	sxth	r3, r3
 8016484:	e01b      	b.n	80164be <__sflush_r+0xf2>
 8016486:	690f      	ldr	r7, [r1, #16]
 8016488:	2f00      	cmp	r7, #0
 801648a:	d0f6      	beq.n	801647a <__sflush_r+0xae>
 801648c:	0793      	lsls	r3, r2, #30
 801648e:	680e      	ldr	r6, [r1, #0]
 8016490:	bf08      	it	eq
 8016492:	694b      	ldreq	r3, [r1, #20]
 8016494:	600f      	str	r7, [r1, #0]
 8016496:	bf18      	it	ne
 8016498:	2300      	movne	r3, #0
 801649a:	eba6 0807 	sub.w	r8, r6, r7
 801649e:	608b      	str	r3, [r1, #8]
 80164a0:	f1b8 0f00 	cmp.w	r8, #0
 80164a4:	dde9      	ble.n	801647a <__sflush_r+0xae>
 80164a6:	6a21      	ldr	r1, [r4, #32]
 80164a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80164aa:	4643      	mov	r3, r8
 80164ac:	463a      	mov	r2, r7
 80164ae:	4628      	mov	r0, r5
 80164b0:	47b0      	blx	r6
 80164b2:	2800      	cmp	r0, #0
 80164b4:	dc08      	bgt.n	80164c8 <__sflush_r+0xfc>
 80164b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80164be:	81a3      	strh	r3, [r4, #12]
 80164c0:	f04f 30ff 	mov.w	r0, #4294967295
 80164c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164c8:	4407      	add	r7, r0
 80164ca:	eba8 0800 	sub.w	r8, r8, r0
 80164ce:	e7e7      	b.n	80164a0 <__sflush_r+0xd4>
 80164d0:	20400001 	.word	0x20400001

080164d4 <_fflush_r>:
 80164d4:	b538      	push	{r3, r4, r5, lr}
 80164d6:	690b      	ldr	r3, [r1, #16]
 80164d8:	4605      	mov	r5, r0
 80164da:	460c      	mov	r4, r1
 80164dc:	b913      	cbnz	r3, 80164e4 <_fflush_r+0x10>
 80164de:	2500      	movs	r5, #0
 80164e0:	4628      	mov	r0, r5
 80164e2:	bd38      	pop	{r3, r4, r5, pc}
 80164e4:	b118      	cbz	r0, 80164ee <_fflush_r+0x1a>
 80164e6:	6a03      	ldr	r3, [r0, #32]
 80164e8:	b90b      	cbnz	r3, 80164ee <_fflush_r+0x1a>
 80164ea:	f7fe fb13 	bl	8014b14 <__sinit>
 80164ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d0f3      	beq.n	80164de <_fflush_r+0xa>
 80164f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80164f8:	07d0      	lsls	r0, r2, #31
 80164fa:	d404      	bmi.n	8016506 <_fflush_r+0x32>
 80164fc:	0599      	lsls	r1, r3, #22
 80164fe:	d402      	bmi.n	8016506 <_fflush_r+0x32>
 8016500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016502:	f7fe fc30 	bl	8014d66 <__retarget_lock_acquire_recursive>
 8016506:	4628      	mov	r0, r5
 8016508:	4621      	mov	r1, r4
 801650a:	f7ff ff5f 	bl	80163cc <__sflush_r>
 801650e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016510:	07da      	lsls	r2, r3, #31
 8016512:	4605      	mov	r5, r0
 8016514:	d4e4      	bmi.n	80164e0 <_fflush_r+0xc>
 8016516:	89a3      	ldrh	r3, [r4, #12]
 8016518:	059b      	lsls	r3, r3, #22
 801651a:	d4e1      	bmi.n	80164e0 <_fflush_r+0xc>
 801651c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801651e:	f7fe fc23 	bl	8014d68 <__retarget_lock_release_recursive>
 8016522:	e7dd      	b.n	80164e0 <_fflush_r+0xc>

08016524 <fiprintf>:
 8016524:	b40e      	push	{r1, r2, r3}
 8016526:	b503      	push	{r0, r1, lr}
 8016528:	4601      	mov	r1, r0
 801652a:	ab03      	add	r3, sp, #12
 801652c:	4805      	ldr	r0, [pc, #20]	@ (8016544 <fiprintf+0x20>)
 801652e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016532:	6800      	ldr	r0, [r0, #0]
 8016534:	9301      	str	r3, [sp, #4]
 8016536:	f000 f8b3 	bl	80166a0 <_vfiprintf_r>
 801653a:	b002      	add	sp, #8
 801653c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016540:	b003      	add	sp, #12
 8016542:	4770      	bx	lr
 8016544:	24000128 	.word	0x24000128

08016548 <memmove>:
 8016548:	4288      	cmp	r0, r1
 801654a:	b510      	push	{r4, lr}
 801654c:	eb01 0402 	add.w	r4, r1, r2
 8016550:	d902      	bls.n	8016558 <memmove+0x10>
 8016552:	4284      	cmp	r4, r0
 8016554:	4623      	mov	r3, r4
 8016556:	d807      	bhi.n	8016568 <memmove+0x20>
 8016558:	1e43      	subs	r3, r0, #1
 801655a:	42a1      	cmp	r1, r4
 801655c:	d008      	beq.n	8016570 <memmove+0x28>
 801655e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016562:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016566:	e7f8      	b.n	801655a <memmove+0x12>
 8016568:	4402      	add	r2, r0
 801656a:	4601      	mov	r1, r0
 801656c:	428a      	cmp	r2, r1
 801656e:	d100      	bne.n	8016572 <memmove+0x2a>
 8016570:	bd10      	pop	{r4, pc}
 8016572:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016576:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801657a:	e7f7      	b.n	801656c <memmove+0x24>

0801657c <abort>:
 801657c:	b508      	push	{r3, lr}
 801657e:	2006      	movs	r0, #6
 8016580:	f000 fa62 	bl	8016a48 <raise>
 8016584:	2001      	movs	r0, #1
 8016586:	f7eb fd87 	bl	8002098 <_exit>

0801658a <_calloc_r>:
 801658a:	b570      	push	{r4, r5, r6, lr}
 801658c:	fba1 5402 	umull	r5, r4, r1, r2
 8016590:	b934      	cbnz	r4, 80165a0 <_calloc_r+0x16>
 8016592:	4629      	mov	r1, r5
 8016594:	f7fd fd72 	bl	801407c <_malloc_r>
 8016598:	4606      	mov	r6, r0
 801659a:	b928      	cbnz	r0, 80165a8 <_calloc_r+0x1e>
 801659c:	4630      	mov	r0, r6
 801659e:	bd70      	pop	{r4, r5, r6, pc}
 80165a0:	220c      	movs	r2, #12
 80165a2:	6002      	str	r2, [r0, #0]
 80165a4:	2600      	movs	r6, #0
 80165a6:	e7f9      	b.n	801659c <_calloc_r+0x12>
 80165a8:	462a      	mov	r2, r5
 80165aa:	4621      	mov	r1, r4
 80165ac:	f7fe fb4d 	bl	8014c4a <memset>
 80165b0:	e7f4      	b.n	801659c <_calloc_r+0x12>

080165b2 <__ascii_mbtowc>:
 80165b2:	b082      	sub	sp, #8
 80165b4:	b901      	cbnz	r1, 80165b8 <__ascii_mbtowc+0x6>
 80165b6:	a901      	add	r1, sp, #4
 80165b8:	b142      	cbz	r2, 80165cc <__ascii_mbtowc+0x1a>
 80165ba:	b14b      	cbz	r3, 80165d0 <__ascii_mbtowc+0x1e>
 80165bc:	7813      	ldrb	r3, [r2, #0]
 80165be:	600b      	str	r3, [r1, #0]
 80165c0:	7812      	ldrb	r2, [r2, #0]
 80165c2:	1e10      	subs	r0, r2, #0
 80165c4:	bf18      	it	ne
 80165c6:	2001      	movne	r0, #1
 80165c8:	b002      	add	sp, #8
 80165ca:	4770      	bx	lr
 80165cc:	4610      	mov	r0, r2
 80165ce:	e7fb      	b.n	80165c8 <__ascii_mbtowc+0x16>
 80165d0:	f06f 0001 	mvn.w	r0, #1
 80165d4:	e7f8      	b.n	80165c8 <__ascii_mbtowc+0x16>

080165d6 <_realloc_r>:
 80165d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165da:	4607      	mov	r7, r0
 80165dc:	4614      	mov	r4, r2
 80165de:	460d      	mov	r5, r1
 80165e0:	b921      	cbnz	r1, 80165ec <_realloc_r+0x16>
 80165e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80165e6:	4611      	mov	r1, r2
 80165e8:	f7fd bd48 	b.w	801407c <_malloc_r>
 80165ec:	b92a      	cbnz	r2, 80165fa <_realloc_r+0x24>
 80165ee:	f7ff f9d1 	bl	8015994 <_free_r>
 80165f2:	4625      	mov	r5, r4
 80165f4:	4628      	mov	r0, r5
 80165f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165fa:	f000 fa41 	bl	8016a80 <_malloc_usable_size_r>
 80165fe:	4284      	cmp	r4, r0
 8016600:	4606      	mov	r6, r0
 8016602:	d802      	bhi.n	801660a <_realloc_r+0x34>
 8016604:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016608:	d8f4      	bhi.n	80165f4 <_realloc_r+0x1e>
 801660a:	4621      	mov	r1, r4
 801660c:	4638      	mov	r0, r7
 801660e:	f7fd fd35 	bl	801407c <_malloc_r>
 8016612:	4680      	mov	r8, r0
 8016614:	b908      	cbnz	r0, 801661a <_realloc_r+0x44>
 8016616:	4645      	mov	r5, r8
 8016618:	e7ec      	b.n	80165f4 <_realloc_r+0x1e>
 801661a:	42b4      	cmp	r4, r6
 801661c:	4622      	mov	r2, r4
 801661e:	4629      	mov	r1, r5
 8016620:	bf28      	it	cs
 8016622:	4632      	movcs	r2, r6
 8016624:	f7fe fba1 	bl	8014d6a <memcpy>
 8016628:	4629      	mov	r1, r5
 801662a:	4638      	mov	r0, r7
 801662c:	f7ff f9b2 	bl	8015994 <_free_r>
 8016630:	e7f1      	b.n	8016616 <_realloc_r+0x40>

08016632 <__ascii_wctomb>:
 8016632:	4603      	mov	r3, r0
 8016634:	4608      	mov	r0, r1
 8016636:	b141      	cbz	r1, 801664a <__ascii_wctomb+0x18>
 8016638:	2aff      	cmp	r2, #255	@ 0xff
 801663a:	d904      	bls.n	8016646 <__ascii_wctomb+0x14>
 801663c:	228a      	movs	r2, #138	@ 0x8a
 801663e:	601a      	str	r2, [r3, #0]
 8016640:	f04f 30ff 	mov.w	r0, #4294967295
 8016644:	4770      	bx	lr
 8016646:	700a      	strb	r2, [r1, #0]
 8016648:	2001      	movs	r0, #1
 801664a:	4770      	bx	lr

0801664c <__sfputc_r>:
 801664c:	6893      	ldr	r3, [r2, #8]
 801664e:	3b01      	subs	r3, #1
 8016650:	2b00      	cmp	r3, #0
 8016652:	b410      	push	{r4}
 8016654:	6093      	str	r3, [r2, #8]
 8016656:	da08      	bge.n	801666a <__sfputc_r+0x1e>
 8016658:	6994      	ldr	r4, [r2, #24]
 801665a:	42a3      	cmp	r3, r4
 801665c:	db01      	blt.n	8016662 <__sfputc_r+0x16>
 801665e:	290a      	cmp	r1, #10
 8016660:	d103      	bne.n	801666a <__sfputc_r+0x1e>
 8016662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016666:	f000 b933 	b.w	80168d0 <__swbuf_r>
 801666a:	6813      	ldr	r3, [r2, #0]
 801666c:	1c58      	adds	r0, r3, #1
 801666e:	6010      	str	r0, [r2, #0]
 8016670:	7019      	strb	r1, [r3, #0]
 8016672:	4608      	mov	r0, r1
 8016674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016678:	4770      	bx	lr

0801667a <__sfputs_r>:
 801667a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801667c:	4606      	mov	r6, r0
 801667e:	460f      	mov	r7, r1
 8016680:	4614      	mov	r4, r2
 8016682:	18d5      	adds	r5, r2, r3
 8016684:	42ac      	cmp	r4, r5
 8016686:	d101      	bne.n	801668c <__sfputs_r+0x12>
 8016688:	2000      	movs	r0, #0
 801668a:	e007      	b.n	801669c <__sfputs_r+0x22>
 801668c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016690:	463a      	mov	r2, r7
 8016692:	4630      	mov	r0, r6
 8016694:	f7ff ffda 	bl	801664c <__sfputc_r>
 8016698:	1c43      	adds	r3, r0, #1
 801669a:	d1f3      	bne.n	8016684 <__sfputs_r+0xa>
 801669c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080166a0 <_vfiprintf_r>:
 80166a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166a4:	460d      	mov	r5, r1
 80166a6:	b09d      	sub	sp, #116	@ 0x74
 80166a8:	4614      	mov	r4, r2
 80166aa:	4698      	mov	r8, r3
 80166ac:	4606      	mov	r6, r0
 80166ae:	b118      	cbz	r0, 80166b8 <_vfiprintf_r+0x18>
 80166b0:	6a03      	ldr	r3, [r0, #32]
 80166b2:	b90b      	cbnz	r3, 80166b8 <_vfiprintf_r+0x18>
 80166b4:	f7fe fa2e 	bl	8014b14 <__sinit>
 80166b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80166ba:	07d9      	lsls	r1, r3, #31
 80166bc:	d405      	bmi.n	80166ca <_vfiprintf_r+0x2a>
 80166be:	89ab      	ldrh	r3, [r5, #12]
 80166c0:	059a      	lsls	r2, r3, #22
 80166c2:	d402      	bmi.n	80166ca <_vfiprintf_r+0x2a>
 80166c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80166c6:	f7fe fb4e 	bl	8014d66 <__retarget_lock_acquire_recursive>
 80166ca:	89ab      	ldrh	r3, [r5, #12]
 80166cc:	071b      	lsls	r3, r3, #28
 80166ce:	d501      	bpl.n	80166d4 <_vfiprintf_r+0x34>
 80166d0:	692b      	ldr	r3, [r5, #16]
 80166d2:	b99b      	cbnz	r3, 80166fc <_vfiprintf_r+0x5c>
 80166d4:	4629      	mov	r1, r5
 80166d6:	4630      	mov	r0, r6
 80166d8:	f000 f938 	bl	801694c <__swsetup_r>
 80166dc:	b170      	cbz	r0, 80166fc <_vfiprintf_r+0x5c>
 80166de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80166e0:	07dc      	lsls	r4, r3, #31
 80166e2:	d504      	bpl.n	80166ee <_vfiprintf_r+0x4e>
 80166e4:	f04f 30ff 	mov.w	r0, #4294967295
 80166e8:	b01d      	add	sp, #116	@ 0x74
 80166ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166ee:	89ab      	ldrh	r3, [r5, #12]
 80166f0:	0598      	lsls	r0, r3, #22
 80166f2:	d4f7      	bmi.n	80166e4 <_vfiprintf_r+0x44>
 80166f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80166f6:	f7fe fb37 	bl	8014d68 <__retarget_lock_release_recursive>
 80166fa:	e7f3      	b.n	80166e4 <_vfiprintf_r+0x44>
 80166fc:	2300      	movs	r3, #0
 80166fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8016700:	2320      	movs	r3, #32
 8016702:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016706:	f8cd 800c 	str.w	r8, [sp, #12]
 801670a:	2330      	movs	r3, #48	@ 0x30
 801670c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80168bc <_vfiprintf_r+0x21c>
 8016710:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016714:	f04f 0901 	mov.w	r9, #1
 8016718:	4623      	mov	r3, r4
 801671a:	469a      	mov	sl, r3
 801671c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016720:	b10a      	cbz	r2, 8016726 <_vfiprintf_r+0x86>
 8016722:	2a25      	cmp	r2, #37	@ 0x25
 8016724:	d1f9      	bne.n	801671a <_vfiprintf_r+0x7a>
 8016726:	ebba 0b04 	subs.w	fp, sl, r4
 801672a:	d00b      	beq.n	8016744 <_vfiprintf_r+0xa4>
 801672c:	465b      	mov	r3, fp
 801672e:	4622      	mov	r2, r4
 8016730:	4629      	mov	r1, r5
 8016732:	4630      	mov	r0, r6
 8016734:	f7ff ffa1 	bl	801667a <__sfputs_r>
 8016738:	3001      	adds	r0, #1
 801673a:	f000 80a7 	beq.w	801688c <_vfiprintf_r+0x1ec>
 801673e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016740:	445a      	add	r2, fp
 8016742:	9209      	str	r2, [sp, #36]	@ 0x24
 8016744:	f89a 3000 	ldrb.w	r3, [sl]
 8016748:	2b00      	cmp	r3, #0
 801674a:	f000 809f 	beq.w	801688c <_vfiprintf_r+0x1ec>
 801674e:	2300      	movs	r3, #0
 8016750:	f04f 32ff 	mov.w	r2, #4294967295
 8016754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016758:	f10a 0a01 	add.w	sl, sl, #1
 801675c:	9304      	str	r3, [sp, #16]
 801675e:	9307      	str	r3, [sp, #28]
 8016760:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016764:	931a      	str	r3, [sp, #104]	@ 0x68
 8016766:	4654      	mov	r4, sl
 8016768:	2205      	movs	r2, #5
 801676a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801676e:	4853      	ldr	r0, [pc, #332]	@ (80168bc <_vfiprintf_r+0x21c>)
 8016770:	f7e9 fdb6 	bl	80002e0 <memchr>
 8016774:	9a04      	ldr	r2, [sp, #16]
 8016776:	b9d8      	cbnz	r0, 80167b0 <_vfiprintf_r+0x110>
 8016778:	06d1      	lsls	r1, r2, #27
 801677a:	bf44      	itt	mi
 801677c:	2320      	movmi	r3, #32
 801677e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016782:	0713      	lsls	r3, r2, #28
 8016784:	bf44      	itt	mi
 8016786:	232b      	movmi	r3, #43	@ 0x2b
 8016788:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801678c:	f89a 3000 	ldrb.w	r3, [sl]
 8016790:	2b2a      	cmp	r3, #42	@ 0x2a
 8016792:	d015      	beq.n	80167c0 <_vfiprintf_r+0x120>
 8016794:	9a07      	ldr	r2, [sp, #28]
 8016796:	4654      	mov	r4, sl
 8016798:	2000      	movs	r0, #0
 801679a:	f04f 0c0a 	mov.w	ip, #10
 801679e:	4621      	mov	r1, r4
 80167a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80167a4:	3b30      	subs	r3, #48	@ 0x30
 80167a6:	2b09      	cmp	r3, #9
 80167a8:	d94b      	bls.n	8016842 <_vfiprintf_r+0x1a2>
 80167aa:	b1b0      	cbz	r0, 80167da <_vfiprintf_r+0x13a>
 80167ac:	9207      	str	r2, [sp, #28]
 80167ae:	e014      	b.n	80167da <_vfiprintf_r+0x13a>
 80167b0:	eba0 0308 	sub.w	r3, r0, r8
 80167b4:	fa09 f303 	lsl.w	r3, r9, r3
 80167b8:	4313      	orrs	r3, r2
 80167ba:	9304      	str	r3, [sp, #16]
 80167bc:	46a2      	mov	sl, r4
 80167be:	e7d2      	b.n	8016766 <_vfiprintf_r+0xc6>
 80167c0:	9b03      	ldr	r3, [sp, #12]
 80167c2:	1d19      	adds	r1, r3, #4
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	9103      	str	r1, [sp, #12]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	bfbb      	ittet	lt
 80167cc:	425b      	neglt	r3, r3
 80167ce:	f042 0202 	orrlt.w	r2, r2, #2
 80167d2:	9307      	strge	r3, [sp, #28]
 80167d4:	9307      	strlt	r3, [sp, #28]
 80167d6:	bfb8      	it	lt
 80167d8:	9204      	strlt	r2, [sp, #16]
 80167da:	7823      	ldrb	r3, [r4, #0]
 80167dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80167de:	d10a      	bne.n	80167f6 <_vfiprintf_r+0x156>
 80167e0:	7863      	ldrb	r3, [r4, #1]
 80167e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80167e4:	d132      	bne.n	801684c <_vfiprintf_r+0x1ac>
 80167e6:	9b03      	ldr	r3, [sp, #12]
 80167e8:	1d1a      	adds	r2, r3, #4
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	9203      	str	r2, [sp, #12]
 80167ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80167f2:	3402      	adds	r4, #2
 80167f4:	9305      	str	r3, [sp, #20]
 80167f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80168cc <_vfiprintf_r+0x22c>
 80167fa:	7821      	ldrb	r1, [r4, #0]
 80167fc:	2203      	movs	r2, #3
 80167fe:	4650      	mov	r0, sl
 8016800:	f7e9 fd6e 	bl	80002e0 <memchr>
 8016804:	b138      	cbz	r0, 8016816 <_vfiprintf_r+0x176>
 8016806:	9b04      	ldr	r3, [sp, #16]
 8016808:	eba0 000a 	sub.w	r0, r0, sl
 801680c:	2240      	movs	r2, #64	@ 0x40
 801680e:	4082      	lsls	r2, r0
 8016810:	4313      	orrs	r3, r2
 8016812:	3401      	adds	r4, #1
 8016814:	9304      	str	r3, [sp, #16]
 8016816:	f814 1b01 	ldrb.w	r1, [r4], #1
 801681a:	4829      	ldr	r0, [pc, #164]	@ (80168c0 <_vfiprintf_r+0x220>)
 801681c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016820:	2206      	movs	r2, #6
 8016822:	f7e9 fd5d 	bl	80002e0 <memchr>
 8016826:	2800      	cmp	r0, #0
 8016828:	d03f      	beq.n	80168aa <_vfiprintf_r+0x20a>
 801682a:	4b26      	ldr	r3, [pc, #152]	@ (80168c4 <_vfiprintf_r+0x224>)
 801682c:	bb1b      	cbnz	r3, 8016876 <_vfiprintf_r+0x1d6>
 801682e:	9b03      	ldr	r3, [sp, #12]
 8016830:	3307      	adds	r3, #7
 8016832:	f023 0307 	bic.w	r3, r3, #7
 8016836:	3308      	adds	r3, #8
 8016838:	9303      	str	r3, [sp, #12]
 801683a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801683c:	443b      	add	r3, r7
 801683e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016840:	e76a      	b.n	8016718 <_vfiprintf_r+0x78>
 8016842:	fb0c 3202 	mla	r2, ip, r2, r3
 8016846:	460c      	mov	r4, r1
 8016848:	2001      	movs	r0, #1
 801684a:	e7a8      	b.n	801679e <_vfiprintf_r+0xfe>
 801684c:	2300      	movs	r3, #0
 801684e:	3401      	adds	r4, #1
 8016850:	9305      	str	r3, [sp, #20]
 8016852:	4619      	mov	r1, r3
 8016854:	f04f 0c0a 	mov.w	ip, #10
 8016858:	4620      	mov	r0, r4
 801685a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801685e:	3a30      	subs	r2, #48	@ 0x30
 8016860:	2a09      	cmp	r2, #9
 8016862:	d903      	bls.n	801686c <_vfiprintf_r+0x1cc>
 8016864:	2b00      	cmp	r3, #0
 8016866:	d0c6      	beq.n	80167f6 <_vfiprintf_r+0x156>
 8016868:	9105      	str	r1, [sp, #20]
 801686a:	e7c4      	b.n	80167f6 <_vfiprintf_r+0x156>
 801686c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016870:	4604      	mov	r4, r0
 8016872:	2301      	movs	r3, #1
 8016874:	e7f0      	b.n	8016858 <_vfiprintf_r+0x1b8>
 8016876:	ab03      	add	r3, sp, #12
 8016878:	9300      	str	r3, [sp, #0]
 801687a:	462a      	mov	r2, r5
 801687c:	4b12      	ldr	r3, [pc, #72]	@ (80168c8 <_vfiprintf_r+0x228>)
 801687e:	a904      	add	r1, sp, #16
 8016880:	4630      	mov	r0, r6
 8016882:	f7fd fd15 	bl	80142b0 <_printf_float>
 8016886:	4607      	mov	r7, r0
 8016888:	1c78      	adds	r0, r7, #1
 801688a:	d1d6      	bne.n	801683a <_vfiprintf_r+0x19a>
 801688c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801688e:	07d9      	lsls	r1, r3, #31
 8016890:	d405      	bmi.n	801689e <_vfiprintf_r+0x1fe>
 8016892:	89ab      	ldrh	r3, [r5, #12]
 8016894:	059a      	lsls	r2, r3, #22
 8016896:	d402      	bmi.n	801689e <_vfiprintf_r+0x1fe>
 8016898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801689a:	f7fe fa65 	bl	8014d68 <__retarget_lock_release_recursive>
 801689e:	89ab      	ldrh	r3, [r5, #12]
 80168a0:	065b      	lsls	r3, r3, #25
 80168a2:	f53f af1f 	bmi.w	80166e4 <_vfiprintf_r+0x44>
 80168a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80168a8:	e71e      	b.n	80166e8 <_vfiprintf_r+0x48>
 80168aa:	ab03      	add	r3, sp, #12
 80168ac:	9300      	str	r3, [sp, #0]
 80168ae:	462a      	mov	r2, r5
 80168b0:	4b05      	ldr	r3, [pc, #20]	@ (80168c8 <_vfiprintf_r+0x228>)
 80168b2:	a904      	add	r1, sp, #16
 80168b4:	4630      	mov	r0, r6
 80168b6:	f7fd ff83 	bl	80147c0 <_printf_i>
 80168ba:	e7e4      	b.n	8016886 <_vfiprintf_r+0x1e6>
 80168bc:	080171aa 	.word	0x080171aa
 80168c0:	080171b4 	.word	0x080171b4
 80168c4:	080142b1 	.word	0x080142b1
 80168c8:	0801667b 	.word	0x0801667b
 80168cc:	080171b0 	.word	0x080171b0

080168d0 <__swbuf_r>:
 80168d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168d2:	460e      	mov	r6, r1
 80168d4:	4614      	mov	r4, r2
 80168d6:	4605      	mov	r5, r0
 80168d8:	b118      	cbz	r0, 80168e2 <__swbuf_r+0x12>
 80168da:	6a03      	ldr	r3, [r0, #32]
 80168dc:	b90b      	cbnz	r3, 80168e2 <__swbuf_r+0x12>
 80168de:	f7fe f919 	bl	8014b14 <__sinit>
 80168e2:	69a3      	ldr	r3, [r4, #24]
 80168e4:	60a3      	str	r3, [r4, #8]
 80168e6:	89a3      	ldrh	r3, [r4, #12]
 80168e8:	071a      	lsls	r2, r3, #28
 80168ea:	d501      	bpl.n	80168f0 <__swbuf_r+0x20>
 80168ec:	6923      	ldr	r3, [r4, #16]
 80168ee:	b943      	cbnz	r3, 8016902 <__swbuf_r+0x32>
 80168f0:	4621      	mov	r1, r4
 80168f2:	4628      	mov	r0, r5
 80168f4:	f000 f82a 	bl	801694c <__swsetup_r>
 80168f8:	b118      	cbz	r0, 8016902 <__swbuf_r+0x32>
 80168fa:	f04f 37ff 	mov.w	r7, #4294967295
 80168fe:	4638      	mov	r0, r7
 8016900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016902:	6823      	ldr	r3, [r4, #0]
 8016904:	6922      	ldr	r2, [r4, #16]
 8016906:	1a98      	subs	r0, r3, r2
 8016908:	6963      	ldr	r3, [r4, #20]
 801690a:	b2f6      	uxtb	r6, r6
 801690c:	4283      	cmp	r3, r0
 801690e:	4637      	mov	r7, r6
 8016910:	dc05      	bgt.n	801691e <__swbuf_r+0x4e>
 8016912:	4621      	mov	r1, r4
 8016914:	4628      	mov	r0, r5
 8016916:	f7ff fddd 	bl	80164d4 <_fflush_r>
 801691a:	2800      	cmp	r0, #0
 801691c:	d1ed      	bne.n	80168fa <__swbuf_r+0x2a>
 801691e:	68a3      	ldr	r3, [r4, #8]
 8016920:	3b01      	subs	r3, #1
 8016922:	60a3      	str	r3, [r4, #8]
 8016924:	6823      	ldr	r3, [r4, #0]
 8016926:	1c5a      	adds	r2, r3, #1
 8016928:	6022      	str	r2, [r4, #0]
 801692a:	701e      	strb	r6, [r3, #0]
 801692c:	6962      	ldr	r2, [r4, #20]
 801692e:	1c43      	adds	r3, r0, #1
 8016930:	429a      	cmp	r2, r3
 8016932:	d004      	beq.n	801693e <__swbuf_r+0x6e>
 8016934:	89a3      	ldrh	r3, [r4, #12]
 8016936:	07db      	lsls	r3, r3, #31
 8016938:	d5e1      	bpl.n	80168fe <__swbuf_r+0x2e>
 801693a:	2e0a      	cmp	r6, #10
 801693c:	d1df      	bne.n	80168fe <__swbuf_r+0x2e>
 801693e:	4621      	mov	r1, r4
 8016940:	4628      	mov	r0, r5
 8016942:	f7ff fdc7 	bl	80164d4 <_fflush_r>
 8016946:	2800      	cmp	r0, #0
 8016948:	d0d9      	beq.n	80168fe <__swbuf_r+0x2e>
 801694a:	e7d6      	b.n	80168fa <__swbuf_r+0x2a>

0801694c <__swsetup_r>:
 801694c:	b538      	push	{r3, r4, r5, lr}
 801694e:	4b29      	ldr	r3, [pc, #164]	@ (80169f4 <__swsetup_r+0xa8>)
 8016950:	4605      	mov	r5, r0
 8016952:	6818      	ldr	r0, [r3, #0]
 8016954:	460c      	mov	r4, r1
 8016956:	b118      	cbz	r0, 8016960 <__swsetup_r+0x14>
 8016958:	6a03      	ldr	r3, [r0, #32]
 801695a:	b90b      	cbnz	r3, 8016960 <__swsetup_r+0x14>
 801695c:	f7fe f8da 	bl	8014b14 <__sinit>
 8016960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016964:	0719      	lsls	r1, r3, #28
 8016966:	d422      	bmi.n	80169ae <__swsetup_r+0x62>
 8016968:	06da      	lsls	r2, r3, #27
 801696a:	d407      	bmi.n	801697c <__swsetup_r+0x30>
 801696c:	2209      	movs	r2, #9
 801696e:	602a      	str	r2, [r5, #0]
 8016970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016974:	81a3      	strh	r3, [r4, #12]
 8016976:	f04f 30ff 	mov.w	r0, #4294967295
 801697a:	e033      	b.n	80169e4 <__swsetup_r+0x98>
 801697c:	0758      	lsls	r0, r3, #29
 801697e:	d512      	bpl.n	80169a6 <__swsetup_r+0x5a>
 8016980:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016982:	b141      	cbz	r1, 8016996 <__swsetup_r+0x4a>
 8016984:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016988:	4299      	cmp	r1, r3
 801698a:	d002      	beq.n	8016992 <__swsetup_r+0x46>
 801698c:	4628      	mov	r0, r5
 801698e:	f7ff f801 	bl	8015994 <_free_r>
 8016992:	2300      	movs	r3, #0
 8016994:	6363      	str	r3, [r4, #52]	@ 0x34
 8016996:	89a3      	ldrh	r3, [r4, #12]
 8016998:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801699c:	81a3      	strh	r3, [r4, #12]
 801699e:	2300      	movs	r3, #0
 80169a0:	6063      	str	r3, [r4, #4]
 80169a2:	6923      	ldr	r3, [r4, #16]
 80169a4:	6023      	str	r3, [r4, #0]
 80169a6:	89a3      	ldrh	r3, [r4, #12]
 80169a8:	f043 0308 	orr.w	r3, r3, #8
 80169ac:	81a3      	strh	r3, [r4, #12]
 80169ae:	6923      	ldr	r3, [r4, #16]
 80169b0:	b94b      	cbnz	r3, 80169c6 <__swsetup_r+0x7a>
 80169b2:	89a3      	ldrh	r3, [r4, #12]
 80169b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80169b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80169bc:	d003      	beq.n	80169c6 <__swsetup_r+0x7a>
 80169be:	4621      	mov	r1, r4
 80169c0:	4628      	mov	r0, r5
 80169c2:	f000 f88b 	bl	8016adc <__smakebuf_r>
 80169c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169ca:	f013 0201 	ands.w	r2, r3, #1
 80169ce:	d00a      	beq.n	80169e6 <__swsetup_r+0x9a>
 80169d0:	2200      	movs	r2, #0
 80169d2:	60a2      	str	r2, [r4, #8]
 80169d4:	6962      	ldr	r2, [r4, #20]
 80169d6:	4252      	negs	r2, r2
 80169d8:	61a2      	str	r2, [r4, #24]
 80169da:	6922      	ldr	r2, [r4, #16]
 80169dc:	b942      	cbnz	r2, 80169f0 <__swsetup_r+0xa4>
 80169de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80169e2:	d1c5      	bne.n	8016970 <__swsetup_r+0x24>
 80169e4:	bd38      	pop	{r3, r4, r5, pc}
 80169e6:	0799      	lsls	r1, r3, #30
 80169e8:	bf58      	it	pl
 80169ea:	6962      	ldrpl	r2, [r4, #20]
 80169ec:	60a2      	str	r2, [r4, #8]
 80169ee:	e7f4      	b.n	80169da <__swsetup_r+0x8e>
 80169f0:	2000      	movs	r0, #0
 80169f2:	e7f7      	b.n	80169e4 <__swsetup_r+0x98>
 80169f4:	24000128 	.word	0x24000128

080169f8 <_raise_r>:
 80169f8:	291f      	cmp	r1, #31
 80169fa:	b538      	push	{r3, r4, r5, lr}
 80169fc:	4605      	mov	r5, r0
 80169fe:	460c      	mov	r4, r1
 8016a00:	d904      	bls.n	8016a0c <_raise_r+0x14>
 8016a02:	2316      	movs	r3, #22
 8016a04:	6003      	str	r3, [r0, #0]
 8016a06:	f04f 30ff 	mov.w	r0, #4294967295
 8016a0a:	bd38      	pop	{r3, r4, r5, pc}
 8016a0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016a0e:	b112      	cbz	r2, 8016a16 <_raise_r+0x1e>
 8016a10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016a14:	b94b      	cbnz	r3, 8016a2a <_raise_r+0x32>
 8016a16:	4628      	mov	r0, r5
 8016a18:	f000 f830 	bl	8016a7c <_getpid_r>
 8016a1c:	4622      	mov	r2, r4
 8016a1e:	4601      	mov	r1, r0
 8016a20:	4628      	mov	r0, r5
 8016a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a26:	f000 b817 	b.w	8016a58 <_kill_r>
 8016a2a:	2b01      	cmp	r3, #1
 8016a2c:	d00a      	beq.n	8016a44 <_raise_r+0x4c>
 8016a2e:	1c59      	adds	r1, r3, #1
 8016a30:	d103      	bne.n	8016a3a <_raise_r+0x42>
 8016a32:	2316      	movs	r3, #22
 8016a34:	6003      	str	r3, [r0, #0]
 8016a36:	2001      	movs	r0, #1
 8016a38:	e7e7      	b.n	8016a0a <_raise_r+0x12>
 8016a3a:	2100      	movs	r1, #0
 8016a3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016a40:	4620      	mov	r0, r4
 8016a42:	4798      	blx	r3
 8016a44:	2000      	movs	r0, #0
 8016a46:	e7e0      	b.n	8016a0a <_raise_r+0x12>

08016a48 <raise>:
 8016a48:	4b02      	ldr	r3, [pc, #8]	@ (8016a54 <raise+0xc>)
 8016a4a:	4601      	mov	r1, r0
 8016a4c:	6818      	ldr	r0, [r3, #0]
 8016a4e:	f7ff bfd3 	b.w	80169f8 <_raise_r>
 8016a52:	bf00      	nop
 8016a54:	24000128 	.word	0x24000128

08016a58 <_kill_r>:
 8016a58:	b538      	push	{r3, r4, r5, lr}
 8016a5a:	4d07      	ldr	r5, [pc, #28]	@ (8016a78 <_kill_r+0x20>)
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	4604      	mov	r4, r0
 8016a60:	4608      	mov	r0, r1
 8016a62:	4611      	mov	r1, r2
 8016a64:	602b      	str	r3, [r5, #0]
 8016a66:	f7eb fb07 	bl	8002078 <_kill>
 8016a6a:	1c43      	adds	r3, r0, #1
 8016a6c:	d102      	bne.n	8016a74 <_kill_r+0x1c>
 8016a6e:	682b      	ldr	r3, [r5, #0]
 8016a70:	b103      	cbz	r3, 8016a74 <_kill_r+0x1c>
 8016a72:	6023      	str	r3, [r4, #0]
 8016a74:	bd38      	pop	{r3, r4, r5, pc}
 8016a76:	bf00      	nop
 8016a78:	24027a38 	.word	0x24027a38

08016a7c <_getpid_r>:
 8016a7c:	f7eb baf4 	b.w	8002068 <_getpid>

08016a80 <_malloc_usable_size_r>:
 8016a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a84:	1f18      	subs	r0, r3, #4
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	bfbc      	itt	lt
 8016a8a:	580b      	ldrlt	r3, [r1, r0]
 8016a8c:	18c0      	addlt	r0, r0, r3
 8016a8e:	4770      	bx	lr

08016a90 <__swhatbuf_r>:
 8016a90:	b570      	push	{r4, r5, r6, lr}
 8016a92:	460c      	mov	r4, r1
 8016a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a98:	2900      	cmp	r1, #0
 8016a9a:	b096      	sub	sp, #88	@ 0x58
 8016a9c:	4615      	mov	r5, r2
 8016a9e:	461e      	mov	r6, r3
 8016aa0:	da0d      	bge.n	8016abe <__swhatbuf_r+0x2e>
 8016aa2:	89a3      	ldrh	r3, [r4, #12]
 8016aa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016aa8:	f04f 0100 	mov.w	r1, #0
 8016aac:	bf14      	ite	ne
 8016aae:	2340      	movne	r3, #64	@ 0x40
 8016ab0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016ab4:	2000      	movs	r0, #0
 8016ab6:	6031      	str	r1, [r6, #0]
 8016ab8:	602b      	str	r3, [r5, #0]
 8016aba:	b016      	add	sp, #88	@ 0x58
 8016abc:	bd70      	pop	{r4, r5, r6, pc}
 8016abe:	466a      	mov	r2, sp
 8016ac0:	f000 f848 	bl	8016b54 <_fstat_r>
 8016ac4:	2800      	cmp	r0, #0
 8016ac6:	dbec      	blt.n	8016aa2 <__swhatbuf_r+0x12>
 8016ac8:	9901      	ldr	r1, [sp, #4]
 8016aca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016ace:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016ad2:	4259      	negs	r1, r3
 8016ad4:	4159      	adcs	r1, r3
 8016ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016ada:	e7eb      	b.n	8016ab4 <__swhatbuf_r+0x24>

08016adc <__smakebuf_r>:
 8016adc:	898b      	ldrh	r3, [r1, #12]
 8016ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ae0:	079d      	lsls	r5, r3, #30
 8016ae2:	4606      	mov	r6, r0
 8016ae4:	460c      	mov	r4, r1
 8016ae6:	d507      	bpl.n	8016af8 <__smakebuf_r+0x1c>
 8016ae8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016aec:	6023      	str	r3, [r4, #0]
 8016aee:	6123      	str	r3, [r4, #16]
 8016af0:	2301      	movs	r3, #1
 8016af2:	6163      	str	r3, [r4, #20]
 8016af4:	b003      	add	sp, #12
 8016af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016af8:	ab01      	add	r3, sp, #4
 8016afa:	466a      	mov	r2, sp
 8016afc:	f7ff ffc8 	bl	8016a90 <__swhatbuf_r>
 8016b00:	9f00      	ldr	r7, [sp, #0]
 8016b02:	4605      	mov	r5, r0
 8016b04:	4639      	mov	r1, r7
 8016b06:	4630      	mov	r0, r6
 8016b08:	f7fd fab8 	bl	801407c <_malloc_r>
 8016b0c:	b948      	cbnz	r0, 8016b22 <__smakebuf_r+0x46>
 8016b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b12:	059a      	lsls	r2, r3, #22
 8016b14:	d4ee      	bmi.n	8016af4 <__smakebuf_r+0x18>
 8016b16:	f023 0303 	bic.w	r3, r3, #3
 8016b1a:	f043 0302 	orr.w	r3, r3, #2
 8016b1e:	81a3      	strh	r3, [r4, #12]
 8016b20:	e7e2      	b.n	8016ae8 <__smakebuf_r+0xc>
 8016b22:	89a3      	ldrh	r3, [r4, #12]
 8016b24:	6020      	str	r0, [r4, #0]
 8016b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016b2a:	81a3      	strh	r3, [r4, #12]
 8016b2c:	9b01      	ldr	r3, [sp, #4]
 8016b2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016b32:	b15b      	cbz	r3, 8016b4c <__smakebuf_r+0x70>
 8016b34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b38:	4630      	mov	r0, r6
 8016b3a:	f000 f81d 	bl	8016b78 <_isatty_r>
 8016b3e:	b128      	cbz	r0, 8016b4c <__smakebuf_r+0x70>
 8016b40:	89a3      	ldrh	r3, [r4, #12]
 8016b42:	f023 0303 	bic.w	r3, r3, #3
 8016b46:	f043 0301 	orr.w	r3, r3, #1
 8016b4a:	81a3      	strh	r3, [r4, #12]
 8016b4c:	89a3      	ldrh	r3, [r4, #12]
 8016b4e:	431d      	orrs	r5, r3
 8016b50:	81a5      	strh	r5, [r4, #12]
 8016b52:	e7cf      	b.n	8016af4 <__smakebuf_r+0x18>

08016b54 <_fstat_r>:
 8016b54:	b538      	push	{r3, r4, r5, lr}
 8016b56:	4d07      	ldr	r5, [pc, #28]	@ (8016b74 <_fstat_r+0x20>)
 8016b58:	2300      	movs	r3, #0
 8016b5a:	4604      	mov	r4, r0
 8016b5c:	4608      	mov	r0, r1
 8016b5e:	4611      	mov	r1, r2
 8016b60:	602b      	str	r3, [r5, #0]
 8016b62:	f7eb fae9 	bl	8002138 <_fstat>
 8016b66:	1c43      	adds	r3, r0, #1
 8016b68:	d102      	bne.n	8016b70 <_fstat_r+0x1c>
 8016b6a:	682b      	ldr	r3, [r5, #0]
 8016b6c:	b103      	cbz	r3, 8016b70 <_fstat_r+0x1c>
 8016b6e:	6023      	str	r3, [r4, #0]
 8016b70:	bd38      	pop	{r3, r4, r5, pc}
 8016b72:	bf00      	nop
 8016b74:	24027a38 	.word	0x24027a38

08016b78 <_isatty_r>:
 8016b78:	b538      	push	{r3, r4, r5, lr}
 8016b7a:	4d06      	ldr	r5, [pc, #24]	@ (8016b94 <_isatty_r+0x1c>)
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	4604      	mov	r4, r0
 8016b80:	4608      	mov	r0, r1
 8016b82:	602b      	str	r3, [r5, #0]
 8016b84:	f7eb fae8 	bl	8002158 <_isatty>
 8016b88:	1c43      	adds	r3, r0, #1
 8016b8a:	d102      	bne.n	8016b92 <_isatty_r+0x1a>
 8016b8c:	682b      	ldr	r3, [r5, #0]
 8016b8e:	b103      	cbz	r3, 8016b92 <_isatty_r+0x1a>
 8016b90:	6023      	str	r3, [r4, #0]
 8016b92:	bd38      	pop	{r3, r4, r5, pc}
 8016b94:	24027a38 	.word	0x24027a38

08016b98 <_init>:
 8016b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b9a:	bf00      	nop
 8016b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b9e:	bc08      	pop	{r3}
 8016ba0:	469e      	mov	lr, r3
 8016ba2:	4770      	bx	lr

08016ba4 <_fini>:
 8016ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ba6:	bf00      	nop
 8016ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016baa:	bc08      	pop	{r3}
 8016bac:	469e      	mov	lr, r3
 8016bae:	4770      	bx	lr
